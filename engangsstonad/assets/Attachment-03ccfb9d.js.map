{"version":3,"file":"Attachment-03ccfb9d.js","sources":["../../src/types/OmBarnet.ts","../../../../node_modules/.pnpm/bytes@3.1.2/node_modules/bytes/index.js","../../src/fpcommon/uploader/fileUtils.ts","../../src/fpcommon/uploader/liste/Attachment.tsx","../../src/fpcommon/uploader/liste/AttachmentList.tsx","../../src/fpcommon/uploader/typer/Attachment.ts"],"sourcesContent":["export type BarnetErFødt = {\n    erBarnetFødt: true;\n    antallBarn: number;\n    fødselsdatoer: Array<{\n        dato: string;\n    }>;\n};\n\nexport type BarnetErIkkeFødt = {\n    erBarnetFødt: false;\n    antallBarn: number;\n    termindato: string;\n};\n\nexport type Fødsel = BarnetErFødt | BarnetErIkkeFødt;\n\nexport type Adopsjon = {\n    adopsjonAvEktefellesBarn: boolean;\n    adopsjonsdato: string;\n    antallBarn: number;\n    søkerAdopsjonAlene?: boolean;\n    fødselsdatoer: Array<{\n        dato: string;\n    }>;\n};\n\nexport type OmBarnet = Fødsel | Adopsjon;\n\nexport const erAdopsjon = (omBarnet: OmBarnet): omBarnet is Adopsjon => {\n    if ((omBarnet as Adopsjon).adopsjonsdato) {\n        return true;\n    }\n    return false;\n};\n\nexport const erBarnetIkkeFødt = (omBarnet: OmBarnet): omBarnet is BarnetErIkkeFødt => {\n    if ((omBarnet as BarnetErIkkeFødt).termindato) {\n        return true;\n    }\n    return false;\n};\n\nexport const erBarnetFødt = (omBarnet: OmBarnet): omBarnet is BarnetErFødt => {\n    if ((omBarnet as BarnetErFødt).erBarnetFødt === true) {\n        return true;\n    }\n    return false;\n};\n","/*!\n * bytes\n * Copyright(c) 2012-2014 TJ Holowaychuk\n * Copyright(c) 2015 Jed Watson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = bytes;\nmodule.exports.format = format;\nmodule.exports.parse = parse;\n\n/**\n * Module variables.\n * @private\n */\n\nvar formatThousandsRegExp = /\\B(?=(\\d{3})+(?!\\d))/g;\n\nvar formatDecimalsRegExp = /(?:\\.0*|(\\.[^0]+)0+)$/;\n\nvar map = {\n  b:  1,\n  kb: 1 << 10,\n  mb: 1 << 20,\n  gb: 1 << 30,\n  tb: Math.pow(1024, 4),\n  pb: Math.pow(1024, 5),\n};\n\nvar parseRegExp = /^((-|\\+)?(\\d+(?:\\.\\d+)?)) *(kb|mb|gb|tb|pb)$/i;\n\n/**\n * Convert the given value in bytes into a string or parse to string to an integer in bytes.\n *\n * @param {string|number} value\n * @param {{\n *  case: [string],\n *  decimalPlaces: [number]\n *  fixedDecimals: [boolean]\n *  thousandsSeparator: [string]\n *  unitSeparator: [string]\n *  }} [options] bytes options.\n *\n * @returns {string|number|null}\n */\n\nfunction bytes(value, options) {\n  if (typeof value === 'string') {\n    return parse(value);\n  }\n\n  if (typeof value === 'number') {\n    return format(value, options);\n  }\n\n  return null;\n}\n\n/**\n * Format the given value in bytes into a string.\n *\n * If the value is negative, it is kept as such. If it is a float,\n * it is rounded.\n *\n * @param {number} value\n * @param {object} [options]\n * @param {number} [options.decimalPlaces=2]\n * @param {number} [options.fixedDecimals=false]\n * @param {string} [options.thousandsSeparator=]\n * @param {string} [options.unit=]\n * @param {string} [options.unitSeparator=]\n *\n * @returns {string|null}\n * @public\n */\n\nfunction format(value, options) {\n  if (!Number.isFinite(value)) {\n    return null;\n  }\n\n  var mag = Math.abs(value);\n  var thousandsSeparator = (options && options.thousandsSeparator) || '';\n  var unitSeparator = (options && options.unitSeparator) || '';\n  var decimalPlaces = (options && options.decimalPlaces !== undefined) ? options.decimalPlaces : 2;\n  var fixedDecimals = Boolean(options && options.fixedDecimals);\n  var unit = (options && options.unit) || '';\n\n  if (!unit || !map[unit.toLowerCase()]) {\n    if (mag >= map.pb) {\n      unit = 'PB';\n    } else if (mag >= map.tb) {\n      unit = 'TB';\n    } else if (mag >= map.gb) {\n      unit = 'GB';\n    } else if (mag >= map.mb) {\n      unit = 'MB';\n    } else if (mag >= map.kb) {\n      unit = 'KB';\n    } else {\n      unit = 'B';\n    }\n  }\n\n  var val = value / map[unit.toLowerCase()];\n  var str = val.toFixed(decimalPlaces);\n\n  if (!fixedDecimals) {\n    str = str.replace(formatDecimalsRegExp, '$1');\n  }\n\n  if (thousandsSeparator) {\n    str = str.split('.').map(function (s, i) {\n      return i === 0\n        ? s.replace(formatThousandsRegExp, thousandsSeparator)\n        : s\n    }).join('.');\n  }\n\n  return str + unitSeparator + unit;\n}\n\n/**\n * Parse the string value into an integer in bytes.\n *\n * If no unit is given, it is assumed the value is in bytes.\n *\n * @param {number|string} val\n *\n * @returns {number|null}\n * @public\n */\n\nfunction parse(val) {\n  if (typeof val === 'number' && !isNaN(val)) {\n    return val;\n  }\n\n  if (typeof val !== 'string') {\n    return null;\n  }\n\n  // Test if the string passed is valid\n  var results = parseRegExp.exec(val);\n  var floatValue;\n  var unit = 'b';\n\n  if (!results) {\n    // Nothing could be extracted from the given string\n    floatValue = parseInt(val, 10);\n    unit = 'b'\n  } else {\n    // Retrieve the value and the unit\n    floatValue = parseFloat(results[1]);\n    unit = results[4].toLowerCase();\n  }\n\n  if (isNaN(floatValue)) {\n    return null;\n  }\n\n  return Math.floor(map[unit] * floatValue);\n}\n","import Bytes from 'bytes';\nimport { Attachment, AttachmentType, Skjemanummer } from './typer/Attachment';\n\nconst s4 = (): string =>\n    Math.floor((1 + Math.random()) * 0x10000)\n        .toString()\n        .substring(1);\n\n//TODO Denne ligg sikkert ein annan stad (evt flytt ut)\nconst guid = (): string => `${s4()}${s4()}-${s4()}-${s4()}-${s4()}-${s4()}${s4()}${s4()}`;\n\nexport const bytesString = (bytes: number): string => {\n    return Bytes(bytes, {\n        unitSeparator: ' ',\n        thousandsSeparator: ' ',\n        decimalPlaces: 1,\n        fixedDecimals: false,\n    });\n};\n\nexport const getTotalFileSize = (files: File[]): number => {\n    return files.reduce(\n        (a, b) =>\n            ({\n                size: a.size + b.size,\n            }) as any,\n        { size: 0 },\n    ).size;\n};\n\nconst generateAttachmentId = () => 'V'.concat(guid().replace(/-/g, ''));\n\nexport const mapFileToAttachment = (file: File, type: AttachmentType, skjemanummer: Skjemanummer): Attachment => {\n    return {\n        id: generateAttachmentId(),\n        file,\n        filename: file.name,\n        filesize: file.size,\n        uploaded: false,\n        pending: false,\n        type,\n        skjemanummer,\n    };\n};\n","import { VStack, Link, Loader, HStack, Spacer } from '@navikt/ds-react';\nimport { useIntl } from 'react-intl';\nimport { XMarkIcon, FileCheckmarkIcon } from '@navikt/aksel-icons';\n\nimport { Attachment as AttachmentType } from '../typer/Attachment';\nimport { bytesString } from '../fileUtils';\n\nimport './attachment.less';\n\ninterface OwnProps {\n    attachment: AttachmentType;\n    showFileSize?: boolean;\n    onDelete?: (file: AttachmentType) => void;\n}\n\ntype Props = OwnProps;\n\nconst Attachment: React.FunctionComponent<Props> = ({ attachment, showFileSize, onDelete }) => {\n    const intl = useIntl();\n\n    return (\n        <div className=\"attachmentPanel\">\n            <HStack gap=\"4\" align=\"center\">\n                <div>\n                    {attachment.pending && <Loader type=\"S\" />}\n                    <FileCheckmarkIcon width={24} height={24} />\n                </div>\n                <VStack gap=\"1\">\n                    {attachment.url ? (\n                        <Link href={attachment.url} target=\"_blank\">\n                            {attachment.filename}\n                        </Link>\n                    ) : (\n                        <span>{attachment.filename}</span>\n                    )}\n                    {showFileSize && <div>{bytesString(attachment.filesize)}</div>}\n                </VStack>\n                {onDelete && (\n                    <>\n                        <Spacer />\n                        <XMarkIcon\n                            onClick={() => onDelete(attachment)}\n                            height={24}\n                            width={24}\n                            cursor=\"pointer\"\n                            aria-label={intl.formatMessage(\n                                { id: 'vedlegg.arialabel.slett' },\n                                { navn: attachment.filename },\n                            )}\n                        />\n                    </>\n                )}\n            </HStack>\n        </div>\n    );\n};\n\nexport default Attachment;\n","import { Fragment } from 'react';\nimport { VStack } from '@navikt/ds-react';\nimport { Attachment } from '../typer/Attachment';\nimport AttachmentComponent from './Attachment';\nimport './attachment.less';\nimport { guid } from '@navikt/fp-common';\n\ninterface Props {\n    attachments: Attachment[];\n    showFileSize?: boolean;\n    onDelete?: (file: Attachment) => void;\n}\n\nconst AttachmentList: React.FunctionComponent<Props> = (props) => {\n    const { attachments, showFileSize, onDelete } = props;\n\n    return (\n        <>\n            {attachments.length > 0 && (\n                <VStack gap=\"2\">\n                    {attachments.map((attachment) => (\n                        <Fragment key={guid()}>\n                            <AttachmentComponent\n                                attachment={attachment}\n                                onDelete={onDelete}\n                                showFileSize={showFileSize}\n                            />\n                        </Fragment>\n                    ))}\n                </VStack>\n            )}\n        </>\n    );\n};\nexport default AttachmentList;\n","export interface Attachment {\n    id: string;\n    filename: string;\n    filesize: number;\n    file: File;\n    url?: string;\n    uuid?: string;\n    pending: boolean;\n    uploaded: boolean;\n    type: AttachmentType;\n    skjemanummer: Skjemanummer;\n    error?: any;\n}\n\nexport enum AttachmentType {\n    TERMINBEKREFTELSE = 'terminbekreftelse',\n    OMSORGSOVERTAKELSE = 'omsorgsovertakelse',\n}\n\nexport enum Skjemanummer {\n    TERMINBEKREFTELSE = 'I000062',\n    OMSORGSOVERTAKELSE = 'I000042',\n}\n"],"names":["erAdopsjon","omBarnet","erBarnetIkkeFødt","erBarnetFødt","bytesModule","bytes","format","parse","formatThousandsRegExp","formatDecimalsRegExp","map","parseRegExp","value","options","mag","thousandsSeparator","unitSeparator","decimalPlaces","fixedDecimals","unit","val","str","s","i","results","floatValue","s4","guid","bytesString","Bytes","generateAttachmentId","mapFileToAttachment","file","type","skjemanummer","Attachment","attachment","showFileSize","onDelete","intl","useIntl","jsx","jsxs","HStack","Loader","FileCheckmarkIcon","VStack","Link","Fragment","Spacer","XMarkIcon","AttachmentList","props","attachments","Fragment2","AttachmentComponent","AttachmentType","Skjemanummer"],"mappings":"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","x_google_ignoreList":[1]}