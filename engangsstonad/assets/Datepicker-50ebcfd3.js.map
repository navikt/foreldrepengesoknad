{"version":3,"file":"Datepicker-50ebcfd3.js","sources":["../../src/fpcommon/form/Datepicker.tsx"],"sourcesContent":["import React, { useState, FunctionComponent, ReactNode, useMemo, useCallback } from 'react';\nimport { useFormContext, useController } from 'react-hook-form';\nimport customParseFormat from 'dayjs/plugin/customParseFormat';\nimport dayjs from 'dayjs';\nimport { DatePicker, useDatepicker } from '@navikt/ds-react';\n\nimport { getError, getValidationRules } from './formUtils';\n\ndayjs.extend(customParseFormat);\n\nexport const ISO_DATE_FORMAT = 'YYYY-MM-DD';\nexport const DDMMYYYY_DATE_FORMAT = 'DD.MM.YYYY';\n\nconst TIDENES_MORGEN = dayjs('1000-01-01').toDate();\nconst TIDENES_ENDE = dayjs('9999-31-12').toDate();\n\nconst findDisabledDays = (minDate?: Date, maxDate?: Date): Array<{ from: Date; to?: Date }> => {\n    const disabledDays = [];\n    if (minDate) {\n        disabledDays.push({\n            from: dayjs(TIDENES_MORGEN).toDate(),\n            to: dayjs(minDate).subtract(1, 'day').toDate(),\n        });\n    }\n    if (maxDate) {\n        disabledDays.push({\n            from: dayjs(maxDate).add(1, 'day').toDate(),\n            to: dayjs(TIDENES_ENDE).toDate(),\n        });\n    }\n    return disabledDays;\n};\n\nexport interface DatepickerProps {\n    name: string;\n    label?: string | ReactNode;\n    description?: string;\n    validate?: Array<(value: string) => any>;\n    onChange?: (value: any) => void;\n    minDate?: Date;\n    maxDate?: Date;\n    defaultMonth?: Date;\n}\n\nconst Datepicker: FunctionComponent<DatepickerProps> = ({\n    name,\n    label,\n    description,\n    validate = [],\n    onChange,\n    minDate,\n    maxDate,\n    defaultMonth,\n}): JSX.Element => {\n    const {\n        formState: { errors },\n    } = useFormContext();\n\n    const { field } = useController({\n        name,\n        rules: {\n            validate: useMemo(() => getValidationRules(validate), [validate]),\n        },\n    });\n\n    const defaultDate = field.value ? dayjs(field.value, ISO_DATE_FORMAT, true).format(DDMMYYYY_DATE_FORMAT) : '';\n    const [fieldValue, setFieldValue] = useState<string>(defaultDate);\n\n    const { datepickerProps, inputProps } = useDatepicker({\n        onDateChange: (date) => {\n            if (date !== undefined) {\n                const verdi = dayjs(date).format(ISO_DATE_FORMAT);\n                if (onChange) {\n                    onChange(verdi);\n                }\n                field.onChange(verdi);\n                setFieldValue(dayjs(verdi, ISO_DATE_FORMAT, true).format(DDMMYYYY_DATE_FORMAT));\n            }\n        },\n        defaultSelected: field.value ? dayjs(field.value, ISO_DATE_FORMAT, true).toDate() : undefined,\n        defaultMonth: defaultMonth,\n    });\n\n    const onChangeInput = useCallback(\n        (event: React.ChangeEvent<HTMLInputElement>) => {\n            const verdi = dayjs(event.target.value, DDMMYYYY_DATE_FORMAT, true).format(ISO_DATE_FORMAT);\n            const validDate = verdi !== 'Invalid Date';\n\n            setFieldValue(event.target.value);\n            if (onChange) {\n                onChange(validDate ? verdi : event.target.value);\n            }\n            field.onChange(validDate ? verdi : event.target.value);\n        },\n        [setFieldValue, onChange, field],\n    );\n\n    const disabledDays = useMemo(\n        () => (minDate || maxDate ? findDisabledDays(minDate, maxDate) : undefined),\n        [minDate, maxDate],\n    );\n\n    return (\n        <DatePicker {...datepickerProps} disabled={disabledDays} strategy=\"fixed\">\n            <DatePicker.Input\n                {...inputProps}\n                ref={field.ref}\n                onChange={onChangeInput}\n                value={fieldValue}\n                label={label}\n                description={description}\n                error={getError(errors, name)}\n                placeholder=\"dd.mm.책책책책\"\n            />\n        </DatePicker>\n    );\n};\n\nexport default Datepicker;\n"],"names":["dayjs","customParseFormat","ISO_DATE_FORMAT","DDMMYYYY_DATE_FORMAT","TIDENES_MORGEN","TIDENES_ENDE","findDisabledDays","minDate","maxDate","disabledDays","Datepicker","name","label","description","validate","onChange","defaultMonth","errors","useFormContext","field","useController","useMemo","getValidationRules","defaultDate","fieldValue","setFieldValue","useState","datepickerProps","inputProps","useDatepicker","date","verdi","onChangeInput","useCallback","event","validDate","jsx","DatePicker","getError"],"mappings":"qOAQAA,EAAA,OAAAC,CAAA,EAEO,MAAAC,EAAA,aACAC,EAAA,aAEPC,EAAAJ,EAAA,YAAA,EAAA,OAAA,EACAK,EAAAL,EAAA,YAAA,EAAA,OAAA,EAEAM,EAAA,CAAAC,EAAAC,IAAA,CACI,MAAAC,EAAA,CAAA,EACA,OAAAF,GACIE,EAAA,KAAA,CAAkB,KAAAT,EAAAI,CAAA,EAAA,OAAA,EACqB,GAAAJ,EAAAO,CAAA,EAAA,SAAA,EAAA,KAAA,EAAA,OAAA,CACU,CAAA,EAGrDC,GACIC,EAAA,KAAA,CAAkB,KAAAT,EAAAQ,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,OAAA,EAC4B,GAAAR,EAAAK,CAAA,EAAA,OAAA,CACX,CAAA,EAGvCI,CACJ,EAaAC,EAAA,CAAA,CAAwD,KAAAC,EACpD,MAAAC,EACA,YAAAC,EACA,SAAAC,EAAA,CAAA,EACY,SAAAC,EACZ,QAAAR,EACA,QAAAC,EACA,aAAAQ,CAEJ,IAAA,CACI,KAAA,CAAM,UAAA,CAAA,OAAAC,CAAA,CACkB,EAAAC,EAAA,EAGxB,CAAA,MAAAC,CAAA,EAAAC,EAAA,CAAgC,KAAAT,EAC5B,MAAA,CACO,SAAAU,EAAA,QAAA,IAAAC,EAAAR,CAAA,EAAA,CAAAA,CAAA,CAAA,CAC6D,CACpE,CAAA,EAGJS,EAAAJ,EAAA,MAAAnB,EAAAmB,EAAA,MAAAjB,EAAA,EAAA,EAAA,OAAAC,CAAA,EAAA,GACA,CAAAqB,EAAAC,CAAA,EAAAC,EAAA,SAAAH,CAAA,EAEA,CAAA,gBAAAI,EAAA,WAAAC,CAAA,EAAAC,EAAA,CAAsD,aAAAC,GAAA,CAE9C,GAAAA,IAAA,OAAA,CACI,MAAAC,EAAA/B,EAAA8B,CAAA,EAAA,OAAA5B,CAAA,EACAa,GACIA,EAAAgB,CAAA,EAEJZ,EAAA,SAAAY,CAAA,EACAN,EAAAzB,EAAA+B,EAAA7B,EAAA,EAAA,EAAA,OAAAC,CAAA,CAAA,CAA8E,CAClF,EACJ,gBAAAgB,EAAA,MAAAnB,EAAAmB,EAAA,MAAAjB,EAAA,EAAA,EAAA,OAAA,EAAA,OACoF,aAAAc,CACpF,CAAA,EAGJgB,EAAAC,EAAA,YAAsBC,GAAA,CAEd,MAAAH,EAAA/B,EAAAkC,EAAA,OAAA,MAAA/B,EAAA,EAAA,EAAA,OAAAD,CAAA,EACAiC,EAAAJ,IAAA,eAEAN,EAAAS,EAAA,OAAA,KAAA,EACAnB,GACIA,EAAAoB,EAAAJ,EAAAG,EAAA,OAAA,KAAA,EAEJf,EAAA,SAAAgB,EAAAJ,EAAAG,EAAA,OAAA,KAAA,CAAqD,EACzD,CAAAT,EAAAV,EAAAI,CAAA,CAC+B,EAGnCV,EAAAY,EAAA,QAAqB,IAAAd,GAAAC,EAAAF,EAAAC,EAAAC,CAAA,EAAA,OACgD,CAAAD,EAAAC,CAAA,CAChD,EAGrB,OAAA4B,EAAA,IAAAC,EAAA,CAAA,GAAAV,EAAA,SAAAlB,EAAA,SAAA,QAAA,SAAA2B,EAAA,IAEQC,EAAA,MAAY,CAAX,GAAAT,EACO,IAAAT,EAAA,IACO,SAAAa,EACD,MAAAR,EACH,MAAAZ,EACP,YAAAC,EACA,MAAAyB,EAAArB,EAAAN,CAAA,EAC4B,YAAA,YAChB,CAAA,CAAA,CAAA,CAI5B"}