{"version":3,"file":"UtenlandsoppholdPeriodeSteg-986df73b.js","sources":["../../src/sider/steg/utenlandsoppholdPeriode/valideringsregler.ts","../../src/sider/steg/utenlandsoppholdPeriode/UtenlandsoppholdPeriodePanel.tsx","../../src/sider/steg/utenlandsoppholdPeriode/UtenlandsoppholdPeriodeSteg.tsx"],"sourcesContent":["import { formatDateExtended } from '@navikt/fp-common';\nimport { isDateWithinRange } from '@navikt/fp-validation';\nimport dayjs from 'dayjs';\nimport { IntlShape } from 'react-intl';\n\nconst validateDateInRange = (\n    intl: IntlShape,\n    date: Date | undefined,\n    minDate: Date,\n    maxDate: Date,\n    isFomDate: boolean,\n) => {\n    if (date === undefined) {\n        if (isFomDate) {\n            return intl.formatMessage({ id: 'valideringsfeil.fraOgMedDato.gyldigDato' });\n        }\n\n        return intl.formatMessage({ id: 'valideringsfeil.tilOgMedDato.gyldigDato' });\n    }\n\n    if (!isDateWithinRange(date, minDate, maxDate)) {\n        return intl.formatMessage(\n            { id: 'valideringsfeil.dateOutsideRange' },\n            {\n                fom: formatDateExtended(minDate),\n                tom: formatDateExtended(maxDate),\n            },\n        );\n    }\n\n    return null;\n};\n\nexport const validateFromDate = (\n    intl: IntlShape,\n    date: Date | undefined,\n    minDate: Date,\n    maxDate: Date,\n    toDate?: Date,\n) => {\n    const error = validateDateInRange(intl, date, minDate, maxDate, true);\n    if (error !== undefined) {\n        return error;\n    }\n    if (toDate && dayjs(date).isAfter(toDate, 'day')) {\n        // TODO Bør ha generell id\n        return intl.formatMessage({ id: 'valideringsfeil.utenlandsopphold.førTilDato' });\n    }\n    return undefined;\n};\n\nexport const validateToDate = (\n    intl: IntlShape,\n    date: Date | undefined,\n    minDate: Date,\n    maxDate: Date,\n    fromDate?: Date,\n) => {\n    const error = validateDateInRange(intl, date, minDate, maxDate, false);\n    if (error !== undefined) {\n        return error;\n    }\n    if (fromDate && dayjs(date).isBefore(fromDate, 'day')) {\n        // TODO Bør ha generell id\n        return intl.formatMessage({ id: 'valideringsfeil.utenlandsopphold.etterFraDato' });\n    }\n    return undefined;\n};\n","import { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport { useFormContext } from 'react-hook-form';\nimport dayjs from 'dayjs';\nimport { TrashIcon } from '@navikt/aksel-icons';\nimport { Button, HStack, Radio, Tag, VStack } from '@navikt/ds-react';\nimport { date1YearAgo, date1YearFromNow, dateRangesCollide, dateToday } from '@navikt/fp-common';\nimport { createCountryOptions } from '@navikt/fp-utils';\nimport { Datepicker, RadioGroupPanel, Select } from '@navikt/fp-form-hooks';\nimport { useFormValidators } from '@navikt/fp-validation';\nimport { ISO_DATE_FORMAT, TIDENES_ENDE } from '@navikt/fp-constants';\n\nimport { Periode } from 'types/Utenlandsopphold';\nimport { validateFromDate, validateToDate } from './valideringsregler';\n\nconst validerPeriodeOverlapp = (\n    intl: IntlShape,\n    alleAndrePerioder: Periode[],\n    fom?: string,\n    tom?: string,\n): string | null => {\n    const dateRanges = alleAndrePerioder.map((u) => ({\n        from: dayjs(u.fom).toDate(),\n        to: u.tom ? dayjs(u.tom).toDate() : TIDENES_ENDE,\n    }));\n\n    const allDateRanges = dateRanges.concat({\n        from: dayjs(fom).toDate(),\n        to: tom ? dayjs(tom).toDate() : TIDENES_ENDE,\n    });\n\n    if (dateRangesCollide(allDateRanges)) {\n        return intl.formatMessage({\n            id: 'UtenlandsoppholdPeriodePanel.Valideringsfeil.Utenlandsopphold.Overlapp',\n        });\n    }\n    return null;\n};\n\ninterface OwnProps {\n    index: number;\n    fjernOpphold: (index: number) => void;\n}\n\nconst UtenlandsoppholdPeriodePanel: React.FunctionComponent<OwnProps> = ({ index, fjernOpphold }) => {\n    const intl = useIntl();\n    const {\n        isRequired,\n        date: { isDatesNotTheSame },\n    } = useFormValidators();\n\n    const {\n        watch,\n        trigger,\n        setValue,\n        resetField,\n        formState: { isSubmitted },\n    } = useFormContext<{ perioder: Periode[] }>();\n\n    const alleAndreUtenlandsopphold = watch(`perioder`).filter((_u, i) => i !== index);\n    const harFlyttetUtForMerEnn12MånderSiden = watch(`perioder.${index}.harFlyttetUtForMerEnn12MånderSiden`);\n    const skalBoIUtlandetMerEnEttÅrFremover = watch(`perioder.${index}.skalBoIUtlandetMerEnEttÅrFremover`);\n    const fom = watch(`perioder.${index}.fom`);\n    const tom = watch(`perioder.${index}.tom`);\n\n    const minDateFom = dayjs(date1YearAgo).toDate();\n    const maxDateFom = tom ? dayjs(tom).toDate() : dayjs(date1YearFromNow).toDate();\n\n    const minDateTom = dayjs(fom || date1YearAgo).toDate();\n    const maxDateTom = dayjs(date1YearFromNow).toDate();\n\n    return (\n        <>\n            <VStack gap=\"2\">\n                <hr style={{ width: '100%' }} color=\"#99C4DD\" />\n                <HStack justify=\"space-between\">\n                    <Tag variant=\"info\">\n                        <FormattedMessage id=\"UtenlandsoppholdPeriodePanel.OppholdIUtlandet\" />\n                    </Tag>\n                    {index > 0 && (\n                        <Button\n                            type=\"button\"\n                            variant=\"tertiary\"\n                            size=\"small\"\n                            icon={<TrashIcon aria-hidden />}\n                            onClick={() => fjernOpphold(index)}\n                        >\n                            <FormattedMessage id=\"UtenlandsoppholdPeriodePanel.SlettOpphold\" />\n                        </Button>\n                    )}\n                </HStack>\n            </VStack>\n            <VStack gap=\"10\" align=\"start\">\n                <Select\n                    name={`perioder.${index}.landkode`}\n                    label={<FormattedMessage id={'UtenlandsoppholdPeriodePanel.Land'} />}\n                    validate={[isRequired('UtenlandsoppholdPeriodePanel.Validering.Land.Required')]}\n                >\n                    {createCountryOptions().map((o: Record<string, any>) => (\n                        <option key={o[0]} value={o[0]}>\n                            {o[1]}\n                        </option>\n                    ))}\n                </Select>\n                <RadioGroupPanel\n                    name={`perioder.${index}.harFlyttetUtForMerEnn12MånderSiden`}\n                    label={<FormattedMessage id=\"UtenlandsoppholdPeriodePanel.Historisk.Spørsmål\" />}\n                    validate={[isRequired('UtenlandsoppholdPeriodePanel.Historisk.IsRequired')]}\n                    onChange={(value) => {\n                        if (value) {\n                            const ettÅrSiden = dayjs(date1YearAgo).format(ISO_DATE_FORMAT);\n                            setValue(`perioder.${index}.fom`, ettÅrSiden);\n                        } else if (value === false) {\n                            resetField(`perioder.${index}.fom`);\n                        }\n                    }}\n                >\n                    <Radio value={false}>\n                        <FormattedMessage id=\"UtenlandsoppholdPeriodePanel.Nei\" />\n                    </Radio>\n                    <Radio value={true}>\n                        <FormattedMessage id=\"UtenlandsoppholdPeriodePanel.Ja\" />\n                    </Radio>\n                </RadioGroupPanel>\n                {harFlyttetUtForMerEnn12MånderSiden === false && (\n                    <Datepicker\n                        name={`perioder.${index}.fom`}\n                        label={<FormattedMessage id=\"UtenlandsoppholdPeriodePanel.Fraogmed\" />}\n                        minDate={minDateFom}\n                        maxDate={tom ? dayjs(tom).toDate() : dayjs(date1YearFromNow).toDate()}\n                        validate={[\n                            isRequired('UtenlandsoppholdPeriodePanel.Validering.Fraogmed.Required'),\n                            isDatesNotTheSame('valideringsfeil.fomErLikTom', tom),\n                            (fomValue) => {\n                                return validateFromDate(\n                                    intl,\n                                    dayjs(fomValue).toDate(),\n                                    minDateFom,\n                                    maxDateFom,\n                                    dayjs(tom).toDate(),\n                                );\n                            },\n                            (fomValue) => {\n                                return validerPeriodeOverlapp(intl, alleAndreUtenlandsopphold, fomValue, tom);\n                            },\n                        ]}\n                        onChange={() => isSubmitted && trigger()}\n                    />\n                )}\n                <RadioGroupPanel\n                    name={`perioder.${index}.skalBoIUtlandetMerEnEttÅrFremover`}\n                    label={<FormattedMessage id=\"UtenlandsoppholdPeriodePanel.Fremtidig.Spørsmål\" />}\n                    validate={[isRequired('UtenlandsoppholdPeriodePanel.Fremtidig.IsRequired')]}\n                    onChange={(value) => {\n                        if (value) {\n                            const ettÅrFrem = dayjs(date1YearFromNow).format(ISO_DATE_FORMAT);\n                            setValue(`perioder.${index}.tom`, ettÅrFrem);\n                        } else if (value === false) {\n                            resetField(`perioder.${index}.tom`);\n                        }\n                    }}\n                >\n                    <Radio value={false}>\n                        <FormattedMessage id=\"UtenlandsoppholdPeriodePanel.Nei\" />\n                    </Radio>\n                    <Radio value={true}>\n                        <FormattedMessage id=\"UtenlandsoppholdPeriodePanel.Ja\" />\n                    </Radio>\n                </RadioGroupPanel>\n                {skalBoIUtlandetMerEnEttÅrFremover === false && (\n                    <Datepicker\n                        name={`perioder.${index}.tom`}\n                        label={<FormattedMessage id=\"UtenlandsoppholdPeriodePanel.Tilogmed\" />}\n                        minDate={minDateTom}\n                        maxDate={maxDateTom}\n                        validate={[\n                            isRequired('UtenlandsoppholdPeriodePanel.Validering.Tilogmed.Required'),\n                            isDatesNotTheSame('valideringsfeil.tomErLikFom', fom),\n                            (tomValue) => {\n                                const tom = tomValue || TIDENES_ENDE;\n                                return validateToDate(\n                                    intl,\n                                    dayjs(tom).toDate(),\n                                    dayjs(fom || dateToday).toDate(),\n                                    dayjs(date1YearFromNow).toDate(),\n                                    dayjs(fom).toDate(),\n                                );\n                            },\n                            (tomValue) => {\n                                return validerPeriodeOverlapp(intl, alleAndreUtenlandsopphold, fom, tomValue);\n                            },\n                        ]}\n                        onChange={() => isSubmitted && trigger()}\n                    />\n                )}\n            </VStack>\n        </>\n    );\n};\n\nexport default UtenlandsoppholdPeriodePanel;\n","import { useCallback, useMemo } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useFieldArray, useForm } from 'react-hook-form';\nimport { PlusIcon } from '@navikt/aksel-icons';\nimport { Button, HStack, VStack } from '@navikt/ds-react';\nimport { Step } from '@navikt/fp-common';\n\nimport { Form, ErrorSummaryHookForm, StepButtonsHookForm } from '@navikt/fp-form-hooks';\nimport UtenlandsoppholdPeriodePanel from './UtenlandsoppholdPeriodePanel';\nimport useEsNavigator from 'appData/useEsNavigator';\nimport { EsDataType, useEsStateData, useEsStateSaveFn } from 'appData/EsDataContext';\nimport { UtenlandsoppholdPerioder, Periode } from 'types/Utenlandsopphold';\nimport useStepData from 'appData/useStepData';\n\nconst DEFAULT_PERIODE = {\n    fom: '',\n    tom: '',\n    landkode: '',\n} as Periode;\n\nconst DEFAULT_FORM_VALUES = {\n    perioder: [DEFAULT_PERIODE],\n} as UtenlandsoppholdPerioder;\n\nconst UtenlandsoppholdPeriodeSteg: React.FunctionComponent = () => {\n    const intl = useIntl();\n\n    const stepData = useStepData();\n    const navigator = useEsNavigator();\n    const utenlandsoppholdPerioder = useEsStateData(EsDataType.UTENLANDSOPPHOLD_PERIODER);\n    const lagreUtenlandsoppholdPerioder = useEsStateSaveFn(EsDataType.UTENLANDSOPPHOLD_PERIODER);\n\n    const defaultValues = useMemo(() => utenlandsoppholdPerioder || DEFAULT_FORM_VALUES, []);\n    const formMethods = useForm<UtenlandsoppholdPerioder>({\n        defaultValues,\n    });\n    const { fields, append, remove } = useFieldArray({\n        name: 'perioder',\n        control: formMethods.control,\n    });\n\n    const leggTilOpphold = useCallback(() => {\n        append(DEFAULT_PERIODE);\n    }, [append]);\n\n    const fjernOpphold = useCallback(\n        (index: number) => {\n            remove(index);\n        },\n        [remove],\n    );\n\n    const lagre = useCallback((formValues: UtenlandsoppholdPerioder) => {\n        lagreUtenlandsoppholdPerioder(formValues);\n        navigator.goToNextDefaultStep();\n    }, []);\n\n    return (\n        <Step\n            bannerTitle={intl.formatMessage({ id: 'Søknad.Pageheading' })}\n            pageTitle={intl.formatMessage({ id: 'UtenlandsoppholdPeriodeSteg.Title' })}\n            onCancel={navigator.avbrytSøknad}\n            steps={stepData.stepConfig}\n            activeStepId={stepData.activeStepId}\n            useNoTempSavingText\n        >\n            <Form formMethods={formMethods} onSubmit={lagre}>\n                <VStack gap=\"10\">\n                    <ErrorSummaryHookForm />\n                    {fields.map((field, index) => (\n                        <UtenlandsoppholdPeriodePanel key={field.id} index={index} fjernOpphold={fjernOpphold} />\n                    ))}\n                    <HStack>\n                        <Button\n                            type=\"button\"\n                            variant=\"secondary\"\n                            size=\"small\"\n                            icon={<PlusIcon aria-hidden />}\n                            onClick={leggTilOpphold}\n                        >\n                            <FormattedMessage id=\"utenlandsopphold.knapp.leggTilLand\" />\n                        </Button>\n                    </HStack>\n                    <StepButtonsHookForm<UtenlandsoppholdPerioder>\n                        goToPreviousStep={navigator.goToPreviousDefaultStep}\n                        saveDataOnPreviousClick={lagreUtenlandsoppholdPerioder}\n                    />\n                </VStack>\n            </Form>\n        </Step>\n    );\n};\n\nexport default UtenlandsoppholdPeriodeSteg;\n"],"names":["validateDateInRange","intl","date","minDate","maxDate","isFomDate","isDateWithinRange","formatDateExtended","validateFromDate","toDate","error","dayjs","validateToDate","fromDate","validerPeriodeOverlapp","alleAndrePerioder","fom","tom","allDateRanges","u","TIDENES_ENDE","dateRangesCollide","UtenlandsoppholdPeriodePanel","index","fjernOpphold","useIntl","isRequired","isDatesNotTheSame","useFormValidators","watch","trigger","setValue","resetField","isSubmitted","useFormContext","alleAndreUtenlandsopphold","_u","i","harFlyttetUtForMerEnn12MånderSiden","skalBoIUtlandetMerEnEttÅrFremover","minDateFom","date1YearAgo","maxDateFom","date1YearFromNow","minDateTom","maxDateTom","jsxs","Fragment","VStack","jsx","HStack","Tag","FormattedMessage","Button","TrashIcon","Select","createCountryOptions","o","RadioGroupPanel","value","ettÅrSiden","ISO_DATE_FORMAT","Radio","Datepicker","fomValue","ettÅrFrem","tomValue","dateToday","DEFAULT_PERIODE","DEFAULT_FORM_VALUES","UtenlandsoppholdPeriodeSteg","stepData","useStepData","navigator","useEsNavigator","utenlandsoppholdPerioder","useEsStateData","EsDataType","lagreUtenlandsoppholdPerioder","useEsStateSaveFn","defaultValues","useMemo","formMethods","useForm","fields","append","remove","useFieldArray","leggTilOpphold","useCallback","lagre","formValues","Step","Form","ErrorSummaryHookForm","field","PlusIcon","StepButtonsHookForm","UtenlandsoppholdPeriodeSteg$1"],"mappings":"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"}