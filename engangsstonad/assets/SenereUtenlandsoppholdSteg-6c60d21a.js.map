{"version":3,"file":"SenereUtenlandsoppholdSteg-6c60d21a.js","sources":["../../src/sider/steg/utenlandsoppholdSenere/valideringsregler.ts","../../src/sider/steg/utenlandsoppholdSenere/SenereUtenlandsoppholdPeriode.tsx","../../src/sider/steg/utenlandsoppholdSenere/SenereUtenlandsoppholdSteg.tsx"],"sourcesContent":["import { formatDateExtended } from '@navikt/fp-common';\nimport { isDateWithinRange } from '@navikt/fp-validation';\nimport dayjs from 'dayjs';\nimport { IntlShape } from 'react-intl';\n\n// TODO Flytt desse\n\nconst validateDateInRange = (\n    intl: IntlShape,\n    date: Date | undefined,\n    minDate: Date,\n    maxDate: Date,\n    isFomDate: boolean,\n) => {\n    if (date === undefined) {\n        if (isFomDate) {\n            return intl.formatMessage({ id: 'Valideringsfeil.FraOgMedDato.GyldigDato' });\n        }\n\n        return intl.formatMessage({ id: 'Valideringsfeil.TilOgMedDato.GyldigDato' });\n    }\n\n    if (!isDateWithinRange(date, minDate, maxDate)) {\n        return intl.formatMessage(\n            { id: 'Valideringsfeil.DateOutsideRange' },\n            {\n                fom: formatDateExtended(minDate),\n                tom: formatDateExtended(maxDate),\n            },\n        );\n    }\n\n    return null;\n};\n\nexport const validateFromDate = (\n    intl: IntlShape,\n    date: Date | undefined,\n    minDate: Date,\n    maxDate: Date,\n    toDate?: Date,\n) => {\n    const error = validateDateInRange(intl, date, minDate, maxDate, true);\n    if (error !== undefined) {\n        return error;\n    }\n    if (toDate && dayjs(date).isAfter(toDate, 'day')) {\n        // TODO Bør ha generell id\n        return intl.formatMessage({ id: 'Valideringsfeil.Utenlandsopphold.FørTilDato' });\n    }\n    return undefined;\n};\n\nexport const validateToDate = (\n    intl: IntlShape,\n    date: Date | undefined,\n    minDate: Date,\n    maxDate: Date,\n    fromDate?: Date,\n) => {\n    const error = validateDateInRange(intl, date, minDate, maxDate, false);\n    if (error !== undefined) {\n        return error;\n    }\n    if (fromDate && dayjs(date).isBefore(fromDate, 'day')) {\n        // TODO Bør ha generell id\n        return intl.formatMessage({ id: 'Valideringsfeil.Utenlandsopphold.EtterFraDato' });\n    }\n    return undefined;\n};\n","import { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport { useFormContext } from 'react-hook-form';\nimport dayjs from 'dayjs';\nimport { TrashIcon } from '@navikt/aksel-icons';\nimport { Button, VStack } from '@navikt/ds-react';\nimport { date1YearFromNow, dateRangesCollide, dateToday } from '@navikt/fp-common';\nimport { createCountryOptions } from '@navikt/fp-utils';\nimport { Datepicker, Select } from '@navikt/fp-form-hooks';\nimport { useFormValidators } from '@navikt/fp-validation';\nimport { TIDENES_ENDE } from '@navikt/fp-constants';\n\nimport { validateFromDate, validateToDate } from './valideringsregler';\nimport { UtenlandsoppholdPeriode } from 'types/Utenlandsopphold';\n\nconst validerPeriodeOverlapp = (\n    intl: IntlShape,\n    alleAndrePerioder: UtenlandsoppholdPeriode[],\n    fom: string,\n    tom?: string,\n): string | null => {\n    const dateRanges = alleAndrePerioder.map((u) => ({\n        from: dayjs(u.fom).toDate(),\n        to: u.tom ? dayjs(u.tom).toDate() : TIDENES_ENDE,\n    }));\n\n    const allDateRanges = dateRanges.concat({\n        from: dayjs(fom).toDate(),\n        to: tom ? dayjs(tom).toDate() : TIDENES_ENDE,\n    });\n\n    if (dateRangesCollide(allDateRanges)) {\n        return intl.formatMessage({\n            id: 'SenereUtenlandsoppholdSteg.Valideringsfeil.Utenlandsopphold.Overlapp',\n        });\n    }\n    return null;\n};\n\ninterface OwnProps {\n    index: number;\n    fjernOpphold: (index: number) => void;\n}\n\nconst SenereUtenlandsoppholdPanel: React.FunctionComponent<OwnProps> = ({ index, fjernOpphold }) => {\n    const intl = useIntl();\n    const {\n        isRequired,\n        date: { isDatesNotTheSame },\n    } = useFormValidators();\n\n    const {\n        watch,\n        trigger,\n        formState: { isSubmitted },\n    } = useFormContext<{ utenlandsoppholdNeste12Mnd: UtenlandsoppholdPeriode[] }>();\n\n    const alleAndreUtenlandsopphold = watch(`utenlandsoppholdNeste12Mnd`).filter((_u, i) => i !== index);\n    const fom = watch(`utenlandsoppholdNeste12Mnd.${index}.fom`);\n    const tom = watch(`utenlandsoppholdNeste12Mnd.${index}.tom`);\n\n    const minDateFom = dayjs(dateToday).toDate();\n    const maxDateFom = tom ? dayjs(tom).toDate() : dayjs(date1YearFromNow).toDate();\n\n    const minDateTom = dayjs(fom || dateToday).toDate();\n    const maxDateTom = dayjs(date1YearFromNow).toDate();\n\n    return (\n        <VStack gap=\"5\" align=\"start\">\n            <Select\n                name={`utenlandsoppholdNeste12Mnd.${index}.landkode`}\n                label={\n                    <FormattedMessage\n                        id={'SenereUtenlandsoppholdSteg.LeggTilUtenlandsopphold.Spørsmål.HvilketLandSkalDuBoI'}\n                    />\n                }\n                validate={[isRequired('SenereUtenlandsoppholdSteg.LeggTilUtenlandsopphold.LandDuSkalBoIPåkreved')]}\n            >\n                {createCountryOptions().map((o: Record<string, any>) => (\n                    <option key={o[0]} value={o[0]}>\n                        {o[1]}\n                    </option>\n                ))}\n            </Select>\n            <Datepicker\n                name={`utenlandsoppholdNeste12Mnd.${index}.fom`}\n                label={<FormattedMessage id=\"SenereUtenlandsoppholdSteg.LeggTilUtenlandsopphold.Fraogmed\" />}\n                minDate={dayjs(dateToday).toDate()}\n                maxDate={tom ? dayjs(tom).toDate() : dayjs(date1YearFromNow).toDate()}\n                validate={[\n                    isRequired('SenereUtenlandsoppholdSteg.LeggTilUtenlandsopphold.LandFomDuSkalBoIPåkreved'),\n                    isDatesNotTheSame('SenereUtenlandsoppholdSteg.FomErLikTom', tom),\n                    (fomValue) => {\n                        return validateFromDate(\n                            intl,\n                            dayjs(fomValue).toDate(),\n                            minDateFom,\n                            maxDateFom,\n                            dayjs(tom).toDate(),\n                        );\n                    },\n                    (fomValue) => {\n                        return validerPeriodeOverlapp(intl, alleAndreUtenlandsopphold, fomValue, tom);\n                    },\n                ]}\n                onChange={() => isSubmitted && trigger()}\n            />\n            <Datepicker\n                name={`utenlandsoppholdNeste12Mnd.${index}.tom`}\n                label={<FormattedMessage id=\"SenereUtenlandsoppholdSteg.LeggTilUtenlandsopphold.Tilogmed\" />}\n                minDate={minDateTom}\n                maxDate={maxDateTom}\n                validate={[\n                    isRequired('SenereUtenlandsoppholdSteg.LeggTilUtenlandsopphold.LandTomDuSkalBoIPåkreved'),\n                    isDatesNotTheSame('SenereUtenlandsoppholdSteg.TomErLikFom', fom),\n                    (tomValue) => {\n                        const tom = tomValue || TIDENES_ENDE;\n                        return validateToDate(\n                            intl,\n                            dayjs(tom).toDate(),\n                            dayjs(fom || dateToday).toDate(),\n                            dayjs(date1YearFromNow).toDate(),\n                            dayjs(fom).toDate(),\n                        );\n                    },\n                    (tomValue) => {\n                        return validerPeriodeOverlapp(intl, alleAndreUtenlandsopphold, fom, tomValue);\n                    },\n                ]}\n                onChange={() => isSubmitted && trigger()}\n            />\n            {index > 0 && (\n                <Button\n                    type=\"button\"\n                    variant=\"tertiary\"\n                    size=\"small\"\n                    icon={<TrashIcon aria-hidden />}\n                    onClick={() => fjernOpphold(index)}\n                >\n                    <FormattedMessage id=\"SenereUtenlandsoppholdSteg.Knapp.SlettOpphold\" />\n                </Button>\n            )}\n        </VStack>\n    );\n};\n\nexport default SenereUtenlandsoppholdPanel;\n","import { Fragment, useCallback, useMemo } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useFieldArray, useForm } from 'react-hook-form';\nimport { PlusIcon } from '@navikt/aksel-icons';\nimport { Button, VStack } from '@navikt/ds-react';\nimport { Step } from '@navikt/fp-common';\n\nimport { Form, ErrorSummaryHookForm, StepButtonsHookForm } from '@navikt/fp-form-hooks';\nimport SenereUtenlandsoppholdPeriode from './SenereUtenlandsoppholdPeriode';\nimport useEsNavigator from 'appData/useEsNavigator';\nimport { EsDataType, useEsStateData, useEsStateSaveFn } from 'appData/EsDataContext';\nimport { UtenlandsoppholdSenere, UtenlandsoppholdPeriode } from 'types/Utenlandsopphold';\nimport useStepData from 'appData/useStepData';\n\nconst DEFAULT_PERIODE = {\n    fom: '',\n    tom: '',\n    landkode: '',\n} as UtenlandsoppholdPeriode;\n\nconst DEFAULT_FORM_VALUES = {\n    utenlandsoppholdNeste12Mnd: [DEFAULT_PERIODE],\n} as UtenlandsoppholdSenere;\n\nconst SenereUtenlandsoppholdSteg: React.FunctionComponent = () => {\n    const intl = useIntl();\n\n    const stepData = useStepData();\n    const navigator = useEsNavigator();\n    const senereUtenlandsopphold = useEsStateData(EsDataType.UTENLANDSOPPHOLD_SENERE);\n    const lagreSenereUtenlandsopphold = useEsStateSaveFn(EsDataType.UTENLANDSOPPHOLD_SENERE);\n\n    const defaultValues = useMemo(() => senereUtenlandsopphold || DEFAULT_FORM_VALUES, []);\n    const formMethods = useForm<UtenlandsoppholdSenere>({\n        defaultValues,\n    });\n    const { fields, append, remove } = useFieldArray({\n        name: 'utenlandsoppholdNeste12Mnd',\n        control: formMethods.control,\n    });\n\n    const leggTilOpphold = useCallback(() => {\n        append(DEFAULT_PERIODE);\n    }, [append]);\n\n    const fjernOpphold = useCallback(\n        (index: number) => {\n            remove(index);\n        },\n        [remove],\n    );\n\n    const lagre = useCallback((formValues: UtenlandsoppholdSenere) => {\n        lagreSenereUtenlandsopphold(formValues);\n        navigator.goToNextDefaultStep();\n    }, []);\n\n    return (\n        <Step\n            bannerTitle={intl.formatMessage({ id: 'Søknad.Pageheading' })}\n            pageTitle={intl.formatMessage({ id: 'SenereUtenlandsoppholdSteg.Fremtidig' })}\n            onCancel={navigator.avbrytSøknad}\n            steps={stepData.stepConfig}\n            activeStepId={stepData.activeStepId}\n            useNoTempSavingText\n        >\n            <Form formMethods={formMethods} onSubmit={lagre}>\n                <VStack gap=\"10\">\n                    <ErrorSummaryHookForm />\n                    <VStack gap=\"10\" align=\"start\">\n                        {fields.map((field, index) => (\n                            <Fragment key={field.id}>\n                                <SenereUtenlandsoppholdPeriode index={index} fjernOpphold={fjernOpphold} />\n                                {fields.length > 1 && <hr style={{ width: '100%' }} color=\"#99C4DD\" />}\n                            </Fragment>\n                        ))}\n                        <Button\n                            type=\"button\"\n                            variant=\"secondary\"\n                            size=\"small\"\n                            icon={<PlusIcon aria-hidden />}\n                            onClick={leggTilOpphold}\n                        >\n                            <FormattedMessage id=\"SenereUtenlandsoppholdSteg.Knapp.LeggTilLand\" />\n                        </Button>\n                    </VStack>\n                    <StepButtonsHookForm<UtenlandsoppholdSenere>\n                        goToPreviousStep={navigator.goToPreviousDefaultStep}\n                        saveDataOnPreviousClick={lagreSenereUtenlandsopphold}\n                    />\n                </VStack>\n            </Form>\n        </Step>\n    );\n};\n\nexport default SenereUtenlandsoppholdSteg;\n"],"names":["validateDateInRange","intl","date","minDate","maxDate","isFomDate","isDateWithinRange","formatDateExtended","validateFromDate","toDate","error","dayjs","validateToDate","fromDate","validerPeriodeOverlapp","alleAndrePerioder","fom","tom","allDateRanges","u","TIDENES_ENDE","dateRangesCollide","SenereUtenlandsoppholdPanel","index","fjernOpphold","useIntl","isRequired","isDatesNotTheSame","useFormValidators","watch","trigger","isSubmitted","useFormContext","alleAndreUtenlandsopphold","_u","i","minDateFom","dateToday","maxDateFom","date1YearFromNow","minDateTom","maxDateTom","jsxs","VStack","jsx","Select","FormattedMessage","createCountryOptions","o","Datepicker","fomValue","tomValue","Button","TrashIcon","DEFAULT_PERIODE","DEFAULT_FORM_VALUES","SenereUtenlandsoppholdSteg","stepData","useStepData","navigator","useEsNavigator","senereUtenlandsopphold","useEsStateData","EsDataType","lagreSenereUtenlandsopphold","useEsStateSaveFn","defaultValues","useMemo","formMethods","useForm","fields","append","remove","useFieldArray","leggTilOpphold","useCallback","lagre","formValues","Step","Form","ErrorSummaryHookForm","field","Fragment","SenereUtenlandsoppholdPeriode","PlusIcon","StepButtonsHookForm","SenereUtenlandsoppholdSteg$1"],"mappings":"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"}