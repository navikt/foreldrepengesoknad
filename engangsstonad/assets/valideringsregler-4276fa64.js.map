{"version":3,"file":"valideringsregler-4276fa64.js","sources":["../../src/fpcommon/validering/valideringsregler.ts"],"sourcesContent":["import { etterDagensDato, formatDateExtended, hasValue } from '@navikt/fp-common';\nimport dayjs from 'dayjs';\nimport { IntlShape } from 'react-intl';\n\ntype FormValidationResult = string | null;\n\nexport const isoDateRegex = /(19|20)\\d{2}-(0?[1-9]|1[0-2])-(0?[1-9]|1\\d|2\\d|3[01])$/;\n\nexport const dateToday = dayjs().toDate();\n\nexport const isEmpty = (text?: string | number | boolean | dayjs.Dayjs | null) =>\n    text === null || text === undefined || text.toString().trim().length === 0;\n\nexport const isRequired =\n    (errorMessage: string) =>\n    (value?: string | number): FormValidationResult =>\n        isEmpty(value) ? errorMessage : null;\n\nexport const isValidDate =\n    (errorMessage: string) =>\n    (text: string): FormValidationResult =>\n        isEmpty(text) || isoDateRegex.test(text) ? null : errorMessage;\n\nexport const isAfterToday =\n    (errorMessage: string) =>\n    (dato: string): FormValidationResult => {\n        return dayjs(dato).isAfter(dateToday) ? errorMessage : null;\n    };\n\nexport const validateDatesNotEqual = (errorMessage: string, date1?: string) => (date2?: string) =>\n    date1 && date2 && dayjs(date1).isSame(date2) ? errorMessage : null;\n\nconst dateIsWithinRange = (date: Date, minDate: Date, maxDate: Date) => {\n    return dayjs(date).isBetween(minDate, maxDate, 'day', '[]');\n};\n\nconst validateDateInRange = (\n    intl: IntlShape,\n    date: Date | undefined,\n    minDate: Date,\n    maxDate: Date,\n    isFomDate: boolean,\n) => {\n    if (date === undefined) {\n        if (isFomDate) {\n            return intl.formatMessage({ id: 'valideringsfeil.fraOgMedDato.gyldigDato' });\n        }\n\n        return intl.formatMessage({ id: 'valideringsfeil.tilOgMedDato.gyldigDato' });\n    }\n\n    if (!dateIsWithinRange(date, minDate, maxDate)) {\n        return intl.formatMessage(\n            { id: 'valideringsfeil.dateOutsideRange' },\n            {\n                fom: formatDateExtended(minDate),\n                tom: formatDateExtended(maxDate),\n            },\n        );\n    }\n\n    return null;\n};\n\nexport const validateFromDate = (\n    intl: IntlShape,\n    date: Date | undefined,\n    minDate: Date,\n    maxDate: Date,\n    toDate?: Date,\n) => {\n    const error = validateDateInRange(intl, date, minDate, maxDate, true);\n    if (error !== undefined) {\n        return error;\n    }\n    if (toDate && dayjs(date).isAfter(toDate, 'day')) {\n        // TODO Bør ha generell id\n        return intl.formatMessage({ id: 'valideringsfeil.utenlandsopphold.førTilDato' });\n    }\n    return undefined;\n};\n\nexport const validateToDate = (\n    intl: IntlShape,\n    date: Date | undefined,\n    minDate: Date,\n    maxDate: Date,\n    fromDate?: Date,\n) => {\n    const error = validateDateInRange(intl, date, minDate, maxDate, false);\n    if (error !== undefined) {\n        return error;\n    }\n    if (fromDate && dayjs(date).isBefore(fromDate, 'day')) {\n        // TODO Bør ha generell id\n        return intl.formatMessage({ id: 'valideringsfeil.utenlandsopphold.etterFraDato' });\n    }\n    return undefined;\n};\n\nexport const isValidFormattedDateString = (dateString = ''): boolean => {\n    return /\\d{1,2}.\\d{1,2}.(\\d{2}|\\d{4})$/.test(dateString);\n};\n\n//TODO Denne kan vel skrivast meir generell og ha generelle feilmeldingar?\nexport const validateAdopsjonFødselDate = (\n    dato: string | undefined,\n    adopsjonsdato: string | undefined,\n    intl: IntlShape,\n) => {\n    if (!hasValue(dato)) {\n        return intl.formatMessage({ id: 'valideringsfeil.omBarnet.fodselsdato.duMåOppgi' });\n    }\n\n    if (!isValidFormattedDateString(dato)) {\n        return intl.formatMessage({ id: 'invalidFormatErrorKey.fødselsdato' });\n    }\n\n    if (!dato || !adopsjonsdato) {\n        return undefined;\n    }\n    if (etterDagensDato(dato)) {\n        return intl.formatMessage({ id: 'valideringsfeil.omBarnet.fodselsdato.måVæreIdagEllerTidligere' });\n    }\n    return undefined;\n};\n"],"names":["isoDateRegex","dateToday","dayjs","isEmpty","text","isRequired","errorMessage","value","isValidDate","isAfterToday","dato","validateDatesNotEqual","date1","date2","dateIsWithinRange","date","minDate","maxDate","validateDateInRange","intl","isFomDate","formatDateExtended","validateFromDate","toDate","error","validateToDate","fromDate","isValidFormattedDateString","dateString","validateAdopsjonFødselDate","adopsjonsdato","hasValue","etterDagensDato"],"mappings":"sKAMO,MAAMA,EAAe,yDAEfC,EAAYC,IAAQ,SAEpBC,EAAWC,GACpBA,GAAS,MAA8BA,EAAK,SAAS,EAAE,KAAK,EAAE,SAAW,EAEhEC,EACRC,GACAC,GACGJ,EAAQI,CAAK,EAAID,EAAe,KAE3BE,EACRF,GACAF,GACGD,EAAQC,CAAI,GAAKJ,EAAa,KAAKI,CAAI,EAAI,KAAOE,EAE7CG,EACRH,GACAI,GACUR,EAAMQ,CAAI,EAAE,QAAQT,CAAS,EAAIK,EAAe,KAGlDK,EAAwB,CAACL,EAAsBM,IAAoBC,GAC5ED,GAASC,GAASX,EAAMU,CAAK,EAAE,OAAOC,CAAK,EAAIP,EAAe,KAE5DQ,EAAoB,CAACC,EAAYC,EAAeC,IAC3Cf,EAAMa,CAAI,EAAE,UAAUC,EAASC,EAAS,MAAO,IAAI,EAGxDC,EAAsB,CACxBC,EACAJ,EACAC,EACAC,EACAG,IAEIL,IAAS,OACLK,EACOD,EAAK,cAAc,CAAE,GAAI,yCAA2C,CAAA,EAGxEA,EAAK,cAAc,CAAE,GAAI,yCAA2C,CAAA,EAG1EL,EAAkBC,EAAMC,EAASC,CAAO,EAUtC,KATIE,EAAK,cACR,CAAE,GAAI,kCAAmC,EACzC,CACI,IAAKE,EAAmBL,CAAO,EAC/B,IAAKK,EAAmBJ,CAAO,CACnC,CAAA,EAOCK,EAAmB,CAC5BH,EACAJ,EACAC,EACAC,EACAM,IACC,CACD,MAAMC,EAAQN,EAAoBC,EAAMJ,EAAMC,EAASC,EAAS,EAAI,EACpE,GAAIO,IAAU,OACH,OAAAA,EAEX,GAAID,GAAUrB,EAAMa,CAAI,EAAE,QAAQQ,EAAQ,KAAK,EAE3C,OAAOJ,EAAK,cAAc,CAAE,GAAI,6CAA+C,CAAA,CAGvF,EAEaM,EAAiB,CAC1BN,EACAJ,EACAC,EACAC,EACAS,IACC,CACD,MAAMF,EAAQN,EAAoBC,EAAMJ,EAAMC,EAASC,EAAS,EAAK,EACrE,GAAIO,IAAU,OACH,OAAAA,EAEX,GAAIE,GAAYxB,EAAMa,CAAI,EAAE,SAASW,EAAU,KAAK,EAEhD,OAAOP,EAAK,cAAc,CAAE,GAAI,+CAAiD,CAAA,CAGzF,EAEaQ,EAA6B,CAACC,EAAa,KAC7C,iCAAiC,KAAKA,CAAU,EAI9CC,EAA6B,CACtCnB,EACAoB,EACAX,IACC,CACG,GAAA,CAACY,EAASrB,CAAI,EACd,OAAOS,EAAK,cAAc,CAAE,GAAI,gDAAkD,CAAA,EAGlF,GAAA,CAACQ,EAA2BjB,CAAI,EAChC,OAAOS,EAAK,cAAc,CAAE,GAAI,mCAAqC,CAAA,EAGrE,GAAA,GAACT,GAAQ,CAACoB,IAGVE,EAAgBtB,CAAI,EACpB,OAAOS,EAAK,cAAc,CAAE,GAAI,+DAAiE,CAAA,CAGzG"}