{"version":3,"file":"OppsummeringSteg-f00676ab.js","sources":["../../src/types/Dokumentasjon.ts","../../../../packages/api/src/useAbortSignal.ts","../../src/sider/steg/oppsummering/Oppsummeringspunkt.tsx","../../src/sider/steg/oppsummering/OmBarnetOppsummering.tsx","../../src/sider/steg/oppsummering/LandOppsummering.tsx","../../src/sider/steg/oppsummering/UtenlandsoppholdOppsummering.tsx","../../src/sider/steg/oppsummering/OppsummeringSteg.tsx"],"sourcesContent":["import { Attachment } from '@navikt/fp-types';\n\ntype Vedlegg = {\n    vedlegg: Attachment[];\n};\n\nexport type TerminDokumentasjon = {\n    terminbekreftelsedato: string;\n} & Vedlegg;\n\nexport type AdopsjonDokumentasjon = Vedlegg;\n\ntype Dokumentasjon = TerminDokumentasjon | AdopsjonDokumentasjon;\n\nexport default Dokumentasjon;\n\nexport const erTerminDokumentasjon = (dokumentasjon: Dokumentasjon): dokumentasjon is TerminDokumentasjon => {\n    if ((dokumentasjon as TerminDokumentasjon).terminbekreftelsedato) {\n        return true;\n    }\n    return false;\n};\n","import { useEffect, useRef } from 'react';\n\nconst useAbortSignal = () => {\n    const controller = useRef<AbortController>(new AbortController());\n\n    useEffect(() => {\n        return () => {\n            controller.current.abort();\n        };\n    }, []);\n\n    return controller.current.signal;\n};\n\nexport default useAbortSignal;\n","import { ReactNode, useCallback, useState } from 'react';\nimport { Accordion, Heading } from '@navikt/ds-react';\n\nimport './oppsummeringspunkt.less';\n\ninterface Props {\n    tittel: string;\n    children: ReactNode;\n}\n\nconst Oppsummeringspunkt = ({ tittel, children }: Props) => {\n    const [isOpen, toggleOpen] = useState(false);\n    const toggle = useCallback(() => toggleOpen((open) => !open), []);\n\n    return (\n        <Accordion.Item>\n            <Accordion.Header className={isOpen ? 'accordian_header' : undefined} onClick={toggle}>\n                <Heading level=\"2\" size=\"small\">\n                    {tittel}\n                </Heading>\n            </Accordion.Header>\n            <Accordion.Content className=\"content_margin\">{children}</Accordion.Content>\n        </Accordion.Item>\n    );\n};\n\nexport default Oppsummeringspunkt;\n","import { FormattedMessage } from 'react-intl';\nimport { BodyLong, BodyShort, HStack, Label, VStack } from '@navikt/ds-react';\nimport { AttachmentList, useCustomIntl } from '@navikt/fp-ui';\nimport { notEmpty } from '@navikt/fp-validation';\nimport { formatDate } from '@navikt/fp-utils';\nimport { OmBarnet, erAdopsjon, erBarnetFødt, erBarnetIkkeFødt } from 'types/OmBarnet';\nimport Dokumentasjon, { erTerminDokumentasjon } from 'types/Dokumentasjon';\n\ninterface Props {\n    omBarnet: OmBarnet;\n    dokumentasjon?: Dokumentasjon;\n}\n\nconst OmBarnetOppsummering: React.FunctionComponent<Props> = ({ omBarnet, dokumentasjon }) => {\n    const { i18n } = useCustomIntl();\n\n    const harAdoptert = erAdopsjon(omBarnet);\n    const harTermin = erBarnetIkkeFødt(omBarnet);\n    const harFødt = erBarnetFødt(omBarnet);\n\n    let antallBarnSummaryText;\n    if (omBarnet.antallBarn === 1) {\n        antallBarnSummaryText = i18n('OmBarnetOppsummering.EttBarn');\n    } else if (omBarnet.antallBarn === 2 && !harAdoptert) {\n        antallBarnSummaryText = i18n('OmBarnetOppsummering.Tvillinger');\n    } else if (omBarnet.antallBarn === 2 && harAdoptert) {\n        antallBarnSummaryText = i18n('OmBarnetOppsummering.ToBarn');\n    } else {\n        antallBarnSummaryText = i18n('OmBarnetOppsummering.FlereBarn', {\n            antall: omBarnet.antallBarn,\n        });\n    }\n\n    return (\n        <VStack gap=\"4\">\n            <HStack gap=\"2\">\n                <BodyShort>\n                    <FormattedMessage id={'OmBarnetOppsummering.SoknadenGjelder'} />\n                </BodyShort>\n                <BodyShort>{antallBarnSummaryText}</BodyShort>\n            </HStack>\n            {harAdoptert && (\n                <>\n                    <HStack gap=\"2\">\n                        <BodyShort>\n                            <FormattedMessage id={'OmBarnetOppsummering.MedAdopsjonsdato'} />\n                        </BodyShort>\n                        <BodyShort>{formatDate(omBarnet.adopsjonsdato!)}</BodyShort>\n                    </HStack>\n                    <HStack gap=\"2\">\n                        <BodyShort>\n                            {omBarnet.fødselsdatoer.length > 1\n                                ? i18n('OmBarnetOppsummering.MedFødselsdatoer')\n                                : i18n('OmBarnetOppsummering.MedFødselsdato')}\n                        </BodyShort>\n                        <BodyLong>\n                            {omBarnet.fødselsdatoer\n                                .map((_, index) => {\n                                    return formatDate(omBarnet.fødselsdatoer[index].dato);\n                                })\n                                .join(', ')}\n                        </BodyLong>\n                    </HStack>\n                    <Label>\n                        <FormattedMessage id={'OmBarnetOppsummering.VedlagtOmsorgsovertakelseBekreftelse'} />\n                    </Label>\n                    <AttachmentList attachments={notEmpty(dokumentasjon).vedlegg} />\n                </>\n            )}\n            {harFødt && (\n                <HStack gap=\"2\">\n                    <BodyShort>\n                        <FormattedMessage id={'OmBarnetOppsummering.MedFødselsdato'} />\n                    </BodyShort>\n                    <BodyShort>{formatDate(omBarnet.fødselsdato)}</BodyShort>\n                </HStack>\n            )}\n            {harTermin && dokumentasjon && erTerminDokumentasjon(dokumentasjon) && (\n                <>\n                    <HStack gap=\"2\">\n                        <BodyShort>\n                            <FormattedMessage id={'OmBarnetOppsummering.MedTermindato'} />\n                        </BodyShort>\n                        <BodyShort>{formatDate(omBarnet.termindato)}</BodyShort>\n                    </HStack>\n                    <HStack gap=\"2\">\n                        <BodyShort>\n                            <FormattedMessage id={'OmBarnetOppsummering.SomErDatert'} />\n                        </BodyShort>\n                        <BodyShort>{formatDate(dokumentasjon.terminbekreftelsedato)}</BodyShort>\n                    </HStack>\n                    <Label>\n                        <FormattedMessage id={'OmBarnetOppsummering.VedlagtTerminbekreftelse'} />\n                    </Label>\n                    <AttachmentList attachments={dokumentasjon.vedlegg} />\n                </>\n            )}\n        </VStack>\n    );\n};\nexport default OmBarnetOppsummering;\n","import * as countries from 'i18n-iso-countries';\nimport dayjs from 'dayjs';\nimport { BodyLong, Label, VStack } from '@navikt/ds-react';\nimport { UtenlandsoppholdPeriode } from 'types/Utenlandsopphold';\nimport { formatDate, isBeforeToday, isToday } from '@navikt/fp-utils';\nimport { FormattedMessage } from 'react-intl';\nimport { useCustomIntl, I18nFn } from '@navikt/fp-ui';\n\nconst formaterDato = (dato: string, i18n: I18nFn) => {\n    if (isToday(dato)) {\n        return i18n('LandOppsummering.IDag');\n    }\n    return formatDate(dato);\n};\n\nconst sortOpphold = (o1: UtenlandsoppholdPeriode, o2: UtenlandsoppholdPeriode) => {\n    return dayjs(o1.fom).isAfter(o2.fom, 'day') ? 1 : 0;\n};\n\ninterface Props {\n    utenlandsoppholdListe: UtenlandsoppholdPeriode[];\n}\n\nconst LandOppsummering: React.FunctionComponent<Props> = ({ utenlandsoppholdListe }) => {\n    const { i18n } = useCustomIntl();\n    //TODO Bytt ut div under med Box når aksel-dep blir oppdatert\n    return (\n        <>\n            {utenlandsoppholdListe.sort(sortOpphold).map((opphold) => (\n                <div\n                    key={`${opphold.landkode}${opphold.fom}`}\n                    style={{ backgroundColor: 'var(--a-blue-100)', padding: '16px', borderRadius: '2px' }}\n                >\n                    <VStack gap=\"1\">\n                        <Label>\n                            {isBeforeToday(opphold.fom) && (\n                                <FormattedMessage\n                                    id=\"LandOppsummering.HarBodd\"\n                                    values={{ country: countries.getName(opphold.landkode, 'nb') }}\n                                />\n                            )}\n                            {!isBeforeToday(opphold.fom) && (\n                                <FormattedMessage\n                                    id=\"LandOppsummering.SkalBo\"\n                                    values={{ country: countries.getName(opphold.landkode, 'nb') }}\n                                />\n                            )}\n                        </Label>\n                        <BodyLong>\n                            {formaterDato(opphold.fom, i18n)} - {formaterDato(opphold.tom, i18n)}\n                        </BodyLong>\n                    </VStack>\n                </div>\n            ))}\n        </>\n    );\n};\n\nexport default LandOppsummering;\n","import { FormattedMessage } from 'react-intl';\nimport dayjs from 'dayjs';\nimport { BodyShort, HStack, VStack } from '@navikt/ds-react';\nimport { notEmpty } from '@navikt/fp-validation';\nimport { useCustomIntl } from '@navikt/fp-ui';\nimport { OmBarnet, erBarnetFødt, erBarnetIkkeFødt } from 'types/OmBarnet';\nimport {\n    Utenlandsopphold,\n    UtenlandsoppholdSenere,\n    UtenlandsoppholdTidligere,\n    UtenlandsoppholdPeriode,\n} from 'types/Utenlandsopphold';\nimport LandOppsummering from './LandOppsummering';\n\nconst erDatoITidsperiode = (dato: string, fom: string, tom: string) => {\n    return dayjs(dato).isBetween(dayjs(fom), dayjs(tom), 'day', '[]');\n};\n\nconst erFamiliehendelsedatoIEnUtenlandsoppholdPeriode = (\n    familiehendelsedato: string,\n    utenlandsoppholdSiste12Mnd: UtenlandsoppholdPeriode[] = [],\n    utenlandsoppholdNeste12Mnd: UtenlandsoppholdPeriode[] = [],\n) => {\n    return (\n        utenlandsoppholdSiste12Mnd.some((tidligereOpphold) =>\n            erDatoITidsperiode(familiehendelsedato, tidligereOpphold.fom, tidligereOpphold.tom),\n        ) ||\n        utenlandsoppholdNeste12Mnd.some((senereOpphold) =>\n            erDatoITidsperiode(familiehendelsedato, senereOpphold.fom, senereOpphold.tom),\n        )\n    );\n};\n\ninterface Props {\n    omBarnet: OmBarnet;\n    utenlandsopphold: Utenlandsopphold;\n    tidligereUtenlandsopphold?: UtenlandsoppholdTidligere;\n    senereUtenlandsopphold?: UtenlandsoppholdSenere;\n}\n\nconst UtenlandsoppholdOppsummering: React.FunctionComponent<Props> = ({\n    omBarnet,\n    utenlandsopphold,\n    tidligereUtenlandsopphold,\n    senereUtenlandsopphold,\n}) => {\n    const { i18n } = useCustomIntl();\n    const harTermin = erBarnetIkkeFødt(omBarnet);\n    const harFødt = erBarnetFødt(omBarnet);\n\n    return (\n        <VStack gap=\"5\">\n            <VStack gap=\"2\">\n                {utenlandsopphold.harBoddUtenforNorgeSiste12Mnd && (\n                    <LandOppsummering\n                        utenlandsoppholdListe={notEmpty(tidligereUtenlandsopphold).utenlandsoppholdSiste12Mnd}\n                    />\n                )}\n                {utenlandsopphold.skalBoUtenforNorgeNeste12Mnd && (\n                    <LandOppsummering\n                        utenlandsoppholdListe={notEmpty(senereUtenlandsopphold).utenlandsoppholdNeste12Mnd}\n                    />\n                )}\n            </VStack>\n            {utenlandsopphold.harBoddUtenforNorgeSiste12Mnd === false && (\n                <BodyShort>\n                    <FormattedMessage\n                        id={'UtenlandsoppholdOppsummering.BoddSisteTolv'}\n                        values={{ country: i18n('UtenlandsoppholdOppsummering.Norge') }}\n                    />\n                </BodyShort>\n            )}\n            {utenlandsopphold.skalBoUtenforNorgeNeste12Mnd === false && (\n                <BodyShort>\n                    <FormattedMessage\n                        id=\"UtenlandsoppholdOppsummering.BoNesteTolv\"\n                        values={{ country: i18n('UtenlandsoppholdOppsummering.Norge') }}\n                    />\n                </BodyShort>\n            )}\n            {harTermin && (\n                <HStack gap=\"2\">\n                    <BodyShort>\n                        <FormattedMessage\n                            id={'UtenlandsoppholdOppsummering.Text.OgKommerPåFødselstidspunktet'}\n                            values={{\n                                country: erFamiliehendelsedatoIEnUtenlandsoppholdPeriode(\n                                    omBarnet.termindato!,\n                                    tidligereUtenlandsopphold?.utenlandsoppholdSiste12Mnd,\n                                    senereUtenlandsopphold?.utenlandsoppholdNeste12Mnd,\n                                )\n                                    ? i18n('UtenlandsoppholdOppsummering.Utlandet')\n                                    : i18n('UtenlandsoppholdOppsummering.Norge'),\n                            }}\n                        />\n                    </BodyShort>\n                </HStack>\n            )}\n            {harFødt && (\n                <BodyShort>\n                    <FormattedMessage\n                        id={'UtenlandsoppholdOppsummering.VarPåFødselstidspunktet'}\n                        values={{\n                            country: erFamiliehendelsedatoIEnUtenlandsoppholdPeriode(\n                                omBarnet.fødselsdato,\n                                tidligereUtenlandsopphold?.utenlandsoppholdSiste12Mnd,\n                                senereUtenlandsopphold?.utenlandsoppholdNeste12Mnd,\n                            )\n                                ? i18n('UtenlandsoppholdOppsummering.Utlandet')\n                                : i18n('UtenlandsoppholdOppsummering.Norge'),\n                        }}\n                    />\n                </BodyShort>\n            )}\n        </VStack>\n    );\n};\n\nexport default UtenlandsoppholdOppsummering;\n","import { useCallback, useState } from 'react';\nimport { Step } from '@navikt/fp-common';\nimport { Accordion, BodyShort, ConfirmationPanel, VStack } from '@navikt/ds-react';\nimport { useAbortSignal } from '@navikt/fp-api';\nimport { notEmpty } from '@navikt/fp-validation';\nimport { StepButtons, useCustomIntl } from '@navikt/fp-ui';\nimport Person from 'types/Person';\nimport Oppsummeringspunkt from './Oppsummeringspunkt';\nimport OmBarnetOppsummering from './OmBarnetOppsummering';\nimport UtenlandsoppholdOppsummering from './UtenlandsoppholdOppsummering';\nimport useEsNavigator from 'appData/useEsNavigator';\nimport useStepData from 'appData/useStepData';\nimport { EsDataType, useEsStateData } from 'appData/EsDataContext';\nimport { OmBarnet } from 'types/OmBarnet';\nimport { UtenlandsoppholdSenere, UtenlandsoppholdTidligere } from 'types/Utenlandsopphold';\nimport Dokumentasjon from 'types/Dokumentasjon';\n\nconst fullNameFormat = (fornavn: string, etternavn: string, mellomnavn?: string) => {\n    return mellomnavn ? `${fornavn} ${mellomnavn} ${etternavn}` : `${fornavn} ${etternavn}`;\n};\n\nexport interface Props {\n    person: Person;\n    sendSøknad: (\n        abortSignal: AbortSignal,\n        omBarnet: OmBarnet,\n        dokumentasjon?: Dokumentasjon,\n        tidligereUtenlandsopphold?: UtenlandsoppholdTidligere,\n        senereUtenlandsopphold?: UtenlandsoppholdSenere,\n    ) => Promise<void>;\n}\n\nconst OppsummeringSteg: React.FunctionComponent<Props> = ({ person, sendSøknad }) => {\n    const { i18n } = useCustomIntl();\n\n    const stepData = useStepData();\n    const navigator = useEsNavigator();\n\n    const omBarnet = notEmpty(useEsStateData(EsDataType.OM_BARNET));\n    const utenlandsopphold = notEmpty(useEsStateData(EsDataType.UTENLANDSOPPHOLD));\n    const dokumentasjon = useEsStateData(EsDataType.DOKUMENTASJON);\n    const tidligereUtenlandsopphold = useEsStateData(EsDataType.UTENLANDSOPPHOLD_TIDLIGERE);\n    const senereUtenlandsopphold = useEsStateData(EsDataType.UTENLANDSOPPHOLD_SENERE);\n    const abortSignal = useAbortSignal();\n\n    const [isChecked, setChecked] = useState(false);\n    const [isError, setIsError] = useState(false);\n\n    const send = useCallback(\n        (setButtonsDisabled: (isDisabled: boolean) => void) => {\n            if (!isChecked) {\n                setIsError(true);\n            } else {\n                setButtonsDisabled(true);\n                sendSøknad(abortSignal, omBarnet, dokumentasjon, tidligereUtenlandsopphold, senereUtenlandsopphold);\n            }\n        },\n        [isChecked],\n    );\n\n    return (\n        <Step\n            bannerTitle={i18n('Søknad.Pageheading')}\n            pageTitle={i18n('OppsummeringSteg.Oppsummering')}\n            onCancel={navigator.avbrytSøknad}\n            steps={stepData.stepConfig}\n            activeStepId={stepData.activeStepId}\n            useNoTempSavingText\n        >\n            <VStack gap=\"10\">\n                <Accordion indent={false}>\n                    <Oppsummeringspunkt tittel={i18n('OppsummeringSteg.OmDeg')}>\n                        <VStack gap=\"4\">\n                            <BodyShort>{fullNameFormat(person.fornavn, person.etternavn, person.mellomnavn)}</BodyShort>\n                            <BodyShort>{person.fnr}</BodyShort>\n                        </VStack>\n                    </Oppsummeringspunkt>\n                    <Oppsummeringspunkt tittel={i18n('OmBarnetSteg.OmBarnet')}>\n                        <OmBarnetOppsummering omBarnet={omBarnet} dokumentasjon={dokumentasjon} />\n                    </Oppsummeringspunkt>\n                    <Oppsummeringspunkt tittel={i18n('OppsummeringSteg.Utenlandsopphold')}>\n                        <UtenlandsoppholdOppsummering\n                            omBarnet={omBarnet}\n                            utenlandsopphold={utenlandsopphold}\n                            tidligereUtenlandsopphold={tidligereUtenlandsopphold}\n                            senereUtenlandsopphold={senereUtenlandsopphold}\n                        />\n                    </Oppsummeringspunkt>\n                </Accordion>\n                <ConfirmationPanel\n                    label={i18n('OppsummeringSteg.Samtykke')}\n                    onChange={() => setChecked((state) => !state)}\n                    checked={isChecked}\n                    error={isError && !isChecked && i18n('OppsummeringSteg.Validering.BekrefteOpplysninger')}\n                />\n                <StepButtons\n                    goToPreviousStep={navigator.goToPreviousDefaultStep}\n                    nextButtonText={i18n('OppsummeringSteg.Button.SendSøknad')}\n                    nextButtonOnClick={send}\n                />\n            </VStack>\n        </Step>\n    );\n};\n\nexport default OppsummeringSteg;\n"],"names":["erTerminDokumentasjon","dokumentasjon","useAbortSignal","controller","useRef","useEffect","Oppsummeringspunkt","tittel","children","isOpen","toggleOpen","useState","toggle","useCallback","open","jsxs","Accordion","jsx","Heading","OmBarnetOppsummering","omBarnet","i18n","useCustomIntl","harAdoptert","erAdopsjon","harTermin","erBarnetIkkeFødt","harFødt","erBarnetFødt","antallBarnSummaryText","VStack","HStack","BodyShort","FormattedMessage","Fragment","formatDate","BodyLong","_","index","Label","AttachmentList","notEmpty","formaterDato","dato","isToday","sortOpphold","o1","o2","dayjs","LandOppsummering","utenlandsoppholdListe","opphold","isBeforeToday","countries.getName","erDatoITidsperiode","fom","tom","erFamiliehendelsedatoIEnUtenlandsoppholdPeriode","familiehendelsedato","utenlandsoppholdSiste12Mnd","utenlandsoppholdNeste12Mnd","tidligereOpphold","senereOpphold","UtenlandsoppholdOppsummering","utenlandsopphold","tidligereUtenlandsopphold","senereUtenlandsopphold","fullNameFormat","fornavn","etternavn","mellomnavn","OppsummeringSteg","person","sendSøknad","stepData","useStepData","navigator","useEsNavigator","useEsStateData","EsDataType","abortSignal","isChecked","setChecked","isError","setIsError","send","setButtonsDisabled","Step","ConfirmationPanel","state","StepButtons","OppsummeringSteg$1"],"mappings":"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"}