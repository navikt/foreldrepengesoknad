{"version":3,"file":"UtenlandsoppholdPeriodeSteg-c9e32797.js","sources":["../../src/sider/steg/utenlandsoppholdPeriode/UtenlandsoppholdPeriodePanel.tsx","../../src/sider/steg/utenlandsoppholdPeriode/UtenlandsoppholdPeriodeSteg.tsx"],"sourcesContent":["import { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport { useFormContext } from 'react-hook-form';\nimport dayjs from 'dayjs';\nimport { TrashIcon } from '@navikt/aksel-icons';\nimport { Button, HStack, Radio, Tag, VStack } from '@navikt/ds-react';\nimport { date1YearAgo, date1YearFromNow, dateRangesCollide, dateToday } from '@navikt/fp-common';\nimport { createCountryOptions } from '@navikt/fp-utils';\nimport { Datepicker, RadioGroupPanel, Select } from '@navikt/fp-form-hooks';\nimport { isRequired, validateDatesNotEqual } from '@navikt/fp-validation';\nimport { ISO_DATE_FORMAT, TIDENES_ENDE } from '@navikt/fp-constants';\n\nimport { validateFromDate, validateToDate } from '../../../fpcommon/validering/valideringsregler';\nimport { Periode } from 'types/Utenlandsopphold';\n\nconst validerPeriodeOverlapp = (\n    intl: IntlShape,\n    alleAndrePerioder: Periode[],\n    fom?: string,\n    tom?: string,\n): string | null => {\n    const dateRanges = alleAndrePerioder.map((u) => ({\n        from: dayjs(u.fom).toDate(),\n        to: u.tom ? dayjs(u.tom).toDate() : TIDENES_ENDE,\n    }));\n\n    const allDateRanges = dateRanges.concat({\n        from: dayjs(fom).toDate(),\n        to: tom ? dayjs(tom).toDate() : TIDENES_ENDE,\n    });\n\n    if (dateRangesCollide(allDateRanges)) {\n        return intl.formatMessage({\n            id: 'UtenlandsoppholdPeriodePanel.Valideringsfeil.Utenlandsopphold.Overlapp',\n        });\n    }\n    return null;\n};\n\ninterface OwnProps {\n    index: number;\n    fjernOpphold: (index: number) => void;\n}\n\nconst UtenlandsoppholdPeriodePanel: React.FunctionComponent<OwnProps> = ({ index, fjernOpphold }) => {\n    const intl = useIntl();\n\n    const {\n        watch,\n        trigger,\n        setValue,\n        resetField,\n        formState: { isSubmitted },\n    } = useFormContext<{ perioder: Periode[] }>();\n\n    const alleAndreUtenlandsopphold = watch(`perioder`).filter((_u, i) => i !== index);\n    const harFlyttetUtForMerEnn12MånderSiden = watch(`perioder.${index}.harFlyttetUtForMerEnn12MånderSiden`);\n    const skalBoIUtlandetMerEnEttÅrFremover = watch(`perioder.${index}.skalBoIUtlandetMerEnEttÅrFremover`);\n    const fom = watch(`perioder.${index}.fom`);\n    const tom = watch(`perioder.${index}.tom`);\n\n    const minDateFom = dayjs(date1YearAgo).toDate();\n    const maxDateFom = tom ? dayjs(tom).toDate() : dayjs(date1YearFromNow).toDate();\n\n    const minDateTom = dayjs(fom || date1YearAgo).toDate();\n    const maxDateTom = dayjs(date1YearFromNow).toDate();\n\n    return (\n        <>\n            <VStack gap=\"2\">\n                <hr style={{ width: '100%' }} color=\"#99C4DD\" />\n                <HStack justify=\"space-between\">\n                    <Tag variant=\"info\">\n                        <FormattedMessage id=\"UtenlandsoppholdPeriodePanel.OppholdIUtlandet\" />\n                    </Tag>\n                    {index > 0 && (\n                        <Button\n                            type=\"button\"\n                            variant=\"tertiary\"\n                            size=\"small\"\n                            icon={<TrashIcon aria-hidden />}\n                            onClick={() => fjernOpphold(index)}\n                        >\n                            <FormattedMessage id=\"UtenlandsoppholdPeriodePanel.SlettOpphold\" />\n                        </Button>\n                    )}\n                </HStack>\n            </VStack>\n            <VStack gap=\"10\" align=\"start\">\n                <Select\n                    name={`perioder.${index}.landkode`}\n                    label={<FormattedMessage id={'UtenlandsoppholdPeriodePanel.Land'} />}\n                    validate={[\n                        isRequired(\n                            intl.formatMessage({\n                                id: 'UtenlandsoppholdPeriodePanel.Validering.Land.Required',\n                            }),\n                        ),\n                    ]}\n                >\n                    {createCountryOptions().map((o: Record<string, any>) => (\n                        <option key={o[0]} value={o[0]}>\n                            {o[1]}\n                        </option>\n                    ))}\n                </Select>\n                <RadioGroupPanel\n                    name={`perioder.${index}.harFlyttetUtForMerEnn12MånderSiden`}\n                    label={<FormattedMessage id=\"UtenlandsoppholdPeriodePanel.Historisk.Spørsmål\" />}\n                    validate={[\n                        isRequired(intl.formatMessage({ id: 'UtenlandsoppholdPeriodePanel.Historisk.IsRequired' })),\n                    ]}\n                    onChange={(value) => {\n                        if (value) {\n                            const ettÅrSiden = dayjs(date1YearAgo).format(ISO_DATE_FORMAT);\n                            setValue(`perioder.${index}.fom`, ettÅrSiden);\n                        } else if (value === false) {\n                            resetField(`perioder.${index}.fom`);\n                        }\n                    }}\n                >\n                    <Radio value={false}>\n                        <FormattedMessage id=\"UtenlandsoppholdPeriodePanel.Nei\" />\n                    </Radio>\n                    <Radio value={true}>\n                        <FormattedMessage id=\"UtenlandsoppholdPeriodePanel.Ja\" />\n                    </Radio>\n                </RadioGroupPanel>\n                {harFlyttetUtForMerEnn12MånderSiden === false && (\n                    <Datepicker\n                        name={`perioder.${index}.fom`}\n                        label={<FormattedMessage id=\"UtenlandsoppholdPeriodePanel.Fraogmed\" />}\n                        minDate={minDateFom}\n                        maxDate={tom ? dayjs(tom).toDate() : dayjs(date1YearFromNow).toDate()}\n                        validate={[\n                            isRequired(\n                                intl.formatMessage({\n                                    id: 'UtenlandsoppholdPeriodePanel.Validering.Fraogmed.Required',\n                                }),\n                            ),\n                            validateDatesNotEqual(\n                                intl.formatMessage({\n                                    id: 'valideringsfeil.fomErLikTom',\n                                }),\n                                tom,\n                            ),\n                            (fomValue) => {\n                                return validateFromDate(\n                                    intl,\n                                    dayjs(fomValue).toDate(),\n                                    minDateFom,\n                                    maxDateFom,\n                                    dayjs(tom).toDate(),\n                                );\n                            },\n                            (fomValue) => {\n                                return validerPeriodeOverlapp(intl, alleAndreUtenlandsopphold, fomValue, tom);\n                            },\n                        ]}\n                        onChange={() => isSubmitted && trigger()}\n                    />\n                )}\n                <RadioGroupPanel\n                    name={`perioder.${index}.skalBoIUtlandetMerEnEttÅrFremover`}\n                    label={<FormattedMessage id=\"UtenlandsoppholdPeriodePanel.Fremtidig.Spørsmål\" />}\n                    validate={[\n                        isRequired(intl.formatMessage({ id: 'UtenlandsoppholdPeriodePanel.Fremtidig.IsRequired' })),\n                    ]}\n                    onChange={(value) => {\n                        if (value) {\n                            const ettÅrFrem = dayjs(date1YearFromNow).format(ISO_DATE_FORMAT);\n                            setValue(`perioder.${index}.tom`, ettÅrFrem);\n                        } else if (value === false) {\n                            resetField(`perioder.${index}.tom`);\n                        }\n                    }}\n                >\n                    <Radio value={false}>\n                        <FormattedMessage id=\"UtenlandsoppholdPeriodePanel.Nei\" />\n                    </Radio>\n                    <Radio value={true}>\n                        <FormattedMessage id=\"UtenlandsoppholdPeriodePanel.Ja\" />\n                    </Radio>\n                </RadioGroupPanel>\n                {skalBoIUtlandetMerEnEttÅrFremover === false && (\n                    <Datepicker\n                        name={`perioder.${index}.tom`}\n                        label={<FormattedMessage id=\"UtenlandsoppholdPeriodePanel.Tilogmed\" />}\n                        minDate={minDateTom}\n                        maxDate={maxDateTom}\n                        validate={[\n                            isRequired(\n                                intl.formatMessage({\n                                    id: 'UtenlandsoppholdPeriodePanel.Validering.Tilogmed.Required',\n                                }),\n                            ),\n                            validateDatesNotEqual(\n                                intl.formatMessage({\n                                    id: 'valideringsfeil.tomErLikFom',\n                                }),\n                                fom,\n                            ),\n                            (tomValue) => {\n                                const tom = tomValue || TIDENES_ENDE;\n                                return validateToDate(\n                                    intl,\n                                    dayjs(tom).toDate(),\n                                    dayjs(fom || dateToday).toDate(),\n                                    dayjs(date1YearFromNow).toDate(),\n                                    dayjs(fom).toDate(),\n                                );\n                            },\n                            (tomValue) => {\n                                return validerPeriodeOverlapp(intl, alleAndreUtenlandsopphold, fom, tomValue);\n                            },\n                        ]}\n                        onChange={() => isSubmitted && trigger()}\n                    />\n                )}\n            </VStack>\n        </>\n    );\n};\n\nexport default UtenlandsoppholdPeriodePanel;\n","import { useCallback, useMemo } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useFieldArray, useForm } from 'react-hook-form';\nimport { PlusIcon } from '@navikt/aksel-icons';\nimport { Button, HStack, VStack } from '@navikt/ds-react';\nimport { Step } from '@navikt/fp-common';\n\nimport { Form, ErrorSummaryHookForm, StepButtonsHookForm } from '@navikt/fp-form-hooks';\nimport UtenlandsoppholdPeriodePanel from './UtenlandsoppholdPeriodePanel';\nimport useEsNavigator from 'appData/useEsNavigator';\nimport { EsDataType, useEsStateData, useEsStateSaveFn } from 'appData/EsDataContext';\nimport { UtenlandsoppholdPerioder, Periode } from 'types/Utenlandsopphold';\nimport useStepData from 'appData/useStepData';\n\nconst DEFAULT_PERIODE = {\n    fom: '',\n    tom: '',\n    landkode: '',\n} as Periode;\n\nconst DEFAULT_FORM_VALUES = {\n    perioder: [DEFAULT_PERIODE],\n} as UtenlandsoppholdPerioder;\n\nconst UtenlandsoppholdPeriodeSteg: React.FunctionComponent = () => {\n    const intl = useIntl();\n\n    const stepData = useStepData();\n    const navigator = useEsNavigator();\n    const utenlandsoppholdPerioder = useEsStateData(EsDataType.UTENLANDSOPPHOLD_PERIODER);\n    const lagreUtenlandsoppholdPerioder = useEsStateSaveFn(EsDataType.UTENLANDSOPPHOLD_PERIODER);\n\n    const defaultValues = useMemo(() => utenlandsoppholdPerioder || DEFAULT_FORM_VALUES, []);\n    const formMethods = useForm<UtenlandsoppholdPerioder>({\n        defaultValues,\n    });\n    const { fields, append, remove } = useFieldArray({\n        name: 'perioder',\n        control: formMethods.control,\n    });\n\n    const leggTilOpphold = useCallback(() => {\n        append(DEFAULT_PERIODE);\n    }, [append]);\n\n    const fjernOpphold = useCallback(\n        (index: number) => {\n            remove(index);\n        },\n        [remove],\n    );\n\n    const lagre = useCallback((formValues: UtenlandsoppholdPerioder) => {\n        lagreUtenlandsoppholdPerioder(formValues);\n        navigator.goToNextDefaultStep();\n    }, []);\n\n    return (\n        <Step\n            bannerTitle={intl.formatMessage({ id: 'Søknad.Pageheading' })}\n            pageTitle={intl.formatMessage({ id: 'UtenlandsoppholdPeriodeSteg.Title' })}\n            onCancel={navigator.avbrytSøknad}\n            steps={stepData.stepConfig}\n            activeStepId={stepData.activeStepId}\n            useNoTempSavingText\n        >\n            <Form formMethods={formMethods} onSubmit={lagre}>\n                <VStack gap=\"10\">\n                    <ErrorSummaryHookForm />\n                    {fields.map((field, index) => (\n                        <UtenlandsoppholdPeriodePanel key={field.id} index={index} fjernOpphold={fjernOpphold} />\n                    ))}\n                    <HStack>\n                        <Button\n                            type=\"button\"\n                            variant=\"secondary\"\n                            size=\"small\"\n                            icon={<PlusIcon aria-hidden />}\n                            onClick={leggTilOpphold}\n                        >\n                            <FormattedMessage id=\"utenlandsopphold.knapp.leggTilLand\" />\n                        </Button>\n                    </HStack>\n                    <StepButtonsHookForm<UtenlandsoppholdPerioder>\n                        goToPreviousStep={navigator.goToPreviousDefaultStep}\n                        saveDataOnPreviousClick={lagreUtenlandsoppholdPerioder}\n                    />\n                </VStack>\n            </Form>\n        </Step>\n    );\n};\n\nexport default UtenlandsoppholdPeriodeSteg;\n"],"names":["validerPeriodeOverlapp","intl","alleAndrePerioder","fom","tom","allDateRanges","u","dayjs","TIDENES_ENDE","dateRangesCollide","UtenlandsoppholdPeriodePanel","index","fjernOpphold","useIntl","watch","trigger","setValue","resetField","isSubmitted","useFormContext","alleAndreUtenlandsopphold","_u","i","harFlyttetUtForMerEnn12MånderSiden","skalBoIUtlandetMerEnEttÅrFremover","minDateFom","date1YearAgo","maxDateFom","date1YearFromNow","minDateTom","maxDateTom","jsxs","Fragment","VStack","jsx","HStack","Tag","FormattedMessage","Button","TrashIcon","Select","isRequired","createCountryOptions","o","RadioGroupPanel","value","ettÅrSiden","ISO_DATE_FORMAT","Radio","Datepicker","validateDatesNotEqual","fomValue","validateFromDate","ettÅrFrem","tomValue","validateToDate","dateToday","DEFAULT_PERIODE","DEFAULT_FORM_VALUES","UtenlandsoppholdPeriodeSteg","stepData","useStepData","navigator","useEsNavigator","utenlandsoppholdPerioder","useEsStateData","EsDataType","lagreUtenlandsoppholdPerioder","useEsStateSaveFn","defaultValues","useMemo","formMethods","useForm","fields","append","remove","useFieldArray","leggTilOpphold","useCallback","lagre","formValues","Step","Form","ErrorSummaryHookForm","field","PlusIcon","StepButtonsHookForm","UtenlandsoppholdPeriodeSteg$1"],"mappings":"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"}