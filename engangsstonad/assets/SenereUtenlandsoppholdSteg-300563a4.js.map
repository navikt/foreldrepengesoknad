{"version":3,"file":"SenereUtenlandsoppholdSteg-300563a4.js","sources":["../../src/sider/steg/utenlandsoppholdSenere/valideringsregler.ts","../../src/sider/steg/utenlandsoppholdSenere/SenereUtenlandsoppholdPeriode.tsx","../../src/sider/steg/utenlandsoppholdSenere/SenereUtenlandsoppholdSteg.tsx"],"sourcesContent":["import { formatDateExtended } from '@navikt/fp-common';\nimport { I18nFn } from '@navikt/fp-ui';\nimport { isDateWithinRange } from '@navikt/fp-utils';\nimport dayjs from 'dayjs';\n\n// TODO Flytt desse\n\nconst validateDateInRange = (\n    i18n: I18nFn,\n    date: Date | undefined,\n    minDate: Date,\n    maxDate: Date,\n    isFomDate: boolean,\n) => {\n    if (date === undefined) {\n        if (isFomDate) {\n            return i18n('Valideringsfeil.FraOgMedDato.GyldigDato');\n        }\n\n        return i18n('Valideringsfeil.TilOgMedDato.GyldigDato');\n    }\n\n    if (!isDateWithinRange(date, minDate, maxDate)) {\n        return i18n('Valideringsfeil.DateOutsideRange', {\n            fom: formatDateExtended(minDate),\n            tom: formatDateExtended(maxDate),\n        });\n    }\n\n    return null;\n};\n\nexport const validateFromDate = (i18n: I18nFn, date: Date | undefined, minDate: Date, maxDate: Date, toDate?: Date) => {\n    const error = validateDateInRange(i18n, date, minDate, maxDate, true);\n    if (error !== undefined) {\n        return error;\n    }\n    if (toDate && dayjs(date).isAfter(toDate, 'day')) {\n        // TODO Bør ha generell id\n        return i18n('Valideringsfeil.Utenlandsopphold.FørTilDato');\n    }\n    return undefined;\n};\n\nexport const validateToDate = (i18n: I18nFn, date: Date | undefined, minDate: Date, maxDate: Date, fromDate?: Date) => {\n    const error = validateDateInRange(i18n, date, minDate, maxDate, false);\n    if (error !== undefined) {\n        return error;\n    }\n    if (fromDate && dayjs(date).isBefore(fromDate, 'day')) {\n        // TODO Bør ha generell id\n        return i18n('Valideringsfeil.Utenlandsopphold.EtterFraDato');\n    }\n    return undefined;\n};\n","import { FormattedMessage } from 'react-intl';\nimport { useFormContext } from 'react-hook-form';\nimport dayjs from 'dayjs';\nimport { TrashIcon } from '@navikt/aksel-icons';\nimport { Button, VStack } from '@navikt/ds-react';\nimport { date1YearFromNow, dateRangesCollide, dateToday } from '@navikt/fp-common';\nimport { createCountryOptions } from '@navikt/fp-utils';\nimport { Datepicker, Select } from '@navikt/fp-form-hooks';\nimport { isDatesNotTheSame, isRequired } from '@navikt/fp-validation';\nimport { TIDENES_ENDE } from '@navikt/fp-constants';\n\nimport { validateFromDate, validateToDate } from './valideringsregler';\nimport { UtenlandsoppholdPeriode } from 'types/Utenlandsopphold';\nimport { useCustomIntl, I18nFn } from '@navikt/fp-ui';\n\nconst validerPeriodeOverlapp = (\n    i18n: I18nFn,\n    alleAndrePerioder: UtenlandsoppholdPeriode[],\n    fom: string,\n    tom?: string,\n): string | null => {\n    const dateRanges = alleAndrePerioder.map((u) => ({\n        from: dayjs(u.fom).toDate(),\n        to: u.tom ? dayjs(u.tom).toDate() : TIDENES_ENDE,\n    }));\n\n    const allDateRanges = dateRanges.concat({\n        from: dayjs(fom).toDate(),\n        to: tom ? dayjs(tom).toDate() : TIDENES_ENDE,\n    });\n\n    if (dateRangesCollide(allDateRanges)) {\n        return i18n('SenereUtenlandsoppholdSteg.Valideringsfeil.Utenlandsopphold.Overlapp');\n    }\n    return null;\n};\n\ninterface OwnProps {\n    index: number;\n    fjernOpphold: (index: number) => void;\n}\n\nconst SenereUtenlandsoppholdPanel: React.FunctionComponent<OwnProps> = ({ index, fjernOpphold }) => {\n    const { i18n } = useCustomIntl();\n\n    const {\n        watch,\n        trigger,\n        formState: { isSubmitted },\n    } = useFormContext<{ utenlandsoppholdNeste12Mnd: UtenlandsoppholdPeriode[] }>();\n\n    const alleAndreUtenlandsopphold = watch(`utenlandsoppholdNeste12Mnd`).filter((_u, i) => i !== index);\n    const fom = watch(`utenlandsoppholdNeste12Mnd.${index}.fom`);\n    const tom = watch(`utenlandsoppholdNeste12Mnd.${index}.tom`);\n\n    const minDateFom = dayjs(dateToday).toDate();\n    const maxDateFom = tom ? dayjs(tom).toDate() : dayjs(date1YearFromNow).toDate();\n\n    const minDateTom = dayjs(fom || dateToday).toDate();\n    const maxDateTom = dayjs(date1YearFromNow).toDate();\n\n    return (\n        <VStack gap=\"5\" align=\"start\">\n            <Select\n                name={`utenlandsoppholdNeste12Mnd.${index}.landkode`}\n                label={\n                    <FormattedMessage\n                        id={'SenereUtenlandsoppholdSteg.LeggTilUtenlandsopphold.Spørsmål.HvilketLandSkalDuBoI'}\n                    />\n                }\n                validate={[\n                    isRequired(i18n('SenereUtenlandsoppholdSteg.LeggTilUtenlandsopphold.LandDuSkalBoIPåkreved')),\n                ]}\n            >\n                {createCountryOptions().map((o: Record<string, any>) => (\n                    <option key={o[0]} value={o[0]}>\n                        {o[1]}\n                    </option>\n                ))}\n            </Select>\n            <Datepicker\n                name={`utenlandsoppholdNeste12Mnd.${index}.fom`}\n                label={<FormattedMessage id=\"SenereUtenlandsoppholdSteg.LeggTilUtenlandsopphold.Fraogmed\" />}\n                minDate={dayjs(dateToday).toDate()}\n                maxDate={tom ? dayjs(tom).toDate() : dayjs(date1YearFromNow).toDate()}\n                validate={[\n                    isRequired(i18n('SenereUtenlandsoppholdSteg.LeggTilUtenlandsopphold.LandFomDuSkalBoIPåkreved')),\n                    isDatesNotTheSame(i18n('SenereUtenlandsoppholdSteg.FomErLikTom'), tom),\n                    (fomValue) => {\n                        return validateFromDate(\n                            i18n,\n                            dayjs(fomValue).toDate(),\n                            minDateFom,\n                            maxDateFom,\n                            dayjs(tom).toDate(),\n                        );\n                    },\n                    (fomValue) => {\n                        return validerPeriodeOverlapp(i18n, alleAndreUtenlandsopphold, fomValue, tom);\n                    },\n                ]}\n                onChange={() => isSubmitted && trigger()}\n            />\n            <Datepicker\n                name={`utenlandsoppholdNeste12Mnd.${index}.tom`}\n                label={<FormattedMessage id=\"SenereUtenlandsoppholdSteg.LeggTilUtenlandsopphold.Tilogmed\" />}\n                minDate={minDateTom}\n                maxDate={maxDateTom}\n                validate={[\n                    isRequired(i18n('SenereUtenlandsoppholdSteg.LeggTilUtenlandsopphold.LandTomDuSkalBoIPåkreved')),\n                    isDatesNotTheSame(i18n('SenereUtenlandsoppholdSteg.TomErLikFom'), fom),\n                    (tomValue) => {\n                        const tom = tomValue || TIDENES_ENDE;\n                        return validateToDate(\n                            i18n,\n                            dayjs(tom).toDate(),\n                            dayjs(fom || dateToday).toDate(),\n                            dayjs(date1YearFromNow).toDate(),\n                            dayjs(fom).toDate(),\n                        );\n                    },\n                    (tomValue) => {\n                        return validerPeriodeOverlapp(i18n, alleAndreUtenlandsopphold, fom, tomValue);\n                    },\n                ]}\n                onChange={() => isSubmitted && trigger()}\n            />\n            {index > 0 && (\n                <Button\n                    type=\"button\"\n                    variant=\"tertiary\"\n                    size=\"small\"\n                    icon={<TrashIcon aria-hidden />}\n                    onClick={() => fjernOpphold(index)}\n                >\n                    <FormattedMessage id=\"SenereUtenlandsoppholdSteg.Knapp.SlettOpphold\" />\n                </Button>\n            )}\n        </VStack>\n    );\n};\n\nexport default SenereUtenlandsoppholdPanel;\n","import { Fragment, useCallback, useMemo } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useFieldArray, useForm } from 'react-hook-form';\nimport { PlusIcon } from '@navikt/aksel-icons';\nimport { Button, VStack } from '@navikt/ds-react';\nimport { Step } from '@navikt/fp-common';\n\nimport { Form, ErrorSummaryHookForm, StepButtonsHookForm } from '@navikt/fp-form-hooks';\nimport SenereUtenlandsoppholdPeriode from './SenereUtenlandsoppholdPeriode';\nimport useEsNavigator from 'appData/useEsNavigator';\nimport { EsDataType, useEsStateData, useEsStateSaveFn } from 'appData/EsDataContext';\nimport { UtenlandsoppholdSenere, UtenlandsoppholdPeriode } from 'types/Utenlandsopphold';\nimport useStepData from 'appData/useStepData';\nimport { useCustomIntl } from '@navikt/fp-ui';\n\nconst DEFAULT_PERIODE = {\n    fom: '',\n    tom: '',\n    landkode: '',\n} as UtenlandsoppholdPeriode;\n\nconst DEFAULT_FORM_VALUES = {\n    utenlandsoppholdNeste12Mnd: [DEFAULT_PERIODE],\n} as UtenlandsoppholdSenere;\n\nconst SenereUtenlandsoppholdSteg: React.FunctionComponent = () => {\n    const { i18n } = useCustomIntl();\n\n    const stepData = useStepData();\n    const navigator = useEsNavigator();\n    const senereUtenlandsopphold = useEsStateData(EsDataType.UTENLANDSOPPHOLD_SENERE);\n    const lagreSenereUtenlandsopphold = useEsStateSaveFn(EsDataType.UTENLANDSOPPHOLD_SENERE);\n\n    const defaultValues = useMemo(() => senereUtenlandsopphold || DEFAULT_FORM_VALUES, []);\n    const formMethods = useForm<UtenlandsoppholdSenere>({\n        defaultValues,\n    });\n    const { fields, append, remove } = useFieldArray({\n        name: 'utenlandsoppholdNeste12Mnd',\n        control: formMethods.control,\n    });\n\n    const leggTilOpphold = useCallback(() => {\n        append(DEFAULT_PERIODE);\n    }, [append]);\n\n    const fjernOpphold = useCallback(\n        (index: number) => {\n            remove(index);\n        },\n        [remove],\n    );\n\n    const lagre = useCallback((formValues: UtenlandsoppholdSenere) => {\n        lagreSenereUtenlandsopphold(formValues);\n        navigator.goToNextDefaultStep();\n    }, []);\n\n    return (\n        <Step\n            bannerTitle={i18n('Søknad.Pageheading')}\n            pageTitle={i18n('SenereUtenlandsoppholdSteg.Fremtidig')}\n            onCancel={navigator.avbrytSøknad}\n            steps={stepData.stepConfig}\n            activeStepId={stepData.activeStepId}\n            useNoTempSavingText\n        >\n            <Form formMethods={formMethods} onSubmit={lagre}>\n                <VStack gap=\"10\">\n                    <ErrorSummaryHookForm />\n                    <VStack gap=\"10\" align=\"start\">\n                        {fields.map((field, index) => (\n                            <Fragment key={field.id}>\n                                <SenereUtenlandsoppholdPeriode index={index} fjernOpphold={fjernOpphold} />\n                                {fields.length > 1 && <hr style={{ width: '100%' }} color=\"#99C4DD\" />}\n                            </Fragment>\n                        ))}\n                        <Button\n                            type=\"button\"\n                            variant=\"secondary\"\n                            size=\"small\"\n                            icon={<PlusIcon aria-hidden />}\n                            onClick={leggTilOpphold}\n                        >\n                            <FormattedMessage id=\"SenereUtenlandsoppholdSteg.Knapp.LeggTilLand\" />\n                        </Button>\n                    </VStack>\n                    <StepButtonsHookForm<UtenlandsoppholdSenere>\n                        goToPreviousStep={navigator.goToPreviousDefaultStep}\n                        saveDataOnPreviousClick={lagreSenereUtenlandsopphold}\n                    />\n                </VStack>\n            </Form>\n        </Step>\n    );\n};\n\nexport default SenereUtenlandsoppholdSteg;\n"],"names":["validateDateInRange","i18n","date","minDate","maxDate","isFomDate","isDateWithinRange","formatDateExtended","validateFromDate","toDate","error","dayjs","validateToDate","fromDate","validerPeriodeOverlapp","alleAndrePerioder","fom","tom","allDateRanges","u","TIDENES_ENDE","dateRangesCollide","SenereUtenlandsoppholdPanel","index","fjernOpphold","useCustomIntl","watch","trigger","isSubmitted","useFormContext","alleAndreUtenlandsopphold","_u","i","minDateFom","dateToday","maxDateFom","date1YearFromNow","minDateTom","maxDateTom","jsxs","VStack","jsx","Select","FormattedMessage","isRequired","createCountryOptions","o","Datepicker","isDatesNotTheSame","fomValue","tomValue","Button","TrashIcon","DEFAULT_PERIODE","DEFAULT_FORM_VALUES","SenereUtenlandsoppholdSteg","stepData","useStepData","navigator","useEsNavigator","senereUtenlandsopphold","useEsStateData","EsDataType","lagreSenereUtenlandsopphold","useEsStateSaveFn","defaultValues","useMemo","formMethods","useForm","fields","append","remove","useFieldArray","leggTilOpphold","useCallback","lagre","formValues","Step","Form","ErrorSummaryHookForm","field","Fragment","SenereUtenlandsoppholdPeriode","PlusIcon","StepButtonsHookForm","SenereUtenlandsoppholdSteg$1"],"mappings":"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"}