{"version":3,"file":"Utenlandsopphold-99f0a89d.js","sources":["../../../../node_modules/.pnpm/@navikt+sif-common-formik-ds@0.25.0_@navikt+ds-css@4.12.1_@navikt+ds-datepicker@4.2.0_@navikt_mlrplejoncturajlt26uyjonyy/node_modules/@navikt/sif-common-formik-ds/lib/components/formik-modal-form/FormikModalFormAndList.js","../../src/app/steps/utenlandsopphold/utenlandsoppholdFormQuestions.ts","../../src/app/steps/utenlandsopphold/bostedUtlandListAndDialog/types.ts","../../src/app/steps/utenlandsopphold/utenlandsoppholdValidering.ts","../../src/app/steps/utenlandsopphold/bostedUtlandListAndDialog/BostedUtlandForm.tsx","../../src/app/steps/utenlandsopphold/bostedUtlandListAndDialog/BostedUtlandList.tsx","../../src/app/steps/utenlandsopphold/bostedUtlandListAndDialog/BostedUtlandListAndDialog.tsx","../../src/app/steps/utenlandsopphold/utenlandsoppholdFormUtils.ts","../../src/app/steps/utenlandsopphold/Utenlandsopphold.tsx"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from 'react';\nimport { FastField, Field } from 'formik';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport ModalFormAndList from './modal-form-and-list/ModalFormAndList';\nimport './formikModalForm.scss';\nfunction FormikModalFormAndList(_a) {\n    var name = _a.name, labels = _a.labels, listRenderer = _a.listRenderer, formRenderer = _a.formRenderer, sortFunc = _a.sortFunc, onAfterChange = _a.onAfterChange, dialogWidth = _a.dialogWidth, shouldCloseOnOverlayClick = _a.shouldCloseOnOverlayClick, error = _a.error, maxItems = _a.maxItems, useFastField = _a.useFastField, confirmDelete = _a.confirmDelete, validate = _a.validate;\n    var context = React.useContext(TypedFormikFormContext);\n    var FieldComponent = useFastField ? FastField : Field;\n    return (_jsx(FieldComponent, { name: name, validate: validate ? function (value) { return validate(value, name); } : undefined, children: function (_a) {\n            var field = _a.field, form = _a.form;\n            return (_jsx(ModalFormAndList, { labels: labels, items: field.value, error: error || (context ? context.getAndRenderFieldErrorMessage(field, form) : undefined), maxItems: maxItems, dialogWidth: dialogWidth, shouldCloseOnOverlayClick: shouldCloseOnOverlayClick, confirmDelete: confirmDelete, onChange: function (values) {\n                    var updatedValues = sortFunc ? values.sort(sortFunc) : values;\n                    form.setFieldValue(field.name, updatedValues);\n                    if (onAfterChange) {\n                        onAfterChange(updatedValues);\n                    }\n                    if (context) {\n                        context.onAfterFieldValueSet();\n                    }\n                }, formRenderer: formRenderer, listRenderer: function (_a) {\n                    var onEdit = _a.onEdit, onDelete = _a.onDelete;\n                    return listRenderer({ items: field.value, onDelete: onDelete, onEdit: onEdit });\n                } }));\n        } }));\n}\nexport default FormikModalFormAndList;\n//# sourceMappingURL=FormikModalFormAndList.js.map","import { QuestionConfig, Questions } from '@navikt/sif-common-question-config';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\nimport { UtenlandsoppholdFormData, UtenlandsoppholdFieldNames } from './utenlandsoppholdFormTypes';\n\nconst UtenlandsoppholdFormConfig: QuestionConfig<UtenlandsoppholdFormData, UtenlandsoppholdFieldNames> = {\n    [UtenlandsoppholdFieldNames.harBoddUtenforNorgeSiste12Mnd]: {\n        isAnswered: ({ harBoddUtenforNorgeSiste12Mnd }) => harBoddUtenforNorgeSiste12Mnd !== YesOrNo.UNANSWERED,\n        isIncluded: () => true,\n        visibilityFilter: ({ skalBoUtenforNorgeNeste12Mnd }) => skalBoUtenforNorgeNeste12Mnd !== YesOrNo.UNANSWERED,\n    },\n    [UtenlandsoppholdFieldNames.utenlandsoppholdSiste12Mnd]: {\n        isAnswered: ({ utenlandsoppholdSiste12Mnd }) => utenlandsoppholdSiste12Mnd.length > 0,\n        isOptional: () => true,\n        isIncluded: ({ harBoddUtenforNorgeSiste12Mnd }) => harBoddUtenforNorgeSiste12Mnd === YesOrNo.YES,\n    },\n    [UtenlandsoppholdFieldNames.skalBoUtenforNorgeNeste12Mnd]: {\n        isAnswered: ({ skalBoUtenforNorgeNeste12Mnd }) => skalBoUtenforNorgeNeste12Mnd !== YesOrNo.UNANSWERED,\n        isIncluded: () => true,\n    },\n    [UtenlandsoppholdFieldNames.utenlandsoppholdNeste12Mnd]: {\n        isAnswered: ({ utenlandsoppholdNeste12Mnd }) => utenlandsoppholdNeste12Mnd.length > 0,\n        isOptional: () => true,\n        isIncluded: ({ skalBoUtenforNorgeNeste12Mnd }) => skalBoUtenforNorgeNeste12Mnd === YesOrNo.YES,\n    },\n};\n\nexport const utenlandsoppholdFormQuestions = Questions<UtenlandsoppholdFormData, UtenlandsoppholdFieldNames>(\n    UtenlandsoppholdFormConfig\n);\n","export interface BostedUtland {\n    id?: string;\n    fom: string;\n    tom: string;\n    landkode: string;\n}\n\nexport const isValidBostedUtland = (bosted: Partial<BostedUtland>): bosted is BostedUtland => {\n    const { fom, landkode, tom } = bosted;\n    return fom !== undefined && landkode !== undefined && tom !== undefined;\n};\n","import {\n    date1YearAgo,\n    date1YearFromNow,\n    dateRangesCollide,\n    dateRangesExceedsRange,\n    formatDateExtended,\n    intlUtils,\n} from '@navikt/fp-common';\nimport dayjs from 'dayjs';\nimport { BostedUtland } from './bostedUtlandListAndDialog/types';\nimport isBetween from 'dayjs/plugin/isBetween';\nimport { IntlShape } from 'react-intl';\n\ndayjs.extend(isBetween);\n\nconst dateIsWithinRange = (date: Date, minDate: Date, maxDate: Date) => {\n    return dayjs(date).isBetween(minDate, maxDate, 'day', '[]');\n};\n\nconst validateDateInRange = (\n    intl: IntlShape,\n    date: Date | undefined,\n    minDate: Date,\n    maxDate: Date,\n    isFomDate: boolean\n) => {\n    if (date === undefined) {\n        if (isFomDate) {\n            return intlUtils(intl, 'valideringsfeil.fraOgMedDato.gyldigDato');\n        }\n\n        return intlUtils(intl, 'valideringsfeil.tilOgMedDato.gyldigDato');\n    }\n\n    if (!dateIsWithinRange(date, minDate, maxDate)) {\n        return intlUtils(intl, 'valideringsfeil.dateOutsideRange', {\n            fom: formatDateExtended(minDate),\n            tom: formatDateExtended(maxDate),\n        });\n    }\n\n    return undefined;\n};\n\nconst validateFromDate = (intl: IntlShape, date: Date | undefined, minDate: Date, maxDate: Date, toDate?: Date) => {\n    const error = validateDateInRange(intl, date, minDate, maxDate, true);\n    if (error !== undefined) {\n        return error;\n    }\n    if (toDate && dayjs(date).isAfter(toDate, 'day')) {\n        return intlUtils(intl, 'valideringsfeil.utenlandsopphold.førTilDato');\n    }\n    return undefined;\n};\n\nconst validateToDate = (intl: IntlShape, date: Date | undefined, minDate: Date, maxDate: Date, fromDate?: Date) => {\n    const error = validateDateInRange(intl, date, minDate, maxDate, false);\n    if (error !== undefined) {\n        return error;\n    }\n    if (fromDate && dayjs(date).isBefore(fromDate, 'day')) {\n        return intlUtils(intl, 'valideringsfeil.utenlandsopphold.etterFraDato');\n    }\n    return undefined;\n};\n\nexport const dateRangeValidation = {\n    validateToDate,\n    validateFromDate,\n};\n\nexport const validateUtenlandsoppholdNeste12Mnd = (utenlandsopphold: BostedUtland[], intl: IntlShape) => {\n    if (utenlandsopphold.length === 0) {\n        return intlUtils(intl, 'valideringsfeil.utenlandsopphold.neste12Måneder.ikkeRegistrert');\n    }\n\n    const dateRanges = utenlandsopphold.map((u) => ({ from: dayjs(u.fom).toDate(), to: dayjs(u.tom).toDate() }));\n\n    if (dateRangesCollide(dateRanges)) {\n        return intlUtils(intl, 'valideringsfeil.utenlandsopphold.overlapp');\n    }\n    if (dateRangesExceedsRange(dateRanges, { from: new Date(), to: date1YearFromNow })) {\n        return intlUtils(intl, 'valideringsfeil.utenlandsoppholdUtenforPeriode');\n    }\n    return undefined;\n};\n\nexport const validateUtenlandsoppholdSiste12Mnd = (utenlandsopphold: BostedUtland[], intl: IntlShape) => {\n    if (utenlandsopphold.length === 0) {\n        return intlUtils(intl, 'valideringsfeil.utenlandsopphold.siste12Måneder.ikkeRegistrert');\n    }\n\n    const dateRanges = utenlandsopphold.map((u) => ({ from: dayjs(u.fom).toDate(), to: dayjs(u.tom).toDate() }));\n\n    if (dateRangesCollide(dateRanges)) {\n        return intlUtils(intl, 'valideringsfeil.utenlandsopphold.overlapp');\n    }\n    if (dateRangesExceedsRange(dateRanges, { from: date1YearAgo, to: new Date() })) {\n        return intlUtils(intl, 'valideringsfeil.utenlandsoppholdUtenforPeriode');\n    }\n\n    return undefined;\n};\n","import { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport { getTypedFormComponents, ISOStringToDate } from '@navikt/sif-common-formik-ds/lib';\nimport getMessage from 'common/util/i18nUtils';\nimport { BostedUtland, isValidBostedUtland } from './types';\nimport { Block, intlUtils } from '@navikt/fp-common';\nimport { dateRangeValidation } from '../utenlandsoppholdValidering';\nimport { Heading } from '@navikt/ds-react';\nimport dayjs from 'dayjs';\n\nexport const commonFieldErrorRenderer = (intl: IntlShape, error: any): any => {\n    if (typeof error === 'object' && error.key !== undefined) {\n        return intl.formatMessage({ id: error.key }, error.values);\n    }\n    if (typeof error === 'string') {\n        return error;\n    }\n    return error !== undefined;\n};\n\nexport interface BostedUtlandFormLabels {\n    tittel: string;\n}\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    bosted?: BostedUtland;\n    onSubmit: (values: BostedUtland) => void;\n    onCancel: () => void;\n    erFremtidigOpphold: boolean;\n}\n\nenum BostedUtlandFormFields {\n    fom = 'fom',\n    tom = 'tom',\n    landkode = 'landkode',\n}\n\ntype FormValues = Partial<{\n    [BostedUtlandFormFields.fom]: string;\n    [BostedUtlandFormFields.tom]: string;\n    [BostedUtlandFormFields.landkode]: string;\n}>;\n\nconst Form = getTypedFormComponents<BostedUtlandFormFields, FormValues>();\n\nconst mapBostedToFormValues = (bosted: BostedUtland): FormValues => {\n    return {\n        fom: bosted.fom,\n        tom: bosted.tom,\n        landkode: bosted.landkode,\n    };\n};\n\nconst BostedUtlandForm: React.FunctionComponent<Props> = ({\n    maxDate,\n    minDate,\n    bosted,\n    onSubmit,\n    onCancel,\n    erFremtidigOpphold,\n}) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FormValues) => {\n        const updatedBosted: Partial<BostedUtland> = {\n            ...bosted,\n            fom: formValues.fom,\n            tom: formValues.tom,\n            landkode: formValues.landkode,\n        };\n        if (isValidBostedUtland(updatedBosted)) {\n            onSubmit(updatedBosted);\n        } else {\n            throw new Error('BostedUtlandForm: Formvalues is not a valid BostedUtland on submit.');\n        }\n    };\n\n    return (\n        <Form.FormikWrapper\n            initialValues={bosted ? mapBostedToFormValues(bosted) : {}}\n            onSubmit={onFormikSubmit}\n            renderForm={({ values }) => {\n                return (\n                    <Form.Form onCancel={onCancel}>\n                        <Heading size=\"medium\">\n                            <FormattedMessage id={'utenlandsopphold.leggTilUtenlandsopphold.tittel'} />\n                        </Heading>\n                        <Block>\n                            <Form.DateIntervalPicker\n                                legend={getMessage(intl, 'utenlandsopphold.leggTilUtenlandsopphold.tidsrom')}\n                                fromDatepickerProps={{\n                                    name: BostedUtlandFormFields.fom,\n                                    label: getMessage(intl, 'utenlandsopphold.leggTilUtenlandsopphold.fraogmed'),\n                                    fullscreenOverlay: true,\n                                    placeholder: 'dd.mm.åååå',\n                                    minDate,\n                                    invalidFormatError: 'valideringsfeil.fraOgMedDato.gyldigDato',\n                                    maxDate: ISOStringToDate(values.tom) || maxDate,\n                                    validate: (value) => {\n                                        if (values.tom && values.fom && dayjs(values.tom).isSame(values.fom)) {\n                                            return getMessage(intl, 'valideringsfeil.fomErLikTom');\n                                        }\n                                        return dateRangeValidation.validateFromDate(\n                                            intl,\n                                            ISOStringToDate(value),\n                                            minDate,\n                                            maxDate,\n                                            ISOStringToDate(values.tom)\n                                        );\n                                    },\n                                }}\n                                toDatepickerProps={{\n                                    name: BostedUtlandFormFields.tom,\n                                    label: getMessage(intl, 'utenlandsopphold.leggTilUtenlandsopphold.tilogmed'),\n                                    fullscreenOverlay: true,\n                                    placeholder: 'dd.mm.åååå',\n                                    minDate: ISOStringToDate(values.fom) || minDate,\n                                    maxDate,\n                                    invalidFormatError: 'valideringsfeil.tilOgMedDato.gyldigDato',\n                                    validate: (value) => {\n                                        if (values.tom && values.fom && dayjs(values.tom).isSame(values.fom)) {\n                                            return getMessage(intl, 'valideringsfeil.tomErLikFom');\n                                        }\n                                        return dateRangeValidation.validateToDate(\n                                            intl,\n                                            ISOStringToDate(value),\n                                            minDate,\n                                            maxDate,\n                                            ISOStringToDate(values.fom)\n                                        );\n                                    },\n                                }}\n                            />\n                        </Block>\n                        <Block margin=\"xl\">\n                            <Form.CountrySelect\n                                name={BostedUtlandFormFields.landkode}\n                                label={\n                                    erFremtidigOpphold\n                                        ? getMessage(\n                                              intl,\n                                              'utenlandsopphold.leggTilUtenlandsopphold.spørsmål.hvilketLandSkalDuBoI'\n                                          )\n                                        : getMessage(\n                                              intl,\n                                              'utenlandsopphold.leggTilUtenlandsopphold.spørsmål.hvilketLandHarDuBoddI'\n                                          )\n                                }\n                                validate={(country) => {\n                                    if (country === '' || !country) {\n                                        return erFremtidigOpphold\n                                            ? intlUtils(\n                                                  intl,\n                                                  'valideringsfeil.leggTilUtenlandsopphold.landDuSkalBoIPåkreved'\n                                              )\n                                            : intlUtils(\n                                                  intl,\n                                                  'valideringsfeil.leggTilUtenlandsopphold.landDuHarBoddIPåkrevd'\n                                              );\n                                    }\n\n                                    return undefined;\n                                }}\n                                useAlpha3Code={false}\n                            />\n                        </Block>\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default BostedUtlandForm;\n","import { useIntl } from 'react-intl';\nimport { getCountryName } from '@navikt/sif-common-formik-ds';\nimport { BostedUtland } from './types';\nimport { ActionLink, bemUtils, formatDateExtended, ItemList } from '@navikt/fp-common';\n\nimport dayjs from 'dayjs';\n\nimport './bostedUtlandList.less';\n\ninterface Props {\n    bosteder: BostedUtland[];\n    onEdit?: (opphold: BostedUtland) => void;\n    onDelete?: (opphold: BostedUtland) => void;\n}\n\nconst bem = bemUtils('bostedUtlandList');\n\nconst BostedUtlandList: React.FunctionComponent<Props> = ({ bosteder, onDelete, onEdit }) => {\n    const intl = useIntl();\n    const renderBostedUtlandLabel = (opphold: BostedUtland): React.ReactNode => {\n        const navn = getCountryName(opphold.landkode, intl.locale);\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('land')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(opphold)}>{navn}</ActionLink>}\n                    {!onEdit && <span>{navn}</span>}\n                </span>\n                <span className={bem.element('dato')}>\n                    {formatDateExtended(dayjs(opphold.fom).toDate())} -{' '}\n                    {formatDateExtended(dayjs(opphold.tom).toDate())}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<BostedUtland>\n            getItemId={(opphold: BostedUtland) => opphold.id}\n            getItemTitle={(opphold: BostedUtland) => getCountryName(opphold.landkode, intl.locale)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderBostedUtlandLabel}\n            items={bosteder}\n        />\n    );\n};\n\nexport default BostedUtlandList;\n","import { FormikModalFormAndList, ModalFormAndListLabels } from '@navikt/sif-common-formik-ds';\nimport BostedUtlandForm from './BostedUtlandForm';\nimport BostedUtlandListe from './BostedUtlandList';\nimport { BostedUtland } from './types';\nimport { sortItemsByFom } from '@navikt/fp-common';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: any;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n    erFremtidigOpphold: boolean;\n}\n\nfunction BostedUtlandListAndDialog<FieldNames>({\n    name,\n    minDate,\n    maxDate,\n    validate,\n    labels,\n    erFremtidigOpphold,\n}: Props<FieldNames>) {\n    return (\n        <FormikModalFormAndList<FieldNames, BostedUtland, string>\n            name={name}\n            labels={labels}\n            validate={validate}\n            dialogWidth=\"narrow\"\n            sortFunc={sortItemsByFom}\n            formRenderer={({ onSubmit, onCancel, item }) => (\n                <BostedUtlandForm\n                    bosted={item}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                    erFremtidigOpphold={erFremtidigOpphold}\n                />\n            )}\n            listRenderer={({ items, onEdit, onDelete }) => (\n                <BostedUtlandListe bosteder={items} onEdit={onEdit} onDelete={onDelete} />\n            )}\n            shouldCloseOnOverlayClick={true}\n        />\n    );\n}\n\nexport default BostedUtlandListAndDialog;\n","import { UtenlandsoppholdFormData } from './utenlandsoppholdFormTypes';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\n\nexport const utenlandsoppholdFormCleanup = (formValues: UtenlandsoppholdFormData): UtenlandsoppholdFormData => {\n    const {\n        harBoddUtenforNorgeSiste12Mnd,\n        skalBoUtenforNorgeNeste12Mnd,\n        utenlandsoppholdNeste12Mnd,\n        utenlandsoppholdSiste12Mnd,\n    } = formValues;\n\n    return {\n        harBoddUtenforNorgeSiste12Mnd,\n        skalBoUtenforNorgeNeste12Mnd,\n        utenlandsoppholdNeste12Mnd: skalBoUtenforNorgeNeste12Mnd === YesOrNo.YES ? utenlandsoppholdNeste12Mnd : [],\n        utenlandsoppholdSiste12Mnd: harBoddUtenforNorgeSiste12Mnd === YesOrNo.YES ? utenlandsoppholdSiste12Mnd : [],\n    };\n};\n","import {\n    bemUtils,\n    Block,\n    date1YearAgo,\n    date1YearFromNow,\n    dateToday,\n    intlUtils,\n    Step,\n    StepButtonWrapper,\n    UtvidetInformasjon,\n    validateYesOrNoIsAnswered,\n} from '@navikt/fp-common';\nimport { UnansweredQuestionsInfo } from '@navikt/sif-common-formik-ds/lib';\nimport {\n    UtenlandsoppholdFieldNames,\n    UtenlandsoppholdFormComponents,\n    UtenlandsoppholdFormData,\n} from './utenlandsoppholdFormTypes';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport actionCreator from 'app/context/action/actionCreator';\nimport stepConfig, { getPreviousStepHref } from 'app/step-config/stepConfig';\nimport { utenlandsoppholdFormQuestions } from './utenlandsoppholdFormQuestions';\nimport BostedUtlandListAndDialog from './bostedUtlandListAndDialog/BostedUtlandListAndDialog';\nimport { utenlandsoppholdFormCleanup } from './utenlandsoppholdFormUtils';\nimport { useEngangsstønadContext } from 'app/context/hooks/useEngangsstønadContext';\nimport { onAvbrytSøknad } from 'app/util/globalUtil';\nimport getMessage from 'common/util/i18nUtils';\nimport { validateUtenlandsoppholdNeste12Mnd, validateUtenlandsoppholdSiste12Mnd } from './utenlandsoppholdValidering';\n\nimport { logAmplitudeEvent } from 'app/amplitude/amplitude';\nimport { PageKeys } from 'app/types/PageKeys';\nimport { useNavigate, Link } from 'react-router-dom';\nimport { BostedUtland } from './bostedUtlandListAndDialog/types';\nimport { Button } from '@navikt/ds-react';\n\nimport './utenlandsopphold.less';\n\nconst Utenlandsopphold: React.FunctionComponent = () => {\n    const intl = useIntl();\n    const bem = bemUtils('utenlandsopphold');\n    const navigate = useNavigate();\n\n    const { state, dispatch } = useEngangsstønadContext();\n    const initialValues = state.søknad.utenlandsopphold;\n\n    logAmplitudeEvent('sidevisning', {\n        app: 'engangsstonadny',\n        team: 'foreldrepenger',\n        pageKey: PageKeys.Utenlandsopphold,\n    });\n\n    const onValidSubmit = (values: Partial<UtenlandsoppholdFormData>) => {\n        dispatch(\n            actionCreator.setUtenlandsopphold({\n                skalBoUtenforNorgeNeste12Mnd: values.skalBoUtenforNorgeNeste12Mnd!,\n                harBoddUtenforNorgeSiste12Mnd: values.harBoddUtenforNorgeSiste12Mnd!,\n                utenlandsoppholdNeste12Mnd: values.utenlandsoppholdNeste12Mnd || [],\n                utenlandsoppholdSiste12Mnd: values.utenlandsoppholdSiste12Mnd || [],\n            })\n        );\n        navigate('/soknad/oppsummering');\n    };\n\n    return (\n        <UtenlandsoppholdFormComponents.FormikWrapper\n            initialValues={initialValues}\n            onSubmit={(values) => onValidSubmit(values)}\n            renderForm={({ values: formValues }) => {\n                // @ts-ignore Fiks denne\n                const visibility = utenlandsoppholdFormQuestions.getVisbility(formValues);\n                const allQuestionsAnswered = visibility.areAllQuestionsAnswered();\n                return (\n                    <Step\n                        bannerTitle={getMessage(intl, 'søknad.pageheading')}\n                        activeStepId=\"utenlandsopphold\"\n                        pageTitle={getMessage(intl, 'søknad.utenlandsopphold')}\n                        onCancel={() => onAvbrytSøknad(dispatch, navigate)}\n                        steps={stepConfig}\n                    >\n                        <UtenlandsoppholdFormComponents.Form\n                            includeButtons={false}\n                            includeValidationSummary={true}\n                            cleanup={(values) => utenlandsoppholdFormCleanup(values)}\n                            noButtonsContentRenderer={\n                                allQuestionsAnswered\n                                    ? undefined\n                                    : () => (\n                                          <UnansweredQuestionsInfo>\n                                              {intlUtils(intl, 'søknad.footer.spørsmålMåBesvares')}\n                                          </UnansweredQuestionsInfo>\n                                      )\n                            }\n                        >\n                            <div className={bem.block}>\n                                {visibility.isVisible(UtenlandsoppholdFieldNames.skalBoUtenforNorgeNeste12Mnd) && (\n                                    <Block padBottom=\"l\">\n                                        <UtenlandsoppholdFormComponents.YesOrNoQuestion\n                                            legend={intlUtils(intl, 'utenlandsopphold.neste12Måneder.spørsmål')}\n                                            name={UtenlandsoppholdFieldNames.skalBoUtenforNorgeNeste12Mnd}\n                                            labels={{\n                                                no: intlUtils(\n                                                    intl,\n                                                    'utenlandsopphold.neste12MånederInfotekst.radiobutton.boddINorge'\n                                                ),\n                                                yes: intlUtils(\n                                                    intl,\n                                                    'utenlandsopphold.neste12MånederInfotekst.radiobutton.boddIUtlandet'\n                                                ),\n                                            }}\n                                            validate={validateYesOrNoIsAnswered}\n                                        />\n                                        <UtvidetInformasjon\n                                            apneLabel={intlUtils(\n                                                intl,\n                                                'utenlandsopphold.neste12MånederInfotekst.apneLabel'\n                                            )}\n                                        >\n                                            {intlUtils(intl, 'utenlandsopphold.neste12MånederInfotekst')}\n                                        </UtvidetInformasjon>\n                                        {visibility.isVisible(\n                                            UtenlandsoppholdFieldNames.utenlandsoppholdNeste12Mnd\n                                        ) && (\n                                            <Block padBottom=\"l\">\n                                                <BostedUtlandListAndDialog<UtenlandsoppholdFieldNames>\n                                                    name={UtenlandsoppholdFieldNames.utenlandsoppholdNeste12Mnd}\n                                                    minDate={dateToday}\n                                                    maxDate={date1YearFromNow}\n                                                    labels={{\n                                                        addLabel: intlUtils(intl, 'utenlandsopphold.knapp.leggTilLand'),\n                                                        modalTitle: 'Utenlandsopphold neste 12 måneder',\n                                                    }}\n                                                    erFremtidigOpphold={true}\n                                                    validate={(value: BostedUtland[]) =>\n                                                        validateUtenlandsoppholdNeste12Mnd(value, intl)\n                                                    }\n                                                />\n                                            </Block>\n                                        )}\n                                    </Block>\n                                )}\n                                {visibility.isVisible(UtenlandsoppholdFieldNames.harBoddUtenforNorgeSiste12Mnd) && (\n                                    <Block margin=\"xl\">\n                                        <UtenlandsoppholdFormComponents.YesOrNoQuestion\n                                            legend={intlUtils(intl, 'utenlandsopphold.siste12Måneder.spørsmål')}\n                                            name={UtenlandsoppholdFieldNames.harBoddUtenforNorgeSiste12Mnd}\n                                            labels={{\n                                                no: intlUtils(\n                                                    intl,\n                                                    'utenlandsopphold.siste12MånederInfotekst.radiobutton.boddINorge'\n                                                ),\n                                                yes: intlUtils(\n                                                    intl,\n                                                    'utenlandsopphold.siste12MånederInfotekst.radiobutton.boddIUtlandet'\n                                                ),\n                                            }}\n                                            validate={validateYesOrNoIsAnswered}\n                                        />\n                                        <UtvidetInformasjon\n                                            apneLabel={intlUtils(\n                                                intl,\n                                                'utenlandsopphold.siste12MånederInfotekst.apneLabel'\n                                            )}\n                                        >\n                                            {intlUtils(intl, 'utenlandsopphold.siste12MånederInfotekst')}\n                                        </UtvidetInformasjon>\n                                        {visibility.isVisible(\n                                            UtenlandsoppholdFieldNames.utenlandsoppholdSiste12Mnd\n                                        ) && (\n                                            <Block padBottom=\"xl\">\n                                                <BostedUtlandListAndDialog<UtenlandsoppholdFieldNames>\n                                                    minDate={date1YearAgo}\n                                                    maxDate={dateToday}\n                                                    name={UtenlandsoppholdFieldNames.utenlandsoppholdSiste12Mnd}\n                                                    labels={{\n                                                        addLabel: intlUtils(intl, 'utenlandsopphold.knapp.leggTilLand'),\n                                                        modalTitle: 'Utenlandsopphold siste 12 måneder',\n                                                    }}\n                                                    erFremtidigOpphold={false}\n                                                    validate={(value: BostedUtland[]) =>\n                                                        validateUtenlandsoppholdSiste12Mnd(value, intl)\n                                                    }\n                                                />\n                                            </Block>\n                                        )}\n                                    </Block>\n                                )}\n\n                                <Block margin=\"xl\">\n                                    <StepButtonWrapper>\n                                        <Button\n                                            variant=\"secondary\"\n                                            as={Link}\n                                            to={getPreviousStepHref('utenlandsopphold')}\n                                        >\n                                            <FormattedMessage id=\"backlink.label\" />\n                                        </Button>\n                                        {allQuestionsAnswered && (\n                                            <Button type=\"submit\">{intlUtils(intl, 'søknad.gåVidere')}</Button>\n                                        )}\n                                    </StepButtonWrapper>\n                                </Block>\n                            </div>\n                        </UtenlandsoppholdFormComponents.Form>\n                    </Step>\n                );\n            }}\n        />\n    );\n};\n\nexport default Utenlandsopphold;\n"],"names":["FormikModalFormAndList","_a","name","labels","listRenderer","formRenderer","sortFunc","onAfterChange","dialogWidth","shouldCloseOnOverlayClick","error","maxItems","useFastField","confirmDelete","validate","context","React","TypedFormikFormContext","FieldComponent","FastField","Field","_jsx","value","field","form","ModalFormAndList","values","updatedValues","onEdit","onDelete","UtenlandsoppholdFormConfig","UtenlandsoppholdFieldNames","harBoddUtenforNorgeSiste12Mnd","YesOrNo","skalBoUtenforNorgeNeste12Mnd","utenlandsoppholdSiste12Mnd","utenlandsoppholdNeste12Mnd","utenlandsoppholdFormQuestions","Questions","isValidBostedUtland","bosted","fom","landkode","tom","dayjs","isBetween","dateIsWithinRange","date","minDate","maxDate","validateDateInRange","intl","isFomDate","intlUtils","formatDateExtended","validateFromDate","toDate","validateToDate","fromDate","dateRangeValidation","validateUtenlandsoppholdNeste12Mnd","utenlandsopphold","dateRanges","u","dateRangesCollide","dateRangesExceedsRange","date1YearFromNow","validateUtenlandsoppholdSiste12Mnd","date1YearAgo","Form","getTypedFormComponents","mapBostedToFormValues","BostedUtlandForm","onSubmit","onCancel","erFremtidigOpphold","useIntl","onFormikSubmit","formValues","updatedBosted","jsx","jsxs","Heading","FormattedMessage","Block","getMessage","ISOStringToDate","country","bem","bemUtils","BostedUtlandList","bosteder","renderBostedUtlandLabel","opphold","navn","getCountryName","ActionLink","ItemList","BostedUtlandListAndDialog","sortItemsByFom","item","items","BostedUtlandListe","utenlandsoppholdFormCleanup","Utenlandsopphold","navigate","useNavigate","state","dispatch","useEngangsstønadContext","initialValues","logAmplitudeEvent","PageKeys","onValidSubmit","actionCreator","UtenlandsoppholdFormComponents","visibility","allQuestionsAnswered","Step","onAvbrytSøknad","stepConfig","UnansweredQuestionsInfo","validateYesOrNoIsAnswered","UtvidetInformasjon","dateToday","StepButtonWrapper","Button","Link","getPreviousStepHref","Utenlandsopphold$1"],"mappings":"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","x_google_ignoreList":[0]}