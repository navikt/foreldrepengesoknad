{"version":3,"file":"OppsummeringSteg-05c6a769.js","sources":["../../../../packages/utils/src/dateUtils.ts","../../src/types/Dokumentasjon.ts","../../src/sider/steg/oppsummering/Oppsummeringspunkt.tsx","../../src/sider/steg/oppsummering/OmBarnetOppsummering.tsx","../../src/sider/steg/oppsummering/LandOppsummering.tsx","../../src/sider/steg/oppsummering/UtenlandsoppholdOppsummering.tsx","../../src/sider/steg/oppsummering/OppsummeringSteg.tsx"],"sourcesContent":["import dayjs from 'dayjs';\n\nconst DATE_FORMAT = 'DD.MM.YYYY';\n\nexport const formatDate = (date: Date | string) => dayjs(date).format(DATE_FORMAT);\n","import { Attachment } from '@navikt/fp-types';\n\ntype Vedlegg = {\n    vedlegg: Attachment[];\n};\n\nexport type TerminDokumentasjon = {\n    terminbekreftelsedato: string;\n} & Vedlegg;\n\nexport type AdopsjonDokumentasjon = Vedlegg;\n\ntype Dokumentasjon = TerminDokumentasjon | AdopsjonDokumentasjon;\n\nexport default Dokumentasjon;\n\nexport const erTerminDokumentasjon = (dokumentasjon: Dokumentasjon): dokumentasjon is TerminDokumentasjon => {\n    if ((dokumentasjon as TerminDokumentasjon).terminbekreftelsedato) {\n        return true;\n    }\n    return false;\n};\n","import { ReactNode, useCallback, useState } from 'react';\nimport { Accordion, Heading } from '@navikt/ds-react';\n\nimport './oppsummeringspunkt.less';\n\ninterface Props {\n    tittel: string;\n    children: ReactNode;\n}\n\nconst Oppsummeringspunkt = ({ tittel, children }: Props) => {\n    const [isOpen, toggleOpen] = useState(false);\n    const toggle = useCallback(() => toggleOpen((open) => !open), []);\n\n    return (\n        <Accordion.Item>\n            <Accordion.Header className={isOpen ? 'accordian_header' : undefined} onClick={toggle}>\n                <Heading level=\"2\" size=\"small\">\n                    {tittel}\n                </Heading>\n            </Accordion.Header>\n            <Accordion.Content className=\"content_margin\">{children}</Accordion.Content>\n        </Accordion.Item>\n    );\n};\n\nexport default Oppsummeringspunkt;\n","import { FormattedMessage, useIntl } from 'react-intl';\nimport { formatDate } from '@navikt/fp-common';\nimport { BodyLong, BodyShort, HStack, Label, VStack } from '@navikt/ds-react';\nimport { AttachmentList } from '@navikt/fp-ui';\nimport { notEmpty } from '@navikt/fp-validation';\nimport { OmBarnet, erAdopsjon, erBarnetFødt, erBarnetIkkeFødt } from 'types/OmBarnet';\nimport Dokumentasjon, { erTerminDokumentasjon } from 'types/Dokumentasjon';\n\ninterface Props {\n    omBarnet: OmBarnet;\n    dokumentasjon?: Dokumentasjon;\n}\n\nconst OmBarnetOppsummering: React.FunctionComponent<Props> = ({ omBarnet, dokumentasjon }) => {\n    const intl = useIntl();\n\n    const harAdoptert = erAdopsjon(omBarnet);\n    const harTermin = erBarnetIkkeFødt(omBarnet);\n    const harFødt = erBarnetFødt(omBarnet);\n\n    let antallBarnSummaryText;\n    if (omBarnet.antallBarn === 1) {\n        antallBarnSummaryText = intl.formatMessage({ id: 'OmBarnetOppsummering.EttBarn' });\n    } else if (omBarnet.antallBarn === 2 && !harAdoptert) {\n        antallBarnSummaryText = intl.formatMessage({ id: 'OmBarnetOppsummering.Tvillinger' });\n    } else if (omBarnet.antallBarn === 2 && harAdoptert) {\n        antallBarnSummaryText = intl.formatMessage({ id: 'OmBarnetOppsummering.ToBarn' });\n    } else {\n        antallBarnSummaryText = intl.formatMessage(\n            { id: 'OmBarnetOppsummering.FlereBarn' },\n            {\n                antall: omBarnet.antallBarn,\n            },\n        );\n    }\n\n    return (\n        <VStack gap=\"4\">\n            <HStack gap=\"2\">\n                <BodyShort>\n                    <FormattedMessage id={'OmBarnetOppsummering.SoknadenGjelder'} />\n                </BodyShort>\n                <BodyShort>{antallBarnSummaryText}</BodyShort>\n            </HStack>\n            {harAdoptert && (\n                <>\n                    <HStack gap=\"2\">\n                        <BodyShort>\n                            <FormattedMessage id={'OmBarnetOppsummering.MedAdopsjonsdato'} />\n                        </BodyShort>\n                        <BodyShort>{formatDate(omBarnet.adopsjonsdato!)}</BodyShort>\n                    </HStack>\n                    <HStack gap=\"2\">\n                        <BodyShort>\n                            <FormattedMessage\n                                id={\n                                    omBarnet.fødselsdatoer.length > 1\n                                        ? 'OmBarnetOppsummering.MedFødselsdatoer'\n                                        : 'OmBarnetOppsummering.MedFødselsdato'\n                                }\n                            />\n                        </BodyShort>\n                        <BodyLong>\n                            {omBarnet.fødselsdatoer\n                                .map((_, index) => {\n                                    return formatDate(omBarnet.fødselsdatoer[index].dato);\n                                })\n                                .join(', ')}\n                        </BodyLong>\n                    </HStack>\n                    <Label>\n                        <FormattedMessage id={'OmBarnetOppsummering.VedlagtOmsorgsovertakelseBekreftelse'} />\n                    </Label>\n                    <AttachmentList attachments={notEmpty(dokumentasjon).vedlegg} />\n                </>\n            )}\n            {harFødt && (\n                <HStack gap=\"2\">\n                    <BodyShort>\n                        <FormattedMessage id={'OmBarnetOppsummering.MedFødselsdato'} />\n                    </BodyShort>\n                    <BodyShort>{formatDate(omBarnet.fødselsdatoer[0].dato)}</BodyShort>\n                </HStack>\n            )}\n            {harTermin && dokumentasjon && erTerminDokumentasjon(dokumentasjon) && (\n                <>\n                    <HStack gap=\"2\">\n                        <BodyShort>\n                            <FormattedMessage id={'OmBarnetOppsummering.MedTermindato'} />\n                        </BodyShort>\n                        <BodyShort>{formatDate(omBarnet.termindato)}</BodyShort>\n                    </HStack>\n                    <HStack gap=\"2\">\n                        <BodyShort>\n                            <FormattedMessage id={'OmBarnetOppsummering.SomErDatert'} />\n                        </BodyShort>\n                        <BodyShort>{formatDate(dokumentasjon.terminbekreftelsedato)}</BodyShort>\n                    </HStack>\n                    <Label>\n                        <FormattedMessage id={'OmBarnetOppsummering.VedlagtTerminbekreftelse'} />\n                    </Label>\n                    <AttachmentList attachments={dokumentasjon.vedlegg} />\n                </>\n            )}\n        </VStack>\n    );\n};\nexport default OmBarnetOppsummering;\n","import * as countries from 'i18n-iso-countries';\nimport { BodyLong, Label, VStack } from '@navikt/ds-react';\nimport { UtenlandsoppholdPeriode } from 'types/Utenlandsopphold';\nimport { formatDate } from '@navikt/fp-utils';\nimport { isBeforeToday, isToday } from '@navikt/fp-validation';\nimport { useIntl, IntlShape, FormattedMessage } from 'react-intl';\nimport dayjs from 'dayjs';\n\nconst formaterDato = (dato: string, intl: IntlShape) => {\n    if (isToday(dato)) {\n        return intl.formatMessage({ id: 'LandOppsummering.IDag' });\n    }\n    return formatDate(dato);\n};\n\nconst sortOpphold = (o1: UtenlandsoppholdPeriode, o2: UtenlandsoppholdPeriode) => {\n    return dayjs(o1.fom).isAfter(o2.fom, 'day') ? 1 : 0;\n};\n\ninterface Props {\n    utenlandsoppholdListe: UtenlandsoppholdPeriode[];\n}\n\nconst LandOppsummering: React.FunctionComponent<Props> = ({ utenlandsoppholdListe }) => {\n    const intl = useIntl();\n    //TODO Bytt ut div under med Box når aksel-dep blir oppdatert\n    return (\n        <>\n            {utenlandsoppholdListe.sort(sortOpphold).map((opphold) => (\n                <div\n                    key={`${opphold.landkode}${opphold.fom}`}\n                    style={{ backgroundColor: 'var(--a-blue-100)', padding: '16px', borderRadius: '2px' }}\n                >\n                    <VStack gap=\"1\">\n                        <Label>\n                            <FormattedMessage\n                                id={isBeforeToday(opphold.fom) ? 'LandOppsummering.HarBodd' : 'LandOppsummering.SkalBo'}\n                                values={{ country: countries.getName(opphold.landkode, 'nb') }}\n                            />\n                        </Label>\n                        <BodyLong>\n                            {formaterDato(opphold.fom, intl)} - {formaterDato(opphold.tom, intl)}\n                        </BodyLong>\n                    </VStack>\n                </div>\n            ))}\n        </>\n    );\n};\n\nexport default LandOppsummering;\n","import { FormattedMessage, useIntl } from 'react-intl';\nimport dayjs from 'dayjs';\nimport { BodyShort, HStack, VStack } from '@navikt/ds-react';\nimport LandOppsummering from './LandOppsummering';\nimport { OmBarnet, erBarnetFødt, erBarnetIkkeFødt } from 'types/OmBarnet';\nimport {\n    Utenlandsopphold,\n    UtenlandsoppholdSenere,\n    UtenlandsoppholdTidligere,\n    UtenlandsoppholdPeriode,\n} from 'types/Utenlandsopphold';\nimport { notEmpty } from '@navikt/fp-validation';\n\nconst erDatoITidsperiode = (dato: string, fom: string, tom: string) => {\n    return dayjs(dato).isBetween(dayjs(fom), dayjs(tom), 'day', '[]');\n};\n\nconst erFamiliehendelsedatoIEnUtenlandsoppholdPeriode = (\n    familiehendelsedato: string,\n    utenlandsoppholdSiste12Mnd: UtenlandsoppholdPeriode[] = [],\n    utenlandsoppholdNeste12Mnd: UtenlandsoppholdPeriode[] = [],\n) => {\n    return (\n        utenlandsoppholdSiste12Mnd.some((tidligereOpphold) =>\n            erDatoITidsperiode(familiehendelsedato, tidligereOpphold.fom, tidligereOpphold.tom),\n        ) ||\n        utenlandsoppholdNeste12Mnd.some((senereOpphold) =>\n            erDatoITidsperiode(familiehendelsedato, senereOpphold.fom, senereOpphold.tom),\n        )\n    );\n};\n\ninterface Props {\n    omBarnet: OmBarnet;\n    utenlandsopphold: Utenlandsopphold;\n    tidligereUtenlandsopphold?: UtenlandsoppholdTidligere;\n    senereUtenlandsopphold?: UtenlandsoppholdSenere;\n}\n\nconst UtenlandsoppholdOppsummering: React.FunctionComponent<Props> = ({\n    omBarnet,\n    utenlandsopphold,\n    tidligereUtenlandsopphold,\n    senereUtenlandsopphold,\n}) => {\n    const intl = useIntl();\n    const harTermin = erBarnetIkkeFødt(omBarnet);\n    const harFødt = erBarnetFødt(omBarnet);\n\n    return (\n        <VStack gap=\"5\">\n            <VStack gap=\"2\">\n                {utenlandsopphold.harBoddUtenforNorgeSiste12Mnd && (\n                    <LandOppsummering\n                        utenlandsoppholdListe={notEmpty(tidligereUtenlandsopphold).utenlandsoppholdSiste12Mnd}\n                    />\n                )}\n                {utenlandsopphold.skalBoUtenforNorgeNeste12Mnd && (\n                    <LandOppsummering\n                        utenlandsoppholdListe={notEmpty(senereUtenlandsopphold).utenlandsoppholdNeste12Mnd}\n                    />\n                )}\n            </VStack>\n            {utenlandsopphold.harBoddUtenforNorgeSiste12Mnd === false && (\n                <BodyShort>\n                    <FormattedMessage\n                        id={'UtenlandsoppholdOppsummering.BoddSisteTolv'}\n                        values={{ country: intl.formatMessage({ id: 'UtenlandsoppholdOppsummering.Norge' }) }}\n                    />\n                </BodyShort>\n            )}\n            {utenlandsopphold.skalBoUtenforNorgeNeste12Mnd === false && (\n                <BodyShort>\n                    <FormattedMessage\n                        id=\"UtenlandsoppholdOppsummering.BoNesteTolv\"\n                        values={{ country: intl.formatMessage({ id: 'UtenlandsoppholdOppsummering.Norge' }) }}\n                    />\n                </BodyShort>\n            )}\n            {harTermin && (\n                <HStack gap=\"2\">\n                    <BodyShort>\n                        <FormattedMessage\n                            id={'UtenlandsoppholdOppsummering.Text.OgKommerPåFødselstidspunktet'}\n                            values={{\n                                country: intl.formatMessage({\n                                    id: erFamiliehendelsedatoIEnUtenlandsoppholdPeriode(\n                                        omBarnet.termindato!,\n                                        tidligereUtenlandsopphold?.utenlandsoppholdSiste12Mnd,\n                                        senereUtenlandsopphold?.utenlandsoppholdNeste12Mnd,\n                                    )\n                                        ? 'UtenlandsoppholdOppsummering.Utlandet'\n                                        : 'UtenlandsoppholdOppsummering.Norge',\n                                }),\n                            }}\n                        />\n                    </BodyShort>\n                </HStack>\n            )}\n            {harFødt && (\n                <BodyShort>\n                    <FormattedMessage\n                        id={'UtenlandsoppholdOppsummering.VarPåFødselstidspunktet'}\n                        values={{\n                            country: intl.formatMessage({\n                                id: erFamiliehendelsedatoIEnUtenlandsoppholdPeriode(\n                                    omBarnet.fødselsdatoer[0].dato,\n                                    tidligereUtenlandsopphold?.utenlandsoppholdSiste12Mnd,\n                                    senereUtenlandsopphold?.utenlandsoppholdNeste12Mnd,\n                                )\n                                    ? 'UtenlandsoppholdOppsummering.Utlandet'\n                                    : 'UtenlandsoppholdOppsummering.Norge',\n                            }),\n                        }}\n                    />\n                </BodyShort>\n            )}\n        </VStack>\n    );\n};\n\nexport default UtenlandsoppholdOppsummering;\n","import { useCallback, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { Step } from '@navikt/fp-common';\nimport { Accordion, BodyShort, ConfirmationPanel, VStack } from '@navikt/ds-react';\n\nimport Person from 'types/Person';\nimport Oppsummeringspunkt from './Oppsummeringspunkt';\nimport OmBarnetOppsummering from './OmBarnetOppsummering';\nimport UtenlandsoppholdOppsummering from './UtenlandsoppholdOppsummering';\nimport useEsNavigator from 'appData/useEsNavigator';\nimport useStepData from 'appData/useStepData';\nimport { EsDataType, useEsStateData } from 'appData/EsDataContext';\nimport { OmBarnet } from 'types/OmBarnet';\nimport { Utenlandsopphold, UtenlandsoppholdSenere, UtenlandsoppholdTidligere } from 'types/Utenlandsopphold';\nimport { notEmpty } from '@navikt/fp-validation';\nimport { StepButtons } from '@navikt/fp-ui';\nimport Dokumentasjon from 'types/Dokumentasjon';\n\nconst fullNameFormat = (fornavn: string, etternavn: string, mellomnavn?: string) => {\n    return mellomnavn ? `${fornavn} ${mellomnavn} ${etternavn}` : `${fornavn} ${etternavn}`;\n};\n\nexport interface Props {\n    person: Person;\n    sendSøknad: (\n        omBarnet: OmBarnet,\n        utenlandsopphold: Utenlandsopphold,\n        dokumentasjon?: Dokumentasjon,\n        tidligereUtenlandsopphold?: UtenlandsoppholdTidligere,\n        senereUtenlandsopphold?: UtenlandsoppholdSenere,\n    ) => Promise<void>;\n}\n\nconst OppsummeringSteg: React.FunctionComponent<Props> = ({ person, sendSøknad }) => {\n    const intl = useIntl();\n\n    const stepData = useStepData();\n    const navigator = useEsNavigator();\n\n    const omBarnet = notEmpty(useEsStateData(EsDataType.OM_BARNET));\n    const utenlandsopphold = notEmpty(useEsStateData(EsDataType.UTENLANDSOPPHOLD));\n    const dokumentasjon = useEsStateData(EsDataType.DOKUMENTASJON);\n    const tidligereUtenlandsopphold = useEsStateData(EsDataType.UTENLANDSOPPHOLD_TIDLIGERE);\n    const senereUtenlandsopphold = useEsStateData(EsDataType.UTENLANDSOPPHOLD_SENERE);\n\n    const [isChecked, setChecked] = useState(false);\n    const [isError, setIsError] = useState(false);\n\n    const send = useCallback(() => {\n        if (!isChecked) {\n            setIsError(true);\n        } else {\n            sendSøknad(omBarnet, utenlandsopphold, dokumentasjon, tidligereUtenlandsopphold, senereUtenlandsopphold);\n        }\n    }, [isChecked]);\n\n    return (\n        <Step\n            bannerTitle={intl.formatMessage({ id: 'Søknad.Pageheading' })}\n            pageTitle={intl.formatMessage({ id: 'OppsummeringSteg.Oppsummering' })}\n            onCancel={navigator.avbrytSøknad}\n            steps={stepData.stepConfig}\n            activeStepId={stepData.activeStepId}\n            useNoTempSavingText\n        >\n            <VStack gap=\"10\">\n                <Accordion indent={false}>\n                    <Oppsummeringspunkt tittel={intl.formatMessage({ id: 'OppsummeringSteg.OmDeg' })}>\n                        <VStack gap=\"4\">\n                            <BodyShort>{fullNameFormat(person.fornavn, person.etternavn, person.mellomnavn)}</BodyShort>\n                            <BodyShort>{person.fnr}</BodyShort>\n                        </VStack>\n                    </Oppsummeringspunkt>\n                    <Oppsummeringspunkt tittel={intl.formatMessage({ id: 'OmBarnetSteg.OmBarnet' })}>\n                        <OmBarnetOppsummering omBarnet={omBarnet} dokumentasjon={dokumentasjon} />\n                    </Oppsummeringspunkt>\n                    <Oppsummeringspunkt tittel={intl.formatMessage({ id: 'OppsummeringSteg.Utenlandsopphold' })}>\n                        <UtenlandsoppholdOppsummering\n                            omBarnet={omBarnet}\n                            utenlandsopphold={utenlandsopphold}\n                            tidligereUtenlandsopphold={tidligereUtenlandsopphold}\n                            senereUtenlandsopphold={senereUtenlandsopphold}\n                        />\n                    </Oppsummeringspunkt>\n                </Accordion>\n                <ConfirmationPanel\n                    label={intl.formatMessage({ id: 'OppsummeringSteg.Samtykke' })}\n                    onChange={() => setChecked((state) => !state)}\n                    checked={isChecked}\n                    error={\n                        isError &&\n                        !isChecked &&\n                        intl.formatMessage({ id: 'OppsummeringSteg.Validering.BekrefteOpplysninger' })\n                    }\n                />\n                <StepButtons\n                    goToPreviousStep={navigator.goToPreviousDefaultStep}\n                    nextButtonText={intl.formatMessage({ id: 'OppsummeringSteg.Button.SendSøknad' })}\n                    nextButtonOnClick={send}\n                />\n            </VStack>\n        </Step>\n    );\n};\n\nexport default OppsummeringSteg;\n"],"names":["DATE_FORMAT","formatDate","date","dayjs","erTerminDokumentasjon","dokumentasjon","Oppsummeringspunkt","tittel","children","isOpen","toggleOpen","useState","toggle","useCallback","open","jsxs","Accordion","jsx","Heading","OmBarnetOppsummering","omBarnet","intl","useIntl","harAdoptert","erAdopsjon","harTermin","erBarnetIkkeFødt","harFødt","erBarnetFødt","antallBarnSummaryText","VStack","HStack","BodyShort","FormattedMessage","Fragment","BodyLong","_","index","Label","AttachmentList","notEmpty","formaterDato","dato","isToday","sortOpphold","o1","o2","LandOppsummering","utenlandsoppholdListe","opphold","isBeforeToday","countries.getName","erDatoITidsperiode","fom","tom","erFamiliehendelsedatoIEnUtenlandsoppholdPeriode","familiehendelsedato","utenlandsoppholdSiste12Mnd","utenlandsoppholdNeste12Mnd","tidligereOpphold","senereOpphold","UtenlandsoppholdOppsummering","utenlandsopphold","tidligereUtenlandsopphold","senereUtenlandsopphold","fullNameFormat","fornavn","etternavn","mellomnavn","OppsummeringSteg","person","sendSøknad","stepData","useStepData","navigator","useEsNavigator","useEsStateData","EsDataType","isChecked","setChecked","isError","setIsError","send","Step","ConfirmationPanel","state","StepButtons","OppsummeringSteg$1"],"mappings":"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"}