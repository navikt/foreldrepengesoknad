{"version":3,"file":"AppContainer.stories-5c200059.js","sources":["../../../../node_modules/.pnpm/axios@1.6.1/node_modules/axios/index.js","../../../../packages/api/src/error.ts","../../../../packages/api/src/useRequest.ts","../../../../packages/api/src/createApi.ts","../../../../packages/api/src/postData.ts","../../../../packages/api/src/deleteData.ts","../../../../node_modules/.pnpm/react-router-dom@6.15.0_react-dom@18.2.0_react@18.2.0/node_modules/react-router-dom/dist/index.js","../../../../packages/fp-common/src/common/utils/localeUtils.ts","../../../../packages/utils/src/loginUtils.ts","../../src/appData/useEsSendSøknad.ts","../../src/appData/useEsMellomlagring.ts","../../src/EngangsstønadRoutes.tsx","../../src/Engangsstønad.tsx","../../src/AppContainer.tsx"],"sourcesContent":["import axios from './lib/axios.js';\n\n// This module is intended to unwrap Axios default export as named.\n// Keep top-level export same with static properties\n// so that it can keep same with es module or cjs\nconst {\n  Axios,\n  AxiosError,\n  CanceledError,\n  isCancel,\n  CancelToken,\n  VERSION,\n  all,\n  Cancel,\n  isAxiosError,\n  spread,\n  toFormData,\n  AxiosHeaders,\n  HttpStatusCode,\n  formToJSON,\n  getAdapter,\n  mergeConfig\n} = axios;\n\nexport {\n  axios as default,\n  Axios,\n  AxiosError,\n  CanceledError,\n  isCancel,\n  CancelToken,\n  VERSION,\n  all,\n  Cancel,\n  isAxiosError,\n  spread,\n  toFormData,\n  AxiosHeaders,\n  HttpStatusCode,\n  formToJSON,\n  getAdapter,\n  mergeConfig\n}\n","import { AxiosError } from 'axios';\n\nexport class ApiGeneralError extends Error {\n    constructor(message: string) {\n        super(message);\n    }\n}\n\nexport class ApiAccessError extends Error {\n    constructor() {\n        super('API_ACCESS_ERROR');\n    }\n}\n\nexport const isApiError = (error: unknown): error is ApiAccessError | ApiGeneralError => {\n    if (error instanceof ApiAccessError || error instanceof ApiGeneralError) {\n        return true;\n    }\n    return false;\n};\n\nexport const isAxiosError = (candidate: unknown): candidate is AxiosError<any> => {\n    if (candidate && typeof candidate === 'object' && 'isAxiosError' in candidate) {\n        return true;\n    }\n    return false;\n};\n","import { useState, useEffect } from 'react';\nimport { AxiosInstance, isAxiosError } from 'axios';\nimport { ApiAccessError, ApiGeneralError } from './error';\n\nexport const useRequest = <T>(instance: AxiosInstance, url: string) => {\n    const [data, setData] = useState<T>();\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState<ApiAccessError | ApiGeneralError | undefined>();\n\n    useEffect(() => {\n        let ignore = false;\n        const fetch = async () => {\n            try {\n                setLoading(true);\n                const response = await instance.get<T>(url, { withCredentials: true, timeout: 60 * 1000 });\n                if (!ignore) {\n                    setData(response.data);\n                }\n            } catch (err: unknown) {\n                if (isAxiosError(err)) {\n                    if (err.response?.status === 401 || err.response?.status === 403) {\n                        setError(new ApiAccessError());\n                    } else {\n                        setError(new ApiGeneralError(err.message));\n                    }\n                } else if (err instanceof Error) {\n                    setError(new ApiGeneralError(err.message));\n                } else {\n                    setError(new ApiGeneralError(String(err)));\n                }\n            } finally {\n                setLoading(false);\n            }\n        };\n        fetch();\n        return () => {\n            ignore = true;\n        };\n    }, [instance, url]);\n\n    return { data, loading, error };\n};\n","import axios, { AxiosInstance } from 'axios';\n\nconst createApi = (baseUrl: string): AxiosInstance => {\n    const axiosInstance = axios.create({\n        baseURL: baseUrl,\n        withCredentials: true,\n    });\n\n    return axiosInstance;\n};\n\nexport default createApi;\n","import { AxiosInstance } from 'axios';\nimport { ApiAccessError, ApiGeneralError, isAxiosError } from './error';\n\nconst UKJENT_UUID = 'ukjent uuid';\n\nconst postData = async <REQUEST_DATA, RESPONSE_DATA>(\n    instance: AxiosInstance,\n    url: string,\n    data: REQUEST_DATA,\n    errorMessage: string,\n    hasContentTypeApplicationJson = false,\n    abortSignal?: AbortSignal,\n) => {\n    try {\n        const response = await instance.post<RESPONSE_DATA>(url, data, {\n            withCredentials: true,\n            timeout: 60 * 1000,\n            signal: abortSignal,\n            headers: hasContentTypeApplicationJson\n                ? {\n                      'content-type': 'application/json;',\n                  }\n                : {},\n        });\n        return response.data;\n    } catch (error: unknown) {\n        if (isAxiosError(error) && error.code !== 'ERR_CANCELED') {\n            if (error.response?.status === 401 || error.response?.status === 403) {\n                throw new ApiAccessError();\n            }\n\n            const submitErrorCallId =\n                error.response && error.response.data && error.response.data.uuid\n                    ? error.response.data.uuid\n                    : UKJENT_UUID;\n            const callIdForBruker =\n                submitErrorCallId !== UKJENT_UUID ? submitErrorCallId.slice(0, 8) : submitErrorCallId;\n            throw new ApiGeneralError(errorMessage + callIdForBruker);\n        }\n        if (error instanceof Error) {\n            throw new ApiGeneralError(error.message);\n        }\n        throw new ApiGeneralError(String(error));\n    }\n};\n\nexport default postData;\n","import { AxiosInstance } from 'axios';\nimport { ApiAccessError, ApiGeneralError, isAxiosError } from './error';\n\nconst UKJENT_UUID = 'ukjent uuid';\n\nconst deleteData = async <DATA>(\n    instance: AxiosInstance,\n    url: string,\n    errorMessage: string,\n    data?: DATA,\n    abortSignal?: AbortSignal,\n) => {\n    try {\n        const response = await instance.delete(url, {\n            withCredentials: true,\n            timeout: 60 * 1000,\n            signal: abortSignal,\n            data,\n        });\n        return response.data;\n    } catch (error: unknown) {\n        if (isAxiosError(error) && error.code !== 'ERR_CANCELED') {\n            if (error.response?.status === 401 || error.response?.status === 403) {\n                throw new ApiAccessError();\n            }\n\n            const submitErrorCallId =\n                error.response && error.response.data && error.response.data.uuid\n                    ? error.response.data.uuid\n                    : UKJENT_UUID;\n            const callIdForBruker =\n                submitErrorCallId !== UKJENT_UUID ? submitErrorCallId.slice(0, 8) : submitErrorCallId;\n            throw new ApiGeneralError(errorMessage + callIdForBruker);\n        }\n        if (error instanceof Error) {\n            throw new ApiGeneralError(error.message);\n        }\n        throw new ApiGeneralError(String(error));\n    }\n};\n\nexport default deleteData;\n","/**\n * React Router DOM v6.15.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport * as React from 'react';\nimport { UNSAFE_mapRouteProperties, Router, UNSAFE_NavigationContext, useHref, useResolvedPath, useLocation, UNSAFE_DataRouterStateContext, useNavigate, createPath, UNSAFE_useRouteId, UNSAFE_RouteContext, useMatches, useNavigation, unstable_useBlocker, UNSAFE_DataRouterContext } from 'react-router';\nexport { AbortedDeferredError, Await, MemoryRouter, Navigate, NavigationType, Outlet, Route, Router, RouterProvider, Routes, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, UNSAFE_LocationContext, UNSAFE_NavigationContext, UNSAFE_RouteContext, UNSAFE_useRouteId, createMemoryRouter, createPath, createRoutesFromChildren, createRoutesFromElements, defer, generatePath, isRouteErrorResponse, json, matchPath, matchRoutes, parsePath, redirect, redirectDocument, renderMatches, resolvePath, unstable_useBlocker, useActionData, useAsyncError, useAsyncValue, useHref, useInRouterContext, useLoaderData, useLocation, useMatch, useMatches, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useRoutes } from 'react-router';\nimport { stripBasename, UNSAFE_warning, createRouter, createBrowserHistory, createHashHistory, ErrorResponse, UNSAFE_invariant, joinPaths } from '@remix-run/router';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\nconst defaultMethod = \"get\";\nconst defaultEncType = \"application/x-www-form-urlencoded\";\nfunction isHtmlElement(object) {\n  return object != null && typeof object.tagName === \"string\";\n}\nfunction isButtonElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\nfunction isFormElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\nfunction isInputElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\nfunction shouldProcessLinkClick(event, target) {\n  return event.button === 0 && (\n  // Ignore everything but left clicks\n  !target || target === \"_self\") &&\n  // Let browser handle \"target=_blank\" etc.\n  !isModifiedEvent(event) // Ignore clicks with modifier keys\n  ;\n}\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nfunction createSearchParams(init) {\n  if (init === void 0) {\n    init = \"\";\n  }\n  return new URLSearchParams(typeof init === \"string\" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key) => {\n    let value = init[key];\n    return memo.concat(Array.isArray(value) ? value.map(v => [key, v]) : [[key, value]]);\n  }, []));\n}\nfunction getSearchParamsForLocation(locationSearch, defaultSearchParams) {\n  let searchParams = createSearchParams(locationSearch);\n  if (defaultSearchParams) {\n    // Use `defaultSearchParams.forEach(...)` here instead of iterating of\n    // `defaultSearchParams.keys()` to work-around a bug in Firefox related to\n    // web extensions. Relevant Bugzilla tickets:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1414602\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1023984\n    defaultSearchParams.forEach((_, key) => {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach(value => {\n          searchParams.append(key, value);\n        });\n      }\n    });\n  }\n  return searchParams;\n}\n// One-time check for submitter support\nlet _formDataSupportsSubmitter = null;\nfunction isFormDataSubmitterSupported() {\n  if (_formDataSupportsSubmitter === null) {\n    try {\n      new FormData(document.createElement(\"form\"),\n      // @ts-expect-error if FormData supports the submitter parameter, this will throw\n      0);\n      _formDataSupportsSubmitter = false;\n    } catch (e) {\n      _formDataSupportsSubmitter = true;\n    }\n  }\n  return _formDataSupportsSubmitter;\n}\nconst supportedFormEncTypes = new Set([\"application/x-www-form-urlencoded\", \"multipart/form-data\", \"text/plain\"]);\nfunction getFormEncType(encType) {\n  if (encType != null && !supportedFormEncTypes.has(encType)) {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"\\\"\" + encType + \"\\\" is not a valid `encType` for `<Form>`/`<fetcher.Form>` \" + (\"and will default to \\\"\" + defaultEncType + \"\\\"\")) : void 0;\n    return null;\n  }\n  return encType;\n}\nfunction getFormSubmissionInfo(target, basename) {\n  let method;\n  let action;\n  let encType;\n  let formData;\n  let body;\n  if (isFormElement(target)) {\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"enctype\")) || defaultEncType;\n    formData = new FormData(target);\n  } else if (isButtonElement(target) || isInputElement(target) && (target.type === \"submit\" || target.type === \"image\")) {\n    let form = target.form;\n    if (form == null) {\n      throw new Error(\"Cannot submit a <button> or <input type=\\\"submit\\\"> without a <form>\");\n    }\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"formaction\") || form.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"formmethod\") || form.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"formenctype\")) || getFormEncType(form.getAttribute(\"enctype\")) || defaultEncType;\n    // Build a FormData object populated from a form and submitter\n    formData = new FormData(form, target);\n    // If this browser doesn't support the `FormData(el, submitter)` format,\n    // then tack on the submitter value at the end.  This is a lightweight\n    // solution that is not 100% spec compliant.  For complete support in older\n    // browsers, consider using the `formdata-submitter-polyfill` package\n    if (!isFormDataSubmitterSupported()) {\n      let {\n        name,\n        type,\n        value\n      } = target;\n      if (type === \"image\") {\n        let prefix = name ? name + \".\" : \"\";\n        formData.append(prefix + \"x\", \"0\");\n        formData.append(prefix + \"y\", \"0\");\n      } else if (name) {\n        formData.append(name, value);\n      }\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\"Cannot submit element that is not <form>, <button>, or \" + \"<input type=\\\"submit|image\\\">\");\n  } else {\n    method = defaultMethod;\n    action = null;\n    encType = defaultEncType;\n    body = target;\n  }\n  // Send body for <Form encType=\"text/plain\" so we encode it into text\n  if (formData && encType === \"text/plain\") {\n    body = formData;\n    formData = undefined;\n  }\n  return {\n    action,\n    method: method.toLowerCase(),\n    encType,\n    formData,\n    body\n  };\n}\n\nconst _excluded = [\"onClick\", \"relative\", \"reloadDocument\", \"replace\", \"state\", \"target\", \"to\", \"preventScrollReset\"],\n  _excluded2 = [\"aria-current\", \"caseSensitive\", \"className\", \"end\", \"style\", \"to\", \"children\"],\n  _excluded3 = [\"reloadDocument\", \"replace\", \"state\", \"method\", \"action\", \"onSubmit\", \"submit\", \"relative\", \"preventScrollReset\"];\nfunction createBrowserRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createBrowserHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    mapRouteProperties: UNSAFE_mapRouteProperties\n  }).initialize();\n}\nfunction createHashRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createHashHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    mapRouteProperties: UNSAFE_mapRouteProperties\n  }).initialize();\n}\nfunction parseHydrationData() {\n  var _window;\n  let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = _extends({}, state, {\n      errors: deserializeErrors(state.errors)\n    });\n  }\n  return state;\n}\nfunction deserializeErrors(errors) {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new ErrorResponse(val.status, val.statusText, val.data, val.internal === true);\n    } else if (val && val.__type === \"Error\") {\n      // Attempt to reconstruct the right type of Error (i.e., ReferenceError)\n      if (val.__subType) {\n        let ErrorConstructor = window[val.__subType];\n        if (typeof ErrorConstructor === \"function\") {\n          try {\n            // @ts-expect-error\n            let error = new ErrorConstructor(val.message);\n            // Wipe away the client-side stack trace.  Nothing to fill it in with\n            // because we don't serialize SSR stack traces for security reasons\n            error.stack = \"\";\n            serialized[key] = error;\n          } catch (e) {\n            // no-op - fall through and create a normal Error\n          }\n        }\n      }\n      if (serialized[key] == null) {\n        let error = new Error(val.message);\n        // Wipe away the client-side stack trace.  Nothing to fill it in with\n        // because we don't serialize SSR stack traces for security reasons\n        error.stack = \"\";\n        serialized[key] = error;\n      }\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nfunction BrowserRouter(_ref) {\n  let {\n    basename,\n    children,\n    future,\n    window\n  } = _ref;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({\n      window,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nfunction HashRouter(_ref2) {\n  let {\n    basename,\n    children,\n    future,\n    window\n  } = _ref2;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({\n      window,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter(_ref3) {\n  let {\n    basename,\n    children,\n    future,\n    history\n  } = _ref3;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\nif (process.env.NODE_ENV !== \"production\") {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n/**\n * The public API for rendering a history-aware <a>.\n */\nconst Link = /*#__PURE__*/React.forwardRef(function LinkWithRef(_ref4, ref) {\n  let {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset\n    } = _ref4,\n    rest = _objectWithoutPropertiesLoose(_ref4, _excluded);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  // Rendered into <a href> for absolute URLs\n  let absoluteHref;\n  let isExternal = false;\n  if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\n    // Render the absolute href server- and client-side\n    absoluteHref = to;\n    // Only check for external origins client-side\n    if (isBrowser) {\n      try {\n        let currentUrl = new URL(window.location.href);\n        let targetUrl = to.startsWith(\"//\") ? new URL(currentUrl.protocol + to) : new URL(to);\n        let path = stripBasename(targetUrl.pathname, basename);\n        if (targetUrl.origin === currentUrl.origin && path != null) {\n          // Strip the protocol/origin/basename for same-origin absolute URLs\n          to = path + targetUrl.search + targetUrl.hash;\n        } else {\n          isExternal = true;\n        }\n      } catch (e) {\n        // We can't do external URL detection without a valid URL\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"<Link to=\\\"\" + to + \"\\\"> contains an invalid URL which will probably break \" + \"when clicked - please update to a valid URL path.\") : void 0;\n      }\n    }\n  }\n  // Rendered into <a href> for relative URLs\n  let href = useHref(to, {\n    relative\n  });\n  let internalOnClick = useLinkClickHandler(to, {\n    replace,\n    state,\n    target,\n    preventScrollReset,\n    relative\n  });\n  function handleClick(event) {\n    if (onClick) onClick(event);\n    if (!event.defaultPrevented) {\n      internalOnClick(event);\n    }\n  }\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line jsx-a11y/anchor-has-content\n    React.createElement(\"a\", _extends({}, rest, {\n      href: absoluteHref || href,\n      onClick: isExternal || reloadDocument ? onClick : handleClick,\n      ref: ref,\n      target: target\n    }))\n  );\n});\nif (process.env.NODE_ENV !== \"production\") {\n  Link.displayName = \"Link\";\n}\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\nconst NavLink = /*#__PURE__*/React.forwardRef(function NavLinkWithRef(_ref5, ref) {\n  let {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      children\n    } = _ref5,\n    rest = _objectWithoutPropertiesLoose(_ref5, _excluded2);\n  let path = useResolvedPath(to, {\n    relative: rest.relative\n  });\n  let location = useLocation();\n  let routerState = React.useContext(UNSAFE_DataRouterStateContext);\n  let {\n    navigator\n  } = React.useContext(UNSAFE_NavigationContext);\n  let toPathname = navigator.encodeLocation ? navigator.encodeLocation(path).pathname : path.pathname;\n  let locationPathname = location.pathname;\n  let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;\n  if (!caseSensitive) {\n    locationPathname = locationPathname.toLowerCase();\n    nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;\n    toPathname = toPathname.toLowerCase();\n  }\n  let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(toPathname.length) === \"/\";\n  let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === \"/\");\n  let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n  let className;\n  if (typeof classNameProp === \"function\") {\n    className = classNameProp({\n      isActive,\n      isPending\n    });\n  } else {\n    // If the className prop is not a function, we use a default `active`\n    // class for <NavLink />s that are active. In v5 `active` was the default\n    // value for `activeClassName`, but we are removing that API and can still\n    // use the old default behavior for a cleaner upgrade path and keep the\n    // simple styling rules working as they currently do.\n    className = [classNameProp, isActive ? \"active\" : null, isPending ? \"pending\" : null].filter(Boolean).join(\" \");\n  }\n  let style = typeof styleProp === \"function\" ? styleProp({\n    isActive,\n    isPending\n  }) : styleProp;\n  return /*#__PURE__*/React.createElement(Link, _extends({}, rest, {\n    \"aria-current\": ariaCurrent,\n    className: className,\n    ref: ref,\n    style: style,\n    to: to\n  }), typeof children === \"function\" ? children({\n    isActive,\n    isPending\n  }) : children);\n});\nif (process.env.NODE_ENV !== \"production\") {\n  NavLink.displayName = \"NavLink\";\n}\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nconst Form = /*#__PURE__*/React.forwardRef((props, ref) => {\n  let submit = useSubmit();\n  return /*#__PURE__*/React.createElement(FormImpl, _extends({}, props, {\n    submit: submit,\n    ref: ref\n  }));\n});\nif (process.env.NODE_ENV !== \"production\") {\n  Form.displayName = \"Form\";\n}\nconst FormImpl = /*#__PURE__*/React.forwardRef((_ref6, forwardedRef) => {\n  let {\n      reloadDocument,\n      replace,\n      state,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      submit,\n      relative,\n      preventScrollReset\n    } = _ref6,\n    props = _objectWithoutPropertiesLoose(_ref6, _excluded3);\n  let formMethod = method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n  let formAction = useFormAction(action, {\n    relative\n  });\n  let submitHandler = event => {\n    onSubmit && onSubmit(event);\n    if (event.defaultPrevented) return;\n    event.preventDefault();\n    let submitter = event.nativeEvent.submitter;\n    let submitMethod = (submitter == null ? void 0 : submitter.getAttribute(\"formmethod\")) || method;\n    submit(submitter || event.currentTarget, {\n      method: submitMethod,\n      replace,\n      state,\n      relative,\n      preventScrollReset\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"form\", _extends({\n    ref: forwardedRef,\n    method: formMethod,\n    action: formAction,\n    onSubmit: reloadDocument ? onSubmit : submitHandler\n  }, props));\n});\nif (process.env.NODE_ENV !== \"production\") {\n  FormImpl.displayName = \"FormImpl\";\n}\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nfunction ScrollRestoration(_ref7) {\n  let {\n    getKey,\n    storageKey\n  } = _ref7;\n  useScrollRestoration({\n    getKey,\n    storageKey\n  });\n  return null;\n}\nif (process.env.NODE_ENV !== \"production\") {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\nvar DataRouterHook;\n(function (DataRouterHook) {\n  DataRouterHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n  DataRouterHook[\"UseSubmit\"] = \"useSubmit\";\n  DataRouterHook[\"UseSubmitFetcher\"] = \"useSubmitFetcher\";\n  DataRouterHook[\"UseFetcher\"] = \"useFetcher\";\n})(DataRouterHook || (DataRouterHook = {}));\nvar DataRouterStateHook;\n(function (DataRouterStateHook) {\n  DataRouterStateHook[\"UseFetchers\"] = \"useFetchers\";\n  DataRouterStateHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n})(DataRouterStateHook || (DataRouterStateHook = {}));\nfunction getDataRouterConsoleError(hookName) {\n  return hookName + \" must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.\";\n}\nfunction useDataRouterContext(hookName) {\n  let ctx = React.useContext(UNSAFE_DataRouterContext);\n  !ctx ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return ctx;\n}\nfunction useDataRouterState(hookName) {\n  let state = React.useContext(UNSAFE_DataRouterStateContext);\n  !state ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return state;\n}\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nfunction useLinkClickHandler(to, _temp) {\n  let {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative\n  } = _temp === void 0 ? {} : _temp;\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, {\n    relative\n  });\n  return React.useCallback(event => {\n    if (shouldProcessLinkClick(event, target)) {\n      event.preventDefault();\n      // If the URL hasn't changed, a regular <a> will do a replace instead of\n      // a push, so do the same here unless the replace prop is explicitly set\n      let replace = replaceProp !== undefined ? replaceProp : createPath(location) === createPath(path);\n      navigate(to, {\n        replace,\n        state,\n        preventScrollReset,\n        relative\n      });\n    }\n  }, [location, navigate, path, replaceProp, state, target, to, preventScrollReset, relative]);\n}\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nfunction useSearchParams(defaultInit) {\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(typeof URLSearchParams !== \"undefined\", \"You cannot use the `useSearchParams` hook in a browser that does not \" + \"support the URLSearchParams API. If you need to support Internet \" + \"Explorer 11, we recommend you load a polyfill such as \" + \"https://github.com/ungap/url-search-params\\n\\n\" + \"If you're unsure how to load polyfills, we recommend you check out \" + \"https://polyfill.io/v3/ which provides some recommendations about how \" + \"to load polyfills only for users that need them, instead of for every \" + \"user.\") : void 0;\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n  let location = useLocation();\n  let searchParams = React.useMemo(() =>\n  // Only merge in the defaults if we haven't yet called setSearchParams.\n  // Once we call that we want those to take precedence, otherwise you can't\n  // remove a param with setSearchParams({}) if it has an initial value\n  getSearchParamsForLocation(location.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current), [location.search]);\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback((nextInit, navigateOptions) => {\n    const newSearchParams = createSearchParams(typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit);\n    hasSetSearchParamsRef.current = true;\n    navigate(\"?\" + newSearchParams, navigateOptions);\n  }, [navigate, searchParams]);\n  return [searchParams, setSearchParams];\n}\nfunction validateClientSideSubmission() {\n  if (typeof document === \"undefined\") {\n    throw new Error(\"You are calling submit during the server render. \" + \"Try calling submit within a `useEffect` or callback instead.\");\n  }\n}\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nfunction useSubmit() {\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseSubmit);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let currentRouteId = UNSAFE_useRouteId();\n  return React.useCallback(function (target, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    validateClientSideSubmission();\n    let {\n      action,\n      method,\n      encType,\n      formData,\n      body\n    } = getFormSubmissionInfo(target, basename);\n    router.navigate(options.action || action, {\n      preventScrollReset: options.preventScrollReset,\n      formData,\n      body,\n      formMethod: options.method || method,\n      formEncType: options.encType || encType,\n      replace: options.replace,\n      state: options.state,\n      fromRouteId: currentRouteId\n    });\n  }, [router, basename, currentRouteId]);\n}\n/**\n * Returns the implementation for fetcher.submit\n */\nfunction useSubmitFetcher(fetcherKey, fetcherRouteId) {\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseSubmitFetcher);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  return React.useCallback(function (target, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    validateClientSideSubmission();\n    let {\n      action,\n      method,\n      encType,\n      formData,\n      body\n    } = getFormSubmissionInfo(target, basename);\n    !(fetcherRouteId != null) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"No routeId available for useFetcher()\") : UNSAFE_invariant(false) : void 0;\n    router.fetch(fetcherKey, fetcherRouteId, options.action || action, {\n      preventScrollReset: options.preventScrollReset,\n      formData,\n      body,\n      formMethod: options.method || method,\n      formEncType: options.encType || encType\n    });\n  }, [router, basename, fetcherKey, fetcherRouteId]);\n}\n// v7: Eventually we should deprecate this entirely in favor of using the\n// router method directly?\nfunction useFormAction(action, _temp2) {\n  let {\n    relative\n  } = _temp2 === void 0 ? {} : _temp2;\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let routeContext = React.useContext(UNSAFE_RouteContext);\n  !routeContext ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFormAction must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = _extends({}, useResolvedPath(action ? action : \".\", {\n    relative\n  }));\n  // Previously we set the default action to \".\". The problem with this is that\n  // `useResolvedPath(\".\")` excludes search params of the resolved URL. This is\n  // the intended behavior of when \".\" is specifically provided as\n  // the form action, but inconsistent w/ browsers when the action is omitted.\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to this directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    path.search = location.search;\n    // When grabbing search params from the URL, remove the automatically\n    // inserted ?index param so we match the useResolvedPath search behavior\n    // which would not include ?index\n    if (match.route.index) {\n      let params = new URLSearchParams(path.search);\n      params.delete(\"index\");\n      path.search = params.toString() ? \"?\" + params.toString() : \"\";\n    }\n  }\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\nfunction createFetcherForm(fetcherKey, routeId) {\n  let FetcherForm = /*#__PURE__*/React.forwardRef((props, ref) => {\n    let submit = useSubmitFetcher(fetcherKey, routeId);\n    return /*#__PURE__*/React.createElement(FormImpl, _extends({}, props, {\n      ref: ref,\n      submit: submit\n    }));\n  });\n  if (process.env.NODE_ENV !== \"production\") {\n    FetcherForm.displayName = \"fetcher.Form\";\n  }\n  return FetcherForm;\n}\nlet fetcherId = 0;\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nfunction useFetcher() {\n  var _route$matches;\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseFetcher);\n  let route = React.useContext(UNSAFE_RouteContext);\n  !route ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\n  let routeId = (_route$matches = route.matches[route.matches.length - 1]) == null ? void 0 : _route$matches.route.id;\n  !(routeId != null) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher can only be used on routes that contain a unique \\\"id\\\"\") : UNSAFE_invariant(false) : void 0;\n  let [fetcherKey] = React.useState(() => String(++fetcherId));\n  let [Form] = React.useState(() => {\n    !routeId ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"No routeId available for fetcher.Form()\") : UNSAFE_invariant(false) : void 0;\n    return createFetcherForm(fetcherKey, routeId);\n  });\n  let [load] = React.useState(() => href => {\n    !router ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"No router available for fetcher.load()\") : UNSAFE_invariant(false) : void 0;\n    !routeId ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"No routeId available for fetcher.load()\") : UNSAFE_invariant(false) : void 0;\n    router.fetch(fetcherKey, routeId, href);\n  });\n  let submit = useSubmitFetcher(fetcherKey, routeId);\n  let fetcher = router.getFetcher(fetcherKey);\n  let fetcherWithComponents = React.useMemo(() => _extends({\n    Form,\n    submit,\n    load\n  }, fetcher), [fetcher, Form, submit, load]);\n  React.useEffect(() => {\n    // Is this busted when the React team gets real weird and calls effects\n    // twice on mount?  We really just need to garbage collect here when this\n    // fetcher is no longer around.\n    return () => {\n      if (!router) {\n        console.warn(\"No router available to clean up from useFetcher()\");\n        return;\n      }\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n  return fetcherWithComponents;\n}\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nfunction useFetchers() {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return [...state.fetchers.values()];\n}\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions = {};\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration(_temp3) {\n  let {\n    getKey,\n    storageKey\n  } = _temp3 === void 0 ? {} : _temp3;\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let {\n    restoreScrollPosition,\n    preventScrollReset\n  } = useDataRouterState(DataRouterStateHook.UseScrollRestoration);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n  // Save positions on pagehide\n  usePageHide(React.useCallback(() => {\n    if (navigation.state === \"idle\") {\n      let key = (getKey ? getKey(location, matches) : null) || location.key;\n      savedScrollPositions[key] = window.scrollY;\n    }\n    sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));\n    window.history.scrollRestoration = \"auto\";\n  }, [storageKey, getKey, navigation.state, location, matches]));\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let getKeyWithoutBasename = getKey && basename !== \"/\" ? (location, matches) => getKey( // Strip the basename to match useLocation()\n      _extends({}, location, {\n        pathname: stripBasename(location.pathname, basename) || location.pathname\n      }), matches) : getKey;\n      let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKeyWithoutBasename);\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, basename, getKey]);\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(decodeURIComponent(location.hash.slice(1)));\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n      // Don't reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction useBeforeUnload(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Setup a callback to be fired on the window's `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt(_ref8) {\n  let {\n    when,\n    message\n  } = _ref8;\n  let blocker = unstable_useBlocker(when);\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        // This timeout is needed to avoid a weird \"race\" on POP navigations\n        // between the `window.history` revert navigation and the result of\n        // `window.confirm`\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n}\n//#endregion\n\nexport { BrowserRouter, Form, HashRouter, Link, NavLink, ScrollRestoration, useScrollRestoration as UNSAFE_useScrollRestoration, createBrowserRouter, createHashRouter, createSearchParams, HistoryRouter as unstable_HistoryRouter, usePrompt as unstable_usePrompt, useBeforeUnload, useFetcher, useFetchers, useFormAction, useLinkClickHandler, useSearchParams, useSubmit };\n//# sourceMappingURL=index.js.map\n","import { LocaleAll } from '@navikt/fp-types';\n\nconst LocaleSessionKey = 'selectedLocale';\n\nexport const getLocaleFromSessionStorage = <T extends LocaleAll>(): T => {\n    return (sessionStorage.getItem(LocaleSessionKey) as T) || 'nb';\n};\n\nexport const setLocaleInSessionStorage = (locale: LocaleAll): void => {\n    sessionStorage.setItem(LocaleSessionKey, locale);\n};\n\nexport const getNynorskLocale = () => {\n    if (Intl.NumberFormat.supportedLocalesOf('no-NN').length > 0) {\n        return 'no-NN';\n    }\n    return 'nn';\n};\n\nexport const getBokmålLocale = () => {\n    if (Intl.NumberFormat.supportedLocalesOf('no-NB').length > 0) {\n        return 'no-NB';\n    }\n    return 'nb';\n};\n\nexport const getLocaleForApi = (locale: string): LocaleAll => {\n    switch (locale) {\n        case 'nn':\n        case 'no-NN':\n            return 'nn';\n        default:\n            return 'nb';\n    }\n};\n","export const redirect = (url: string) => {\n    window.location.href = url;\n};\n\nexport const redirectToLogin = (loginUrl: string) => {\n    redirect(loginUrl + '?redirect=' + window.location.origin);\n};\n","import { useCallback, useMemo, useState } from 'react';\nimport { AxiosInstance } from 'axios';\nimport { Kvittering, LocaleAll } from '@navikt/fp-types';\nimport { postData, ApiAccessError, ApiGeneralError, isApiError, deleteData } from '@navikt/fp-api';\nimport { notEmpty } from '@navikt/fp-validation';\nimport { OmBarnet, erAdopsjon, erBarnetFødt, erBarnetIkkeFødt } from 'types/OmBarnet';\nimport Dokumentasjon, { erTerminDokumentasjon } from 'types/Dokumentasjon';\nimport { ContextDataType, useContextGetAnyData } from './EsDataContext';\n\n// TODO Vurder om ein heller bør mappa fram og tilbake i barn-komponenten. Er nok bedre å gjera det\nconst mapBarn = (omBarnet: OmBarnet, dokumentasjon?: Dokumentasjon) => {\n    const vedleggreferanser = dokumentasjon?.vedlegg.map((v) => v.id) || [];\n    if (erAdopsjon(omBarnet)) {\n        return {\n            type: 'adopsjon',\n            antallBarn: omBarnet.antallBarn,\n            fødselsdatoer: omBarnet.fødselsdatoer.map((f) => f.dato),\n            adopsjonsdato: omBarnet.adopsjonsdato,\n            adopsjonAvEktefellesBarn: omBarnet.adopsjonAvEktefellesBarn,\n            vedleggreferanser,\n        };\n    }\n    if (erBarnetFødt(omBarnet)) {\n        return {\n            type: 'fødsel',\n            antallBarn: omBarnet.antallBarn,\n            fødselsdato: omBarnet.fødselsdato,\n            vedleggreferanser: [],\n        };\n    }\n\n    if (erBarnetIkkeFødt(omBarnet) && dokumentasjon && erTerminDokumentasjon(dokumentasjon)) {\n        return {\n            type: 'termin',\n            antallBarn: omBarnet.antallBarn,\n            termindato: omBarnet.termindato,\n            terminbekreftelseDato: dokumentasjon.terminbekreftelsedato,\n            vedleggreferanser,\n        };\n    }\n\n    throw Error('Det er feil i data om barnet');\n};\n\n// TODO (TOR) Fiks lokalisering\nconst FEIL_VED_INNSENDING =\n    'Det har oppstått et problem med innsending av søknaden. Vennligst prøv igjen senere. Hvis problemet vedvarer, kontakt oss og oppgi feil id: ';\n\nconst useEsSendSøknad = (\n    esApi: AxiosInstance,\n    locale: LocaleAll,\n    setKvittering: (kvittering: Kvittering | (() => never)) => void,\n) => {\n    const hentData = useContextGetAnyData();\n\n    const [error, setError] = useState<ApiAccessError | ApiGeneralError>();\n\n    const sendSøknad = useCallback(\n        async (abortSignal: AbortSignal) => {\n            const omBarnet = notEmpty(hentData(ContextDataType.OM_BARNET));\n            const dokumentasjon = hentData(ContextDataType.DOKUMENTASJON);\n            const tidligereUtenlandsopphold = hentData(ContextDataType.UTENLANDSOPPHOLD_TIDLIGERE);\n            const senereUtenlandsopphold = hentData(ContextDataType.UTENLANDSOPPHOLD_SENERE);\n\n            const søknad = {\n                type: 'engangsstønad',\n                språkkode: locale,\n                barn: mapBarn(omBarnet, dokumentasjon),\n                utenlandsopphold: {\n                    utenlandsoppholdSiste12Mnd: tidligereUtenlandsopphold?.utenlandsoppholdSiste12Mnd || [],\n                    utenlandsoppholdNeste12Mnd: senereUtenlandsopphold?.utenlandsoppholdNeste12Mnd || [],\n                },\n                vedlegg: dokumentasjon?.vedlegg || [],\n            };\n\n            let kvittering;\n            try {\n                kvittering = await postData<typeof søknad, Kvittering>(\n                    esApi,\n                    '/soknad/engangsstonad',\n                    søknad,\n                    FEIL_VED_INNSENDING,\n                    true,\n                    abortSignal,\n                );\n            } catch (error: unknown) {\n                if (isApiError(error)) {\n                    setError(error);\n                } else {\n                    throw new Error('This should never happen');\n                }\n            }\n\n            if (kvittering) {\n                try {\n                    await deleteData(esApi, '/storage/engangsstonad', FEIL_VED_INNSENDING, abortSignal);\n                } catch (error) {\n                    // Vi bryr oss ikke om feil her. Logges bare i backend\n                }\n\n                setKvittering(kvittering);\n            }\n        },\n        [hentData, locale, setKvittering, esApi],\n    );\n\n    return useMemo(\n        () => ({\n            sendSøknad,\n            errorSendSøknad: error,\n        }),\n        [sendSøknad, error],\n    );\n};\n\nexport default useEsSendSøknad;\n","import { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { AxiosInstance } from 'axios';\nimport { Kvittering, LocaleAll } from '@navikt/fp-types';\nimport { postData, ApiAccessError, ApiGeneralError, deleteData } from '@navikt/fp-api';\nimport { ContextDataMap, ContextDataType, useContextComplete, useContextReset } from './EsDataContext';\n\nexport const VERSJON_MELLOMLAGRING = 1;\n\nexport type EsDataMapAndMetaData = { version: number; locale: LocaleAll } & ContextDataMap;\n\n// TODO (TOR) Fiks lokalisering\nconst FEIL_VED_INNSENDING =\n    'Det har oppstått et problem med mellomlagring av søknaden. Vennligst prøv igjen senere. Hvis problemet vedvarer, kontakt oss og oppgi feil id: ';\n\nconst useEsMellomlagring = (esApi: AxiosInstance, locale: LocaleAll, setVelkommen: (erVelkommen: boolean) => void) => {\n    const navigate = useNavigate();\n    const state = useContextComplete();\n    const resetState = useContextReset();\n\n    const [error, setError] = useState<ApiAccessError | ApiGeneralError>();\n\n    const [skalMellomlagre, setSkalMellomlagre] = useState(false);\n\n    const promiseRef = useRef<() => void>();\n\n    useEffect(() => {\n        if (skalMellomlagre) {\n            const lagreEllerSlett = async () => {\n                setSkalMellomlagre(false);\n\n                const currentPath = state[ContextDataType.CURRENT_PATH];\n                if (currentPath) {\n                    await postData<EsDataMapAndMetaData, Kvittering>(\n                        esApi,\n                        '/storage/engangsstonad',\n                        {\n                            version: VERSJON_MELLOMLAGRING,\n                            locale,\n                            ...state,\n                        },\n                        FEIL_VED_INNSENDING,\n                    );\n\n                    navigate(currentPath);\n                } else {\n                    // Ved avbryt så set ein Path = undefined og må så rydda opp i data\n                    await deleteData(esApi, '/storage/engangsstonad', FEIL_VED_INNSENDING);\n\n                    setVelkommen(false);\n                    resetState();\n                    navigate('/');\n                }\n\n                if (promiseRef.current) {\n                    promiseRef.current();\n                }\n            };\n\n            lagreEllerSlett().catch((error: ApiAccessError | ApiGeneralError) => {\n                setError(error);\n\n                if (promiseRef.current) {\n                    promiseRef.current();\n                }\n            });\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [skalMellomlagre]);\n\n    const mellomlagreOgNaviger = useCallback(() => {\n        //Må gå via state change sidan ein må få oppdatert context før ein mellomlagrar\n        setSkalMellomlagre(true);\n\n        const promise = new Promise<void>((resolve) => {\n            promiseRef.current = resolve;\n        });\n\n        return promise;\n    }, []);\n\n    return useMemo(\n        () => ({\n            mellomlagreOgNaviger,\n            errorMellomlagre: error,\n        }),\n        [mellomlagreOgNaviger, error],\n    );\n};\n\nexport default useEsMellomlagring;\n","import { useEffect, useState } from 'react';\nimport { Loader } from '@navikt/ds-react';\nimport { Navigate, Route, Routes, useNavigate } from 'react-router-dom';\nimport { Kvittering, LocaleAll } from '@navikt/fp-types';\nimport { ApiAccessError, ApiGeneralError, createApi } from '@navikt/fp-api';\nimport { redirect, redirectToLogin } from '@navikt/fp-utils';\nimport { ErrorPage } from '@navikt/fp-ui';\nimport { notEmpty } from '@navikt/fp-validation';\n\nimport { ContextDataType } from 'appData/EsDataContext';\nimport { Path } from 'appData/paths';\nimport Environment from 'appData/Environment';\nimport Person from './types/Person';\nimport SøkersituasjonSteg from './steg/sokersituasjon/SøkersituasjonSteg';\nimport Velkommen from './velkommen/Velkommen';\nimport OmBarnetSteg from './steg/omBarnet/OmBarnetSteg';\nimport UtenlandsoppholdSteg from './steg/utenlandsopphold/UtenlandsoppholdSteg';\nimport OppsummeringSteg from './steg/oppsummering/OppsummeringSteg';\nimport DokumentasjonSteg from './steg/dokumentasjon/DokumentasjonSteg';\nimport SenereUtenlandsoppholdSteg from './steg/utenlandsoppholdSenere/SenereUtenlandsoppholdSteg';\nimport TidligereUtenlandsoppholdSteg from './steg/utenlandsoppholdTidligere/TidligereUtenlandsoppholdSteg';\nimport useEsSendSøknad from 'appData/useEsSendSøknad';\nimport useEsMellomlagring, { EsDataMapAndMetaData } from 'appData/useEsMellomlagring';\n\nexport const esApi = createApi(Environment.REST_API_URL);\n\nexport const Spinner: React.FunctionComponent = () => (\n    <div style={{ textAlign: 'center', padding: '12rem 0' }}>\n        <Loader size=\"2xlarge\" />\n    </div>\n);\n\nexport const ApiErrorHandler: React.FunctionComponent<{ error: ApiAccessError | ApiGeneralError }> = ({ error }) => {\n    if (error instanceof ApiAccessError) {\n        redirectToLogin(Environment.LOGIN_URL);\n        return <Spinner />;\n    }\n    return <ErrorPage appName=\"Engangsstønad\" errorMessage={error.message} retryCallback={() => location.reload()} />;\n};\n\ninterface Props {\n    locale: LocaleAll;\n    onChangeLocale: (locale: LocaleAll) => void;\n    person: Person;\n    mellomlagretData?: EsDataMapAndMetaData;\n}\n\nconst EngangsstønadRoutes: React.FunctionComponent<Props> = ({ locale, onChangeLocale, person, mellomlagretData }) => {\n    const navigate = useNavigate();\n\n    const [erVelkommen, setVelkommen] = useState(false);\n    const [kvittering, setKvittering] = useState<Kvittering>();\n\n    const { sendSøknad, errorSendSøknad } = useEsSendSøknad(esApi, locale, setKvittering);\n    const { mellomlagreOgNaviger, errorMellomlagre } = useEsMellomlagring(esApi, locale, setVelkommen);\n\n    useEffect(() => {\n        if (mellomlagretData && mellomlagretData[ContextDataType.CURRENT_PATH]) {\n            setVelkommen(true);\n            if (mellomlagretData.locale) {\n                onChangeLocale(mellomlagretData.locale);\n            }\n            navigate(mellomlagretData[ContextDataType.CURRENT_PATH]);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [mellomlagretData]);\n\n    if (kvittering) {\n        if (Environment.INNSYN) {\n            redirect(\n                kvittering.saksNr\n                    ? `${Environment.INNSYN}/sak/${kvittering.saksNr}/redirectFromSoknad`\n                    : `${Environment.INNSYN}/redirectFromSoknad`,\n            );\n            return <Spinner />;\n        }\n        return <div>Redirected to Innsyn</div>;\n    }\n\n    if (errorSendSøknad || errorMellomlagre) {\n        return <ApiErrorHandler error={notEmpty(errorSendSøknad || errorMellomlagre)} />;\n    }\n\n    return (\n        <Routes>\n            {!erVelkommen && <Route path=\"*\" element={<Navigate to={Path.VELKOMMEN} />} />}\n            <Route\n                path={Path.VELKOMMEN}\n                element={\n                    <Velkommen\n                        locale={locale}\n                        onChangeLocale={onChangeLocale}\n                        startSøknad={setVelkommen}\n                        erVelkommen={erVelkommen}\n                        mellomlagreOgNaviger={mellomlagreOgNaviger}\n                    />\n                }\n            />\n            {erVelkommen && (\n                <>\n                    <Route\n                        path={Path.SØKERSITUASJON}\n                        element={<SøkersituasjonSteg mellomlagreOgNaviger={mellomlagreOgNaviger} />}\n                    />\n                    <Route\n                        path={Path.OM_BARNET}\n                        element={<OmBarnetSteg kjønn={person.kjønn} mellomlagreOgNaviger={mellomlagreOgNaviger} />}\n                    />\n                    <Route\n                        path={Path.TERMINBEKREFTELSE}\n                        element={<DokumentasjonSteg mellomlagreOgNaviger={mellomlagreOgNaviger} />}\n                    />\n                    <Route\n                        path={Path.ADOPSJONSBEKREFTELSE}\n                        element={<DokumentasjonSteg mellomlagreOgNaviger={mellomlagreOgNaviger} />}\n                    />\n                    <Route\n                        path={Path.UTENLANDSOPPHOLD}\n                        element={<UtenlandsoppholdSteg mellomlagreOgNaviger={mellomlagreOgNaviger} />}\n                    />\n                    <Route\n                        path={Path.TIDLIGERE_UTENLANDSOPPHOLD}\n                        element={<TidligereUtenlandsoppholdSteg mellomlagreOgNaviger={mellomlagreOgNaviger} />}\n                    />\n                    <Route\n                        path={Path.SENERE_UTENLANDSOPPHOLD}\n                        element={<SenereUtenlandsoppholdSteg mellomlagreOgNaviger={mellomlagreOgNaviger} />}\n                    />\n                    <Route\n                        path={Path.OPPSUMMERING}\n                        element={\n                            <OppsummeringSteg\n                                person={person}\n                                sendSøknad={sendSøknad}\n                                mellomlagreOgNaviger={mellomlagreOgNaviger}\n                            />\n                        }\n                    />\n                </>\n            )}\n        </Routes>\n    );\n};\n\nexport default EngangsstønadRoutes;\n","import { LocaleAll } from '@navikt/fp-types';\nimport { useRequest } from '@navikt/fp-api';\nimport { erMyndig } from '@navikt/fp-utils';\nimport { Umyndig } from '@navikt/fp-ui';\nimport { notEmpty } from '@navikt/fp-validation';\n\nimport { EsDataContext } from 'appData/EsDataContext';\nimport Person from './types/Person';\nimport EngangsstønadRoutes, { ApiErrorHandler, Spinner, esApi } from './EngangsstønadRoutes';\nimport { EsDataMapAndMetaData, VERSJON_MELLOMLAGRING } from 'appData/useEsMellomlagring';\n\ninterface Props {\n    locale: LocaleAll;\n    onChangeLocale: (locale: LocaleAll) => void;\n}\n\nconst Engangsstønad: React.FunctionComponent<Props> = ({ locale, onChangeLocale }) => {\n    const { data: person, error: errorHentPerson } = useRequest<Person>(esApi, '/personinfo');\n\n    const {\n        data: mellomlagretData,\n        loading: loadingMellomlagretData,\n        error: errorMellomlagretData,\n    } = useRequest<EsDataMapAndMetaData>(esApi, '/storage/engangsstonad');\n\n    if (errorHentPerson || errorMellomlagretData) {\n        return <ApiErrorHandler error={notEmpty(errorHentPerson || errorMellomlagretData)} />;\n    }\n\n    if (!person || loadingMellomlagretData) {\n        return <Spinner />;\n    }\n\n    if (!erMyndig(person.fødselsdato)) {\n        return <Umyndig appnavn=\"Engangsstønad\" />;\n    }\n\n    const mellomlagretState = mellomlagretData?.version === VERSJON_MELLOMLAGRING ? mellomlagretData : undefined;\n\n    return (\n        <EsDataContext initialState={mellomlagretState}>\n            <EngangsstønadRoutes\n                locale={locale}\n                onChangeLocale={onChangeLocale}\n                person={person}\n                mellomlagretData={mellomlagretState}\n            />\n        </EsDataContext>\n    );\n};\n\nexport default Engangsstønad;\n","import { useCallback, useState } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { ErrorBoundary, IntlProvider } from '@navikt/fp-ui';\nimport { LocaleAll } from '@navikt/fp-types';\nimport { deleteData } from '@navikt/fp-api';\nimport { allCommonMessages, getLocaleFromSessionStorage, setLocaleInSessionStorage } from '@navikt/fp-common';\nimport { esApi } from './EngangsstønadRoutes';\nimport Engangsstønad from './Engangsstønad';\n\nimport nnMessages from './intl/messages/nn_NO.json';\nimport nbMessages from './intl/messages/nb_NO.json';\nimport enMessages from './intl/messages/en_US.json';\n\nconst localeFromSessionStorage = getLocaleFromSessionStorage();\n\nconst MESSAGES_GROUPED_BY_LOCALE = {\n    nb: { ...nbMessages, ...allCommonMessages.nb },\n    nn: { ...nnMessages, ...allCommonMessages.nn },\n    en: { ...enMessages, ...allCommonMessages.en },\n};\n\ndayjs.locale(localeFromSessionStorage);\n\nconst retryCallback = async () => {\n    try {\n        await deleteData(esApi, '/storage/engangsstonad', 'Feil ved sletting av mellomlagret data');\n    } catch (error) {\n        // Vi bryr oss ikke om feil her. Logges bare i backend\n    }\n\n    location.reload();\n};\n\nconst AppContainer = () => {\n    const [locale, setLocale] = useState<LocaleAll>(localeFromSessionStorage);\n\n    const changeLocale = useCallback((activeLocale: LocaleAll) => {\n        setLocaleInSessionStorage(activeLocale);\n        setLocale(activeLocale);\n        document.documentElement.setAttribute('lang', activeLocale);\n    }, []);\n\n    return (\n        <IntlProvider locale={locale} messagesGroupedByLocale={MESSAGES_GROUPED_BY_LOCALE}>\n            <ErrorBoundary appName=\"Engangsstønad\" retryCallback={retryCallback}>\n                <BrowserRouter>\n                    <Engangsstønad locale={locale} onChangeLocale={changeLocale} />\n                </BrowserRouter>\n            </ErrorBoundary>\n        </IntlProvider>\n    );\n};\n\nexport default AppContainer;\n"],"names":["Axios","AxiosError","CanceledError","isCancel","CancelToken","VERSION","all","Cancel","isAxiosError","spread","toFormData","AxiosHeaders","HttpStatusCode","formToJSON","getAdapter","mergeConfig","axios","ApiGeneralError","message","ApiAccessError","isApiError","error","candidate","useRequest","instance","url","data","setData","useState","loading","setLoading","setError","useEffect","ignore","response","err","_a","_b","createApi","baseUrl","UKJENT_UUID","postData","errorMessage","hasContentTypeApplicationJson","abortSignal","submitErrorCallId","callIdForBruker","deleteData","START_TRANSITION","startTransitionImpl","React","BrowserRouter","_ref","basename","children","future","window","historyRef","React.useRef","createBrowserHistory","history","state","setStateImpl","React.useState","v7_startTransition","setState","React.useCallback","newState","React.useLayoutEffect","React.createElement","Router","DataRouterHook","DataRouterStateHook","LocaleSessionKey","getLocaleFromSessionStorage","setLocaleInSessionStorage","locale","redirect","redirectToLogin","loginUrl","mapBarn","omBarnet","dokumentasjon","vedleggreferanser","v","erAdopsjon","f","erBarnetFødt","erBarnetIkkeFødt","erTerminDokumentasjon","FEIL_VED_INNSENDING","useEsSendSøknad","esApi","setKvittering","hentData","useContextGetAnyData","sendSøknad","useCallback","notEmpty","ContextDataType","tidligereUtenlandsopphold","senereUtenlandsopphold","søknad","kvittering","useMemo","VERSJON_MELLOMLAGRING","useEsMellomlagring","setVelkommen","navigate","useNavigate","useContextComplete","resetState","useContextReset","skalMellomlagre","setSkalMellomlagre","promiseRef","useRef","currentPath","mellomlagreOgNaviger","resolve","Environment","Spinner","jsx","Loader","ApiErrorHandler","ErrorPage","EngangsstønadRoutes","onChangeLocale","person","mellomlagretData","erVelkommen","errorSendSøknad","errorMellomlagre","jsxs","Routes","Route","Navigate","Path","Velkommen","Fragment","SøkersituasjonSteg","OmBarnetSteg","DokumentasjonSteg","UtenlandsoppholdSteg","TidligereUtenlandsoppholdSteg","SenereUtenlandsoppholdSteg","OppsummeringSteg","Engangsstønad","errorHentPerson","loadingMellomlagretData","errorMellomlagretData","erMyndig","Umyndig","mellomlagretState","EsDataContext","localeFromSessionStorage","MESSAGES_GROUPED_BY_LOCALE","nbMessages","allCommonMessages","nnMessages","enMessages","dayjs","retryCallback","AppContainer","setLocale","changeLocale","activeLocale","IntlProvider","ErrorBoundary","AppContainer$1"],"mappings":"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","x_google_ignoreList":[0,6]}