{"version":3,"file":"OmBarnet-c4d8c8ec.js","sources":["../../src/app/steps/om-barnet/omBarnetQuestionsConfig.ts","../../src/app/steps/om-barnet/omBarnetUtils.ts","../../src/app/steps/om-barnet/omBarnetValidering.ts","../../src/app/steps/om-barnet/situasjon/Født.tsx","../../src/common/storage/attachment/types/Attachment.ts","../../src/common/storage/api/attachmentApi.ts","../../src/app/components/formik-file-uploader/FormikFileUploader.tsx","../../src/app/steps/om-barnet/situasjon/Termin.tsx","../../src/app/steps/om-barnet/situasjon/Adopsjon.tsx","../../src/app/steps/om-barnet/OmBarnet.tsx"],"sourcesContent":["import { hasValue } from '@navikt/fp-common';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport { OmBarnetFormData, OmBarnetFormField } from './omBarnetFormConfig';\n\nexport interface OmBarnetQuestionPayload extends OmBarnetFormData {\n    situasjon: string;\n    kjønn: string;\n}\n\nconst OmBarnetFormConfig: QuestionConfig<OmBarnetQuestionPayload, OmBarnetFormField> = {\n    [OmBarnetFormField.adopsjonAvEktefellesBarn]: {\n        isIncluded: ({ situasjon }) => situasjon === 'adopsjon',\n        isAnswered: ({ adopsjonAvEktefellesBarn }) => adopsjonAvEktefellesBarn !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ situasjon }) => situasjon === 'adopsjon',\n    },\n    [OmBarnetFormField.erBarnetFødt]: {\n        isIncluded: ({ situasjon }) => situasjon === 'fødsel',\n        isAnswered: ({ erBarnetFødt }) => erBarnetFødt !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ situasjon }) => situasjon === 'fødsel',\n    },\n    [OmBarnetFormField.antallBarn]: {\n        isIncluded: () => true,\n        isAnswered: ({ antallBarn }) => hasValue(antallBarn),\n        visibilityFilter: ({ adopsjonAvEktefellesBarn, erBarnetFødt, adopsjonsdato }) =>\n            erBarnetFødt !== YesOrNo.UNANSWERED ||\n            (adopsjonAvEktefellesBarn !== YesOrNo.UNANSWERED && hasValue(adopsjonsdato)),\n    },\n    [OmBarnetFormField.adopsjonsdato]: {\n        isIncluded: ({ adopsjonAvEktefellesBarn }) => adopsjonAvEktefellesBarn !== YesOrNo.UNANSWERED,\n        isAnswered: ({ adopsjonsdato }) => hasValue(adopsjonsdato),\n        visibilityFilter: ({ adopsjonAvEktefellesBarn }) => adopsjonAvEktefellesBarn !== YesOrNo.UNANSWERED,\n    },\n    [OmBarnetFormField.søkerAdopsjonAlene]: {\n        isIncluded: ({ situasjon, kjønn, adopsjonAvEktefellesBarn }) =>\n            situasjon === 'adopsjon' && kjønn === 'M' && adopsjonAvEktefellesBarn === YesOrNo.NO,\n        isAnswered: ({ søkerAdopsjonAlene }) => søkerAdopsjonAlene !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ adopsjonAvEktefellesBarn, fødselsdatoer }) =>\n            adopsjonAvEktefellesBarn === YesOrNo.NO && fødselsdatoer?.length > 0 && fødselsdatoer[0] !== '',\n    },\n    [OmBarnetFormField.fødselsdatoer]: {\n        isIncluded: ({ erBarnetFødt, adopsjonAvEktefellesBarn }) =>\n            erBarnetFødt === YesOrNo.YES || adopsjonAvEktefellesBarn !== YesOrNo.UNANSWERED,\n        isAnswered: ({ fødselsdatoer }) => fødselsdatoer?.length > 0 && fødselsdatoer[0] !== '',\n        visibilityFilter: ({ antallBarn }) => hasValue(antallBarn),\n    },\n    [OmBarnetFormField.omsorgsovertakelse]: {\n        isIncluded: ({ adopsjonAvEktefellesBarn }) => adopsjonAvEktefellesBarn !== YesOrNo.UNANSWERED,\n        isAnswered: ({ omsorgsovertakelse }) => omsorgsovertakelse?.length > 0,\n        visibilityFilter: ({ adopsjonAvEktefellesBarn, fødselsdatoer, søkerAdopsjonAlene, kjønn }) =>\n            (adopsjonAvEktefellesBarn === YesOrNo.YES && fødselsdatoer?.length > 0 && fødselsdatoer[0] !== '') ||\n            (adopsjonAvEktefellesBarn === YesOrNo.NO && søkerAdopsjonAlene !== YesOrNo.UNANSWERED) ||\n            (kjønn === 'K' && fødselsdatoer?.length > 0 && fødselsdatoer[0] !== ''),\n    },\n    [OmBarnetFormField.termindato]: {\n        isIncluded: ({ erBarnetFødt }) => erBarnetFødt === YesOrNo.NO,\n        isAnswered: ({ termindato }) => hasValue(termindato),\n        visibilityFilter: ({ antallBarn }) => hasValue(antallBarn),\n    },\n    [OmBarnetFormField.terminbekreftelse]: {\n        isIncluded: ({ erBarnetFødt }) => erBarnetFødt === YesOrNo.NO,\n        isAnswered: ({ terminbekreftelse }) => terminbekreftelse?.length > 0,\n        visibilityFilter: ({ termindato }) => hasValue(termindato),\n    },\n    [OmBarnetFormField.terminbekreftelsedato]: {\n        isIncluded: ({ erBarnetFødt }) => erBarnetFødt === YesOrNo.NO,\n        isAnswered: ({ terminbekreftelsedato }) => hasValue(terminbekreftelsedato),\n        visibilityFilter: ({ terminbekreftelse }) => terminbekreftelse?.length > 0,\n    },\n};\n\nconst omBarnetQuestionsConfig = Questions<OmBarnetQuestionPayload, OmBarnetFormField>(OmBarnetFormConfig);\n\nexport default omBarnetQuestionsConfig;\n","import { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\nimport { OmBarnetFormData } from './omBarnetFormConfig';\n\nexport const cleanupOmBarnet = (formData: OmBarnetFormData): OmBarnetFormData => {\n    const cleanedData: Partial<OmBarnetFormData> = {};\n    cleanedData.antallBarn = undefined;\n    cleanedData.erBarnetFødt = YesOrNo.UNANSWERED;\n    cleanedData.adopsjonAvEktefellesBarn = YesOrNo.UNANSWERED;\n    cleanedData.søkerAdopsjonAlene = YesOrNo.UNANSWERED;\n\n    if (formData.erBarnetFødt === YesOrNo.YES) {\n        cleanedData.antallBarn = formData.antallBarn;\n        cleanedData.fødselsdatoer = formData.fødselsdatoer;\n        cleanedData.erBarnetFødt = formData.erBarnetFødt;\n    }\n    if (formData.erBarnetFødt === YesOrNo.NO) {\n        cleanedData.antallBarn = formData.antallBarn;\n        cleanedData.erBarnetFødt = formData.erBarnetFødt;\n        cleanedData.terminbekreftelse = formData.terminbekreftelse;\n        cleanedData.terminbekreftelsedato = formData.terminbekreftelsedato;\n        cleanedData.termindato = formData.termindato;\n    }\n    if (formData.adopsjonAvEktefellesBarn !== YesOrNo.UNANSWERED) {\n        cleanedData.antallBarn = formData.antallBarn;\n        cleanedData.adopsjonsdato = formData.adopsjonsdato;\n        cleanedData.fødselsdatoer = formData.fødselsdatoer;\n        cleanedData.omsorgsovertakelse = formData.omsorgsovertakelse;\n        cleanedData.adopsjonAvEktefellesBarn = formData.adopsjonAvEktefellesBarn;\n        cleanedData.søkerAdopsjonAlene = formData.søkerAdopsjonAlene;\n    }\n    return cleanedData as OmBarnetFormData;\n};\n","import {\n    erMindreEnn3UkerSiden,\n    etterDagensDato,\n    hasValue,\n    sisteDatoBarnetKanVæreFødt,\n    sisteMuligeTermindato,\n    utstedtDatoErIUke22,\n    sisteMuligeDatoForOvertaOmsorg,\n    intlUtils,\n} from '@navikt/fp-common';\nimport datepickerUtils from '@navikt/sif-common-formik-ds/lib/components/formik-datepicker/datepickerUtils';\nimport { IntlShape } from 'react-intl';\n\nexport const validateEktefellensBarnAdopsjonDate = (dato: string, intl: IntlShape) => {\n    if (!hasValue(dato)) {\n        return intlUtils(intl, 'valideringsfeil.omBarnet.adopsjonDato.ektefellensBarn.duMåOppgi');\n    }\n\n    if (!datepickerUtils.isValidFormattedDateString(dato)) {\n        return intlUtils(intl, 'invalidFormatErrorKey.adopsjonsdato');\n    }\n\n    if (sisteMuligeDatoForOvertaOmsorg(dato)) {\n        return intlUtils(intl, 'valideringsfeil.omBarnet.adopsjonDato.forLangtFremITid');\n    }\n\n    return undefined;\n};\n\nexport const validateOvertaOmsorgAdopsjonDate = (dato: string, intl: IntlShape) => {\n    if (!hasValue(dato)) {\n        return intlUtils(intl, 'valideringsfeil.omBarnet.adopsjonDato.overtaOmsorg.duMåOppgi');\n    }\n    if (sisteMuligeDatoForOvertaOmsorg(dato)) {\n        return intlUtils(intl, 'valideringsfeil.omBarnet.adopsjonDato.forLangtFremITid');\n    }\n    return undefined;\n};\n\nexport const validateNårKommerBarnetDate = (dato: string, intl: IntlShape) => {\n    if (!hasValue(dato)) {\n        return intlUtils(intl, 'valideringsfeil.omBarnet.nårKommerBarnetDato.duMåOppgi');\n    }\n    return undefined;\n};\n\nexport const validateFødselDate = (dato: string, intl: IntlShape) => {\n    if (!hasValue(dato)) {\n        return intlUtils(intl, 'valideringsfeil.omBarnet.fodselsdato.duMåOppgi');\n    }\n    if (etterDagensDato(dato)) {\n        return intlUtils(intl, 'valideringsfeil.omBarnet.fodselsdato.måVæreIdagEllerTidligere');\n    }\n    if (sisteDatoBarnetKanVæreFødt(dato)) {\n        return intlUtils(intl, 'valideringsfeil.omBarnet.fodselsdato.ikkeMerEnn6MånederTilbake');\n    }\n    return undefined;\n};\n\nexport const validateAdopsjonFødselDate = (\n    dato: string | undefined,\n    adopsjonsdato: string | undefined,\n    intl: IntlShape\n) => {\n    if (!hasValue(dato)) {\n        return intlUtils(intl, 'valideringsfeil.omBarnet.fodselsdato.duMåOppgi');\n    }\n\n    if (!datepickerUtils.isValidFormattedDateString(dato)) {\n        return intlUtils(intl, 'invalidFormatErrorKey.fødselsdato');\n    }\n\n    if (!dato || !adopsjonsdato) {\n        return undefined;\n    }\n    if (etterDagensDato(dato)) {\n        return intlUtils(intl, 'valideringsfeil.omBarnet.fodselsdato.måVæreIdagEllerTidligere');\n    }\n    return undefined;\n};\n\nexport const validateTerminDate = (dato: string, intl: IntlShape) => {\n    if (!hasValue(dato)) {\n        return intlUtils(intl, 'valideringsfeil.omBarnet.termindato.duMåOppgi');\n    }\n    if (!datepickerUtils.isValidFormattedDateString(dato)) {\n        return intlUtils(intl, 'invalidFormatErrorKey.termindato');\n    }\n    if (!erMindreEnn3UkerSiden(dato)) {\n        return intlUtils(intl, 'valideringsfeil.omBarnet.termindato.termindatoKanIkkeVære3UkerFraIdag');\n    }\n    if (sisteMuligeTermindato(dato)) {\n        return intlUtils(intl, 'valideringsfeil.omBarnet.termindato.duMåVæreIUke22');\n    }\n    return undefined;\n};\n\nexport const valideringAvTerminbekreftelsesdato = (\n    dato: string | undefined,\n    termindato: string | undefined,\n    intl: IntlShape\n) => {\n    if (!hasValue(dato)) {\n        return intlUtils(intl, 'valideringsfeil.omBarnet.terminbekreftelseDato.duMåOppgi');\n    }\n    if (!dato || !termindato) {\n        return undefined;\n    }\n\n    if (!datepickerUtils.isValidFormattedDateString(dato)) {\n        return intlUtils(intl, 'invalidFormatErrorKey.terminBekreftelsedato');\n    }\n\n    if (etterDagensDato(dato)) {\n        return intlUtils(intl, 'valideringsfeil.omBarnet.terminbekreftelseDato.måVæreIdagEllerTidligere');\n    }\n    if (!utstedtDatoErIUke22(dato, termindato)) {\n        return intlUtils(intl, 'valideringsfeil.omBarnet.terminbekreftelseDato.duMåVæreIUke22');\n    }\n    return undefined;\n};\n","import { Block, intlUtils } from '@navikt/fp-common';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport getMessage from 'common/util/i18nUtils';\nimport dayjs from 'dayjs';\nimport { FieldArray } from 'formik';\n\nimport { useIntl } from 'react-intl';\nimport { OmBarnetFormComponents, OmBarnetFormData, OmBarnetFormField } from '../omBarnetFormConfig';\nimport { validateFødselDate } from '../omBarnetValidering';\n\ninterface Fødtprops {\n    formValues: OmBarnetFormData;\n    visibility: QuestionVisibility<OmBarnetFormField, undefined>;\n}\n\nconst Født: React.FunctionComponent<Fødtprops> = ({ visibility, formValues }) => {\n    const intl = useIntl();\n\n    if (formValues.erBarnetFødt === YesOrNo.NO || formValues.erBarnetFødt === YesOrNo.UNANSWERED) {\n        return null;\n    }\n    return (\n        <>\n            {visibility.isVisible(OmBarnetFormField.antallBarn) && (\n                <>\n                    <Block margin=\"xl\">\n                        <OmBarnetFormComponents.RadioGroup\n                            name={OmBarnetFormField.antallBarn}\n                            radios={[\n                                {\n                                    label: intlUtils(intl, 'omBarnet.radiobutton.ettbarn'),\n                                    value: '1',\n                                },\n                                {\n                                    label: intlUtils(intl, 'omBarnet.radiobutton.tvillinger'),\n                                    value: '2',\n                                },\n                                {\n                                    label: intlUtils(intl, 'omBarnet.radiobutton.flere'),\n                                    value: '3',\n                                },\n                            ]}\n                            legend={getMessage(intl, 'omBarnet.text.antallBarn.født')}\n                        />\n                    </Block>\n                    {formValues.antallBarn && parseInt(formValues.antallBarn, 10) >= 3 && (\n                        <Block margin=\"xl\">\n                            <OmBarnetFormComponents.Select\n                                name={OmBarnetFormField.antallBarn}\n                                label={getMessage(intl, 'omBarnet.text.antallBarn.født')}\n                            >\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                                <option value=\"6\">6</option>\n                                <option value=\"7\">7</option>\n                                <option value=\"8\">8</option>\n                                <option value=\"9\">9</option>\n                            </OmBarnetFormComponents.Select>\n                        </Block>\n                    )}\n                </>\n            )}\n            {visibility.isVisible(OmBarnetFormField.fødselsdatoer) && (\n                <Block margin=\"xl\">\n                    <FieldArray\n                        name={OmBarnetFormField.fødselsdatoer}\n                        render={() => [\n                            <OmBarnetFormComponents.DatePicker\n                                key={`${OmBarnetFormField.fødselsdatoer}.0`}\n                                name={`${OmBarnetFormField.fødselsdatoer}.0` as OmBarnetFormField}\n                                label={getMessage(intl, 'søknad.fødselsdato')}\n                                minDate={dayjs().subtract(6, 'month').toDate()}\n                                maxDate={dayjs().toDate()}\n                                validate={(value) => validateFødselDate(value, intl)}\n                                placeholder={'dd.mm.åååå'}\n                            />,\n                        ]}\n                    />\n                </Block>\n            )}\n        </>\n    );\n};\nexport default Født;\n","export interface Attachment {\n    id: string;\n    filename: string;\n    filesize: number;\n    file: File;\n    url?: string;\n    uuid?: string;\n    pending: boolean;\n    uploaded: boolean;\n    type: AttachmentType;\n    skjemanummer: Skjemanummer;\n    error?: any;\n}\n\nexport enum AttachmentType {\n    TERMINBEKREFTELSE = 'terminbekreftelse',\n    OMSORGSOVERTAKELSE = 'omsorgsovertakelse',\n}\n\nexport enum Skjemanummer {\n    TERMINBEKREFTELSE = 'I000062',\n    OMSORGSOVERTAKELSE = 'I000042',\n}\n","import Environment from 'app/Environment';\nimport { Attachment } from '../attachment/types/Attachment';\nimport axios from 'axios';\n\nfunction saveAttachment(attachment: Attachment) {\n    const config = {\n        withCredentials: true,\n        timeout: 45 * 1000,\n        headers: {\n            'content-type': 'multipart/form-data',\n        },\n    };\n\n    const formData = new FormData();\n    formData.append('id', attachment.id);\n    formData.append('vedlegg', attachment.file, attachment.filename);\n\n    const url = `${Environment.REST_API_URL}/storage/vedlegg`;\n    return axios.post(url, formData, config);\n}\n\nconst AttachmentApi = { saveAttachment };\n\nexport default AttachmentApi;\n","import { ArrayHelpers, useFormikContext } from 'formik';\nimport { Attachment, AttachmentType, Skjemanummer } from 'common/storage/attachment/types/Attachment';\nimport FormikFileInput from '@navikt/sif-common-formik-ds/lib/components/formik-file-input/FormikFileInput';\nimport { OmBarnetFormData, OmBarnetFormField } from 'app/steps/om-barnet/omBarnetFormConfig';\nimport { isAttachmentWithError, mapFileToAttachment } from 'common/storage/attachment/components/util';\nimport AttachmentApi from 'common/storage/api/attachmentApi';\nimport AttachmentList from 'common/storage/attachment/components/AttachmentList';\nimport { Block } from '@navikt/fp-common';\n\nexport type FieldArrayReplaceFn = (index: number, value: any) => void;\nexport type FieldArrayPushFn = (obj: any) => void;\nexport type FieldArrayRemoveFn = (index: number) => undefined;\n\ninterface Props {\n    attachments: Attachment[];\n    name: OmBarnetFormField;\n    label: string;\n    legend: string;\n    description?: string;\n    validate?: any;\n    onFileInputClick?: () => void;\n}\n\nconst VALID_EXTENSIONS = ['.pdf', '.jpeg', '.jpg', '.png'];\n\nconst getAttachmentFromFile = (file: File, name: string): Attachment => {\n    if (name === OmBarnetFormField.terminbekreftelse) {\n        return mapFileToAttachment(file, AttachmentType.TERMINBEKREFTELSE, Skjemanummer.TERMINBEKREFTELSE);\n    }\n    return mapFileToAttachment(file, AttachmentType.OMSORGSOVERTAKELSE, Skjemanummer.OMSORGSOVERTAKELSE);\n};\n\nconst getPendingAttachmentFromFile = (file: File, name: string): Attachment => {\n    const newAttachment = getAttachmentFromFile(file, name);\n    newAttachment.pending = true;\n    return newAttachment;\n};\n\nconst attachmentUploadHasFailed = ({ pending, uploaded, file: { name } }: Attachment): boolean =>\n    (!pending && !uploaded) || !fileExtensionIsValid(name);\n\nconst fileExtensionIsValid = (filename: string): boolean => {\n    const ext = filename.split('.').pop();\n    return VALID_EXTENSIONS.includes(`.${ext!.toLowerCase()}`);\n};\n\nlet removeFn: FieldArrayRemoveFn;\n\nconst FormikFileUploader: React.FunctionComponent<Props> = ({\n    attachments,\n    name,\n    onFileInputClick,\n    label,\n    legend,\n    description,\n    ...otherProps\n}) => {\n    const { values } = useFormikContext<OmBarnetFormData>();\n\n    async function uploadAttachment(attachment: Attachment) {\n        try {\n            const response = await AttachmentApi.saveAttachment(attachment);\n            attachment = setAttachmentPendingToFalse(attachment);\n            attachment.url = response.headers.location;\n            attachment.uploaded = true;\n            attachment.uuid = response.data;\n        } catch (error) {\n            setAttachmentPendingToFalse(attachment);\n        }\n    }\n\n    async function uploadAttachments(allAttachments: Attachment[], replaceFn: FieldArrayReplaceFn) {\n        for (const attachment of allAttachments) {\n            await uploadAttachment(attachment);\n            updateAttachmentListElement(allAttachments, attachment, replaceFn);\n        }\n\n        const failedAttachments = [...allAttachments.filter(attachmentUploadHasFailed)];\n        updateFailedAttachments(allAttachments, failedAttachments, replaceFn);\n    }\n\n    function updateFailedAttachments(\n        allAttachments: Attachment[],\n        failedAttachments: Attachment[],\n        replaceFn: FieldArrayReplaceFn\n    ) {\n        failedAttachments.forEach((attachment) => {\n            attachment = setAttachmentPendingToFalse(attachment);\n            updateAttachmentListElement(allAttachments, attachment, replaceFn);\n        });\n    }\n\n    function updateAttachmentListElement(atts: Attachment[], attachment: Attachment, replaceFn: FieldArrayReplaceFn) {\n        replaceFn(atts.indexOf(attachment), attachment);\n    }\n\n    function setAttachmentPendingToFalse(attachment: Attachment) {\n        attachment.pending = false;\n        return attachment;\n    }\n\n    function addPendingAttachmentToFieldArray(file: File, pushFn: FieldArrayPushFn) {\n        const attachment = getPendingAttachmentFromFile(file, name);\n        pushFn(attachment);\n        return attachment;\n    }\n\n    return (\n        <>\n            <FormikFileInput\n                name={name}\n                accept={VALID_EXTENSIONS.join(', ')}\n                onFilesSelect={async (files: File[], { push, replace, remove }: ArrayHelpers) => {\n                    removeFn = remove;\n                    const atts = files.map((file) => addPendingAttachmentToFieldArray(file, push));\n                    await uploadAttachments([...(values as any)[name], ...atts], replace);\n                }}\n                onClick={onFileInputClick}\n                legend={legend}\n                buttonLabel={label}\n                description={description}\n                {...otherProps}\n            />\n            <Block margin=\"xl\">\n                <AttachmentList\n                    attachments={attachments.filter((a) => !isAttachmentWithError(a))}\n                    showFileSize={true}\n                    onDelete={(file: Attachment) => {\n                        removeFn(attachments.indexOf(file));\n                    }}\n                />\n            </Block>\n        </>\n    );\n};\n\nexport default FormikFileUploader;\n","import { Block, intlUtils, PictureScanningGuide, UtvidetInformasjon } from '@navikt/fp-common';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport FormikFileUploader from 'app/components/formik-file-uploader/FormikFileUploader';\nimport getMessage from 'common/util/i18nUtils';\nimport dayjs from 'dayjs';\n\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { OmBarnetFormComponents, OmBarnetFormData, OmBarnetFormField } from '../omBarnetFormConfig';\nimport { validateTerminDate, valideringAvTerminbekreftelsesdato } from '../omBarnetValidering';\n\ninterface Fødtprops {\n    formValues: OmBarnetFormData;\n    visibility: QuestionVisibility<OmBarnetFormField, undefined>;\n}\n\nconst Termin: React.FunctionComponent<Fødtprops> = ({ visibility, formValues }) => {\n    const intl = useIntl();\n\n    if (formValues.erBarnetFødt === YesOrNo.YES || formValues.erBarnetFødt === YesOrNo.UNANSWERED) {\n        return null;\n    }\n    return (\n        <>\n            {visibility.isVisible(OmBarnetFormField.antallBarn) && (\n                <>\n                    <Block margin=\"xl\">\n                        <OmBarnetFormComponents.RadioGroup\n                            name={OmBarnetFormField.antallBarn}\n                            radios={[\n                                {\n                                    label: intlUtils(intl, 'omBarnet.radiobutton.ettbarn'),\n                                    value: '1',\n                                },\n                                {\n                                    label: intlUtils(intl, 'omBarnet.radiobutton.tvillinger'),\n                                    value: '2',\n                                },\n                                {\n                                    label: intlUtils(intl, 'omBarnet.radiobutton.flere'),\n                                    value: '3',\n                                },\n                            ]}\n                            legend={getMessage(intl, 'omBarnet.text.antallBarn.termin')}\n                        />\n                    </Block>\n                    {formValues.antallBarn && parseInt(formValues.antallBarn, 10) >= 3 && (\n                        <Block margin=\"xl\">\n                            <OmBarnetFormComponents.Select\n                                name={OmBarnetFormField.antallBarn}\n                                label={intlUtils(intl, 'omBarnet.text.antallBarn.termin')}\n                            >\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                                <option value=\"6\">6</option>\n                                <option value=\"7\">7</option>\n                                <option value=\"8\">8</option>\n                                <option value=\"9\">9</option>\n                            </OmBarnetFormComponents.Select>\n                        </Block>\n                    )}\n                </>\n            )}\n            {visibility.isVisible(OmBarnetFormField.termindato) && (\n                <Block margin=\"xl\">\n                    <OmBarnetFormComponents.DatePicker\n                        name={OmBarnetFormField.termindato}\n                        label={getMessage(intl, 'søknad.termindato')}\n                        minDate={dayjs().subtract(3, 'week').toDate()}\n                        maxDate={dayjs().add(18, 'weeks').add(3, 'days').toDate()}\n                        validate={(value) => validateTerminDate(value, intl)}\n                        placeholder={'dd.mm.åååå'}\n                    />\n                </Block>\n            )}\n            {visibility.isVisible(OmBarnetFormField.terminbekreftelse) && (\n                <>\n                    <Block margin=\"xl\">\n                        <FormikFileUploader\n                            attachments={formValues.terminbekreftelse || []}\n                            label={getMessage(intl, 'vedlegg.lastoppknapp.label')}\n                            legend={getMessage(intl, 'vedlegg.terminbekreftelse')}\n                            description={getMessage(intl, 'terminbekreftelsen.text.terminbekreftelsen')}\n                            name={OmBarnetFormField.terminbekreftelse}\n                        />\n                        <UtvidetInformasjon apneLabel={<FormattedMessage id=\"psg.åpneLabel\" />}>\n                            <PictureScanningGuide backgroundColor=\"white\" />\n                        </UtvidetInformasjon>\n                    </Block>\n                </>\n            )}\n            {visibility.isVisible(OmBarnetFormField.terminbekreftelsedato) && (\n                <Block margin=\"xl\">\n                    <OmBarnetFormComponents.DatePicker\n                        name={OmBarnetFormField.terminbekreftelsedato}\n                        label={getMessage(intl, 'søknad.terminbekreftelsesdato')}\n                        minDate={dayjs(formValues.termindato).subtract(18, 'week').subtract(3, 'day').toDate()}\n                        maxDate={dayjs().toDate()}\n                        validate={(terminBekreftelseDato) =>\n                            valideringAvTerminbekreftelsesdato(terminBekreftelseDato, formValues.termindato, intl)\n                        }\n                    />\n                </Block>\n            )}\n        </>\n    );\n};\nexport default Termin;\n","import { Block, intlUtils, PictureScanningGuide, UtvidetInformasjon } from '@navikt/fp-common';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport FormikFileUploader from 'app/components/formik-file-uploader/FormikFileUploader';\nimport { Kjønn } from 'app/types/domain/Person';\nimport getMessage from 'common/util/i18nUtils';\nimport dayjs from 'dayjs';\nimport { FieldArray } from 'formik';\n\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { OmBarnetFormComponents, OmBarnetFormData, OmBarnetFormField } from '../omBarnetFormConfig';\nimport {\n    validateAdopsjonFødselDate,\n    validateEktefellensBarnAdopsjonDate,\n    validateOvertaOmsorgAdopsjonDate,\n} from '../omBarnetValidering';\n\ninterface Fødtprops {\n    formValues: OmBarnetFormData;\n    visibility: QuestionVisibility<OmBarnetFormField, undefined>;\n    kjønn: Kjønn;\n}\n\nconst Adopsjon: React.FunctionComponent<Fødtprops> = ({ visibility, formValues }) => {\n    const intl = useIntl();\n\n    if (formValues.adopsjonAvEktefellesBarn === YesOrNo.UNANSWERED) {\n        return null;\n    }\n\n    return (\n        <>\n            {visibility.isVisible(OmBarnetFormField.adopsjonsdato) && (\n                <Block margin=\"xl\">\n                    <OmBarnetFormComponents.DatePicker\n                        name={OmBarnetFormField.adopsjonsdato}\n                        label={\n                            formValues.adopsjonAvEktefellesBarn === YesOrNo.YES\n                                ? getMessage(intl, 'omBarnet.adopsjon.spørsmål.stebarnsadopsjondato')\n                                : getMessage(intl, 'omBarnet.adopsjon.spørsmål.overtaomsorgdato')\n                        }\n                        minDate={dayjs().subtract(6, 'month').toDate()}\n                        validate={\n                            formValues.adopsjonAvEktefellesBarn === YesOrNo.YES\n                                ? (value) => validateEktefellensBarnAdopsjonDate(value, intl)\n                                : (value) => validateOvertaOmsorgAdopsjonDate(value, intl)\n                        }\n                        placeholder={'dd.mm.åååå'}\n                    />\n                </Block>\n            )}\n            {visibility.isVisible(OmBarnetFormField.antallBarn) && (\n                <>\n                    <Block margin=\"xl\">\n                        <OmBarnetFormComponents.RadioGroup\n                            name={OmBarnetFormField.antallBarn}\n                            radios={[\n                                {\n                                    label: intlUtils(intl, 'omBarnet.radiobutton.ettbarn'),\n                                    value: '1',\n                                },\n                                {\n                                    label: intlUtils(intl, 'omBarnet.radiobutton.toBarn'),\n                                    value: '2',\n                                },\n                                {\n                                    label: intlUtils(intl, 'omBarnet.radiobutton.flere'),\n                                    value: '3',\n                                },\n                            ]}\n                            legend={getMessage(intl, 'omBarnet.adopsjon.spørsmål.antallBarnAdoptert')}\n                        />\n                    </Block>\n\n                    {formValues.antallBarn && parseInt(formValues.antallBarn, 10) >= 3 && (\n                        <Block margin=\"xl\">\n                            <OmBarnetFormComponents.Select\n                                name={OmBarnetFormField.antallBarn}\n                                label={getMessage(intl, 'omBarnet.text.antallBarn.omsorgsovertakelse')}\n                            >\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                                <option value=\"6\">6</option>\n                                <option value=\"7\">7</option>\n                                <option value=\"8\">8</option>\n                                <option value=\"9\">9</option>\n                            </OmBarnetFormComponents.Select>\n                        </Block>\n                    )}\n                </>\n            )}\n            {visibility.isVisible(OmBarnetFormField.fødselsdatoer) && (\n                <Block margin=\"xl\">\n                    <FieldArray\n                        name={OmBarnetFormField.fødselsdatoer}\n                        render={() =>\n                            [...Array(parseInt(formValues.antallBarn!, 10))].map((_, index) => {\n                                return (\n                                    <Block padBottom=\"xl\" key={`${index}`}>\n                                        <OmBarnetFormComponents.DatePicker\n                                            name={`${OmBarnetFormField.fødselsdatoer}.${index}` as OmBarnetFormField}\n                                            label={\n                                                formValues.antallBarn === '1'\n                                                    ? getMessage(intl, 'søknad.fødselsdato')\n                                                    : getMessage(\n                                                          intl,\n                                                          `omBarnet.adopsjon.spørsmål.fødselsdato.${index + 1}`\n                                                      )\n                                            }\n                                            minDate={dayjs().subtract(15, 'year').toDate()}\n                                            maxDate={dayjs().toDate()}\n                                            validate={(fødselsDatoer) =>\n                                                validateAdopsjonFødselDate(\n                                                    fødselsDatoer,\n                                                    formValues.adopsjonsdato,\n                                                    intl\n                                                )\n                                            }\n                                            placeholder={'dd.mm.åååå'}\n                                        />\n                                    </Block>\n                                );\n                            })\n                        }\n                    />\n                </Block>\n            )}\n            {visibility.isVisible(OmBarnetFormField.søkerAdopsjonAlene) && (\n                <Block margin=\"xl\">\n                    <OmBarnetFormComponents.YesOrNoQuestion\n                        name={OmBarnetFormField.søkerAdopsjonAlene}\n                        legend={getMessage(intl, 'omBarnet.adopsjon.spørsmål.adoptererDuAlene')}\n                        labels={{\n                            no: getMessage(intl, 'omBarnet.adopsjon.text.nei'),\n                            yes: getMessage(intl, 'omBarnet.adopsjon.text.ja'),\n                        }}\n                    />\n                </Block>\n            )}\n            {visibility.isVisible(OmBarnetFormField.omsorgsovertakelse) && (\n                <>\n                    <Block margin=\"xl\">\n                        <FormikFileUploader\n                            attachments={formValues.omsorgsovertakelse || []}\n                            label={getMessage(intl, 'vedlegg.lastoppknapp.label')}\n                            legend={getMessage(intl, 'vedlegg.adopsjon')}\n                            name={OmBarnetFormField.omsorgsovertakelse}\n                            description={getMessage(intl, 'omBarnet.adopsjon.veilederpanel.adopsjon.text')}\n                        />\n                        <UtvidetInformasjon apneLabel={<FormattedMessage id=\"psg.åpneLabel\" />}>\n                            <PictureScanningGuide backgroundColor=\"white\" />\n                        </UtvidetInformasjon>\n                    </Block>\n                </>\n            )}\n        </>\n    );\n};\nexport default Adopsjon;\n","import { bemUtils, Block, intlUtils, Step, StepButtonWrapper, useDocumentTitle } from '@navikt/fp-common';\n\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Button } from '@navikt/ds-react';\nimport {\n    OmBarnetFormComponents,\n    OmBarnetFormField,\n    OmBarnetFormData,\n    initialOmBarnetValues,\n} from './omBarnetFormConfig';\nimport omBarnetQuestionsConfig from './omBarnetQuestionsConfig';\nimport getMessage from 'common/util/i18nUtils';\nimport { useNavigate, Link } from 'react-router-dom';\nimport { UnansweredQuestionsInfo, YesOrNo } from '@navikt/sif-common-formik-ds/lib';\nimport actionCreator from 'app/context/action/actionCreator';\nimport stepConfig, { getPreviousStepHref } from 'app/step-config/stepConfig';\nimport { cleanupOmBarnet } from './omBarnetUtils';\nimport { useEngangsstønadContext } from 'app/context/hooks/useEngangsstønadContext';\nimport Født from './situasjon/Født';\nimport Termin from './situasjon/Termin';\n\nimport { onAvbrytSøknad } from 'app/util/globalUtil';\nimport { logAmplitudeEvent } from 'app/amplitude/amplitude';\nimport { PageKeys } from 'app/types/PageKeys';\nimport Adopsjon from './situasjon/Adopsjon';\nimport Person from 'app/types/domain/Person';\n\nimport './omBarnet.less';\n\ninterface Props {\n    person: Person;\n}\n\nconst shouldResetInitialValues = (\n    situasjon: string,\n    erBarnetFødt: YesOrNo,\n    adopsjonAvEktefellesBarn: YesOrNo\n): boolean => {\n    if (\n        (situasjon === 'adopsjon' && erBarnetFødt !== YesOrNo.UNANSWERED) ||\n        (situasjon === 'fødsel' && adopsjonAvEktefellesBarn !== YesOrNo.UNANSWERED)\n    ) {\n        return true;\n    }\n\n    return false;\n};\n\nconst OmBarnet: React.FunctionComponent<Props> = ({ person }) => {\n    const intl = useIntl();\n    const bem = bemUtils('omBarnet');\n    const navigate = useNavigate();\n    useDocumentTitle(intlUtils(intl, 'søknad.omBarnet'));\n    const { state, dispatch } = useEngangsstønadContext();\n    const søkersituasjonValues = state.søknad.søkersituasjon;\n    const { omBarnet } = state.søknad;\n    const { situasjon } = søkersituasjonValues;\n    const initialValues = shouldResetInitialValues(situasjon!, omBarnet.erBarnetFødt, omBarnet.adopsjonAvEktefellesBarn)\n        ? initialOmBarnetValues\n        : omBarnet;\n\n    logAmplitudeEvent('sidevisning', {\n        app: 'engangsstonadny',\n        team: 'foreldrepenger',\n        pageKey: PageKeys.OmBarnet,\n    });\n\n    const onValidSubmit = (values: Partial<OmBarnetFormData>) => {\n        dispatch(\n            actionCreator.setOmBarnet({\n                erBarnetFødt: values.erBarnetFødt!,\n                adopsjonAvEktefellesBarn: values.adopsjonAvEktefellesBarn!,\n                antallBarn: values.antallBarn,\n                adopsjonsdato: values.adopsjonsdato,\n                søkerAdopsjonAlene: values.søkerAdopsjonAlene!,\n                fødselsdatoer: values.fødselsdatoer || [],\n                termindato: values.termindato,\n                terminbekreftelse: values.terminbekreftelse || [],\n                omsorgsovertakelse: values.omsorgsovertakelse || [],\n                terminbekreftelsedato: values.terminbekreftelsedato,\n            })\n        );\n        navigate('/soknad/utenlandsopphold');\n    };\n\n    return (\n        <OmBarnetFormComponents.FormikWrapper\n            initialValues={initialValues}\n            onSubmit={(values) => onValidSubmit(values)}\n            renderForm={({ values: formValues }) => {\n                // @ts-ignore Fiks denne\n                const visibility = omBarnetQuestionsConfig.getVisbility({\n                    ...formValues,\n                    situasjon: søkersituasjonValues.situasjon!,\n                    kjønn: person.kjønn,\n                });\n                const allQuestionsAnswered = visibility.areAllQuestionsAnswered();\n                return (\n                    <Step\n                        bannerTitle={getMessage(intl, 'søknad.pageheading')}\n                        activeStepId=\"omBarnet\"\n                        pageTitle={getMessage(intl, 'søknad.omBarnet')}\n                        onCancel={() => onAvbrytSøknad(dispatch, navigate)}\n                        steps={stepConfig}\n                    >\n                        <OmBarnetFormComponents.Form\n                            includeButtons={false}\n                            // @ts-ignore Fiks denne\n                            cleanup={() => cleanupOmBarnet(formValues)}\n                            noButtonsContentRenderer={\n                                allQuestionsAnswered\n                                    ? undefined\n                                    : () => (\n                                          <UnansweredQuestionsInfo>\n                                              {intlUtils(intl, 'søknad.footer.spørsmålMåBesvares')}\n                                          </UnansweredQuestionsInfo>\n                                      )\n                            }\n                        >\n                            <div className={bem.block}>\n                                {søkersituasjonValues.situasjon === 'adopsjon' ? (\n                                    <Block>\n                                        <OmBarnetFormComponents.YesOrNoQuestion\n                                            name={OmBarnetFormField.adopsjonAvEktefellesBarn}\n                                            legend={getMessage(intl, 'omBarnet.adopsjon.spørsmål.stebarnsadopsjon')}\n                                            labels={{\n                                                no: getMessage(intl, 'omBarnet.adopsjon.text.nei'),\n                                                yes: getMessage(intl, 'omBarnet.adopsjon.text.ja'),\n                                            }}\n                                        />\n                                    </Block>\n                                ) : (\n                                    <Block>\n                                        <OmBarnetFormComponents.YesOrNoQuestion\n                                            name={OmBarnetFormField.erBarnetFødt}\n                                            legend={getMessage(intl, 'omBarnet.spørsmål.erBarnetFødt')}\n                                            labels={{\n                                                no: getMessage(intl, 'omBarnet.radiobutton.nei'),\n                                                yes: getMessage(intl, 'omBarnet.radiobutton.ja'),\n                                            }}\n                                        />\n                                    </Block>\n                                )}\n                                <Adopsjon\n                                    visibility={visibility}\n                                    // @ts-ignore Fiks denne\n                                    formValues={formValues}\n                                    kjønn={person.kjønn}\n                                />\n                                <Født\n                                    visibility={visibility}\n                                    // @ts-ignore Fiks denne\n                                    formValues={formValues}\n                                />\n                                <Termin\n                                    visibility={visibility}\n                                    // @ts-ignore Fiks denne\n                                    formValues={formValues}\n                                />\n\n                                <Block margin=\"xl\" textAlignCenter={true}>\n                                    <StepButtonWrapper>\n                                        <Button variant=\"secondary\" as={Link} to={getPreviousStepHref('omBarnet')}>\n                                            <FormattedMessage id=\"backlink.label\" />\n                                        </Button>\n                                        {allQuestionsAnswered && (\n                                            <Button type=\"submit\">{intlUtils(intl, 'søknad.gåVidere')}</Button>\n                                        )}\n                                    </StepButtonWrapper>\n                                </Block>\n                            </div>\n                        </OmBarnetFormComponents.Form>\n                    </Step>\n                );\n            }}\n        />\n    );\n};\n\nexport default OmBarnet;\n"],"names":["OmBarnetFormConfig","OmBarnetFormField","situasjon","adopsjonAvEktefellesBarn","YesOrNo","erBarnetFødt","antallBarn","hasValue","adopsjonsdato","kjønn","søkerAdopsjonAlene","fødselsdatoer","omsorgsovertakelse","termindato","terminbekreftelse","terminbekreftelsedato","omBarnetQuestionsConfig","Questions","cleanupOmBarnet","formData","cleanedData","validateEktefellensBarnAdopsjonDate","dato","intl","intlUtils","datepickerUtils","sisteMuligeDatoForOvertaOmsorg","validateOvertaOmsorgAdopsjonDate","validateFødselDate","etterDagensDato","sisteDatoBarnetKanVæreFødt","validateAdopsjonFødselDate","validateTerminDate","erMindreEnn3UkerSiden","sisteMuligeTermindato","valideringAvTerminbekreftelsesdato","utstedtDatoErIUke22","Født","visibility","formValues","useIntl","jsxs","Fragment","jsx","Block","OmBarnetFormComponents","getMessage","FieldArray","dayjs","value","AttachmentType","Skjemanummer","saveAttachment","attachment","config","url","Environment","axios","AttachmentApi","VALID_EXTENSIONS","getAttachmentFromFile","file","name","mapFileToAttachment","getPendingAttachmentFromFile","newAttachment","attachmentUploadHasFailed","pending","uploaded","fileExtensionIsValid","filename","ext","removeFn","FormikFileUploader","attachments","onFileInputClick","label","legend","description","otherProps","values","useFormikContext","uploadAttachment","response","setAttachmentPendingToFalse","uploadAttachments","allAttachments","replaceFn","updateAttachmentListElement","failedAttachments","updateFailedAttachments","atts","addPendingAttachmentToFieldArray","pushFn","FormikFileInput","files","push","replace","remove","AttachmentList","a","isAttachmentWithError","Termin","UtvidetInformasjon","FormattedMessage","PictureScanningGuide","terminBekreftelseDato","Adopsjon","_","index","fødselsDatoer","shouldResetInitialValues","OmBarnet","person","bem","bemUtils","navigate","useNavigate","useDocumentTitle","state","dispatch","useEngangsstønadContext","søkersituasjonValues","omBarnet","initialValues","initialOmBarnetValues","logAmplitudeEvent","PageKeys","onValidSubmit","actionCreator","allQuestionsAnswered","Step","onAvbrytSøknad","stepConfig","UnansweredQuestionsInfo","StepButtonWrapper","Button","Link","getPreviousStepHref","OmBarnet$1"],"mappings":"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"}