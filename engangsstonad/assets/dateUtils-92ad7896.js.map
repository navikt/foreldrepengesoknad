{"version":3,"file":"dateUtils-92ad7896.js","sources":["../../../../packages/utils/src/countryUtils.ts","../../../../packages/utils/src/dateUtils.ts"],"sourcesContent":["import * as countries from 'i18n-iso-countries';\nimport * as langNB from 'i18n-iso-countries/langs/nb.json';\nimport * as langNN from 'i18n-iso-countries/langs/nn.json';\n\ncountries.registerLocale(langNB);\ncountries.registerLocale(langNN);\n\n/** Kilde:\n * https://www.nav.no/no/person/flere-tema/arbeid-og-opphold-i-utlandet/relatert-informasjon/eos-landene\n */\nexport const filteredListEØSCountries = (countryOptionValue: string, shouldFilter?: boolean) => {\n    if (shouldFilter) {\n        switch (countryOptionValue) {\n            case 'BE': // Belgia\n            case 'BG': // Bulgaria\n            case 'DK': // Danmark\n            case 'EE': // Estland\n            case 'FI': // Finland\n            case 'FR': // Frankrike\n            case 'GR': // Hellas\n            case 'IE': // Irland\n            case 'IS': // Island\n            case 'IT': // Italia\n            case 'HR': // Kroatia\n            case 'CY': // Kypros\n            case 'LV': // Latvia\n            case 'LI': // Liechtenstein\n            case 'LT': // Litauen\n            case 'LU': // Luxembourg\n            case 'MT': // Malta\n            case 'NL': // Nederland\n            case 'NO': // Norge\n            case 'PL': // Polen\n            case 'PT': // Portugal\n            case 'RO': // Romania\n            case 'SK': // Slovakia\n            case 'SI': // Slovenia\n            case 'ES': // Spania\n            case 'CH': // Sveits\n            case 'SE': // Sverige\n            case 'CZ': // Tsjekkia\n            case 'DE': // Tyskland\n            case 'HU': // Ungarn\n            case 'AT': // Østerrike\n                return true;\n            default:\n                return false;\n        }\n    } else {\n        // Filter ut Antarktis\n        return countryOptionValue !== 'AQ';\n    }\n};\n\nexport const getLocaleKey = (locale: string): string => {\n    switch (locale) {\n        case 'nn':\n        case 'no-NN':\n            return 'nn';\n        default:\n            return 'nb';\n    }\n};\n\nexport const getCountryName = (alphaCode: string, locale: string): string => {\n    // i18n-iso-countries 7.5.0 bruker 'XKX' 'alpha3Code' for Kosovo. 'XXK' kode brukes i NAV.\n    // Endrer NAV sin landkode av Kosovo til i18n-iso-countries sin landkode for å hente riktig landsnavn.\n    if (alphaCode === 'XXK') {\n        alphaCode = 'XKX';\n    }\n    return countries.getName(alphaCode, getLocaleKey(locale));\n};\n\nexport const getAlpha3Code = (alpha2Code: string) => {\n    const countryAlpha3Code = countries.alpha2ToAlpha3(alpha2Code).toUpperCase();\n\n    // i18n-iso-countries 7.5.0 bruker 'XKX' 'alpha3Code' for Kosovo. 'XXK' kode brukes i NAV.\n    // Endrer i18n-iso-countries sin landkode til landkode som brukes i NAV for å sende riktig kode videre.\n    return countryAlpha3Code === 'XKX' ? 'XXK' : countryAlpha3Code;\n};\n\nexport const countryIsMemberOfEøsOrEfta = (isoCode: string) => {\n    let isoCodeToUse = isoCode.toUpperCase();\n    if (isoCodeToUse === 'XXK') {\n        isoCodeToUse = 'XKX';\n    }\n    isoCodeToUse = isoCodeToUse.length === 2 ? isoCodeToUse : countries.alpha3ToAlpha2(isoCodeToUse);\n    return filteredListEØSCountries(isoCodeToUse.toUpperCase(), true) === true;\n};\n\nexport const getCountries = () => countries;\n\nexport const createCountryOptions = (): Record<string, any> => {\n    const lang = 'nb';\n    const countries = getCountries();\n\n    const names: Array<[string, any]> = Object.entries(countries.getNames(lang));\n    return names\n        .sort((a: string[], b: string[]) => a[1].localeCompare(b[1], lang))\n        .filter((countryOptionValue: string[]) => filteredListEØSCountries(countryOptionValue[0], false));\n};\n","import dayjs from 'dayjs';\nimport { DATE_TODAY } from '@navikt/fp-constants';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\nimport isSameOrAfter from 'dayjs/plugin/isSameOrAfter';\nimport isBetween from 'dayjs/plugin/isBetween';\n\ndayjs.extend(isBetween);\ndayjs.extend(isSameOrBefore);\ndayjs.extend(isSameOrAfter);\n\nconst DATE_FORMAT = 'DD.MM.YYYY';\n\nexport const formatDate = (date: Date | string) => dayjs(date).format(DATE_FORMAT);\n\nexport const isAfterToday = (date: string): boolean => dayjs(date).isAfter(DATE_TODAY, 'day');\nexport const isBeforeToday = (date: string): boolean => dayjs(date).isBefore(DATE_TODAY, 'day');\nexport const isSameOrAfterToday = (date: string): boolean => dayjs(date).isSameOrAfter(DATE_TODAY, 'day');\nexport const isSameOrBeforeToday = (date: string): boolean => dayjs(date).isSameOrBefore(DATE_TODAY, 'day');\nexport const isToday = (date: string): boolean => dayjs(date).isSame(DATE_TODAY, 'day');\nexport const isDateWithinRange = (date: Date, minDate: Date, maxDate: Date): boolean =>\n    dayjs(date).isBetween(minDate, maxDate, 'day', '[]');\n"],"names":["countries.registerLocale","langNB","langNN","filteredListEØSCountries","countryOptionValue","shouldFilter","getCountries","countries","createCountryOptions","lang","a","b","dayjs","isBetween","isSameOrBefore","isSameOrAfter","DATE_FORMAT","formatDate","date","isBeforeToday","DATE_TODAY","isToday","isDateWithinRange","minDate","maxDate"],"mappings":"uGAIAA,iBAAyBC,CAAM,EAC/BD,iBAAyBE,CAAM,EAKlB,MAAAC,EAA2B,CAACC,EAA4BC,IAA2B,CAC5F,GAAIA,EACA,OAAQD,EAAoB,CACxB,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACL,IAAK,KACM,MAAA,GACX,QACW,MAAA,EACf,KAGA,QAAOA,IAAuB,IAEtC,EAsCaE,EAAe,IAAMC,EAErBC,EAAuB,IAA2B,CAC3D,MAAMC,EAAO,KACPF,EAAYD,IAGX,OAD6B,OAAO,QAAQC,EAAU,SAASE,CAAI,CAAC,EAEtE,KAAK,CAACC,EAAaC,IAAgBD,EAAE,CAAC,EAAE,cAAcC,EAAE,CAAC,EAAGF,CAAI,CAAC,EACjE,OAAQL,GAAiCD,EAAyBC,EAAmB,CAAC,EAAG,EAAK,CAAC,CACxG,EC9FAQ,EAAM,OAAOC,CAAS,EACtBD,EAAM,OAAOE,CAAc,EAC3BF,EAAM,OAAOG,CAAa,EAE1B,MAAMC,EAAc,aAEPC,EAAcC,GAAwBN,EAAMM,CAAI,EAAE,OAAOF,CAAW,EAGpEG,EAAiBD,GAA0BN,EAAMM,CAAI,EAAE,SAASE,EAAY,KAAK,EAGjFC,EAAWH,GAA0BN,EAAMM,CAAI,EAAE,OAAOE,EAAY,KAAK,EACzEE,EAAoB,CAACJ,EAAYK,EAAeC,IACzDZ,EAAMM,CAAI,EAAE,UAAUK,EAASC,EAAS,MAAO,IAAI"}