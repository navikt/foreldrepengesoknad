{"version":3,"file":"TidligereUtenlandsoppholdSteg-b45d8a95.js","sources":["../../src/sider/steg/utenlandsoppholdTidligere/valideringsregler.ts","../../src/sider/steg/utenlandsoppholdTidligere/TidligereUtenlandsoppholdPeriode.tsx","../../src/sider/steg/utenlandsoppholdTidligere/TidligereUtenlandsoppholdSteg.tsx"],"sourcesContent":["import { formatDateExtended } from '@navikt/fp-common';\nimport { isDateWithinRange } from '@navikt/fp-validation';\nimport dayjs from 'dayjs';\nimport { IntlShape } from 'react-intl';\n\n// TODO Flytt desse\n\nconst validateDateInRange = (\n    intl: IntlShape,\n    date: Date | undefined,\n    minDate: Date,\n    maxDate: Date,\n    isFomDate: boolean,\n) => {\n    if (date === undefined) {\n        if (isFomDate) {\n            return intl.formatMessage({ id: 'Valideringsfeil.FraOgMedDato.GyldigDato' });\n        }\n\n        return intl.formatMessage({ id: 'Valideringsfeil.TilOgMedDato.GyldigDato' });\n    }\n\n    if (!isDateWithinRange(date, minDate, maxDate)) {\n        return intl.formatMessage(\n            { id: 'Valideringsfeil.DateOutsideRange' },\n            {\n                fom: formatDateExtended(minDate),\n                tom: formatDateExtended(maxDate),\n            },\n        );\n    }\n\n    return null;\n};\n\nexport const validateFromDate = (\n    intl: IntlShape,\n    date: Date | undefined,\n    minDate: Date,\n    maxDate: Date,\n    toDate?: Date,\n) => {\n    const error = validateDateInRange(intl, date, minDate, maxDate, true);\n    if (error !== undefined) {\n        return error;\n    }\n    if (toDate && dayjs(date).isAfter(toDate, 'day')) {\n        // TODO Bør ha generell id\n        return intl.formatMessage({ id: 'Valideringsfeil.Utenlandsopphold.FørTilDato' });\n    }\n    return undefined;\n};\n\nexport const validateToDate = (\n    intl: IntlShape,\n    date: Date | undefined,\n    minDate: Date,\n    maxDate: Date,\n    fromDate?: Date,\n) => {\n    const error = validateDateInRange(intl, date, minDate, maxDate, false);\n    if (error !== undefined) {\n        return error;\n    }\n    if (fromDate && dayjs(date).isBefore(fromDate, 'day')) {\n        // TODO Bør ha generell id\n        return intl.formatMessage({ id: 'Valideringsfeil.Utenlandsopphold.EtterFraDato' });\n    }\n    return undefined;\n};\n","import { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport dayjs from 'dayjs';\nimport { useFormContext } from 'react-hook-form';\nimport { TrashIcon } from '@navikt/aksel-icons';\nimport { Button, VStack } from '@navikt/ds-react';\nimport { date1YearAgo, dateRangesCollide, dateToday } from '@navikt/fp-common';\n\nimport { createCountryOptions } from '@navikt/fp-utils';\nimport { Datepicker, Select } from '@navikt/fp-form-hooks';\nimport { validateFromDate, validateToDate } from './valideringsregler';\nimport { UtenlandsoppholdPeriode } from 'types/Utenlandsopphold';\nimport { useFormValidators } from '@navikt/fp-validation';\n\nconst validerPeriodeOverlapp = (\n    intl: IntlShape,\n    alleAndrePerioder: UtenlandsoppholdPeriode[],\n    fom: string,\n    tom: string,\n): string | null => {\n    const dateRanges = alleAndrePerioder.map((u) => ({\n        from: dayjs(u.fom).toDate(),\n        to: dayjs(u.tom).toDate(),\n    }));\n\n    const allDateRanges = dateRanges.concat({\n        from: dayjs(fom).toDate(),\n        to: dayjs(tom).toDate(),\n    });\n\n    if (dateRangesCollide(allDateRanges)) {\n        return intl.formatMessage({\n            id: 'TidligereUtenlandsoppholdSteg.Valideringsfeil.Utenlandsopphold.Overlapp',\n        });\n    }\n    return null;\n};\n\ninterface OwnProps {\n    index: number;\n    fjernOpphold: (index: number) => void;\n}\n\nconst TidligereUtenlandsoppholdPanel: React.FunctionComponent<OwnProps> = ({ index, fjernOpphold }) => {\n    const intl = useIntl();\n    const {\n        isRequired,\n        date: { isDatesNotTheSame },\n    } = useFormValidators();\n\n    const {\n        watch,\n        trigger,\n        formState: { isSubmitted },\n    } = useFormContext<{ utenlandsoppholdSiste12Mnd: UtenlandsoppholdPeriode[] }>();\n\n    const alleAndreUtenlandsopphold = watch(`utenlandsoppholdSiste12Mnd`).filter((_u, i) => i !== index);\n    const fom = watch(`utenlandsoppholdSiste12Mnd.${index}.fom`);\n    const tom = watch(`utenlandsoppholdSiste12Mnd.${index}.tom`);\n\n    const minDateFom = dayjs(date1YearAgo).toDate();\n    const maxDateFom = tom ? dayjs(tom).toDate() : dayjs(dateToday).toDate();\n\n    const minDateTom = fom ? dayjs(fom).toDate() : dayjs(date1YearAgo).toDate();\n    const maxDateTom = dayjs(dateToday).toDate();\n\n    return (\n        <VStack gap=\"5\" align=\"start\">\n            <Select\n                name={`utenlandsoppholdSiste12Mnd.${index}.landkode`}\n                label={<FormattedMessage id=\"TidligereUtenlandsoppholdSteg.Spørsmål.HvilketLandHarDuBoddI\" />}\n                validate={[isRequired('TidligereUtenlandsoppholdSteg.LeggTilUtenlandsopphold.LandDuHarBoddIPåkrevd')]}\n            >\n                {createCountryOptions().map((o: Record<string, any>) => (\n                    <option key={o[0]} value={o[0]}>\n                        {o[1]}\n                    </option>\n                ))}\n            </Select>\n            <Datepicker\n                name={`utenlandsoppholdSiste12Mnd.${index}.fom`}\n                label={<FormattedMessage id=\"TidligereUtenlandsoppholdSteg.LeggTilUtenlandsopphold.Fraogmed\" />}\n                minDate={minDateFom}\n                maxDate={maxDateFom}\n                validate={[\n                    isRequired('TidligereUtenlandsoppholdSteg.LeggTilUtenlandsopphold.LandFomDuSkalBoIPåkreved'),\n                    isDatesNotTheSame('TidligereUtenlandsoppholdSteg.FomErLikTom', tom),\n                    (fomValue) => {\n                        //TODO Del opp denne funksjonen\n                        return validateFromDate(\n                            intl,\n                            dayjs(fomValue).toDate(),\n                            minDateFom,\n                            maxDateFom,\n                            dayjs(tom).toDate(),\n                        );\n                    },\n                    (fomValue) => {\n                        return validerPeriodeOverlapp(intl, alleAndreUtenlandsopphold, fomValue, tom);\n                    },\n                ]}\n                onChange={() => isSubmitted && trigger()}\n            />\n            <Datepicker\n                name={`utenlandsoppholdSiste12Mnd.${index}.tom`}\n                label={<FormattedMessage id=\"TidligereUtenlandsoppholdSteg.LeggTilUtenlandsopphold.Tilogmed\" />}\n                minDate={minDateTom}\n                maxDate={maxDateTom}\n                validate={[\n                    isRequired('TidligereUtenlandsoppholdSteg.LeggTilUtenlandsopphold.LandTomDuHarBoddIPåkreved'),\n                    isDatesNotTheSame('TidligereUtenlandsoppholdSteg.TomErLikFom', fom),\n                    (tomValue) => {\n                        //TODO Del opp denne funksjonen\n                        return validateToDate(\n                            intl,\n                            dayjs(tomValue).toDate(),\n                            minDateTom,\n                            maxDateTom,\n                            dayjs(fom).toDate(),\n                        );\n                    },\n                    (tomValue) => {\n                        return validerPeriodeOverlapp(intl, alleAndreUtenlandsopphold, fom, tomValue);\n                    },\n                ]}\n                onChange={() => isSubmitted && trigger()}\n            />\n            {index > 0 && (\n                <Button\n                    type=\"button\"\n                    variant=\"tertiary\"\n                    size=\"small\"\n                    icon={<TrashIcon aria-hidden />}\n                    onClick={() => fjernOpphold(index)}\n                >\n                    <FormattedMessage id=\"TidligereUtenlandsoppholdSteg.Knapp.SlettOpphold\" />\n                </Button>\n            )}\n        </VStack>\n    );\n};\n\nexport default TidligereUtenlandsoppholdPanel;\n","import { Fragment, useCallback, useMemo } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useFieldArray, useForm } from 'react-hook-form';\nimport { PlusIcon } from '@navikt/aksel-icons';\nimport { Button, VStack } from '@navikt/ds-react';\nimport { Step } from '@navikt/fp-common';\nimport { notEmpty } from '@navikt/fp-validation';\nimport { ErrorSummaryHookForm, StepButtonsHookForm, Form } from '@navikt/fp-form-hooks';\n\nimport useEsNavigator from 'appData/useEsNavigator';\nimport { Path } from 'appData/paths';\nimport { EsDataType, useEsStateData, useEsStateSaveFn } from 'appData/EsDataContext';\nimport useStepData from 'appData/useStepData';\nimport { UtenlandsoppholdTidligere, UtenlandsoppholdPeriode } from 'types/Utenlandsopphold';\nimport TidligereUtenlandsoppholdPeriode from './TidligereUtenlandsoppholdPeriode';\n\nconst DEFAULT_PERIODE = {\n    fom: '',\n    tom: '',\n    landkode: '',\n} as UtenlandsoppholdPeriode;\nconst DEFAULT_FORM_VALUES = {\n    utenlandsoppholdSiste12Mnd: [DEFAULT_PERIODE],\n} as UtenlandsoppholdTidligere;\n\nconst TidligereUtenlandsoppholdSteg: React.FunctionComponent = () => {\n    const intl = useIntl();\n\n    const stepData = useStepData();\n    const navigator = useEsNavigator();\n\n    const utenlandsopphold = notEmpty(useEsStateData(EsDataType.UTENLANDSOPPHOLD));\n    const sisteUtenlandsopphold = useEsStateData(EsDataType.UTENLANDSOPPHOLD_TIDLIGERE);\n    const lagreTidligereUtenlandsopphold = useEsStateSaveFn(EsDataType.UTENLANDSOPPHOLD_TIDLIGERE);\n\n    const defaultValues = useMemo(() => sisteUtenlandsopphold || DEFAULT_FORM_VALUES, []);\n    const formMethods = useForm<UtenlandsoppholdTidligere>({\n        defaultValues,\n    });\n    const { fields, append, remove } = useFieldArray({\n        name: 'utenlandsoppholdSiste12Mnd',\n        control: formMethods.control,\n    });\n\n    const leggTilOpphold = useCallback(() => {\n        append(DEFAULT_PERIODE);\n    }, [append]);\n    const fjernOpphold = useCallback(\n        (index: number) => {\n            remove(index);\n        },\n        [remove],\n    );\n\n    const lagre = useCallback((formValues: UtenlandsoppholdTidligere) => {\n        lagreTidligereUtenlandsopphold(formValues);\n        navigator.goToNextStep(\n            utenlandsopphold.skalBoUtenforNorgeNeste12Mnd ? Path.SENERE_UTENLANDSOPPHOLD : Path.OPPSUMMERING,\n        );\n    }, []);\n\n    return (\n        <Step\n            bannerTitle={intl.formatMessage({ id: 'Søknad.Pageheading' })}\n            pageTitle={intl.formatMessage({ id: 'TidligereUtenlandsoppholdSteg.Tidligere' })}\n            onCancel={navigator.avbrytSøknad}\n            steps={stepData.stepConfig}\n            activeStepId={stepData.activeStepId}\n            useNoTempSavingText\n        >\n            <Form formMethods={formMethods} onSubmit={lagre}>\n                <VStack gap=\"10\">\n                    <ErrorSummaryHookForm />\n                    <VStack gap=\"10\" align=\"start\">\n                        {fields.map((field, index) => (\n                            <Fragment key={field.id}>\n                                <TidligereUtenlandsoppholdPeriode index={index} fjernOpphold={fjernOpphold} />\n                                {fields.length > 1 && <hr style={{ width: '100%' }} color=\"#99C4DD\" />}\n                            </Fragment>\n                        ))}\n                        <Button\n                            type=\"button\"\n                            variant=\"secondary\"\n                            size=\"small\"\n                            icon={<PlusIcon aria-hidden />}\n                            onClick={leggTilOpphold}\n                        >\n                            <FormattedMessage id=\"TidligereUtenlandsoppholdSteg.Knapp.LeggTilLand\" />\n                        </Button>\n                    </VStack>\n                    <StepButtonsHookForm<UtenlandsoppholdTidligere>\n                        goToPreviousStep={navigator.goToPreviousDefaultStep}\n                        saveDataOnPreviousClick={lagreTidligereUtenlandsopphold}\n                    />\n                </VStack>\n            </Form>\n        </Step>\n    );\n};\n\nexport default TidligereUtenlandsoppholdSteg;\n"],"names":["validateDateInRange","intl","date","minDate","maxDate","isFomDate","isDateWithinRange","formatDateExtended","validateFromDate","toDate","error","dayjs","validateToDate","fromDate","validerPeriodeOverlapp","alleAndrePerioder","fom","tom","allDateRanges","u","dateRangesCollide","TidligereUtenlandsoppholdPanel","index","fjernOpphold","useIntl","isRequired","isDatesNotTheSame","useFormValidators","watch","trigger","isSubmitted","useFormContext","alleAndreUtenlandsopphold","_u","i","minDateFom","date1YearAgo","maxDateFom","dateToday","minDateTom","maxDateTom","jsxs","VStack","jsx","Select","FormattedMessage","createCountryOptions","o","Datepicker","fomValue","tomValue","Button","TrashIcon","DEFAULT_PERIODE","DEFAULT_FORM_VALUES","TidligereUtenlandsoppholdSteg","stepData","useStepData","navigator","useEsNavigator","utenlandsopphold","notEmpty","useEsStateData","EsDataType","sisteUtenlandsopphold","lagreTidligereUtenlandsopphold","useEsStateSaveFn","defaultValues","useMemo","formMethods","useForm","fields","append","remove","useFieldArray","leggTilOpphold","useCallback","lagre","formValues","Path","Step","Form","ErrorSummaryHookForm","field","Fragment","TidligereUtenlandsoppholdPeriode","PlusIcon","StepButtonsHookForm","TidligereUtenlandsoppholdSteg$1"],"mappings":"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"}