{"version":3,"file":"OppsummeringSteg-4a27ca1a.js","sources":["../../src/types/Dokumentasjon.ts","../../src/sider/steg/oppsummering/Oppsummeringspunkt.tsx","../../src/sider/steg/oppsummering/OmBarnetOppsummering.tsx","../../src/sider/steg/oppsummering/LandOppsummering.tsx","../../src/sider/steg/oppsummering/UtenlandsoppholdOppsummering.tsx","../../src/sider/steg/oppsummering/OppsummeringSteg.tsx"],"sourcesContent":["import { Attachment } from 'fpcommon/uploader/typer/Attachment';\n\ntype Vedlegg = {\n    vedlegg: Attachment[];\n};\n\nexport type TerminDokumentasjon = {\n    terminbekreftelsedato: string;\n} & Vedlegg;\n\nexport type AdopsjonDokumentasjon = Vedlegg;\n\ntype Dokumentasjon = TerminDokumentasjon | AdopsjonDokumentasjon;\n\nexport default Dokumentasjon;\n\nexport const erTerminDokumentasjon = (dokumentasjon: Dokumentasjon): dokumentasjon is TerminDokumentasjon => {\n    if ((dokumentasjon as TerminDokumentasjon).terminbekreftelsedato) {\n        return true;\n    }\n    return false;\n};\n","import { ReactNode, useCallback, useState } from 'react';\nimport { Accordion, Heading } from '@navikt/ds-react';\n\nimport './oppsummeringspunkt.less';\n\ninterface Props {\n    tittel: string;\n    children: ReactNode;\n}\n\nconst Oppsummeringspunkt = ({ tittel, children }: Props) => {\n    const [isOpen, toggleOpen] = useState(false);\n    const toggle = useCallback(() => toggleOpen((open) => !open), []);\n\n    return (\n        <Accordion.Item>\n            <Accordion.Header className={isOpen ? 'accordian_header' : undefined} onClick={toggle}>\n                <Heading level=\"2\" size=\"small\">\n                    {tittel}\n                </Heading>\n            </Accordion.Header>\n            <Accordion.Content className=\"content_margin\">{children}</Accordion.Content>\n        </Accordion.Item>\n    );\n};\n\nexport default Oppsummeringspunkt;\n","import { FormattedMessage, useIntl } from 'react-intl';\nimport { formatDate } from '@navikt/fp-common';\nimport { BodyLong, BodyShort, HStack, Label, VStack } from '@navikt/ds-react';\nimport AttachmentList from 'fpcommon/uploader/liste/AttachmentList';\nimport { notEmpty } from 'fpcommon/validering/valideringUtil';\nimport { OmBarnet, erAdopsjon, erBarnetFødt, erBarnetIkkeFødt } from 'types/OmBarnet';\nimport Dokumentasjon, { erTerminDokumentasjon } from 'types/Dokumentasjon';\n\ninterface Props {\n    omBarnet: OmBarnet;\n    dokumentasjon?: Dokumentasjon;\n}\n\nconst OmBarnetOppsummering: React.FunctionComponent<Props> = ({ omBarnet, dokumentasjon }) => {\n    const intl = useIntl();\n\n    const harAdoptert = erAdopsjon(omBarnet);\n    const harTermin = erBarnetIkkeFødt(omBarnet);\n    const harFødt = erBarnetFødt(omBarnet);\n\n    let antallBarnSummaryText;\n    if (omBarnet.antallBarn === 1) {\n        antallBarnSummaryText = intl.formatMessage({ id: 'oppsummering.omBarnet.ettBarn' });\n    } else if (omBarnet.antallBarn === 2 && !harAdoptert) {\n        antallBarnSummaryText = intl.formatMessage({ id: 'oppsummering.omBarnet.tvillinger' });\n    } else if (omBarnet.antallBarn === 2 && harAdoptert) {\n        antallBarnSummaryText = intl.formatMessage({ id: 'oppsummering.omBarnet.toBarn' });\n    } else {\n        antallBarnSummaryText = intl.formatMessage(\n            { id: 'oppsummering.omBarnet.flereBarn' },\n            {\n                antall: omBarnet.antallBarn,\n            },\n        );\n    }\n\n    return (\n        <VStack gap=\"4\">\n            <HStack gap=\"2\">\n                <BodyShort>\n                    <FormattedMessage id={'oppsummering.text.soknadenGjelder'} />\n                </BodyShort>\n                <BodyShort>{antallBarnSummaryText}</BodyShort>\n            </HStack>\n            {harAdoptert && (\n                <>\n                    <HStack gap=\"2\">\n                        <BodyShort>\n                            <FormattedMessage id={'oppsummering.text.medAdopsjonsdato'} />\n                        </BodyShort>\n                        <BodyShort>{formatDate(omBarnet.adopsjonsdato!)}</BodyShort>\n                    </HStack>\n                    <HStack gap=\"2\">\n                        <BodyShort>\n                            <FormattedMessage\n                                id={\n                                    omBarnet.fødselsdatoer.length > 1\n                                        ? 'oppsummering.text.medFødselsdatoer'\n                                        : 'oppsummering.text.medFødselsdato'\n                                }\n                            />\n                        </BodyShort>\n                        <BodyLong>\n                            {omBarnet.fødselsdatoer\n                                .map((_, index) => {\n                                    return formatDate(omBarnet.fødselsdatoer[index].dato);\n                                })\n                                .join(', ')}\n                        </BodyLong>\n                    </HStack>\n                    <Label>\n                        <FormattedMessage id={'oppsummering.text.vedlagtOmsorgsovertakelseBekreftelse'} />\n                    </Label>\n                    <AttachmentList attachments={notEmpty(dokumentasjon).vedlegg} />\n                </>\n            )}\n            {harFødt && (\n                <HStack gap=\"2\">\n                    <BodyShort>\n                        <FormattedMessage id={'oppsummering.text.medFødselsdato'} />\n                    </BodyShort>\n                    <BodyShort>{formatDate(omBarnet.fødselsdatoer[0].dato)}</BodyShort>\n                </HStack>\n            )}\n            {harTermin && dokumentasjon && erTerminDokumentasjon(dokumentasjon) && (\n                <>\n                    <HStack gap=\"2\">\n                        <BodyShort>\n                            <FormattedMessage id={'oppsummering.text.medTermindato'} />\n                        </BodyShort>\n                        <BodyShort>{formatDate(omBarnet.termindato)}</BodyShort>\n                    </HStack>\n                    <HStack gap=\"2\">\n                        <BodyShort>\n                            <FormattedMessage id={'oppsummering.text.somErDatert'} />\n                        </BodyShort>\n                        <BodyShort>{formatDate(dokumentasjon.terminbekreftelsedato)}</BodyShort>\n                    </HStack>\n                    <Label>\n                        <FormattedMessage id={'oppsummering.text.vedlagtTerminbekreftelse'} />\n                    </Label>\n                    <AttachmentList attachments={dokumentasjon.vedlegg} />\n                </>\n            )}\n        </VStack>\n    );\n};\nexport default OmBarnetOppsummering;\n","import * as countries from 'i18n-iso-countries';\nimport { formatDate } from '@navikt/fp-common';\nimport { BodyLong } from '@navikt/ds-react';\nimport { UtenlandsoppholdPeriode } from 'types/Utenlandsopphold';\n\ninterface Props {\n    utenlandsoppholdListe: UtenlandsoppholdPeriode[];\n}\n\nconst LandOppsummering: React.FunctionComponent<Props> = ({ utenlandsoppholdListe }) => (\n    <ul className=\"landOppsummering\">\n        {utenlandsoppholdListe.map((opphold) => (\n            <div key={`${opphold.landkode}${opphold.fom}`} style={{ display: 'flex', justifyContent: 'space-between' }}>\n                <BodyLong>{countries.getName(opphold.landkode, 'nb')}</BodyLong>\n                <BodyLong>\n                    {formatDate(opphold.fom)} - {formatDate(opphold.tom)}\n                </BodyLong>\n            </div>\n        ))}\n    </ul>\n);\n\nexport default LandOppsummering;\n","import { FormattedMessage } from 'react-intl';\nimport dayjs from 'dayjs';\nimport { BodyShort, HStack, Label, VStack } from '@navikt/ds-react';\nimport LandOppsummering from './LandOppsummering';\nimport { OmBarnet, erBarnetFødt, erBarnetIkkeFødt } from 'types/OmBarnet';\nimport {\n    UtenlandsoppholdPeriode,\n    Utenlandsopphold,\n    UtenlandsoppholdNeste,\n    UtenlandsoppholdSiste,\n} from 'types/Utenlandsopphold';\nimport { notEmpty } from 'fpcommon/validering/valideringUtil';\n\nconst erDatoITidsperiode = (dato: string, fom: string, tom: string) => {\n    return dayjs(dato).isBetween(dayjs(fom), dayjs(tom), 'day', '[]');\n};\n\nconst erFamiliehendelsedatoIEnUtenlandsoppholdPeriode = (\n    familiehendelsedato: string,\n    utenlandsoppholdSiste12Mnd: UtenlandsoppholdPeriode[] = [],\n    utenlandsoppholdNeste12Mnd: UtenlandsoppholdPeriode[] = [],\n) => {\n    return (\n        utenlandsoppholdSiste12Mnd.some((tidligereOpphold) =>\n            erDatoITidsperiode(familiehendelsedato, tidligereOpphold.fom, tidligereOpphold.tom),\n        ) ||\n        utenlandsoppholdNeste12Mnd.some((senereOpphold) =>\n            erDatoITidsperiode(familiehendelsedato, senereOpphold.fom, senereOpphold.tom),\n        )\n    );\n};\n\ninterface Props {\n    omBarnet: OmBarnet;\n    utenlandsopphold: Utenlandsopphold;\n    utenlandsoppholdSiste?: UtenlandsoppholdSiste;\n    utenlandsoppholdNeste?: UtenlandsoppholdNeste;\n}\n\nconst UtenlandsoppholdOppsummering: React.FunctionComponent<Props> = ({\n    omBarnet,\n    utenlandsopphold,\n    utenlandsoppholdSiste,\n    utenlandsoppholdNeste,\n}) => {\n    const harTermin = erBarnetIkkeFødt(omBarnet);\n    const harFødt = erBarnetFødt(omBarnet);\n\n    return (\n        <VStack gap=\"4\">\n            {utenlandsopphold.harBoddUtenforNorgeSiste12Mnd === false ? (\n                <HStack gap=\"2\">\n                    <BodyShort>\n                        <FormattedMessage id={'oppsummering.text.boddSisteTolv'} />\n                    </BodyShort>\n                    <BodyShort>\n                        <FormattedMessage id={'norge'} />\n                    </BodyShort>\n                </HStack>\n            ) : (\n                <div>\n                    <Label className=\"textWithLabel__label\">\n                        <FormattedMessage id={'oppsummering.text.boddSisteTolv'} />\n                    </Label>\n                    <LandOppsummering\n                        utenlandsoppholdListe={notEmpty(utenlandsoppholdSiste).utenlandsoppholdSiste12Mnd}\n                    />\n                </div>\n            )}\n            {utenlandsopphold.skalBoUtenforNorgeNeste12Mnd === false ? (\n                <HStack gap=\"2\">\n                    <BodyShort>\n                        <FormattedMessage id=\"oppsummering.text.neste12mnd\" />\n                    </BodyShort>\n                    <BodyShort>\n                        <FormattedMessage id=\"medlemmskap.radiobutton.boNorge\" />\n                    </BodyShort>\n                </HStack>\n            ) : (\n                <div>\n                    <Label className=\"textWithLabel__label\">\n                        <FormattedMessage id=\"oppsummering.text.neste12mnd\" />\n                    </Label>\n                    <LandOppsummering\n                        utenlandsoppholdListe={notEmpty(utenlandsoppholdNeste).utenlandsoppholdNeste12Mnd}\n                    />\n                </div>\n            )}\n            {harTermin && (\n                <HStack gap=\"2\">\n                    <BodyShort>\n                        <FormattedMessage id={'oppsummering.text.ogKommerPåFødselstidspunktet'} />\n                    </BodyShort>\n                    <BodyShort>\n                        <FormattedMessage\n                            id={\n                                erFamiliehendelsedatoIEnUtenlandsoppholdPeriode(\n                                    omBarnet.termindato!,\n                                    utenlandsoppholdSiste?.utenlandsoppholdSiste12Mnd,\n                                    utenlandsoppholdNeste?.utenlandsoppholdNeste12Mnd,\n                                )\n                                    ? 'medlemmskap.radiobutton.vareUtlandet'\n                                    : 'medlemmskap.radiobutton.vareNorge'\n                            }\n                        />\n                    </BodyShort>\n                </HStack>\n            )}\n            {harFødt && (\n                <HStack gap=\"2\">\n                    <BodyShort>\n                        <FormattedMessage id={'oppsummering.text.varPåFødselstidspunktet'} />\n                    </BodyShort>\n                    <BodyShort>\n                        <FormattedMessage\n                            id={\n                                erFamiliehendelsedatoIEnUtenlandsoppholdPeriode(\n                                    omBarnet.fødselsdatoer[0].dato,\n                                    utenlandsoppholdSiste?.utenlandsoppholdSiste12Mnd,\n                                    utenlandsoppholdNeste?.utenlandsoppholdNeste12Mnd,\n                                )\n                                    ? 'oppsummering.utenlandsopphold.iUtlandet'\n                                    : 'oppsummering.utenlandsopphold.iNorge'\n                            }\n                        />\n                    </BodyShort>\n                </HStack>\n            )}\n        </VStack>\n    );\n};\n\nexport default UtenlandsoppholdOppsummering;\n","import { useCallback, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { Step } from '@navikt/fp-common';\nimport { Accordion, BodyShort, ConfirmationPanel, VStack } from '@navikt/ds-react';\n\nimport Person from 'types/Person';\nimport Oppsummeringspunkt from './Oppsummeringspunkt';\nimport OmBarnetOppsummering from './OmBarnetOppsummering';\nimport UtenlandsoppholdOppsummering from './UtenlandsoppholdOppsummering';\nimport useEsNavigator from 'appData/useEsNavigator';\nimport useStepData from 'appData/useStepData';\nimport { EsDataType, useEsStateData } from 'appData/EsDataContext';\nimport { OmBarnet } from 'types/OmBarnet';\nimport { Utenlandsopphold, UtenlandsoppholdNeste, UtenlandsoppholdSiste } from 'types/Utenlandsopphold';\nimport { notEmpty } from 'fpcommon/validering/valideringUtil';\nimport StepButtons from 'fpcommon/components/StepButtons';\nimport Dokumentasjon from 'types/Dokumentasjon';\n\nconst fullNameFormat = (fornavn: string, etternavn: string, mellomnavn?: string) => {\n    return mellomnavn ? `${fornavn} ${mellomnavn} ${etternavn}` : `${fornavn} ${etternavn}`;\n};\n\nexport interface Props {\n    person: Person;\n    sendSøknad: (\n        omBarnet: OmBarnet,\n        utenlandsopphold: Utenlandsopphold,\n        dokumentasjon?: Dokumentasjon,\n        sisteUtenlandsopphold?: UtenlandsoppholdSiste,\n        nesteUtenlandsopphold?: UtenlandsoppholdNeste,\n    ) => void;\n}\n\nconst OppsummeringSteg: React.FunctionComponent<Props> = ({ person, sendSøknad }) => {\n    const intl = useIntl();\n\n    const stepData = useStepData();\n    const navigator = useEsNavigator();\n\n    const omBarnet = notEmpty(useEsStateData(EsDataType.OM_BARNET));\n    const utenlandsopphold = notEmpty(useEsStateData(EsDataType.UTENLANDSOPPHOLD));\n    const dokumentasjon = useEsStateData(EsDataType.DOKUMENTASJON);\n    const sisteUtenlandsopphold = useEsStateData(EsDataType.UTENLANDSOPPHOLD_SISTE);\n    const nesteUtenlandsopphold = useEsStateData(EsDataType.UTENLANDSOPPHOLD_NESTE);\n\n    const [isChecked, setChecked] = useState(false);\n    const [isError, setIsError] = useState(false);\n\n    const send = useCallback(() => {\n        if (!isChecked) {\n            setIsError(true);\n        } else {\n            sendSøknad(omBarnet, utenlandsopphold, dokumentasjon, sisteUtenlandsopphold, nesteUtenlandsopphold);\n            navigator.goToNextDefaultStep();\n        }\n    }, [isChecked]);\n\n    return (\n        <Step\n            bannerTitle={intl.formatMessage({ id: 'Søknad.Pageheading' })}\n            pageTitle={intl.formatMessage({ id: 'søknad.oppsummering' })}\n            onCancel={navigator.avbrytSøknad}\n            steps={stepData.stepConfig}\n            activeStepId={stepData.activeStepId}\n            useNoTempSavingText\n        >\n            <VStack gap=\"10\">\n                <Accordion>\n                    <Oppsummeringspunkt tittel={intl.formatMessage({ id: 'søknad.omDeg' })}>\n                        <VStack gap=\"4\">\n                            <BodyShort>{fullNameFormat(person.fornavn, person.etternavn, person.mellomnavn)}</BodyShort>\n                            <BodyShort>{person.fnr}</BodyShort>\n                        </VStack>\n                    </Oppsummeringspunkt>\n                    <Oppsummeringspunkt tittel={intl.formatMessage({ id: 'OmBarnetSteg.OmBarnet' })}>\n                        <OmBarnetOppsummering omBarnet={omBarnet} dokumentasjon={dokumentasjon} />\n                    </Oppsummeringspunkt>\n                    <Oppsummeringspunkt tittel={intl.formatMessage({ id: 'søknad.utenlandsopphold' })}>\n                        <UtenlandsoppholdOppsummering\n                            omBarnet={omBarnet}\n                            utenlandsopphold={utenlandsopphold}\n                            utenlandsoppholdNeste={nesteUtenlandsopphold}\n                            utenlandsoppholdSiste={sisteUtenlandsopphold}\n                        />\n                    </Oppsummeringspunkt>\n                </Accordion>\n                <ConfirmationPanel\n                    label={intl.formatMessage({ id: 'oppsummering.text.samtykke' })}\n                    onChange={() => setChecked((state) => !state)}\n                    checked={isChecked}\n                    error={\n                        isError &&\n                        !isChecked &&\n                        intl.formatMessage({ id: 'OppsummeringSteg.Validering.BekrefteOpplysninger' })\n                    }\n                />\n                <StepButtons\n                    goToPreviousStep={navigator.goToPreviousDefaultStep}\n                    nextButtonText=\"oppsummering.button.sendSøknad\"\n                    nextButtonOnClick={send}\n                />\n            </VStack>\n        </Step>\n    );\n};\n\nexport default OppsummeringSteg;\n"],"names":["erTerminDokumentasjon","dokumentasjon","Oppsummeringspunkt","tittel","children","isOpen","toggleOpen","useState","toggle","useCallback","open","jsxs","Accordion","jsx","Heading","OmBarnetOppsummering","omBarnet","intl","useIntl","harAdoptert","erAdopsjon","harTermin","erBarnetIkkeFødt","harFødt","erBarnetFødt","antallBarnSummaryText","VStack","HStack","BodyShort","FormattedMessage","Fragment","formatDate","BodyLong","_","index","Label","AttachmentList","notEmpty","LandOppsummering","utenlandsoppholdListe","opphold","countries.getName","erDatoITidsperiode","dato","fom","tom","dayjs","erFamiliehendelsedatoIEnUtenlandsoppholdPeriode","familiehendelsedato","utenlandsoppholdSiste12Mnd","utenlandsoppholdNeste12Mnd","tidligereOpphold","senereOpphold","UtenlandsoppholdOppsummering","utenlandsopphold","utenlandsoppholdSiste","utenlandsoppholdNeste","fullNameFormat","fornavn","etternavn","mellomnavn","OppsummeringSteg","person","sendSøknad","stepData","useStepData","navigator","useEsNavigator","useEsStateData","EsDataType","sisteUtenlandsopphold","nesteUtenlandsopphold","isChecked","setChecked","isError","setIsError","send","Step","ConfirmationPanel","state","StepButtons","OppsummeringSteg$1"],"mappings":"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"}