{"version":3,"file":"AppContainer.stories-639f997e.js","sources":["../../../../packages/utils/src/loginUtils.ts","../../src/appData/api.ts","../../../../packages/api/src/apiHooks.ts","../../../../node_modules/.pnpm/react-router-dom@6.15.0_react-dom@18.2.0_react@18.2.0/node_modules/react-router-dom/dist/index.js","../../../../packages/fp-common/src/common/utils/localeUtils.ts","../../src/Engangsstønad.tsx","../../src/AppContainer.tsx"],"sourcesContent":["export const redirect = (url: string) => {\n    window.location.href = url;\n};\n\nexport const redirectToLogin = (loginUrl: string) => {\n    redirect(loginUrl + '?redirect=' + window.location.origin);\n};\n","import axios, { AxiosResponse, AxiosError } from 'axios';\nimport { Locale } from '@navikt/fp-common';\nimport { redirectToLogin } from '@navikt/fp-utils';\nimport { notEmpty } from '@navikt/fp-validation';\nimport Environment from './Environment';\nimport { OmBarnet, erAdopsjon, erBarnetFødt, erBarnetIkkeFødt } from 'types/OmBarnet';\nimport {\n    Utenlandsopphold,\n    UtenlandsoppholdPeriode,\n    UtenlandsoppholdSenere,\n    UtenlandsoppholdTidligere,\n} from 'types/Utenlandsopphold';\nimport Kvittering from 'types/Kvittering';\nimport Dokumentasjon, { erTerminDokumentasjon } from 'types/Dokumentasjon';\n\n// TODO Flytt generell api-logikk til api-pakka\n\nexport const engangsstønadApi = axios.create({\n    baseURL: Environment.REST_API_URL,\n    withCredentials: true,\n});\n\nengangsstønadApi.interceptors.request.use((config) => {\n    config.withCredentials = true;\n    config.timeout = 60 * 1000;\n    return config;\n});\n\nengangsstønadApi.interceptors.response.use(\n    (response: AxiosResponse) => {\n        return response;\n    },\n    (error: AxiosError) => {\n        if (\n            error.response &&\n            error.response.status === 401 &&\n            error?.config?.url &&\n            !error.config.url.includes('/soknad')\n        ) {\n            redirectToLogin(Environment.LOGIN_URL);\n        }\n        return Promise.reject(error);\n    },\n);\n\nconst getPerson = () => {\n    return engangsstønadApi.get('/personinfo');\n};\n\nconst mapBarn = (omBarnet: OmBarnet, dokumentasjon?: Dokumentasjon) => {\n    if (erAdopsjon(omBarnet) || erBarnetFødt(omBarnet)) {\n        return {\n            ...omBarnet,\n            fødselsdatoer: omBarnet.fødselsdatoer.map((f) => f.dato),\n        };\n    }\n\n    if (erBarnetIkkeFødt(omBarnet) && dokumentasjon && erTerminDokumentasjon(dokumentasjon)) {\n        return { ...omBarnet, terminbekreftelsedato: dokumentasjon.terminbekreftelsedato };\n    }\n\n    throw Error('Det er feil i data om barnet');\n};\n\nconst mapBostedUtlandTilUtenlandsopphold = (perioder: UtenlandsoppholdPeriode[] = []) => {\n    return perioder.map((periode) => ({\n        land: periode.landkode,\n        tidsperiode: {\n            fom: periode.fom,\n            tom: periode.tom,\n        },\n    }));\n};\n\nconst sendSøknad =\n    (locale: Locale, setKvittering: (kvittering: Kvittering) => void) =>\n    async (\n        omBarnet: OmBarnet,\n        utenlandsopphold: Utenlandsopphold,\n        dokumentasjon?: Dokumentasjon,\n        tidligereUtenlandsopphold?: UtenlandsoppholdTidligere,\n        senereUtenlandsopphold?: UtenlandsoppholdSenere,\n    ) => {\n        notEmpty(utenlandsopphold);\n\n        //TODO Bør få vekk mappinga her. Bruk samme navngiving på variablane frontend og backend.\n        const søknad = {\n            barn: mapBarn(omBarnet, dokumentasjon),\n            type: 'engangsstønad',\n            erEndringssøknad: false,\n            informasjonOmUtenlandsopphold: {\n                iNorgeSiste12Mnd: utenlandsopphold.harBoddUtenforNorgeSiste12Mnd,\n                iNorgeNeste12Mnd: utenlandsopphold.skalBoUtenforNorgeNeste12Mnd,\n                tidligereOpphold: mapBostedUtlandTilUtenlandsopphold(\n                    tidligereUtenlandsopphold?.utenlandsoppholdSiste12Mnd,\n                ),\n                senereOpphold: mapBostedUtlandTilUtenlandsopphold(senereUtenlandsopphold?.utenlandsoppholdNeste12Mnd),\n            },\n            søker: {\n                språkkode: locale,\n            },\n            vedlegg: dokumentasjon?.vedlegg || [],\n        };\n\n        const response = await engangsstønadApi.post('/soknad', søknad, {\n            headers: {\n                'content-type': 'application/json;',\n            },\n        });\n        setKvittering(response.data);\n    };\n\nconst Api = { getPerson, sendSøknad };\nexport default Api;\n","import { useState, useEffect } from 'react';\nimport { AxiosResponse, AxiosError } from 'axios';\n\nexport const useRequest = <T>(request: () => Promise<AxiosResponse<any, any>>) => {\n    const [data, setData] = useState<T>();\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState<AxiosError<any> | null>(null);\n\n    useEffect(() => {\n        let ignore = false;\n        const fetch = async () => {\n            try {\n                setLoading(true);\n                const response = await request();\n                if (!ignore) {\n                    setData(response.data);\n                }\n            } catch (err: any) {\n                setError(err);\n            } finally {\n                setLoading(false);\n            }\n        };\n        fetch();\n        return () => {\n            ignore = true;\n        };\n    }, [request]);\n\n    return { data, loading, error };\n};\n","/**\n * React Router DOM v6.15.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport * as React from 'react';\nimport { UNSAFE_mapRouteProperties, Router, UNSAFE_NavigationContext, useHref, useResolvedPath, useLocation, UNSAFE_DataRouterStateContext, useNavigate, createPath, UNSAFE_useRouteId, UNSAFE_RouteContext, useMatches, useNavigation, unstable_useBlocker, UNSAFE_DataRouterContext } from 'react-router';\nexport { AbortedDeferredError, Await, MemoryRouter, Navigate, NavigationType, Outlet, Route, Router, RouterProvider, Routes, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, UNSAFE_LocationContext, UNSAFE_NavigationContext, UNSAFE_RouteContext, UNSAFE_useRouteId, createMemoryRouter, createPath, createRoutesFromChildren, createRoutesFromElements, defer, generatePath, isRouteErrorResponse, json, matchPath, matchRoutes, parsePath, redirect, redirectDocument, renderMatches, resolvePath, unstable_useBlocker, useActionData, useAsyncError, useAsyncValue, useHref, useInRouterContext, useLoaderData, useLocation, useMatch, useMatches, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useRoutes } from 'react-router';\nimport { stripBasename, UNSAFE_warning, createRouter, createBrowserHistory, createHashHistory, ErrorResponse, UNSAFE_invariant, joinPaths } from '@remix-run/router';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\nconst defaultMethod = \"get\";\nconst defaultEncType = \"application/x-www-form-urlencoded\";\nfunction isHtmlElement(object) {\n  return object != null && typeof object.tagName === \"string\";\n}\nfunction isButtonElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\nfunction isFormElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\nfunction isInputElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\nfunction shouldProcessLinkClick(event, target) {\n  return event.button === 0 && (\n  // Ignore everything but left clicks\n  !target || target === \"_self\") &&\n  // Let browser handle \"target=_blank\" etc.\n  !isModifiedEvent(event) // Ignore clicks with modifier keys\n  ;\n}\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nfunction createSearchParams(init) {\n  if (init === void 0) {\n    init = \"\";\n  }\n  return new URLSearchParams(typeof init === \"string\" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key) => {\n    let value = init[key];\n    return memo.concat(Array.isArray(value) ? value.map(v => [key, v]) : [[key, value]]);\n  }, []));\n}\nfunction getSearchParamsForLocation(locationSearch, defaultSearchParams) {\n  let searchParams = createSearchParams(locationSearch);\n  if (defaultSearchParams) {\n    // Use `defaultSearchParams.forEach(...)` here instead of iterating of\n    // `defaultSearchParams.keys()` to work-around a bug in Firefox related to\n    // web extensions. Relevant Bugzilla tickets:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1414602\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1023984\n    defaultSearchParams.forEach((_, key) => {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach(value => {\n          searchParams.append(key, value);\n        });\n      }\n    });\n  }\n  return searchParams;\n}\n// One-time check for submitter support\nlet _formDataSupportsSubmitter = null;\nfunction isFormDataSubmitterSupported() {\n  if (_formDataSupportsSubmitter === null) {\n    try {\n      new FormData(document.createElement(\"form\"),\n      // @ts-expect-error if FormData supports the submitter parameter, this will throw\n      0);\n      _formDataSupportsSubmitter = false;\n    } catch (e) {\n      _formDataSupportsSubmitter = true;\n    }\n  }\n  return _formDataSupportsSubmitter;\n}\nconst supportedFormEncTypes = new Set([\"application/x-www-form-urlencoded\", \"multipart/form-data\", \"text/plain\"]);\nfunction getFormEncType(encType) {\n  if (encType != null && !supportedFormEncTypes.has(encType)) {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"\\\"\" + encType + \"\\\" is not a valid `encType` for `<Form>`/`<fetcher.Form>` \" + (\"and will default to \\\"\" + defaultEncType + \"\\\"\")) : void 0;\n    return null;\n  }\n  return encType;\n}\nfunction getFormSubmissionInfo(target, basename) {\n  let method;\n  let action;\n  let encType;\n  let formData;\n  let body;\n  if (isFormElement(target)) {\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"enctype\")) || defaultEncType;\n    formData = new FormData(target);\n  } else if (isButtonElement(target) || isInputElement(target) && (target.type === \"submit\" || target.type === \"image\")) {\n    let form = target.form;\n    if (form == null) {\n      throw new Error(\"Cannot submit a <button> or <input type=\\\"submit\\\"> without a <form>\");\n    }\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"formaction\") || form.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"formmethod\") || form.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"formenctype\")) || getFormEncType(form.getAttribute(\"enctype\")) || defaultEncType;\n    // Build a FormData object populated from a form and submitter\n    formData = new FormData(form, target);\n    // If this browser doesn't support the `FormData(el, submitter)` format,\n    // then tack on the submitter value at the end.  This is a lightweight\n    // solution that is not 100% spec compliant.  For complete support in older\n    // browsers, consider using the `formdata-submitter-polyfill` package\n    if (!isFormDataSubmitterSupported()) {\n      let {\n        name,\n        type,\n        value\n      } = target;\n      if (type === \"image\") {\n        let prefix = name ? name + \".\" : \"\";\n        formData.append(prefix + \"x\", \"0\");\n        formData.append(prefix + \"y\", \"0\");\n      } else if (name) {\n        formData.append(name, value);\n      }\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\"Cannot submit element that is not <form>, <button>, or \" + \"<input type=\\\"submit|image\\\">\");\n  } else {\n    method = defaultMethod;\n    action = null;\n    encType = defaultEncType;\n    body = target;\n  }\n  // Send body for <Form encType=\"text/plain\" so we encode it into text\n  if (formData && encType === \"text/plain\") {\n    body = formData;\n    formData = undefined;\n  }\n  return {\n    action,\n    method: method.toLowerCase(),\n    encType,\n    formData,\n    body\n  };\n}\n\nconst _excluded = [\"onClick\", \"relative\", \"reloadDocument\", \"replace\", \"state\", \"target\", \"to\", \"preventScrollReset\"],\n  _excluded2 = [\"aria-current\", \"caseSensitive\", \"className\", \"end\", \"style\", \"to\", \"children\"],\n  _excluded3 = [\"reloadDocument\", \"replace\", \"state\", \"method\", \"action\", \"onSubmit\", \"submit\", \"relative\", \"preventScrollReset\"];\nfunction createBrowserRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createBrowserHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    mapRouteProperties: UNSAFE_mapRouteProperties\n  }).initialize();\n}\nfunction createHashRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createHashHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    mapRouteProperties: UNSAFE_mapRouteProperties\n  }).initialize();\n}\nfunction parseHydrationData() {\n  var _window;\n  let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = _extends({}, state, {\n      errors: deserializeErrors(state.errors)\n    });\n  }\n  return state;\n}\nfunction deserializeErrors(errors) {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new ErrorResponse(val.status, val.statusText, val.data, val.internal === true);\n    } else if (val && val.__type === \"Error\") {\n      // Attempt to reconstruct the right type of Error (i.e., ReferenceError)\n      if (val.__subType) {\n        let ErrorConstructor = window[val.__subType];\n        if (typeof ErrorConstructor === \"function\") {\n          try {\n            // @ts-expect-error\n            let error = new ErrorConstructor(val.message);\n            // Wipe away the client-side stack trace.  Nothing to fill it in with\n            // because we don't serialize SSR stack traces for security reasons\n            error.stack = \"\";\n            serialized[key] = error;\n          } catch (e) {\n            // no-op - fall through and create a normal Error\n          }\n        }\n      }\n      if (serialized[key] == null) {\n        let error = new Error(val.message);\n        // Wipe away the client-side stack trace.  Nothing to fill it in with\n        // because we don't serialize SSR stack traces for security reasons\n        error.stack = \"\";\n        serialized[key] = error;\n      }\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nfunction BrowserRouter(_ref) {\n  let {\n    basename,\n    children,\n    future,\n    window\n  } = _ref;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({\n      window,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nfunction HashRouter(_ref2) {\n  let {\n    basename,\n    children,\n    future,\n    window\n  } = _ref2;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({\n      window,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter(_ref3) {\n  let {\n    basename,\n    children,\n    future,\n    history\n  } = _ref3;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\nif (process.env.NODE_ENV !== \"production\") {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n/**\n * The public API for rendering a history-aware <a>.\n */\nconst Link = /*#__PURE__*/React.forwardRef(function LinkWithRef(_ref4, ref) {\n  let {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset\n    } = _ref4,\n    rest = _objectWithoutPropertiesLoose(_ref4, _excluded);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  // Rendered into <a href> for absolute URLs\n  let absoluteHref;\n  let isExternal = false;\n  if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\n    // Render the absolute href server- and client-side\n    absoluteHref = to;\n    // Only check for external origins client-side\n    if (isBrowser) {\n      try {\n        let currentUrl = new URL(window.location.href);\n        let targetUrl = to.startsWith(\"//\") ? new URL(currentUrl.protocol + to) : new URL(to);\n        let path = stripBasename(targetUrl.pathname, basename);\n        if (targetUrl.origin === currentUrl.origin && path != null) {\n          // Strip the protocol/origin/basename for same-origin absolute URLs\n          to = path + targetUrl.search + targetUrl.hash;\n        } else {\n          isExternal = true;\n        }\n      } catch (e) {\n        // We can't do external URL detection without a valid URL\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"<Link to=\\\"\" + to + \"\\\"> contains an invalid URL which will probably break \" + \"when clicked - please update to a valid URL path.\") : void 0;\n      }\n    }\n  }\n  // Rendered into <a href> for relative URLs\n  let href = useHref(to, {\n    relative\n  });\n  let internalOnClick = useLinkClickHandler(to, {\n    replace,\n    state,\n    target,\n    preventScrollReset,\n    relative\n  });\n  function handleClick(event) {\n    if (onClick) onClick(event);\n    if (!event.defaultPrevented) {\n      internalOnClick(event);\n    }\n  }\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line jsx-a11y/anchor-has-content\n    React.createElement(\"a\", _extends({}, rest, {\n      href: absoluteHref || href,\n      onClick: isExternal || reloadDocument ? onClick : handleClick,\n      ref: ref,\n      target: target\n    }))\n  );\n});\nif (process.env.NODE_ENV !== \"production\") {\n  Link.displayName = \"Link\";\n}\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\nconst NavLink = /*#__PURE__*/React.forwardRef(function NavLinkWithRef(_ref5, ref) {\n  let {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      children\n    } = _ref5,\n    rest = _objectWithoutPropertiesLoose(_ref5, _excluded2);\n  let path = useResolvedPath(to, {\n    relative: rest.relative\n  });\n  let location = useLocation();\n  let routerState = React.useContext(UNSAFE_DataRouterStateContext);\n  let {\n    navigator\n  } = React.useContext(UNSAFE_NavigationContext);\n  let toPathname = navigator.encodeLocation ? navigator.encodeLocation(path).pathname : path.pathname;\n  let locationPathname = location.pathname;\n  let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;\n  if (!caseSensitive) {\n    locationPathname = locationPathname.toLowerCase();\n    nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;\n    toPathname = toPathname.toLowerCase();\n  }\n  let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(toPathname.length) === \"/\";\n  let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === \"/\");\n  let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n  let className;\n  if (typeof classNameProp === \"function\") {\n    className = classNameProp({\n      isActive,\n      isPending\n    });\n  } else {\n    // If the className prop is not a function, we use a default `active`\n    // class for <NavLink />s that are active. In v5 `active` was the default\n    // value for `activeClassName`, but we are removing that API and can still\n    // use the old default behavior for a cleaner upgrade path and keep the\n    // simple styling rules working as they currently do.\n    className = [classNameProp, isActive ? \"active\" : null, isPending ? \"pending\" : null].filter(Boolean).join(\" \");\n  }\n  let style = typeof styleProp === \"function\" ? styleProp({\n    isActive,\n    isPending\n  }) : styleProp;\n  return /*#__PURE__*/React.createElement(Link, _extends({}, rest, {\n    \"aria-current\": ariaCurrent,\n    className: className,\n    ref: ref,\n    style: style,\n    to: to\n  }), typeof children === \"function\" ? children({\n    isActive,\n    isPending\n  }) : children);\n});\nif (process.env.NODE_ENV !== \"production\") {\n  NavLink.displayName = \"NavLink\";\n}\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nconst Form = /*#__PURE__*/React.forwardRef((props, ref) => {\n  let submit = useSubmit();\n  return /*#__PURE__*/React.createElement(FormImpl, _extends({}, props, {\n    submit: submit,\n    ref: ref\n  }));\n});\nif (process.env.NODE_ENV !== \"production\") {\n  Form.displayName = \"Form\";\n}\nconst FormImpl = /*#__PURE__*/React.forwardRef((_ref6, forwardedRef) => {\n  let {\n      reloadDocument,\n      replace,\n      state,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      submit,\n      relative,\n      preventScrollReset\n    } = _ref6,\n    props = _objectWithoutPropertiesLoose(_ref6, _excluded3);\n  let formMethod = method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n  let formAction = useFormAction(action, {\n    relative\n  });\n  let submitHandler = event => {\n    onSubmit && onSubmit(event);\n    if (event.defaultPrevented) return;\n    event.preventDefault();\n    let submitter = event.nativeEvent.submitter;\n    let submitMethod = (submitter == null ? void 0 : submitter.getAttribute(\"formmethod\")) || method;\n    submit(submitter || event.currentTarget, {\n      method: submitMethod,\n      replace,\n      state,\n      relative,\n      preventScrollReset\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"form\", _extends({\n    ref: forwardedRef,\n    method: formMethod,\n    action: formAction,\n    onSubmit: reloadDocument ? onSubmit : submitHandler\n  }, props));\n});\nif (process.env.NODE_ENV !== \"production\") {\n  FormImpl.displayName = \"FormImpl\";\n}\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nfunction ScrollRestoration(_ref7) {\n  let {\n    getKey,\n    storageKey\n  } = _ref7;\n  useScrollRestoration({\n    getKey,\n    storageKey\n  });\n  return null;\n}\nif (process.env.NODE_ENV !== \"production\") {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\nvar DataRouterHook;\n(function (DataRouterHook) {\n  DataRouterHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n  DataRouterHook[\"UseSubmit\"] = \"useSubmit\";\n  DataRouterHook[\"UseSubmitFetcher\"] = \"useSubmitFetcher\";\n  DataRouterHook[\"UseFetcher\"] = \"useFetcher\";\n})(DataRouterHook || (DataRouterHook = {}));\nvar DataRouterStateHook;\n(function (DataRouterStateHook) {\n  DataRouterStateHook[\"UseFetchers\"] = \"useFetchers\";\n  DataRouterStateHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n})(DataRouterStateHook || (DataRouterStateHook = {}));\nfunction getDataRouterConsoleError(hookName) {\n  return hookName + \" must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.\";\n}\nfunction useDataRouterContext(hookName) {\n  let ctx = React.useContext(UNSAFE_DataRouterContext);\n  !ctx ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return ctx;\n}\nfunction useDataRouterState(hookName) {\n  let state = React.useContext(UNSAFE_DataRouterStateContext);\n  !state ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return state;\n}\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nfunction useLinkClickHandler(to, _temp) {\n  let {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative\n  } = _temp === void 0 ? {} : _temp;\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, {\n    relative\n  });\n  return React.useCallback(event => {\n    if (shouldProcessLinkClick(event, target)) {\n      event.preventDefault();\n      // If the URL hasn't changed, a regular <a> will do a replace instead of\n      // a push, so do the same here unless the replace prop is explicitly set\n      let replace = replaceProp !== undefined ? replaceProp : createPath(location) === createPath(path);\n      navigate(to, {\n        replace,\n        state,\n        preventScrollReset,\n        relative\n      });\n    }\n  }, [location, navigate, path, replaceProp, state, target, to, preventScrollReset, relative]);\n}\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nfunction useSearchParams(defaultInit) {\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(typeof URLSearchParams !== \"undefined\", \"You cannot use the `useSearchParams` hook in a browser that does not \" + \"support the URLSearchParams API. If you need to support Internet \" + \"Explorer 11, we recommend you load a polyfill such as \" + \"https://github.com/ungap/url-search-params\\n\\n\" + \"If you're unsure how to load polyfills, we recommend you check out \" + \"https://polyfill.io/v3/ which provides some recommendations about how \" + \"to load polyfills only for users that need them, instead of for every \" + \"user.\") : void 0;\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n  let location = useLocation();\n  let searchParams = React.useMemo(() =>\n  // Only merge in the defaults if we haven't yet called setSearchParams.\n  // Once we call that we want those to take precedence, otherwise you can't\n  // remove a param with setSearchParams({}) if it has an initial value\n  getSearchParamsForLocation(location.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current), [location.search]);\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback((nextInit, navigateOptions) => {\n    const newSearchParams = createSearchParams(typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit);\n    hasSetSearchParamsRef.current = true;\n    navigate(\"?\" + newSearchParams, navigateOptions);\n  }, [navigate, searchParams]);\n  return [searchParams, setSearchParams];\n}\nfunction validateClientSideSubmission() {\n  if (typeof document === \"undefined\") {\n    throw new Error(\"You are calling submit during the server render. \" + \"Try calling submit within a `useEffect` or callback instead.\");\n  }\n}\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nfunction useSubmit() {\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseSubmit);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let currentRouteId = UNSAFE_useRouteId();\n  return React.useCallback(function (target, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    validateClientSideSubmission();\n    let {\n      action,\n      method,\n      encType,\n      formData,\n      body\n    } = getFormSubmissionInfo(target, basename);\n    router.navigate(options.action || action, {\n      preventScrollReset: options.preventScrollReset,\n      formData,\n      body,\n      formMethod: options.method || method,\n      formEncType: options.encType || encType,\n      replace: options.replace,\n      state: options.state,\n      fromRouteId: currentRouteId\n    });\n  }, [router, basename, currentRouteId]);\n}\n/**\n * Returns the implementation for fetcher.submit\n */\nfunction useSubmitFetcher(fetcherKey, fetcherRouteId) {\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseSubmitFetcher);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  return React.useCallback(function (target, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    validateClientSideSubmission();\n    let {\n      action,\n      method,\n      encType,\n      formData,\n      body\n    } = getFormSubmissionInfo(target, basename);\n    !(fetcherRouteId != null) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"No routeId available for useFetcher()\") : UNSAFE_invariant(false) : void 0;\n    router.fetch(fetcherKey, fetcherRouteId, options.action || action, {\n      preventScrollReset: options.preventScrollReset,\n      formData,\n      body,\n      formMethod: options.method || method,\n      formEncType: options.encType || encType\n    });\n  }, [router, basename, fetcherKey, fetcherRouteId]);\n}\n// v7: Eventually we should deprecate this entirely in favor of using the\n// router method directly?\nfunction useFormAction(action, _temp2) {\n  let {\n    relative\n  } = _temp2 === void 0 ? {} : _temp2;\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let routeContext = React.useContext(UNSAFE_RouteContext);\n  !routeContext ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFormAction must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = _extends({}, useResolvedPath(action ? action : \".\", {\n    relative\n  }));\n  // Previously we set the default action to \".\". The problem with this is that\n  // `useResolvedPath(\".\")` excludes search params of the resolved URL. This is\n  // the intended behavior of when \".\" is specifically provided as\n  // the form action, but inconsistent w/ browsers when the action is omitted.\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to this directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    path.search = location.search;\n    // When grabbing search params from the URL, remove the automatically\n    // inserted ?index param so we match the useResolvedPath search behavior\n    // which would not include ?index\n    if (match.route.index) {\n      let params = new URLSearchParams(path.search);\n      params.delete(\"index\");\n      path.search = params.toString() ? \"?\" + params.toString() : \"\";\n    }\n  }\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\nfunction createFetcherForm(fetcherKey, routeId) {\n  let FetcherForm = /*#__PURE__*/React.forwardRef((props, ref) => {\n    let submit = useSubmitFetcher(fetcherKey, routeId);\n    return /*#__PURE__*/React.createElement(FormImpl, _extends({}, props, {\n      ref: ref,\n      submit: submit\n    }));\n  });\n  if (process.env.NODE_ENV !== \"production\") {\n    FetcherForm.displayName = \"fetcher.Form\";\n  }\n  return FetcherForm;\n}\nlet fetcherId = 0;\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nfunction useFetcher() {\n  var _route$matches;\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseFetcher);\n  let route = React.useContext(UNSAFE_RouteContext);\n  !route ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\n  let routeId = (_route$matches = route.matches[route.matches.length - 1]) == null ? void 0 : _route$matches.route.id;\n  !(routeId != null) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher can only be used on routes that contain a unique \\\"id\\\"\") : UNSAFE_invariant(false) : void 0;\n  let [fetcherKey] = React.useState(() => String(++fetcherId));\n  let [Form] = React.useState(() => {\n    !routeId ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"No routeId available for fetcher.Form()\") : UNSAFE_invariant(false) : void 0;\n    return createFetcherForm(fetcherKey, routeId);\n  });\n  let [load] = React.useState(() => href => {\n    !router ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"No router available for fetcher.load()\") : UNSAFE_invariant(false) : void 0;\n    !routeId ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"No routeId available for fetcher.load()\") : UNSAFE_invariant(false) : void 0;\n    router.fetch(fetcherKey, routeId, href);\n  });\n  let submit = useSubmitFetcher(fetcherKey, routeId);\n  let fetcher = router.getFetcher(fetcherKey);\n  let fetcherWithComponents = React.useMemo(() => _extends({\n    Form,\n    submit,\n    load\n  }, fetcher), [fetcher, Form, submit, load]);\n  React.useEffect(() => {\n    // Is this busted when the React team gets real weird and calls effects\n    // twice on mount?  We really just need to garbage collect here when this\n    // fetcher is no longer around.\n    return () => {\n      if (!router) {\n        console.warn(\"No router available to clean up from useFetcher()\");\n        return;\n      }\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n  return fetcherWithComponents;\n}\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nfunction useFetchers() {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return [...state.fetchers.values()];\n}\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions = {};\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration(_temp3) {\n  let {\n    getKey,\n    storageKey\n  } = _temp3 === void 0 ? {} : _temp3;\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let {\n    restoreScrollPosition,\n    preventScrollReset\n  } = useDataRouterState(DataRouterStateHook.UseScrollRestoration);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n  // Save positions on pagehide\n  usePageHide(React.useCallback(() => {\n    if (navigation.state === \"idle\") {\n      let key = (getKey ? getKey(location, matches) : null) || location.key;\n      savedScrollPositions[key] = window.scrollY;\n    }\n    sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));\n    window.history.scrollRestoration = \"auto\";\n  }, [storageKey, getKey, navigation.state, location, matches]));\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let getKeyWithoutBasename = getKey && basename !== \"/\" ? (location, matches) => getKey( // Strip the basename to match useLocation()\n      _extends({}, location, {\n        pathname: stripBasename(location.pathname, basename) || location.pathname\n      }), matches) : getKey;\n      let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKeyWithoutBasename);\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, basename, getKey]);\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(decodeURIComponent(location.hash.slice(1)));\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n      // Don't reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction useBeforeUnload(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Setup a callback to be fired on the window's `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt(_ref8) {\n  let {\n    when,\n    message\n  } = _ref8;\n  let blocker = unstable_useBlocker(when);\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        // This timeout is needed to avoid a weird \"race\" on POP navigations\n        // between the `window.history` revert navigation and the result of\n        // `window.confirm`\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n}\n//#endregion\n\nexport { BrowserRouter, Form, HashRouter, Link, NavLink, ScrollRestoration, useScrollRestoration as UNSAFE_useScrollRestoration, createBrowserRouter, createHashRouter, createSearchParams, HistoryRouter as unstable_HistoryRouter, usePrompt as unstable_usePrompt, useBeforeUnload, useFetcher, useFetchers, useFormAction, useLinkClickHandler, useSearchParams, useSubmit };\n//# sourceMappingURL=index.js.map\n","import { Locale } from '../types/Locale';\n\nconst LocaleSessionKey = 'selectedLocale';\n\nexport const getLocaleFromSessionStorage = (): Locale => {\n    return (sessionStorage.getItem(LocaleSessionKey) as Locale) || 'nb';\n};\n\nexport const setLocaleInSessionStorage = (locale: Locale): void => {\n    sessionStorage.setItem(LocaleSessionKey, locale);\n};\n\nexport const getNynorskLocale = () => {\n    if (Intl.NumberFormat.supportedLocalesOf('no-NN').length > 0) {\n        return 'no-NN';\n    }\n    return 'nn';\n};\n\nexport const getBokmålLocale = () => {\n    if (Intl.NumberFormat.supportedLocalesOf('no-NB').length > 0) {\n        return 'no-NB';\n    }\n    return 'nb';\n};\n\nexport const getLocaleForApi = (locale: string): Locale => {\n    switch (locale) {\n        case 'nn':\n        case 'no-NN':\n            return 'nn';\n        default:\n            return 'nb';\n    }\n};\n","import { useState } from 'react';\nimport { Loader } from '@navikt/ds-react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport { Locale, erMyndig } from '@navikt/fp-common';\nimport SøkersituasjonSteg from './sider/steg/sokersituasjon/SøkersituasjonSteg';\nimport Velkommen from './sider/velkommen/Velkommen';\nimport OmBarnetSteg from './sider/steg/omBarnet/OmBarnetSteg';\nimport UtenlandsoppholdSteg from './sider/steg/utenlandsopphold/UtenlandsoppholdSteg';\nimport { useRequest } from '@navikt/fp-api';\nimport Api from 'appData/api';\nimport Person from './types/Person';\nimport SøknadSendt from './sider/kvittering/SøknadSendt';\nimport Umyndig from './sider/umyndig/Umyndig';\nimport OppsummeringSteg from './sider/steg/oppsummering/OppsummeringSteg';\nimport DokumentasjonSteg from './sider/steg/dokumentasjon/DokumentasjonSteg';\nimport { Path } from 'appData/paths';\nimport { EsDataContext } from 'appData/EsDataContext';\nimport Kvittering from 'types/Kvittering';\nimport FeilsideInfo from './sider/feilside/FeilsideInfo';\nimport SenereUtenlandsoppholdSteg from './sider/steg/utenlandsoppholdSenere/SenereUtenlandsoppholdSteg';\nimport TidligereUtenlandsoppholdSteg from './sider/steg/utenlandsoppholdTidligere/TidligereUtenlandsoppholdSteg';\n\nconst Spinner: React.FunctionComponent = () => (\n    <div style={{ textAlign: 'center', padding: '12rem 0' }}>\n        <Loader size=\"2xlarge\" />\n    </div>\n);\n\ninterface Props {\n    locale: Locale;\n    onChangeLocale: (locale: Locale) => void;\n}\n\nconst Engangsstønad: React.FunctionComponent<Props> = ({ locale, onChangeLocale }) => {\n    const [erVelkommen, setVelkommen] = useState(false);\n    const [kvittering, setKvittering] = useState<Kvittering>();\n\n    const { data: person, loading, error } = useRequest<Person>(Api.getPerson);\n\n    if (error !== null) {\n        //TODO Kva er logikken med å visa spinner ved 401/403?\n        if (error.response?.status === 401 || error.response?.status === 403) {\n            return <Spinner />;\n        }\n        return <FeilsideInfo onChangeLocale={onChangeLocale} locale={locale} />;\n    }\n\n    if (loading || !person) {\n        return <Spinner />;\n    }\n\n    if (!erMyndig(person.fødselsdato)) {\n        return <Umyndig person={person} />;\n    }\n\n    const sendSøknad = Api.sendSøknad(locale, setKvittering);\n\n    return (\n        <EsDataContext>\n            <Routes>\n                {!erVelkommen && <Route path=\"*\" element={<Navigate to={Path.VELKOMMEN} />} />}\n                <Route\n                    path={Path.VELKOMMEN}\n                    element={\n                        <Velkommen\n                            locale={locale}\n                            onChangeLocale={onChangeLocale}\n                            startSøknad={setVelkommen}\n                            erVelkommen={erVelkommen}\n                        />\n                    }\n                />\n                {erVelkommen && (\n                    <>\n                        <Route path={Path.SØKERSITUASJON} element={<SøkersituasjonSteg />} />\n                        <Route path={Path.OM_BARNET} element={<OmBarnetSteg kjønn={person.kjønn} />} />\n                        <Route path={Path.TERMINBEKREFTELSE} element={<DokumentasjonSteg />} />\n                        <Route path={Path.ADOPSJONSBEKREFTELSE} element={<DokumentasjonSteg />} />\n                        <Route path={Path.UTENLANDSOPPHOLD} element={<UtenlandsoppholdSteg />} />\n                        <Route path={Path.TIDLIGERE_UTENLANDSOPPHOLD} element={<TidligereUtenlandsoppholdSteg />} />\n                        <Route path={Path.SENERE_UTENLANDSOPPHOLD} element={<SenereUtenlandsoppholdSteg />} />\n                        <Route\n                            path={Path.OPPSUMMERING}\n                            element={<OppsummeringSteg person={person} sendSøknad={sendSøknad} />}\n                        />\n                        <Route\n                            path={Path.KVITTERING}\n                            element={<SøknadSendt person={person} kvittering={kvittering} />}\n                        />\n                    </>\n                )}\n            </Routes>\n        </EsDataContext>\n    );\n};\n\nexport default Engangsstønad;\n","import { useCallback, useState } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { getLocaleFromSessionStorage, Locale, setLocaleInSessionStorage } from '@navikt/fp-common';\nimport Engangsstønad from './Engangsstønad';\nimport IntlProvider from './intl/IntlProvider';\n\nconst localeFromSessionStorage = getLocaleFromSessionStorage();\n\ndayjs.locale(localeFromSessionStorage);\n\nconst AppContainer = () => {\n    const [locale, setLocale] = useState<Locale>(localeFromSessionStorage);\n\n    const changeLocale = useCallback((activeLocale: Locale) => {\n        setLocaleInSessionStorage(activeLocale);\n        setLocale(activeLocale);\n    }, []);\n\n    return (\n        <IntlProvider språkkode={locale}>\n            <BrowserRouter>\n                <Engangsstønad locale={locale} onChangeLocale={changeLocale} />\n            </BrowserRouter>\n        </IntlProvider>\n    );\n};\n\nexport default AppContainer;\n"],"names":["redirect","url","redirectToLogin","loginUrl","engangsstønadApi","axios","Environment","config","response","error","_a","getPerson","mapBarn","omBarnet","dokumentasjon","erAdopsjon","erBarnetFødt","f","erBarnetIkkeFødt","erTerminDokumentasjon","mapBostedUtlandTilUtenlandsopphold","perioder","periode","sendSøknad","locale","setKvittering","utenlandsopphold","tidligereUtenlandsopphold","senereUtenlandsopphold","notEmpty","søknad","Api","useRequest","request","data","setData","useState","loading","setLoading","setError","useEffect","ignore","err","START_TRANSITION","startTransitionImpl","React","BrowserRouter","_ref","basename","children","future","window","historyRef","React.useRef","createBrowserHistory","history","state","setStateImpl","React.useState","v7_startTransition","setState","React.useCallback","newState","React.useLayoutEffect","React.createElement","Router","DataRouterHook","DataRouterStateHook","LocaleSessionKey","getLocaleFromSessionStorage","setLocaleInSessionStorage","Spinner","jsx","Loader","Engangsstønad","onChangeLocale","erVelkommen","setVelkommen","kvittering","person","_b","FeilsideInfo","erMyndig","Umyndig","EsDataContext","jsxs","Routes","Route","Navigate","Path","Velkommen","Fragment","SøkersituasjonSteg","OmBarnetSteg","DokumentasjonSteg","UtenlandsoppholdSteg","TidligereUtenlandsoppholdSteg","SenereUtenlandsoppholdSteg","OppsummeringSteg","SøknadSendt","localeFromSessionStorage","dayjs","AppContainer","setLocale","changeLocale","useCallback","activeLocale","IntlProvider","AppContainer$1"],"mappings":"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","x_google_ignoreList":[3]}