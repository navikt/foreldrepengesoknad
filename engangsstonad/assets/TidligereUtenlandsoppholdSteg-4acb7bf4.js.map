{"version":3,"file":"TidligereUtenlandsoppholdSteg-4acb7bf4.js","sources":["../../src/sider/steg/utenlandsoppholdTidligere/valideringsregler.ts","../../src/sider/steg/utenlandsoppholdTidligere/TidligereUtenlandsoppholdPeriode.tsx","../../src/sider/steg/utenlandsoppholdTidligere/TidligereUtenlandsoppholdSteg.tsx"],"sourcesContent":["import { formatDateExtended } from '@navikt/fp-common';\nimport { I18nFn } from '@navikt/fp-ui';\nimport { isDateWithinRange } from '@navikt/fp-utils';\nimport dayjs from 'dayjs';\n\n// TODO Flytt desse\n\nconst validateDateInRange = (\n    i18n: I18nFn,\n    date: Date | undefined,\n    minDate: Date,\n    maxDate: Date,\n    isFomDate: boolean,\n) => {\n    if (date === undefined) {\n        if (isFomDate) {\n            return i18n('Valideringsfeil.FraOgMedDato.GyldigDato');\n        }\n\n        return i18n('Valideringsfeil.TilOgMedDato.GyldigDato');\n    }\n\n    if (!isDateWithinRange(date, minDate, maxDate)) {\n        return i18n('Valideringsfeil.DateOutsideRange', {\n            fom: formatDateExtended(minDate),\n            tom: formatDateExtended(maxDate),\n        });\n    }\n\n    return null;\n};\n\nexport const validateFromDate = (i18n: I18nFn, date: Date | undefined, minDate: Date, maxDate: Date, toDate?: Date) => {\n    const error = validateDateInRange(i18n, date, minDate, maxDate, true);\n    if (error !== undefined) {\n        return error;\n    }\n    if (toDate && dayjs(date).isAfter(toDate, 'day')) {\n        // TODO Bør ha generell id\n        return i18n('Valideringsfeil.Utenlandsopphold.FørTilDato');\n    }\n    return undefined;\n};\n\nexport const validateToDate = (i18n: I18nFn, date: Date | undefined, minDate: Date, maxDate: Date, fromDate?: Date) => {\n    const error = validateDateInRange(i18n, date, minDate, maxDate, false);\n    if (error !== undefined) {\n        return error;\n    }\n    if (fromDate && dayjs(date).isBefore(fromDate, 'day')) {\n        // TODO Bør ha generell id\n        return i18n('Valideringsfeil.Utenlandsopphold.EtterFraDato');\n    }\n    return undefined;\n};\n","import { FormattedMessage } from 'react-intl';\nimport dayjs from 'dayjs';\nimport { useFormContext } from 'react-hook-form';\nimport { TrashIcon } from '@navikt/aksel-icons';\nimport { Button, VStack } from '@navikt/ds-react';\nimport { date1YearAgo, dateRangesCollide, dateToday } from '@navikt/fp-common';\n\nimport { createCountryOptions } from '@navikt/fp-utils';\nimport { Datepicker, Select } from '@navikt/fp-form-hooks';\nimport { validateFromDate, validateToDate } from './valideringsregler';\nimport { UtenlandsoppholdPeriode } from 'types/Utenlandsopphold';\nimport { isDatesNotTheSame, isRequired } from '@navikt/fp-validation';\nimport { I18nFn, useCustomIntl } from '@navikt/fp-ui';\n\nconst validerPeriodeOverlapp = (\n    i18n: I18nFn,\n    alleAndrePerioder: UtenlandsoppholdPeriode[],\n    fom: string,\n    tom: string,\n): string | null => {\n    const dateRanges = alleAndrePerioder.map((u) => ({\n        from: dayjs(u.fom).toDate(),\n        to: dayjs(u.tom).toDate(),\n    }));\n\n    const allDateRanges = dateRanges.concat({\n        from: dayjs(fom).toDate(),\n        to: dayjs(tom).toDate(),\n    });\n\n    if (dateRangesCollide(allDateRanges)) {\n        return i18n('TidligereUtenlandsoppholdSteg.Valideringsfeil.Utenlandsopphold.Overlapp');\n    }\n    return null;\n};\n\ninterface OwnProps {\n    index: number;\n    fjernOpphold: (index: number) => void;\n}\n\nconst TidligereUtenlandsoppholdPanel: React.FunctionComponent<OwnProps> = ({ index, fjernOpphold }) => {\n    const { i18n } = useCustomIntl();\n\n    const {\n        watch,\n        trigger,\n        formState: { isSubmitted },\n    } = useFormContext<{ utenlandsoppholdSiste12Mnd: UtenlandsoppholdPeriode[] }>();\n\n    const alleAndreUtenlandsopphold = watch(`utenlandsoppholdSiste12Mnd`).filter((_u, i) => i !== index);\n    const fom = watch(`utenlandsoppholdSiste12Mnd.${index}.fom`);\n    const tom = watch(`utenlandsoppholdSiste12Mnd.${index}.tom`);\n\n    const minDateFom = dayjs(date1YearAgo).toDate();\n    const maxDateFom = tom ? dayjs(tom).toDate() : dayjs(dateToday).toDate();\n\n    const minDateTom = fom ? dayjs(fom).toDate() : dayjs(date1YearAgo).toDate();\n    const maxDateTom = dayjs(dateToday).toDate();\n\n    return (\n        <VStack gap=\"5\" align=\"start\">\n            <Select\n                name={`utenlandsoppholdSiste12Mnd.${index}.landkode`}\n                label={<FormattedMessage id=\"TidligereUtenlandsoppholdSteg.Spørsmål.HvilketLandHarDuBoddI\" />}\n                validate={[\n                    isRequired(i18n('TidligereUtenlandsoppholdSteg.LeggTilUtenlandsopphold.LandDuHarBoddIPåkrevd')),\n                ]}\n            >\n                {createCountryOptions().map((o: Record<string, any>) => (\n                    <option key={o[0]} value={o[0]}>\n                        {o[1]}\n                    </option>\n                ))}\n            </Select>\n            <Datepicker\n                name={`utenlandsoppholdSiste12Mnd.${index}.fom`}\n                label={<FormattedMessage id=\"TidligereUtenlandsoppholdSteg.LeggTilUtenlandsopphold.Fraogmed\" />}\n                minDate={minDateFom}\n                maxDate={maxDateFom}\n                validate={[\n                    isRequired(i18n('TidligereUtenlandsoppholdSteg.LeggTilUtenlandsopphold.LandFomDuSkalBoIPåkreved')),\n                    isDatesNotTheSame(i18n('TidligereUtenlandsoppholdSteg.FomErLikTom'), tom),\n                    (fomValue) => {\n                        //TODO Del opp denne funksjonen\n                        return validateFromDate(\n                            i18n,\n                            dayjs(fomValue).toDate(),\n                            minDateFom,\n                            maxDateFom,\n                            dayjs(tom).toDate(),\n                        );\n                    },\n                    (fomValue) => {\n                        return validerPeriodeOverlapp(i18n, alleAndreUtenlandsopphold, fomValue, tom);\n                    },\n                ]}\n                onChange={() => isSubmitted && trigger()}\n            />\n            <Datepicker\n                name={`utenlandsoppholdSiste12Mnd.${index}.tom`}\n                label={<FormattedMessage id=\"TidligereUtenlandsoppholdSteg.LeggTilUtenlandsopphold.Tilogmed\" />}\n                minDate={minDateTom}\n                maxDate={maxDateTom}\n                validate={[\n                    isRequired(i18n('TidligereUtenlandsoppholdSteg.LeggTilUtenlandsopphold.LandTomDuHarBoddIPåkreved')),\n                    isDatesNotTheSame(i18n('TidligereUtenlandsoppholdSteg.TomErLikFom'), fom),\n                    (tomValue) => {\n                        //TODO Del opp denne funksjonen\n                        return validateToDate(\n                            i18n,\n                            dayjs(tomValue).toDate(),\n                            minDateTom,\n                            maxDateTom,\n                            dayjs(fom).toDate(),\n                        );\n                    },\n                    (tomValue) => {\n                        return validerPeriodeOverlapp(i18n, alleAndreUtenlandsopphold, fom, tomValue);\n                    },\n                ]}\n                onChange={() => isSubmitted && trigger()}\n            />\n            {index > 0 && (\n                <Button\n                    type=\"button\"\n                    variant=\"tertiary\"\n                    size=\"small\"\n                    icon={<TrashIcon aria-hidden />}\n                    onClick={() => fjernOpphold(index)}\n                >\n                    <FormattedMessage id=\"TidligereUtenlandsoppholdSteg.Knapp.SlettOpphold\" />\n                </Button>\n            )}\n        </VStack>\n    );\n};\n\nexport default TidligereUtenlandsoppholdPanel;\n","import { Fragment, useCallback, useMemo } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useFieldArray, useForm } from 'react-hook-form';\nimport { PlusIcon } from '@navikt/aksel-icons';\nimport { Button, VStack } from '@navikt/ds-react';\nimport { Step } from '@navikt/fp-common';\nimport { notEmpty } from '@navikt/fp-validation';\nimport { ErrorSummaryHookForm, StepButtonsHookForm, Form } from '@navikt/fp-form-hooks';\n\nimport useEsNavigator from 'appData/useEsNavigator';\nimport { Path } from 'appData/paths';\nimport { EsDataType, useEsStateData, useEsStateSaveFn } from 'appData/EsDataContext';\nimport useStepData from 'appData/useStepData';\nimport { UtenlandsoppholdTidligere, UtenlandsoppholdPeriode } from 'types/Utenlandsopphold';\nimport TidligereUtenlandsoppholdPeriode from './TidligereUtenlandsoppholdPeriode';\nimport { useCustomIntl } from '@navikt/fp-ui';\n\nconst DEFAULT_PERIODE = {\n    fom: '',\n    tom: '',\n    landkode: '',\n} as UtenlandsoppholdPeriode;\nconst DEFAULT_FORM_VALUES = {\n    utenlandsoppholdSiste12Mnd: [DEFAULT_PERIODE],\n} as UtenlandsoppholdTidligere;\n\nconst TidligereUtenlandsoppholdSteg: React.FunctionComponent = () => {\n    const { i18n } = useCustomIntl();\n\n    const stepData = useStepData();\n    const navigator = useEsNavigator();\n\n    const utenlandsopphold = notEmpty(useEsStateData(EsDataType.UTENLANDSOPPHOLD));\n    const sisteUtenlandsopphold = useEsStateData(EsDataType.UTENLANDSOPPHOLD_TIDLIGERE);\n    const lagreTidligereUtenlandsopphold = useEsStateSaveFn(EsDataType.UTENLANDSOPPHOLD_TIDLIGERE);\n\n    const defaultValues = useMemo(() => sisteUtenlandsopphold || DEFAULT_FORM_VALUES, []);\n    const formMethods = useForm<UtenlandsoppholdTidligere>({\n        defaultValues,\n    });\n    const { fields, append, remove } = useFieldArray({\n        name: 'utenlandsoppholdSiste12Mnd',\n        control: formMethods.control,\n    });\n\n    const leggTilOpphold = useCallback(() => {\n        append(DEFAULT_PERIODE);\n    }, [append]);\n    const fjernOpphold = useCallback(\n        (index: number) => {\n            remove(index);\n        },\n        [remove],\n    );\n\n    const lagre = useCallback((formValues: UtenlandsoppholdTidligere) => {\n        lagreTidligereUtenlandsopphold(formValues);\n        navigator.goToNextStep(\n            utenlandsopphold.skalBoUtenforNorgeNeste12Mnd ? Path.SENERE_UTENLANDSOPPHOLD : Path.OPPSUMMERING,\n        );\n    }, []);\n\n    return (\n        <Step\n            bannerTitle={i18n('Søknad.Pageheading')}\n            pageTitle={i18n('TidligereUtenlandsoppholdSteg.Tidligere')}\n            onCancel={navigator.avbrytSøknad}\n            steps={stepData.stepConfig}\n            activeStepId={stepData.activeStepId}\n            useNoTempSavingText\n        >\n            <Form formMethods={formMethods} onSubmit={lagre}>\n                <VStack gap=\"10\">\n                    <ErrorSummaryHookForm />\n                    <VStack gap=\"10\" align=\"start\">\n                        {fields.map((field, index) => (\n                            <Fragment key={field.id}>\n                                <TidligereUtenlandsoppholdPeriode index={index} fjernOpphold={fjernOpphold} />\n                                {fields.length > 1 && <hr style={{ width: '100%' }} color=\"#99C4DD\" />}\n                            </Fragment>\n                        ))}\n                        <Button\n                            type=\"button\"\n                            variant=\"secondary\"\n                            size=\"small\"\n                            icon={<PlusIcon aria-hidden />}\n                            onClick={leggTilOpphold}\n                        >\n                            <FormattedMessage id=\"TidligereUtenlandsoppholdSteg.Knapp.LeggTilLand\" />\n                        </Button>\n                    </VStack>\n                    <StepButtonsHookForm<UtenlandsoppholdTidligere>\n                        goToPreviousStep={navigator.goToPreviousDefaultStep}\n                        saveDataOnPreviousClick={lagreTidligereUtenlandsopphold}\n                    />\n                </VStack>\n            </Form>\n        </Step>\n    );\n};\n\nexport default TidligereUtenlandsoppholdSteg;\n"],"names":["validateDateInRange","i18n","date","minDate","maxDate","isFomDate","isDateWithinRange","formatDateExtended","validateFromDate","toDate","error","dayjs","validateToDate","fromDate","validerPeriodeOverlapp","alleAndrePerioder","fom","tom","allDateRanges","u","dateRangesCollide","TidligereUtenlandsoppholdPanel","index","fjernOpphold","useCustomIntl","watch","trigger","isSubmitted","useFormContext","alleAndreUtenlandsopphold","_u","i","minDateFom","date1YearAgo","maxDateFom","dateToday","minDateTom","maxDateTom","jsxs","VStack","jsx","Select","FormattedMessage","isRequired","createCountryOptions","o","Datepicker","isDatesNotTheSame","fomValue","tomValue","Button","TrashIcon","DEFAULT_PERIODE","DEFAULT_FORM_VALUES","TidligereUtenlandsoppholdSteg","stepData","useStepData","navigator","useEsNavigator","utenlandsopphold","notEmpty","useEsStateData","EsDataType","sisteUtenlandsopphold","lagreTidligereUtenlandsopphold","useEsStateSaveFn","defaultValues","useMemo","formMethods","useForm","fields","append","remove","useFieldArray","leggTilOpphold","useCallback","lagre","formValues","Path","Step","Form","ErrorSummaryHookForm","field","Fragment","TidligereUtenlandsoppholdPeriode","PlusIcon","StepButtonsHookForm","TidligereUtenlandsoppholdSteg$1"],"mappings":"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"}