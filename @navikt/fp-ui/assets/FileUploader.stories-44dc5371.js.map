{"version":3,"file":"FileUploader.stories-44dc5371.js","sources":["../../src/fileUploader/input/FileInput.tsx","../../src/i18n/hooks/useCustomI18n.ts","../../src/fileUploader/fileUtils.ts","../../src/fileUploader/liste/Attachment.tsx","../../src/fileUploader/liste/AttachmentList.tsx","../../src/fileUploader/typer/FileUploadError.ts","../../src/fileUploader/liste/FailedAttachment.tsx","../../src/fileUploader/liste/FailedAttachmentList.tsx","../../src/fileUploader/FileUploader.tsx","../../../types/src/Attachment.ts"],"sourcesContent":["import React, { useCallback, useRef } from 'react';\nimport { Button } from '@navikt/ds-react';\nimport { FormattedMessage } from 'react-intl';\nimport { UploadIcon } from '@navikt/aksel-icons';\n\nimport './fileInput.less';\n\ninterface Props {\n    onFilesSelect: (files: File[]) => void;\n    multiple?: boolean;\n    accept: string;\n    hasUplodedAttachements: boolean;\n}\n\nconst FileInput: React.FunctionComponent<Props> = ({ multiple, accept, onFilesSelect, hasUplodedAttachements }) => {\n    const onFileSelect = useCallback(\n        (e: React.ChangeEvent<HTMLInputElement>) => {\n            if (e.target.files) {\n                const files = Array.from(e.target.files) as File[];\n                onFilesSelect(files);\n                e.target.value = '';\n            }\n        },\n        [onFilesSelect],\n    );\n\n    const inputElement = useRef<HTMLInputElement>(null);\n\n    const openFileDialog = useCallback(() => {\n        if (inputElement.current) {\n            inputElement.current.click();\n        }\n    }, [inputElement.current]);\n\n    return (\n        <>\n            <input\n                ref={inputElement}\n                className=\"fileInput\"\n                type=\"file\"\n                accept={accept}\n                onChange={(e) => onFileSelect(e)}\n                multiple={multiple === true}\n                data-testid=\"file-upload\"\n            />\n            <Button\n                className=\"upload_button\"\n                variant={hasUplodedAttachements ? 'secondary' : 'primary'}\n                type=\"button\"\n                onClick={openFileDialog}\n                icon={<UploadIcon />}\n                iconPosition=\"right\"\n            >\n                {hasUplodedAttachements && <FormattedMessage id=\"FileInput.Vedlegg.Lastoppknapp.Flere\" />}\n                {!hasUplodedAttachements && <FormattedMessage id=\"FileInput.Vedlegg.Lastoppknapp\" />}\n            </Button>\n        </>\n    );\n};\n\nexport default FileInput;\n","import { PrimitiveType, useIntl } from 'react-intl';\nimport { FormatXMLElementFn } from 'intl-messageformat';\n\nexport type I18nFn = (\n    i18nId: string,\n    values?: Record<string, PrimitiveType | FormatXMLElementFn<string, string>>,\n) => string;\n\nexport type CustomIntlShape = {\n    i18n: I18nFn;\n};\n\nexport const useCustomIntl = (): CustomIntlShape => {\n    const intl = useIntl();\n    return {\n        i18n: (i18nId: string, values?: Record<string, PrimitiveType | FormatXMLElementFn<string, string>>) =>\n            intl.formatMessage({ id: i18nId }, values),\n    };\n};\n","import Bytes from 'bytes';\nimport { Attachment, AttachmentType, Skjemanummer } from '@navikt/fp-types';\n\nconst s4 = (): string =>\n    Math.floor((1 + Math.random()) * 0x10000)\n        .toString()\n        .substring(1);\n\n//TODO Denne ligg sikkert ein annan stad (evt flytt ut)\nconst guid = (): string => `${s4()}${s4()}-${s4()}-${s4()}-${s4()}-${s4()}${s4()}${s4()}`;\n\nexport const bytesString = (bytes: number): string => {\n    return Bytes(bytes, {\n        unitSeparator: ' ',\n        thousandsSeparator: ' ',\n        decimalPlaces: 1,\n        fixedDecimals: false,\n    });\n};\n\nexport const getTotalFileSize = (files: File[]): number => {\n    return files.reduce(\n        (a, b) =>\n            ({\n                size: a.size + b.size,\n            }) as any,\n        { size: 0 },\n    ).size;\n};\n\nconst generateAttachmentId = () => 'V'.concat(guid().replace(/-/g, ''));\n\nexport const mapFileToAttachment = (file: File, type: AttachmentType, skjemanummer: Skjemanummer): Attachment => {\n    return {\n        id: generateAttachmentId(),\n        file,\n        filename: file.name,\n        filesize: file.size,\n        uploaded: false,\n        pending: false,\n        type,\n        skjemanummer,\n    };\n};\n","import { VStack, Link, Loader, HStack, Spacer } from '@navikt/ds-react';\nimport { XMarkIcon, FileCheckmarkIcon } from '@navikt/aksel-icons';\n\nimport { useCustomIntl } from '../../i18n/hooks/useCustomI18n';\nimport { Attachment as AttachmentType } from '@navikt/fp-types';\nimport { bytesString } from '../fileUtils';\n\nimport './attachment.less';\n\ninterface OwnProps {\n    attachment: AttachmentType;\n    showFileSize?: boolean;\n    onDelete?: (file: AttachmentType) => void;\n}\n\ntype Props = OwnProps;\n\nconst Attachment: React.FunctionComponent<Props> = ({ attachment, showFileSize, onDelete }) => {\n    const { i18n } = useCustomIntl();\n\n    return (\n        <div className=\"attachmentPanel\">\n            <HStack gap=\"4\">\n                {attachment.pending && <Loader type=\"S\" />}\n                {!attachment.pending && <FileCheckmarkIcon width={24} height={24} />}\n                <VStack gap=\"1\">\n                    {attachment.url ? (\n                        <Link href={attachment.url} target=\"_blank\">\n                            {attachment.filename}\n                        </Link>\n                    ) : (\n                        <span>{attachment.filename}</span>\n                    )}\n                    {showFileSize && <div>{bytesString(attachment.filesize)}</div>}\n                </VStack>\n                {onDelete && (\n                    <>\n                        <Spacer />\n                        <XMarkIcon\n                            onClick={() => onDelete(attachment)}\n                            height={24}\n                            width={24}\n                            cursor=\"pointer\"\n                            aria-label={i18n('Attachment.Vedlegg.Slett', { navn: attachment.filename })}\n                        />\n                    </>\n                )}\n            </HStack>\n        </div>\n    );\n};\n\nexport default Attachment;\n","import { Fragment } from 'react';\nimport { VStack } from '@navikt/ds-react';\nimport { Attachment } from '@navikt/fp-types';\nimport AttachmentComponent from './Attachment';\nimport { guid } from '@navikt/fp-common';\n\nimport './attachment.less';\n\ninterface Props {\n    attachments: Attachment[];\n    showFileSize?: boolean;\n    onDelete?: (file: Attachment) => void;\n}\n\nconst AttachmentList: React.FunctionComponent<Props> = (props) => {\n    const { attachments, showFileSize, onDelete } = props;\n\n    return (\n        <>\n            {attachments.length > 0 && (\n                <VStack gap=\"2\">\n                    {attachments.map((attachment) => (\n                        <Fragment key={guid()}>\n                            <AttachmentComponent\n                                attachment={attachment}\n                                onDelete={onDelete}\n                                showFileSize={showFileSize}\n                            />\n                        </Fragment>\n                    ))}\n                </VStack>\n            )}\n        </>\n    );\n};\nexport default AttachmentList;\n","export enum FileUploadError {\n    GENERAL = 'GENERAL',\n    VALID_EXTENSION = 'VALID_EXTENSION',\n    MAX_SIZE = 'MAX_SIZE',\n}\n","import { Alert } from '@navikt/ds-react';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Attachment as AttachmentType } from '@navikt/fp-types';\nimport { FileUploadError } from '../typer/FileUploadError';\n\nconst MAX_FIL_STØRRELSE_KB = 16777;\n\ninterface OwnProps {\n    failedAttachment: AttachmentType;\n    onDelete: (file: AttachmentType) => void;\n}\n\nconst FailedAttachment: React.FunctionComponent<OwnProps> = ({ failedAttachment, onDelete }) => {\n    return (\n        <Alert variant=\"warning\" closeButton onClose={() => onDelete(failedAttachment)}>\n            {failedAttachment.error === FileUploadError.GENERAL && (\n                <FormattedMessage\n                    id=\"FailedAttachment.Vedlegg.Feilmelding.Opplasting.Feilet\"\n                    values={{ filename: failedAttachment.filename }}\n                />\n            )}\n            {failedAttachment.error === FileUploadError.MAX_SIZE && (\n                <FormattedMessage\n                    id=\"FailedAttachment.Vedlegg.Feilmelding.Ugyldig.Størrelse\"\n                    values={{ filename: failedAttachment.filename, maxStørrelse: MAX_FIL_STØRRELSE_KB }}\n                />\n            )}\n            {failedAttachment.error === FileUploadError.VALID_EXTENSION && (\n                <FormattedMessage\n                    id=\"FailedAttachment.Vedlegg.Feilmelding.Ugyldig.Type\"\n                    values={{ filename: failedAttachment.filename }}\n                />\n            )}\n        </Alert>\n    );\n};\n\nexport default FailedAttachment;\n","import { Fragment } from 'react';\nimport { VStack } from '@navikt/ds-react';\nimport { Attachment } from '@navikt/fp-types';\nimport FailedAttachment from './FailedAttachment';\nimport './attachment.less';\nimport { guid } from '@navikt/fp-common';\n\ninterface Props {\n    failedAttachments: Attachment[];\n    onDelete: (file: Attachment) => void;\n}\n\nconst FailedAttachmentList: React.FunctionComponent<Props> = (props) => {\n    const { failedAttachments, onDelete } = props;\n    return (\n        <>\n            {failedAttachments.length > 0 && (\n                <VStack gap=\"2\">\n                    {failedAttachments.map((failedAttachment) => (\n                        <Fragment key={guid()}>\n                            <FailedAttachment failedAttachment={failedAttachment} onDelete={onDelete} />\n                        </Fragment>\n                    ))}\n                </VStack>\n            )}\n        </>\n    );\n};\nexport default FailedAttachmentList;\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { VStack } from '@navikt/ds-react';\n\nimport FileInput from './input/FileInput';\nimport AttachmentList from './liste/AttachmentList';\nimport { Attachment, AttachmentType, Skjemanummer } from '@navikt/fp-types';\nimport { mapFileToAttachment } from './fileUtils';\nimport FailedAttachmentList from './liste/FailedAttachmentList';\nimport { FileUploadError } from './typer/FileUploadError';\nimport UiIntlProvider from '../i18n/UiIntlProvider';\n\nconst VALID_EXTENSIONS = ['.pdf', '.jpeg', '.jpg', '.png'];\nconst MAX_FIL_STØRRELSE_KB = 16777;\nconst KILOBYTES_IN_BYTE = 0.0009765625;\n\n// TODO Fjern any her utan å måtte dra inn axios i denne pakka\ntype SaveAttachment = (attachment: Attachment) => Promise<any>;\n\nconst getPendingAttachmentFromFile = (\n    file: File,\n    attachmentType: AttachmentType,\n    skjemanummber: Skjemanummer,\n): Attachment => {\n    const newAttachment = mapFileToAttachment(file, attachmentType, skjemanummber);\n    newAttachment.pending = true;\n    return newAttachment;\n};\n\nconst fileExtensionIsValid = (filename: string): boolean => {\n    const ext = filename.split('.').pop();\n    return VALID_EXTENSIONS.includes(`.${ext!.toLowerCase()}`);\n};\n\nconst fileSizeIsValid = (filesizeInB: number): boolean => {\n    const filesizeInKb = filesizeInB * KILOBYTES_IN_BYTE;\n    return filesizeInKb <= MAX_FIL_STØRRELSE_KB;\n};\n\nconst uploadAttachment = async (attachment: Attachment, saveAttachment: SaveAttachment): Promise<void> => {\n    if (!fileExtensionIsValid(attachment.file.name)) {\n        attachment.pending = false;\n        attachment.error = FileUploadError.VALID_EXTENSION;\n        return;\n    }\n    if (!fileSizeIsValid(attachment.filesize)) {\n        attachment.pending = false;\n        attachment.error = FileUploadError.MAX_SIZE;\n        return;\n    }\n\n    try {\n        const response = await saveAttachment(attachment);\n        attachment.pending = false;\n        attachment.url = response.headers.location;\n        attachment.uploaded = true;\n        attachment.uuid = response.data;\n    } catch (error) {\n        // TODO Burde få ut feilmelding frå backend og vise denne\n        attachment.pending = false;\n        attachment.error = FileUploadError.GENERAL;\n    }\n};\n\nconst EMPTY_ATTACHMENT_LIST = [] as Attachment[];\n\nexport interface Props {\n    updateAttachments: (attachments: Attachment[]) => void;\n    attachmentType: AttachmentType;\n    skjemanummber: Skjemanummer;\n    existingAttachments?: Attachment[];\n    saveAttachment: SaveAttachment;\n}\n\nconst FileUploader: React.FunctionComponent<Props> = ({\n    existingAttachments = EMPTY_ATTACHMENT_LIST,\n    updateAttachments,\n    attachmentType,\n    skjemanummber,\n    saveAttachment,\n}) => {\n    const [attachments, setAttachments] = useState(existingAttachments);\n\n    useEffect(() => {\n        updateAttachments(attachments.filter((a) => !a.error && a.pending === false));\n    }, [attachments]);\n\n    const uploadAttachments = async (allPendingAttachments: Attachment[]) => {\n        for (const pendingAttachment of allPendingAttachments) {\n            await uploadAttachment(pendingAttachment, saveAttachment);\n            setAttachments((currentAttachments) =>\n                currentAttachments.map((a) => (a.filename === pendingAttachment.filename ? pendingAttachment : a)),\n            );\n        }\n    };\n\n    const saveFiles = useCallback((files: File[]) => {\n        const allPendingAttachments = files.map((file) =>\n            getPendingAttachmentFromFile(file, attachmentType, skjemanummber),\n        );\n        setAttachments((currentAttachments) => currentAttachments.concat(allPendingAttachments));\n        uploadAttachments(allPendingAttachments);\n    }, []);\n\n    const deleteAttachment = useCallback((file: Attachment) => {\n        setAttachments((currentAttachments) => currentAttachments.filter((a) => a.filename !== file.filename));\n    }, []);\n\n    const uploadedAttachments = useMemo(() => attachments.filter((a) => !a.error), [attachments]);\n    const failedAttachments = useMemo(() => attachments.filter((a) => !!a.error), [attachments]);\n\n    return (\n        <UiIntlProvider>\n            <VStack gap=\"6\">\n                <AttachmentList attachments={uploadedAttachments} showFileSize={true} onDelete={deleteAttachment} />\n                <FileInput\n                    accept={VALID_EXTENSIONS.join(', ')}\n                    onFilesSelect={saveFiles}\n                    hasUplodedAttachements={uploadedAttachments.length > 0}\n                />\n                <FailedAttachmentList failedAttachments={failedAttachments} onDelete={deleteAttachment} />\n            </VStack>\n        </UiIntlProvider>\n    );\n};\n\nexport default FileUploader;\n","export interface Attachment {\n    id: string;\n    filename: string;\n    filesize: number;\n    file: File;\n    url?: string;\n    uuid?: string;\n    pending: boolean;\n    uploaded: boolean;\n    type: AttachmentType;\n    skjemanummer: Skjemanummer;\n    error?: any;\n}\n\nexport enum AttachmentType {\n    TERMINBEKREFTELSE = 'terminbekreftelse',\n    OMSORGSOVERTAKELSE = 'omsorgsovertakelse',\n}\n\nexport enum Skjemanummer {\n    TERMINBEKREFTELSE = 'I000062',\n    OMSORGSOVERTAKELSE = 'I000042',\n}\n"],"names":["FileInput","multiple","accept","onFilesSelect","hasUplodedAttachements","onFileSelect","useCallback","e","files","inputElement","useRef","openFileDialog","jsxs","Fragment","jsx","Button","UploadIcon","FormattedMessage","useCustomIntl","intl","useIntl","i18nId","values","s4","guid","bytesString","bytes","Bytes","generateAttachmentId","mapFileToAttachment","file","type","skjemanummer","Attachment","attachment","showFileSize","onDelete","i18n","HStack","Loader","FileCheckmarkIcon","VStack","Link","Spacer","XMarkIcon","AttachmentList","props","attachments","Fragment2","AttachmentComponent","FileUploadError","MAX_FIL_STØRRELSE_KB","FailedAttachment","failedAttachment","Alert","FailedAttachmentList","failedAttachments","VALID_EXTENSIONS","KILOBYTES_IN_BYTE","getPendingAttachmentFromFile","attachmentType","skjemanummber","newAttachment","fileExtensionIsValid","filename","ext","fileSizeIsValid","filesizeInB","uploadAttachment","saveAttachment","response","EMPTY_ATTACHMENT_LIST","FileUploader","existingAttachments","updateAttachments","setAttachments","useState","useEffect","a","uploadAttachments","allPendingAttachments","pendingAttachment","currentAttachments","saveFiles","deleteAttachment","uploadedAttachments","useMemo","UiIntlProvider","FileUploader$1","AttachmentType","Skjemanummer"],"mappings":"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"}