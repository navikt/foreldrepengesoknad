{"version":3,"file":"FileUploader.stories-8b7712ba.js","sources":["../../../constants/src/skjemanummer.ts","../../../constants/src/attachmentType.ts","../../src/fileUploader/input/FileInput.tsx","../../src/i18n/useCustomI18n.ts","../../src/fileUploader/fileUtils.ts","../../src/fileUploader/liste/AttachmentInfo.tsx","../../src/fileUploader/liste/AttachmentList.tsx","../../src/fileUploader/typer/FileUploadError.ts","../../src/fileUploader/liste/FailedAttachment.tsx","../../src/fileUploader/liste/FailedAttachmentList.tsx","../../src/fileUploader/FileUploader.tsx"],"sourcesContent":["export enum Skjemanummer {\n    ANNET = 'I000060',\n    TERMINBEKREFTELSE = 'I000062',\n    OMSORGSOVERTAKELSE = 'I000042',\n    BEKREFTELSE_DELTAR_KVALIFISERINGSPROGRAM = 'I000051',\n    BEKREFTELSE_FRA_ARBEIDSGIVER = 'I000065',\n    BEKREFTELSE_FRA_STUDIESTED = 'I000061',\n    BEKREFTELSE_PÅ_AVTALT_FERIE = 'I000036',\n    DOK_AV_ALENEOMSORG = 'I000110',\n    DOK_BEGRUNNELSE_SØKE_TILBAKE_I_TID = 'I000111',\n    DOK_DELTAKELSE_I_INTRODUKSJONSPROGRAMMET = 'I000112',\n    DOK_INNLEGGELSE = 'I000037',\n    DOK_MILITÆR_SILVIL_TJENESTE = 'I000039',\n    DOK_MORS_UTDANNING_ARBEID_SYKDOM = 'I000038',\n    DOK_OVERFØRING_FOR_SYK = 'I000023',\n    ETTERLØNN_ELLER_SLUTTVEDERLAG = 'I000044',\n    FØDSELSATTEST = 'I000063',\n    INNTEKTSOPPLYSNINGER_FRILANS_ELLER_SELVSTENDIG = 'I000007',\n    SKJEMA_FOR_TILRETTELEGGING_OG_OMPLASSERING = 'I000109',\n    TILBAKEBETALING = 'I000114',\n    HV_ØVELSE = 'I000116',\n    NAV_TILTAK = 'I000117',\n    RESULTATREGNSKAP = 'I000032',\n    KOPI_SKATTEMELDING = 'I000066',\n}\n","export enum AttachmentType {\n    OMSORGSOVERTAKELSE = 'omsorgsovertakelse',\n    ADOPSJONSVEDTAK = 'adopsjonsvedtak',\n    TERMINBEKREFTELSE = 'terminbekreftelse',\n    FØDSELSATTEST = 'fødselsattest',\n    ANNEN_INNTEKT = 'anneninntektDokumentasjon',\n    UTSETTELSE_SYKDOM = 'utsettelseSykdomUttaksplan',\n    MORS_AKTIVITET_DOKUMENTASJON = 'morsaktivitetdokumentasjon',\n    OVERFØRING_KVOTE = 'dokumentasjonOverføringAvKvote',\n    ALENEOMSORG = 'dokumentasjonAvAleneomsorg',\n    SEN_ENDRING = 'senEndring',\n    HV_ØVELSE = 'hvØvelse',\n    NAV_TILTAK = 'navTiltak',\n    TILBAKEBETALING = 'tilbakebetaling',\n}\n","import React, { useCallback, useRef } from 'react';\nimport { Button } from '@navikt/ds-react';\nimport { FormattedMessage } from 'react-intl';\nimport { UploadIcon } from '@navikt/aksel-icons';\n\nimport './fileInput.less';\nimport { bemUtils } from '@navikt/fp-common';\n\ninterface Props {\n    onFilesSelect: (files: File[]) => void;\n    multiple: boolean;\n    accept: string;\n    hasUplodedAttachements: boolean;\n}\n\nconst FileInput: React.FunctionComponent<Props> = ({ multiple, accept, onFilesSelect, hasUplodedAttachements }) => {\n    const bem = bemUtils('fileInput');\n    const onFileSelect = useCallback(\n        (e: React.ChangeEvent<HTMLInputElement>) => {\n            if (e.target.files) {\n                const files = Array.from(e.target.files) as File[];\n                onFilesSelect(files);\n                e.target.value = '';\n            }\n        },\n        [onFilesSelect],\n    );\n\n    const inputElement = useRef<HTMLInputElement>(null);\n\n    const openFileDialog = useCallback(() => {\n        if (inputElement.current) {\n            inputElement.current.click();\n        }\n    }, []);\n\n    return (\n        <>\n            <input\n                ref={inputElement}\n                className={bem.element('input')}\n                type=\"file\"\n                accept={accept}\n                onChange={(e) => onFileSelect(e)}\n                multiple={multiple === true}\n                data-testid=\"file-upload\"\n            />\n            <Button\n                className={bem.element('upload_button')}\n                variant={hasUplodedAttachements ? 'secondary' : 'primary'}\n                type=\"button\"\n                onClick={openFileDialog}\n                icon={<UploadIcon />}\n                iconPosition=\"right\"\n            >\n                {hasUplodedAttachements && <FormattedMessage id=\"FileInput.Vedlegg.Lastoppknapp.Flere\" />}\n                {!hasUplodedAttachements && <FormattedMessage id=\"FileInput.Vedlegg.Lastoppknapp\" />}\n            </Button>\n        </>\n    );\n};\n\nexport default FileInput;\n","import { PrimitiveType, useIntl } from 'react-intl';\nimport { FormatXMLElementFn } from 'intl-messageformat';\n\nexport type I18nFn = (\n    i18nId: string,\n    values?: Record<string, PrimitiveType | FormatXMLElementFn<string, string>>,\n) => string;\n\nexport type CustomIntlShape = {\n    i18n: I18nFn;\n};\n\nexport const useCustomIntl = (): CustomIntlShape => {\n    const intl = useIntl();\n    return {\n        i18n: (i18nId: string, values?: Record<string, PrimitiveType | FormatXMLElementFn<string, string>>) =>\n            intl.formatMessage({ id: i18nId }, values),\n    };\n};\n","import Bytes from 'bytes';\nimport { Attachment } from '@navikt/fp-types';\nimport { Skjemanummer, AttachmentType } from '@navikt/fp-constants';\n\nconst s4 = (): string =>\n    Math.floor((1 + Math.random()) * 0x10000)\n        .toString()\n        .substring(1);\n\n//TODO Denne ligg sikkert ein annan stad (evt flytt ut)\nconst guid = (): string => `${s4()}${s4()}-${s4()}-${s4()}-${s4()}-${s4()}${s4()}${s4()}`;\n\nexport const bytesString = (bytes: number): string => {\n    return Bytes(bytes, {\n        unitSeparator: ' ',\n        thousandsSeparator: ' ',\n        decimalPlaces: 1,\n        fixedDecimals: false,\n    });\n};\n\nexport const getTotalFileSize = (files: File[]): number => {\n    return files.reduce(\n        (a, b) =>\n            ({\n                size: a.size + b.size,\n            }) as any,\n        { size: 0 },\n    ).size;\n};\n\nconst generateAttachmentId = () => 'V'.concat(guid().replace(/-/g, ''));\n\nexport const mapFileToAttachment = (file: File, type: AttachmentType, skjemanummer: Skjemanummer): Attachment => {\n    return {\n        id: generateAttachmentId(),\n        file,\n        filename: file.name,\n        filesize: file.size,\n        uploaded: false,\n        pending: false,\n        type,\n        skjemanummer,\n    };\n};\n","import { VStack, Link, Loader, HStack, Spacer } from '@navikt/ds-react';\nimport { XMarkIcon, FileCheckmarkIcon } from '@navikt/aksel-icons';\n\nimport { useCustomIntl } from '../../i18n/useCustomI18n';\nimport { Attachment } from '@navikt/fp-types';\nimport { bytesString } from '../fileUtils';\n\nimport './attachmentInfo.less';\n\ninterface OwnProps {\n    attachment: Attachment;\n    showFileSize?: boolean;\n    onDelete?: (file: Attachment) => void;\n}\n\ntype Props = OwnProps;\n\nconst AttachmentInfo: React.FunctionComponent<Props> = ({ attachment, showFileSize, onDelete }) => {\n    const { i18n } = useCustomIntl();\n\n    return (\n        <div className=\"attachmentPanel\">\n            <HStack gap=\"4\">\n                {attachment.pending && <Loader type=\"S\" />}\n                {!attachment.pending && <FileCheckmarkIcon width={24} height={24} />}\n                <VStack gap=\"1\">\n                    {attachment.url ? (\n                        <Link href={attachment.url} target=\"_blank\">\n                            {attachment.filename}\n                        </Link>\n                    ) : (\n                        <span>{attachment.filename}</span>\n                    )}\n                    {showFileSize && <div>{bytesString(attachment.filesize)}</div>}\n                </VStack>\n                {onDelete && (\n                    <>\n                        <Spacer />\n                        <XMarkIcon\n                            onClick={() => onDelete(attachment)}\n                            height={24}\n                            width={24}\n                            cursor=\"pointer\"\n                            aria-label={i18n('Attachment.Vedlegg.Slett', { navn: attachment.filename })}\n                        />\n                    </>\n                )}\n            </HStack>\n        </div>\n    );\n};\n\nexport default AttachmentInfo;\n","import { Fragment } from 'react';\nimport { VStack } from '@navikt/ds-react';\nimport { Attachment } from '@navikt/fp-types';\nimport AttachmentInfo from './AttachmentInfo';\nimport { guid } from '@navikt/fp-common';\n\ninterface Props {\n    attachments: Attachment[];\n    showFileSize?: boolean;\n    onDelete?: (file: Attachment) => void;\n}\n\nconst AttachmentList: React.FunctionComponent<Props> = (props) => {\n    const { attachments, showFileSize, onDelete } = props;\n\n    return (\n        <>\n            {attachments.length > 0 && (\n                <VStack gap=\"2\">\n                    {attachments.map((attachment) => (\n                        <Fragment key={guid()}>\n                            <AttachmentInfo attachment={attachment} onDelete={onDelete} showFileSize={showFileSize} />\n                        </Fragment>\n                    ))}\n                </VStack>\n            )}\n        </>\n    );\n};\nexport default AttachmentList;\n","export enum FileUploadError {\n    GENERAL = 'GENERAL',\n    TIMEOUT = 'TIMEOUT',\n    VALID_EXTENSION = 'VALID_EXTENSION',\n    MAX_SIZE = 'MAX_SIZE',\n}\n","import { Alert } from '@navikt/ds-react';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Attachment } from '@navikt/fp-types';\nimport { FileUploadError } from '../typer/FileUploadError';\n\nconst MAX_FIL_STØRRELSE_KB = 16777;\n\ninterface OwnProps {\n    failedAttachment: Attachment;\n    onDelete: (file: Attachment) => void;\n}\n\nconst FailedAttachment: React.FunctionComponent<OwnProps> = ({ failedAttachment, onDelete }) => {\n    return (\n        <Alert variant=\"warning\" closeButton onClose={() => onDelete(failedAttachment)}>\n            {failedAttachment.error === FileUploadError.GENERAL && (\n                <FormattedMessage\n                    id=\"FailedAttachment.Vedlegg.Feilmelding.Opplasting.Feilet\"\n                    values={{ filename: failedAttachment.filename }}\n                />\n            )}\n            {failedAttachment.error === FileUploadError.TIMEOUT && (\n                <FormattedMessage\n                    id=\"FailedAttachment.Vedlegg.Feilmelding.Timeout\"\n                    values={{ filename: failedAttachment.filename }}\n                />\n            )}\n            {failedAttachment.error === FileUploadError.MAX_SIZE && (\n                <FormattedMessage\n                    id=\"FailedAttachment.Vedlegg.Feilmelding.Ugyldig.Størrelse\"\n                    values={{ filename: failedAttachment.filename, maxStørrelse: MAX_FIL_STØRRELSE_KB }}\n                />\n            )}\n            {failedAttachment.error === FileUploadError.VALID_EXTENSION && (\n                <FormattedMessage\n                    id=\"FailedAttachment.Vedlegg.Feilmelding.Ugyldig.Type\"\n                    values={{ filename: failedAttachment.filename }}\n                />\n            )}\n        </Alert>\n    );\n};\n\nexport default FailedAttachment;\n","import { Fragment } from 'react';\nimport { VStack } from '@navikt/ds-react';\nimport { Attachment } from '@navikt/fp-types';\nimport FailedAttachment from './FailedAttachment';\nimport { guid } from '@navikt/fp-common';\n\ninterface Props {\n    failedAttachments: Attachment[];\n    onDelete: (file: Attachment) => void;\n}\n\nconst FailedAttachmentList: React.FunctionComponent<Props> = (props) => {\n    const { failedAttachments, onDelete } = props;\n    return (\n        <>\n            {failedAttachments.length > 0 && (\n                <VStack gap=\"2\">\n                    {failedAttachments.map((failedAttachment) => (\n                        <Fragment key={guid()}>\n                            <FailedAttachment failedAttachment={failedAttachment} onDelete={onDelete} />\n                        </Fragment>\n                    ))}\n                </VStack>\n            )}\n        </>\n    );\n};\nexport default FailedAttachmentList;\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { VStack } from '@navikt/ds-react';\nimport { AttachmentType, Skjemanummer } from '@navikt/fp-constants';\n\nimport FileInput from './input/FileInput';\nimport AttachmentList from './liste/AttachmentList';\nimport { Attachment } from '@navikt/fp-types';\nimport { mapFileToAttachment } from './fileUtils';\nimport FailedAttachmentList from './liste/FailedAttachmentList';\nimport { FileUploadError } from './typer/FileUploadError';\nimport UiIntlProvider from '../i18n/ui/UiIntlProvider';\n\nconst VALID_EXTENSIONS = ['.pdf', '.jpeg', '.jpg', '.png'];\nconst MAX_FIL_STØRRELSE_KB = 16777;\nconst KILOBYTES_IN_BYTE = 0.0009765625;\n\n// TODO Fjern any her utan å måtte dra inn axios i denne pakka\ntype SaveAttachment = (attachment: Attachment) => Promise<any>;\n\nconst getPendingAttachmentFromFile = (\n    file: File,\n    attachmentType: AttachmentType,\n    skjemanummer: Skjemanummer,\n): Attachment => {\n    const newAttachment = mapFileToAttachment(file, attachmentType, skjemanummer);\n    newAttachment.pending = true;\n    return newAttachment;\n};\n\nconst fileExtensionIsValid = (filename: string): boolean => {\n    const ext = filename.split('.').pop();\n    return ext ? VALID_EXTENSIONS.includes(`.${ext.toLowerCase()}`) : false;\n};\n\nconst fileSizeIsValid = (filesizeInB: number): boolean => {\n    const filesizeInKb = filesizeInB * KILOBYTES_IN_BYTE;\n    return filesizeInKb <= MAX_FIL_STØRRELSE_KB;\n};\n\nconst uploadAttachment = async (attachment: Attachment, saveAttachment: SaveAttachment): Promise<void> => {\n    if (!fileExtensionIsValid(attachment.file.name)) {\n        attachment.pending = false;\n        attachment.error = FileUploadError.VALID_EXTENSION;\n        return;\n    }\n    if (!fileSizeIsValid(attachment.filesize)) {\n        attachment.pending = false;\n        attachment.error = FileUploadError.MAX_SIZE;\n        return;\n    }\n\n    try {\n        const response = await saveAttachment(attachment);\n        attachment.pending = false;\n        attachment.url = response.headers.location;\n        attachment.uploaded = true;\n        attachment.uuid = response.data;\n    } catch (error) {\n        // TODO Burde få ut feilmelding frå backend og vise denne\n        attachment.pending = false;\n\n        // @ts-ignore TODO Fix typing her (Mogleg  mykje av logikken her bør ligga inne i saveAttachment, så slepp ein da inn Axios her)\n        if (error?.response?.status === 408) {\n            attachment.error = FileUploadError.TIMEOUT;\n        } else {\n            attachment.error = FileUploadError.GENERAL;\n        }\n    }\n};\n\nconst EMPTY_ATTACHMENT_LIST = [] as Attachment[];\n\nexport interface Props {\n    updateAttachments: (attachments: Attachment[]) => void;\n    attachmentType: AttachmentType;\n    skjemanummer: Skjemanummer;\n    existingAttachments?: Attachment[];\n    saveAttachment: SaveAttachment;\n    multiple?: boolean;\n}\n\nconst FileUploader: React.FunctionComponent<Props> = ({\n    existingAttachments = EMPTY_ATTACHMENT_LIST,\n    updateAttachments,\n    attachmentType,\n    skjemanummer,\n    saveAttachment,\n    multiple = true,\n}) => {\n    const [attachments, setAttachments] = useState(existingAttachments);\n\n    useEffect(() => {\n        updateAttachments(attachments.filter((a) => !a.error && a.pending === false));\n    }, [attachments, updateAttachments]);\n\n    const saveFiles = useCallback(\n        (files: File[]) => {\n            const uploadAttachments = async (allPendingAttachments: Attachment[]) => {\n                for (const pendingAttachment of allPendingAttachments) {\n                    await uploadAttachment(pendingAttachment, saveAttachment);\n                    setAttachments((currentAttachments) =>\n                        currentAttachments.map((a) =>\n                            a.filename === pendingAttachment.filename ? pendingAttachment : a,\n                        ),\n                    );\n                }\n            };\n\n            const allPendingAttachments = files.map((file) =>\n                getPendingAttachmentFromFile(file, attachmentType, skjemanummer),\n            );\n            setAttachments((currentAttachments) => {\n                const otherAttachments = currentAttachments.filter(\n                    (ca) => !allPendingAttachments.some((pa) => pa.filename === ca.filename),\n                );\n                return otherAttachments.concat(allPendingAttachments);\n            });\n            uploadAttachments(allPendingAttachments);\n        },\n        [attachmentType, skjemanummer, saveAttachment],\n    );\n\n    const deleteAttachment = useCallback((file: Attachment) => {\n        setAttachments((currentAttachments) => currentAttachments.filter((a) => a.filename !== file.filename));\n    }, []);\n\n    const uploadedAttachments = useMemo(() => attachments.filter((a) => !a.error), [attachments]);\n    const failedAttachments = useMemo(() => attachments.filter((a) => !!a.error), [attachments]);\n\n    return (\n        <UiIntlProvider>\n            <VStack gap=\"6\">\n                <AttachmentList attachments={uploadedAttachments} showFileSize={true} onDelete={deleteAttachment} />\n                <FileInput\n                    accept={VALID_EXTENSIONS.join(', ')}\n                    onFilesSelect={saveFiles}\n                    hasUplodedAttachements={uploadedAttachments.length > 0}\n                    multiple={multiple}\n                />\n                <FailedAttachmentList failedAttachments={failedAttachments} onDelete={deleteAttachment} />\n            </VStack>\n        </UiIntlProvider>\n    );\n};\n\nexport default FileUploader;\n"],"names":["Skjemanummer","AttachmentType","FileInput","multiple","accept","onFilesSelect","hasUplodedAttachements","bem","bemUtils","onFileSelect","useCallback","e","files","inputElement","useRef","openFileDialog","jsxs","Fragment","jsx","Button","UploadIcon","FormattedMessage","useCustomIntl","intl","useIntl","i18nId","values","s4","guid","bytesString","bytes","Bytes","generateAttachmentId","mapFileToAttachment","file","type","skjemanummer","AttachmentInfo","attachment","showFileSize","onDelete","i18n","HStack","Loader","FileCheckmarkIcon","VStack","Link","Spacer","XMarkIcon","AttachmentList","props","attachments","Fragment2","FileUploadError","MAX_FIL_STØRRELSE_KB","FailedAttachment","failedAttachment","Alert","FailedAttachmentList","failedAttachments","VALID_EXTENSIONS","KILOBYTES_IN_BYTE","getPendingAttachmentFromFile","attachmentType","newAttachment","fileExtensionIsValid","filename","ext","fileSizeIsValid","filesizeInB","uploadAttachment","saveAttachment","response","error","_a","EMPTY_ATTACHMENT_LIST","FileUploader","existingAttachments","updateAttachments","setAttachments","useState","useEffect","a","saveFiles","uploadAttachments","allPendingAttachments2","pendingAttachment","currentAttachments","allPendingAttachments","ca","pa","deleteAttachment","uploadedAttachments","useMemo","UiIntlProvider","FileUploader$1"],"mappings":"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"}