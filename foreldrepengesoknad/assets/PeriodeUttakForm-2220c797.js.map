{"version":3,"file":"PeriodeUttakForm-2220c797.js","sources":["../../src/uttaksplan/components/tidsperiode-display/TidsperiodeDisplay.tsx","../../src/uttaksplan/utils/datoAvgrensningerUtils.ts","../../src/uttaksplan/components/uttaks-forms/tidsperiode-form/TidsperiodeForm.tsx","../../src/uttaksplan/assets/RangeIcon.tsx","../../src/uttaksplan/components/aria-text/AriaText.tsx","../../src/uttaksplan/utils/preventDoubleTapZoom.ts","../../src/uttaksplan/components/sirkelknapp/Sirkelknapp.tsx","../../src/uttaksplan/components/number-stepper/StepperKnapp.tsx","../../src/uttaksplan/components/number-stepper/NumberStepper.tsx","../../src/uttaksplan/components/uker-dager-teller/UkerDagerTeller.tsx","../../src/uttaksplan/components/uttak-endre-tidsperiode-spørsmål/UttakEndreTidsperiodeSpørsmål.tsx","../../src/uttaksplan/components/uttaks-forms/periode-uttak-form/periodeUttakFormConfig.ts","../../src/uttaksplan/components/uttaks-forms/spørsmål/er-mor-for-syk-dokumentasjon/MorErForSykDokumentasjonOpplastning.tsx","../../src/uttaksplan/components/uttaks-forms/spørsmål/er-mor-for-syk/ErMorForSykSpørsmål.tsx","../../src/uttaksplan/components/uttaks-forms/spørsmål/flerbarnsdager/FlerbarnsdagerSpørsmål.tsx","../../src/uttaksplan/components/uttaks-forms/spørsmål/hvem-skal-ha-uttak/HvemSkalHaUttakSpørsmål.tsx","../../src/uttaksplan/components/uttaks-forms/spørsmål/hvilken-konto/HvilkenKontoSpørsmål.tsx","../../src/app/types/UttakRundtFødselÅrsak.ts","../../src/uttaksplan/components/uttaks-forms/spørsmål/uttak-rundt-fødsel-årsak/UttakRundtFødselÅrsakSpørsmål.tsx","../../src/uttaksplan/components/uttaks-forms/spørsmål/overføringsårsak/OverføringsårsakSpørsmål.tsx","../../src/uttaksplan/utils/prosentValidering.ts","../../src/uttaksplan/components/uttaks-forms/spørsmål/samtidig-uttak/SamtidigUttakSpørsmål.tsx","../../src/uttaksplan/components/uttaks-forms/spørsmål/skal-ha-gradering/SkalHaGraderingSpørsmål.tsx","../../src/uttaksplan/components/uttaks-forms/submit-listener/SubmitListener.tsx","../../src/uttaksplan/utils/uttaksskjema/hvemSkalTaUttakSkalBesvares.ts","../../src/uttaksplan/utils/uttaksskjema/erMorForSykSkalBesvares.ts","../../src/uttaksplan/utils/uttaksskjema/graderingSkalBesvares.ts","../../src/uttaksplan/utils/uttaksskjema/graderingSkalBesvaresPgaWLBUttakRundtFødsel.ts","../../src/uttaksplan/utils/uttaksskjema/samtidigUttakSkalBesvares.ts","../../src/uttaksplan/utils/uttaksskjema/ønskerFlerbarnsdagerSkalBesvares.ts","../../src/uttaksplan/utils/uttaksskjema/overføringsårsakSkalBesvares.ts","../../src/uttaksplan/utils/uttaksskjema/uttakSkjemaregler.ts","../../src/uttaksplan/components/uttaks-forms/periode-uttak-form/periodeUttakFormQuestionsConfig.ts","../../src/uttaksplan/components/uttaks-forms/periode-uttak-form/periodeUttakFormUtils.ts","../../src/uttaksplan/components/uttaks-forms/spørsmål/aktivitetskrav/AktivitetskravSpørsmål.tsx","../../src/uttaksplan/components/uttaks-forms/periode-uttak-form/PeriodeUttakForm.tsx"],"sourcesContent":["import { IntlShape, useIntl } from 'react-intl';\nimport { formatDate, Block, intlUtils, TidsperiodeDate, bemUtils } from '@navikt/fp-common';\nimport { BodyShort, Label, Link } from '@navikt/ds-react';\n\nimport './tidsperiodeDisplay.less';\n\ninterface Props {\n    tidsperiode: Partial<TidsperiodeDate> | undefined;\n    toggleVisTidsperiode: () => void;\n}\n\nconst bem = bemUtils('tidsperiodeDisplay');\n\nconst formaterTidsperiodeDato = (dato: Date | undefined) => {\n    if (dato) {\n        return formatDate(dato);\n    }\n\n    return 'Ingen valgt dato';\n};\n\nconst renderTidsperiode = (tidsperiode: Partial<TidsperiodeDate> | undefined, intl: IntlShape) => {\n    if (tidsperiode) {\n        return (\n            <div className={bem.element('dato-container')}>\n                <div className={bem.element('dato')}>\n                    <Label>{`${intlUtils(intl, 'fraogmed')}:`}</Label>\n                    <BodyShort>{formaterTidsperiodeDato(tidsperiode.fom)}</BodyShort>\n                </div>\n                <div className={bem.element('dato')}>\n                    <Label>{`${intlUtils(intl, 'tilogmed')}:`}</Label>\n                    <BodyShort>{formaterTidsperiodeDato(tidsperiode.tom)}</BodyShort>\n                </div>\n            </div>\n        );\n    }\n\n    return 'Ingen valgt tidsperiode';\n};\n\nconst TidsperiodeDisplay: React.FunctionComponent<Props> = ({ tidsperiode, toggleVisTidsperiode }) => {\n    const intl = useIntl();\n\n    return (\n        <Block padBottom=\"l\">\n            <Label>Tidsrom</Label>\n            <div className={bem.block}>\n                {renderTidsperiode(tidsperiode, intl)}\n                <Link\n                    href=\"#\"\n                    onClick={(e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        toggleVisTidsperiode();\n                    }}\n                >\n                    <BodyShort>Endre tidsrom</BodyShort>\n                </Link>\n            </div>\n        </Block>\n    );\n};\n\nexport default TidsperiodeDisplay;\n","import { Tidsperiode, TidsperiodeDate } from '@navikt/fp-common';\nimport { isValidTidsperiode, Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { uttaksplanDatoavgrensninger } from 'app/steps/uttaksplan-info/utils/uttaksplanDatoavgrensninger';\nimport { ISOStringToDate } from 'app/utils/dateUtils';\nimport { getFørsteUttaksdag2UkerFørFødsel, getSisteUttaksdag6UkerEtterFødsel } from 'app/utils/wlbUtils';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { getFørsteMuligeUttaksdag, getSisteMuligeUttaksdag } from './uttaksdatoerUtils';\nimport { DatepickerLimitations } from '@navikt/ds-datepicker';\nimport { dateToISOString } from '@navikt/sif-common-formik-ds/lib';\n\nexport interface DatoAvgrensninger {\n    fra: Avgrensninger;\n    til: Avgrensninger;\n}\n\nexport interface Avgrensninger {\n    minDato: Date;\n    maksDato: Date;\n    ugyldigeTidsperioder?: Tidsperiode[];\n    helgedagerIkkeTillatt: boolean;\n}\n\nexport const getDatoavgrensningerForFarMedmorPeriodeRundtFødselWLB = (\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    ugyldigeTidsperioder: Tidsperiode[] | undefined\n): DatoAvgrensninger => {\n    const minDato = getFørsteUttaksdag2UkerFørFødsel(familiehendelsesdato, termindato);\n    const maksDato = getSisteUttaksdag6UkerEtterFødsel(familiehendelsesdato);\n    return {\n        fra: {\n            minDato,\n            maksDato,\n            helgedagerIkkeTillatt: true,\n            ugyldigeTidsperioder,\n        },\n        til: {\n            minDato,\n            maksDato,\n            helgedagerIkkeTillatt: true,\n            ugyldigeTidsperioder,\n        },\n    };\n};\n\nexport const getDatoavgrensningerForStønadskonto = (\n    konto: StønadskontoType | undefined,\n    familiehendelsesdato: Date,\n    tidsperiode: Partial<TidsperiodeDate> | undefined,\n    ugyldigeTidsperioder: Tidsperiode[] | undefined,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined\n): DatoAvgrensninger => {\n    if (konto === undefined) {\n        return getDatoavgrensningerForPeriodeUtenKonto(\n            familiehendelsesdato,\n            ugyldigeTidsperioder,\n            erFarEllerMedmor,\n            termindato\n        );\n    }\n    if (konto === StønadskontoType.ForeldrepengerFørFødsel) {\n        return getDatoavgrensningerForForeldrepengerFørFødsel(familiehendelsesdato);\n    }\n    if (isValidTidsperiode(tidsperiode) && Tidsperioden(tidsperiode).erFørDato(familiehendelsesdato)) {\n        return getDatoavgrensningerForEkstrauttakFørTermin(familiehendelsesdato, termindato);\n    }\n\n    const standardAvgrensninger = standardAvgrensningerForUttakEtterFødsel(familiehendelsesdato);\n\n    return {\n        fra: {\n            ...standardAvgrensninger,\n            ugyldigeTidsperioder,\n        },\n        til: {\n            ...standardAvgrensninger,\n            ugyldigeTidsperioder,\n        },\n    };\n};\n\nconst getDatoavgrensningerForPeriodeUtenKonto = (\n    familiehendelsesdato: Date,\n    ugyldigeTidsperioder: Tidsperiode[] | undefined,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined\n) => {\n    const minDato = getFørsteMuligeUttaksdag(familiehendelsesdato, erFarEllerMedmor, termindato);\n\n    return {\n        fra: {\n            minDato,\n            maksDato: getSisteMuligeUttaksdag(familiehendelsesdato),\n            ugyldigeTidsperioder,\n            helgedagerIkkeTillatt: true,\n        },\n        til: {\n            minDato,\n            maksDato: getSisteMuligeUttaksdag(familiehendelsesdato),\n            ugyldigeTidsperioder,\n            helgedagerIkkeTillatt: true,\n        },\n    };\n};\n\nconst standardAvgrensningerForUttakEtterFødsel = (familiehendelsesdato: Date): Avgrensninger => {\n    return {\n        helgedagerIkkeTillatt: true,\n        minDato: Uttaksdagen(familiehendelsesdato).denneEllerNeste(),\n        maksDato: getSisteMuligeUttaksdag(familiehendelsesdato),\n    };\n};\n\nconst getDatoavgrensningerForForeldrepengerFørFødsel = (familiehendelsesdato: Date): DatoAvgrensninger => {\n    const avgrensninger: DatepickerLimitations = {\n        ...standardAvgrensningerForUttakEtterFødsel,\n        ...uttaksplanDatoavgrensninger.startdatoFørTerminForeldrepengerFørFødselKonto(\n            dateToISOString(familiehendelsesdato)\n        ),\n    };\n\n    return {\n        fra: {\n            helgedagerIkkeTillatt: !!avgrensninger.weekendsNotSelectable,\n            minDato: ISOStringToDate(avgrensninger.minDate)!,\n            maksDato: ISOStringToDate(avgrensninger.maxDate)!,\n        },\n        til: {\n            helgedagerIkkeTillatt: !!avgrensninger.weekendsNotSelectable,\n            minDato: ISOStringToDate(avgrensninger.minDate)!,\n            maksDato: ISOStringToDate(avgrensninger.maxDate)!,\n        },\n    };\n};\n\nconst getDatoavgrensningerForEkstrauttakFørTermin = (\n    familiehendelsesdato: Date,\n    termindato: Date | undefined\n): DatoAvgrensninger => {\n    const datoÅRegneFra = termindato !== undefined ? termindato : familiehendelsesdato;\n    const avgrensninger: DatepickerLimitations = {\n        ...standardAvgrensningerForUttakEtterFødsel,\n        ...uttaksplanDatoavgrensninger.ekstrauttakFørFødsel(dateToISOString(datoÅRegneFra)),\n    };\n\n    return {\n        fra: {\n            helgedagerIkkeTillatt: !!avgrensninger.weekendsNotSelectable,\n            minDato: ISOStringToDate(avgrensninger.minDate)!,\n            maksDato: ISOStringToDate(avgrensninger.maxDate)!,\n        },\n        til: {\n            helgedagerIkkeTillatt: !!avgrensninger.weekendsNotSelectable,\n            minDato: ISOStringToDate(avgrensninger.minDate)!,\n            maksDato: ISOStringToDate(avgrensninger.maxDate)!,\n        },\n    };\n};\n\nexport const getDatoavgrensningerForBareFarMedmorHarRettWLB = (\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    ugyldigeTidsperioder: Tidsperiode[] | undefined\n): DatoAvgrensninger => {\n    const minDato = getFørsteUttaksdag2UkerFørFødsel(familiehendelsesdato, termindato);\n    const maksDato = getSisteMuligeUttaksdag(familiehendelsesdato);\n    return {\n        fra: {\n            minDato,\n            maksDato,\n            helgedagerIkkeTillatt: true,\n            ugyldigeTidsperioder,\n        },\n        til: {\n            minDato,\n            maksDato,\n            helgedagerIkkeTillatt: true,\n            ugyldigeTidsperioder,\n        },\n    };\n};\n","import { intlUtils, Tidsperiode, Block, TidsperiodeDate } from '@navikt/fp-common';\nimport dayjs from 'dayjs';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { isUtsettelsesperiode, isUttaksperiode, Periode, Utsettelsesperiode } from 'uttaksplan/types/Periode';\nimport { andreAugust2022ReglerGjelder, dateRangeValidation, ISOStringToDate } from 'app/utils/dateUtils';\nimport {\n    DatoAvgrensninger,\n    getDatoavgrensningerForBareFarMedmorHarRettWLB,\n    getDatoavgrensningerForFarMedmorPeriodeRundtFødselWLB,\n    getDatoavgrensningerForStønadskonto,\n} from 'uttaksplan/utils/datoAvgrensningerUtils';\nimport { mapTidsperiodeStringToTidsperiode } from 'uttaksplan/utils/periodeUtils';\nimport { getFørsteMuligeUttaksdag, getFørsteUttaksdagPåEllerEtterFødsel } from 'uttaksplan/utils/uttaksdatoerUtils';\nimport { isUttaksperiodeBareFarMedmorHarRett, isUttaksperiodeFarMedmorPgaFødsel } from 'app/utils/wlbUtils';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { dateToISOString, getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\nimport { Button } from '@navikt/ds-react';\n\ninterface Props {\n    periode?: Periode;\n    tidsperiode: TidsperiodeDate;\n    familiehendelsesdato: Date;\n    ugyldigeTidsperioder: Tidsperiode[] | undefined;\n    utsettelserIPlan: Utsettelsesperiode[];\n    erFarEllerMedmor: boolean;\n    morHarRett: boolean;\n    onBekreft: (tidsperiode: Partial<Tidsperiode>) => void;\n    onCancel?: () => void;\n    initialMonth?: Date;\n    termindato?: Date;\n    situasjon: Situasjon;\n    erFarMedmorOgHarAleneomsorg: boolean;\n}\n\nenum TidsperiodeFormFields {\n    fom = 'fom',\n    tom = 'tom',\n}\n\nexport type TidsperiodeFormValues = Partial<Tidsperiode>;\n\nconst Form = getTypedFormComponents<TidsperiodeFormFields, TidsperiodeFormValues>();\n\nconst getDatoAvgrensninger = (\n    periode: Periode | undefined,\n    familiehendelsesdato: Date,\n    fom: string | undefined,\n    tom: string | undefined,\n    tidsperiode: Partial<TidsperiodeDate>,\n    ugyldigeTidsperioder: Tidsperiode[] | undefined,\n    termindato: Date | undefined,\n    erFarEllerMedmor: boolean,\n    morHarRett: boolean,\n    situasjon: Situasjon,\n    erFarMedmorOgHarAleneomsorg: boolean\n): DatoAvgrensninger => {\n    if (periode && !isUtsettelsesperiode(periode)) {\n        if (\n            isUttaksperiodeFarMedmorPgaFødsel(periode, familiehendelsesdato, termindato) &&\n            andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n            situasjon === 'fødsel'\n        ) {\n            return getDatoavgrensningerForFarMedmorPeriodeRundtFødselWLB(\n                familiehendelsesdato,\n                termindato,\n                ugyldigeTidsperioder\n            );\n        }\n        if (\n            isUttaksperiodeBareFarMedmorHarRett(periode, morHarRett) &&\n            andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n            situasjon === 'fødsel'\n        ) {\n            return getDatoavgrensningerForBareFarMedmorHarRettWLB(\n                familiehendelsesdato,\n                termindato,\n                ugyldigeTidsperioder\n            );\n        }\n        return getDatoavgrensningerForStønadskonto(\n            isUttaksperiode(periode) ? periode.konto : undefined,\n            familiehendelsesdato,\n            mapTidsperiodeStringToTidsperiode({ fom, tom }),\n            ugyldigeTidsperioder,\n            erFarEllerMedmor,\n            termindato\n        );\n    }\n\n    const førsteMuligeUttaksdag = erFarMedmorOgHarAleneomsorg\n        ? getFørsteUttaksdagPåEllerEtterFødsel(familiehendelsesdato)\n        : getFørsteMuligeUttaksdag(familiehendelsesdato, erFarEllerMedmor, termindato);\n\n    return {\n        fra: {\n            minDato: førsteMuligeUttaksdag,\n            maksDato: tidsperiode\n                ? ISOStringToDate(tom)!\n                : dayjs(familiehendelsesdato).add(3, 'years').subtract(1, 'day').toDate(),\n            ugyldigeTidsperioder,\n            helgedagerIkkeTillatt: true,\n        },\n        til: {\n            minDato: tidsperiode ? ISOStringToDate(fom)! : førsteMuligeUttaksdag,\n            maksDato: dayjs(familiehendelsesdato).add(3, 'years').subtract(1, 'day').toDate(),\n            ugyldigeTidsperioder,\n            helgedagerIkkeTillatt: true,\n        },\n    };\n};\n\nconst TidsperiodeForm: React.FunctionComponent<Props> = ({\n    periode,\n    tidsperiode,\n    familiehendelsesdato,\n    ugyldigeTidsperioder,\n    utsettelserIPlan,\n    initialMonth,\n    termindato,\n    erFarEllerMedmor,\n    morHarRett,\n    situasjon,\n    onBekreft,\n    onCancel,\n    erFarMedmorOgHarAleneomsorg,\n}) => {\n    const intl = useIntl();\n\n    return (\n        <Form.FormikWrapper\n            initialValues={{ fom: dateToISOString(tidsperiode.fom), tom: dateToISOString(tidsperiode.tom) }}\n            onSubmit={onBekreft}\n            enableReinitialize={true}\n            renderForm={({ values }) => {\n                const datoAvgrensninger = getDatoAvgrensninger(\n                    periode,\n                    familiehendelsesdato,\n                    values.fom,\n                    values.tom,\n                    tidsperiode,\n                    ugyldigeTidsperioder,\n                    termindato,\n                    erFarEllerMedmor,\n                    morHarRett,\n                    situasjon,\n                    erFarMedmorOgHarAleneomsorg\n                );\n\n                return (\n                    <Form.Form onCancel={onCancel} includeButtons={false}>\n                        <Block>\n                            <Form.DateIntervalPicker\n                                legend={intlUtils(intl, 'utenlandsopphold.leggTilUtenlandsopphold.tidsrom')}\n                                fromDatepickerProps={{\n                                    name: TidsperiodeFormFields.fom,\n                                    disableWeekend: true,\n                                    label: intlUtils(intl, 'utenlandsopphold.leggTilUtenlandsopphold.fraogmed'),\n                                    fullscreenOverlay: true,\n                                    placeholder: 'dd.mm.åååå',\n                                    minDate: datoAvgrensninger.fra.minDato,\n                                    maxDate: datoAvgrensninger.fra.maksDato,\n                                    validate: (value) =>\n                                        dateRangeValidation.validateFromDateInRange({\n                                            intl,\n                                            date: ISOStringToDate(value),\n                                            minDate: datoAvgrensninger.fra.minDato,\n                                            maxDate: datoAvgrensninger.fra.maksDato,\n                                            errorKey: 'valideringsfeil.fraOgMedDato.førTilDato',\n                                            toDate: ISOStringToDate(values.tom),\n                                            disableWeekend: datoAvgrensninger.fra.helgedagerIkkeTillatt,\n                                            utsettelserIPlan: utsettelserIPlan,\n                                            periodeId: periode !== undefined ? periode.id : undefined,\n                                        }),\n                                    dayPickerProps: {\n                                        defaultMonth: initialMonth || familiehendelsesdato,\n                                    },\n                                }}\n                                toDatepickerProps={{\n                                    name: TidsperiodeFormFields.tom,\n                                    disableWeekend: true,\n                                    label: intlUtils(intl, 'utenlandsopphold.leggTilUtenlandsopphold.tilogmed'),\n                                    fullscreenOverlay: true,\n                                    placeholder: 'dd.mm.åååå',\n                                    minDate: ISOStringToDate(values.fom) || familiehendelsesdato,\n                                    maxDate: datoAvgrensninger.til.maksDato,\n                                    validate: (value) =>\n                                        dateRangeValidation.validateToDateInRange({\n                                            intl,\n                                            date: ISOStringToDate(value),\n                                            minDate: datoAvgrensninger.til.minDato,\n                                            maxDate: datoAvgrensninger.til.maksDato,\n                                            errorKey: 'valideringsfeil.tilOgMedDato.etterFraDato',\n                                            fromDate: ISOStringToDate(values.fom),\n                                            disableWeekend: datoAvgrensninger.til.helgedagerIkkeTillatt,\n                                            utsettelserIPlan: utsettelserIPlan,\n                                            periodeId: periode !== undefined ? periode.id : undefined,\n                                        }),\n                                    dayPickerProps: {\n                                        defaultMonth: ISOStringToDate(values.fom),\n                                    },\n                                }}\n                            />\n                        </Block>\n                        <Button type=\"submit\">\n                            <FormattedMessage id=\"uttaksplan.gåVidere\" />\n                        </Button>\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default TidsperiodeForm;\n","import { Component } from 'react';\n\ninterface RangeIconProps {\n    type: 'plus' | 'minus';\n}\n\nexport default class RangeIcon extends Component<RangeIconProps> {\n    renderPlusIcon() {\n        return (\n            <path\n                d=\"M18.2616283,12.5217391 L12.5222595,12.5217391 L12.5222595,18.2608696 C12.5222595,18.5488696 12.2874672,18.7826087 12.0004988,18.7826087 C11.7124868,18.7826087 11.478738,18.5488696 11.478738,18.2608696 L11.478738,12.5217391 L5.73936926,12.5217391 C5.4513573,12.5206957 5.21656494,12.288 5.21760846,12 C5.21760846,11.7130435 5.4513573,11.4782609 5.73936926,11.4782609 L11.478738,11.4782609 L11.478738,5.73913043 C11.478738,5.45113043 11.7124868,5.2173913 12.0004988,5.2173913 C12.2874672,5.2173913 12.5222595,5.45113043 12.5222595,5.73913043 L12.5222595,11.4782609 L18.2616283,11.4782609 C18.5485967,11.4782609 18.7844326,11.712 18.783389,12 C18.783389,12.288 18.5496402,12.5217391 18.2616283,12.5217391 Z\"\n                id=\"Inner\"\n                fill=\"#FFFFFF\"\n            />\n        );\n    }\n\n    renderMinusIcon() {\n        return (\n            <path\n                d=\"M18.2616283,12.5217391 L5.73936926,12.5217391 C5.4513573,12.5206957 5.21656494,12.288 5.21760846,12 C5.21760846,11.7130435 5.4513573,11.4782609 5.73936926,11.4782609 L18.2616283,11.4782609 C18.5485967,11.4782609 18.7844326,11.712 18.783389,12 C18.783389,12.288 18.5496402,12.5217391 18.2616283,12.5217391 Z\"\n                id=\"Inner\"\n                fill=\"#FFFFFF\"\n            />\n        );\n    }\n\n    render() {\n        const { type } = this.props;\n        const icon = type === 'minus' ? this.renderMinusIcon() : this.renderPlusIcon();\n\n        return (\n            <svg\n                focusable=\"false\"\n                role=\"img\"\n                aria-hidden=\"true\"\n                width=\"24px\"\n                height=\"24px\"\n                viewBox=\"0 0 24 24\"\n                className=\"rangeIcon\"\n            >\n                <g id=\"Icons/subtract/default\" stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\n                    {icon}\n                </g>\n            </svg>\n        );\n    }\n}\n","import { FunctionComponent, ReactNode, createElement } from 'react';\n\n/**\n *  Skjuler tekst slik at den ikke er synlig på skjerm, men leses av skjermleser\n */\nexport interface AriaTextProps {\n    id?: string;\n    children?: ReactNode;\n    tag?: string;\n}\n\nconst AriaText: FunctionComponent<AriaTextProps> = ({ id, children, tag }) => {\n    const tagName = tag || 'span';\n    return createElement(tagName, { id, className: 'sr-only' }, children);\n};\n\nexport default AriaText;\n","// Ensure touches occur rapidly\nconst delay = 500;\n// Sequential touches must be in close vicinity\nconst minZoomTouchDelta = 10;\n\n// Track state of the last touch\nlet lastTapAt = 0;\nlet lastClientX = 0;\nlet lastClientY = 0;\n\nexport default function preventDoubleTapZoom(event: React.TouchEvent<any>) {\n    // Exit early if this involves more than one finger (e.g. pinch to zoom)\n    if (event.touches.length > 1) {\n        return;\n    }\n\n    const tapAt = new Date().getTime();\n    const timeDiff = tapAt - lastTapAt;\n    const { clientX, clientY } = event.touches[0];\n    const xDiff = Math.abs(lastClientX - clientX);\n    const yDiff = Math.abs(lastClientY - clientY);\n    if (xDiff < minZoomTouchDelta && yDiff < minZoomTouchDelta && event.touches.length === 1 && timeDiff < delay) {\n        event.preventDefault();\n        // Trigger a fake click for the tap we just prevented\n        (event.target as any).click();\n    }\n    lastClientX = clientX;\n    lastClientY = clientY;\n    lastTapAt = tapAt;\n}\n","import classnames from 'classnames';\nimport AriaText from '../aria-text/AriaText';\nimport preventDoubleTapZoom from 'uttaksplan/utils/preventDoubleTapZoom';\n\nimport './sirkelknapp.less';\nimport { guid } from '@navikt/fp-common';\n\nexport type Stil = 'hvit' | 'bla' | 'info';\n\nexport interface SirkelknappProps {\n    /** Tekst som blir lest opp og satt som tittel på knappen */\n    ariaLabel: string;\n    /** Ikon som brukes inne i knappen */\n    ikon: React.ReactNode;\n    /** Funksjon som kalles knappen klikkes på */\n    onClick: () => void;\n    /** Om knappen er disabled eller ikke. Default false. */\n    disabled?: boolean;\n    /** Om knappen skal ha tilstanded pressed/valgt. Default false. */\n    toggle?: {\n        pressed: boolean;\n    };\n    /** Layout varianter */\n    stil?: Stil;\n    /** Størrelse - default normal */\n    size?: 'normal' | 'stor';\n    posisjoneringFraHøyre?: number;\n}\n\nconst Sirkelknapp: React.FunctionComponent<SirkelknappProps> = ({\n    onClick,\n    ariaLabel,\n    ikon,\n    toggle,\n    disabled,\n    stil = 'info',\n    size = 'normal',\n    posisjoneringFraHøyre,\n}) => {\n    const labelId = guid();\n    return (\n        <button\n            style={{ left: posisjoneringFraHøyre }}\n            type=\"button\"\n            onClick={() => onClick()}\n            onTouchStart={preventDoubleTapZoom}\n            aria-labelledby={labelId}\n            className={classnames(`sirkelknapp`, `sirkelknapp--${stil}`, `sirkelknapp--${size}`, {\n                'sirkelknapp--pressed': toggle && toggle.pressed,\n                'sirkelknapp--disabled': disabled,\n            })}\n            disabled={disabled}\n            aria-pressed={toggle ? toggle.pressed : undefined}\n        >\n            <span className=\"sirkelknapp__ikon\" role=\"presentation\">\n                {ikon}\n            </span>\n            <AriaText id={labelId}>{ariaLabel}</AriaText>\n        </button>\n    );\n};\n\nexport default Sirkelknapp;\n","import RangeIcon from 'uttaksplan/assets/RangeIcon';\nimport Sirkelknapp from '../sirkelknapp/Sirkelknapp';\n\nexport type Direction = 'next' | 'previous';\n\nexport interface Props {\n    onClick: () => void;\n    direction: Direction;\n    label: string;\n    disabled?: boolean;\n}\n\nconst StepperKnapp: React.FunctionComponent<Props> = ({ direction, onClick, label, disabled }) => (\n    <Sirkelknapp\n        stil=\"hvit\"\n        onClick={() => onClick()}\n        ariaLabel={label}\n        disabled={disabled}\n        ikon={direction === 'previous' ? <RangeIcon type=\"minus\" /> : <RangeIcon type=\"plus\" />}\n    />\n);\n\nexport default StepperKnapp;\n","import StepperKnapp from './StepperKnapp';\nimport { bemUtils } from '@navikt/fp-common';\n\nimport './numberStepper.less';\n\nexport interface Props {\n    value: number;\n    increaseAriaLabel: string;\n    decreaseAriaLabel: string;\n    stepSize?: number;\n    max?: number;\n    min?: number;\n    onChange: (value: number) => void;\n    legendId?: string;\n}\n\nconst bem = bemUtils('numberStepper');\n\nconst NumberStepper: React.FunctionComponent<Props> = ({\n    value,\n    min,\n    max,\n    stepSize = 1,\n    legendId,\n    onChange,\n    increaseAriaLabel,\n    decreaseAriaLabel,\n}) => {\n    const canDecrease = min === undefined || value > min;\n    const canIncrease = max === undefined || value < max;\n    return (\n        <div className={bem.block}>\n            <div className={bem.element('decrease')}>\n                <StepperKnapp\n                    direction=\"previous\"\n                    disabled={canDecrease === false}\n                    onClick={() => onChange(value - stepSize)}\n                    label={decreaseAriaLabel}\n                />\n            </div>\n            <div className={bem.element('input')}>\n                <input\n                    type=\"number\"\n                    value={value}\n                    onChange={(evt) => onChange(parseInt(evt.target.value, 10))}\n                    aria-labelledby={legendId}\n                />\n            </div>\n            <div className={bem.element('increase')}>\n                <StepperKnapp\n                    direction=\"next\"\n                    disabled={canIncrease === false}\n                    onClick={() => onChange(value + stepSize)}\n                    label={increaseAriaLabel}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default NumberStepper;\n","import { Label } from '@navikt/ds-react';\nimport Fieldset from 'app/components/fieldset/Fieldset';\nimport { Block, bemUtils, guid } from '@navikt/fp-common';\nimport NumberStepper, { Props as NumberStepperProps } from './../number-stepper/NumberStepper';\n\nimport './ukerDagerTeller.less';\n\nexport interface Props {\n    ukeLegend: string;\n    dagLegend: string;\n    ukeStepper: NumberStepperProps;\n    dagStepper: NumberStepperProps;\n}\n\nconst UkerDagerTeller: React.FunctionComponent<Props> = ({ ukeStepper, dagStepper, ukeLegend, dagLegend }) => {\n    const bem = bemUtils('ukerDagerTeller');\n    const ukeLegendId = guid();\n    const dagLegendId = guid();\n    return (\n        <>\n            <legend>\n                <Label as=\"span\">Varighet på perioden</Label>\n            </legend>\n            <div className={bem.block}>\n                <div className={bem.element('ukerFelt')}>\n                    <Block padBottom=\"l\">\n                        <Fieldset legend={<span id={ukeLegendId}>{ukeLegend}</span>}>\n                            <NumberStepper {...ukeStepper} legendId={ukeLegendId} />\n                        </Fieldset>\n                    </Block>\n                </div>\n                <Fieldset legend={<span id={dagLegendId}>{dagLegend}</span>}>\n                    <NumberStepper {...dagStepper} legendId={dagLegendId} />\n                </Fieldset>\n            </div>\n        </>\n    );\n};\n\nexport default UkerDagerTeller;\n","import { useIntl } from 'react-intl';\nimport { isForeldrepengerFørFødselUttaksperiode, Periode, Utsettelsesperiode } from 'uttaksplan/types/Periode';\nimport dayjs from 'dayjs';\nimport { getTidsperiode, Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport TidsperiodeForm, { TidsperiodeFormValues } from '../uttaks-forms/tidsperiode-form/TidsperiodeForm';\nimport { Block, intlUtils, Tidsperiode, TidsperiodeDate } from '@navikt/fp-common';\nimport { getUkerOgDagerFromDager } from 'app/utils/dateUtils';\nimport UkerDagerTeller from './../uker-dager-teller/UkerDagerTeller';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { Modal } from '@navikt/ds-react';\n\ninterface Props {\n    periode: Periode;\n    tidsperiode: TidsperiodeDate;\n    familiehendelsesdato: Date;\n    ugyldigeTidsperioder: Tidsperiode[] | undefined;\n    utsettelserIPlan: Utsettelsesperiode[];\n    visible: boolean;\n    onAvbryt: () => void;\n    onBekreft: (tidsperiode: TidsperiodeFormValues) => void;\n    changeTidsperiode: (tidsperiode: Partial<TidsperiodeDate>) => void;\n    erFarEllerMedmor: boolean;\n    morHarRett: boolean;\n    situasjon: Situasjon;\n    erFarMedmorOgHarAleneomsorg: boolean;\n    termindato?: Date;\n}\n\nconst UttakEndreTidsperiodeSpørsmål: React.FunctionComponent<Props> = ({\n    onBekreft,\n    onAvbryt,\n    changeTidsperiode,\n    visible,\n    periode,\n    tidsperiode,\n    familiehendelsesdato,\n    ugyldigeTidsperioder,\n    utsettelserIPlan,\n    termindato,\n    erFarEllerMedmor,\n    morHarRett,\n    situasjon,\n    erFarMedmorOgHarAleneomsorg,\n}) => {\n    const intl = useIntl();\n    const erForeldrepengerFørFødsel = isForeldrepengerFørFødselUttaksperiode(periode);\n    const initialMonth = erForeldrepengerFørFødsel ? familiehendelsesdato : undefined;\n    const varighetIDager = dayjs(tidsperiode.fom).isSameOrBefore(tidsperiode.tom, 'day')\n        ? Tidsperioden({\n              fom: tidsperiode.fom,\n              tom: tidsperiode.tom,\n          }).getAntallUttaksdager()\n        : undefined;\n    const { uker, dager } = varighetIDager ? getUkerOgDagerFromDager(Math.abs(varighetIDager)) : { uker: 0, dager: 0 };\n    const handleOnSubmit = (values: TidsperiodeFormValues) => {\n        onBekreft(values);\n    };\n\n    const getDagValue = (uker: number, dager: number): number => {\n        if (dager >= 5) {\n            return 0;\n        }\n\n        if (uker === 0 && dager === 0) {\n            return 1;\n        }\n\n        return dager;\n    };\n\n    return (\n        <>\n            <Modal open={visible} closeButton={true} onClose={onAvbryt} aria-label=\"Endre tidsperiode\">\n                <Modal.Content>\n                    <TidsperiodeForm\n                        familiehendelsesdato={familiehendelsesdato}\n                        onBekreft={handleOnSubmit}\n                        periode={periode}\n                        tidsperiode={tidsperiode}\n                        ugyldigeTidsperioder={ugyldigeTidsperioder}\n                        utsettelserIPlan={utsettelserIPlan}\n                        initialMonth={initialMonth}\n                        termindato={termindato}\n                        erFarEllerMedmor={erFarEllerMedmor}\n                        morHarRett={morHarRett}\n                        situasjon={situasjon}\n                        erFarMedmorOgHarAleneomsorg={erFarMedmorOgHarAleneomsorg}\n                    />\n                </Modal.Content>\n            </Modal>\n            <Block padBottom=\"m\">\n                <UkerDagerTeller\n                    ukeLegend={intlUtils(intl, 'uker.label')}\n                    dagLegend={intlUtils(intl, 'dager.label')}\n                    ukeStepper={{\n                        value: uker !== undefined ? uker : 0,\n                        min: 0,\n                        max: 100,\n                        onChange: (nyUker: number) => {\n                            const date = tidsperiode.fom;\n                            if (date) {\n                                changeTidsperiode({\n                                    fom: date,\n                                    tom: getTidsperiode(date, Math.min(nyUker, 200) * 5 + getDagValue(nyUker, dager))\n                                        .tom,\n                                });\n                            }\n                        },\n                        increaseAriaLabel: 'Øk antall uker med en uke',\n                        decreaseAriaLabel: 'Mink antall uker med en uke',\n                    }}\n                    dagStepper={{\n                        value: getDagValue(uker, dager),\n                        min: uker === 0 ? 1 : 0,\n                        max: 5,\n                        onChange: (nyDager: number) => {\n                            const date = tidsperiode.fom;\n                            const ekstraUke = nyDager === 5 ? 1 : 0;\n\n                            if (date) {\n                                changeTidsperiode({\n                                    fom: date,\n                                    tom: getTidsperiode(date, (uker + ekstraUke) * 5 + getDagValue(uker, nyDager)).tom,\n                                });\n                            }\n                        },\n                        increaseAriaLabel: 'Øk antall dager med en dag',\n                        decreaseAriaLabel: 'Mink antall dager med en dag',\n                    }}\n                />\n            </Block>\n        </>\n    );\n};\n\nexport default UttakEndreTidsperiodeSpørsmål;\n","import { YesOrNo, getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\nimport { Attachment } from 'app/types/Attachment';\nimport { Forelder } from 'app/types/Forelder';\nimport { UttakRundtFødselÅrsak } from 'app/types/UttakRundtFødselÅrsak';\nimport { MorsAktivitet } from 'uttaksplan/types/MorsAktivitet';\nimport { OverføringÅrsakType } from 'uttaksplan/types/OverføringÅrsakType';\nimport { Arbeidsform } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\n\nexport enum PeriodeUttakFormField {\n    fom = 'fom',\n    tom = 'tom',\n    konto = 'konto',\n    samtidigUttak = 'samtidigUttak',\n    aktivitetskravMor = 'aktivitetskravMor',\n    aktivitetskravMorDokumentasjon = 'aktivitetskravMorDokumentasjon',\n    overføringsårsak = 'overføringsårsak',\n    overføringsdokumentasjon = 'overføringsdokumentasjon',\n    skalHaGradering = 'skalHaGradering',\n    stillingsprosent = 'stillingsprosent',\n    arbeidsformer = 'arbeidsformer',\n    erMorForSyk = 'erMorForSyk',\n    erMorForSykDokumentasjon = 'erMorForSykDokumentasjon',\n    uttakRundtFødselÅrsak = 'uttakRundtFødselÅrsak',\n    samtidigUttakProsent = 'samtidigUttakProsent',\n    hvemSkalTaUttak = 'hvemSkalTaUttak',\n    ønskerFlerbarnsdager = 'ønskerFlerbarnsdager',\n}\n\nexport interface PeriodeUttakFormData {\n    [PeriodeUttakFormField.fom]: Date | undefined;\n    [PeriodeUttakFormField.tom]: Date | undefined;\n    [PeriodeUttakFormField.konto]: StønadskontoType | '';\n    [PeriodeUttakFormField.samtidigUttak]: YesOrNo;\n    [PeriodeUttakFormField.aktivitetskravMor]: MorsAktivitet | '';\n    [PeriodeUttakFormField.aktivitetskravMorDokumentasjon]: Attachment[];\n    [PeriodeUttakFormField.overføringsårsak]: OverføringÅrsakType | '';\n    [PeriodeUttakFormField.overføringsdokumentasjon]: Attachment[];\n    [PeriodeUttakFormField.skalHaGradering]: YesOrNo;\n    [PeriodeUttakFormField.stillingsprosent]: string;\n    [PeriodeUttakFormField.arbeidsformer]: Arbeidsform | '';\n    [PeriodeUttakFormField.erMorForSyk]: YesOrNo;\n    [PeriodeUttakFormField.erMorForSykDokumentasjon]: Attachment[];\n    [PeriodeUttakFormField.uttakRundtFødselÅrsak]: UttakRundtFødselÅrsak | '';\n    [PeriodeUttakFormField.samtidigUttakProsent]: string;\n    [PeriodeUttakFormField.hvemSkalTaUttak]: Forelder | '';\n    [PeriodeUttakFormField.ønskerFlerbarnsdager]: YesOrNo;\n}\n\nexport const PeriodeUttakFormComponents = getTypedFormComponents<PeriodeUttakFormField, PeriodeUttakFormData>();\n","import { Block } from '@navikt/fp-common';\nimport FormikFileUploader from 'app/components/formik-file-uploader/FormikFileUploader';\nimport { Attachment } from 'app/types/Attachment';\nimport { AttachmentType } from 'app/types/AttachmentType';\nimport { Skjemanummer } from 'app/types/Skjemanummer';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\nimport { GuidePanel } from '@navikt/ds-react';\n\ninterface Props {\n    vedlegg: Attachment[];\n    navnMor: string;\n    isOpen: boolean;\n}\n\nconst MorErForSykDokumentasjonOpplastning: FunctionComponent<Props> = ({ navnMor, vedlegg, isOpen }) => {\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <GuidePanel>\n                    <FormattedMessage id=\"uttaksplan.erMorForSykVeileder\" values={{ navn: navnMor }} />\n                </GuidePanel>\n            </Block>\n            <Block visible={isOpen}>\n                <FormikFileUploader\n                    legend=\"Dokumentasjon for mors sykdom\"\n                    label=\"Last opp dokumentasjon for mors sykdom\"\n                    name={PeriodeUttakFormField.erMorForSykDokumentasjon}\n                    attachmentType={AttachmentType.UTSETTELSE_SYKDOM}\n                    skjemanummer={Skjemanummer.DOK_MORS_UTDANNING_ARBEID_SYKDOM}\n                    attachments={vedlegg}\n                />\n            </Block>\n        </>\n    );\n};\n\nexport default MorErForSykDokumentasjonOpplastning;\n","import { Block, intlUtils } from '@navikt/fp-common';\nimport { Attachment } from 'app/types/Attachment';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\nimport MorErForSykDokumentasjonOpplastning from '../er-mor-for-syk-dokumentasjon/MorErForSykDokumentasjonOpplastning';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\n\ninterface Props {\n    fieldName: PeriodeUttakFormField;\n    erMorForSyk: YesOrNo;\n    vedlegg: Attachment[];\n    navnMor: string;\n    isOpen: boolean;\n}\n\nconst ErMorForSykSpørsmål: FunctionComponent<Props> = ({ fieldName, erMorForSyk, navnMor, vedlegg, isOpen }) => {\n    const intl = useIntl();\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <PeriodeUttakFormComponents.YesOrNoQuestion\n                    name={fieldName}\n                    legend={intlUtils(intl, 'uttaksplan.erMorForSyk')}\n                    validate={(value: YesOrNo) => {\n                        if (value === YesOrNo.UNANSWERED) {\n                            return intlUtils(intl, 'uttaksplan.validering.erMorForSyk');\n                        }\n\n                        return undefined;\n                    }}\n                />\n            </Block>\n            <Block padBottom=\"l\" visible={erMorForSyk === YesOrNo.YES}>\n                <MorErForSykDokumentasjonOpplastning navnMor={navnMor} vedlegg={vedlegg} isOpen={isOpen} />\n            </Block>\n        </>\n    );\n};\n\nexport default ErMorForSykSpørsmål;\n","import { intlUtils } from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\n\ninterface Props {\n    fieldName: PeriodeUttakFormField;\n}\n\nconst FlerbarnsdagerSpørsmål: FunctionComponent<Props> = ({ fieldName }) => {\n    const intl = useIntl();\n\n    return (\n        <PeriodeUttakFormComponents.YesOrNoQuestion\n            name={fieldName}\n            legend={intlUtils(intl, 'uttaksplan.flerbarnsdager')}\n            validate={(value: YesOrNo) => {\n                if (value === YesOrNo.UNANSWERED) {\n                    return intlUtils(intl, 'uttaksplan.validering.flerbarnsdager');\n                }\n\n                return undefined;\n            }}\n        />\n    );\n};\n\nexport default FlerbarnsdagerSpørsmål;\n","import { hasValue, intlUtils } from '@navikt/fp-common';\nimport { Forelder } from 'app/types/Forelder';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { capitalizeFirstLetter } from 'app/utils/stringUtils';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\n\ninterface Props {\n    fieldName: PeriodeUttakFormField;\n    navnPåForeldre: NavnPåForeldre;\n    erFarEllerMedmor: boolean;\n}\n\nconst HvemSkalHaUttakSpørsmål: FunctionComponent<Props> = ({ fieldName, navnPåForeldre, erFarEllerMedmor }) => {\n    const intl = useIntl();\n\n    return (\n        <PeriodeUttakFormComponents.RadioGroup\n            legend={intlUtils(intl, 'uttaksplan.hvemSkalHaUttak')}\n            name={fieldName}\n            radios={[\n                {\n                    label: erFarEllerMedmor\n                        ? capitalizeFirstLetter(navnPåForeldre.farMedmor)\n                        : capitalizeFirstLetter(navnPåForeldre.mor),\n                    value: erFarEllerMedmor ? Forelder.farMedmor : Forelder.mor,\n                },\n                {\n                    label: erFarEllerMedmor\n                        ? capitalizeFirstLetter(navnPåForeldre.mor)\n                        : capitalizeFirstLetter(navnPåForeldre.farMedmor),\n                    value: erFarEllerMedmor ? Forelder.mor : Forelder.farMedmor,\n                },\n            ]}\n            validate={(value) => {\n                if (!hasValue(value)) {\n                    return intlUtils(intl, 'uttaksplan.validering.hvemSkalHaUttak');\n                }\n\n                return undefined;\n            }}\n        />\n    );\n};\n\nexport default HvemSkalHaUttakSpørsmål;\n","import { hasValue, intlUtils } from '@navikt/fp-common';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { FunctionComponent } from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { getStønadskontoNavn } from 'uttaksplan/utils/stønadskontoerUtils';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\nimport { FormikRadioProp } from '@navikt/sif-common-formik-ds/lib/components/formik-radio-group/FormikRadioGroup';\n\ninterface Props {\n    velgbareStønadskontoer: StønadskontoType[];\n    erOppholdsperiode: boolean;\n    navnPåForeldre: NavnPåForeldre;\n    fieldName: PeriodeUttakFormField;\n    erFarEllerMedmor: boolean;\n    erAleneOmOmsorg: boolean;\n}\n\nconst getSpørsmålsTekst = (\n    erOppholdsperiode: boolean,\n    intl: IntlShape,\n    navnPåForeldre: NavnPåForeldre,\n    erFarEllerMedmor: boolean\n): string => {\n    if (erOppholdsperiode) {\n        const navnAnnenForelder = erFarEllerMedmor ? navnPåForeldre.mor : navnPåForeldre.farMedmor;\n        return intlUtils(intl, 'uttaksplan.hvilkenKvote.annenForelder', {\n            navnAnnenForelder,\n        });\n    } else {\n        return intlUtils(intl, 'uttaksplan.hvilkenKvote');\n    }\n};\n\nconst HvilkenKontoSpørsmål: FunctionComponent<Props> = ({\n    velgbareStønadskontoer,\n    erOppholdsperiode,\n    navnPåForeldre,\n    fieldName,\n    erFarEllerMedmor,\n    erAleneOmOmsorg,\n}) => {\n    const intl = useIntl();\n    const legend = getSpørsmålsTekst(erOppholdsperiode, intl, navnPåForeldre, erFarEllerMedmor);\n\n    const radios = velgbareStønadskontoer.map(\n        (konto): FormikRadioProp => ({\n            label: getStønadskontoNavn(intl, konto, navnPåForeldre, erFarEllerMedmor, erAleneOmOmsorg),\n            value: `${konto}`,\n        })\n    );\n\n    return (\n        <PeriodeUttakFormComponents.RadioGroup\n            name={fieldName}\n            radios={radios}\n            legend={legend}\n            validate={(value) => {\n                if (!hasValue(value)) {\n                    return intlUtils(intl, 'uttaksplan.validering.hvilkenKonto');\n                }\n\n                return undefined;\n            }}\n        />\n    );\n};\n\nexport default HvilkenKontoSpørsmål;\n","export enum UttakRundtFødselÅrsak {\n    samtidigUttak = 'Samtidig Uttak',\n    morErForSyk = 'Mor er for syk',\n}\n","import { Block, hasValue, intlUtils } from '@navikt/fp-common';\nimport { UttakRundtFødselÅrsak } from 'app/types/UttakRundtFødselÅrsak';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\n\nimport { Attachment } from 'app/types/Attachment';\nimport MorErForSykDokumentasjonOpplastning from '../er-mor-for-syk-dokumentasjon/MorErForSykDokumentasjonOpplastning';\n\ninterface Props {\n    fieldName: PeriodeUttakFormField;\n    uttakRundtFødselÅrsak: UttakRundtFødselÅrsak | '';\n    vedlegg: Attachment[];\n    navnMor: string;\n    isOpen: boolean;\n}\n\nconst UttakRundtFødselÅrsakSpørsmål: FunctionComponent<Props> = ({\n    fieldName,\n    uttakRundtFødselÅrsak,\n    navnMor,\n    vedlegg,\n    isOpen,\n}) => {\n    const intl = useIntl();\n    const radios = [\n        {\n            label: intlUtils(intl, 'ja'),\n            value: UttakRundtFødselÅrsak.samtidigUttak,\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.uttakrundtFødselÅrsak.nei.morErForSyk'),\n            value: UttakRundtFødselÅrsak.morErForSyk,\n        },\n    ];\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <PeriodeUttakFormComponents.RadioGroup\n                    legend={intlUtils(intl, 'uttaksplan.uttakrundtFødselÅrsak.spørsmål')}\n                    name={fieldName}\n                    radios={radios}\n                    validate={(value) => {\n                        if (!hasValue(value)) {\n                            return intlUtils(intl, 'uttaksplan.validering.uttakRundtFødselFarMedmorWLB');\n                        }\n\n                        return undefined;\n                    }}\n                />\n            </Block>\n            <Block padBottom=\"l\" visible={uttakRundtFødselÅrsak === UttakRundtFødselÅrsak.morErForSyk}>\n                <MorErForSykDokumentasjonOpplastning navnMor={navnMor} vedlegg={vedlegg} isOpen={isOpen} />\n            </Block>\n        </>\n    );\n};\n\nexport default UttakRundtFødselÅrsakSpørsmål;\n","import { intlUtils, Block, hasValue } from '@navikt/fp-common';\nimport FormikFileUploader from 'app/components/formik-file-uploader/FormikFileUploader';\nimport { Attachment } from 'app/types/Attachment';\nimport { AttachmentType } from 'app/types/AttachmentType';\nimport { Skjemanummer } from 'app/types/Skjemanummer';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { OverføringÅrsakType } from 'uttaksplan/types/OverføringÅrsakType';\nimport { getNavnGenitivEierform } from 'uttaksplan/utils/stønadskontoerUtils';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\nimport { capitalizeFirstLetter } from 'app/utils/stringUtils';\nimport { GuidePanel } from '@navikt/ds-react';\ninterface Props {\n    vedlegg: Attachment[];\n    navnAnnenForelder: string;\n    erEndringssøknad: boolean;\n    valgtOverføringsårsak: OverføringÅrsakType | '';\n    isOpen: boolean;\n}\n\nconst OverføringsårsakSpørsmål: FunctionComponent<Props> = ({\n    vedlegg,\n    navnAnnenForelder,\n    erEndringssøknad,\n    valgtOverføringsårsak,\n    isOpen,\n}) => {\n    const intl = useIntl();\n    const navn = capitalizeFirstLetter(navnAnnenForelder);\n    const radios = [\n        {\n            label: intlUtils(intl, 'uttaksplan.overføringsårsaktype.INSTITUSJONSOPPHOLD_ANNEN_FORELDER', {\n                navnAnnenForelder: navn,\n            }),\n            value: OverføringÅrsakType.institusjonsoppholdAnnenForelder,\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.overføringsårsaktype.SYKDOM_ANNEN_FORELDER', {\n                navnAnnenForelder: navn,\n            }),\n            value: OverføringÅrsakType.sykdomAnnenForelder,\n        },\n    ];\n\n    if (erEndringssøknad) {\n        radios.push({\n            label: intlUtils(intl, 'uttaksplan.overføringsårsaktype.ALENEOMSORG'),\n            value: OverføringÅrsakType.aleneomsorg,\n        });\n        radios.push({\n            label: intlUtils(intl, 'uttaksplan.overføringsårsaktype.IKKE_RETT_ANNEN_FORELDER', {\n                navnAnnenForelder: navn,\n            }),\n            value: OverføringÅrsakType.ikkeRettAnnenForelder,\n        });\n    }\n\n    const beOmDokumentasjon =\n        valgtOverføringsårsak !== '' &&\n        valgtOverføringsårsak !== OverføringÅrsakType.aleneomsorg &&\n        valgtOverføringsårsak !== OverføringÅrsakType.ikkeRettAnnenForelder;\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <PeriodeUttakFormComponents.RadioGroup\n                    name={PeriodeUttakFormField.overføringsårsak}\n                    legend={intlUtils(intl, 'uttaksplan.overføringsårsak', {\n                        navnAnnenForelder: getNavnGenitivEierform(navnAnnenForelder, intl.locale),\n                    })}\n                    radios={radios}\n                    validate={(value) => {\n                        if (!hasValue(value)) {\n                            return intlUtils(intl, 'uttaksplan.validering.overføringsårsak');\n                        }\n\n                        return undefined;\n                    }}\n                />\n            </Block>\n            {beOmDokumentasjon && (\n                <Block padBottom=\"l\">\n                    <GuidePanel>\n                        <FormattedMessage\n                            id=\"uttaksplan.overføringsårsak.informasjonVedSykdomAnnenForelder\"\n                            values={{ navnAnnenForelder }}\n                        />\n                    </GuidePanel>\n                </Block>\n            )}\n            {beOmDokumentasjon && isOpen && (\n                <Block padBottom=\"l\">\n                    <FormikFileUploader\n                        legend=\"Dokumentasjon for overføringsårsak\"\n                        label={intlUtils(intl, 'uttaksplan.overføringsårsak.dokumentasjon')}\n                        name={PeriodeUttakFormField.overføringsdokumentasjon}\n                        attachments={vedlegg || []}\n                        attachmentType={AttachmentType.OVERFØRING_KVOTE}\n                        skjemanummer={Skjemanummer.DOK_OVERFØRING_FOR_SYK}\n                    />\n                </Block>\n            )}\n        </>\n    );\n};\n\nexport default OverføringsårsakSpørsmål;\n","import { hasValue, intlUtils } from '@navikt/fp-common';\nimport { getFloatFromString } from 'app/utils/numberUtils';\nimport { IntlShape } from 'react-intl';\n\nexport const prosentValideringSamtidigUttak = (intl: IntlShape) => (value: string) => {\n    const samtidigUttakProsent = getFloatFromString(value);\n\n    if (!hasValue(value)) {\n        return intlUtils(intl, 'uttaksplan.validering.samtidigUttaksprosent.required');\n    }\n\n    if (samtidigUttakProsent === undefined) {\n        return intlUtils(intl, 'uttaksplan.validering.samtidigUttaksprosent.måVæreEtTall');\n    }\n\n    if (samtidigUttakProsent < 0) {\n        return intlUtils(intl, 'uttaksplan.validering.samtidigUttaksprosent.måVæreStørreEnn0');\n    }\n\n    if (samtidigUttakProsent > 100) {\n        return intlUtils(intl, 'uttaksplan.validering.samtidigUttaksprosent.måVæreMindreEnn100');\n    }\n\n    return undefined;\n};\n\nexport const prosentValideringGradering = (intl: IntlShape) => (value: string) => {\n    const stillingsprosent = getFloatFromString(value);\n\n    if (!hasValue(value) || value.trim() === '') {\n        return intlUtils(intl, 'uttaksplan.validering.stillingsprosent.required');\n    }\n\n    if (stillingsprosent === undefined) {\n        return intlUtils(intl, 'uttaksplan.validering.stillingsprosent.måVæreEtTall');\n    }\n\n    if (stillingsprosent < 0) {\n        return intlUtils(intl, 'uttaksplan.validering.stillingsprosent.måVæreStørreEnn0');\n    }\n\n    if (stillingsprosent > 100) {\n        return intlUtils(intl, 'uttaksplan.validering.stillingsprosent.måVæreMindreEnn100');\n    }\n\n    return undefined;\n};\n","import { FunctionComponent } from 'react';\nimport { Block, intlUtils } from '@navikt/fp-common';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport links from 'app/links/links';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { prosentValideringSamtidigUttak } from 'uttaksplan/utils/prosentValidering';\nimport { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\nimport { GuidePanel, Link } from '@navikt/ds-react';\n\ninterface Props {\n    erFlerbarnssøknad: boolean;\n    navnPåForeldre: NavnPåForeldre;\n    navnPåAnnenForelder: string | undefined;\n    samtidigUttakProsentVisible: boolean;\n    familiehendelsesdato: Date;\n    situasjon: Situasjon;\n}\n\nconst SamtidigUttakSpørsmål: FunctionComponent<Props> = ({\n    erFlerbarnssøknad,\n    navnPåForeldre,\n    navnPåAnnenForelder,\n    samtidigUttakProsentVisible,\n    familiehendelsesdato,\n    situasjon,\n}) => {\n    const intl = useIntl();\n    let samtidigUttakInfoTekst;\n    if (erFlerbarnssøknad) {\n        samtidigUttakInfoTekst = 'uttaksplan.samtidigUttak.flerBarnsuker.veiledertekst';\n    } else if (andreAugust2022ReglerGjelder(familiehendelsesdato) && situasjon === 'fødsel') {\n        samtidigUttakInfoTekst = 'uttaksplan.samtidigUttak.veiledertekst.etterWLB';\n    } else {\n        samtidigUttakInfoTekst = 'uttaksplan.samtidigUttak.veiledertekst.førWLB';\n    }\n\n    return (\n        <>\n            <Block padBottom={samtidigUttakProsentVisible ? 'l' : 'none'}>\n                <PeriodeUttakFormComponents.YesOrNoQuestion\n                    name={PeriodeUttakFormField.samtidigUttak}\n                    legend={intlUtils(intl, 'uttaksplan.samtidigUttak', { navnAnnenForelder: navnPåAnnenForelder })}\n                    validate={(value: YesOrNo) => {\n                        if (value === YesOrNo.UNANSWERED) {\n                            return intlUtils(intl, 'uttaksplan.validering.samtidigUttak');\n                        }\n\n                        return undefined;\n                    }}\n                />\n            </Block>\n            <Block visible={samtidigUttakProsentVisible} padBottom=\"l\">\n                <GuidePanel>\n                    <FormattedMessage\n                        id={samtidigUttakInfoTekst}\n                        values={{\n                            link: (\n                                <Link href={links.fleksibeltuttak} target=\"_blank\">\n                                    <FormattedMessage id=\"uttaksplan.samtidigUttak.veiledertekst.lenke\" />\n                                </Link>\n                            ),\n                            navnMor: navnPåForeldre.mor,\n                            navnFar: navnPåForeldre.farMedmor,\n                        }}\n                    />\n                </GuidePanel>\n            </Block>\n            <Block visible={samtidigUttakProsentVisible}>\n                <PeriodeUttakFormComponents.NumberInput\n                    name={PeriodeUttakFormField.samtidigUttakProsent}\n                    label={intlUtils(intl, 'uttaksplan.samtidigUttakProsent')}\n                    maxLength={5}\n                    validate={prosentValideringSamtidigUttak(intl)}\n                />\n            </Block>\n        </>\n    );\n};\n\nexport default SamtidigUttakSpørsmål;\n","import { intlUtils, Block, hasValue, TidsperiodeDate } from '@navikt/fp-common';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { getKunArbeidsforholdForValgtTidsperiode } from 'app/utils/arbeidsforholdUtils';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Arbeidsform } from 'uttaksplan/types/Periode';\nimport { prosentValideringGradering } from 'uttaksplan/utils/prosentValidering';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\nimport { BodyShort, ReadMore } from '@navikt/ds-react';\nimport { FormikRadioProp } from '@navikt/sif-common-formik-ds/lib/components/formik-radio-group/FormikRadioGroup';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\n\ninterface Props {\n    graderingsprosentVisible: boolean;\n    arbeidsforhold: Arbeidsforhold[];\n    tidsperiode: TidsperiodeDate;\n}\n\nexport const getArbeidsOptions = (\n    arbeidsforhold: Arbeidsforhold[],\n    tidsperiode: TidsperiodeDate\n): FormikRadioProp[] => {\n    const aktiveArbeidsforholdIPerioden = getKunArbeidsforholdForValgtTidsperiode(arbeidsforhold, tidsperiode);\n\n    const defaultOptions: FormikRadioProp[] = [\n        {\n            label: 'Selvstendig næringsdrivende',\n            value: Arbeidsform.selvstendignæringsdrivende,\n        },\n        {\n            label: 'Frilans',\n            value: Arbeidsform.frilans,\n        },\n    ];\n    const eksisterendeArbeidsforhold: FormikRadioProp[] = [];\n\n    if (aktiveArbeidsforholdIPerioden.length > 0) {\n        aktiveArbeidsforholdIPerioden.forEach((arb) =>\n            eksisterendeArbeidsforhold.push({ label: `${arb.arbeidsgiverNavn}`, value: `${arb.arbeidsgiverId}` })\n        );\n    }\n\n    return [...eksisterendeArbeidsforhold, ...defaultOptions];\n};\n\nconst SkalHaGraderingSpørsmål: FunctionComponent<Props> = ({\n    graderingsprosentVisible,\n    arbeidsforhold,\n    tidsperiode,\n}) => {\n    const intl = useIntl();\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <PeriodeUttakFormComponents.YesOrNoQuestion\n                    name={PeriodeUttakFormField.skalHaGradering}\n                    legend={intlUtils(intl, 'uttaksplan.skalHaGradering')}\n                    validate={(value: YesOrNo) => {\n                        if (value === YesOrNo.UNANSWERED) {\n                            return intlUtils(intl, 'uttaksplan.validering.skalHaGradering');\n                        }\n\n                        return undefined;\n                    }}\n                />\n            </Block>\n            <Block padBottom=\"l\" visible={graderingsprosentVisible}>\n                <Block padBottom=\"s\">\n                    <PeriodeUttakFormComponents.NumberInput\n                        name={PeriodeUttakFormField.stillingsprosent}\n                        label={intlUtils(intl, 'uttaksplan.stillingsprosent')}\n                        maxLength={5}\n                        validate={prosentValideringGradering(intl)}\n                    />\n                </Block>\n                <ReadMore header={intlUtils(intl, 'uttaksplan.stillingsprosent.lesMer.tittel')}>\n                    <BodyShort>\n                        <FormattedMessage id=\"uttaksplan.stillingsprosent.lesMer.innhold\" />\n                    </BodyShort>\n                </ReadMore>\n            </Block>\n            <Block visible={graderingsprosentVisible}>\n                <PeriodeUttakFormComponents.RadioGroup\n                    name={PeriodeUttakFormField.arbeidsformer}\n                    legend={intlUtils(intl, 'uttaksplan.arbeidsformer')}\n                    radios={getArbeidsOptions(arbeidsforhold, tidsperiode)}\n                    validate={(value) => {\n                        if (!hasValue(value)) {\n                            return intlUtils(intl, 'uttaksplan.validering.arbeidsformer');\n                        }\n\n                        return undefined;\n                    }}\n                />\n                <ReadMore header={intlUtils(intl, 'uttaksplan.arbeidsformer.lesMer.tittel')}>\n                    <BodyShort>\n                        <FormattedMessage id=\"uttaksplan.arbeidsformer.lesMer.innhold\" />\n                    </BodyShort>\n                </ReadMore>\n            </Block>\n        </>\n    );\n};\n\nexport default SkalHaGraderingSpørsmål;\n","import { FunctionComponent, useEffect, useRef } from 'react';\nimport { useFormikContext } from 'formik';\nimport { PeriodeUttakFormData } from '../periode-uttak-form/periodeUttakFormConfig';\nimport { PeriodeUtsettelseFormData } from '../periode-utsettelse-form/periodeUtsettelseFormConfig';\nimport { PeriodeFørFødselFormData } from '../periode-før-fødsel-form/periodeFørFødselFormConfig';\n\ninterface Props {\n    cleanup: () => PeriodeUttakFormData | PeriodeUtsettelseFormData | PeriodeFørFødselFormData;\n}\n\nexport const jsonSort = (json: any): string => {\n    function isObject(v: any) {\n        return '[object Object]' === Object.prototype.toString.call(v);\n    }\n\n    const sort = (o: any): any => {\n        if (Array.isArray(o)) {\n            return o.sort().map(sort);\n        } else if (isObject(o)) {\n            return Object.keys(o)\n                .sort((a, b) => a.localeCompare(b))\n                .reduce((a: any, k) => {\n                    a[k] = sort(o[k]);\n                    return a;\n                }, {});\n        }\n\n        return o;\n    };\n    return sort(json);\n};\n\nexport const SubmitListener: FunctionComponent<Props> = ({ cleanup }) => {\n    const formik = useFormikContext<PeriodeUttakFormData | PeriodeUtsettelseFormData | PeriodeFørFødselFormData>();\n    const { isSubmitting, isValidating, submitForm, setValues } = formik;\n    const cleanedValues = cleanup();\n    const ref = useRef(cleanedValues);\n\n    useEffect(() => {\n        if (!isSubmitting && !isValidating) {\n            const currentValuesJSONString = JSON.stringify(jsonSort(ref.current));\n            const previousValuesJSONString = JSON.stringify(jsonSort(cleanedValues));\n            const valuesEqualLastValues = previousValuesJSONString === currentValuesJSONString;\n\n            if (!valuesEqualLastValues) {\n                ref.current = cleanedValues;\n            }\n\n            if (!valuesEqualLastValues) {\n                setValues(cleanedValues);\n                setTimeout(() => submitForm(), 0);\n            }\n        }\n    }, [isSubmitting, isValidating, submitForm, setValues, cleanedValues, cleanup]);\n\n    return null;\n};\n","import { TidsperiodeDate } from '@navikt/fp-common';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { erSamtidigUttakFarMedmorFørFørsteSeksUkerWLB } from 'uttaksplan/components/uttaks-forms/periode-uttak-form/periodeUttakFormQuestionsConfig';\n\nconst hvemSkalTaUttakSkalBesvares = (\n    tidsperiode: TidsperiodeDate,\n    erDeltUttakINorge: boolean,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    situasjon: Situasjon\n): boolean => {\n    if (erFarEllerMedmor) {\n        if (\n            erSamtidigUttakFarMedmorFørFørsteSeksUkerWLB(\n                { fom: tidsperiode.fom },\n                familiehendelsesdato,\n                erFarEllerMedmor,\n                erDeltUttakINorge,\n                situasjon\n            )\n        ) {\n            return false;\n        }\n    }\n    return erDeltUttakINorge;\n};\n\nexport default hvemSkalTaUttakSkalBesvares;\n","import { TidsperiodeDate } from '@navikt/fp-common';\nimport { Situasjon } from 'app/types/Situasjon';\nimport dayjs from 'dayjs';\nimport { Periodetype } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { erInnenFørsteSeksUkerFødselFarMedmor, Uttaksdatoer } from '../uttaksdatoerUtils';\nimport uttakRundtFødselÅrsakSpørsmålSkalBesvares from './uttakRundtFødselÅrsakSpørsmålSkalBesvares';\n\nconst erMorForForSykSkalBesvares = (\n    periodetype: Periodetype,\n    konto: StønadskontoType,\n    tidsperiode: TidsperiodeDate,\n    situasjon: Situasjon,\n    søkerErFarEllerMedmor: boolean,\n    uttaksdatoer: Uttaksdatoer,\n    erFlerbarnssøknad: boolean,\n    erAleneOmOmsorg: boolean,\n    annenForelderKanIkkeOppgis: boolean,\n    ønskerFlerbarnsdager: boolean | undefined,\n    søkerHarMidlertidigOmsorg: boolean,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    bareFarMedmorHarRett: boolean\n): boolean => {\n    const årsakTilUttakRundtFødselSkalBesvares = uttakRundtFødselÅrsakSpørsmålSkalBesvares(\n        periodetype,\n        konto as StønadskontoType,\n        tidsperiode,\n        søkerErFarEllerMedmor,\n        erAleneOmOmsorg,\n        annenForelderKanIkkeOppgis,\n        søkerHarMidlertidigOmsorg,\n        familiehendelsesdato,\n        termindato,\n        situasjon,\n        bareFarMedmorHarRett\n    );\n\n    if (\n        erAleneOmOmsorg ||\n        annenForelderKanIkkeOppgis ||\n        søkerHarMidlertidigOmsorg ||\n        årsakTilUttakRundtFødselSkalBesvares ||\n        dayjs(tidsperiode.fom).isBefore(familiehendelsesdato, 'day') ||\n        konto === StønadskontoType.AktivitetsfriKvote\n    ) {\n        return false;\n    }\n\n    if (periodetype === Periodetype.Uttak && søkerErFarEllerMedmor) {\n        if (\n            (konto === StønadskontoType.Fedrekvote || konto === StønadskontoType.Foreldrepenger) &&\n            erInnenFørsteSeksUkerFødselFarMedmor(\n                tidsperiode,\n                situasjon,\n                søkerErFarEllerMedmor,\n                uttaksdatoer.etterFødsel.førsteUttaksdagEtterSeksUker\n            )\n        ) {\n            if (erFlerbarnssøknad) {\n                return ønskerFlerbarnsdager !== undefined && ønskerFlerbarnsdager === false;\n            }\n\n            return true;\n        }\n        return false;\n    }\n\n    return false;\n};\n\nexport default erMorForForSykSkalBesvares;\n","import { TidsperiodeDate } from '@navikt/fp-common';\nimport { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\nimport { getSisteUttaksdag6UkerEtterFødsel } from 'app/utils/wlbUtils';\nimport dayjs from 'dayjs';\nimport { Periodetype } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\n\nexport const graderingSkalBesvares = (\n    periodetype: Periodetype,\n    konto: StønadskontoType,\n    familiehendelsesdato: Date,\n    erFarMedmor: boolean,\n    morErForSyk: boolean | undefined,\n    tidsperiode: TidsperiodeDate\n): boolean => {\n    const farMedmorSøkerDeFørsteSeksUkeneFørWLBOgMorErIkkeSyk =\n        !andreAugust2022ReglerGjelder(familiehendelsesdato) && erFarMedmor && morErForSyk === false;\n    const sisteUttaksdagInnenSeksUkerEtterFødsel = getSisteUttaksdag6UkerEtterFødsel(familiehendelsesdato);\n    const bareFarHarRettSøkerAktivitetsKravKontoDeFørsteSeksUkeneOgMorErIkkeSyk =\n        erFarMedmor &&\n        konto === StønadskontoType.Foreldrepenger &&\n        morErForSyk === false &&\n        dayjs(tidsperiode.fom).isSameOrBefore(sisteUttaksdagInnenSeksUkerEtterFødsel, 'day');\n    if (\n        periodetype === Periodetype.Uttak &&\n        konto !== StønadskontoType.ForeldrepengerFørFødsel &&\n        !farMedmorSøkerDeFørsteSeksUkeneFørWLBOgMorErIkkeSyk &&\n        !bareFarHarRettSøkerAktivitetsKravKontoDeFørsteSeksUkeneOgMorErIkkeSyk\n    ) {\n        return true;\n    }\n    return false;\n};\n","import { TidsperiodeDate } from '@navikt/fp-common';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { erFarMedmorSinWLBTidsperiodeRundtFødsel } from 'app/utils/wlbUtils';\nimport { Periodetype } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\n\nexport const graderingSkalBesvaresPgaWLBUttakRundtFødsel = (\n    tidperiode: TidsperiodeDate,\n    periodetype: Periodetype,\n    konto: StønadskontoType,\n    erFarEllerMedmor: boolean,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    situasjon: Situasjon\n): boolean => {\n    return erFarMedmorSinWLBTidsperiodeRundtFødsel(\n        tidperiode,\n        familiehendelsesdato,\n        periodetype,\n        konto,\n        erFarEllerMedmor,\n        termindato,\n        situasjon\n    );\n};\n","import { TidsperiodeDate } from '@navikt/fp-common';\nimport { Situasjon } from 'app/types/Situasjon';\nimport dayjs from 'dayjs';\nimport { Periodetype } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { uttakRundtFødselÅrsakSpørsmålSkalBesvares } from './uttakRundtFødselÅrsakSpørsmålSkalBesvares';\n\nconst samtidigUttakSkalBesvares = (\n    periodetype: Periodetype,\n    konto: StønadskontoType,\n    erUttakInnenFørsteSeksUkerFødselFarMedmor: boolean,\n    erUttakFørFødsel: boolean,\n    erAleneOmsorg: boolean,\n    erDeltUttakINorge: boolean,\n    søkerHarMidlertidigOmsorg: boolean,\n    erMorForSyk: boolean | undefined,\n    ønskerFlerbarnsdager: boolean | undefined,\n    tidsperiode: TidsperiodeDate,\n    søkerErFarEllerMedmor: boolean,\n    annenforelderKanIkkeOppgis: boolean,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    situasjon: Situasjon,\n    bareFarMedmorHarRett: boolean\n): boolean => {\n    if (erAleneOmsorg || !erDeltUttakINorge || søkerHarMidlertidigOmsorg) {\n        return false;\n    }\n    if (søkerErFarEllerMedmor && dayjs(tidsperiode.fom).isBefore(familiehendelsesdato, 'd')) {\n        return false;\n    }\n    if (\n        uttakRundtFødselÅrsakSpørsmålSkalBesvares(\n            periodetype,\n            konto,\n            tidsperiode,\n            søkerErFarEllerMedmor,\n            erAleneOmsorg,\n            annenforelderKanIkkeOppgis,\n            søkerHarMidlertidigOmsorg,\n            familiehendelsesdato,\n            termindato,\n            situasjon,\n            bareFarMedmorHarRett\n        )\n    ) {\n        return false;\n    }\n\n    if (periodetype === Periodetype.Uttak) {\n        if (erMorForSyk) {\n            return false;\n        }\n\n        const erUttakEgenKvoteFarMedmorFørsteSeksUkerUtenFlerbarnsdager: boolean =\n            erUttakInnenFørsteSeksUkerFødselFarMedmor &&\n            (konto === StønadskontoType.Fedrekvote || konto === StønadskontoType.Foreldrepenger) &&\n            ønskerFlerbarnsdager !== true;\n\n        return !(erUttakFørFødsel || erUttakEgenKvoteFarMedmorFørsteSeksUkerUtenFlerbarnsdager);\n    }\n\n    return false;\n};\n\nexport default samtidigUttakSkalBesvares;\n","import { TidsperiodeDate } from '@navikt/fp-common';\nimport { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\nimport dayjs from 'dayjs';\nimport { Periodetype } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { UttakRundtFødselÅrsak } from 'app/types/UttakRundtFødselÅrsak';\n\nexport const ønskerFlerbarnsdagerSkalBesvares = (\n    periodetype: Periodetype,\n    erFlerbarnssøknad: boolean,\n    søkerErFarEllerMedmor: boolean,\n    familiehendelsesdato: Date,\n    tidsperiode: TidsperiodeDate,\n    stønadskontoType: StønadskontoType,\n    bareFarHarRett: boolean,\n    antallBarn: number,\n    erAleneOmOmsorg: boolean,\n    erDeltUttakINorge: boolean,\n    uttakRundtFødselÅrsak: UttakRundtFødselÅrsak | undefined\n): boolean => {\n    if (dayjs(tidsperiode.fom).isBefore(familiehendelsesdato, 'day')) {\n        return false;\n    }\n\n    if (\n        stønadskontoType === StønadskontoType.AktivitetsfriKvote ||\n        uttakRundtFødselÅrsak === UttakRundtFødselÅrsak.morErForSyk\n    ) {\n        return false;\n    }\n    if (søkerErFarEllerMedmor && (bareFarHarRett || erAleneOmOmsorg) && antallBarn > 1) {\n        if (andreAugust2022ReglerGjelder(familiehendelsesdato)) {\n            return false;\n        }\n        return true;\n    }\n    if (!erDeltUttakINorge && stønadskontoType !== StønadskontoType.Fellesperiode) {\n        return false;\n    }\n    return periodetype === Periodetype.Uttak && erFlerbarnssøknad && søkerErFarEllerMedmor;\n};\n","import AnnenForelder from 'app/context/types/AnnenForelder';\nimport { harAnnenForelderRettIEØS } from 'app/utils/annenForelderUtils';\nimport { Periodetype } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\n\nconst overføringsårsakSkalBesvares = (\n    periodetype: Periodetype,\n    erFarEllerMedmor: boolean,\n    kontoValue: StønadskontoType,\n    annenForelder: AnnenForelder\n): boolean => {\n    const annenForelderHarRettIEØS = harAnnenForelderRettIEØS(annenForelder);\n    return (\n        periodetype === Periodetype.Overføring ||\n        (annenForelderHarRettIEØS && erFarEllerMedmor && kontoValue === StønadskontoType.Mødrekvote) ||\n        (annenForelderHarRettIEØS && !erFarEllerMedmor && kontoValue === StønadskontoType.Fedrekvote)\n    );\n};\n\nexport default overføringsårsakSkalBesvares;\n","import { TidsperiodeDate } from '@navikt/fp-common';\nimport AnnenForelder from 'app/context/types/AnnenForelder';\nimport { Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { convertYesOrNoOrUndefinedToBoolean } from 'app/utils/formUtils';\nimport { PeriodeUttakFormData } from 'uttaksplan/components/uttaks-forms/periode-uttak-form/periodeUttakFormConfig';\nimport { Periodetype } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { getUttaksdatoer } from '../uttaksdatoerUtils';\nimport { aktivitetskravMorSkalBesvares } from './aktivitetskravMorSkalBesvares';\nimport erMorForForSykSkalBesvares from './erMorForSykSkalBesvares';\nimport { graderingSkalBesvares } from './graderingSkalBesvares';\nimport { graderingSkalBesvaresPgaWLBUttakRundtFødsel } from './graderingSkalBesvaresPgaWLBUttakRundtFødsel';\nimport samtidigUttakSkalBesvares from './samtidigUttakSkalBesvares';\nimport { ønskerFlerbarnsdagerSkalBesvares } from './ønskerFlerbarnsdagerSkalBesvares';\nimport uttakRundtFødselÅrsakSpørsmålSkalBesvares from './uttakRundtFødselÅrsakSpørsmålSkalBesvares';\nimport kontoSkalBesvares from './kontoSkalBesvarer';\nimport { StønadskontoUttak } from 'uttaksplan/types/StønadskontoUttak';\nimport hvemSkalTaUttakSkalBesvares from './hvemSkalTaUttakSkalBesvares';\nimport overføringsårsakSkalBesvares from './overføringsårsakSkalBesvares';\nexport interface UttakSkjemaregler {\n    aktivitetskravMorSkalBesvares: () => boolean;\n    erMorForSykSkalBesvares: () => boolean;\n    uttakRundtFødselÅrsakSpørsmålSkalBesvares: () => boolean;\n    samtidigUttakSkalBesvares: () => boolean;\n    kontoSkalBesvares: () => boolean;\n    hvemSkalTaUttakSkalBesvares: () => boolean;\n    overføringsårsakSkalBesvares: () => boolean;\n    ønskerFlerbarnsdagerSkalBesvares: () => boolean;\n    graderingSkalBesvares: () => boolean;\n    graderingSkalBesvaresPgaWLBUttakRundtFødsel: () => boolean;\n}\n\nexport interface UttakSkjemaReglerProps {\n    erFarEllerMedmor: boolean;\n    erAleneOmOmsorg: boolean;\n    annenForelder: AnnenForelder;\n    situasjon: Situasjon;\n    erFlerbarnssøknad: boolean;\n    erDeltUttakINorge: boolean;\n    familiehendelsesdato: Date;\n    periodetype: Periodetype;\n    termindato: Date | undefined;\n    morHarRett: boolean;\n    stønadskontoer: StønadskontoUttak[];\n    antallBarn: number;\n}\n\nexport const getUttakSkjemaregler = (\n    formValues: PeriodeUttakFormData,\n    regelProps: UttakSkjemaReglerProps\n): UttakSkjemaregler => {\n    const {\n        erFarEllerMedmor,\n        erAleneOmOmsorg,\n        annenForelder,\n        situasjon,\n        erFlerbarnssøknad,\n        erDeltUttakINorge,\n        familiehendelsesdato,\n        periodetype,\n        termindato,\n        stønadskontoer,\n        morHarRett,\n        antallBarn,\n    } = regelProps;\n\n    const { konto } = formValues;\n\n    const uttaksdatoer = getUttaksdatoer(familiehendelsesdato, erFarEllerMedmor, termindato);\n    const tidsperiode: TidsperiodeDate = { fom: formValues.fom!, tom: formValues.tom! };\n\n    return {\n        aktivitetskravMorSkalBesvares: () =>\n            aktivitetskravMorSkalBesvares(\n                convertYesOrNoOrUndefinedToBoolean(formValues.ønskerFlerbarnsdager),\n                convertYesOrNoOrUndefinedToBoolean(formValues.samtidigUttak),\n                convertYesOrNoOrUndefinedToBoolean(formValues.erMorForSyk),\n                periodetype,\n                konto as StønadskontoType,\n                !erFarEllerMedmor,\n                erAleneOmOmsorg,\n                annenForelder.kanIkkeOppgis,\n                false, // TODO Midlertidig omsorg,\n                tidsperiode,\n                familiehendelsesdato,\n                termindato,\n                situasjon,\n                stønadskontoer,\n                !morHarRett\n            ),\n        erMorForSykSkalBesvares: (): boolean =>\n            erMorForForSykSkalBesvares(\n                periodetype,\n                konto as StønadskontoType,\n                tidsperiode,\n                situasjon,\n                erFarEllerMedmor,\n                uttaksdatoer,\n                erFlerbarnssøknad,\n                erAleneOmOmsorg,\n                annenForelder.kanIkkeOppgis,\n                convertYesOrNoOrUndefinedToBoolean(formValues.ønskerFlerbarnsdager),\n                false, // TODO Midlertidig omsorg,\n                familiehendelsesdato,\n                termindato,\n                !morHarRett\n            ),\n        samtidigUttakSkalBesvares: (): boolean =>\n            samtidigUttakSkalBesvares(\n                periodetype,\n                konto as StønadskontoType,\n                Tidsperioden(tidsperiode).erInnenforFørsteSeksUker(familiehendelsesdato) && situasjon === 'fødsel',\n                periodetype === Periodetype.Uttak && konto === StønadskontoType.ForeldrepengerFørFødsel,\n                erAleneOmOmsorg,\n                erDeltUttakINorge,\n                false, // TODO Midlertidig omsorg,\n                convertYesOrNoOrUndefinedToBoolean(formValues.erMorForSyk),\n                convertYesOrNoOrUndefinedToBoolean(formValues.ønskerFlerbarnsdager),\n                tidsperiode,\n                erFarEllerMedmor,\n                annenForelder.kanIkkeOppgis,\n                familiehendelsesdato,\n                termindato,\n                situasjon,\n                !morHarRett\n            ),\n        kontoSkalBesvares: (): boolean =>\n            kontoSkalBesvares(periodetype, tidsperiode, stønadskontoer, familiehendelsesdato, erFarEllerMedmor),\n        ønskerFlerbarnsdagerSkalBesvares: (): boolean => {\n            return ønskerFlerbarnsdagerSkalBesvares(\n                periodetype,\n                erFlerbarnssøknad,\n                erFarEllerMedmor,\n                familiehendelsesdato,\n                tidsperiode,\n                konto as StønadskontoType,\n                !morHarRett,\n                antallBarn,\n                erAleneOmOmsorg,\n                erDeltUttakINorge,\n                formValues.uttakRundtFødselÅrsak === '' ? undefined : formValues.uttakRundtFødselÅrsak\n            );\n        },\n        hvemSkalTaUttakSkalBesvares: (): boolean =>\n            hvemSkalTaUttakSkalBesvares(\n                tidsperiode,\n                erDeltUttakINorge,\n                familiehendelsesdato,\n                erFarEllerMedmor,\n                situasjon\n            ),\n        graderingSkalBesvares: (): boolean => {\n            return graderingSkalBesvares(\n                periodetype,\n                konto as StønadskontoType,\n                familiehendelsesdato,\n                erFarEllerMedmor,\n                convertYesOrNoOrUndefinedToBoolean(formValues.erMorForSyk),\n                tidsperiode\n            );\n        },\n        graderingSkalBesvaresPgaWLBUttakRundtFødsel: (): boolean => {\n            return graderingSkalBesvaresPgaWLBUttakRundtFødsel(\n                tidsperiode,\n                periodetype,\n                konto as StønadskontoType,\n                erFarEllerMedmor,\n                familiehendelsesdato,\n                termindato,\n                situasjon\n            );\n        },\n        overføringsårsakSkalBesvares: (): boolean => {\n            return overføringsårsakSkalBesvares(\n                periodetype,\n                erFarEllerMedmor,\n                konto as StønadskontoType,\n                annenForelder\n            );\n        },\n        uttakRundtFødselÅrsakSpørsmålSkalBesvares: () => {\n            return uttakRundtFødselÅrsakSpørsmålSkalBesvares(\n                periodetype,\n                konto as StønadskontoType,\n                tidsperiode,\n                erFarEllerMedmor,\n                erAleneOmOmsorg,\n                annenForelder.kanIkkeOppgis,\n                false, //TODO: midlertidig omsorg\n                familiehendelsesdato,\n                termindato,\n                situasjon,\n                !morHarRett\n            );\n        },\n    };\n};\n\nexport default getUttakSkjemaregler;\n","import { hasValue, TidsperiodeDate } from '@navikt/fp-common';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport AnnenForelder from 'app/context/types/AnnenForelder';\nimport { isValidTidsperiode } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { UttakRundtFødselÅrsak } from 'app/types/UttakRundtFødselÅrsak';\nimport { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\nimport { erFarMedmorSinWLBTidsperiodeRundtFødsel, getSisteUttaksdag6UkerEtterFødsel } from 'app/utils/wlbUtils';\nimport dayjs from 'dayjs';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport hvemSkalTaUttakSkalBesvares from 'uttaksplan/utils/uttaksskjema/hvemSkalTaUttakSkalBesvares';\nimport getUttakSkjemaregler, {\n    UttakSkjemaregler,\n    UttakSkjemaReglerProps,\n} from 'uttaksplan/utils/uttaksskjema/uttakSkjemaregler';\nimport { PeriodeUttakFormData, PeriodeUttakFormField } from './periodeUttakFormConfig';\nimport { harAnnenForelderRettIEØS } from 'app/utils/annenForelderUtils';\nimport { Periodetype } from 'uttaksplan/types/Periode';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\nexport interface PeriodeUttakFormQuestionsPayload {\n    values: PeriodeUttakFormData;\n    regelProps: UttakSkjemaReglerProps;\n    isOpen: boolean;\n}\n\nexport const erSamtidigUttakFarMedmorFørFødselWLB = (\n    values: Partial<PeriodeUttakFormData>,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    erDeltUttak: boolean,\n    situasjon: Situasjon,\n) => {\n    return (\n        andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n        erFarEllerMedmor &&\n        erDeltUttak &&\n        situasjon === 'fødsel' &&\n        hasValue(values.fom) &&\n        dayjs(values.fom).isBefore(familiehendelsesdato, 'day')\n    );\n};\n\nexport const erSamtidigUttakFarMedmorFørFørsteSeksUkerWLB = (\n    values: Partial<PeriodeUttakFormData>,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    erDeltUttak: boolean,\n    situasjon: Situasjon,\n) => {\n    const sisteUttaksdag6UkerEtterFødsel = getSisteUttaksdag6UkerEtterFødsel(familiehendelsesdato);\n\n    return (\n        andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n        erFarEllerMedmor &&\n        erDeltUttak &&\n        situasjon === 'fødsel' &&\n        hasValue(values.fom) &&\n        dayjs(values.fom).isSameOrBefore(sisteUttaksdag6UkerEtterFødsel, 'day')\n    );\n};\n\nexport const skalViseWLBInfoOmSamtidigUttakRundtFødsel = (\n    values: PeriodeUttakFormData,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    erDeltUttak: boolean,\n    situasjon: Situasjon,\n) => {\n    return (\n        values.uttakRundtFødselÅrsak === UttakRundtFødselÅrsak.samtidigUttak ||\n        erSamtidigUttakFarMedmorFørFødselWLB(values, familiehendelsesdato, erFarEllerMedmor, erDeltUttak, situasjon)\n    );\n};\n\nconst skalViseGradering = (\n    regler: UttakSkjemaregler,\n    values: PeriodeUttakFormData,\n    familiehendelsesdato: Date,\n    erDeltUttakINorge: boolean,\n    annenForelder: AnnenForelder,\n): boolean => {\n    if (!isValidTidsperiode({ fom: values.fom, tom: values.tom })) {\n        return false;\n    }\n\n    if (regler.overføringsårsakSkalBesvares() && !hasValue(values.overføringsårsak)) {\n        return false;\n    }\n\n    if (\n        regler.graderingSkalBesvaresPgaWLBUttakRundtFødsel() &&\n        dayjs(values.fom).isSameOrAfter(familiehendelsesdato, 'd') &&\n        (erDeltUttakINorge || harAnnenForelderRettIEØS(annenForelder)) &&\n        !hasValue(values.uttakRundtFødselÅrsak)\n    ) {\n        return false;\n    }\n\n    if (\n        values.konto === '' ||\n        (regler.samtidigUttakSkalBesvares() && values.samtidigUttak === YesOrNo.UNANSWERED) ||\n        (regler.ønskerFlerbarnsdagerSkalBesvares() && values.ønskerFlerbarnsdager === YesOrNo.UNANSWERED) ||\n        (regler.aktivitetskravMorSkalBesvares() &&\n            values.aktivitetskravMor === '' &&\n            values.erMorForSyk !== YesOrNo.YES) ||\n        (regler.erMorForSykSkalBesvares() && values.erMorForSyk !== YesOrNo.YES)\n    ) {\n        return false;\n    }\n\n    return true;\n};\n\nconst skalViseAktivitetskrav = (regler: UttakSkjemaregler, values: PeriodeUttakFormData): boolean => {\n    if (!isValidTidsperiode({ fom: values.fom, tom: values.tom })) {\n        return false;\n    }\n\n    if (regler.erMorForSykSkalBesvares() && values.erMorForSyk !== YesOrNo.NO) {\n        return false;\n    }\n\n    if (regler.ønskerFlerbarnsdagerSkalBesvares() && values.ønskerFlerbarnsdager === YesOrNo.UNANSWERED) {\n        return false;\n    }\n\n    return regler.samtidigUttakSkalBesvares()\n        ? values.samtidigUttak !== YesOrNo.UNANSWERED\n        : values.konto !== undefined;\n};\n\nconst skalViseSamtidigUttak = (regler: UttakSkjemaregler, values: PeriodeUttakFormData): boolean => {\n    if (!isValidTidsperiode({ fom: values.fom, tom: values.tom })) {\n        return false;\n    }\n\n    if (values.konto === StønadskontoType.Foreldrepenger) {\n        return false;\n    }\n\n    if (values.konto === '') {\n        return false;\n    }\n\n    if (regler.ønskerFlerbarnsdagerSkalBesvares() && values.ønskerFlerbarnsdager === YesOrNo.UNANSWERED) {\n        return false;\n    }\n\n    if (regler.erMorForSykSkalBesvares() && values.erMorForSyk === YesOrNo.NO) {\n        return false;\n    }\n\n    return true;\n};\n\nconst skalViseFlerbarnsdager = (\n    values: PeriodeUttakFormData,\n    tidsperiode: TidsperiodeDate,\n    familiehendelsesdato: Date,\n    periodetype: Periodetype,\n    kontoValue: StønadskontoType | '',\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n    situasjon: Situasjon,\n): boolean => {\n    if (!isValidTidsperiode({ fom: values.fom, tom: values.tom })) {\n        return false;\n    }\n    if (\n        kontoValue !== '' &&\n        erFarMedmorSinWLBTidsperiodeRundtFødsel(\n            tidsperiode,\n            familiehendelsesdato,\n            periodetype,\n            kontoValue,\n            erFarEllerMedmor,\n            termindato,\n            situasjon,\n        ) &&\n        values.uttakRundtFødselÅrsak === ''\n    ) {\n        return false;\n    }\n\n    return (\n        values.konto === StønadskontoType.Fellesperiode ||\n        values.konto === StønadskontoType.Fedrekvote ||\n        values.konto === StønadskontoType.Foreldrepenger\n    );\n};\n\nconst skalViseKonto = (\n    values: PeriodeUttakFormData,\n    familiehendelsesdato: Date,\n    erDeltUttakINorge: boolean,\n    erFarEllerMedmor: boolean,\n    situasjon: Situasjon,\n): boolean => {\n    const tidsperiode = { fom: values.fom, tom: values.tom };\n    if (!isValidTidsperiode(tidsperiode)) {\n        return false;\n    }\n    if (\n        hvemSkalTaUttakSkalBesvares(\n            tidsperiode,\n            erDeltUttakINorge,\n            familiehendelsesdato,\n            erFarEllerMedmor,\n            situasjon,\n        ) &&\n        !hasValue(values.hvemSkalTaUttak)\n    ) {\n        return false;\n    }\n    return true;\n};\n\nconst PeriodeUttakFormConfig: QuestionConfig<PeriodeUttakFormQuestionsPayload, PeriodeUttakFormField> = {\n    [PeriodeUttakFormField.fom]: {\n        isAnswered: ({ values }) => hasValue(values.fom),\n        isIncluded: () => true,\n    },\n    [PeriodeUttakFormField.tom]: {\n        isAnswered: ({ values }) => hasValue(values.tom),\n        isIncluded: () => true,\n    },\n    [PeriodeUttakFormField.hvemSkalTaUttak]: {\n        isAnswered: ({ values }) => hasValue(values.hvemSkalTaUttak),\n        isIncluded: ({ regelProps, values }) => getUttakSkjemaregler(values, regelProps).hvemSkalTaUttakSkalBesvares(),\n        visibilityFilter: ({ values }) => isValidTidsperiode({ fom: values.fom, tom: values.tom }),\n    },\n    [PeriodeUttakFormField.konto]: {\n        isAnswered: ({ values }) => hasValue(values.konto),\n        isIncluded: ({ regelProps, values }) => getUttakSkjemaregler(values, regelProps).kontoSkalBesvares(),\n        visibilityFilter: ({ regelProps, values }) =>\n            skalViseKonto(\n                values,\n                regelProps.familiehendelsesdato,\n                regelProps.erDeltUttakINorge,\n                regelProps.erFarEllerMedmor,\n                regelProps.situasjon,\n            ),\n    },\n    [PeriodeUttakFormField.ønskerFlerbarnsdager]: {\n        isAnswered: ({ values }) => values.ønskerFlerbarnsdager !== YesOrNo.UNANSWERED,\n        isIncluded: ({ values, regelProps }) =>\n            getUttakSkjemaregler(values, regelProps).ønskerFlerbarnsdagerSkalBesvares(),\n        visibilityFilter: ({ values, regelProps }) =>\n            skalViseFlerbarnsdager(\n                values,\n                { fom: values.fom!, tom: values.tom! },\n                regelProps.familiehendelsesdato,\n                regelProps.periodetype,\n                values.konto,\n                regelProps.erFarEllerMedmor,\n                regelProps.termindato,\n                regelProps.situasjon,\n            ),\n    },\n    [PeriodeUttakFormField.erMorForSyk]: {\n        isAnswered: ({ values }) => values.erMorForSyk !== YesOrNo.UNANSWERED,\n        isIncluded: ({ values, regelProps }) => getUttakSkjemaregler(values, regelProps).erMorForSykSkalBesvares(),\n        visibilityFilter: ({ values }) => values.ønskerFlerbarnsdager !== YesOrNo.UNANSWERED || hasValue(values.konto),\n    },\n    [PeriodeUttakFormField.uttakRundtFødselÅrsak]: {\n        isAnswered: ({ values }) => hasValue(values.uttakRundtFødselÅrsak),\n        isIncluded: ({ values, regelProps }) =>\n            getUttakSkjemaregler(values, regelProps).uttakRundtFødselÅrsakSpørsmålSkalBesvares(),\n        visibilityFilter: ({ values }) => values.ønskerFlerbarnsdager !== YesOrNo.UNANSWERED || hasValue(values.konto),\n    },\n    [PeriodeUttakFormField.samtidigUttak]: {\n        isAnswered: ({ values }) => values.samtidigUttak !== YesOrNo.UNANSWERED,\n        isIncluded: ({ values, regelProps }) => getUttakSkjemaregler(values, regelProps).samtidigUttakSkalBesvares(),\n        visibilityFilter: ({ values, regelProps }) =>\n            skalViseSamtidigUttak(getUttakSkjemaregler(values, regelProps), values),\n    },\n    [PeriodeUttakFormField.samtidigUttakProsent]: {\n        isAnswered: ({ values }) => hasValue(values.samtidigUttakProsent),\n        isIncluded: ({ values, regelProps }) => getUttakSkjemaregler(values, regelProps).samtidigUttakSkalBesvares(),\n        visibilityFilter: ({ values }) => values.samtidigUttak === YesOrNo.YES,\n    },\n    [PeriodeUttakFormField.skalHaGradering]: {\n        isAnswered: ({ values }) => values.skalHaGradering !== YesOrNo.UNANSWERED,\n        isIncluded: ({ values, regelProps }) => getUttakSkjemaregler(values, regelProps).graderingSkalBesvares(),\n        visibilityFilter: ({ values, regelProps }) =>\n            skalViseGradering(\n                getUttakSkjemaregler(values, regelProps),\n                values,\n                regelProps.familiehendelsesdato,\n                regelProps.erDeltUttakINorge,\n                regelProps.annenForelder,\n            ),\n    },\n    [PeriodeUttakFormField.stillingsprosent]: {\n        isAnswered: ({ values }) => hasValue(values.stillingsprosent),\n        isIncluded: ({ values, regelProps }) => getUttakSkjemaregler(values, regelProps).graderingSkalBesvares(),\n        visibilityFilter: ({ values }) => values.skalHaGradering === YesOrNo.YES,\n    },\n    [PeriodeUttakFormField.arbeidsformer]: {\n        isAnswered: ({ values }) => values.arbeidsformer.length > 0,\n        isIncluded: ({ values, regelProps }) => getUttakSkjemaregler(values, regelProps).graderingSkalBesvares(),\n        visibilityFilter: ({ values }) => values.skalHaGradering === YesOrNo.YES,\n    },\n    [PeriodeUttakFormField.overføringsårsak]: {\n        isAnswered: ({ values }) => hasValue(values.overføringsårsak),\n        isIncluded: ({ values, regelProps }) => getUttakSkjemaregler(values, regelProps).overføringsårsakSkalBesvares(),\n        visibilityFilter: ({ values }) => hasValue(values.konto),\n    },\n    [PeriodeUttakFormField.overføringsdokumentasjon]: {\n        isAnswered: ({ values }) => values.overføringsdokumentasjon.length >= 0,\n        isIncluded: ({ values, regelProps }) => getUttakSkjemaregler(values, regelProps).overføringsårsakSkalBesvares(),\n        visibilityFilter: ({ values }) => hasValue(values.overføringsårsak),\n    },\n    [PeriodeUttakFormField.aktivitetskravMor]: {\n        isAnswered: ({ values }) => hasValue(values.aktivitetskravMor),\n        isIncluded: ({ values, regelProps }) =>\n            getUttakSkjemaregler(values, regelProps).aktivitetskravMorSkalBesvares(),\n        visibilityFilter: ({ values, regelProps }) =>\n            skalViseAktivitetskrav(getUttakSkjemaregler(values, regelProps), values),\n    },\n    [PeriodeUttakFormField.aktivitetskravMorDokumentasjon]: {\n        isAnswered: ({ values }) => values.aktivitetskravMorDokumentasjon.length >= 0,\n        isIncluded: ({ values, regelProps, isOpen }) =>\n            getUttakSkjemaregler(values, regelProps).aktivitetskravMorSkalBesvares() && isOpen,\n        visibilityFilter: ({ values, regelProps }) =>\n            skalViseAktivitetskrav(getUttakSkjemaregler(values, regelProps), values),\n    },\n};\n\nexport const periodeUttakFormQuestionsConfig = Questions<PeriodeUttakFormQuestionsPayload, PeriodeUttakFormField>(\n    PeriodeUttakFormConfig,\n);\n","import { hasValue } from '@navikt/fp-common';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { Attachment } from 'app/types/Attachment';\nimport { AttachmentType } from 'app/types/AttachmentType';\nimport { Forelder } from 'app/types/Forelder';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { Skjemanummer } from 'app/types/Skjemanummer';\nimport { UttakRundtFødselÅrsak } from 'app/types/UttakRundtFødselÅrsak';\nimport { convertBooleanOrUndefinedToYesOrNo, convertYesOrNoOrUndefinedToBoolean } from 'app/utils/formUtils';\nimport { getMorsAktivitet, getMorsAktivitetSkjemanummer } from 'app/utils/morsAktivitetUtils';\nimport { trimNumberValue } from 'app/utils/numberUtils';\nimport { lagSendSenereDokumentNårIngenAndreFinnes } from 'app/utils/vedleggUtils';\nimport dayjs from 'dayjs';\nimport { MorsAktivitet } from 'uttaksplan/types/MorsAktivitet';\nimport { OverføringÅrsakType } from 'uttaksplan/types/OverføringÅrsakType';\nimport {\n    Arbeidsform,\n    isOppholdsperiode,\n    isOverføringsperiode,\n    isUttaksperiode,\n    Oppholdsperiode,\n    Overføringsperiode,\n    Periode,\n    Periodetype,\n    Uttaksperiode,\n} from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { getOppholdsÅrsakFromStønadskonto, getStønadskontoFromOppholdsårsak } from 'uttaksplan/utils/periodeUtils';\nimport { PeriodeUttakFormData, PeriodeUttakFormField } from './periodeUttakFormConfig';\nimport {\n    erSamtidigUttakFarMedmorFørFødselWLB,\n    erSamtidigUttakFarMedmorFørFørsteSeksUkerWLB,\n} from './periodeUttakFormQuestionsConfig';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\n\nconst getInitialKonto = (\n    erDeltUttak: boolean,\n    erMorUfør: boolean,\n    periodenStarterFørFamdato: boolean,\n    erFarEllerMedmor: boolean\n) => {\n    if (erDeltUttak) {\n        if (periodenStarterFørFamdato && erFarEllerMedmor) {\n            return StønadskontoType.Fedrekvote;\n        }\n\n        return '';\n    }\n\n    if (erFarEllerMedmor && periodenStarterFørFamdato) {\n        return StønadskontoType.AktivitetsfriKvote;\n    }\n\n    if (erMorUfør) {\n        return '';\n    }\n\n    return StønadskontoType.Foreldrepenger;\n};\n\nconst getHvemSkalTaUttak = (\n    erDeltUttak: boolean,\n    forelder: Forelder,\n    periodenStarterFørFamdato: boolean,\n    erFarEllerMedmor: boolean,\n    annenForelderHarRettIEØS: boolean\n) => {\n    if (erDeltUttak) {\n        if ((periodenStarterFørFamdato || annenForelderHarRettIEØS) && erFarEllerMedmor) {\n            return Forelder.farMedmor;\n        }\n        if (annenForelderHarRettIEØS) {\n            return erFarEllerMedmor ? Forelder.farMedmor : Forelder.mor;\n        }\n\n        return '';\n    }\n\n    return forelder;\n};\n\nconst getInitialValues = (\n    erDeltUttak: boolean,\n    forelder: Forelder,\n    erMorUfør: boolean,\n    familiehendelsesdato: Date,\n    startdatoPeriode: Date | undefined,\n    erFarEllerMedmor: boolean,\n    annenForelderHarRettIEØS: boolean\n): PeriodeUttakFormData => {\n    const periodenStarterFørFamdato = startdatoPeriode\n        ? dayjs(startdatoPeriode).isBefore(familiehendelsesdato, 'day')\n        : false;\n    const hvemSkalTaUttak = getHvemSkalTaUttak(\n        erDeltUttak,\n        forelder,\n        periodenStarterFørFamdato,\n        erFarEllerMedmor,\n        annenForelderHarRettIEØS\n    );\n    const konto = getInitialKonto(erDeltUttak, erMorUfør, periodenStarterFørFamdato, erFarEllerMedmor);\n\n    return {\n        [PeriodeUttakFormField.fom]: undefined,\n        [PeriodeUttakFormField.tom]: undefined,\n        [PeriodeUttakFormField.konto]: konto,\n        [PeriodeUttakFormField.samtidigUttak]: YesOrNo.UNANSWERED,\n        [PeriodeUttakFormField.aktivitetskravMor]: '',\n        [PeriodeUttakFormField.aktivitetskravMorDokumentasjon]: [],\n        [PeriodeUttakFormField.overføringsårsak]: '',\n        [PeriodeUttakFormField.overføringsdokumentasjon]: [],\n        [PeriodeUttakFormField.skalHaGradering]: YesOrNo.UNANSWERED,\n        [PeriodeUttakFormField.stillingsprosent]: '',\n        [PeriodeUttakFormField.arbeidsformer]: '',\n        [PeriodeUttakFormField.erMorForSyk]: YesOrNo.UNANSWERED,\n        [PeriodeUttakFormField.erMorForSykDokumentasjon]: [],\n        [PeriodeUttakFormField.uttakRundtFødselÅrsak]: '',\n        [PeriodeUttakFormField.samtidigUttakProsent]: '',\n        [PeriodeUttakFormField.hvemSkalTaUttak]: hvemSkalTaUttak,\n        [PeriodeUttakFormField.ønskerFlerbarnsdager]: YesOrNo.UNANSWERED,\n    };\n};\n\nexport const cleanPeriodeUttakFormData = (\n    values: PeriodeUttakFormData,\n    visibility: QuestionVisibility<PeriodeUttakFormField, undefined>,\n    erDeltUttak: boolean,\n    forelder: Forelder,\n    erMorUfør: boolean,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    annenForelderHarRettIEØS: boolean\n): PeriodeUttakFormData => {\n    const initialValues = getInitialValues(\n        erDeltUttak,\n        forelder,\n        erMorUfør,\n        familiehendelsesdato,\n        values.fom,\n        erFarEllerMedmor,\n        annenForelderHarRettIEØS\n    );\n\n    const cleanedData: PeriodeUttakFormData = {\n        fom: values.fom,\n        tom: values.tom,\n        hvemSkalTaUttak: values.hvemSkalTaUttak,\n        aktivitetskravMor: visibility.isVisible(PeriodeUttakFormField.aktivitetskravMor)\n            ? values.aktivitetskravMor\n            : '',\n        aktivitetskravMorDokumentasjon: visibility.isVisible(PeriodeUttakFormField.aktivitetskravMorDokumentasjon)\n            ? values.aktivitetskravMorDokumentasjon\n            : [],\n        erMorForSyk: visibility.isVisible(PeriodeUttakFormField.erMorForSyk)\n            ? values.erMorForSyk\n            : initialValues.erMorForSyk,\n        erMorForSykDokumentasjon:\n            visibility.isVisible(PeriodeUttakFormField.erMorForSyk) ||\n            values.uttakRundtFødselÅrsak === UttakRundtFødselÅrsak.morErForSyk\n                ? values.erMorForSykDokumentasjon\n                : initialValues.erMorForSykDokumentasjon,\n        uttakRundtFødselÅrsak: visibility.isVisible(PeriodeUttakFormField.uttakRundtFødselÅrsak)\n            ? values.uttakRundtFødselÅrsak\n            : initialValues.uttakRundtFødselÅrsak,\n        arbeidsformer: visibility.isVisible(PeriodeUttakFormField.arbeidsformer) ? values.arbeidsformer : '',\n        konto: values.konto,\n        overføringsdokumentasjon: visibility.isVisible(PeriodeUttakFormField.overføringsdokumentasjon)\n            ? values.overføringsdokumentasjon\n            : [],\n        overføringsårsak: visibility.isVisible(PeriodeUttakFormField.overføringsårsak)\n            ? values.overføringsårsak\n            : initialValues.overføringsårsak,\n        samtidigUttak: visibility.isVisible(PeriodeUttakFormField.samtidigUttak)\n            ? values.samtidigUttak\n            : initialValues.samtidigUttak,\n        samtidigUttakProsent: visibility.isVisible(PeriodeUttakFormField.samtidigUttakProsent)\n            ? values.samtidigUttakProsent\n            : initialValues.samtidigUttakProsent,\n        skalHaGradering: visibility.isVisible(PeriodeUttakFormField.skalHaGradering)\n            ? values.skalHaGradering\n            : initialValues.skalHaGradering,\n        stillingsprosent: visibility.isVisible(PeriodeUttakFormField.stillingsprosent)\n            ? values.stillingsprosent\n            : initialValues.stillingsprosent,\n        ønskerFlerbarnsdager: visibility.isVisible(PeriodeUttakFormField.ønskerFlerbarnsdager)\n            ? values.ønskerFlerbarnsdager\n            : initialValues.ønskerFlerbarnsdager,\n    };\n\n    return cleanedData;\n};\n\nconst getInitialÅrsakForUttakRundtFødsel = (\n    erMorForSyk: boolean | undefined,\n    ønskerSamtidigUttak: boolean | undefined,\n    erDeltUttak: boolean\n): UttakRundtFødselÅrsak | undefined => {\n    if (!erDeltUttak) {\n        return undefined;\n    }\n    if (erMorForSyk) {\n        return UttakRundtFødselÅrsak.morErForSyk;\n    }\n    if (ønskerSamtidigUttak) {\n        return UttakRundtFødselÅrsak.samtidigUttak;\n    }\n    return undefined;\n};\n\nexport const getPeriodeUttakFormInitialValues = (\n    periode: Periode,\n    erDeltUttak: boolean,\n    forelder: Forelder,\n    erMorUfør: boolean,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    annenForelderHarRettIEØS: boolean\n): PeriodeUttakFormData => {\n    const initialValues = getInitialValues(\n        erDeltUttak,\n        forelder,\n        erMorUfør,\n        familiehendelsesdato,\n        periode.tidsperiode.fom,\n        erFarEllerMedmor,\n        annenForelderHarRettIEØS\n    );\n\n    if (periode !== undefined) {\n        if (isUttaksperiode(periode)) {\n            return {\n                ...initialValues,\n                fom: periode.tidsperiode.fom,\n                tom: periode.tidsperiode.tom,\n                aktivitetskravMor: periode.morsAktivitetIPerioden || '',\n                aktivitetskravMorDokumentasjon: periode.vedlegg || [],\n                erMorForSyk: convertBooleanOrUndefinedToYesOrNo(periode.erMorForSyk),\n                erMorForSykDokumentasjon: periode.vedlegg || [],\n                hvemSkalTaUttak: periode.forelder || initialValues.hvemSkalTaUttak,\n                arbeidsformer:\n                    periode.arbeidsformer && periode.arbeidsformer.length > 0\n                        ? getFrilansSNEllerOrgnr(periode.arbeidsformer, periode.orgnumre)\n                        : '',\n                konto: periode.konto || initialValues.konto,\n                samtidigUttak: convertBooleanOrUndefinedToYesOrNo(periode.ønskerSamtidigUttak),\n                samtidigUttakProsent: periode.samtidigUttakProsent || '',\n                skalHaGradering: convertBooleanOrUndefinedToYesOrNo(periode.gradert),\n                stillingsprosent: periode.stillingsprosent || '',\n                ønskerFlerbarnsdager: convertBooleanOrUndefinedToYesOrNo(periode.ønskerFlerbarnsdager),\n                uttakRundtFødselÅrsak:\n                    getInitialÅrsakForUttakRundtFødsel(periode.erMorForSyk, periode.ønskerSamtidigUttak, erDeltUttak) ||\n                    initialValues.uttakRundtFødselÅrsak,\n            };\n        }\n\n        if (isOverføringsperiode(periode)) {\n            return {\n                ...initialValues,\n                hvemSkalTaUttak: periode.forelder,\n                konto: periode.konto,\n                fom: periode.tidsperiode.fom,\n                tom: periode.tidsperiode.tom,\n                overføringsårsak: periode.årsak,\n                overføringsdokumentasjon: periode.vedlegg || [],\n            };\n        }\n\n        if (isOppholdsperiode(periode)) {\n            return {\n                ...initialValues,\n                hvemSkalTaUttak: periode.forelder,\n                konto: getStønadskontoFromOppholdsårsak(periode.årsak),\n                fom: periode.tidsperiode.fom,\n                tom: periode.tidsperiode.tom,\n            };\n        }\n\n        return {\n            ...initialValues,\n            fom: periode.tidsperiode.fom,\n            tom: periode.tidsperiode.tom,\n        };\n    }\n\n    return {\n        ...initialValues,\n    };\n};\n\nconst getFrilansSNEllerOrgnr = (arbeidsformer: Arbeidsform[], orgnumre?: string[]): Arbeidsform => {\n    if (arbeidsformer.includes(Arbeidsform.frilans) || arbeidsformer.includes(Arbeidsform.selvstendignæringsdrivende)) {\n        return arbeidsformer[0];\n    }\n\n    return orgnumre![0] as Arbeidsform;\n};\n\nconst getArbeidsform = (arbeidsformer: Arbeidsform[]): Arbeidsform[] => {\n    return arbeidsformer.includes(Arbeidsform.frilans) || arbeidsformer.includes(Arbeidsform.selvstendignæringsdrivende)\n        ? arbeidsformer\n        : [Arbeidsform.arbeidstaker];\n};\n\nconst getOrgnummer = (arbeidsformer: Arbeidsform[]): string[] => {\n    return arbeidsformer.includes(Arbeidsform.frilans) || arbeidsformer.includes(Arbeidsform.selvstendignæringsdrivende)\n        ? []\n        : arbeidsformer;\n};\n\nconst getErArbeidstaker = (arbeidsformer: Arbeidsform[]): boolean => {\n    return (\n        arbeidsformer.includes(Arbeidsform.frilans) || arbeidsformer.includes(Arbeidsform.selvstendignæringsdrivende)\n    );\n};\n\nconst getSamtidigUttaksProsentWLB = (\n    ønskerGradering: boolean | undefined,\n    dekningsgrad: string | undefined\n): string => {\n    return ønskerGradering && dekningsgrad !== undefined\n        ? (100 - parseFloat(trimNumberValue(dekningsgrad))).toString()\n        : '100';\n};\n\nconst velgVedleggSomSkalBrukes = (\n    aktivitetskravMorDokumentasjon: Attachment[],\n    erMorForSykDokumentasjon: Attachment[]\n): Attachment[] => {\n    if (aktivitetskravMorDokumentasjon.length > 0) {\n        return aktivitetskravMorDokumentasjon;\n    }\n\n    return erMorForSykDokumentasjon;\n};\n\nconst skalVedleggPåkreves = (\n    morsAktivitetIPerioden: '' | MorsAktivitet | undefined,\n    erMorForSyk: boolean,\n    uttakRundtFødselÅrsak: UttakRundtFødselÅrsak | '' | undefined\n): boolean => {\n    if (\n        hasValue(morsAktivitetIPerioden) ||\n        erMorForSyk ||\n        (uttakRundtFødselÅrsak !== undefined && uttakRundtFødselÅrsak === UttakRundtFødselÅrsak.morErForSyk)\n    ) {\n        return true;\n    }\n\n    return false;\n};\n\nconst getKontoVerdi = (\n    samtidigWLBUttakFørFødselFarMedmor: boolean,\n    erFarEllerMedmor: boolean,\n    erDeltUttak: boolean,\n    startDato: Date,\n    inputKonto: StønadskontoType,\n    familiehendelsesdato: Date\n): StønadskontoType => {\n    if (samtidigWLBUttakFørFødselFarMedmor) {\n        return StønadskontoType.Fedrekvote;\n    }\n    if (!erDeltUttak && erFarEllerMedmor && dayjs(startDato).isBefore(familiehendelsesdato, 'day')) {\n        return StønadskontoType.AktivitetsfriKvote;\n    }\n\n    return inputKonto;\n};\n\nexport const mapPeriodeUttakFormToPeriode = (\n    values: Partial<PeriodeUttakFormData>,\n    id: string,\n    type: Periodetype,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    erDeltUttak: boolean,\n    situasjon: Situasjon\n): Periode => {\n    if (type === Periodetype.Overføring) {\n        const overføringTrengerDokumentasjon =\n            values.overføringsårsak !== OverføringÅrsakType.aleneomsorg &&\n            values.overføringsårsak !== OverføringÅrsakType.ikkeRettAnnenForelder;\n        const vedlegg = overføringTrengerDokumentasjon\n            ? lagSendSenereDokumentNårIngenAndreFinnes(\n                  values.overføringsdokumentasjon!,\n                  AttachmentType.OVERFØRING_KVOTE,\n                  Skjemanummer.DOK_OVERFØRING_FOR_SYK\n              )\n            : undefined;\n        const periode: Overføringsperiode = {\n            id,\n            type,\n            forelder: values.hvemSkalTaUttak as Forelder,\n            konto: values.konto as StønadskontoType,\n            tidsperiode: {\n                fom: values.fom!,\n                tom: values.tom!,\n            },\n            årsak: values.overføringsårsak as OverføringÅrsakType,\n            vedlegg,\n        };\n\n        return periode;\n    }\n\n    if (type === Periodetype.Opphold) {\n        const periode: Oppholdsperiode = {\n            id,\n            type,\n            forelder: values.hvemSkalTaUttak as Forelder,\n            årsak: getOppholdsÅrsakFromStønadskonto(values.konto as StønadskontoType)!,\n            tidsperiode: {\n                fom: values.fom!,\n                tom: values.tom!,\n            },\n        };\n\n        return periode;\n    }\n    const samtidigWLBUttakFørFødselFarMedmor = erSamtidigUttakFarMedmorFørFødselWLB(\n        values,\n        familiehendelsesdato,\n        erFarEllerMedmor,\n        erDeltUttak,\n        situasjon\n    );\n    const samtidigWLBUttakFørFørsteSeksUkerFarMedmor = erSamtidigUttakFarMedmorFørFørsteSeksUkerWLB(\n        values,\n        familiehendelsesdato,\n        erFarEllerMedmor,\n        erDeltUttak,\n        situasjon\n    );\n    const attachmentType = hasValue(values.aktivitetskravMor)\n        ? AttachmentType.MORS_AKTIVITET_DOKUMENTASJON\n        : AttachmentType.UTSETTELSE_SYKDOM;\n\n    const skjemanummer = hasValue(values.aktivitetskravMor)\n        ? getMorsAktivitetSkjemanummer(values.aktivitetskravMor as MorsAktivitet)\n        : Skjemanummer.DOK_MORS_UTDANNING_ARBEID_SYKDOM;\n\n    const relevantVedlegg = velgVedleggSomSkalBrukes(\n        values.aktivitetskravMorDokumentasjon!,\n        values.erMorForSykDokumentasjon!\n    );\n\n    const morErForSyk =\n        hasValue(values.uttakRundtFødselÅrsak) && values.uttakRundtFødselÅrsak === UttakRundtFødselÅrsak.morErForSyk\n            ? true\n            : convertYesOrNoOrUndefinedToBoolean(values.erMorForSyk);\n\n    const erSamtidigUttak =\n        values.uttakRundtFødselÅrsak === UttakRundtFødselÅrsak.samtidigUttak || samtidigWLBUttakFørFødselFarMedmor\n            ? true\n            : convertYesOrNoOrUndefinedToBoolean(values.samtidigUttak);\n\n    const samtidigUttakProsentInputVerdi = hasValue(values.samtidigUttakProsent)\n        ? trimNumberValue(values.samtidigUttakProsent!)\n        : undefined;\n\n    const samtidigUttakProsentVerdi =\n        values.uttakRundtFødselÅrsak === UttakRundtFødselÅrsak.samtidigUttak || samtidigWLBUttakFørFødselFarMedmor\n            ? getSamtidigUttaksProsentWLB(\n                  convertYesOrNoOrUndefinedToBoolean(values.skalHaGradering),\n                  values.stillingsprosent\n              )\n            : samtidigUttakProsentInputVerdi;\n\n    const forelderVerdi = samtidigWLBUttakFørFørsteSeksUkerFarMedmor\n        ? Forelder.farMedmor\n        : (values.hvemSkalTaUttak as Forelder);\n\n    const kontoVerdi = getKontoVerdi(\n        samtidigWLBUttakFørFødselFarMedmor,\n        erFarEllerMedmor,\n        erDeltUttak,\n        values.fom!,\n        values.konto as StønadskontoType,\n        familiehendelsesdato\n    );\n\n    const periode: Uttaksperiode = {\n        id,\n        forelder: forelderVerdi,\n        konto: kontoVerdi,\n        tidsperiode: {\n            fom: values.fom!,\n            tom: values.tom!,\n        },\n        type: Periodetype.Uttak,\n        arbeidsformer: hasValue(values.arbeidsformer)\n            ? getArbeidsform([values.arbeidsformer as Arbeidsform])\n            : undefined,\n        morsAktivitetIPerioden: getMorsAktivitet(\n            values.aktivitetskravMor,\n            convertYesOrNoOrUndefinedToBoolean(values.erMorForSyk)\n        ),\n\n        erArbeidstaker: getErArbeidstaker(\n            hasValue(values.arbeidsformer) ? getArbeidsform([values.arbeidsformer as Arbeidsform]) : []\n        ),\n        erMorForSyk: morErForSyk,\n        gradert: convertYesOrNoOrUndefinedToBoolean(values.skalHaGradering),\n        harIkkeAktivitetskrav: values.konto === StønadskontoType.AktivitetsfriKvote ? true : undefined,\n        orgnumre: getOrgnummer(hasValue(values.arbeidsformer) ? [values.arbeidsformer as Arbeidsform] : []),\n        stillingsprosent: hasValue(values.stillingsprosent) ? trimNumberValue(values.stillingsprosent!) : undefined,\n        ønskerFlerbarnsdager: convertYesOrNoOrUndefinedToBoolean(values.ønskerFlerbarnsdager),\n        ønskerSamtidigUttak: erSamtidigUttak,\n        samtidigUttakProsent: samtidigUttakProsentVerdi,\n        vedlegg: skalVedleggPåkreves(\n            values.aktivitetskravMor,\n            convertYesOrNoOrUndefinedToBoolean(values.erMorForSyk) || false,\n            values.uttakRundtFødselÅrsak\n        )\n            ? lagSendSenereDokumentNårIngenAndreFinnes(relevantVedlegg, attachmentType, skjemanummer)\n            : [],\n    };\n\n    return periode;\n};\n","import { Block, hasValue, intlUtils } from '@navikt/fp-common';\nimport FormikFileUploader from 'app/components/formik-file-uploader/FormikFileUploader';\nimport links from 'app/links/links';\nimport { Attachment } from 'app/types/Attachment';\nimport { AttachmentType } from 'app/types/AttachmentType';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { Skjemanummer } from 'app/types/Skjemanummer';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport { MorsAktivitet } from 'uttaksplan/types/MorsAktivitet';\nimport { getNavnGenitivEierform } from 'uttaksplan/utils/stønadskontoerUtils';\nimport { PeriodeUtsettelseFormField } from '../../periode-utsettelse-form/periodeUtsettelseFormConfig';\nimport { PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\nimport { BodyShort, GuidePanel } from '@navikt/ds-react';\n\ninterface Props {\n    fieldName: PeriodeUttakFormField | PeriodeUtsettelseFormField;\n    vedleggFieldName:\n        | PeriodeUttakFormField.aktivitetskravMorDokumentasjon\n        | PeriodeUtsettelseFormField.morsAktivitetIPeriodenDokumentasjon;\n    FormComponents: any;\n    navnPåForeldre: NavnPåForeldre;\n    aktivitetskravMorValue: MorsAktivitet | '';\n    aktivitetskravVedlegg: Attachment[];\n    isOpen: boolean;\n}\n\nconst getVeilederTekst = (\n    intl: IntlShape,\n    morsAktivitetIPerioden: MorsAktivitet | '',\n    navnPåForeldre: NavnPåForeldre,\n) => {\n    if (morsAktivitetIPerioden === MorsAktivitet.Arbeid) {\n        return (\n            <BodyShort>\n                <FormattedMessage\n                    id=\"uttaksplan.morsAktivitet.veileder.arbeid\"\n                    values={{ navnMor: getNavnGenitivEierform(navnPåForeldre.mor, intl.locale) }}\n                />\n            </BodyShort>\n        );\n    } else if (morsAktivitetIPerioden === MorsAktivitet.ArbeidOgUtdanning) {\n        const listData = [\n            intlUtils(intl, 'uttaksplan.morsAktivitet.veileder.arbeidOgUtdanning.punkt1'),\n            intlUtils(intl, 'uttaksplan.morsAktivitet.veileder.arbeidOgUtdanning.punkt2'),\n            intlUtils(intl, 'uttaksplan.morsAktivitet.veileder.arbeidOgUtdanning.punkt3'),\n            intlUtils(intl, 'uttaksplan.morsAktivitet.veileder.arbeidOgUtdanning.punkt4'),\n        ];\n\n        return (\n            <>\n                <BodyShort>\n                    <FormattedMessage\n                        id=\"uttaksplan.morsAktivitet.veileder.arbeidOgUtdanning\"\n                        values={{ navnMor: navnPåForeldre.mor }}\n                    />\n                </BodyShort>\n                <ul>\n                    {listData.map((listItem, index) => (\n                        <li key={`arbeidOgUtdanning${index}`}>{listItem}</li>\n                    ))}\n                </ul>\n            </>\n        );\n    } else if (\n        morsAktivitetIPerioden === MorsAktivitet.Innlagt ||\n        morsAktivitetIPerioden === MorsAktivitet.TrengerHjelp\n    ) {\n        return (\n            <BodyShort>\n                <FormattedMessage\n                    id=\"uttaksplan.morsAktivitet.veileder.informasjonVedSykdomAnnenForelder\"\n                    values={{ navn: navnPåForeldre.mor }}\n                />\n            </BodyShort>\n        );\n    } else if (morsAktivitetIPerioden === MorsAktivitet.Introduksjonsprogrammet) {\n        return (\n            <BodyShort>\n                <FormattedMessage\n                    id=\"uttaksplan.morsAktivitet.veileder.introduksjonsprogrammet\"\n                    values={{ navnMor: navnPåForeldre.mor }}\n                />\n            </BodyShort>\n        );\n    } else if (morsAktivitetIPerioden === MorsAktivitet.Kvalifiseringsprogrammet) {\n        return (\n            <BodyShort>\n                <FormattedMessage\n                    id=\"uttaksplan.morsAktivitet.veileder.kvalifiseringsprogrammet\"\n                    values={{ navnMor: navnPåForeldre.mor }}\n                />\n            </BodyShort>\n        );\n    } else if (morsAktivitetIPerioden === MorsAktivitet.Utdanning) {\n        const listData = [\n            intlUtils(intl, 'uttaksplan.morsAktivitet.veileder.utdanning.punkt1'),\n            intlUtils(intl, 'uttaksplan.morsAktivitet.veileder.utdanning.punkt2'),\n            intlUtils(intl, 'uttaksplan.morsAktivitet.veileder.utdanning.punkt3'),\n            intlUtils(intl, 'uttaksplan.morsAktivitet.veileder.utdanning.punkt4'),\n        ];\n\n        return (\n            <>\n                <BodyShort>\n                    <FormattedMessage\n                        id=\"uttaksplan.morsAktivitet.veileder.utdanning\"\n                        values={{ navnMor: navnPåForeldre.mor }}\n                    />\n                </BodyShort>\n                <ul>\n                    {listData.map((listItem, index) => (\n                        <li key={`trengerhjelp${index}`}>{listItem}</li>\n                    ))}\n                </ul>\n            </>\n        );\n    } else {\n        return '';\n    }\n};\n\nconst renderOptions = (intl: IntlShape) => {\n    return Object.keys(MorsAktivitet)\n        .filter(\n            (aktivitetsid) =>\n                (MorsAktivitet as any)[aktivitetsid] !== MorsAktivitet.Uføre &&\n                (MorsAktivitet as any)[aktivitetsid] !== MorsAktivitet.IkkeOppgitt,\n        )\n        .map((aktivitetsid) => (\n            <option value={(MorsAktivitet as any)[aktivitetsid]} key={(MorsAktivitet as any)[aktivitetsid]}>\n                {intlUtils(intl, `uttaksplan.morsAktivitet.${aktivitetsid}`)}\n            </option>\n        ));\n};\n\nexport const getMorsAktivitetSkjemanummer = (morsAktivitet?: MorsAktivitet): Skjemanummer => {\n    switch (morsAktivitet) {\n        case MorsAktivitet.Innlagt:\n            return Skjemanummer.DOK_INNLEGGELSE;\n        case MorsAktivitet.Kvalifiseringsprogrammet:\n            return Skjemanummer.BEKREFTELSE_DELTAR_KVALIFISERINGSPROGRAM;\n        case MorsAktivitet.Introduksjonsprogrammet:\n            return Skjemanummer.DOK_DELTAKELSE_I_INTRODUKSJONSPROGRAMMET;\n        case MorsAktivitet.ArbeidOgUtdanning:\n        case MorsAktivitet.Arbeid:\n        case MorsAktivitet.TrengerHjelp:\n            return Skjemanummer.DOK_MORS_UTDANNING_ARBEID_SYKDOM;\n        case MorsAktivitet.Utdanning:\n            return Skjemanummer.BEKREFTELSE_FRA_STUDIESTED;\n        default:\n            return Skjemanummer.ANNET;\n    }\n};\n\nconst AktivitetskravSpørsmål: FunctionComponent<Props> = ({\n    fieldName,\n    vedleggFieldName,\n    navnPåForeldre,\n    aktivitetskravMorValue,\n    aktivitetskravVedlegg,\n    FormComponents,\n    isOpen,\n}) => {\n    const intl = useIntl();\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <FormComponents.Select\n                    name={fieldName}\n                    label={intlUtils(intl, 'uttaksplan.aktivitetskrav', { navnMor: navnPåForeldre.mor })}\n                    validate={(value: MorsAktivitet | '') => {\n                        if (!hasValue(value)) {\n                            return intlUtils(intl, 'uttaksplan.validering.aktivitetskrav');\n                        }\n\n                        return undefined;\n                    }}\n                >\n                    <option value=\"\" />\n                    {renderOptions(intl)}\n                </FormComponents.Select>\n            </Block>\n            <Block padBottom=\"l\" visible={hasValue(aktivitetskravMorValue)}>\n                <GuidePanel>\n                    {getVeilederTekst(intl, aktivitetskravMorValue, navnPåForeldre)}\n                    <BodyShort>\n                        <FormattedMessage\n                            id=\"uttaksplan.morsAktivitet.lesmer\"\n                            values={{\n                                a: (msg: any) => (\n                                    <a\n                                        href={links.morsAktivitetskrav}\n                                        className=\"lenke\"\n                                        rel=\"noreferrer\"\n                                        target=\"_blank\"\n                                    >\n                                        {msg}\n                                    </a>\n                                ),\n                            }}\n                        />\n                    </BodyShort>\n                </GuidePanel>\n            </Block>\n\n            <Block padBottom=\"l\" visible={hasValue(aktivitetskravMorValue) && isOpen}>\n                <FormikFileUploader\n                    legend=\"Dokumentasjon for mors aktivitet\"\n                    label=\"Last opp dokumentasjon for mors aktivitet\"\n                    name={vedleggFieldName}\n                    attachmentType={AttachmentType.MORS_AKTIVITET_DOKUMENTASJON}\n                    skjemanummer={getMorsAktivitetSkjemanummer(aktivitetskravMorValue as MorsAktivitet)}\n                    attachments={aktivitetskravVedlegg}\n                />\n            </Block>\n        </>\n    );\n};\n\nexport default AktivitetskravSpørsmål;\n","import { ActionLink, bemUtils, Block, guid, intlUtils, TidsperiodeDate } from '@navikt/fp-common';\nimport AnnenForelder, { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport { isValidTidsperiode } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { Forelder } from 'app/types/Forelder';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { Dispatch, FunctionComponent, SetStateAction, useEffect, useState } from 'react';\nimport TidsperiodeDisplay from 'uttaksplan/components/tidsperiode-display/TidsperiodeDisplay';\nimport UttakEndreTidsperiodeSpørsmål from 'uttaksplan/components/uttak-endre-tidsperiode-spørsmål/UttakEndreTidsperiodeSpørsmål';\nimport { Periode, Periodetype, Utsettelsesperiode } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { getVelgbareStønadskontotyper } from 'uttaksplan/utils/stønadskontoerUtils';\nimport ErMorForSykSpørsmål from '../spørsmål/er-mor-for-syk/ErMorForSykSpørsmål';\nimport FlerbarnsdagerSpørsmål from '../spørsmål/flerbarnsdager/FlerbarnsdagerSpørsmål';\nimport HvemSkalHaUttakSpørsmål from '../spørsmål/hvem-skal-ha-uttak/HvemSkalHaUttakSpørsmål';\nimport HvilkenKontoSpørsmål from '../spørsmål/hvilken-konto/HvilkenKontoSpørsmål';\nimport UttakRundtFødselÅrsakSpørsmål from '../spørsmål/uttak-rundt-fødsel-årsak/UttakRundtFødselÅrsakSpørsmål';\nimport OverføringsårsakSpørsmål from '../spørsmål/overføringsårsak/OverføringsårsakSpørsmål';\nimport SamtidigUttakSpørsmål from '../spørsmål/samtidig-uttak/SamtidigUttakSpørsmål';\nimport SkalHaGraderingSpørsmål from '../spørsmål/skal-ha-gradering/SkalHaGraderingSpørsmål';\nimport { SubmitListener } from '../submit-listener/SubmitListener';\nimport TidsperiodeForm from '../tidsperiode-form/TidsperiodeForm';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormData, PeriodeUttakFormField } from './periodeUttakFormConfig';\nimport {\n    periodeUttakFormQuestionsConfig,\n    PeriodeUttakFormQuestionsPayload,\n    skalViseWLBInfoOmSamtidigUttakRundtFødsel,\n} from './periodeUttakFormQuestionsConfig';\nimport {\n    cleanPeriodeUttakFormData,\n    getPeriodeUttakFormInitialValues,\n    mapPeriodeUttakFormToPeriode,\n} from './periodeUttakFormUtils';\nimport { FormattedMessage, IntlShape } from 'react-intl';\nimport { getIsValidStateForPerioder, getSlettPeriodeTekst } from 'uttaksplan/utils/periodeUtils';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { andreAugust2022ReglerGjelder, formaterDatoKompakt, ISOStringToDate } from 'app/utils/dateUtils';\nimport AktivitetskravSpørsmål from '../spørsmål/aktivitetskrav/AktivitetskravSpørsmål';\nimport {\n    getFørsteUttaksdag2UkerFørFødsel,\n    getSisteUttaksdag6UkerEtterFødsel,\n    starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel,\n} from 'app/utils/wlbUtils';\n\nimport './periodeUttakForm.less';\nimport { Button, GuidePanel } from '@navikt/ds-react';\nimport { PeriodeValidState } from 'uttaksplan/Uttaksplan';\n\ninterface Props {\n    periode: Periode;\n    erEndringssøknad: boolean;\n    familiehendelsesdato: Date;\n    stønadskontoer: TilgjengeligStønadskonto[];\n    navnPåForeldre: NavnPåForeldre;\n    annenForelder: AnnenForelder;\n    arbeidsforhold: Arbeidsforhold[];\n    erFarEllerMedmor: boolean;\n    erFlerbarnssøknad: boolean;\n    erAleneOmOmsorg: boolean;\n    erDeltUttak: boolean;\n    situasjon: Situasjon;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n    handleAddPeriode?: (nyPeriode: Periode, familiehendelsedato: Date) => void;\n    setNyPeriodeFormIsVisible?: Dispatch<SetStateAction<boolean>>;\n    toggleIsOpen?: (id: string) => void;\n    handleDeletePeriode?: (periodeId: string) => void;\n    isNyPeriode?: boolean;\n    erMorUfør: boolean;\n    setPerioderErGyldige: React.Dispatch<React.SetStateAction<PeriodeValidState[]>>;\n    termindato: Date | undefined;\n    morHarRett: boolean;\n    antallBarn: number;\n    utsettelserIPlan: Utsettelsesperiode[];\n    intl: IntlShape;\n    isOpen: boolean;\n}\n\nconst periodenGjelderAnnenForelder = (erFarEllerMedmor: boolean, forelder: Forelder): boolean => {\n    return (erFarEllerMedmor && forelder === Forelder.farMedmor) || (!erFarEllerMedmor && forelder === Forelder.mor)\n        ? false\n        : true;\n};\n\nconst erUttakAvAnnenForeldersKvote = (konto: StønadskontoType | '', søkerErFarEllerMedmor: boolean): boolean => {\n    return (\n        (konto === StønadskontoType.Mødrekvote && søkerErFarEllerMedmor === true) ||\n        (konto === StønadskontoType.Fedrekvote && søkerErFarEllerMedmor === false)\n    );\n};\n\nconst getPeriodeType = (\n    periodenGjelder: Forelder | '',\n    erFarEllerMedmor: boolean,\n    konto: StønadskontoType | '',\n    familiehendelsedato: Date,\n    termindato: Date | undefined,\n    tidsperiode: TidsperiodeDate,\n): Periodetype => {\n    if (\n        erFarEllerMedmor &&\n        erUttakAvAnnenForeldersKvote(konto, erFarEllerMedmor) &&\n        starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel(tidsperiode, familiehendelsedato, termindato)\n    ) {\n        return Periodetype.Overføring;\n    }\n    if (periodenGjelder === '' || konto === '') {\n        return Periodetype.Uttak;\n    }\n\n    if (periodenGjelderAnnenForelder(erFarEllerMedmor, periodenGjelder)) {\n        return Periodetype.Opphold;\n    }\n\n    if (erUttakAvAnnenForeldersKvote(konto, erFarEllerMedmor)) {\n        return Periodetype.Overføring;\n    }\n\n    return Periodetype.Uttak;\n};\n\nconst PeriodeUttakForm: FunctionComponent<Props> = ({\n    familiehendelsesdato,\n    periode,\n    handleUpdatePeriode,\n    stønadskontoer,\n    navnPåForeldre,\n    annenForelder,\n    toggleIsOpen,\n    arbeidsforhold,\n    handleDeletePeriode,\n    setNyPeriodeFormIsVisible,\n    handleAddPeriode,\n    isNyPeriode = false,\n    erFarEllerMedmor,\n    erFlerbarnssøknad,\n    erAleneOmOmsorg,\n    erDeltUttak,\n    situasjon,\n    erMorUfør,\n    erEndringssøknad,\n    setPerioderErGyldige,\n    termindato,\n    morHarRett,\n    antallBarn,\n    utsettelserIPlan,\n    intl,\n    isOpen,\n}) => {\n    const [tidsperiodeIsOpen, setTidsperiodeIsOpen] = useState(false);\n    const [periodeIsValid, setPeriodeIsValid] = useState(true);\n    const bem = bemUtils('periodeUttakForm');\n    const toggleVisTidsperiode = () => {\n        setTidsperiodeIsOpen(!tidsperiodeIsOpen);\n    };\n    const forelder = erFarEllerMedmor ? Forelder.farMedmor : Forelder.mor;\n    const annenForelderHarRettIEØS =\n        isAnnenForelderOppgitt(annenForelder) && !!annenForelder.harRettPåForeldrepengerIEØS;\n\n    useEffect(() => {\n        setPerioderErGyldige((previousState: PeriodeValidState[]) => {\n            return getIsValidStateForPerioder(previousState, periode, periodeIsValid);\n        });\n    }, [periodeIsValid]);\n\n    const handleCleanup = (\n        values: PeriodeUttakFormData,\n        visibility: QuestionVisibility<PeriodeUttakFormField, undefined>,\n    ): PeriodeUttakFormData => {\n        return cleanPeriodeUttakFormData(\n            values,\n            visibility,\n            erDeltUttak,\n            forelder,\n            erMorUfør,\n            familiehendelsesdato,\n            erFarEllerMedmor,\n            annenForelderHarRettIEØS,\n        );\n    };\n    const erDeltUttakINorge = erDeltUttak && !annenForelderHarRettIEØS;\n    const velgbareStønadskontoer = getVelgbareStønadskontotyper(stønadskontoer);\n    const navnPåAnnenForelder =\n        isAnnenForelderOppgitt(annenForelder) && annenForelder.fornavn !== undefined && annenForelder.fornavn !== ''\n            ? annenForelder.fornavn\n            : intlUtils(intl, 'annen.forelder');\n\n    const startDatoPeriodeRundtFødselFarMedmor =\n        erFarEllerMedmor && andreAugust2022ReglerGjelder(familiehendelsesdato)\n            ? getFørsteUttaksdag2UkerFørFødsel(familiehendelsesdato, termindato)\n            : undefined;\n    const sluttDatoPeriodeRundtFødselFarMedmor =\n        erFarEllerMedmor && andreAugust2022ReglerGjelder(familiehendelsesdato)\n            ? getSisteUttaksdag6UkerEtterFødsel(familiehendelsesdato)\n            : undefined;\n\n    const erFarMedmorOgHarAleneomsorg = erFarEllerMedmor && erAleneOmOmsorg;\n\n    if (!isOpen) {\n        return null;\n    }\n\n    return (\n        <PeriodeUttakFormComponents.FormikWrapper\n            initialValues={getPeriodeUttakFormInitialValues(\n                periode,\n                erDeltUttak,\n                forelder,\n                erMorUfør,\n                familiehendelsesdato,\n                erFarEllerMedmor,\n                annenForelderHarRettIEØS,\n            )}\n            enableReinitialize={false}\n            onSubmit={(values: Partial<PeriodeUttakFormData>) => {\n                if (isNyPeriode) {\n                    const periodetype = getPeriodeType(\n                        values.hvemSkalTaUttak!,\n                        erFarEllerMedmor,\n                        values.konto!,\n                        familiehendelsesdato,\n                        termindato,\n                        { fom: values.fom, tom: values.tom } as TidsperiodeDate,\n                    );\n                    setNyPeriodeFormIsVisible!(false);\n                    handleAddPeriode!(\n                        mapPeriodeUttakFormToPeriode(\n                            values,\n                            guid(),\n                            periodetype,\n                            familiehendelsesdato,\n                            erFarEllerMedmor,\n                            erDeltUttak,\n                            situasjon,\n                        ),\n                        familiehendelsesdato,\n                    );\n                } else {\n                    return handleUpdatePeriode(\n                        mapPeriodeUttakFormToPeriode(\n                            values,\n                            periode.id,\n                            getPeriodeType(\n                                values.hvemSkalTaUttak!,\n                                erFarEllerMedmor,\n                                values.konto!,\n                                familiehendelsesdato,\n                                termindato,\n                                { fom: values.fom, tom: values.tom } as TidsperiodeDate,\n                            ),\n                            familiehendelsesdato,\n                            erFarEllerMedmor,\n                            erDeltUttak,\n                            situasjon,\n                        ),\n                        familiehendelsesdato,\n                    );\n                }\n            }}\n            renderForm={({ setFieldValue, values, isValid }) => {\n                const periodetype = getPeriodeType(\n                    values.hvemSkalTaUttak!,\n                    erFarEllerMedmor,\n                    values.konto!,\n                    familiehendelsesdato,\n                    termindato,\n                    { fom: values.fom, tom: values.tom } as TidsperiodeDate,\n                );\n                const søkerOppgirAnnenForeldersPeriode =\n                    (values.hvemSkalTaUttak === 'mor' && erFarEllerMedmor) ||\n                    (values.hvemSkalTaUttak === 'farMedmor' && !erFarEllerMedmor);\n\n                if (isValid !== periodeIsValid) {\n                    setPeriodeIsValid(isValid);\n                }\n                const visibility = periodeUttakFormQuestionsConfig.getVisbility({\n                    values,\n                    regelProps: {\n                        annenForelder,\n                        erAleneOmOmsorg,\n                        erDeltUttakINorge,\n                        erFarEllerMedmor,\n                        erFlerbarnssøknad,\n                        familiehendelsesdato,\n                        periodetype,\n                        situasjon,\n                        termindato,\n                        morHarRett,\n                        stønadskontoer,\n                        antallBarn,\n                    },\n                } as PeriodeUttakFormQuestionsPayload);\n\n                return (\n                    <>\n                        <Block visible={!isValidTidsperiode({ fom: values.fom!, tom: values.tom! })} padBottom=\"xl\">\n                            <TidsperiodeForm\n                                tidsperiode={{ fom: values.fom!, tom: values.tom! }}\n                                familiehendelsesdato={familiehendelsesdato}\n                                periode={periode}\n                                onBekreft={(values) => {\n                                    setFieldValue(PeriodeUttakFormField.fom, ISOStringToDate(values.fom));\n                                    setFieldValue(PeriodeUttakFormField.tom, ISOStringToDate(values.tom));\n                                }}\n                                ugyldigeTidsperioder={undefined}\n                                utsettelserIPlan={utsettelserIPlan}\n                                termindato={termindato}\n                                erFarEllerMedmor={erFarEllerMedmor}\n                                morHarRett={morHarRett}\n                                situasjon={situasjon}\n                                erFarMedmorOgHarAleneomsorg={erFarMedmorOgHarAleneomsorg}\n                            />\n                        </Block>\n                        <PeriodeUttakFormComponents.Form includeButtons={false}>\n                            {!isNyPeriode && (\n                                <SubmitListener\n                                    cleanup={() => handleCleanup(values as PeriodeUttakFormData, visibility)}\n                                />\n                            )}\n\n                            <Block visible={isValidTidsperiode({ fom: values.fom!, tom: values.tom! })} padBottom=\"xl\">\n                                <TidsperiodeDisplay\n                                    tidsperiode={{ fom: values.fom!, tom: values.tom! }}\n                                    toggleVisTidsperiode={toggleVisTidsperiode}\n                                />\n                                <UttakEndreTidsperiodeSpørsmål\n                                    periode={periode}\n                                    familiehendelsesdato={familiehendelsesdato}\n                                    ugyldigeTidsperioder={undefined}\n                                    utsettelserIPlan={utsettelserIPlan}\n                                    onBekreft={(values) => {\n                                        toggleVisTidsperiode();\n                                        setFieldValue(PeriodeUttakFormField.fom, ISOStringToDate(values.fom));\n                                        setFieldValue(PeriodeUttakFormField.tom, ISOStringToDate(values.tom));\n                                    }}\n                                    changeTidsperiode={(values) => {\n                                        setTimeout(() => {\n                                            setFieldValue(PeriodeUttakFormField.fom, values.fom);\n                                            setFieldValue(PeriodeUttakFormField.tom, values.tom);\n                                        }, 0);\n                                    }}\n                                    tidsperiode={{ fom: values.fom!, tom: values.tom! }}\n                                    onAvbryt={() => toggleVisTidsperiode()}\n                                    visible={tidsperiodeIsOpen}\n                                    termindato={termindato}\n                                    erFarEllerMedmor={erFarEllerMedmor}\n                                    morHarRett={morHarRett}\n                                    situasjon={situasjon}\n                                    erFarMedmorOgHarAleneomsorg={erFarMedmorOgHarAleneomsorg}\n                                />\n                            </Block>\n                            <Block padBottom=\"xl\" visible={visibility.isVisible(PeriodeUttakFormField.hvemSkalTaUttak)}>\n                                <HvemSkalHaUttakSpørsmål\n                                    fieldName={PeriodeUttakFormField.hvemSkalTaUttak}\n                                    erFarEllerMedmor={false}\n                                    navnPåForeldre={navnPåForeldre}\n                                />\n                            </Block>\n                            <Block padBottom=\"xl\" visible={visibility.isVisible(PeriodeUttakFormField.konto)}>\n                                <HvilkenKontoSpørsmål\n                                    fieldName={PeriodeUttakFormField.konto}\n                                    velgbareStønadskontoer={velgbareStønadskontoer}\n                                    erOppholdsperiode={søkerOppgirAnnenForeldersPeriode}\n                                    navnPåForeldre={navnPåForeldre}\n                                    erFarEllerMedmor={erFarEllerMedmor}\n                                    erAleneOmOmsorg={erAleneOmOmsorg}\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"xl\"\n                                visible={visibility.isVisible(PeriodeUttakFormField.overføringsårsak)}\n                            >\n                                <OverføringsårsakSpørsmål\n                                    vedlegg={values.overføringsdokumentasjon!}\n                                    navnAnnenForelder={navnPåAnnenForelder}\n                                    erEndringssøknad={erEndringssøknad}\n                                    valgtOverføringsårsak={values.overføringsårsak!}\n                                    isOpen={isOpen}\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"xl\"\n                                visible={visibility.isVisible(PeriodeUttakFormField.uttakRundtFødselÅrsak)}\n                            >\n                                <UttakRundtFødselÅrsakSpørsmål\n                                    fieldName={PeriodeUttakFormField.uttakRundtFødselÅrsak}\n                                    uttakRundtFødselÅrsak={values.uttakRundtFødselÅrsak!}\n                                    navnMor={navnPåForeldre.mor}\n                                    vedlegg={values.erMorForSykDokumentasjon!}\n                                    isOpen={isOpen}\n                                />\n                            </Block>\n                            {startDatoPeriodeRundtFødselFarMedmor !== undefined &&\n                                sluttDatoPeriodeRundtFødselFarMedmor !== undefined && (\n                                    <Block\n                                        padBottom=\"xl\"\n                                        visible={skalViseWLBInfoOmSamtidigUttakRundtFødsel(\n                                            values as PeriodeUttakFormData,\n                                            familiehendelsesdato,\n                                            erFarEllerMedmor,\n                                            erDeltUttak,\n                                            situasjon,\n                                        )}\n                                    >\n                                        <GuidePanel>\n                                            <FormattedMessage\n                                                id=\"uttaksplan.samtidigUttakVeileder\"\n                                                values={{\n                                                    fomDato: formaterDatoKompakt(startDatoPeriodeRundtFødselFarMedmor),\n                                                    tomDato: formaterDatoKompakt(sluttDatoPeriodeRundtFødselFarMedmor),\n                                                }}\n                                            />\n                                        </GuidePanel>\n                                    </Block>\n                                )}\n                            <Block\n                                padBottom=\"xl\"\n                                visible={visibility.isVisible(PeriodeUttakFormField.ønskerFlerbarnsdager)}\n                            >\n                                <FlerbarnsdagerSpørsmål fieldName={PeriodeUttakFormField.ønskerFlerbarnsdager} />\n                            </Block>\n                            <Block padBottom=\"xl\" visible={visibility.isVisible(PeriodeUttakFormField.erMorForSyk)}>\n                                <ErMorForSykSpørsmål\n                                    fieldName={PeriodeUttakFormField.erMorForSyk}\n                                    erMorForSyk={values.erMorForSyk!}\n                                    navnMor={navnPåForeldre.mor}\n                                    vedlegg={values.erMorForSykDokumentasjon!}\n                                    isOpen={isOpen}\n                                />\n                            </Block>\n                            <Block padBottom=\"xl\" visible={visibility.isVisible(PeriodeUttakFormField.samtidigUttak)}>\n                                <SamtidigUttakSpørsmål\n                                    erFlerbarnssøknad={erFlerbarnssøknad}\n                                    navnPåForeldre={navnPåForeldre}\n                                    navnPåAnnenForelder={navnPåAnnenForelder}\n                                    samtidigUttakProsentVisible={visibility.isVisible(\n                                        PeriodeUttakFormField.samtidigUttakProsent,\n                                    )}\n                                    familiehendelsesdato={familiehendelsesdato}\n                                    situasjon={situasjon}\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"xl\"\n                                visible={visibility.isVisible(PeriodeUttakFormField.aktivitetskravMor)}\n                            >\n                                <AktivitetskravSpørsmål\n                                    fieldName={PeriodeUttakFormField.aktivitetskravMor}\n                                    navnPåForeldre={navnPåForeldre}\n                                    aktivitetskravMorValue={values.aktivitetskravMor!}\n                                    aktivitetskravVedlegg={values.aktivitetskravMorDokumentasjon!}\n                                    FormComponents={PeriodeUttakFormComponents}\n                                    vedleggFieldName={PeriodeUttakFormField.aktivitetskravMorDokumentasjon}\n                                    isOpen={isOpen}\n                                />\n                            </Block>\n                            <Block padBottom=\"xl\" visible={visibility.isVisible(PeriodeUttakFormField.skalHaGradering)}>\n                                <SkalHaGraderingSpørsmål\n                                    graderingsprosentVisible={visibility.isVisible(\n                                        PeriodeUttakFormField.stillingsprosent,\n                                    )}\n                                    arbeidsforhold={arbeidsforhold}\n                                    tidsperiode={{ fom: values.fom!, tom: values.tom! }}\n                                />\n                            </Block>\n                            <Block\n                                visible={\n                                    !isNyPeriode && handleDeletePeriode !== undefined && toggleIsOpen !== undefined\n                                }\n                            >\n                                <div className={bem.element('knapperad-endre')}>\n                                    <Button type=\"button\" variant=\"secondary\" onClick={() => toggleIsOpen!(periode.id)}>\n                                        <FormattedMessage id=\"uttaksplan.lukk\" />\n                                    </Button>\n                                    <div className={bem.element('slettPeriodeWrapper')}>\n                                        <ActionLink\n                                            onClick={() => handleDeletePeriode!(periode.id)}\n                                            className={bem.element('slettPeriode')}\n                                        >\n                                            <FormattedMessage id={getSlettPeriodeTekst(periode.type)} />\n                                        </ActionLink>\n                                    </div>\n                                </div>\n                            </Block>\n                            <Block\n                                visible={\n                                    isNyPeriode &&\n                                    setNyPeriodeFormIsVisible !== undefined &&\n                                    handleAddPeriode !== undefined\n                                }\n                            >\n                                <div className={bem.element('knapperad-legg-til')}>\n                                    <Button\n                                        type=\"button\"\n                                        variant=\"secondary\"\n                                        onClick={() => setNyPeriodeFormIsVisible!(false)}\n                                    >\n                                        <FormattedMessage id=\"uttaksplan.avbryt\" />\n                                    </Button>\n                                    {visibility.areAllQuestionsAnswered() ? (\n                                        <Button type=\"submit\">\n                                            <FormattedMessage id=\"uttaksplan.leggTil\" />\n                                        </Button>\n                                    ) : null}\n                                </div>\n                            </Block>\n                        </PeriodeUttakFormComponents.Form>\n                    </>\n                );\n            }}\n        />\n    );\n};\n\nexport default PeriodeUttakForm;\n"],"names":["bem","bemUtils","formaterTidsperiodeDato","dato","formatDate","renderTidsperiode","tidsperiode","intl","jsxs","jsx","Label","intlUtils","BodyShort","TidsperiodeDisplay","toggleVisTidsperiode","useIntl","Block","Link","e","getDatoavgrensningerForFarMedmorPeriodeRundtFødselWLB","familiehendelsesdato","termindato","ugyldigeTidsperioder","minDato","getFørsteUttaksdag2UkerFørFødsel","maksDato","getSisteUttaksdag6UkerEtterFødsel","getDatoavgrensningerForStønadskonto","konto","erFarEllerMedmor","getDatoavgrensningerForPeriodeUtenKonto","StønadskontoType","getDatoavgrensningerForForeldrepengerFørFødsel","isValidTidsperiode","Tidsperioden","getDatoavgrensningerForEkstrauttakFørTermin","standardAvgrensninger","standardAvgrensningerForUttakEtterFødsel","getFørsteMuligeUttaksdag","getSisteMuligeUttaksdag","Uttaksdagen","avgrensninger","uttaksplanDatoavgrensninger","dateToISOString","ISOStringToDate","datoÅRegneFra","getDatoavgrensningerForBareFarMedmorHarRettWLB","Form","getTypedFormComponents","getDatoAvgrensninger","periode","fom","tom","morHarRett","situasjon","erFarMedmorOgHarAleneomsorg","isUtsettelsesperiode","isUttaksperiodeFarMedmorPgaFødsel","andreAugust2022ReglerGjelder","isUttaksperiodeBareFarMedmorHarRett","isUttaksperiode","mapTidsperiodeStringToTidsperiode","førsteMuligeUttaksdag","getFørsteUttaksdagPåEllerEtterFødsel","dayjs","TidsperiodeForm","utsettelserIPlan","initialMonth","onBekreft","onCancel","values","datoAvgrensninger","value","dateRangeValidation","Button","FormattedMessage","RangeIcon","Component","type","icon","AriaText","id","children","tag","tagName","createElement","delay","minZoomTouchDelta","lastTapAt","lastClientX","lastClientY","preventDoubleTapZoom","event","tapAt","timeDiff","clientX","clientY","xDiff","yDiff","Sirkelknapp","onClick","ariaLabel","ikon","toggle","disabled","stil","size","posisjoneringFraHøyre","labelId","guid","classnames","StepperKnapp","direction","label","NumberStepper","min","max","stepSize","legendId","onChange","increaseAriaLabel","decreaseAriaLabel","canDecrease","canIncrease","evt","UkerDagerTeller","ukeStepper","dagStepper","ukeLegend","dagLegend","ukeLegendId","dagLegendId","Fragment","Fieldset","UttakEndreTidsperiodeSpørsmål","onAvbryt","changeTidsperiode","visible","isForeldrepengerFørFødselUttaksperiode","varighetIDager","uker","dager","getUkerOgDagerFromDager","handleOnSubmit","getDagValue","uker2","dager2","Modal","nyUker","date","getTidsperiode","nyDager","PeriodeUttakFormField","PeriodeUttakFormComponents","MorErForSykDokumentasjonOpplastning","navnMor","vedlegg","isOpen","GuidePanel","FormikFileUploader","AttachmentType","Skjemanummer","ErMorForSykSpørsmål","fieldName","erMorForSyk","YesOrNo","FlerbarnsdagerSpørsmål","HvemSkalHaUttakSpørsmål","navnPåForeldre","capitalizeFirstLetter","Forelder","hasValue","getSpørsmålsTekst","erOppholdsperiode","navnAnnenForelder","HvilkenKontoSpørsmål","velgbareStønadskontoer","erAleneOmOmsorg","legend","radios","getStønadskontoNavn","UttakRundtFødselÅrsak","UttakRundtFødselÅrsakSpørsmål","uttakRundtFødselÅrsak","OverføringsårsakSpørsmål","erEndringssøknad","valgtOverføringsårsak","navn","OverføringÅrsakType","beOmDokumentasjon","getNavnGenitivEierform","prosentValideringSamtidigUttak","samtidigUttakProsent","getFloatFromString","prosentValideringGradering","stillingsprosent","SamtidigUttakSpørsmål","erFlerbarnssøknad","navnPåAnnenForelder","samtidigUttakProsentVisible","samtidigUttakInfoTekst","links","getArbeidsOptions","arbeidsforhold","aktiveArbeidsforholdIPerioden","getKunArbeidsforholdForValgtTidsperiode","defaultOptions","Arbeidsform","eksisterendeArbeidsforhold","arb","SkalHaGraderingSpørsmål","graderingsprosentVisible","ReadMore","jsonSort","json","isObject","v","sort","o","a","b","k","SubmitListener","cleanup","formik","useFormikContext","isSubmitting","isValidating","submitForm","setValues","cleanedValues","ref","useRef","useEffect","currentValuesJSONString","valuesEqualLastValues","hvemSkalTaUttakSkalBesvares","erDeltUttakINorge","erSamtidigUttakFarMedmorFørFørsteSeksUkerWLB","erMorForForSykSkalBesvares","periodetype","søkerErFarEllerMedmor","uttaksdatoer","annenForelderKanIkkeOppgis","ønskerFlerbarnsdager","søkerHarMidlertidigOmsorg","bareFarMedmorHarRett","årsakTilUttakRundtFødselSkalBesvares","uttakRundtFødselÅrsakSpørsmålSkalBesvares","Periodetype","erInnenFørsteSeksUkerFødselFarMedmor","graderingSkalBesvares","erFarMedmor","morErForSyk","farMedmorSøkerDeFørsteSeksUkeneFørWLBOgMorErIkkeSyk","sisteUttaksdagInnenSeksUkerEtterFødsel","bareFarHarRettSøkerAktivitetsKravKontoDeFørsteSeksUkeneOgMorErIkkeSyk","graderingSkalBesvaresPgaWLBUttakRundtFødsel","tidperiode","erFarMedmorSinWLBTidsperiodeRundtFødsel","samtidigUttakSkalBesvares","erUttakInnenFørsteSeksUkerFødselFarMedmor","erUttakFørFødsel","erAleneOmsorg","annenforelderKanIkkeOppgis","erUttakEgenKvoteFarMedmorFørsteSeksUkerUtenFlerbarnsdager","ønskerFlerbarnsdagerSkalBesvares","stønadskontoType","bareFarHarRett","antallBarn","overføringsårsakSkalBesvares","kontoValue","annenForelder","annenForelderHarRettIEØS","harAnnenForelderRettIEØS","getUttakSkjemaregler","formValues","regelProps","stønadskontoer","getUttaksdatoer","aktivitetskravMorSkalBesvares","convertYesOrNoOrUndefinedToBoolean","kontoSkalBesvares","erSamtidigUttakFarMedmorFørFødselWLB","erDeltUttak","sisteUttaksdag6UkerEtterFødsel","skalViseWLBInfoOmSamtidigUttakRundtFødsel","skalViseGradering","regler","skalViseAktivitetskrav","skalViseSamtidigUttak","skalViseFlerbarnsdager","skalViseKonto","PeriodeUttakFormConfig","periodeUttakFormQuestionsConfig","Questions","getInitialKonto","erMorUfør","periodenStarterFørFamdato","getHvemSkalTaUttak","forelder","getInitialValues","startdatoPeriode","hvemSkalTaUttak","cleanPeriodeUttakFormData","visibility","initialValues","getInitialÅrsakForUttakRundtFødsel","ønskerSamtidigUttak","getPeriodeUttakFormInitialValues","convertBooleanOrUndefinedToYesOrNo","getFrilansSNEllerOrgnr","isOverføringsperiode","isOppholdsperiode","getStønadskontoFromOppholdsårsak","arbeidsformer","orgnumre","getArbeidsform","getOrgnummer","getErArbeidstaker","getSamtidigUttaksProsentWLB","ønskerGradering","dekningsgrad","trimNumberValue","velgVedleggSomSkalBrukes","aktivitetskravMorDokumentasjon","erMorForSykDokumentasjon","skalVedleggPåkreves","morsAktivitetIPerioden","getKontoVerdi","samtidigWLBUttakFørFødselFarMedmor","startDato","inputKonto","mapPeriodeUttakFormToPeriode","lagSendSenereDokumentNårIngenAndreFinnes","getOppholdsÅrsakFromStønadskonto","samtidigWLBUttakFørFørsteSeksUkerFarMedmor","attachmentType","skjemanummer","getMorsAktivitetSkjemanummer","relevantVedlegg","erSamtidigUttak","samtidigUttakProsentInputVerdi","samtidigUttakProsentVerdi","forelderVerdi","kontoVerdi","getMorsAktivitet","getVeilederTekst","MorsAktivitet","listData","listItem","index","renderOptions","aktivitetsid","morsAktivitet","AktivitetskravSpørsmål","vedleggFieldName","aktivitetskravMorValue","aktivitetskravVedlegg","FormComponents","msg","periodenGjelderAnnenForelder","erUttakAvAnnenForeldersKvote","getPeriodeType","periodenGjelder","familiehendelsedato","starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel","PeriodeUttakForm","handleUpdatePeriode","toggleIsOpen","handleDeletePeriode","setNyPeriodeFormIsVisible","handleAddPeriode","isNyPeriode","setPerioderErGyldige","tidsperiodeIsOpen","setTidsperiodeIsOpen","useState","periodeIsValid","setPeriodeIsValid","isAnnenForelderOppgitt","previousState","getIsValidStateForPerioder","handleCleanup","getVelgbareStønadskontotyper","startDatoPeriodeRundtFødselFarMedmor","sluttDatoPeriodeRundtFødselFarMedmor","setFieldValue","isValid","søkerOppgirAnnenForeldersPeriode","values2","formaterDatoKompakt","ActionLink","getSlettPeriodeTekst","PeriodeUttakForm$1"],"mappings":"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"}