{"version":3,"file":"dateUtils-f11c0658.js","sources":["../../../../node_modules/.pnpm/dayjs@1.11.9/node_modules/dayjs/plugin/advancedFormat.js","../../src/app/context/types/UttaksplanInfo.ts","../../src/app/utils/dateUtils.ts"],"sourcesContent":["!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(t):(e=\"undefined\"!=typeof globalThis?globalThis:e||self).dayjs_plugin_advancedFormat=t()}(this,(function(){\"use strict\";return function(e,t){var r=t.prototype,n=r.format;r.format=function(e){var t=this,r=this.$locale();if(!this.isValid())return n.bind(this)(e);var s=this.$utils(),a=(e||\"YYYY-MM-DDTHH:mm:ssZ\").replace(/\\[([^\\]]+)]|Q|wo|ww|w|WW|W|zzz|z|gggg|GGGG|Do|X|x|k{1,2}|S/g,(function(e){switch(e){case\"Q\":return Math.ceil((t.$M+1)/3);case\"Do\":return r.ordinal(t.$D);case\"gggg\":return t.weekYear();case\"GGGG\":return t.isoWeekYear();case\"wo\":return r.ordinal(t.week(),\"W\");case\"w\":case\"ww\":return s.s(t.week(),\"w\"===e?1:2,\"0\");case\"W\":case\"WW\":return s.s(t.isoWeek(),\"W\"===e?1:2,\"0\");case\"k\":case\"kk\":return s.s(String(0===t.$H?24:t.$H),\"k\"===e?1:2,\"0\");case\"X\":return Math.floor(t.$d.getTime()/1e3);case\"x\":return t.$d.getTime();case\"z\":return\"[\"+t.offsetName()+\"]\";case\"zzz\":return\"[\"+t.offsetName(\"long\")+\"]\";default:return e}}));return n.bind(this)(a)}}}));","import AdopsjonStartdatoValg from 'app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon/adopsjonStartdatoValg';\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\ninterface UttaksplanInfo {}\n\nexport interface MorFødselUttaksplanInfo extends UttaksplanInfo {\n    permisjonStartdato: string;\n    skalIkkeHaUttakFørTermin: boolean;\n    fellesperiodeukerMor: number | undefined;\n}\n\nexport interface MorFarAdopsjonUttaksplanInfo extends UttaksplanInfo {\n    harAnnenForelderSøktFP: boolean;\n    startdatoAdopsjonValg: AdopsjonStartdatoValg;\n    annenStartdatoAdopsjon: string;\n    annenForeldersSisteDag: string;\n    søkersFørsteDag: string;\n    antallUkerFellesperiode: string;\n    antallDagerFellesperiode: string;\n    fellesperiodeukerMor: number | undefined;\n}\n\nexport interface FarMedmorAleneomsorgFødselUttaksplanInfo extends UttaksplanInfo {\n    startdatoUttak: string;\n    fellesperiodeukerMor: number | undefined;\n}\n\nexport interface FarMedmorFødselOgMorHarIkkeRettUttaksplanInfo extends UttaksplanInfo {\n    permisjonStartdato: string;\n}\n\nexport interface FarMedmorFørstegangssøknadMedAnnenPartUttaksplanInfo extends UttaksplanInfo {\n    permisjonStartdato: string;\n}\n\nexport interface FarMedmorFødselBeggeHarRettUttaksplanInfo extends UttaksplanInfo {\n    morsSisteDag: string;\n    farMedmorsFørsteDag: string;\n    antallUkerFellesperiode: string;\n    antallDagerFellesperiode: string;\n}\n\nexport interface MorFarAdopsjonAnnenForelderHarRettIEØSUttaksplanInfo extends UttaksplanInfo {\n    startdatoAdopsjonValg: AdopsjonStartdatoValg;\n    dekningsgrad: string;\n    annenStartdatoAdopsjon: string | undefined;\n}\n\nexport interface MorFarFødselAnnenForelderHarRettIEØSUttaksplanInfo extends UttaksplanInfo {\n    permisjonStartdato: string;\n    skalIkkeHaUttakFørTermin: boolean | undefined;\n    dekningsgrad: string;\n}\n\nexport const isFarMedmorFødselBeggeHarRettUttaksplanInfo = (\n    uttaksplanInfo: UttaksplanInfo,\n): uttaksplanInfo is FarMedmorFødselBeggeHarRettUttaksplanInfo => {\n    return 'morsSisteDag' in uttaksplanInfo;\n};\n\nexport default UttaksplanInfo;\n","import dayjs from 'dayjs';\nimport isBetween from 'dayjs/plugin/isBetween';\nimport minMax from 'dayjs/plugin/minMax';\nimport utc from 'dayjs/plugin/utc';\nimport timezone from 'dayjs/plugin/timezone';\nimport advanced from 'dayjs/plugin/advancedFormat';\nimport {\n    hasValue,\n    isInfoPeriode,\n    ISOStringToDate,\n    isPeriodeUtenUttak,\n    isUtsettelsesperiode,\n    isUttaksperiode,\n    Periode,\n    Perioden,\n    RegistrertBarn,\n} from '@navikt/fp-common';\nimport { Alder } from 'app/types/Alder';\nimport UttaksplanInfo, { isFarMedmorFødselBeggeHarRettUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport { dateToISOString } from '@navikt/sif-common-formik-ds/lib';\nimport { isISODateString } from '@navikt/ds-datepicker';\nimport { Uttaksdagen } from '@navikt/fp-common/src/common/utils/Uttaksdagen';\n\ndayjs.extend(utc);\ndayjs.extend(isBetween);\ndayjs.extend(minMax);\ndayjs.extend(timezone);\ndayjs.extend(advanced);\n\nexport const date4YearsAgo = dayjs().subtract(4, 'year').startOf('day').toDate();\n\nexport const isDateABeforeDateB = (a: string, b: string): boolean => {\n    if (!hasValue(a) || !hasValue(b) || !isISODateString(a) || !isISODateString(b)) {\n        return false;\n    }\n\n    if (dayjs(a).isBefore(b, 'day')) {\n        return true;\n    }\n\n    return false;\n};\n\nexport const getEldsteRegistrerteBarn = (registrerteBarn: RegistrertBarn[]): RegistrertBarn => {\n    return [...registrerteBarn].sort((a, b) =>\n        isDateABeforeDateB(dateToISOString(a.fødselsdato)!, dateToISOString(b.fødselsdato)!) ? 1 : -1,\n    )[registrerteBarn.length - 1];\n};\n\nexport const sorterDatoEtterEldst = (dato: Date[]): Date[] => {\n    const d = [...dato].sort((a, b) => (isDateABeforeDateB(dateToISOString(a)!, dateToISOString(b)!) ? -1 : 1));\n    return d;\n};\n\nexport const getEldsteDato = (dato: Date[]) => {\n    return sorterDatoEtterEldst(dato)[0];\n};\n\ntype DateValue = Date | undefined;\n\nexport const dateIsSameOrBefore = (date: DateValue, otherDate: DateValue): boolean => {\n    if (date && otherDate) {\n        return dayjs(date).isSameOrBefore(otherDate, 'day');\n    }\n    return true;\n};\nexport const dateIsSameOrAfter = (date: DateValue, otherDate: DateValue): boolean => {\n    if (date && otherDate) {\n        return dayjs(date).isSameOrAfter(otherDate, 'day');\n    }\n    return true;\n};\n\nexport const findEldsteDato = (dateArray: Date[]): DateValue => {\n    if (dateArray.length > 0) {\n        return dayjs.min(dateArray.map((date: Date) => dayjs(date)))!.toDate();\n    }\n    return undefined;\n};\n\nexport const getAlderFraDato = (fødselsdato: Date): Alder => {\n    const idag = dayjs();\n    const dato = dayjs(fødselsdato);\n\n    const år = idag.diff(dato, 'year');\n    dato.add(år, 'years');\n    const måneder = idag.diff(dato, 'months');\n    dato.add(måneder, 'months');\n    const dager = idag.diff(dato, 'days');\n\n    return {\n        år,\n        måneder,\n        dager,\n    };\n};\n\nexport const getRelevantFamiliehendelseDato = (\n    termindato: string | undefined,\n    fødselsdato: string | undefined,\n    omsorgsovertakelsesdato: string | undefined,\n): string => {\n    if (omsorgsovertakelsesdato !== undefined) {\n        return omsorgsovertakelsesdato;\n    } else if (fødselsdato !== undefined) {\n        return fødselsdato;\n    } else if (termindato !== undefined) {\n        return termindato;\n    } else {\n        throw new Error('Mangler fødselsdato/termindato/adopsjonsdato for barnet.');\n    }\n};\n\nexport const førsteOktober2021ReglerGjelder = (familiehendelsesdato: Date): boolean => {\n    const førsteOktober2021 = new Date('2021-10-01');\n\n    return (\n        dayjs(familiehendelsesdato).isSameOrAfter(førsteOktober2021, 'day') &&\n        dayjs(new Date()).isSameOrAfter(førsteOktober2021, 'day')\n    );\n};\n\nexport const andreAugust2022ReglerGjelder = (familiehendelsesdato: Date): boolean => {\n    const andreAugust2022 = new Date('2022-08-02');\n\n    return (\n        dayjs(familiehendelsesdato).isSameOrAfter(andreAugust2022, 'day') &&\n        dayjs(new Date()).isSameOrAfter(andreAugust2022, 'day')\n    );\n};\n\nexport const skalFarUtsetteEtterMorSinSisteUttaksdag = (\n    farSinFørsteUttaksdag: Date,\n    morsSisteUttaksdag: Date,\n): boolean => {\n    return dayjs(farSinFørsteUttaksdag).isAfter(Uttaksdagen(morsSisteUttaksdag).neste(), 'day');\n};\n\nexport const getEndringstidspunkt = (\n    opprinneligPlan: Periode[] | undefined,\n    updatedPlan: Periode[],\n    erEndringssøknad: boolean,\n): Date | undefined => {\n    if (!erEndringssøknad) {\n        return undefined;\n    }\n\n    const søkerensOpprinneligePlan =\n        opprinneligPlan === undefined ? undefined : opprinneligPlan.filter((p) => !isInfoPeriode(p));\n    const søkerensUpdatedPlan = updatedPlan.filter((p) => !isInfoPeriode(p));\n\n    let endringstidspunktNyPlan: Date | undefined;\n    let endringstidspunktOpprinneligPlan: Date | undefined;\n    if (søkerensOpprinneligePlan) {\n        søkerensUpdatedPlan.forEach((periode, index) => {\n            if (endringstidspunktNyPlan) {\n                return;\n            }\n\n            const { fom } = periode.tidsperiode;\n            const opprinneligPeriodeMedSammeFom = søkerensOpprinneligePlan.find((opprinneligPeriode) =>\n                dayjs(opprinneligPeriode.tidsperiode.fom).isSame(fom, 'day'),\n            );\n\n            if (opprinneligPeriodeMedSammeFom !== undefined) {\n                const perioderErLikeUtenTidSjekk = Perioden(periode).erLik(opprinneligPeriodeMedSammeFom, false, true);\n                if (\n                    !perioderErLikeUtenTidSjekk ||\n                    (perioderErLikeUtenTidSjekk &&\n                        Perioden(periode).slutterEtter(opprinneligPeriodeMedSammeFom.tidsperiode.tom))\n                ) {\n                    endringstidspunktNyPlan = fom;\n                }\n            }\n\n            if (opprinneligPeriodeMedSammeFom === undefined) {\n                endringstidspunktNyPlan = fom;\n            }\n\n            if (opprinneligPeriodeMedSammeFom !== undefined && søkerensUpdatedPlan.length - 1 === index) {\n                if (!Perioden(periode).erLik(opprinneligPeriodeMedSammeFom, true, true)) {\n                    endringstidspunktNyPlan = fom;\n                }\n            }\n\n            //Hvis endringstidspunktet er etter siste periode i opprinnelig plan, og 'periode' er periode uten uttak, finn første uttak/utsettelse etter endringstidspunktet\n            if (\n                endringstidspunktNyPlan &&\n                isPeriodeUtenUttak(periode) &&\n                dayjs(endringstidspunktNyPlan).isAfter(\n                    søkerensOpprinneligePlan[søkerensOpprinneligePlan.length - 1].tidsperiode.tom,\n                )\n            ) {\n                const førsteUttakEllerUtsettelseEtterEndring = søkerensUpdatedPlan.find(\n                    (p) =>\n                        (isUttaksperiode(p) || isUtsettelsesperiode(p)) &&\n                        dayjs(p.tidsperiode.fom).isAfter(endringstidspunktNyPlan),\n                );\n                endringstidspunktNyPlan =\n                    førsteUttakEllerUtsettelseEtterEndring !== undefined\n                        ? førsteUttakEllerUtsettelseEtterEndring.tidsperiode.fom\n                        : endringstidspunktNyPlan;\n            }\n        });\n\n        søkerensOpprinneligePlan.forEach((periode) => {\n            if (endringstidspunktOpprinneligPlan) {\n                return;\n            }\n\n            const { fom } = periode.tidsperiode;\n            const nyPeriodeMedSammeFom = søkerensUpdatedPlan.find((nyPeriode) =>\n                dayjs(nyPeriode.tidsperiode.fom).isSame(fom, 'day'),\n            );\n\n            if (nyPeriodeMedSammeFom !== undefined && !Perioden(periode).erLik(nyPeriodeMedSammeFom, false, true)) {\n                endringstidspunktOpprinneligPlan = nyPeriodeMedSammeFom.tidsperiode.fom;\n            }\n\n            if (nyPeriodeMedSammeFom === undefined) {\n                endringstidspunktOpprinneligPlan = fom;\n            }\n        });\n    } else {\n        // Bruker har slettet opprinnelig plan, send med alt\n        if (søkerensUpdatedPlan.length > 0) {\n            return søkerensUpdatedPlan[0].tidsperiode.fom;\n        }\n    }\n\n    return getOldestDate(endringstidspunktNyPlan, endringstidspunktOpprinneligPlan);\n};\n\nconst getOldestDate = (\n    endringstidspunktNyPlan: Date | undefined,\n    endringstidspunktOpprinneligPlan: Date | undefined,\n): Date | undefined => {\n    if (endringstidspunktNyPlan === undefined && endringstidspunktOpprinneligPlan === undefined) {\n        return undefined;\n    }\n\n    if (endringstidspunktNyPlan !== undefined && endringstidspunktOpprinneligPlan === undefined) {\n        return endringstidspunktNyPlan;\n    }\n\n    if (endringstidspunktNyPlan === undefined && endringstidspunktOpprinneligPlan !== undefined) {\n        return endringstidspunktOpprinneligPlan;\n    }\n\n    return dayjs(endringstidspunktNyPlan).isSameOrBefore(dayjs(endringstidspunktOpprinneligPlan))\n        ? endringstidspunktNyPlan\n        : endringstidspunktOpprinneligPlan;\n};\n\nexport const getMorsSisteDag = (uttaksplanInfo: UttaksplanInfo | undefined): Date | undefined => {\n    if (!uttaksplanInfo) {\n        return undefined;\n    }\n\n    if (isFarMedmorFødselBeggeHarRettUttaksplanInfo(uttaksplanInfo)) {\n        return ISOStringToDate(uttaksplanInfo.morsSisteDag);\n    }\n\n    return undefined;\n};\n"],"names":["e","t","module","this","r","n","s","a","isFarMedmorFødselBeggeHarRettUttaksplanInfo","uttaksplanInfo","dayjs","utc","isBetween","minMax","timezone","advanced","date4YearsAgo","isDateABeforeDateB","b","hasValue","isISODateString","getEldsteRegistrerteBarn","registrerteBarn","dateToISOString","sorterDatoEtterEldst","dato","dateIsSameOrAfter","date","otherDate","findEldsteDato","dateArray","getRelevantFamiliehendelseDato","termindato","fødselsdato","omsorgsovertakelsesdato","førsteOktober2021ReglerGjelder","familiehendelsesdato","førsteOktober2021","andreAugust2022ReglerGjelder","andreAugust2022","skalFarUtsetteEtterMorSinSisteUttaksdag","farSinFørsteUttaksdag","morsSisteUttaksdag","Uttaksdagen","getEndringstidspunkt","opprinneligPlan","updatedPlan","erEndringssøknad","søkerensOpprinneligePlan","p","isInfoPeriode","søkerensUpdatedPlan","endringstidspunktNyPlan","endringstidspunktOpprinneligPlan","periode","index","fom","opprinneligPeriodeMedSammeFom","opprinneligPeriode","perioderErLikeUtenTidSjekk","Perioden","isPeriodeUtenUttak","førsteUttakEllerUtsettelseEtterEndring","isUttaksperiode","isUtsettelsesperiode","nyPeriodeMedSammeFom","nyPeriode","getOldestDate","getMorsSisteDag","ISOStringToDate"],"mappings":"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","x_google_ignoreList":[0]}