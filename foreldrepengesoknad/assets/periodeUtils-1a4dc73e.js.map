{"version":3,"file":"periodeUtils-1a4dc73e.js","sources":["../../src/app/types/Forelder.ts","../../src/uttaksplan/types/OppholdÅrsakType.ts","../../src/app/utils/numberUtils.ts","../../../../node_modules/.pnpm/@navikt+fnrvalidator@1.3.0/node_modules/@navikt/fnrvalidator/dist/validator.js","../../src/app/utils/validation/fødselsnummer.ts","../../src/app/utils/validationUtil.ts","../../src/app/utils/stringUtils.ts","../../src/uttaksplan/utils/stønadskontoerUtils.ts","../../src/uttaksplan/types/MorsAktivitet.ts","../../src/uttaksplan/types/OverføringÅrsakType.ts","../../src/app/steps/uttaksplan-info/utils/uttaksPlanStatus.ts","../../src/app/utils/wlbUtils.ts","../../src/uttaksplan/utils/periodeUtils.ts"],"sourcesContent":["export enum Forelder {\n    mor = 'mor',\n    farMedmor = 'farMedmor',\n}\n","export enum OppholdÅrsakType {\n    UttakFellesperiodeAnnenForelder = 'UTTAK_FELLESP_ANNEN_FORELDER',\n    UttakFedrekvoteAnnenForelder = 'UTTAK_FEDREKVOTE_ANNEN_FORELDER',\n    UttakMødrekvoteAnnenForelder = 'UTTAK_MØDREKVOTE_ANNEN_FORELDER',\n    UttakForeldrepengerAnnenForelder = 'UTTAK_FORELDREPENGER_ANNEN_FORELDER',\n    ForeldrepengerFørFødsel = 'UTTAK_FORELDREPENGER_FØR_FØDSEL_ANNEN_FORELDER',\n    Ingen = 'INGEN',\n}\n","import { hasValue } from '@navikt/fp-common';\n\nconst onlyNumbersRegExp = /^[0-9]*$/;\n\nconst getMod11 = (strValue: string): number => {\n    let checkNbr = 2;\n    let mod = 0;\n\n    for (let i = strValue.length - 2; i >= 0; --i) {\n        mod += parseInt(strValue.charAt(i), 10) * checkNbr;\n        if (++checkNbr > 7) {\n            checkNbr = 2;\n        }\n    }\n    const result = 11 - (mod % 11);\n    return result === 11 ? 0 : result;\n};\n\nconst er9Tall = (orgnr: string): boolean => {\n    return onlyNumbersRegExp.test(orgnr) && orgnr.length === 9;\n};\n\nconst starterPå8Eller9 = (orgnr: string): boolean => {\n    return orgnr.charAt(0) === '8' || orgnr.charAt(0) === '9';\n};\n\nexport const erGyldigNorskOrgnummer = (orgnr: string): boolean => {\n    if (!orgnr || er9Tall(orgnr) === false || starterPå8Eller9(orgnr) === false || orgnr === '999999999') {\n        return false;\n    }\n    return getMod11(orgnr) === parseInt(orgnr.charAt(8), 10);\n};\n\nexport const numberHasValue = (num: string): boolean => {\n    if (!hasValue(num) || num.trim().length === 0) {\n        return false;\n    }\n\n    return true;\n};\n\nconst numberRegExp = RegExp(/^[-]?[0-9,.\\s]*$/);\n\nexport const trimNumberValue = (value: string): string => {\n    return value.replace(/,/g, '.').replace(/\\s/g, '').replace(/%/g, '');\n};\n\nexport const getFloatFromString = (value: string | undefined): number | undefined => {\n    if (value !== undefined && value !== null && value.length > 0 && numberRegExp.test(value)) {\n        const trimmedValue = trimNumberValue(value);\n        const numberOfPoints = (trimmedValue.match(/\\./g) || []).length;\n        if (numberOfPoints > 1) {\n            return undefined;\n        }\n        return parseFloat(trimmedValue);\n    }\n    return undefined;\n};\n","'use strict';\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar elevenDigits = new RegExp('^\\\\d{11}$');\n\nvar fnr = function fnr(digits) {\n  return idnr(digits);\n};\n\nvar dnr = function dnr(digits) {\n  return idnr(digits);\n};\n\nvar hnr = function hnr(digits) {\n  return idnr(digits);\n};\n\nvar tnr = function tnr(digits) {\n  return idnr(digits);\n};\n\nvar getType = function getType(digits) {\n  if (digits.substring(0, 1) >= 4) {\n    return 'dnr';\n  } else if (digits.substring(2, 3) >= 8) {\n    return \"tnr\";\n  } else if (digits.substring(2, 3) >= 4) {\n    return 'hnr';\n  }\n\n  return 'fnr';\n};\n\nvar idnr = function idnr(digits) {\n  var type = getType(digits);\n  return validate(digits, type);\n};\n\nvar validate = function validate(digits, type) {\n  if (!elevenDigits.test(digits)) {\n    return {\n      status: \"invalid\",\n      reasons: [\"fnr, dnr or hnr must consist of 11 digits\"]\n    };\n  }\n\n  var errMsgs = [].concat(_toConsumableArray(checksums(digits)), _toConsumableArray(birthdate(digits, type)));\n  return errMsgs.length == 0 ? {\n    status: \"valid\",\n    type: type\n  } : {\n    status: \"invalid\",\n    reasons: errMsgs\n  };\n};\n\nvar checksums = function checksums(digits) {\n  var k1 = 11 - (3 * digits[0] + 7 * digits[1] + 6 * digits[2] + 1 * digits[3] + 8 * digits[4] + 9 * digits[5] + 4 * digits[6] + 5 * digits[7] + 2 * digits[8]) % 11;\n  var k2 = 11 - (5 * digits[0] + 4 * digits[1] + 3 * digits[2] + 2 * digits[3] + 7 * digits[4] + 6 * digits[5] + 5 * digits[6] + 4 * digits[7] + 3 * digits[8] + 2 * k1) % 11;\n  if (k1 === 11) k1 = 0;\n  if (k2 === 11) k2 = 0;\n  return k1 < 10 && k2 < 10 && k1 == digits[9] && k2 == digits[10] ? [] : [\"checksums don't match\"];\n}; // copied from https://stackoverflow.com/questions/5812220/how-to-validate-a-date\n\n\nvar birthdate = function birthdate(digits, type) {\n  if (type === 'dnr') {\n    digits = digits.substring(0, 1) - 4 + digits.substring(1);\n  } else if (type === 'hnr') {\n    digits = digits.substring(0, 2) + (digits.substring(2, 3) - 4) + digits.substring(3);\n  } else if (type === 'tnr') {\n    digits = digits.substring(0, 2) + (digits.substring(2, 3) - 8) + digits.substring(3);\n  }\n\n  var day = digits.substring(0, 2);\n  var month = digits.substring(2, 4);\n  var year = digits.substring(4, 6); // set year 00 default to 2000 instead of 1900\n\n  var date = new Date(year === '00' ? '2000' : year, month - 1, day);\n  return date && date.getMonth() + 1 == month && date.getDate() == day ? [] : [\"invalid date\"];\n};\n\nexports.fnr = fnr;\nexports.dnr = dnr;\nexports.hnr = hnr;\nexports.tnr = tnr;\nexports.idnr = idnr;","import dayjs from 'dayjs';\nimport validator from '@navikt/fnrvalidator';\n\ntype FødselsnummerValidationResult = false | 'fnr' | 'dnr' | 'hnr';\nexport const isFødselsnummerFormatValid = (fnr: string): FødselsnummerValidationResult => {\n    const result = validator.idnr(fnr);\n\n    if (result.status !== 'valid') {\n        return false;\n    }\n\n    return result.type;\n};\n\nexport const isSixteenOrOlder = (fnr: string, isFødselsnummerValid: FødselsnummerValidationResult): boolean => {\n    const dato =\n        isFødselsnummerValid === 'dnr' ? `${Number(fnr.substr(0, 1)) - 4}${fnr.substr(1, 1)}` : fnr.substr(0, 2);\n    const mnd = fnr.substr(2, 2);\n    const år = fnr.substr(4, 2);\n\n    let fødselsdato = dayjs(`${dato}-${mnd}-${år}`, 'DD-MM-YY');\n\n    if (fødselsdato.get('year') > dayjs().get('year')) {\n        fødselsdato = fødselsdato.subtract(100, 'year');\n    }\n\n    if (!fødselsdato.isValid()) {\n        return false;\n    }\n\n    return fødselsdato.isBefore(dayjs().subtract(16, 'year'), 'day');\n};\n","import { hasValue, intlUtils } from '@navikt/fp-common';\nimport { SkjemaelementFeil } from 'app/types/SkjemaelementFeil';\nimport { IntlShape } from 'react-intl';\nimport { isFødselsnummerFormatValid, isSixteenOrOlder } from './validation/fødselsnummer';\n\nconst textRegex =\n    // eslint-disable-next-line no-misleading-character-class\n    /^[\\u034f0-9a-zA-ZÁáĄąÂâĀāĂăßČčĆćÇçĎďĐđÐðĔĕÉéĘęĖėÈèËëÊêĒēĢģİiĮįÍíÎîÏïĪīĶķŁłŊŋŇňŃńŅņÑñÞþŠšŚśŞşŤťŦŧŢţŲųŪūÚúŮůÝýŽžŹźŻżÕõÔôÓóÖöÜüÄäŒœÆæØøÅå .'\\-/\\n\\r%§\\\\!?@_()+:;,=\"&\\t\\u00a0\\u00ad\\u061c\\u115f\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u200b\\u200c\\u200d\\u200e\\u200f\\u202d\\u202f\\u205f\\u2060\\u2061\\u2062\\u2063\\u2064\\u206a\\u206b\\u206c\\u206d\\u206e\\u206f\\u3000\\u2800\\u3164\\ufeff\\uffa0\\u1160]*$/;\nconst textGyldigRegex =\n    // eslint-disable-next-line no-misleading-character-class\n    /[\\u034f0-9a-zA-ZÁáĄąÂâĀāĂăßČčĆćÇçĎďĐđÐðĔĕÉéĘęĖėÈèËëÊêĒēĢģİiĮįÍíÎîÏïĪīĶķŁłŊŋŇňŃńŅņÑñÞþŠšŚśŞşŤťŦŧŢţŲųŪūÚúŮůÝýŽžŹźŻżÕõÔôÓóÖöÜüÄäŒœÆæØøÅå .'\\-/\\n\\r%§\\\\!?@_()+:;,=\"&\\t\\u00a0\\u00ad\\u061c\\u115f\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u200b\\u200c\\u200d\\u200e\\u200f\\u202d\\u202f\\u205f\\u2060\\u2061\\u2062\\u2063\\u2064\\u206a\\u206b\\u206c\\u206d\\u206e\\u206f\\u3000\\u2800\\u3164\\ufeff\\uffa0\\u1160]*/g;\nexport const usynligeCharsRegex =\n    // eslint-disable-next-line no-misleading-character-class\n    /[\\u034f\\t\\u00a0\\u00ad\\u061c\\u115f\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u200b\\u200c\\u200d\\u200e\\u200f\\u202d\\u202f\\u205f\\u2060\\u2061\\u2062\\u2063\\u2064\\u206a\\u206b\\u206c\\u206d\\u206e\\u206f\\u3000\\u2800\\u3164\\ufeff\\uffa0\\u1160]/g;\n\nexport const validateFødselsnummer =\n    (intl: IntlShape, søkersFødselsnummer: string, erUtenlandskFnr?: boolean) =>\n    (fnr: string): string | undefined => {\n        if (erUtenlandskFnr) {\n            if (fnr === undefined || fnr.trim() === '') {\n                return intlUtils(intl, 'valideringsfeil.fødselsnummer.required');\n            }\n\n            return undefined;\n        }\n\n        if (fnr === søkersFødselsnummer) {\n            return intlUtils(intl, 'valideringsfeil.fødselsnummer.ugyldigEgetFødselsnummer');\n        }\n\n        const validFnrResult = isFødselsnummerFormatValid(fnr);\n\n        if (!erUtenlandskFnr && !isSixteenOrOlder(fnr, validFnrResult) && validFnrResult === 'fnr') {\n            return intlUtils(intl, 'valideringsfeil.fødselsnummer.underSeksten');\n        }\n\n        return validFnrResult === 'fnr' || validFnrResult === 'dnr' || validFnrResult === 'hnr'\n            ? undefined\n            : intlUtils(intl, 'valideringsfeil.fødselsnummer.ugyldigFødselsnummer');\n    };\n\nexport const validateRequiredField = (value: any, label: string, intl: IntlShape): SkjemaelementFeil => {\n    if (!hasValue(value) || (typeof value === 'string' && value.trim() === '')) {\n        return intlUtils(intl, 'valideringsfeil.inputfelt.required', { inputFeltLabel: label });\n    }\n    return undefined;\n};\n\nexport const validateRequiredTextInputField =\n    (feltNavn: string, intl: IntlShape) =>\n    (value: string): SkjemaelementFeil => {\n        const requiredFieldIsEmptyError = validateRequiredField(value, feltNavn, intl);\n        if (requiredFieldIsEmptyError) {\n            return requiredFieldIsEmptyError;\n        }\n\n        return validateTextInputField(value, feltNavn, intl);\n    };\n\nexport const getIllegalChars = (value: any): string => {\n    const kunUgyldigeTegn = value.replace(textGyldigRegex, '');\n    const ugyldigStringSet = new Set(kunUgyldigeTegn.split(''));\n    return Array.from(ugyldigStringSet).join('');\n};\n\nexport const getIllegalCharsErrorMessage = (value: any, feltNavn: string, intl: IntlShape): string => {\n    const ugyldigeTegn = getIllegalChars(value).replace(/[\\t]/g, 'Tabulatortegn');\n    return intlUtils(intl, 'valideringsfeil.fritekst.kanIkkeInneholdeTegn', {\n        feltNavn: feltNavn,\n        ugyldigeTegn: ugyldigeTegn,\n    });\n};\n\nexport const validateTextHasLegalChars = (value: any): boolean => textRegex.test(value);\n\nexport const validateTextInputField = (value: any, feltNavn: string, intl: IntlShape): SkjemaelementFeil => {\n    if (!validateTextHasLegalChars(value)) {\n        return getIllegalCharsErrorMessage(value, feltNavn, intl);\n    }\n    return undefined;\n};\n","import { usynligeCharsRegex } from './validationUtil';\n\nexport const replaceInvisibleCharsWithSpace = (inputString: string): string => {\n    return inputString.replace(usynligeCharsRegex, '\\u0020');\n};\n\nexport const capitalizeFirstLetter = (s: string): string => {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n};\n","import { intlUtils } from '@navikt/fp-common';\nimport { Forelder } from 'app/types/Forelder';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { capitalizeFirstLetter } from 'app/utils/stringUtils';\nimport { IntlShape } from 'react-intl';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { getForelderNavn } from './periodeUtils';\n\nexport const getVelgbareStønadskontotyper = (stønadskontoTyper: TilgjengeligStønadskonto[]): StønadskontoType[] =>\n    stønadskontoTyper\n        .filter(\n            (kontoType) =>\n                kontoType.konto === StønadskontoType.Fellesperiode ||\n                kontoType.konto === StønadskontoType.Fedrekvote ||\n                kontoType.konto === StønadskontoType.Mødrekvote ||\n                kontoType.konto === StønadskontoType.Foreldrepenger ||\n                kontoType.konto === StønadskontoType.AktivitetsfriKvote\n        )\n        .map((kontoType) => kontoType.konto);\n\nexport const getStønadskontoNavn = (\n    intl: IntlShape,\n    konto: StønadskontoType,\n    navnPåForeldre: NavnPåForeldre,\n    erFarEllerMedmor?: boolean,\n    erAleneOmOmsorg?: boolean\n) => {\n    let navn;\n\n    switch (konto) {\n        case StønadskontoType.Mødrekvote:\n            navn = navnPåForeldre.mor;\n            break;\n        case StønadskontoType.Fedrekvote:\n            navn = navnPåForeldre.farMedmor;\n            break;\n        default:\n            navn = undefined;\n    }\n\n    if (navn) {\n        return intl.formatMessage(\n            { id: 'uttaksplan.stønadskontotype.foreldernavn.kvote' },\n            { navn: getNavnGenitivEierform(capitalizeFirstLetter(navn), intl.locale) }\n        );\n    }\n\n    if (erFarEllerMedmor === true && erAleneOmOmsorg === false) {\n        if (konto === StønadskontoType.AktivitetsfriKvote) {\n            return intl.formatMessage({ id: 'uttaksplan.stønadskontotype.AKTIVITETSFRI_KVOTE_BFHR' });\n        }\n        if (konto === StønadskontoType.Foreldrepenger) {\n            return intl.formatMessage({ id: 'uttaksplan.stønadskontotype.AKTIVITETSKRAV_KVOTE_BFHR' });\n        }\n    }\n    return intl.formatMessage({ id: `uttaksplan.stønadskontotype.${konto}` });\n};\n\nexport const getUttakAnnenPartStønadskontoNavn = (\n    intl: IntlShape,\n    konto: StønadskontoType,\n    periodeForelder: Forelder,\n    navnPåForeldre: NavnPåForeldre,\n    samtidigUttakProsent: string | undefined,\n    erFarEllerMedmor?: boolean,\n    erAleneOmOmsorg?: boolean\n) => {\n    const forelderNavn = getForelderNavn(periodeForelder, navnPåForeldre);\n    if (samtidigUttakProsent !== undefined) {\n        const navn = getNavnGenitivEierform(forelderNavn, intl.locale);\n        const intlTekst =\n            konto === StønadskontoType.Fellesperiode\n                ? 'uttaksplan.periodeAnnenPart.tittel.gradertEllerSamtidigUttakFellesperiode'\n                : 'uttaksplan.periodeAnnenPart.tittel.gradertEllerSamtidigUttak';\n        return intlUtils(intl, intlTekst, {\n            navn: capitalizeFirstLetter(navn),\n            prosent: samtidigUttakProsent,\n        });\n    }\n    return getStønadskontoNavn(intl, konto, navnPåForeldre, erFarEllerMedmor, erAleneOmOmsorg);\n};\n\nconst navnSlutterPåSLyd = (navn: string): boolean => {\n    const sisteBokstav = navn.charAt(navn.length - 1).toLowerCase();\n    return sisteBokstav === 's' || sisteBokstav === 'x' || sisteBokstav === 'z';\n};\n\nexport const getNavnGenitivEierform = (navn: string, locale: string): string => {\n    if (locale !== 'nb') {\n        return navn;\n    }\n    if (navnSlutterPåSLyd(navn)) {\n        return `${navn}'`;\n    }\n    return `${navn}s`;\n};\n","export enum MorsAktivitet {\n    Arbeid = 'ARBEID',\n    Utdanning = 'UTDANNING',\n    Kvalifiseringsprogrammet = 'KVALPROG',\n    Introduksjonsprogrammet = 'INTROPROG',\n    TrengerHjelp = 'TRENGER_HJELP',\n    Innlagt = 'INNLAGT',\n    ArbeidOgUtdanning = 'ARBEID_OG_UTDANNING',\n    Uføre = 'UFØRE',\n    IkkeOppgitt = 'IKKE_OPPGITT',\n}\n","export enum OverføringÅrsakType {\n    institusjonsoppholdAnnenForelder = 'INSTITUSJONSOPPHOLD_ANNEN_FORELDER',\n    sykdomAnnenForelder = 'SYKDOM_ANNEN_FORELDER',\n    aleneomsorg = 'ALENEOMSORG',\n    ikkeRettAnnenForelder = 'IKKE_RETT_ANNEN_FORELDER',\n}\n","import { Periode, isUttaksperiode } from 'uttaksplan/types/Periode';\nimport { getFloatFromString } from 'app/utils/numberUtils';\nimport { Perioden } from './Perioden';\n\nexport const finnAntallDagerÅTrekke = (periode: Periode): number => {\n    const dager = Perioden(periode).getAntallUttaksdager();\n    if (isUttaksperiode(periode)) {\n        const periodeErGradert = periode.stillingsprosent !== undefined;\n        const periodeErSamtidigUttak = periode.samtidigUttakProsent !== undefined;\n\n        if ((periodeErGradert && periodeErSamtidigUttak) || periodeErGradert) {\n            const graderingsProsent = (100 - getFloatFromString(periode.stillingsprosent)!) / 100;\n\n            return dager * graderingsProsent;\n        } else if (periodeErSamtidigUttak) {\n            return dager * (getFloatFromString(periode.samtidigUttakProsent)! / 100);\n        } else {\n            return dager;\n        }\n    }\n    return dager;\n};\n","import { isValidTidsperiode } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { Forelder } from 'app/types/Forelder';\nimport dayjs from 'dayjs';\nimport { isOverføringsperiode, isUttaksperiode, Periode, Periodetype, Uttaksperiode } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { andreAugust2022ReglerGjelder, tidperiodeOverlapperDato } from './dateUtils';\nimport { intlUtils, TidsperiodeDate } from '@navikt/fp-common';\nimport { finnAntallDagerÅTrekke } from 'app/steps/uttaksplan-info/utils/uttaksPlanStatus';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { IntlShape } from 'react-intl';\n\nexport const ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL = 10;\nconst ANTALL_DAGER_TO_UKER = 2 * 7;\nconst ANTALL_DAGER_SEKS_UKER = 6 * 7;\n\nexport const gjelderWLBReglerFarMedmorRundtFødsel = (\n    familiehendelsesdato: Date,\n    søkerErFarEllerMedmor: boolean,\n    morHarRett: boolean,\n    situasjon: Situasjon\n) => {\n    const gjelderWLB = andreAugust2022ReglerGjelder(familiehendelsesdato);\n    return gjelderWLB && søkerErFarEllerMedmor && morHarRett && situasjon === 'fødsel';\n};\n\nexport const isUttaksperiodeFarMedmorMedValgForUttakRundtFødsel = (periode: Periode): boolean => {\n    return (\n        isUttaksperiode(periode) &&\n        periode.forelder === Forelder.farMedmor &&\n        periode.konto === StønadskontoType.Fedrekvote &&\n        !!periode.erMorForSyk === false &&\n        periode.morsAktivitetIPerioden === undefined &&\n        !!periode.ønskerFlerbarnsdager === false &&\n        periode.ønskerSamtidigUttak === true\n    );\n};\n\nexport const isUttaksperiodeFarMedmorPgaFødsel = (\n    periode: Periode,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined\n): boolean => {\n    return (\n        isUttaksperiodeFarMedmorMedValgForUttakRundtFødsel(periode) &&\n        starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel(\n            periode.tidsperiode,\n            familiehendelsesdato,\n            termindato\n        )\n    );\n};\n\nexport const isUttaksperiodeBareFarMedmorHarRett = (periode: Periode, morHarRett: boolean): boolean => {\n    return isUttaksperiode(periode) && periode.forelder === Forelder.farMedmor && !morHarRett;\n};\n\nexport const getFørsteUttaksdag2UkerFørFødsel = (familiehendelsesdato: Date, termindato: Date | undefined): Date => {\n    const terminEllerFamHendelsesdatoMinusToUker =\n        termindato !== undefined\n            ? dayjs(termindato).subtract(ANTALL_DAGER_TO_UKER, 'day')\n            : dayjs(familiehendelsesdato).subtract(ANTALL_DAGER_TO_UKER, 'day');\n    const datoÅRegneFra = dayjs.min(terminEllerFamHendelsesdatoMinusToUker, dayjs(familiehendelsesdato));\n    return Uttaksdagen(datoÅRegneFra.toDate()).denneEllerNeste();\n};\n\nexport const getSisteUttaksdag6UkerEtterFødsel = (familiehendelsesdato: Date): Date => {\n    const førsteUttaksdagForPeriodeEtterFødsel = Uttaksdagen(familiehendelsesdato).denneEllerNeste();\n    return Uttaksdagen(\n        dayjs(førsteUttaksdagForPeriodeEtterFødsel).add(ANTALL_DAGER_SEKS_UKER, 'day').toDate()\n    ).forrige();\n};\n\nexport const starterTidsperiodeEtter2UkerFørFødsel = (\n    tidsperiode: any,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined\n): boolean => {\n    const førsteUttaksdagToUkerFørFødsel = getFørsteUttaksdag2UkerFørFødsel(familiehendelsesdato, termindato);\n    return dayjs(tidsperiode.fom).isSameOrAfter(førsteUttaksdagToUkerFørFødsel, 'day');\n};\n\nexport const starterUttaksperiodeFørFødsel = (periode: Periode, familiehendelsesdato: Date): boolean => {\n    return isUttaksperiode(periode) && dayjs(periode.tidsperiode.fom).isBefore(familiehendelsesdato, 'day');\n};\n\nexport const slutterTidsperiodeInnen6UkerEtterFødsel = (tidsperiode: any, familiehendelsesdato: Date): boolean => {\n    const sisteUttaksdag6UkerEtterFødsel = getSisteUttaksdag6UkerEtterFødsel(familiehendelsesdato);\n    return dayjs(tidsperiode.tom).isSameOrBefore(sisteUttaksdag6UkerEtterFødsel, 'day');\n};\n\nexport const starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel = (\n    tidsperiode: TidsperiodeDate,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined\n) => {\n    return (\n        starterTidsperiodeEtter2UkerFørFødsel(tidsperiode, familiehendelsesdato, termindato) &&\n        dayjs(tidsperiode.fom).isSameOrBefore(getSisteUttaksdag6UkerEtterFødsel(familiehendelsesdato), 'day')\n    );\n};\n\nexport const getFarMedmorUttakRundtFødsel = (\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    termindato: Date | undefined\n): Periode[] => {\n    return perioder.filter((p) => isUttaksperiodeFarMedmorPgaFødsel(p, familiehendelsesdato, termindato));\n};\n\nexport const erFarMedmorSinWLBTidsperiodeRundtFødsel = (\n    tidsperiode: TidsperiodeDate,\n    familiehendelsesdato: Date,\n    periodetype: Periodetype,\n    konto: StønadskontoType,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n    situasjon: Situasjon\n): boolean => {\n    return (\n        tidsperiode !== undefined &&\n        isValidTidsperiode(tidsperiode) &&\n        erFarEllerMedmor &&\n        situasjon === 'fødsel' &&\n        andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n        periodetype === Periodetype.Uttak &&\n        (konto === StønadskontoType.Fedrekvote ||\n            konto === StønadskontoType.Foreldrepenger ||\n            konto === StønadskontoType.AktivitetsfriKvote) &&\n        starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel(tidsperiode, familiehendelsesdato, termindato)\n    );\n};\n\nexport const getLengdePåForeslåttWLBUttakFarMedmor = (familiehendelsesdato: Date, startDatoUttak: Date): number => {\n    const sisteUttaksDagFørFødsel = getSisteUttaksdag6UkerEtterFødsel(familiehendelsesdato);\n    const antallUttaksdagerFraStartDato = finnAntallDagerÅTrekke({\n        tidsperiode: { fom: startDatoUttak, tom: sisteUttaksDagFørFødsel },\n    } as Periode);\n    return Math.min(antallUttaksdagerFraStartDato, ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL);\n};\n\nexport const appendPeriodeNavnHvisUttakRundtFødselFarMedmor = (\n    intl: IntlShape,\n    periodeNavn: string,\n    periode: Periode,\n    situasjon: Situasjon,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined\n): string => {\n    return situasjon === 'fødsel' && isUttaksperiodeFarMedmorPgaFødsel(periode, familiehendelsesdato, termindato)\n        ? periodeNavn + intlUtils(intl, 'rundtFødsel')\n        : periodeNavn;\n};\n\nexport const farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato = (\n    periode: Periode,\n    familiehendelsesdato: Date,\n    morHarRett: boolean,\n    termindato: Date | undefined\n) => {\n    return (\n        (isUttaksperiodeFarMedmorPgaFødsel(periode, familiehendelsesdato, termindato) ||\n            isUttaksperiodeBareFarMedmorHarRett(periode, morHarRett)) &&\n        tidperiodeOverlapperDato(periode.tidsperiode, familiehendelsesdato)\n    );\n};\n\nexport const getPerioderMedUttakRundtFødsel = (\n    uttaksplan: Periode[],\n    familiehendelsesdato: Date,\n    termindato: Date | undefined\n): Uttaksperiode[] => {\n    return uttaksplan.filter(\n        (p) =>\n            (isUttaksperiode(p) || isOverføringsperiode(p)) &&\n            starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel(\n                p.tidsperiode,\n                familiehendelsesdato,\n                termindato\n            )\n    ) as [];\n};\n\nexport const uttaksperiodeKanJusteresVedFødsel = (\n    ønskerJustertUttakVedFødsel: boolean | undefined,\n    termindato: Date | undefined,\n    uttaksperiodeFom: Date\n) => {\n    return !!ønskerJustertUttakVedFødsel && termindato !== undefined && dayjs(uttaksperiodeFom).isSame(termindato, 'd');\n};\n","import { intlUtils, Tidsperiode, TidsperiodeDate } from '@navikt/fp-common';\nimport { IntlShape } from 'react-intl';\nimport { OppholdÅrsakType } from '../types/OppholdÅrsakType';\nimport { PeriodeInfoType } from '../types/PeriodeInfoType';\nimport { StønadskontoType } from '../types/StønadskontoType';\nimport {\n    isAnnenPartInfoPeriode,\n    isHull,\n    isOverføringsperiode,\n    isPeriodeUtenUttak,\n    isUttakAnnenPart,\n    isUttakAvFellesperiode,\n    isUttaksperiode,\n    Periode,\n    Periodetype,\n    Utsettelsesperiode,\n    UttakAnnenPartInfoPeriode,\n} from '../types/Periode';\nimport { NavnPåForeldre } from '../../app/types/NavnPåForeldre';\nimport { Forelder } from '../../app/types/Forelder';\nimport { StønadskontoUttak } from 'uttaksplan/types/StønadskontoUttak';\nimport { Perioden } from 'app/steps/uttaksplan-info/utils/Perioden';\nimport { erTidsperioderLike, Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { getFloatFromString } from 'app/utils/numberUtils';\nimport { getStønadskontoNavn, getUttakAnnenPartStønadskontoNavn } from './stønadskontoerUtils';\nimport {\n    convertTidsperiodeToTidsperiodeDate,\n    isDateInTheFuture,\n    isDateTodayOrInTheFuture,\n    ISOStringToDate,\n} from 'app/utils/dateUtils';\nimport dayjs from 'dayjs';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\nimport { MorsAktivitet } from 'uttaksplan/types/MorsAktivitet';\nimport { OverføringÅrsakType } from 'uttaksplan/types/OverføringÅrsakType';\nimport { EksisterendeSak } from 'app/types/EksisterendeSak';\nimport { appendPeriodeNavnHvisUttakRundtFødselFarMedmor } from 'app/utils/wlbUtils';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { capitalizeFirstLetter } from 'app/utils/stringUtils';\nimport { dateToISOString } from '@navikt/sif-common-formik-ds/lib';\nimport { PeriodeValidState } from 'uttaksplan/Uttaksplan';\n\nexport const mapTidsperiodeStringToTidsperiode = (t: Partial<Tidsperiode>): Partial<TidsperiodeDate> => {\n    return {\n        fom: ISOStringToDate(t.fom),\n        tom: ISOStringToDate(t.tom),\n    };\n};\n\nexport const mapTidsperiodeToTidsperiodeString = (t: Partial<TidsperiodeDate>): Partial<Tidsperiode> => {\n    return {\n        fom: dateToISOString(t.fom),\n        tom: dateToISOString(t.tom),\n    };\n};\n\nexport const stillingsprosentIsMoreThan0 = (stillingsprosent: string): boolean => {\n    const pst = getFloatFromString(stillingsprosent);\n    if (pst) {\n        return pst > 0;\n    }\n    return false;\n};\n\nexport const samtidigUttakProsentIsMax100 = (samtidigUttakProsent: string): boolean => {\n    const pst = getFloatFromString(samtidigUttakProsent);\n\n    if (pst) {\n        return pst <= 100;\n    }\n\n    return false;\n};\n\nexport const stillingsprosentIsLessThan100 = (stillingsprosent: string): boolean => {\n    const pst = getFloatFromString(stillingsprosent);\n    if (pst) {\n        return pst < 100;\n    }\n    return false;\n};\n\nconst isValidStillingsprosent = (pst: string | undefined): boolean =>\n    pst !== undefined && isNaN(parseFloat(pst)) === false;\n\nconst prettifyProsent = (pst: string | undefined): number | undefined => {\n    if (pst === undefined) {\n        return undefined;\n    }\n\n    const nbr = parseFloat(pst);\n    if (isNaN(nbr)) {\n        return undefined;\n    }\n    if (Math.round(nbr) === nbr) {\n        return Math.round(nbr);\n    }\n    return nbr;\n};\n\nexport const getUttaksprosentFromStillingsprosent = (\n    stillingsPst: number | undefined,\n    samtidigUttakPst: number | undefined\n): number | undefined => {\n    if (samtidigUttakPst) {\n        return samtidigUttakPst;\n    }\n    if (stillingsPst) {\n        let prosent = (100 - stillingsPst) * 100;\n        prosent = Math.round(prosent) / 100;\n\n        return prosent;\n    }\n    return undefined;\n};\n\nexport const getOppholdskontoNavn = (\n    intl: IntlShape,\n    årsak: OppholdÅrsakType,\n    foreldernavn: string,\n    erMor: boolean\n) => {\n    const navn = capitalizeFirstLetter(foreldernavn);\n    return erMor\n        ? intlUtils(intl, `uttaksplan.oppholdsårsaktype.foreldernavn.far.${årsak}`, { foreldernavn: navn })\n        : intlUtils(intl, `uttaksplan.oppholdsårsaktype.foreldernavn.mor.${årsak}`, { foreldernavn: navn });\n};\n\nexport const getStønadskontoFromOppholdsårsak = (årsak: OppholdÅrsakType): StønadskontoType => {\n    if (årsak === OppholdÅrsakType.UttakFedrekvoteAnnenForelder) {\n        return StønadskontoType.Fedrekvote;\n    }\n\n    if (årsak === OppholdÅrsakType.UttakMødrekvoteAnnenForelder) {\n        return StønadskontoType.Mødrekvote;\n    }\n\n    if (årsak === OppholdÅrsakType.UttakFellesperiodeAnnenForelder) {\n        return StønadskontoType.Fellesperiode;\n    }\n\n    if (årsak === OppholdÅrsakType.UttakForeldrepengerAnnenForelder) {\n        return StønadskontoType.Foreldrepenger;\n    }\n\n    return StønadskontoType.ForeldrepengerFørFødsel;\n};\n\nexport const getOppholdsÅrsakFromStønadskonto = (konto: StønadskontoType): OppholdÅrsakType | undefined => {\n    switch (konto) {\n        case StønadskontoType.Fedrekvote:\n            return OppholdÅrsakType.UttakFedrekvoteAnnenForelder;\n        case StønadskontoType.Mødrekvote:\n            return OppholdÅrsakType.UttakMødrekvoteAnnenForelder;\n        case StønadskontoType.Fellesperiode:\n            return OppholdÅrsakType.UttakFellesperiodeAnnenForelder;\n        default:\n            return undefined;\n    }\n};\n\nexport const getForelderFromPeriode = (periode: Periode): Forelder | undefined => {\n    if (!isHull(periode) && !isPeriodeUtenUttak(periode)) {\n        return periode.forelder;\n    }\n\n    return undefined;\n};\n\nexport const getForelderNavn = (forelder: Forelder, navnPåForeldre: NavnPåForeldre): string => {\n    if (navnPåForeldre.farMedmor) {\n        return forelder === Forelder.mor ? navnPåForeldre.mor : navnPåForeldre.farMedmor;\n    }\n    return forelder === Forelder.mor ? navnPåForeldre.mor : forelder;\n};\n\nexport const getPeriodeTittel = (\n    intl: IntlShape,\n    periode: Periode,\n    navnPåForeldre: NavnPåForeldre,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    situasjon: Situasjon,\n    erFarEllerMedmor?: boolean,\n    erAleneOmOmsorg?: boolean\n): string => {\n    switch (periode.type) {\n        case Periodetype.Uttak: {\n            const tittelMedNavn = getStønadskontoNavn(\n                intl,\n                periode.konto,\n                navnPåForeldre,\n                erFarEllerMedmor,\n                erAleneOmOmsorg\n            );\n            const tittel = appendPeriodeNavnHvisUttakRundtFødselFarMedmor(\n                intl,\n                tittelMedNavn,\n                periode,\n                situasjon,\n                familiehendelsesdato,\n                termindato\n            );\n            if (\n                (periode.gradert && isValidStillingsprosent(periode.stillingsprosent)) ||\n                (periode.ønskerSamtidigUttak && isValidStillingsprosent(periode.samtidigUttakProsent))\n            ) {\n                return `${tittel} ${intlUtils(intl, 'gradering.prosent', {\n                    stillingsprosent: getUttaksprosentFromStillingsprosent(\n                        prettifyProsent(periode.stillingsprosent),\n                        periode.samtidigUttakProsent ? prettifyProsent(periode.samtidigUttakProsent) : undefined\n                    ),\n                })}`;\n            }\n\n            return tittel;\n        }\n        case Periodetype.PeriodeUtenUttak:\n            return intlUtils(intl, 'uttaksplan.periodetype.periodeUtenUttak.tittel');\n        case Periodetype.Overføring:\n            return getStønadskontoNavn(intl, periode.konto, navnPåForeldre);\n        case Periodetype.Utsettelse:\n            if (periode.årsak) {\n                return intlUtils(intl, 'uttaksplan.periodeliste.utsettelsesårsak', {\n                    årsak: intlUtils(intl, `uttaksplan.utsettelsesårsak.${periode.årsak}`),\n                });\n            }\n            return intlUtils(intl, 'uttaksplan.periodeliste.utsettelsesårsak.ukjent');\n        case Periodetype.Opphold:\n            return getOppholdskontoNavn(\n                intl,\n                periode.årsak,\n                getForelderNavn(periode.forelder, navnPåForeldre),\n                periode.forelder === 'mor'\n            );\n        case Periodetype.Hull:\n            return intlUtils(intl, 'uttaksplan.periodetype.hull.tittel');\n        case Periodetype.Info:\n            switch (periode.infotype) {\n                case PeriodeInfoType.uttakAnnenPart:\n                    return getUttakAnnenPartStønadskontoNavn(\n                        intl,\n                        getStønadskontoFromOppholdsårsak(periode.årsak),\n                        periode.forelder,\n                        navnPåForeldre,\n                        periode.samtidigUttakProsent\n                    );\n                case PeriodeInfoType.utsettelseAnnenPart:\n                    return intlUtils(intl, `uttaksplan.periodetype.info.utsettelse.${periode.årsak}`, {\n                        navn: getForelderNavn(periode.forelder, navnPåForeldre),\n                    });\n                default:\n                    return intlUtils(intl, `uttaksplan.periodetype.info.${periode.infotype}`);\n            }\n    }\n};\n\nexport const erSentGradertUttak = (periode: Periode) =>\n    periode.type === Periodetype.Uttak &&\n    !isDateTodayOrInTheFuture(dateToISOString(periode.tidsperiode.fom)) &&\n    periode.gradert;\n\nexport const erPeriodeInnvilget = (periode: Periode, eksisterendeSak?: EksisterendeSak): boolean => {\n    if (eksisterendeSak === undefined) {\n        return false;\n    }\n    const saksperiode = getSaksperiode(periode, eksisterendeSak);\n    return saksperiode ? saksperiode.resultat.innvilget : false;\n};\n\nconst getSaksperiode = (periode: Periode, ekisterendeSak: EksisterendeSak) => {\n    return ekisterendeSak.saksperioder.find((saksperiode) =>\n        erTidsperioderLike(convertTidsperiodeToTidsperiodeDate(saksperiode.periode), periode.tidsperiode)\n    );\n};\n\nexport const getPeriodeForelderNavn = (periode: Periode, navnPåForeldre: NavnPåForeldre): string => {\n    if (\n        periode.type === Periodetype.Utsettelse ||\n        periode.type === Periodetype.Uttak ||\n        periode.type === Periodetype.Overføring ||\n        periode.type === Periodetype.Opphold ||\n        periode.type === Periodetype.Info\n    ) {\n        return getForelderNavn(periode.forelder, navnPåForeldre);\n    }\n    return 'Ingen forelder registrert';\n};\n\nexport const getSamtidigUttakEllerGraderingsProsent = (periode: UttakAnnenPartInfoPeriode): number | undefined => {\n    const periodeErGradert = periode.stillingsprosent !== undefined;\n    const periodeErSamtidigUttak = periode.samtidigUttakProsent !== undefined;\n\n    if (periodeErSamtidigUttak) {\n        return (100 - getFloatFromString(periode.samtidigUttakProsent)!) / 100;\n    }\n\n    if (periodeErGradert) {\n        return getFloatFromString(periode.stillingsprosent)! / 100;\n    }\n\n    return undefined;\n};\n\nexport const justerAndrePartsUttakAvFellesperiodeOmMulig = (\n    perioder: Periode[],\n    uttakFellesperiode: StønadskontoUttak | undefined\n): Periode[] => {\n    if (uttakFellesperiode === undefined || uttakFellesperiode.dager >= 0 || perioder.length === 0) {\n        return perioder;\n    }\n\n    const dagerGjenståendeFellesperiode = uttakFellesperiode.dager;\n\n    const sisteFellesperiodeAnnenPart = [...perioder]\n        .reverse()\n        .find((p) => isAnnenPartInfoPeriode(p) && p.årsak === OppholdÅrsakType.UttakFellesperiodeAnnenForelder);\n\n    if (sisteFellesperiodeAnnenPart !== undefined && isAnnenPartInfoPeriode(sisteFellesperiodeAnnenPart)) {\n        const dagerMedFellesperiodeISistePeriode = Perioden(sisteFellesperiodeAnnenPart).getAntallUttaksdager();\n        const justeringsProsent = getSamtidigUttakEllerGraderingsProsent(sisteFellesperiodeAnnenPart) || 1;\n        const diff = dagerGjenståendeFellesperiode / justeringsProsent + dagerMedFellesperiodeISistePeriode;\n        const indexSistePeriode = perioder.findIndex((p) => p.id === sisteFellesperiodeAnnenPart.id);\n\n        if (dagerGjenståendeFellesperiode < 0 && diff > 0) {\n            perioder[indexSistePeriode] = {\n                ...sisteFellesperiodeAnnenPart,\n                tidsperiode: Tidsperioden(sisteFellesperiodeAnnenPart.tidsperiode).setUttaksdager(diff),\n            };\n            return perioder;\n        }\n\n        if (dagerGjenståendeFellesperiode < 0 && diff === 0) {\n            return perioder.splice(indexSistePeriode, 1);\n        }\n    }\n\n    return perioder;\n};\n\nexport const getSlettPeriodeTekst = (periodetype: Periodetype): string => {\n    switch (periodetype) {\n        case Periodetype.Uttak:\n            return 'uttaksplan.slettPeriode.uttak';\n        case Periodetype.Overføring:\n            return 'uttaksplan.slettPeriode.overføring';\n        case Periodetype.Opphold:\n            return 'uttaksplan.slettPeriode.opphold';\n        case Periodetype.Utsettelse:\n            return 'uttaksplan.slettPeriode.utsettelse';\n        default:\n            return '';\n    }\n};\n\nconst erPeriodeFomEllerEtterDato = (periode: Periode, dato: Date): boolean => {\n    return (\n        periode.tidsperiode.fom !== undefined &&\n        periode.tidsperiode.tom !== undefined &&\n        dayjs(periode.tidsperiode.fom).isSameOrAfter(dato, 'day') &&\n        dayjs(periode.tidsperiode.tom).isSameOrAfter(dato, 'day')\n    );\n};\n\nexport const erPeriodeFørDato = (periode: Periode, dato: Date) => {\n    return erPeriodeFomEllerEtterDato(periode, dato) === false;\n};\n\nexport const erGradering = (periode: Periode) => periode.type === Periodetype.Uttak && periode.gradert === true;\n\nexport const erUttakEllerOppholdMerEnnTreMånederSiden = (periode: Periode) =>\n    (periode.type === Periodetype.Uttak || periode.type === Periodetype.Opphold) &&\n    dayjs(periode.tidsperiode.fom).isBefore(dayjs().startOf('day').subtract(3, 'months'), 'day');\n\nexport const erUtsettelsePgaSykdom = (periode: Utsettelsesperiode) =>\n    periode.årsak === UtsettelseÅrsakType.Sykdom ||\n    periode.årsak === UtsettelseÅrsakType.InstitusjonSøker ||\n    periode.årsak === UtsettelseÅrsakType.InstitusjonBarnet;\n\nexport const erUttakGrunnetSykdom = (periode: Periode) => {\n    if (\n        isOverføringsperiode(periode) &&\n        (periode.årsak === OverføringÅrsakType.institusjonsoppholdAnnenForelder ||\n            periode.årsak === OverføringÅrsakType.sykdomAnnenForelder)\n    ) {\n        return true;\n    }\n\n    if (isUttaksperiode(periode)) {\n        if (\n            periode.erMorForSyk === true ||\n            periode.morsAktivitetIPerioden === MorsAktivitet.TrengerHjelp ||\n            periode.morsAktivitetIPerioden === MorsAktivitet.Innlagt\n        ) {\n            return true;\n        }\n    }\n\n    if (\n        isUttakAvFellesperiode(periode) &&\n        (periode.morsAktivitetIPerioden === MorsAktivitet.Innlagt ||\n            periode.morsAktivitetIPerioden === MorsAktivitet.TrengerHjelp)\n    ) {\n        return true;\n    }\n\n    return false;\n};\n\nexport const erUttakTilbakeITid = (periode: Periode) =>\n    isUttaksperiode(periode) && !isDateInTheFuture(dateToISOString(periode.tidsperiode.fom));\n\nexport const erUtsettelseTilbakeITid = (periode: Periode) =>\n    periode.type === Periodetype.Utsettelse && !isDateInTheFuture(dateToISOString(periode.tidsperiode.fom));\n\nexport const erUtsettelseGrunnetPgaArbeid = (periode: Utsettelsesperiode) =>\n    periode.årsak === UtsettelseÅrsakType.Arbeid;\n\nexport const erUtsettelse = (periode: Periode) => periode.type === Periodetype.Utsettelse;\n\nconst erUtsettelsePgaFerieEllerArbeid = (periode: Periode) =>\n    periode.type === Periodetype.Utsettelse &&\n    (periode.årsak === UtsettelseÅrsakType.Ferie || periode.årsak === UtsettelseÅrsakType.Arbeid);\n\nexport const erSenUtsettelsePgaFerieEllerArbeid = (periode: Periode) =>\n    erUtsettelseTilbakeITid(periode) && erUtsettelsePgaFerieEllerArbeid(periode);\n\nexport const erÅrsakSykdomEllerInstitusjonsopphold = (årsak: UtsettelseÅrsakType | OverføringÅrsakType) =>\n    årsak === UtsettelseÅrsakType.Sykdom ||\n    årsak === UtsettelseÅrsakType.InstitusjonBarnet ||\n    årsak === UtsettelseÅrsakType.InstitusjonSøker ||\n    årsak === OverføringÅrsakType.institusjonsoppholdAnnenForelder ||\n    årsak === OverføringÅrsakType.sykdomAnnenForelder;\n\nexport const finnesPeriodeIOpprinneligPlan = (periode: Periode, opprinneligPlan: Periode[]): boolean => {\n    return opprinneligPlan.some((op) => Perioden(periode).erLik(op, true, true));\n};\n\nexport const getAnnenForelderSamtidigUttakPeriode = (periode: Periode, perioder: Periode[]): Periode | undefined => {\n    if (isUttaksperiode(periode)) {\n        const samtidigUttak = perioder\n            .filter((p) => isUttakAnnenPart(p))\n            .find(\n                (p) =>\n                    isUttakAnnenPart(p) &&\n                    dayjs(periode.tidsperiode.fom).isSame(p.tidsperiode.fom) &&\n                    p.ønskerSamtidigUttak === true &&\n                    p.id !== periode.id\n            );\n\n        return samtidigUttak !== undefined ? samtidigUttak : undefined;\n    }\n\n    return undefined;\n};\n\nexport const getIsValidStateForPerioder = (previousState: PeriodeValidState[], periode: Periode, isValid: boolean) => {\n    const periodeIState = previousState.find((p) => p.id === periode.id);\n    if (periodeIState && periodeIState.isValid !== isValid) {\n        return previousState.map((p) => {\n            if (p.id === periodeIState.id) {\n                return { ...p, isValid };\n            }\n            return p;\n        });\n    }\n    if (!periodeIState) {\n        return [...previousState, { id: periode.id, isValid }];\n    }\n    return previousState;\n};\n"],"names":["Forelder","OppholdÅrsakType","onlyNumbersRegExp","getMod11","strValue","checkNbr","mod","i","result","er9Tall","orgnr","starterPå8Eller9","erGyldigNorskOrgnummer","numberRegExp","trimNumberValue","value","getFloatFromString","trimmedValue","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","o","minLen","_arrayLikeToArray","n","iter","len","arr2","elevenDigits","fnr","digits","idnr","dnr","hnr","tnr","getType","type","validate","errMsgs","checksums","birthdate","k1","k2","day","month","year","date","validator","isFødselsnummerFormatValid","isSixteenOrOlder","isFødselsnummerValid","dato","mnd","år","fødselsdato","dayjs","textRegex","textGyldigRegex","usynligeCharsRegex","validateFødselsnummer","intl","søkersFødselsnummer","erUtenlandskFnr","intlUtils","validFnrResult","validateRequiredField","label","hasValue","validateRequiredTextInputField","feltNavn","requiredFieldIsEmptyError","validateTextInputField","getIllegalChars","kunUgyldigeTegn","ugyldigStringSet","getIllegalCharsErrorMessage","ugyldigeTegn","validateTextHasLegalChars","replaceInvisibleCharsWithSpace","inputString","capitalizeFirstLetter","s","getVelgbareStønadskontotyper","stønadskontoTyper","kontoType","StønadskontoType","getStønadskontoNavn","konto","navnPåForeldre","erFarEllerMedmor","erAleneOmOmsorg","navn","getNavnGenitivEierform","getUttakAnnenPartStønadskontoNavn","periodeForelder","samtidigUttakProsent","forelderNavn","getForelderNavn","intlTekst","navnSlutterPåSLyd","sisteBokstav","locale","MorsAktivitet","OverføringÅrsakType","finnAntallDagerÅTrekke","periode","dager","Perioden","isUttaksperiode","periodeErGradert","periodeErSamtidigUttak","graderingsProsent","ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL","ANTALL_DAGER_TO_UKER","ANTALL_DAGER_SEKS_UKER","gjelderWLBReglerFarMedmorRundtFødsel","familiehendelsesdato","søkerErFarEllerMedmor","morHarRett","situasjon","andreAugust2022ReglerGjelder","isUttaksperiodeFarMedmorMedValgForUttakRundtFødsel","isUttaksperiodeFarMedmorPgaFødsel","termindato","starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel","isUttaksperiodeBareFarMedmorHarRett","getFørsteUttaksdag2UkerFørFødsel","terminEllerFamHendelsesdatoMinusToUker","datoÅRegneFra","Uttaksdagen","getSisteUttaksdag6UkerEtterFødsel","førsteUttaksdagForPeriodeEtterFødsel","starterTidsperiodeEtter2UkerFørFødsel","tidsperiode","førsteUttaksdagToUkerFørFødsel","starterUttaksperiodeFørFødsel","slutterTidsperiodeInnen6UkerEtterFødsel","sisteUttaksdag6UkerEtterFødsel","getFarMedmorUttakRundtFødsel","perioder","p","erFarMedmorSinWLBTidsperiodeRundtFødsel","periodetype","isValidTidsperiode","Periodetype","getLengdePåForeslåttWLBUttakFarMedmor","startDatoUttak","sisteUttaksDagFørFødsel","antallUttaksdagerFraStartDato","appendPeriodeNavnHvisUttakRundtFødselFarMedmor","periodeNavn","farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato","tidperiodeOverlapperDato","getPerioderMedUttakRundtFødsel","uttaksplan","isOverføringsperiode","uttaksperiodeKanJusteresVedFødsel","ønskerJustertUttakVedFødsel","uttaksperiodeFom","mapTidsperiodeStringToTidsperiode","t","ISOStringToDate","stillingsprosentIsMoreThan0","stillingsprosent","pst","samtidigUttakProsentIsMax100","stillingsprosentIsLessThan100","isValidStillingsprosent","prettifyProsent","nbr","getUttaksprosentFromStillingsprosent","stillingsPst","samtidigUttakPst","prosent","getOppholdskontoNavn","årsak","foreldernavn","erMor","getStønadskontoFromOppholdsårsak","getOppholdsÅrsakFromStønadskonto","forelder","getPeriodeTittel","tittelMedNavn","tittel","PeriodeInfoType","erPeriodeInnvilget","eksisterendeSak","saksperiode","getSaksperiode","ekisterendeSak","erTidsperioderLike","convertTidsperiodeToTidsperiodeDate","getPeriodeForelderNavn","getSlettPeriodeTekst","erPeriodeFomEllerEtterDato","erPeriodeFørDato","erUttakEllerOppholdMerEnnTreMånederSiden","erUtsettelsePgaSykdom","UtsettelseÅrsakType","erUttakGrunnetSykdom","isUttakAvFellesperiode","erUttakTilbakeITid","isDateInTheFuture","dateToISOString","erUtsettelseTilbakeITid","erUtsettelseGrunnetPgaArbeid","erUtsettelse","erUtsettelsePgaFerieEllerArbeid","erSenUtsettelsePgaFerieEllerArbeid","erÅrsakSykdomEllerInstitusjonsopphold","finnesPeriodeIOpprinneligPlan","opprinneligPlan","op","getAnnenForelderSamtidigUttakPeriode","samtidigUttak","isUttakAnnenPart","getIsValidStateForPerioder","previousState","isValid","periodeIState"],"mappings":"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","x_google_ignoreList":[3]}