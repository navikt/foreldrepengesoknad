{"version":3,"file":"provider-621cc7ef.js","sources":["../../../../node_modules/.pnpm/@formatjs+intl@2.9.0_typescript@5.2.2/node_modules/@formatjs/intl/lib/src/message.js","../../../../node_modules/.pnpm/@formatjs+intl@2.9.0_typescript@5.2.2/node_modules/@formatjs/intl/lib/src/dateTime.js","../../../../node_modules/.pnpm/@formatjs+intl@2.9.0_typescript@5.2.2/node_modules/@formatjs/intl/lib/src/displayName.js","../../../../node_modules/.pnpm/@formatjs+intl@2.9.0_typescript@5.2.2/node_modules/@formatjs/intl/lib/src/list.js","../../../../node_modules/.pnpm/@formatjs+intl@2.9.0_typescript@5.2.2/node_modules/@formatjs/intl/lib/src/plural.js","../../../../node_modules/.pnpm/@formatjs+intl@2.9.0_typescript@5.2.2/node_modules/@formatjs/intl/lib/src/relativeTime.js","../../../../node_modules/.pnpm/@formatjs+intl@2.9.0_typescript@5.2.2/node_modules/@formatjs/intl/lib/src/number.js","../../../../node_modules/.pnpm/@formatjs+intl@2.9.0_typescript@5.2.2/node_modules/@formatjs/intl/lib/src/create-intl.js","../../../../node_modules/.pnpm/react-intl@6.4.4_react@18.2.0_typescript@5.2.2/node_modules/react-intl/lib/src/components/provider.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { invariant } from '@formatjs/ecma402-abstract';\nimport { IntlMessageFormat, } from 'intl-messageformat';\nimport { MissingTranslationError, MessageFormatError } from './error';\nimport { TYPE } from '@formatjs/icu-messageformat-parser';\nfunction setTimeZoneInOptions(opts, timeZone) {\n    return Object.keys(opts).reduce(function (all, k) {\n        all[k] = __assign({ timeZone: timeZone }, opts[k]);\n        return all;\n    }, {});\n}\nfunction deepMergeOptions(opts1, opts2) {\n    var keys = Object.keys(__assign(__assign({}, opts1), opts2));\n    return keys.reduce(function (all, k) {\n        all[k] = __assign(__assign({}, (opts1[k] || {})), (opts2[k] || {}));\n        return all;\n    }, {});\n}\nfunction deepMergeFormatsAndSetTimeZone(f1, timeZone) {\n    if (!timeZone) {\n        return f1;\n    }\n    var mfFormats = IntlMessageFormat.formats;\n    return __assign(__assign(__assign({}, mfFormats), f1), { date: deepMergeOptions(setTimeZoneInOptions(mfFormats.date, timeZone), setTimeZoneInOptions(f1.date || {}, timeZone)), time: deepMergeOptions(setTimeZoneInOptions(mfFormats.time, timeZone), setTimeZoneInOptions(f1.time || {}, timeZone)) });\n}\nexport var formatMessage = function (_a, state, messageDescriptor, values, opts) {\n    var locale = _a.locale, formats = _a.formats, messages = _a.messages, defaultLocale = _a.defaultLocale, defaultFormats = _a.defaultFormats, fallbackOnEmptyString = _a.fallbackOnEmptyString, onError = _a.onError, timeZone = _a.timeZone, defaultRichTextElements = _a.defaultRichTextElements;\n    if (messageDescriptor === void 0) { messageDescriptor = { id: '' }; }\n    var msgId = messageDescriptor.id, defaultMessage = messageDescriptor.defaultMessage;\n    // `id` is a required field of a Message Descriptor.\n    invariant(!!msgId, \"[@formatjs/intl] An `id` must be provided to format a message. You can either:\\n1. Configure your build toolchain with [babel-plugin-formatjs](https://formatjs.io/docs/tooling/babel-plugin)\\nor [@formatjs/ts-transformer](https://formatjs.io/docs/tooling/ts-transformer) OR\\n2. Configure your `eslint` config to include [eslint-plugin-formatjs](https://formatjs.io/docs/tooling/linter#enforce-id)\\nto autofix this issue\");\n    var id = String(msgId);\n    var message = \n    // In case messages is Object.create(null)\n    // e.g import('foo.json') from webpack)\n    // See https://github.com/formatjs/formatjs/issues/1914\n    messages &&\n        Object.prototype.hasOwnProperty.call(messages, id) &&\n        messages[id];\n    // IMPORTANT: Hot path if `message` is AST with a single literal node\n    if (Array.isArray(message) &&\n        message.length === 1 &&\n        message[0].type === TYPE.literal) {\n        return message[0].value;\n    }\n    // IMPORTANT: Hot path straight lookup for performance\n    if (!values &&\n        message &&\n        typeof message === 'string' &&\n        !defaultRichTextElements) {\n        return message.replace(/'\\{(.*?)\\}'/gi, \"{$1}\");\n    }\n    values = __assign(__assign({}, defaultRichTextElements), (values || {}));\n    formats = deepMergeFormatsAndSetTimeZone(formats, timeZone);\n    defaultFormats = deepMergeFormatsAndSetTimeZone(defaultFormats, timeZone);\n    if (!message) {\n        if (fallbackOnEmptyString === false && message === '') {\n            return message;\n        }\n        if (!defaultMessage ||\n            (locale && locale.toLowerCase() !== defaultLocale.toLowerCase())) {\n            // This prevents warnings from littering the console in development\n            // when no `messages` are passed into the <IntlProvider> for the\n            // default locale.\n            onError(new MissingTranslationError(messageDescriptor, locale));\n        }\n        if (defaultMessage) {\n            try {\n                var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats, opts);\n                return formatter.format(values);\n            }\n            catch (e) {\n                onError(new MessageFormatError(\"Error formatting default message for: \\\"\".concat(id, \"\\\", rendering default message verbatim\"), locale, messageDescriptor, e));\n                return typeof defaultMessage === 'string' ? defaultMessage : id;\n            }\n        }\n        return id;\n    }\n    // We have the translated message\n    try {\n        var formatter = state.getMessageFormat(message, locale, formats, __assign({ formatters: state }, (opts || {})));\n        return formatter.format(values);\n    }\n    catch (e) {\n        onError(new MessageFormatError(\"Error formatting message: \\\"\".concat(id, \"\\\", using \").concat(defaultMessage ? 'default message' : 'id', \" as fallback.\"), locale, messageDescriptor, e));\n    }\n    if (defaultMessage) {\n        try {\n            var formatter = state.getMessageFormat(defaultMessage, defaultLocale, defaultFormats, opts);\n            return formatter.format(values);\n        }\n        catch (e) {\n            onError(new MessageFormatError(\"Error formatting the default message for: \\\"\".concat(id, \"\\\", rendering message verbatim\"), locale, messageDescriptor, e));\n        }\n    }\n    if (typeof message === 'string') {\n        return message;\n    }\n    if (typeof defaultMessage === 'string') {\n        return defaultMessage;\n    }\n    return id;\n};\n","import { __assign } from \"tslib\";\nimport { filterProps, getNamedFormat } from './utils';\nimport { IntlFormatError } from './error';\nvar DATE_TIME_FORMAT_OPTIONS = [\n    'formatMatcher',\n    'timeZone',\n    'hour12',\n    'weekday',\n    'era',\n    'year',\n    'month',\n    'day',\n    'hour',\n    'minute',\n    'second',\n    'timeZoneName',\n    'hourCycle',\n    'dateStyle',\n    'timeStyle',\n    'calendar',\n    // 'dayPeriod',\n    'numberingSystem',\n    'fractionalSecondDigits',\n];\nexport function getFormatter(_a, type, getDateTimeFormat, options) {\n    var locale = _a.locale, formats = _a.formats, onError = _a.onError, timeZone = _a.timeZone;\n    if (options === void 0) { options = {}; }\n    var format = options.format;\n    var defaults = __assign(__assign({}, (timeZone && { timeZone: timeZone })), (format && getNamedFormat(formats, type, format, onError)));\n    var filteredOptions = filterProps(options, DATE_TIME_FORMAT_OPTIONS, defaults);\n    if (type === 'time' &&\n        !filteredOptions.hour &&\n        !filteredOptions.minute &&\n        !filteredOptions.second &&\n        !filteredOptions.timeStyle &&\n        !filteredOptions.dateStyle) {\n        // Add default formatting options if hour, minute, or second isn't defined.\n        filteredOptions = __assign(__assign({}, filteredOptions), { hour: 'numeric', minute: 'numeric' });\n    }\n    return getDateTimeFormat(locale, filteredOptions);\n}\nexport function formatDate(config, getDateTimeFormat) {\n    var _a = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        _a[_i - 2] = arguments[_i];\n    }\n    var value = _a[0], _b = _a[1], options = _b === void 0 ? {} : _b;\n    var date = typeof value === 'string' ? new Date(value || 0) : value;\n    try {\n        return getFormatter(config, 'date', getDateTimeFormat, options).format(date);\n    }\n    catch (e) {\n        config.onError(new IntlFormatError('Error formatting date.', config.locale, e));\n    }\n    return String(date);\n}\nexport function formatTime(config, getDateTimeFormat) {\n    var _a = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        _a[_i - 2] = arguments[_i];\n    }\n    var value = _a[0], _b = _a[1], options = _b === void 0 ? {} : _b;\n    var date = typeof value === 'string' ? new Date(value || 0) : value;\n    try {\n        return getFormatter(config, 'time', getDateTimeFormat, options).format(date);\n    }\n    catch (e) {\n        config.onError(new IntlFormatError('Error formatting time.', config.locale, e));\n    }\n    return String(date);\n}\nexport function formatDateTimeRange(config, getDateTimeFormat) {\n    var _a = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        _a[_i - 2] = arguments[_i];\n    }\n    var from = _a[0], to = _a[1], _b = _a[2], options = _b === void 0 ? {} : _b;\n    var timeZone = config.timeZone, locale = config.locale, onError = config.onError;\n    var filteredOptions = filterProps(options, DATE_TIME_FORMAT_OPTIONS, timeZone ? { timeZone: timeZone } : {});\n    try {\n        return getDateTimeFormat(locale, filteredOptions).formatRange(from, to);\n    }\n    catch (e) {\n        onError(new IntlFormatError('Error formatting date time range.', config.locale, e));\n    }\n    return String(from);\n}\nexport function formatDateToParts(config, getDateTimeFormat) {\n    var _a = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        _a[_i - 2] = arguments[_i];\n    }\n    var value = _a[0], _b = _a[1], options = _b === void 0 ? {} : _b;\n    var date = typeof value === 'string' ? new Date(value || 0) : value;\n    try {\n        return getFormatter(config, 'date', getDateTimeFormat, options).formatToParts(date); // TODO: remove this when https://github.com/microsoft/TypeScript/pull/50402 is merged\n    }\n    catch (e) {\n        config.onError(new IntlFormatError('Error formatting date.', config.locale, e));\n    }\n    return [];\n}\nexport function formatTimeToParts(config, getDateTimeFormat) {\n    var _a = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        _a[_i - 2] = arguments[_i];\n    }\n    var value = _a[0], _b = _a[1], options = _b === void 0 ? {} : _b;\n    var date = typeof value === 'string' ? new Date(value || 0) : value;\n    try {\n        return getFormatter(config, 'time', getDateTimeFormat, options).formatToParts(date); // TODO: remove this when https://github.com/microsoft/TypeScript/pull/50402 is merged\n    }\n    catch (e) {\n        config.onError(new IntlFormatError('Error formatting time.', config.locale, e));\n    }\n    return [];\n}\n","import { filterProps } from './utils';\nimport { FormatError, ErrorCode } from 'intl-messageformat';\nimport { IntlFormatError } from './error';\nvar DISPLAY_NAMES_OPTONS = [\n    'style',\n    'type',\n    'fallback',\n    'languageDisplay',\n];\nexport function formatDisplayName(_a, getDisplayNames, value, options) {\n    var locale = _a.locale, onError = _a.onError;\n    var DisplayNames = Intl.DisplayNames;\n    if (!DisplayNames) {\n        onError(new FormatError(\"Intl.DisplayNames is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-displaynames\\\"\\n\", ErrorCode.MISSING_INTL_API));\n    }\n    var filteredOptions = filterProps(options, DISPLAY_NAMES_OPTONS);\n    try {\n        return getDisplayNames(locale, filteredOptions).of(value);\n    }\n    catch (e) {\n        onError(new IntlFormatError('Error formatting display name.', locale, e));\n    }\n}\n","import { __assign } from \"tslib\";\nimport { filterProps } from './utils';\nimport { FormatError, ErrorCode } from 'intl-messageformat';\nimport { IntlFormatError } from './error';\nvar LIST_FORMAT_OPTIONS = [\n    'type',\n    'style',\n];\nvar now = Date.now();\nfunction generateToken(i) {\n    return \"\".concat(now, \"_\").concat(i, \"_\").concat(now);\n}\nexport function formatList(opts, getListFormat, values, options) {\n    if (options === void 0) { options = {}; }\n    var results = formatListToParts(opts, getListFormat, values, options).reduce(function (all, el) {\n        var val = el.value;\n        if (typeof val !== 'string') {\n            all.push(val);\n        }\n        else if (typeof all[all.length - 1] === 'string') {\n            all[all.length - 1] += val;\n        }\n        else {\n            all.push(val);\n        }\n        return all;\n    }, []);\n    return results.length === 1 ? results[0] : results.length === 0 ? '' : results;\n}\nexport function formatListToParts(_a, getListFormat, values, options) {\n    var locale = _a.locale, onError = _a.onError;\n    if (options === void 0) { options = {}; }\n    var ListFormat = Intl.ListFormat;\n    if (!ListFormat) {\n        onError(new FormatError(\"Intl.ListFormat is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-listformat\\\"\\n\", ErrorCode.MISSING_INTL_API));\n    }\n    var filteredOptions = filterProps(options, LIST_FORMAT_OPTIONS);\n    try {\n        var richValues_1 = {};\n        var serializedValues = values.map(function (v, i) {\n            if (typeof v === 'object') {\n                var id = generateToken(i);\n                richValues_1[id] = v;\n                return id;\n            }\n            return String(v);\n        });\n        return getListFormat(locale, filteredOptions)\n            .formatToParts(serializedValues)\n            .map(function (part) {\n            return part.type === 'literal'\n                ? part\n                : __assign(__assign({}, part), { value: richValues_1[part.value] || part.value });\n        });\n    }\n    catch (e) {\n        onError(new IntlFormatError('Error formatting list.', locale, e));\n    }\n    // @ts-ignore\n    return values;\n}\n","import { filterProps } from './utils';\nimport { IntlFormatError } from './error';\nimport { ErrorCode, FormatError } from 'intl-messageformat';\nvar PLURAL_FORMAT_OPTIONS = ['type'];\nexport function formatPlural(_a, getPluralRules, value, options) {\n    var locale = _a.locale, onError = _a.onError;\n    if (options === void 0) { options = {}; }\n    if (!Intl.PluralRules) {\n        onError(new FormatError(\"Intl.PluralRules is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-pluralrules\\\"\\n\", ErrorCode.MISSING_INTL_API));\n    }\n    var filteredOptions = filterProps(options, PLURAL_FORMAT_OPTIONS);\n    try {\n        return getPluralRules(locale, filteredOptions).select(value);\n    }\n    catch (e) {\n        onError(new IntlFormatError('Error formatting plural.', locale, e));\n    }\n    return 'other';\n}\n","import { getNamedFormat, filterProps } from './utils';\nimport { FormatError, ErrorCode } from 'intl-messageformat';\nimport { IntlFormatError } from './error';\nvar RELATIVE_TIME_FORMAT_OPTIONS = ['numeric', 'style'];\nfunction getFormatter(_a, getRelativeTimeFormat, options) {\n    var locale = _a.locale, formats = _a.formats, onError = _a.onError;\n    if (options === void 0) { options = {}; }\n    var format = options.format;\n    var defaults = (!!format && getNamedFormat(formats, 'relative', format, onError)) || {};\n    var filteredOptions = filterProps(options, RELATIVE_TIME_FORMAT_OPTIONS, defaults);\n    return getRelativeTimeFormat(locale, filteredOptions);\n}\nexport function formatRelativeTime(config, getRelativeTimeFormat, value, unit, options) {\n    if (options === void 0) { options = {}; }\n    if (!unit) {\n        unit = 'second';\n    }\n    var RelativeTimeFormat = Intl.RelativeTimeFormat;\n    if (!RelativeTimeFormat) {\n        config.onError(new FormatError(\"Intl.RelativeTimeFormat is not available in this environment.\\nTry polyfilling it using \\\"@formatjs/intl-relativetimeformat\\\"\\n\", ErrorCode.MISSING_INTL_API));\n    }\n    try {\n        return getFormatter(config, getRelativeTimeFormat, options).format(value, unit);\n    }\n    catch (e) {\n        config.onError(new IntlFormatError('Error formatting relative time.', config.locale, e));\n    }\n    return String(value);\n}\n","import { getNamedFormat, filterProps } from './utils';\nimport { IntlFormatError } from './error';\nvar NUMBER_FORMAT_OPTIONS = [\n    'style',\n    'currency',\n    'currencyDisplay',\n    'unit',\n    'unitDisplay',\n    'useGrouping',\n    'minimumIntegerDigits',\n    'minimumFractionDigits',\n    'maximumFractionDigits',\n    'minimumSignificantDigits',\n    'maximumSignificantDigits',\n    // ES2020 NumberFormat\n    'compactDisplay',\n    'currencyDisplay',\n    'currencySign',\n    'notation',\n    'signDisplay',\n    'unit',\n    'unitDisplay',\n    'numberingSystem',\n];\nexport function getFormatter(_a, getNumberFormat, options) {\n    var locale = _a.locale, formats = _a.formats, onError = _a.onError;\n    if (options === void 0) { options = {}; }\n    var format = options.format;\n    var defaults = ((format &&\n        getNamedFormat(formats, 'number', format, onError)) ||\n        {});\n    var filteredOptions = filterProps(options, NUMBER_FORMAT_OPTIONS, defaults);\n    return getNumberFormat(locale, filteredOptions);\n}\nexport function formatNumber(config, getNumberFormat, value, options) {\n    if (options === void 0) { options = {}; }\n    try {\n        return getFormatter(config, getNumberFormat, options).format(value);\n    }\n    catch (e) {\n        config.onError(new IntlFormatError('Error formatting number.', config.locale, e));\n    }\n    return String(value);\n}\nexport function formatNumberToParts(config, getNumberFormat, value, options) {\n    if (options === void 0) { options = {}; }\n    try {\n        return getFormatter(config, getNumberFormat, options).formatToParts(value);\n    }\n    catch (e) {\n        config.onError(new IntlFormatError('Error formatting number.', config.locale, e));\n    }\n    return [];\n}\n","import { __assign } from \"tslib\";\nimport { createFormatters, DEFAULT_INTL_CONFIG } from './utils';\nimport { InvalidConfigError, MissingDataError } from './error';\nimport { formatNumber, formatNumberToParts } from './number';\nimport { formatRelativeTime } from './relativeTime';\nimport { formatDate, formatDateToParts, formatTime, formatTimeToParts, formatDateTimeRange, } from './dateTime';\nimport { formatPlural } from './plural';\nimport { formatMessage } from './message';\nimport { formatList, formatListToParts } from './list';\nimport { formatDisplayName } from './displayName';\nfunction messagesContainString(messages) {\n    var firstMessage = messages ? messages[Object.keys(messages)[0]] : undefined;\n    return typeof firstMessage === 'string';\n}\nfunction verifyConfigMessages(config) {\n    if (config.onWarn &&\n        config.defaultRichTextElements &&\n        messagesContainString(config.messages || {})) {\n        config.onWarn(\"[@formatjs/intl] \\\"defaultRichTextElements\\\" was specified but \\\"message\\\" was not pre-compiled. \\nPlease consider using \\\"@formatjs/cli\\\" to pre-compile your messages for performance.\\nFor more details see https://formatjs.io/docs/getting-started/message-distribution\");\n    }\n}\n/**\n * Create intl object\n * @param config intl config\n * @param cache cache for formatter instances to prevent memory leak\n */\nexport function createIntl(config, cache) {\n    var formatters = createFormatters(cache);\n    var resolvedConfig = __assign(__assign({}, DEFAULT_INTL_CONFIG), config);\n    var locale = resolvedConfig.locale, defaultLocale = resolvedConfig.defaultLocale, onError = resolvedConfig.onError;\n    if (!locale) {\n        if (onError) {\n            onError(new InvalidConfigError(\"\\\"locale\\\" was not configured, using \\\"\".concat(defaultLocale, \"\\\" as fallback. See https://formatjs.io/docs/react-intl/api#intlshape for more details\")));\n        }\n        // Since there's no registered locale data for `locale`, this will\n        // fallback to the `defaultLocale` to make sure things can render.\n        // The `messages` are overridden to the `defaultProps` empty object\n        // to maintain referential equality across re-renders. It's assumed\n        // each <FormattedMessage> contains a `defaultMessage` prop.\n        resolvedConfig.locale = resolvedConfig.defaultLocale || 'en';\n    }\n    else if (!Intl.NumberFormat.supportedLocalesOf(locale).length && onError) {\n        onError(new MissingDataError(\"Missing locale data for locale: \\\"\".concat(locale, \"\\\" in Intl.NumberFormat. Using default locale: \\\"\").concat(defaultLocale, \"\\\" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details\")));\n    }\n    else if (!Intl.DateTimeFormat.supportedLocalesOf(locale).length &&\n        onError) {\n        onError(new MissingDataError(\"Missing locale data for locale: \\\"\".concat(locale, \"\\\" in Intl.DateTimeFormat. Using default locale: \\\"\").concat(defaultLocale, \"\\\" as fallback. See https://formatjs.io/docs/react-intl#runtime-requirements for more details\")));\n    }\n    verifyConfigMessages(resolvedConfig);\n    return __assign(__assign({}, resolvedConfig), { formatters: formatters, formatNumber: formatNumber.bind(null, resolvedConfig, formatters.getNumberFormat), formatNumberToParts: formatNumberToParts.bind(null, resolvedConfig, formatters.getNumberFormat), formatRelativeTime: formatRelativeTime.bind(null, resolvedConfig, formatters.getRelativeTimeFormat), formatDate: formatDate.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatDateToParts: formatDateToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatTime: formatTime.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatDateTimeRange: formatDateTimeRange.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatTimeToParts: formatTimeToParts.bind(null, resolvedConfig, formatters.getDateTimeFormat), formatPlural: formatPlural.bind(null, resolvedConfig, formatters.getPluralRules), \n        // @ts-expect-error TODO: will get to this later\n        formatMessage: formatMessage.bind(null, resolvedConfig, formatters), \n        // @ts-expect-error TODO: will get to this later\n        $t: formatMessage.bind(null, resolvedConfig, formatters), formatList: formatList.bind(null, resolvedConfig, formatters.getListFormat), formatListToParts: formatListToParts.bind(null, resolvedConfig, formatters.getListFormat), formatDisplayName: formatDisplayName.bind(null, resolvedConfig, formatters.getDisplayNames) });\n}\n","/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport { __assign, __extends, __rest, __spreadArray } from \"tslib\";\nimport * as React from 'react';\nimport { Provider } from './injectIntl';\nimport { DEFAULT_INTL_CONFIG, invariantIntlContext, assignUniqueKeysToParts, shallowEqual, } from '../utils';\nimport { formatMessage as coreFormatMessage, createIntl as coreCreateIntl, createIntlCache, } from '@formatjs/intl';\nimport { isFormatXMLElementFn, } from 'intl-messageformat';\nfunction processIntlConfig(config) {\n    return {\n        locale: config.locale,\n        timeZone: config.timeZone,\n        fallbackOnEmptyString: config.fallbackOnEmptyString,\n        formats: config.formats,\n        textComponent: config.textComponent,\n        messages: config.messages,\n        defaultLocale: config.defaultLocale,\n        defaultFormats: config.defaultFormats,\n        onError: config.onError,\n        onWarn: config.onWarn,\n        wrapRichTextChunksInFragment: config.wrapRichTextChunksInFragment,\n        defaultRichTextElements: config.defaultRichTextElements,\n    };\n}\nfunction assignUniqueKeysToFormatXMLElementFnArgument(values) {\n    if (!values) {\n        return values;\n    }\n    return Object.keys(values).reduce(function (acc, k) {\n        var v = values[k];\n        acc[k] = isFormatXMLElementFn(v)\n            ? assignUniqueKeysToParts(v)\n            : v;\n        return acc;\n    }, {});\n}\nvar formatMessage = function (config, formatters, descriptor, rawValues) {\n    var rest = [];\n    for (var _i = 4; _i < arguments.length; _i++) {\n        rest[_i - 4] = arguments[_i];\n    }\n    var values = assignUniqueKeysToFormatXMLElementFnArgument(rawValues);\n    var chunks = coreFormatMessage.apply(void 0, __spreadArray([config,\n        formatters,\n        descriptor,\n        values], rest, false));\n    if (Array.isArray(chunks)) {\n        return React.Children.toArray(chunks);\n    }\n    return chunks;\n};\n/**\n * Create intl object\n * @param config intl config\n * @param cache cache for formatter instances to prevent memory leak\n */\nexport var createIntl = function (_a, cache) {\n    var rawDefaultRichTextElements = _a.defaultRichTextElements, config = __rest(_a, [\"defaultRichTextElements\"]);\n    var defaultRichTextElements = assignUniqueKeysToFormatXMLElementFnArgument(rawDefaultRichTextElements);\n    var coreIntl = coreCreateIntl(__assign(__assign(__assign({}, DEFAULT_INTL_CONFIG), config), { defaultRichTextElements: defaultRichTextElements }), cache);\n    var resolvedConfig = {\n        locale: coreIntl.locale,\n        timeZone: coreIntl.timeZone,\n        fallbackOnEmptyString: coreIntl.fallbackOnEmptyString,\n        formats: coreIntl.formats,\n        defaultLocale: coreIntl.defaultLocale,\n        defaultFormats: coreIntl.defaultFormats,\n        messages: coreIntl.messages,\n        onError: coreIntl.onError,\n        defaultRichTextElements: defaultRichTextElements,\n    };\n    return __assign(__assign({}, coreIntl), { \n        // @ts-expect-error fix this\n        formatMessage: formatMessage.bind(null, resolvedConfig, coreIntl.formatters), \n        // @ts-expect-error fix this\n        $t: formatMessage.bind(null, resolvedConfig, coreIntl.formatters) });\n};\nvar IntlProvider = /** @class */ (function (_super) {\n    __extends(IntlProvider, _super);\n    function IntlProvider() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.cache = createIntlCache();\n        _this.state = {\n            cache: _this.cache,\n            intl: createIntl(processIntlConfig(_this.props), _this.cache),\n            prevConfig: processIntlConfig(_this.props),\n        };\n        return _this;\n    }\n    IntlProvider.getDerivedStateFromProps = function (props, _a) {\n        var prevConfig = _a.prevConfig, cache = _a.cache;\n        var config = processIntlConfig(props);\n        if (!shallowEqual(prevConfig, config)) {\n            return {\n                intl: createIntl(config, cache),\n                prevConfig: config,\n            };\n        }\n        return null;\n    };\n    IntlProvider.prototype.render = function () {\n        invariantIntlContext(this.state.intl);\n        return React.createElement(Provider, { value: this.state.intl }, this.props.children);\n    };\n    IntlProvider.displayName = 'IntlProvider';\n    IntlProvider.defaultProps = DEFAULT_INTL_CONFIG;\n    return IntlProvider;\n}(React.PureComponent));\nexport default IntlProvider;\n"],"names":["setTimeZoneInOptions","opts","timeZone","all","k","__assign","deepMergeOptions","opts1","opts2","keys","deepMergeFormatsAndSetTimeZone","f1","mfFormats","IntlMessageFormat","formatMessage","_a","state","messageDescriptor","values","locale","formats","messages","defaultLocale","defaultFormats","fallbackOnEmptyString","onError","defaultRichTextElements","msgId","defaultMessage","invariant","id","message","TYPE","MissingTranslationError","formatter","e","MessageFormatError","DATE_TIME_FORMAT_OPTIONS","getFormatter","type","getDateTimeFormat","options","format","defaults","getNamedFormat","filteredOptions","filterProps","formatDate","config","_i","value","_b","date","IntlFormatError","formatTime","formatDateTimeRange","from","to","formatDateToParts","formatTimeToParts","DISPLAY_NAMES_OPTONS","formatDisplayName","getDisplayNames","DisplayNames","FormatError","ErrorCode","LIST_FORMAT_OPTIONS","now","generateToken","i","formatList","getListFormat","results","formatListToParts","el","val","ListFormat","richValues_1","serializedValues","v","part","PLURAL_FORMAT_OPTIONS","formatPlural","getPluralRules","RELATIVE_TIME_FORMAT_OPTIONS","getRelativeTimeFormat","formatRelativeTime","unit","RelativeTimeFormat","NUMBER_FORMAT_OPTIONS","getNumberFormat","formatNumber","formatNumberToParts","messagesContainString","firstMessage","verifyConfigMessages","createIntl","cache","formatters","createFormatters","resolvedConfig","DEFAULT_INTL_CONFIG","MissingDataError","InvalidConfigError","processIntlConfig","assignUniqueKeysToFormatXMLElementFnArgument","acc","isFormatXMLElementFn","assignUniqueKeysToParts","descriptor","rawValues","rest","chunks","coreFormatMessage","__spreadArray","React.Children","rawDefaultRichTextElements","__rest","coreIntl","coreCreateIntl","IntlProvider","_super","__extends","_this","createIntlCache","props","prevConfig","shallowEqual","invariantIntlContext","React.createElement","Provider","React.PureComponent"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8]}