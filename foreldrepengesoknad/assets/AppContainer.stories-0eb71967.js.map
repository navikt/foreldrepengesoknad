{"version":3,"file":"AppContainer.stories-0eb71967.js","sources":["../../../../packages/fp-common/src/common/utils/localeUtils.ts","../../src/app/pages/ikkeMyndig/IkkeMyndig.tsx","../../src/app/utils/hooks/useDebounce.ts","../../src/app/steps/uttaksplan/components/vil-du-gå-tilbake-modal/VilDuGåTilbakeModal.tsx","../../src/app/steps/uttaksplan/UttaksplanFormConfig.ts","../../src/app/steps/uttaksplan/UttaksplanFormUtils.ts","../../src/app/steps/uttaksplan/automatisk-justering-form/automatiskJusteringUtils.ts","../../src/app/steps/uttaksplan/automatisk-justering-form/AutomatiskJusteringForm.tsx","../../src/app/steps/uttaksplan/uttaksplanQuestionConfig.ts","../../src/app/steps/uttaksplan/UttaksplanStep.tsx","../../src/app/routes/isAvailable.ts","../../src/app/routes/ForeldrepengesøknadRoutes.tsx","../../src/app/utils/mellomlagringUtils.ts","../../src/app/Foreldrepengesøknad.tsx","../../src/app/errorBoundary/ErrorBoundary.tsx","../../src/app/utils/browserUtils.ts","../../src/app/AppContainer.tsx"],"sourcesContent":["import { LocaleAll } from '@navikt/fp-types';\n\nconst LocaleSessionKey = 'selectedLocale';\n\nexport const getLocaleFromSessionStorage = <T extends LocaleAll>(): T => {\n    return (sessionStorage.getItem(LocaleSessionKey) as T) || 'nb';\n};\n\nexport const setLocaleInSessionStorage = (locale: LocaleAll): void => {\n    sessionStorage.setItem(LocaleSessionKey, locale);\n};\n\nexport const getNynorskLocale = () => {\n    if (Intl.NumberFormat.supportedLocalesOf('no-NN').length > 0) {\n        return 'no-NN';\n    }\n    return 'nn';\n};\n\nexport const getBokmålLocale = () => {\n    if (Intl.NumberFormat.supportedLocalesOf('no-NB').length > 0) {\n        return 'no-NB';\n    }\n    return 'nb';\n};\n\nexport const getLocaleForApi = (locale: string): LocaleAll => {\n    switch (locale) {\n        case 'nn':\n        case 'no-NN':\n            return 'nn';\n        default:\n            return 'nb';\n    }\n};\n","import { intlUtils, links } from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport Feilside from '../feilside/Feilside';\n\ninterface Props {\n    fornavn: string;\n}\n\nconst IkkeMyndig: FunctionComponent<Props> = ({ fornavn }) => {\n    const intl = useIntl();\n\n    return (\n        <Feilside\n            dokumenttittel=\"NAV Foreldrepengesøknad\"\n            ingress={intlUtils(intl, 'velkommen.ingress')}\n            tittel={intlUtils(intl, 'velkommen.tittel')}\n            illustrasjon={{\n                tittel: intlUtils(intl, 'velkommen.ikkeMyndig.tittel', {\n                    navn: fornavn.toLowerCase(),\n                }),\n                tekst: intlUtils(intl, 'velkommen.ikkeMyndig.ingress'),\n                lenke: {\n                    tekst: intlUtils(intl, 'velkommen.ikkeMyndig.boblelenketekst'),\n                    url: links.papirsøknad,\n                },\n            }}\n            skalKunneGåTilbakeTilSøknad={false}\n        />\n    );\n};\n\nexport default IkkeMyndig;\n","import { useState, useEffect } from 'react';\n\nconst useDebounce = (value: any, delay: number) => {\n    const [debouncedValue, setDebouncedValue] = useState(value);\n\n    useEffect(() => {\n        const handler = setTimeout(() => {\n            setDebouncedValue(value);\n        }, delay);\n\n        return () => {\n            clearTimeout(handler);\n        };\n    }, [value, delay]);\n\n    return debouncedValue;\n};\n\nexport default useDebounce;\n","import { bemUtils, Block, intlUtils } from '@navikt/fp-common';\nimport SøknadRoutes from 'app/routes/routes';\nimport { Dispatch, FunctionComponent, SetStateAction } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useNavigate } from 'react-router-dom';\nimport { BodyShort, Button, Heading, Modal } from '@navikt/ds-react';\n\nimport './vilDuGåTilbakeModal.less';\n\ninterface Props {\n    isOpen: boolean;\n    setIsOpen: Dispatch<SetStateAction<boolean>>;\n}\n\nconst VilDuGåTilbakeModal: FunctionComponent<Props> = ({ isOpen, setIsOpen }) => {\n    const intl = useIntl();\n    const bem = bemUtils('vilDuGåTilbakeModal');\n    const navigate = useNavigate();\n\n    return (\n        <Modal\n            className={bem.block}\n            aria-label={'Vil du gå tilbake'}\n            closeButton={false}\n            open={isOpen}\n            onClose={() => setIsOpen(false)}\n        >\n            <Block padBottom=\"l\">\n                <Heading size=\"small\" as=\"h1\">\n                    {intlUtils(intl, 'uttaksplan.vilDuGåTilbakeModal.tittel')}\n                </Heading>\n            </Block>\n            <Block padBottom=\"l\">\n                <BodyShort>{intlUtils(intl, 'uttaksplan.vilDuGåTilbakeModal.intro')}</BodyShort>\n            </Block>\n            <Block padBottom=\"l\">\n                <BodyShort>{intlUtils(intl, 'uttaksplan.vilDuGåTilbakeModal.spørsmål')}</BodyShort>\n            </Block>\n            <div className={bem.element('knapperad')}>\n                <Button\n                    onClick={() => {\n                        setIsOpen(false);\n                        navigate(SøknadRoutes.UTTAKSPLAN_INFO);\n                    }}\n                >\n                    <FormattedMessage id=\"uttaksplan.vilDuGåTilbakeModal.okLabel\" />\n                </Button>\n                <Button variant=\"secondary\" onClick={() => setIsOpen(false)}>\n                    <FormattedMessage id=\"uttaksplan.vilDuGåTilbakeModal.avbrytLabel\" />\n                </Button>\n            </div>\n        </Modal>\n    );\n};\n\nexport default VilDuGåTilbakeModal;\n","import { YesOrNo, getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\n\nexport enum UttaksplanFormField {\n    ønskerAutomatiskJustering = 'ønskerAutomatiskJustering',\n}\n\nexport interface UttaksplanFormData {\n    [UttaksplanFormField.ønskerAutomatiskJustering]: YesOrNo;\n}\n\nexport const UttaksplanFormComponents = getTypedFormComponents<UttaksplanFormField, UttaksplanFormData>();\n","import { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { UttaksplanFormData, UttaksplanFormField } from './UttaksplanFormConfig';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\nimport { convertBooleanOrUndefinedToYesOrNo, convertYesOrNoOrUndefinedToBoolean } from '@navikt/fp-common';\n\nexport const cleanUttaksplanFormData = (\n    values: UttaksplanFormData,\n    visibility: QuestionVisibility<UttaksplanFormField, undefined>,\n): UttaksplanFormData => {\n    const cleanedData: UttaksplanFormData = {\n        ønskerAutomatiskJustering: visibility.isVisible(UttaksplanFormField.ønskerAutomatiskJustering)\n            ? values.ønskerAutomatiskJustering\n            : YesOrNo.UNANSWERED,\n    };\n\n    return cleanedData;\n};\n\nexport const mapUttaksplanFormToState = (values: Partial<UttaksplanFormData>): boolean | undefined => {\n    return convertYesOrNoOrUndefinedToBoolean(values.ønskerAutomatiskJustering);\n};\n\nexport const mapUttaksplanFormValueToState = (value: YesOrNo): boolean | undefined => {\n    return convertYesOrNoOrUndefinedToBoolean(value);\n};\n\nexport const getUttaksplanFormInitialValues = (ønskerAutomatiskJustering: boolean | undefined): UttaksplanFormData => {\n    return {\n        ønskerAutomatiskJustering:\n            ønskerAutomatiskJustering !== undefined\n                ? convertBooleanOrUndefinedToYesOrNo(ønskerAutomatiskJustering)\n                : YesOrNo.UNANSWERED,\n    };\n};\n","import {\n    Barn,\n    BarnType,\n    Forelder,\n    Periode,\n    Situasjon,\n    StønadskontoType,\n    Uttaksdagen,\n    andreAugust2022ReglerGjelder,\n    isUfødtBarn,\n    isUttaksperiode,\n} from '@navikt/fp-common';\nimport dayjs from 'dayjs';\n\nexport const getKanPeriodenRundtFødselJusteres = (\n    periodeRundtFødsel: Periode,\n    termindato: Date | undefined,\n): boolean => {\n    return (\n        termindato !== undefined &&\n        isUttaksperiode(periodeRundtFødsel) &&\n        dayjs(periodeRundtFødsel.tidsperiode.fom).isSame(Uttaksdagen(termindato).denneEllerNeste(), 'day') &&\n        periodeRundtFødsel.forelder === Forelder.farMedmor &&\n        periodeRundtFødsel.konto === StønadskontoType.Fedrekvote &&\n        periodeRundtFødsel.ønskerSamtidigUttak === true &&\n        periodeRundtFødsel.ønskerFlerbarnsdager !== true\n    );\n};\n\nexport const getKanJustereAutomatiskVedFødsel = (\n    perioderMedUttakRundtFødsel: Periode[],\n    termindato: Date | undefined,\n    erFarEllerMedmor: boolean,\n    barn: Barn,\n): boolean => {\n    return (\n        barn.type === BarnType.UFØDT &&\n        erFarEllerMedmor &&\n        perioderMedUttakRundtFødsel.length === 1 &&\n        getKanPeriodenRundtFødselJusteres(perioderMedUttakRundtFødsel[0], termindato)\n    );\n};\n\nexport const getVisAutomatiskJusteringForm = (\n    erFarEllerMedmor: boolean,\n    familiehendelsesdato: Date,\n    situasjon: Situasjon,\n    perioderMedUttakRundtFødsel: Periode[],\n    barn: Barn,\n    termindato: Date | undefined,\n    bareFarHarRett: boolean,\n): boolean => {\n    return (\n        erFarEllerMedmor &&\n        andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n        situasjon === 'fødsel' &&\n        perioderMedUttakRundtFødsel.length !== 0 &&\n        isUfødtBarn(barn) &&\n        termindato !== undefined &&\n        !bareFarHarRett\n    );\n};\n","import { Alert } from '@navikt/ds-react';\nimport { Block, Periode, StønadskontoType, intlUtils, isOverføringsperiode, isUttaksperiode } from '@navikt/fp-common';\nimport { Uttaksdagen } from '@navikt/fp-common/src/common/utils/Uttaksdagen';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport actionCreator from 'app/context/action/actionCreator';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport { UttaksplanFormComponents, UttaksplanFormField } from 'app/steps/uttaksplan/UttaksplanFormConfig';\nimport { mapUttaksplanFormValueToState } from 'app/steps/uttaksplan/UttaksplanFormUtils';\nimport dayjs from 'dayjs';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\ninterface Props {\n    termindato: Date;\n    perioderMedUttakRundtFødsel: Periode[];\n    antallBarn: number;\n    visibility: QuestionVisibility<UttaksplanFormField, undefined>;\n}\nconst AutomatiskJusteringForm: FunctionComponent<Props> = ({\n    termindato,\n    perioderMedUttakRundtFødsel,\n    antallBarn,\n    visibility,\n}) => {\n    const intl = useIntl();\n    const uttaksdagPåEllerEtterTermin = Uttaksdagen(termindato).denneEllerNeste();\n    const { dispatch, state } = useForeldrepengesøknadContext();\n    const svarteJaMenFlerePerioderInnen6Uker =\n        state.brukerSvarteJaPåAutoJustering && perioderMedUttakRundtFødsel.length > 1;\n    const svarteJaMenStarterIkkeLengerPåTermin =\n        state.brukerSvarteJaPåAutoJustering &&\n        perioderMedUttakRundtFødsel.length === 1 &&\n        !dayjs(perioderMedUttakRundtFødsel[0].tidsperiode.fom).isSame(uttaksdagPåEllerEtterTermin, 'day');\n    const svarteJaMenEndretPeriodenPåTermin =\n        state.brukerSvarteJaPåAutoJustering &&\n        perioderMedUttakRundtFødsel.length === 1 &&\n        dayjs(perioderMedUttakRundtFødsel[0].tidsperiode.fom).isSame(uttaksdagPåEllerEtterTermin, 'day') &&\n        ((isUttaksperiode(perioderMedUttakRundtFødsel[0]) &&\n            (perioderMedUttakRundtFødsel[0].konto !== StønadskontoType.Fedrekvote ||\n                !perioderMedUttakRundtFødsel[0].ønskerSamtidigUttak)) ||\n            isOverføringsperiode(perioderMedUttakRundtFødsel[0]));\n    const svarteJaMenEndretPeriodenTilØnskerFlerbarnsdager =\n        state.brukerSvarteJaPåAutoJustering &&\n        perioderMedUttakRundtFødsel.length === 1 &&\n        dayjs(perioderMedUttakRundtFødsel[0].tidsperiode.fom).isSame(uttaksdagPåEllerEtterTermin, 'day') &&\n        isUttaksperiode(perioderMedUttakRundtFødsel[0]) &&\n        perioderMedUttakRundtFødsel[0].konto === StønadskontoType.Fedrekvote &&\n        perioderMedUttakRundtFødsel[0].ønskerFlerbarnsdager === true;\n    let infoTekstId = '';\n    if (svarteJaMenFlerePerioderInnen6Uker) {\n        infoTekstId = 'uttaksplan.automatiskJustering.info.hvisFlerePerioder';\n    }\n    if (svarteJaMenStarterIkkeLengerPåTermin) {\n        infoTekstId = 'uttaksplan.automatiskJustering.info.hvisIkkeLengerStarterPåTermin';\n    }\n\n    if (svarteJaMenEndretPeriodenPåTermin) {\n        infoTekstId = 'uttaksplan.automatiskJustering.info.hvisEndretPeriodePåTermin';\n    }\n    if (svarteJaMenEndretPeriodenTilØnskerFlerbarnsdager) {\n        infoTekstId = 'uttaksplan.automatiskJustering.info.hvisEndretPeriodeTilØnskerFlerbarnsdager';\n    }\n\n    const handleOnChange = (value: string) => {\n        const ønskerJustertUttakVedFødsel = mapUttaksplanFormValueToState(value as YesOrNo);\n        dispatch(actionCreator.setØnskerJustertUttakVedFødsel(ønskerJustertUttakVedFødsel));\n        dispatch(actionCreator.setBrukerSvarteJaPåAutoJustering(ønskerJustertUttakVedFødsel));\n    };\n\n    return (\n        <UttaksplanFormComponents.Form includeButtons={false}>\n            <div style={{ paddingTop: '1rem', paddingBottom: '1rem' }}>\n                {infoTekstId !== '' && (\n                    <Block padBottom=\"l\">\n                        <Alert variant=\"info\">\n                            <FormattedMessage id={infoTekstId} />\n                        </Alert>\n                    </Block>\n                )}\n                <Block visible={visibility.isVisible(UttaksplanFormField.ønskerAutomatiskJustering)} padBottom=\"l\">\n                    <UttaksplanFormComponents.YesOrNoQuestion\n                        name={UttaksplanFormField.ønskerAutomatiskJustering}\n                        legend={intlUtils(intl, 'uttaksplan.automatiskJustering.spørsmål', {\n                            antallBarn,\n                        })}\n                        validate={(value: YesOrNo) => {\n                            if (value === YesOrNo.UNANSWERED) {\n                                return intlUtils(intl, 'uttaksplan.automatiskJustering.svar.påkrevd');\n                            }\n\n                            return undefined;\n                        }}\n                        afterOnChange={(value: string) => handleOnChange(value)}\n                    />\n                </Block>\n            </div>\n        </UttaksplanFormComponents.Form>\n    );\n};\n\nexport default AutomatiskJusteringForm;\n","import { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport { UttaksplanFormData, UttaksplanFormField } from './UttaksplanFormConfig';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\nimport { Periode } from '@navikt/fp-common';\nimport { getKanPeriodenRundtFødselJusteres } from './automatisk-justering-form/automatiskJusteringUtils';\n\nexport interface UttaksplanQuestionPayload extends UttaksplanFormData {\n    termindato: Date | undefined;\n    perioderMedUttakRundtFødsel: Periode[];\n}\nconst includeAutomatiskJusteringSpørsmål = (\n    perioderMedUttakRundtFødsel: Periode[],\n    termindato: Date | undefined,\n): boolean => {\n    if (perioderMedUttakRundtFødsel.length !== 1 || termindato === undefined) {\n        return false;\n    }\n\n    return getKanPeriodenRundtFødselJusteres(perioderMedUttakRundtFødsel[0], termindato);\n};\n\nconst UttaksplanFormConfig: QuestionConfig<UttaksplanQuestionPayload, UttaksplanFormField> = {\n    [UttaksplanFormField.ønskerAutomatiskJustering]: {\n        isIncluded: ({ perioderMedUttakRundtFødsel, termindato }) =>\n            includeAutomatiskJusteringSpørsmål(perioderMedUttakRundtFødsel, termindato),\n        isAnswered: ({ ønskerAutomatiskJustering }) => ønskerAutomatiskJustering !== YesOrNo.UNANSWERED,\n    },\n};\n\nconst uttaksplanQuestionsConfig = Questions<UttaksplanQuestionPayload, UttaksplanFormField>(UttaksplanFormConfig);\n\nexport default uttaksplanQuestionsConfig;\n","import {\n    Block,\n    Dekningsgrad,\n    Forelder,\n    getAktiveArbeidsforhold,\n    getErMorUfør,\n    getFarMedmorErAleneOmOmsorg,\n    getForeldreparSituasjon,\n    getKjønnFromFnr,\n    getMorErAleneOmOmsorg,\n    getMorHarRettPåForeldrepengerINorgeEllerEØS,\n    getNavnPåForeldre,\n    getPerioderMedUttakRundtFødsel,\n    intlUtils,\n    isAnnenForelderOppgitt,\n    isFarEllerMedmor,\n    ISOStringToDate,\n    isUfødtBarn,\n    isUttakAnnenPart,\n    isUttakAvForeldrepengerFørFødsel,\n    isUttaksperiode,\n    Periode,\n    Periodene,\n    SenEndringÅrsak,\n    Step,\n    StepButtonWrapper,\n} from '@navikt/fp-common';\nimport SøknadRoutes from 'app/routes/routes';\nimport useOnValidSubmit from 'app/utils/hooks/useOnValidSubmit';\nimport useAvbrytSøknad from 'app/utils/hooks/useAvbrytSøknad';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport stepConfig, { getPreviousStepHref } from '../stepsConfig';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport { getFamiliehendelsedato, getTermindato } from 'app/utils/barnUtils';\nimport actionCreator from 'app/context/action/actionCreator';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport Api from 'app/api/api';\nimport getStønadskontoParams, {\n    getAntallBarnSomSkalBrukesFraSaksgrunnlagBeggeParter,\n    getTermindatoSomSkalBrukesFraSaksgrunnlagBeggeParter,\n} from 'app/api/getStønadskontoParams';\nimport { getValgtStønadskontoFor80Og100Prosent } from 'app/utils/stønadskontoUtils';\nimport useDebounce from 'app/utils/hooks/useDebounce';\nimport { getPerioderSomSkalSendesInn, storeAppState } from 'app/utils/submitUtils';\nimport { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport useFortsettSøknadSenere from 'app/utils/hooks/useFortsettSøknadSenere';\nimport { getEndringstidspunkt, getMorsSisteDag } from 'app/utils/dateUtils';\nimport { cleanupInvisibleCharsFromTilleggsopplysninger } from 'app/utils/tilleggsopplysningerUtils';\nimport VilDuGåTilbakeModal from './components/vil-du-gå-tilbake-modal/VilDuGåTilbakeModal';\nimport { UttaksplanFormComponents, UttaksplanFormField } from 'app/steps/uttaksplan/UttaksplanFormConfig';\nimport { getUttaksplanFormInitialValues } from './UttaksplanFormUtils';\n\n// import {\n//     getVisAutomatiskJusteringForm,\n//     getKanJustereAutomatiskVedFødsel,\n// } from 'uttaksplan/components/automatisk-justering-form/automatiskJusteringUtils';\nimport { FormikValues } from 'formik';\nimport {\n    getStartdatoFørstePeriodeAnnenPart,\n    mapAnnenPartsEksisterendeSakFromDTO,\n} from 'app/utils/eksisterendeSakUtils';\nimport { RequestStatus } from 'app/types/RequestState';\nimport dayjs from 'dayjs';\nimport { getAntallUkerMinsterett } from '../uttaksplan-info/utils/stønadskontoer';\nimport { sendErrorMessageToSentry } from 'app/api/apiUtils';\nimport useSaveLoadedRoute from 'app/utils/hooks/useSaveLoadedRoute';\nimport { Alert, Button, Loader } from '@navikt/ds-react';\nimport { dateToISOString, YesOrNo } from '@navikt/sif-common-formik-ds/lib';\nimport { Link } from 'react-router-dom';\nimport InfoOmSøknaden from 'app/components/info-eksisterende-sak/InfoOmSøknaden';\nimport { getHarAktivitetskravIPeriodeUtenUttak, Uttaksplan } from '@navikt/uttaksplan';\nimport AttachmentApi from '../../api/attachmentApi';\nimport { finnOgSettInnHull, settInnAnnenPartsUttak } from '@navikt/uttaksplan/src/builder/uttaksplanbuilderUtils';\nimport {\n    getKanJustereAutomatiskVedFødsel,\n    getVisAutomatiskJusteringForm,\n} from './automatisk-justering-form/automatiskJusteringUtils';\nimport { getSamtidigUttaksprosent } from '../../utils/uttaksplanInfoUtils';\nimport AutomatiskJusteringForm from './automatisk-justering-form/AutomatiskJusteringForm';\nimport uttaksplanQuestionsConfig from './uttaksplanQuestionConfig';\n\nconst UttaksplanStep = () => {\n    const intl = useIntl();\n    const søkerinfo = useSøkerinfo();\n    const søknad = useSøknad();\n    const [gåTilbakeIsOpen, setGåTilbakeIsOpen] = useState(false);\n    const [uttaksplanErGyldig, setUttaksplanErGyldig] = useState(true);\n    const [submitIsClicked, setSubmitIsClicked] = useState(false);\n    const { dispatch, state } = useForeldrepengesøknadContext();\n    const [endringstidspunkt, setEndringstidspunkt] = useState(state.endringstidspunkt);\n    const [perioderSomSkalSendesInn, setPerioderSomSkalSendesInn] = useState(state.perioderSomSkalSendesInn);\n    const nextRoute = søknad.erEndringssøknad ? SøknadRoutes.OPPSUMMERING : SøknadRoutes.UTENLANDSOPPHOLD;\n    const { uttaksplanInfo, eksisterendeSak, harUttaksplanBlittSlettet, annenPartsUttakErLagtTilIPlan } = state;\n    const { person, arbeidsforhold } = søkerinfo;\n    const { annenForelder, søker, barn, søkersituasjon, dekningsgrad, erEndringssøknad, tilleggsopplysninger } = søknad;\n    const { erAleneOmOmsorg } = søker;\n    const { situasjon } = søkersituasjon;\n    const { rolle } = søkersituasjon;\n    const { barnFraNesteSak } = state;\n    const debouncedState = useDebounce(state, 3000);\n    const annenForelderKjønn = getKjønnFromFnr(annenForelder);\n    const erDeltUttak = isAnnenForelderOppgitt(annenForelder)\n        ? !!annenForelder.harRettPåForeldrepengerINorge || !!annenForelder.harRettPåForeldrepengerIEØS\n        : false;\n    const erFarEllerMedmor = isFarEllerMedmor(søknad.søkersituasjon.rolle);\n    const morErAleneOmOmsorg = getMorErAleneOmOmsorg(!erFarEllerMedmor, erAleneOmOmsorg, annenForelder);\n    const farMedmorErAleneOmOmsorg = getFarMedmorErAleneOmOmsorg(erFarEllerMedmor, erAleneOmOmsorg, annenForelder);\n    const søkerErAleneOmOmsorg = morErAleneOmOmsorg || farMedmorErAleneOmOmsorg;\n    const forelderVedAleneomsorg = erDeltUttak ? undefined : erFarEllerMedmor ? Forelder.farMedmor : Forelder.mor;\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const familiehendelsesdatoDate = ISOStringToDate(familiehendelsesdato);\n    const erMorUfør = getErMorUfør(annenForelder, erFarEllerMedmor);\n    const navnPåForeldre = getNavnPåForeldre(person, annenForelder, erFarEllerMedmor, intl);\n    const antallBarn = barn.antallBarn;\n    const erFlerbarnssøknad = antallBarn > 1;\n    const morHarRett = getMorHarRettPåForeldrepengerINorgeEllerEØS(rolle, erFarEllerMedmor, annenForelder);\n    const opprinneligPlan = eksisterendeSak?.uttaksplan;\n    const harKomplettUttaksplan = eksisterendeSak ? eksisterendeSak.uttaksplan !== undefined : false;\n    const harMidlertidigOmsorg = false; //TODO søkerHarMidlertidigOmsorg\n    const morsSisteDag = getMorsSisteDag(uttaksplanInfo);\n    const termindato = getTermindato(barn);\n    const annenForelderFnr =\n        isAnnenForelderOppgitt(annenForelder) && !!annenForelder.utenlandskFnr === false\n            ? annenForelder.fnr\n            : undefined;\n    const erAdopsjon = situasjon === 'adopsjon';\n    const annenForelderFnrNesteSak = barnFraNesteSak !== undefined ? barnFraNesteSak.annenForelderFnr : undefined;\n    const førsteBarnFraNesteSakFnr =\n        barnFraNesteSak !== undefined && barnFraNesteSak.fnr !== undefined && barnFraNesteSak.fnr.length > 0\n            ? barnFraNesteSak.fnr[0]\n            : undefined;\n    const familieHendelseDatoNesteSak =\n        barnFraNesteSak !== undefined ? barnFraNesteSak.familiehendelsesdato : undefined;\n    const førsteUttaksdagNesteBarnsSak =\n        barnFraNesteSak !== undefined ? barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n\n    const bareFarMedmorHarRett = !getMorHarRettPåForeldrepengerINorgeEllerEØS(\n        søkersituasjon.rolle,\n        erFarEllerMedmor,\n        annenForelder,\n    );\n\n    const barnFnr = !isUfødtBarn(barn) && barn.fnr !== undefined && barn.fnr.length > 0 ? barn.fnr[0] : undefined;\n    const eksisterendeSakAnnenPartRequestIsSuspended =\n        !søkerErAleneOmOmsorg &&\n        annenForelderFnr !== undefined &&\n        annenForelderFnr !== '' &&\n        (barnFnr !== undefined || familiehendelsesdato !== undefined)\n            ? false\n            : true;\n\n    useSaveLoadedRoute(SøknadRoutes.UTTAKSPLAN);\n\n    const { eksisterendeSakAnnenPartData, eksisterendeSakAnnenPartError, eksisterendeSakAnnenPartRequestStatus } =\n        Api.useGetAnnenPartsVedtak(\n            annenForelderFnr,\n            barnFnr,\n            familiehendelsesdato,\n            eksisterendeSakAnnenPartRequestIsSuspended,\n        );\n\n    const eksisterendeVedtakAnnenPart = useMemo(\n        () =>\n            mapAnnenPartsEksisterendeSakFromDTO(\n                eksisterendeSakAnnenPartData,\n                barn,\n                erFarEllerMedmor,\n                familiehendelsesdato,\n                førsteUttaksdagNesteBarnsSak,\n            ),\n        [eksisterendeSakAnnenPartData, barn, erFarEllerMedmor, familiehendelsesdato, førsteUttaksdagNesteBarnsSak],\n    );\n\n    const saksgrunnlagsTermindato = getTermindatoSomSkalBrukesFraSaksgrunnlagBeggeParter(\n        eksisterendeSak?.grunnlag.termindato,\n        eksisterendeVedtakAnnenPart?.grunnlag.termindato,\n    );\n    const saksgrunnlagsAntallBarn = getAntallBarnSomSkalBrukesFraSaksgrunnlagBeggeParter(\n        erFarEllerMedmor,\n        barn.antallBarn,\n        eksisterendeVedtakAnnenPart?.grunnlag.antallBarn,\n    );\n    useEffect(() => {\n        if (erFarEllerMedmor && søknad.barn.antallBarn !== saksgrunnlagsAntallBarn) {\n            const søknadMedOppdatertAntallBarn = {\n                ...søknad,\n                barn: { ...søknad.barn, antallBarn: saksgrunnlagsAntallBarn },\n            };\n            dispatch(actionCreator.setSøknad(søknadMedOppdatertAntallBarn));\n        }\n    }, [erFarEllerMedmor, saksgrunnlagsAntallBarn, dispatch, søknad]);\n\n    const nesteBarnsSakAnnenPartRequestIsSuspended =\n        annenForelderFnrNesteSak !== undefined &&\n        annenForelderFnrNesteSak !== '' &&\n        (førsteBarnFraNesteSakFnr !== undefined || familieHendelseDatoNesteSak !== undefined) &&\n        (eksisterendeSakAnnenPartRequestIsSuspended || eksisterendeSakAnnenPartRequestStatus === RequestStatus.FINISHED)\n            ? false\n            : true;\n\n    const {\n        eksisterendeSakAnnenPartData: nesteSakAnnenPartData,\n        eksisterendeSakAnnenPartError: nesteSakAnnenPartError,\n        eksisterendeSakAnnenPartRequestStatus: nesteSakAnnenPartRequestStatus,\n    } = Api.useGetAnnenPartsVedtak(\n        annenForelderFnrNesteSak,\n        førsteBarnFraNesteSakFnr,\n        dateToISOString(familieHendelseDatoNesteSak),\n        nesteBarnsSakAnnenPartRequestIsSuspended,\n    );\n\n    const førsteUttaksdagAnnenPart = getStartdatoFørstePeriodeAnnenPart(nesteSakAnnenPartData);\n\n    useEffect(() => {\n        if (\n            førsteUttaksdagAnnenPart !== undefined &&\n            state.barnFraNesteSak !== undefined &&\n            (dayjs(førsteUttaksdagAnnenPart).isBefore(state.barnFraNesteSak.startdatoFørsteStønadsperiode, 'd') ||\n                state.barnFraNesteSak.startdatoFørsteStønadsperiode === undefined)\n        ) {\n            const oppdatertBarnNesteSak = {\n                ...state.barnFraNesteSak,\n                startdatoFørsteStønadsperiode: førsteUttaksdagAnnenPart,\n            };\n            dispatch(actionCreator.setBarnFraNesteSak(oppdatertBarnNesteSak));\n        }\n    }, [førsteUttaksdagNesteBarnsSak, førsteUttaksdagAnnenPart, barnFraNesteSak, dispatch, state.barnFraNesteSak]);\n\n    const harAktivitetskravIPeriodeUtenUttak = getHarAktivitetskravIPeriodeUtenUttak({\n        erDeltUttak,\n        morHarRett,\n        søkerErAleneOmOmsorg,\n    });\n\n    //Legg til annen parts perioder i planen til bruker\n    useEffect(() => {\n        if (\n            eksisterendeSak !== undefined &&\n            opprinneligPlan !== undefined &&\n            eksisterendeVedtakAnnenPart !== undefined &&\n            !annenPartsUttakErLagtTilIPlan\n        ) {\n            //Sett samtidigUttak på søkerens perioder hvis de overlapper med annen parts samtidig uttak:\n            opprinneligPlan.forEach((p) => {\n                if (isUttaksperiode(p)) {\n                    const overlappendePerioderAnnenPart = Periodene(\n                        eksisterendeVedtakAnnenPart.uttaksplan,\n                    ).finnOverlappendePerioder(p);\n\n                    if (\n                        overlappendePerioderAnnenPart.length !== 0 &&\n                        overlappendePerioderAnnenPart.find(\n                            (periode) => isUttakAnnenPart(periode) && periode.ønskerSamtidigUttak === true,\n                        )\n                    ) {\n                        if (!p.ønskerSamtidigUttak) {\n                            p.ønskerSamtidigUttak = true;\n                            p.samtidigUttakProsent = getSamtidigUttaksprosent(p.gradert, p.stillingsprosent);\n                        }\n                    }\n                }\n            });\n\n            const uttaksplanMedAnnenPart = finnOgSettInnHull(\n                settInnAnnenPartsUttak(\n                    opprinneligPlan,\n                    eksisterendeVedtakAnnenPart.uttaksplan,\n                    familiehendelsesdatoDate!,\n                    førsteUttaksdagNesteBarnsSak,\n                    true,\n                ),\n                harAktivitetskravIPeriodeUtenUttak,\n                familiehendelsesdatoDate!,\n                erAdopsjon,\n                bareFarMedmorHarRett,\n                erFarEllerMedmor,\n                førsteUttaksdagNesteBarnsSak,\n            );\n            const eksisterendeSakMedAnnenPartsPlan = {\n                ...eksisterendeSak,\n                uttaksplan: uttaksplanMedAnnenPart,\n            };\n            dispatch(actionCreator.setUttaksplan(uttaksplanMedAnnenPart));\n            dispatch(actionCreator.setEksisterendeSak(eksisterendeSakMedAnnenPartsPlan));\n            dispatch(actionCreator.setAnnenPartsUttakErLagtTilIPlan(true));\n        }\n    }, [\n        eksisterendeVedtakAnnenPart,\n        opprinneligPlan,\n        familiehendelsesdatoDate,\n        harAktivitetskravIPeriodeUtenUttak,\n        erAdopsjon,\n        bareFarMedmorHarRett,\n        erFarEllerMedmor,\n        dispatch,\n        førsteUttaksdagNesteBarnsSak,\n        eksisterendeSak,\n        annenPartsUttakErLagtTilIPlan,\n    ]);\n\n    const onValidSubmitHandler = () => {\n        setSubmitIsClicked(true);\n        const cleanedTilleggsopplysninger = cleanupInvisibleCharsFromTilleggsopplysninger(tilleggsopplysninger);\n        return [\n            actionCreator.setTilleggsopplysninger(cleanedTilleggsopplysninger),\n            actionCreator.setEndringstidspunkt(endringstidspunkt),\n            actionCreator.setPerioderSomSkalSendesInn(perioderSomSkalSendesInn),\n        ];\n    };\n\n    const handleBegrunnelseChange = (årsak: SenEndringÅrsak, begrunnelse: string) => {\n        const ekstraInformasjon = årsak !== SenEndringÅrsak.Ingen ? årsak : undefined;\n        const opplysninger = {\n            ...tilleggsopplysninger,\n            begrunnelseForSenEndring: {\n                ...tilleggsopplysninger.begrunnelseForSenEndring,\n                tekst: begrunnelse,\n                ekstraInformasjon: ekstraInformasjon,\n            },\n        };\n        dispatch(actionCreator.setTilleggsopplysninger(opplysninger));\n    };\n    useEffect(() => {\n        const periodeAngittAvAnnenPart = opprinneligPlan?.find((p) => isUttaksperiode(p) && p.angittAvAnnenPart);\n\n        if (periodeAngittAvAnnenPart && endringstidspunkt === undefined) {\n            const tidspunktForEndring = periodeAngittAvAnnenPart.tidsperiode.fom;\n            dispatch(actionCreator.setEndringstidspunkt(tidspunktForEndring));\n\n            const perioderForÅSendeInn = getPerioderSomSkalSendesInn(\n                søknad.uttaksplan,\n                erEndringssøknad,\n                erFarEllerMedmor,\n                opprinneligPlan,\n                tidspunktForEndring,\n            );\n            setPerioderSomSkalSendesInn(perioderForÅSendeInn);\n            dispatch(actionCreator.setPerioderSomSkalSendesInn(perioderForÅSendeInn));\n        }\n    }, [opprinneligPlan, dispatch, endringstidspunkt, erFarEllerMedmor, søknad.uttaksplan, erEndringssøknad]);\n\n    const { handleSubmit, isSubmitting } = useOnValidSubmit(\n        onValidSubmitHandler,\n        nextRoute,\n        (state: ForeldrepengesøknadContextState) => storeAppState(state),\n    );\n\n    const perioderMedUttakRundtFødsel = getPerioderMedUttakRundtFødsel(\n        søknad.uttaksplan,\n        familiehendelsesdatoDate!,\n        termindato,\n    );\n\n    const visAutomatiskJusteringForm = getVisAutomatiskJusteringForm(\n        erFarEllerMedmor,\n        familiehendelsesdatoDate!,\n        situasjon,\n        perioderMedUttakRundtFødsel,\n        barn,\n        termindato,\n        bareFarMedmorHarRett,\n    );\n\n    const kanJustereAutomatiskVedFødsel = getKanJustereAutomatiskVedFødsel(\n        perioderMedUttakRundtFødsel,\n        termindato,\n        erFarEllerMedmor,\n        barn,\n    );\n\n    const setØnskerJustertUttakVedFødselTilUndefinedHvisUgyldig = () => {\n        if ((visAutomatiskJusteringForm || erEndringssøknad) && !kanJustereAutomatiskVedFødsel) {\n            dispatch(actionCreator.setØnskerJustertUttakVedFødsel(undefined));\n        }\n    };\n\n    const ønskerJustertUttakVedFødselErBesvart = (ønskerAutomatiskJusteringSvar: boolean | undefined) => {\n        return (\n            visAutomatiskJusteringForm && kanJustereAutomatiskVedFødsel && ønskerAutomatiskJusteringSvar !== undefined\n        );\n    };\n\n    const ref = useRef<FormikValues>(null);\n    const clickHandler = (values: any) => {\n        setSubmitIsClicked(true);\n        if (uttaksplanErGyldig && !erTomEndringssøknad) {\n            if (ref.current) {\n                ref.current.handleSubmit();\n            }\n\n            setØnskerJustertUttakVedFødselTilUndefinedHvisUgyldig();\n\n            if (ønskerJustertUttakVedFødselErBesvart(values.ønskerAutomatiskJustering)) {\n                handleSubmit(values);\n            }\n        }\n    };\n\n    const onAvbrytSøknad = useAvbrytSøknad();\n    const onFortsettSøknadSenere = useFortsettSøknadSenere();\n\n    useEffect(() => {\n        Api.storeAppState(debouncedState, person.fnr);\n    }, [person.fnr, debouncedState]);\n\n    const foreldreSituasjon = getForeldreparSituasjon(\n        person.kjønn,\n        annenForelderKjønn,\n        erDeltUttak,\n        morErAleneOmOmsorg,\n        farMedmorErAleneOmOmsorg,\n        rolle,\n    );\n    const kontoRequestIsSuspended =\n        (eksisterendeSakAnnenPartRequestIsSuspended\n            ? false\n            : eksisterendeSakAnnenPartRequestStatus !== RequestStatus.FINISHED) ||\n        (nesteBarnsSakAnnenPartRequestIsSuspended ? false : nesteSakAnnenPartRequestStatus !== RequestStatus.FINISHED);\n\n    const { tilgjengeligeStønadskontoerData: stønadskontoer100, tilgjengeligeStønadskontoerError } =\n        Api.useGetUttakskontoer(\n            getStønadskontoParams(\n                Dekningsgrad.HUNDRE_PROSENT,\n                barn,\n                annenForelder,\n                søkersituasjon,\n                farMedmorErAleneOmOmsorg,\n                morErAleneOmOmsorg,\n                dateToISOString(familieHendelseDatoNesteSak),\n                saksgrunnlagsAntallBarn,\n                saksgrunnlagsTermindato,\n            ),\n            kontoRequestIsSuspended,\n        );\n    const { tilgjengeligeStønadskontoerData: stønadskontoer80 } = Api.useGetUttakskontoer(\n        getStønadskontoParams(\n            Dekningsgrad.ÅTTI_PROSENT,\n            barn,\n            annenForelder,\n            søkersituasjon,\n            farMedmorErAleneOmOmsorg,\n            morErAleneOmOmsorg,\n            dateToISOString(familieHendelseDatoNesteSak),\n            saksgrunnlagsAntallBarn,\n            saksgrunnlagsTermindato,\n        ),\n        kontoRequestIsSuspended,\n    );\n\n    const handleOnPlanChange = (nyPlan: Periode[]) => {\n        setSubmitIsClicked(false);\n        dispatch(actionCreator.setUttaksplan(nyPlan));\n        const tidspunktForEndring = getEndringstidspunkt(opprinneligPlan, nyPlan, erEndringssøknad);\n        setEndringstidspunkt(tidspunktForEndring);\n\n        const perioderForÅSendeInn = getPerioderSomSkalSendesInn(\n            nyPlan,\n            erEndringssøknad,\n            erFarEllerMedmor,\n            opprinneligPlan,\n            tidspunktForEndring,\n        );\n        setPerioderSomSkalSendesInn(perioderForÅSendeInn);\n        dispatch(actionCreator.setPerioderSomSkalSendesInn(perioderForÅSendeInn));\n    };\n\n    useEffect(() => {\n        if (tilgjengeligeStønadskontoerError) {\n            sendErrorMessageToSentry(tilgjengeligeStønadskontoerError);\n            throw new Error(\n                `Vi klarte ikke å hente opp stønadskontoer. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`,\n            );\n        }\n        if (eksisterendeSakAnnenPartError) {\n            sendErrorMessageToSentry(eksisterendeSakAnnenPartError);\n            throw new Error(\n                `Vi klarte ikke å hente informasjon om saken til annen forelder. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`,\n            );\n        }\n\n        if (nesteSakAnnenPartError) {\n            sendErrorMessageToSentry(nesteSakAnnenPartError);\n            throw new Error(\n                `Vi klarte ikke å hente informasjon om saken til annen forelder for neste barn. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`,\n            );\n        }\n    }, [tilgjengeligeStønadskontoerError, eksisterendeSakAnnenPartError, nesteSakAnnenPartError]);\n\n    if (\n        !stønadskontoer100 ||\n        !stønadskontoer80 ||\n        (eksisterendeSakAnnenPartRequestStatus !== RequestStatus.FINISHED &&\n            !eksisterendeSakAnnenPartRequestIsSuspended) ||\n        (nesteSakAnnenPartRequestStatus !== RequestStatus.FINISHED && !nesteBarnsSakAnnenPartRequestIsSuspended)\n    ) {\n        return (\n            <div style={{ textAlign: 'center', padding: '12rem 0' }}>\n                <Loader size=\"2xlarge\" />\n            </div>\n        );\n    }\n\n    const stønadskontoer = getValgtStønadskontoFor80Og100Prosent(stønadskontoer80, stønadskontoer100);\n    const minsterettUkerToTette = getAntallUkerMinsterett(stønadskontoer100.minsteretter.toTette);\n\n    const valgteStønadskontoer =\n        dekningsgrad === Dekningsgrad.HUNDRE_PROSENT ? stønadskontoer[100] : stønadskontoer[80];\n\n    const erTomEndringssøknad =\n        erEndringssøknad && (perioderSomSkalSendesInn === undefined || perioderSomSkalSendesInn.length === 0);\n\n    const handleSlettUttaksplan = () => {\n        const slettetPlanUtenomFpFørFødsel = søknad.uttaksplan.filter((periode) =>\n            isUttakAvForeldrepengerFørFødsel(periode),\n        );\n        dispatch(actionCreator.slettUttaksplan(slettetPlanUtenomFpFørFødsel));\n        dispatch(actionCreator.setUttaksplanSlettet(true));\n    };\n\n    const handleResetUttaksplan = () => {\n        if (state.eksisterendeSak) {\n            dispatch(actionCreator.setUttaksplan(state.eksisterendeSak.uttaksplan));\n            dispatch(actionCreator.setPerioderSomSkalSendesInn([]));\n            setPerioderSomSkalSendesInn([]);\n        }\n    };\n\n    return (\n        <UttaksplanFormComponents.FormikWrapper\n            initialValues={getUttaksplanFormInitialValues(state.søknad.ønskerJustertUttakVedFødsel)}\n            onSubmit={handleSubmit}\n            innerRef={ref}\n            renderForm={({ values }) => {\n                const visibility = uttaksplanQuestionsConfig.getVisbility({\n                    ønskerAutomatiskJustering: values[UttaksplanFormField.ønskerAutomatiskJustering] ?? YesOrNo.NO,\n                    termindato,\n                    perioderMedUttakRundtFødsel,\n                });\n\n                return (\n                    <Step\n                        bannerTitle={intlUtils(intl, 'søknad.pageheading')}\n                        activeStepId=\"uttaksplan\"\n                        pageTitle={intlUtils(intl, 'søknad.uttaksplan')}\n                        onCancel={onAvbrytSøknad}\n                        onContinueLater={onFortsettSøknadSenere}\n                        steps={stepConfig(intl, erEndringssøknad)}\n                    >\n                        <Block padBottom=\"l\">\n                            <InfoOmSøknaden\n                                eksisterendeSak={eksisterendeSak}\n                                erIUttaksplanenSteg={true}\n                                tilgjengeligeStønadskontoer={valgteStønadskontoer}\n                                minsterettUkerToTette={minsterettUkerToTette}\n                            />\n                        </Block>\n                        <Uttaksplan\n                            foreldreSituasjon={foreldreSituasjon}\n                            forelderVedAleneomsorg={forelderVedAleneomsorg}\n                            erDeltUttak={erDeltUttak}\n                            uttaksplan={søknad.uttaksplan}\n                            familiehendelsesdato={familiehendelsesdato}\n                            handleOnPlanChange={handleOnPlanChange}\n                            stønadskontoer={valgteStønadskontoer}\n                            navnPåForeldre={navnPåForeldre}\n                            annenForelder={annenForelder}\n                            arbeidsforhold={getAktiveArbeidsforhold(\n                                arbeidsforhold,\n                                erAdopsjon,\n                                erFarEllerMedmor,\n                                ISOStringToDate(familiehendelsesdato),\n                            )}\n                            erEndringssøknad={erEndringssøknad}\n                            erFarEllerMedmor={erFarEllerMedmor}\n                            erFlerbarnssøknad={erFlerbarnssøknad}\n                            erAleneOmOmsorg={søkerErAleneOmOmsorg}\n                            harMidlertidigOmsorg={harMidlertidigOmsorg}\n                            situasjon={situasjon}\n                            erMorUfør={erMorUfør}\n                            morHarRett={morHarRett}\n                            søkersituasjon={søkersituasjon}\n                            dekningsgrad={dekningsgrad}\n                            antallBarn={antallBarn}\n                            tilleggsopplysninger={tilleggsopplysninger}\n                            setUttaksplanErGyldig={setUttaksplanErGyldig}\n                            handleBegrunnelseChange={handleBegrunnelseChange}\n                            eksisterendeSak={eksisterendeSak}\n                            perioderSomSkalSendesInn={perioderSomSkalSendesInn}\n                            morsSisteDag={morsSisteDag}\n                            harKomplettUttaksplan={harKomplettUttaksplan}\n                            opprinneligPlan={harUttaksplanBlittSlettet ? undefined : opprinneligPlan}\n                            handleSlettUttaksplan={handleSlettUttaksplan}\n                            handleResetUttaksplan={handleResetUttaksplan}\n                            termindato={termindato}\n                            barn={barn}\n                            saveAttachment={AttachmentApi.saveAttachment}\n                            visAutomatiskJusteringForm={visAutomatiskJusteringForm}\n                            perioderMedUttakRundtFødsel={perioderMedUttakRundtFødsel}\n                            barnFraNesteSak={barnFraNesteSak}\n                            familiehendelsesdatoNesteSak={familieHendelseDatoNesteSak}\n                            førsteUttaksdagNesteBarnsSak={førsteUttaksdagNesteBarnsSak}\n                            minsterettUkerToTette={minsterettUkerToTette}\n                        />\n                        {visAutomatiskJusteringForm && (\n                            <Block padBottom=\"l\">\n                                <AutomatiskJusteringForm\n                                    termindato={termindato!}\n                                    perioderMedUttakRundtFødsel={perioderMedUttakRundtFødsel}\n                                    antallBarn={barn.antallBarn}\n                                    visibility={visibility}\n                                />\n                            </Block>\n                        )}\n                        <VilDuGåTilbakeModal isOpen={gåTilbakeIsOpen} setIsOpen={setGåTilbakeIsOpen} />\n                        {!uttaksplanErGyldig && submitIsClicked && (\n                            <Block textAlignCenter={true} padBottom=\"l\">\n                                <Alert variant=\"error\">\n                                    <FormattedMessage id=\"uttaksplan.validering.kanIkkeGåVidere\" />\n                                </Alert>\n                            </Block>\n                        )}\n                        {erTomEndringssøknad && submitIsClicked && (\n                            <Block textAlignCenter={true} padBottom=\"l\">\n                                <Alert variant=\"error\">\n                                    <FormattedMessage id=\"uttaksplan.validering.kanIkkeGåVidereEndringssøknad\" />\n                                </Alert>\n                            </Block>\n                        )}\n                        <Block textAlignCenter={true} padBottom=\"l\">\n                            <StepButtonWrapper>\n                                {!erEndringssøknad && (\n                                    <Button\n                                        variant=\"secondary\"\n                                        as={Link}\n                                        onClick={(event) => {\n                                            event.preventDefault();\n                                            setGåTilbakeIsOpen(true);\n                                        }}\n                                        to={getPreviousStepHref('uttaksplan')}\n                                    >\n                                        <FormattedMessage id=\"backlink.label\" />\n                                    </Button>\n                                )}\n                                <Button\n                                    type=\"submit\"\n                                    onClick={clickHandler}\n                                    disabled={isSubmitting}\n                                    loading={isSubmitting}\n                                >\n                                    {intlUtils(intl, 'søknad.gåVidere')}\n                                </Button>\n                            </StepButtonWrapper>\n                        </Block>\n                    </Step>\n                );\n            }}\n        />\n    );\n};\nexport default UttaksplanStep;\n","import { Søknad } from 'app/context/types/Søknad';\nimport SøknadRoutes from './routes';\nimport { uttaksplanInneholderPerioderUtenKonto } from '@navikt/uttaksplan';\n\nconst isAvailable = (route: SøknadRoutes, søknad: Søknad): boolean => {\n    switch (route) {\n        case SøknadRoutes.SØKERSITUASJON:\n            return søknad.harGodkjentVilkår === true;\n        case SøknadRoutes.OPPSUMMERING:\n            return uttaksplanInneholderPerioderUtenKonto(søknad.uttaksplan) === false && søknad.uttaksplan.length > 0;\n        default:\n            return true;\n    }\n};\n\nexport default isAvailable;\n","import { LocaleNo } from '@navikt/fp-types';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport IkkeMyndig from 'app/pages/ikkeMyndig/IkkeMyndig';\nimport Velkommen from 'app/pages/velkommen/Velkommen';\nimport AnnenForelder from 'app/steps/annen-forelder/AnnenForelder';\nimport Inntektsinformasjon from 'app/steps/inntektsinformasjon/Inntektsinformasjon';\nimport OmBarnet from 'app/steps/om-barnet/OmBarnet';\nimport Oppsummering from 'app/steps/oppsummering/Oppsummering';\nimport Søkersituasjon from 'app/steps/søkersituasjon/Søkersituasjon';\nimport UttaksplanInfo from 'app/steps/uttaksplan-info/UttaksplanInfo';\nimport UttaksplanStep from 'app/steps/uttaksplan/UttaksplanStep';\nimport { FunctionComponent, useEffect, useState } from 'react';\nimport { Route, useNavigate, Navigate, Routes, useLocation } from 'react-router-dom';\nimport SøknadSendt from '../pages/søknadSendt/SøknadSendt';\nimport isAvailable from './isAvailable';\nimport SøknadRoutes from './routes';\nimport UtenlandsoppholdSteg from 'app/steps/utenlandsopphold/UtenlandsoppholdSteg';\nimport TidligereUtenlandsoppholdSteg from 'app/steps/utenlandsoppholdTidligere/TidligereUtenlandsoppholdSteg';\nimport SenereUtenlandsoppholdSteg from 'app/steps/utenlandsoppholdSenere/SenereUtenlandsoppholdSteg';\n\ninterface Props {\n    fornavn: string;\n    locale: LocaleNo;\n    onChangeLocale: (locale: LocaleNo) => void;\n    currentRoute: SøknadRoutes;\n}\n\nconst renderSøknadRoutes = (harGodkjentVilkår: boolean, erEndringssøknad: boolean, søkerErMyndig: boolean) => {\n    if (!harGodkjentVilkår) {\n        return <Route path=\"*\" element={<Navigate to={SøknadRoutes.VELKOMMEN} />} />;\n    }\n\n    if (!søkerErMyndig) {\n        return <Route path=\"*\" element={<Navigate to={SøknadRoutes.IKKE_MYNDIG} />} />;\n    }\n\n    if (erEndringssøknad) {\n        return (\n            <>\n                <Route path={SøknadRoutes.UTTAKSPLAN} element={<UttaksplanStep />} />\n                <Route path={SøknadRoutes.OPPSUMMERING} element={<Oppsummering />} />\n                <Route path={SøknadRoutes.SØKNAD_SENDT} element={<SøknadSendt />} />\n            </>\n        );\n    }\n\n    return (\n        <>\n            <Route path={SøknadRoutes.SØKERSITUASJON} element={<Søkersituasjon />} />\n            <Route path={SøknadRoutes.OM_BARNET} element={<OmBarnet />} />\n            <Route path={SøknadRoutes.ANNEN_FORELDER} element={<AnnenForelder />} />\n            <Route path={SøknadRoutes.UTTAKSPLAN_INFO} element={<UttaksplanInfo />} />\n            <Route path={SøknadRoutes.UTTAKSPLAN} element={<UttaksplanStep />} />\n            <Route path={SøknadRoutes.UTENLANDSOPPHOLD} element={<UtenlandsoppholdSteg />} />\n            <Route path={SøknadRoutes.TIDLIGERE_UTENLANDSOPPHOLD} element={<TidligereUtenlandsoppholdSteg />} />\n            <Route path={SøknadRoutes.SENERE_UTENLANDSOPPHOLD} element={<SenereUtenlandsoppholdSteg />} />\n            <Route path={SøknadRoutes.INNTEKTSINFORMASJON} element={<Inntektsinformasjon />} />\n            <Route path={SøknadRoutes.OPPSUMMERING} element={<Oppsummering />} />\n            <Route path={SøknadRoutes.SØKNAD_SENDT} element={<SøknadSendt />} />\n        </>\n    );\n};\n\nconst ForeldrepengesøknadRoutes: FunctionComponent<Props> = ({ fornavn, locale, onChangeLocale, currentRoute }) => {\n    const { state } = useForeldrepengesøknadContext();\n    const navigate = useNavigate();\n    const location = useLocation();\n    const harGodkjentVilkår = state.søknad.harGodkjentVilkår;\n    const erMyndig = state.søkerinfo.person.erMyndig;\n    const [isFirstTimeLoadingApp, setIsFirstTimeLoadingApp] = useState(true);\n\n    useEffect(() => {\n        if (currentRoute && erMyndig && harGodkjentVilkår && isFirstTimeLoadingApp) {\n            setIsFirstTimeLoadingApp(false);\n            if (isAvailable(currentRoute, state.søknad)) {\n                navigate(currentRoute);\n            } else {\n                if (location.pathname === SøknadRoutes.OPPSUMMERING) {\n                    navigate(SøknadRoutes.UTTAKSPLAN);\n                }\n            }\n        }\n    }, [currentRoute, erMyndig, harGodkjentVilkår, navigate, isFirstTimeLoadingApp, state.søknad, location.pathname]);\n\n    return (\n        <Routes>\n            <Route\n                path={SøknadRoutes.VELKOMMEN}\n                element={\n                    <Velkommen\n                        fornavn={fornavn}\n                        locale={locale}\n                        saker={state.saker}\n                        onChangeLocale={onChangeLocale}\n                        fnr={state.søkerinfo.person.fnr}\n                    />\n                }\n            />\n            <Route path={SøknadRoutes.IKKE_MYNDIG} element={<IkkeMyndig fornavn={state.søkerinfo.person.fornavn} />} />\n\n            {renderSøknadRoutes(harGodkjentVilkår, state.søknad.erEndringssøknad, erMyndig)}\n        </Routes>\n    );\n};\n\nexport default ForeldrepengesøknadRoutes;\n","import { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport SøknadRoutes from 'app/routes/routes';\n\nconst isEndringssøknadRoute = (route: SøknadRoutes): boolean => {\n    switch (route) {\n        case SøknadRoutes.UTTAKSPLAN:\n        case SøknadRoutes.OPPSUMMERING:\n        case SøknadRoutes.SØKNAD_SENDT:\n            return true;\n        default:\n            return false;\n    }\n};\n\nexport const shouldApplyStorage = (storedState: ForeldrepengesøknadContextState): boolean => {\n    if (storedState.søknad && storedState.søknad.erEndringssøknad) {\n        if (!isEndringssøknadRoute(storedState.currentRoute)) {\n            return false;\n        }\n    }\n\n    return storedState.version === 5;\n};\n","import { LocaleNo } from '@navikt/fp-types';\nimport { useEffect } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport Api from './api/api';\nimport { sendErrorMessageToSentry } from './api/apiUtils';\nimport actionCreator from './context/action/actionCreator';\nimport { useForeldrepengesøknadContext } from './context/hooks/useForeldrepengesøknadContext';\nimport ForeldrepengesøknadRoutes from './routes/ForeldrepengesøknadRoutes';\nimport SøknadRoutes from './routes/routes';\nimport mapSøkerinfoDTOToSøkerinfo from './utils/mapSøkerinfoDTO';\nimport { shouldApplyStorage } from './utils/mellomlagringUtils';\nimport { Loader } from '@navikt/ds-react';\n\ninterface Props {\n    locale: LocaleNo;\n    onChangeLocale: any;\n}\n\nconst renderSpinner = () => (\n    <div style={{ textAlign: 'center', padding: '12rem 0' }}>\n        <Loader size=\"2xlarge\" />\n    </div>\n);\n\nconst Foreldrepengesøknad: React.FunctionComponent<Props> = ({ locale, onChangeLocale }) => {\n    const { søkerinfoData, søkerinfoError } = Api.useSøkerinfo();\n    const { sakerData, sakerError } = Api.useGetSaker();\n    const { storageData } = Api.useStoredAppState();\n    const { dispatch, state } = useForeldrepengesøknadContext();\n\n    useEffect(() => {\n        if (storageData) {\n            if (shouldApplyStorage(storageData)) {\n                dispatch(actionCreator.applyStoredState(storageData));\n            }\n        }\n        if (søkerinfoData) {\n            dispatch(actionCreator.setSøkerinfo(mapSøkerinfoDTOToSøkerinfo(søkerinfoData)));\n        }\n\n        if (sakerData) {\n            dispatch(actionCreator.setSaker(sakerData.foreldrepenger));\n        }\n    }, [dispatch, storageData, søkerinfoData, sakerData]);\n\n    useEffect(() => {\n        if (søkerinfoError) {\n            sendErrorMessageToSentry(søkerinfoError);\n            throw new Error(\n                `Vi klarte ikke å hente informasjon om deg. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`,\n            );\n        }\n        if (sakerError) {\n            sendErrorMessageToSentry(sakerError);\n            throw new Error(\n                `Vi klarte ikke å hente informasjon om sakene dine. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`,\n            );\n        }\n    }, [søkerinfoError, sakerError]);\n\n    if (!state.søkerinfo || !sakerData) {\n        return renderSpinner();\n    }\n\n    return (\n        <BrowserRouter>\n            <ForeldrepengesøknadRoutes\n                fornavn={state.søkerinfo.person.fornavn}\n                locale={locale}\n                onChangeLocale={onChangeLocale}\n                currentRoute={storageData ? storageData.currentRoute : SøknadRoutes.VELKOMMEN}\n            />\n        </BrowserRouter>\n    );\n};\n\nexport default Foreldrepengesøknad;\n","import * as Sentry from '@sentry/browser';\nimport Feilside from 'app/pages/feilside/Feilside';\nimport { FOR_MANGE_VEDLEGG_ERROR } from 'app/api/apiUtils';\nimport { Component } from 'react';\nimport { links } from '@navikt/fp-common';\n\ninterface State {\n    hasError: boolean;\n    error: Error | null;\n}\n\nclass ErrorBoundary extends Component<any, State> {\n    constructor(props: unknown) {\n        super(props);\n        this.state = { hasError: false, error: null };\n    }\n\n    componentDidCatch(error: Error | null, errorInfo: any): void {\n        if (error && error.message !== 'window.hasFocus is not a function') {\n            this.setState({ ...this.state, hasError: true, error });\n\n            Sentry.withScope((scope) => {\n                scope.setExtras(errorInfo);\n                Sentry.captureException(error);\n            });\n        }\n    }\n\n    render() {\n        if (this.state.hasError) {\n            const feilPgaForMangeVedlegg =\n                !!this.state.error &&\n                !!this.state.error.message &&\n                this.state.error.message === FOR_MANGE_VEDLEGG_ERROR;\n            const feilsideTittel = feilPgaForMangeVedlegg ? 'Feil: for mange vedlegg' : 'Informasjon om feilen';\n            return (\n                <Feilside\n                    dokumenttittel=\"NAV Foreldrepengesøknad\"\n                    ingress={`${this.state.error?.message}`}\n                    tittel={feilsideTittel}\n                    illustrasjon={{\n                        tittel: 'Hei!',\n                        tekst: 'Noe har gått galt med søknaden.',\n                        lenke: { tekst: 'Her finner du en lenke til brukerstøtte', url: links.brukerstøtte },\n                    }}\n                    skalKunneGåTilbakeTilSøknad={feilPgaForMangeVedlegg}\n                />\n            );\n        }\n\n        return this.props.children;\n    }\n}\nexport default ErrorBoundary;\n","import { detect } from 'detect-browser';\n\nexport const shouldChangeBrowser = () => {\n    const browserInfo = detect();\n    return browserInfo ? browserInfo.name === 'ie' : false;\n};\n","import { useEffect, useState } from 'react';\nimport dayjs from 'dayjs';\nimport { Modal } from '@navikt/ds-react';\nimport { IntlProvider } from '@navikt/fp-ui';\nimport { LocaleNo } from '@navikt/fp-types';\nimport { allCommonMessages, getLocaleFromSessionStorage, setLocaleInSessionStorage } from '@navikt/fp-common';\nimport ForeldrepengesøknadContextProvider from './context/ForeldrepengesøknadContext';\nimport Foreldrepengesøknad from './Foreldrepengesøknad';\nimport ByttBrowserModal from 'app/pages/byttBrowserModal/ByttBrowserModal';\nimport ErrorBoundary from './errorBoundary/ErrorBoundary';\nimport { shouldChangeBrowser } from './utils/browserUtils';\nimport nnMessages from './intl/nn_NO.json';\nimport nbMessages from './intl/nb_NO.json';\n\nconst localeFromSessionStorage = getLocaleFromSessionStorage<LocaleNo>();\n\nconst MESSAGES_GROUPED_BY_LOCALE = {\n    nb: { ...nbMessages, ...allCommonMessages.nb },\n    nn: { ...nnMessages, ...allCommonMessages.nn },\n};\n\ndayjs.locale(localeFromSessionStorage);\n\nconst AppContainer = () => {\n    const [locale, setLocale] = useState<LocaleNo>(localeFromSessionStorage);\n\n    useEffect(() => {\n        if (Modal.setAppElement) {\n            Modal.setAppElement('#app');\n        }\n    });\n\n    return (\n        <ForeldrepengesøknadContextProvider>\n            <ErrorBoundary>\n                <IntlProvider locale={locale} messagesGroupedByLocale={MESSAGES_GROUPED_BY_LOCALE}>\n                    <ByttBrowserModal skalEndreNettleser={shouldChangeBrowser()} />\n                    <Foreldrepengesøknad\n                        locale={locale}\n                        onChangeLocale={(activeLocale: LocaleNo) => {\n                            setLocaleInSessionStorage(activeLocale);\n                            setLocale(activeLocale);\n                        }}\n                    />\n                </IntlProvider>\n            </ErrorBoundary>\n        </ForeldrepengesøknadContextProvider>\n    );\n};\n\nexport default AppContainer;\n"],"names":["LocaleSessionKey","getLocaleFromSessionStorage","setLocaleInSessionStorage","locale","IkkeMyndig","fornavn","intl","useIntl","jsx","Feilside","intlUtils","links","useDebounce","value","delay","debouncedValue","setDebouncedValue","useState","useEffect","handler","VilDuGåTilbakeModal","isOpen","setIsOpen","bem","bemUtils","navigate","useNavigate","jsxs","Modal","Block","Heading","BodyShort","Button","SøknadRoutes","FormattedMessage","UttaksplanFormField","UttaksplanFormComponents","getTypedFormComponents","mapUttaksplanFormValueToState","convertYesOrNoOrUndefinedToBoolean","getUttaksplanFormInitialValues","ønskerAutomatiskJustering","convertBooleanOrUndefinedToYesOrNo","YesOrNo","getKanPeriodenRundtFødselJusteres","periodeRundtFødsel","termindato","isUttaksperiode","dayjs","Uttaksdagen","Forelder","StønadskontoType","getKanJustereAutomatiskVedFødsel","perioderMedUttakRundtFødsel","erFarEllerMedmor","barn","BarnType","getVisAutomatiskJusteringForm","familiehendelsesdato","situasjon","bareFarHarRett","andreAugust2022ReglerGjelder","isUfødtBarn","AutomatiskJusteringForm","antallBarn","visibility","uttaksdagPåEllerEtterTermin","dispatch","state","useForeldrepengesøknadContext","svarteJaMenFlerePerioderInnen6Uker","svarteJaMenStarterIkkeLengerPåTermin","svarteJaMenEndretPeriodenPåTermin","isOverføringsperiode","svarteJaMenEndretPeriodenTilØnskerFlerbarnsdager","infoTekstId","handleOnChange","ønskerJustertUttakVedFødsel","actionCreator","Alert","includeAutomatiskJusteringSpørsmål","UttaksplanFormConfig","uttaksplanQuestionsConfig","Questions","UttaksplanStep","søkerinfo","useSøkerinfo","søknad","useSøknad","gåTilbakeIsOpen","setGåTilbakeIsOpen","uttaksplanErGyldig","setUttaksplanErGyldig","submitIsClicked","setSubmitIsClicked","endringstidspunkt","setEndringstidspunkt","perioderSomSkalSendesInn","setPerioderSomSkalSendesInn","nextRoute","uttaksplanInfo","eksisterendeSak","harUttaksplanBlittSlettet","annenPartsUttakErLagtTilIPlan","person","arbeidsforhold","annenForelder","søker","søkersituasjon","dekningsgrad","erEndringssøknad","tilleggsopplysninger","erAleneOmOmsorg","rolle","barnFraNesteSak","debouncedState","annenForelderKjønn","getKjønnFromFnr","erDeltUttak","isAnnenForelderOppgitt","isFarEllerMedmor","morErAleneOmOmsorg","getMorErAleneOmOmsorg","farMedmorErAleneOmOmsorg","getFarMedmorErAleneOmOmsorg","søkerErAleneOmOmsorg","forelderVedAleneomsorg","getFamiliehendelsedato","familiehendelsesdatoDate","ISOStringToDate","erMorUfør","getErMorUfør","navnPåForeldre","getNavnPåForeldre","erFlerbarnssøknad","morHarRett","getMorHarRettPåForeldrepengerINorgeEllerEØS","opprinneligPlan","harKomplettUttaksplan","harMidlertidigOmsorg","morsSisteDag","getMorsSisteDag","getTermindato","annenForelderFnr","erAdopsjon","annenForelderFnrNesteSak","førsteBarnFraNesteSakFnr","familieHendelseDatoNesteSak","førsteUttaksdagNesteBarnsSak","bareFarMedmorHarRett","barnFnr","eksisterendeSakAnnenPartRequestIsSuspended","useSaveLoadedRoute","eksisterendeSakAnnenPartData","eksisterendeSakAnnenPartError","eksisterendeSakAnnenPartRequestStatus","Api","eksisterendeVedtakAnnenPart","useMemo","mapAnnenPartsEksisterendeSakFromDTO","saksgrunnlagsTermindato","getTermindatoSomSkalBrukesFraSaksgrunnlagBeggeParter","saksgrunnlagsAntallBarn","getAntallBarnSomSkalBrukesFraSaksgrunnlagBeggeParter","søknadMedOppdatertAntallBarn","nesteBarnsSakAnnenPartRequestIsSuspended","RequestStatus","nesteSakAnnenPartData","nesteSakAnnenPartError","nesteSakAnnenPartRequestStatus","dateToISOString","førsteUttaksdagAnnenPart","getStartdatoFørstePeriodeAnnenPart","oppdatertBarnNesteSak","harAktivitetskravIPeriodeUtenUttak","getHarAktivitetskravIPeriodeUtenUttak","p","overlappendePerioderAnnenPart","Periodene","periode","isUttakAnnenPart","getSamtidigUttaksprosent","uttaksplanMedAnnenPart","finnOgSettInnHull","settInnAnnenPartsUttak","eksisterendeSakMedAnnenPartsPlan","onValidSubmitHandler","cleanedTilleggsopplysninger","cleanupInvisibleCharsFromTilleggsopplysninger","handleBegrunnelseChange","årsak","begrunnelse","ekstraInformasjon","SenEndringÅrsak","opplysninger","periodeAngittAvAnnenPart","tidspunktForEndring","perioderForÅSendeInn","getPerioderSomSkalSendesInn","handleSubmit","isSubmitting","useOnValidSubmit","storeAppState","getPerioderMedUttakRundtFødsel","visAutomatiskJusteringForm","kanJustereAutomatiskVedFødsel","setØnskerJustertUttakVedFødselTilUndefinedHvisUgyldig","ønskerJustertUttakVedFødselErBesvart","ønskerAutomatiskJusteringSvar","ref","useRef","clickHandler","values","erTomEndringssøknad","onAvbrytSøknad","useAvbrytSøknad","onFortsettSøknadSenere","useFortsettSøknadSenere","foreldreSituasjon","getForeldreparSituasjon","kontoRequestIsSuspended","stønadskontoer100","tilgjengeligeStønadskontoerError","getStønadskontoParams","Dekningsgrad","stønadskontoer80","handleOnPlanChange","nyPlan","getEndringstidspunkt","sendErrorMessageToSentry","Loader","stønadskontoer","getValgtStønadskontoFor80Og100Prosent","minsterettUkerToTette","getAntallUkerMinsterett","valgteStønadskontoer","handleSlettUttaksplan","slettetPlanUtenomFpFørFødsel","isUttakAvForeldrepengerFørFødsel","handleResetUttaksplan","Step","stepConfig","InfoOmSøknaden","Uttaksplan","getAktiveArbeidsforhold","AttachmentApi","StepButtonWrapper","Link","event","getPreviousStepHref","isAvailable","route","uttaksplanInneholderPerioderUtenKonto","renderSøknadRoutes","harGodkjentVilkår","søkerErMyndig","Fragment","Route","Oppsummering","SøknadSendt","Søkersituasjon","OmBarnet","AnnenForelder","UttaksplanInfo","UtenlandsoppholdSteg","TidligereUtenlandsoppholdSteg","SenereUtenlandsoppholdSteg","Inntektsinformasjon","Navigate","ForeldrepengesøknadRoutes","onChangeLocale","currentRoute","location","useLocation","erMyndig","isFirstTimeLoadingApp","setIsFirstTimeLoadingApp","Routes","Velkommen","isEndringssøknadRoute","shouldApplyStorage","storedState","renderSpinner","Foreldrepengesøknad","søkerinfoData","søkerinfoError","sakerData","sakerError","storageData","mapSøkerinfoDTOToSøkerinfo","BrowserRouter","ErrorBoundary","Component","props","error","errorInfo","Sentry.withScope","scope","Sentry.captureException","feilPgaForMangeVedlegg","FOR_MANGE_VEDLEGG_ERROR","feilsideTittel","_a","shouldChangeBrowser","browserInfo","detect","localeFromSessionStorage","MESSAGES_GROUPED_BY_LOCALE","nbMessages","allCommonMessages","nnMessages","AppContainer","setLocale","ForeldrepengesøknadContextProvider","IntlProvider","ByttBrowserModal","activeLocale","AppContainer$1"],"mappings":"w9JAEMA,GAAmB,iBAEZC,GAA8B,IAC/B,eAAe,QAAQD,EAAgB,GAAW,KAGjDE,GAA6BC,GAA4B,CACnD,eAAA,QAAQH,GAAkBG,CAAM,CACnD,ECDAC,GAAA,CAAA,CAAA,QAAAC,KAAA,CACI,MAAAC,EAAAC,KAEA,OAAAC,EAAA,IACIC,GAAC,CAAA,eAAA,0BACkB,QAAAC,EAAAJ,EAAA,mBAAA,EAC6B,OAAAI,EAAAJ,EAAA,kBAAA,EACF,aAAA,CAC5B,OAAAI,EAAAJ,EAAA,8BAAA,CAC6C,KAAAD,EAAA,YAAA,CACzB,CAAA,EAC7B,MAAAK,EAAAJ,EAAA,8BAAA,EACoD,MAAA,CAC9C,MAAAI,EAAAJ,EAAA,sCAAA,EAC0D,IAAAK,GAAA,WAClD,CACf,EACJ,4BAAA,EAC6B,CAAA,CAGzC,sMC5BA,MAAMC,GAAc,CAACC,EAAYC,IAAkB,CAC/C,KAAM,CAACC,EAAgBC,CAAiB,EAAIC,WAASJ,CAAK,EAE1DK,OAAAA,EAAAA,UAAU,IAAM,CACN,MAAAC,EAAU,WAAW,IAAM,CAC7BH,EAAkBH,CAAK,GACxBC,CAAK,EAER,MAAO,IAAM,CACT,aAAaK,CAAO,CAAA,CACxB,EACD,CAACN,EAAOC,CAAK,CAAC,EAEVC,CACX,ECFA,MAAAK,GAAA,CAAA,CAAA,OAAAC,EAAA,UAAAC,KAAA,CACI,MAAAhB,EAAAC,KACAgB,EAAAC,GAAA,qBAAA,EACAC,EAAAC,KAEA,OAAAC,EAAA,KACIC,GAAC,CAAA,UAAAL,EAAA,MACkB,aAAA,oBACH,YAAA,GACC,KAAAF,EACP,QAAA,IAAAC,EAAA,EAAA,EACwB,SAAA,CAE9Bd,EAAA,IAAAqB,EAAA,CAAA,UAAA,IAAA,SAAArB,EAAAA,IAAAsB,GAAA,CAAA,KAAA,QAAA,GAAA,KAAA,SAAApB,EAAAJ,EAAA,uCAAA,CAAA,CAAA,EAAA,EAIAE,EAAAA,IAAAqB,EAAA,CAAA,UAAA,IAAA,SAAArB,EAAA,IAAAuB,GAAA,CAAA,SAAArB,EAAAJ,EAAA,sCAAA,CAAA,CAAA,CAAA,CAAA,EAGAE,EAAAA,IAAAqB,EAAA,CAAA,UAAA,IAAA,SAAArB,EAAA,IAAAuB,GAAA,CAAA,SAAArB,EAAAJ,EAAA,yCAAA,CAAA,CAAA,CAAA,CAAA,EAGAqB,EAAA,KAAA,MAAA,CAAA,UAAAJ,EAAA,QAAA,WAAA,EAAA,SAAA,CAEIf,EAAA,IAAAwB,GAAC,CAAA,QAAA,IAAA,CAEOV,EAAA,EAAA,EACAG,EAAAQ,EAAA,eAAA,CAAqC,EACzC,SAAAzB,EAAAA,IAAA0B,EAAA,CAAA,GAAA,wCAAA,CAAA,CAE8D,CAAA,EAClE1B,EAAA,IAAAwB,GAAA,CAAA,QAAA,YAAA,QAAA,IAAAV,EAAA,EAAA,EAAA,SAAAd,EAAA,IAAA0B,EAAA,CAAA,GAAA,4CAAA,CAAA,EAAA,CAGA,EAAA,CACJ,CAAA,CAAA,CAGZ,+WCnDY,IAAAC,GAAAA,IACRA,EAAA,0BAA4B,4BADpBA,IAAAA,GAAA,CAAA,CAAA,EAQL,MAAMC,GAA2BC,GAAgE,ECY3FC,GAAiCzB,GACnC0B,GAAmC1B,CAAK,EAGtC2B,GAAkCC,IACpC,CACH,0BACIA,IAA8B,OACxBC,GAAmCD,CAAyB,EAC5DE,GAAQ,UAAA,GCjBbC,GAAoC,CAC7CC,EACAC,IAGIA,IAAe,QACfC,EAAgBF,CAAkB,GAClCG,EAAMH,EAAmB,YAAY,GAAG,EAAE,OAAOI,GAAYH,CAAU,EAAE,gBAAmB,EAAA,KAAK,GACjGD,EAAmB,WAAaK,GAAS,WACzCL,EAAmB,QAAUM,GAAiB,YAC9CN,EAAmB,sBAAwB,IAC3CA,EAAmB,uBAAyB,GAIvCO,GAAmC,CAC5CC,EACAP,EACAQ,EACAC,IAGIA,EAAK,OAASC,GAAS,OACvBF,GACAD,EAA4B,SAAW,GACvCT,GAAkCS,EAA4B,CAAC,EAAGP,CAAU,EAIvEW,GAAgC,CACzCH,EACAI,EACAC,EACAN,EACAE,EACAT,EACAc,IAGIN,GACAO,GAA6BH,CAAoB,GACjDC,IAAc,UACdN,EAA4B,SAAW,GACvCS,GAAYP,CAAI,GAChBT,IAAe,QACf,CAACc,ECxCTG,GAAA,CAAA,CAA2D,WAAAjB,EACvD,4BAAAO,EACA,WAAAW,EACA,WAAAC,CAEJ,IAAA,CACI,MAAA3D,EAAAC,KACA2D,EAAAjB,GAAAH,CAAA,EAAA,gBAAA,EACA,CAAA,SAAAqB,EAAA,MAAAC,CAAA,EAAAC,GAAA,EACAC,EAAAF,EAAA,+BAAAf,EAAA,OAAA,EAEAkB,EAAAH,EAAA,+BAAAf,EAAA,SAAA,GAAA,CAAAL,EAAAK,EAAA,CAAA,EAAA,YAAA,GAAA,EAAA,OAAAa,EAAA,KAAA,EAIAM,EAAAJ,EAAA,+BAAAf,EAAA,SAAA,GAAAL,EAAAK,EAAA,CAAA,EAAA,YAAA,GAAA,EAAA,OAAAa,EAAA,KAAA,IAAAnB,EAAAM,EAAA,CAAA,CAAA,IAAAA,EAAA,CAAA,EAAA,QAAAF,GAAA,YAAA,CAAAE,EAAA,CAAA,EAAA,sBAAAoB,GAAApB,EAAA,CAAA,CAAA,GAQAqB,EAAAN,EAAA,+BAAAf,EAAA,SAAA,GAAAL,EAAAK,EAAA,CAAA,EAAA,YAAA,GAAA,EAAA,OAAAa,EAAA,KAAA,GAAAnB,EAAAM,EAAA,CAAA,CAAA,GAAAA,EAAA,CAAA,EAAA,QAAAF,GAAA,YAAAE,EAAA,CAAA,EAAA,uBAAA,GAOA,IAAAsB,EAAA,GACAL,IACIK,EAAA,yDAEJJ,IACII,EAAA,qEAGJH,IACIG,EAAA,iEAEJD,IACIC,EAAA,gFAGJ,MAAAC,EAAA/D,GAAA,CACI,MAAAgE,EAAAvC,GAAAzB,CAAA,EACAsD,EAAAW,EAAA,+BAAAD,CAAA,CAAA,EACAV,EAAAW,EAAA,iCAAAD,CAAA,CAAA,CAAoF,EAGxF,OAAArE,EAAAA,IAAA4B,GAAA,KAAA,CAAA,eAAA,GAAA,SAAAT,EAAA,KAAA,MAAA,CAAA,MAAA,CAAA,WAAA,OAAA,cAAA,MAAA,EAAA,SAAA,CAGagD,IAAA,IAAAnE,EAAAA,IAAAqB,EAAA,CAAA,UAAA,IAAA,SAAArB,EAAAA,IAAAuE,GAAA,CAAA,QAAA,OAAA,SAAAvE,EAAAA,IAAA0B,EAAA,CAAA,GAAAyC,CAAA,CAAA,CAAA,CAAA,EAAA,EAKGnE,EAAAA,IAAAqB,EAAA,CAAA,QAAAoC,EAAA,UAAA9B,EAAA,yBAAA,EAAA,UAAA,IAAA,SAAA3B,EAAA,IAGA4B,GAAA,gBAA0B,CAAzB,KAAAD,EAAA,0BAC6B,OAAAzB,EAAAJ,EAAA,0CAAA,CACyC,WAAA0D,CAC/D,CAAA,EACH,SAAAnD,GAAA,CAEG,GAAAA,IAAA8B,GAAA,WACI,OAAAjC,EAAAJ,EAAA,6CAAA,CAGG,EACX,cAAAO,GAAA+D,EAAA/D,CAAA,CACsD,CAAA,EAAA,CAE9D,CAAA,CAAA,CAAA,CAAA,CAIhB,wlBCzFA,MAAMmE,GAAqC,CACvC3B,EACAP,IAEIO,EAA4B,SAAW,GAAKP,IAAe,OACpD,GAGJF,GAAkCS,EAA4B,CAAC,EAAGP,CAAU,EAGjFmC,GAAuF,CACzF,CAAC9C,EAAoB,yBAAyB,EAAG,CAC7C,WAAY,CAAC,CAAE,4BAAAkB,EAA6B,WAAAP,CACxC,IAAAkC,GAAmC3B,EAA6BP,CAAU,EAC9E,WAAY,CAAC,CAAE,0BAAAL,CAA0B,IAAMA,IAA8BE,GAAQ,UACzF,CACJ,EAEMuC,GAA4BC,GAA0DF,EAAoB,ECsD1GG,GAAiB,IAAM,CACzB,MAAM9E,EAAOC,KACP8E,EAAYC,KACZC,EAASC,KACT,CAACC,EAAiBC,CAAkB,EAAIzE,WAAS,EAAK,EACtD,CAAC0E,EAAoBC,CAAqB,EAAI3E,WAAS,EAAI,EAC3D,CAAC4E,EAAiBC,CAAkB,EAAI7E,WAAS,EAAK,EACtD,CAAE,SAAAkD,EAAU,MAAAC,CAAM,EAAIC,GAA8B,EACpD,CAAC0B,EAAmBC,CAAoB,EAAI/E,EAAAA,SAASmD,EAAM,iBAAiB,EAC5E,CAAC6B,EAA0BC,CAA2B,EAAIjF,EAAAA,SAASmD,EAAM,wBAAwB,EACjG+B,EAAYZ,EAAO,iBAAmBtD,EAAa,aAAeA,EAAa,iBAC/E,CAAE,eAAAmE,GAAgB,gBAAAC,EAAiB,0BAAAC,GAA2B,8BAAAC,IAAkCnC,EAChG,CAAE,OAAAoC,EAAQ,eAAAC,EAAmB,EAAApB,EAC7B,CAAE,cAAAqB,EAAe,MAAAC,GAAO,KAAApD,EAAM,eAAAqD,EAAgB,aAAAC,GAAc,iBAAAC,EAAkB,qBAAAC,CAAyB,EAAAxB,EACvG,CAAE,gBAAAyB,EAAoB,EAAAL,GACtB,CAAE,UAAAhD,EAAc,EAAAiD,EAChB,CAAE,MAAAK,EAAU,EAAAL,EACZ,CAAE,gBAAAM,CAAoB,EAAA9C,EACtB+C,GAAiBvG,GAAYwD,EAAO,GAAI,EACxCgD,GAAqBC,GAAgBX,CAAa,EAClDY,EAAcC,GAAuBb,CAAa,EAClD,CAAC,CAACA,EAAc,+BAAiC,CAAC,CAACA,EAAc,4BACjE,GACApD,EAAmBkE,GAAiBjC,EAAO,eAAe,KAAK,EAC/DkC,EAAqBC,GAAsB,CAACpE,EAAkB0D,GAAiBN,CAAa,EAC5FiB,GAA2BC,GAA4BtE,EAAkB0D,GAAiBN,CAAa,EACvGmB,GAAuBJ,GAAsBE,GAC7CG,GAAyBR,EAAc,OAAYhE,EAAmBJ,GAAS,UAAYA,GAAS,IACpGQ,EAAuBqE,GAAuBxE,CAAI,EAClDyE,EAA2BC,GAAgBvE,CAAoB,EAC/DwE,GAAYC,GAAazB,EAAepD,CAAgB,EACxD8E,GAAiBC,GAAkB7B,EAAQE,EAAepD,EAAkBhD,CAAI,EAChF0D,GAAaT,EAAK,WAClB+E,GAAoBtE,GAAa,EACjCuE,GAAaC,GAA4CvB,GAAO3D,EAAkBoD,CAAa,EAC/F+B,EAAkBpC,GAAA,YAAAA,EAAiB,WACnCqC,GAAwBrC,EAAkBA,EAAgB,aAAe,OAAY,GACrFsC,GAAuB,GACvBC,GAAeC,GAAgBzC,EAAc,EAC7CtD,EAAagG,GAAcvF,CAAI,EAC/BwF,GACFxB,GAAuBb,CAAa,GAAM,CAACA,EAAc,cACnDA,EAAc,IACd,OACJsC,GAAarF,KAAc,WAC3BsF,GAA2B/B,IAAoB,OAAYA,EAAgB,iBAAmB,OAC9FgC,GACFhC,IAAoB,QAAaA,EAAgB,MAAQ,QAAaA,EAAgB,IAAI,OAAS,EAC7FA,EAAgB,IAAI,CAAC,EACrB,OACJiC,EACFjC,IAAoB,OAAYA,EAAgB,qBAAuB,OACrEkC,EACFlC,IAAoB,OAAYA,EAAgB,8BAAgC,OAE9EmC,GAAuB,CAACb,GAC1B5B,EAAe,MACftD,EACAoD,CAAA,EAGE4C,GAAU,CAACxF,GAAYP,CAAI,GAAKA,EAAK,MAAQ,QAAaA,EAAK,IAAI,OAAS,EAAIA,EAAK,IAAI,CAAC,EAAI,OAC9FgG,GACF,GAAC1B,IACDkB,KAAqB,QACrBA,KAAqB,KACpBO,KAAY,QAAa5F,IAAyB,SAIvD8F,GAAmBvH,EAAa,UAAU,EAE1C,KAAM,CAAE,6BAAAwH,GAA8B,8BAAAC,GAA+B,sCAAAC,IACjEC,EAAI,uBACAb,GACAO,GACA5F,EACA6F,EAAA,EAGFM,EAA8BC,EAAA,QAChC,IACIC,GACIN,GACAlG,EACAD,EACAI,EACA0F,CACJ,EACJ,CAACK,GAA8BlG,EAAMD,EAAkBI,EAAsB0F,CAA4B,CAAA,EAGvGY,GAA0BC,GAC5B5D,GAAA,YAAAA,EAAiB,SAAS,WAC1BwD,GAAA,YAAAA,EAA6B,SAAS,UAAA,EAEpCK,EAA0BC,GAC5B7G,EACAC,EAAK,WACLsG,GAAA,YAAAA,EAA6B,SAAS,UAAA,EAE1C3I,EAAAA,UAAU,IAAM,CACZ,GAAIoC,GAAoBiC,EAAO,KAAK,aAAe2E,EAAyB,CACxE,MAAME,EAA+B,CACjC,GAAG7E,EACH,KAAM,CAAE,GAAGA,EAAO,KAAM,WAAY2E,CAAwB,CAAA,EAEvD/F,EAAAW,EAAc,UAAUsF,CAA4B,CAAC,CAClE,GACD,CAAC9G,EAAkB4G,EAAyB/F,EAAUoB,CAAM,CAAC,EAEhE,MAAM8E,GACF,EAAApB,KAA6B,QAC7BA,KAA6B,KAC5BC,KAA6B,QAAaC,IAAgC,UAC1EI,IAA8CI,KAA0CW,EAAc,WAIrG,CACF,6BAA8BC,GAC9B,8BAA+BC,GAC/B,sCAAuCC,IACvCb,EAAI,uBACJX,GACAC,GACAwB,GAAgBvB,CAA2B,EAC3CkB,EAAA,EAGEM,GAA2BC,GAAmCL,EAAqB,EAEzFrJ,EAAAA,UAAU,IAAM,CACZ,GACIyJ,KAA6B,QAC7BvG,EAAM,kBAAoB,SACzBpB,EAAM2H,EAAwB,EAAE,SAASvG,EAAM,gBAAgB,8BAA+B,GAAG,GAC9FA,EAAM,gBAAgB,gCAAkC,QAC9D,CACE,MAAMyG,EAAwB,CAC1B,GAAGzG,EAAM,gBACT,8BAA+BuG,EAAA,EAE1BxG,EAAAW,EAAc,mBAAmB+F,CAAqB,CAAC,CACpE,CAAA,EACD,CAACzB,EAA8BuB,GAA0BzD,EAAiB/C,EAAUC,EAAM,eAAe,CAAC,EAE7G,MAAM0G,GAAqCC,GAAsC,CAC7E,YAAAzD,EACA,WAAAiB,GACA,qBAAAV,EAAA,CACH,EAGD3G,EAAAA,UAAU,IAAM,CACZ,GACImF,IAAoB,QACpBoC,IAAoB,QACpBoB,IAAgC,QAChC,CAACtD,GACH,CAEkBkC,EAAA,QAASuC,GAAM,CACvB,GAAAjI,EAAgBiI,CAAC,EAAG,CACpB,MAAMC,GAAgCC,GAClCrB,EAA4B,UAAA,EAC9B,yBAAyBmB,CAAC,EAGxBC,GAA8B,SAAW,GACzCA,GAA8B,KACzBE,IAAYC,GAAiBD,EAAO,GAAKA,GAAQ,sBAAwB,EAAA,IAGzEH,EAAE,sBACHA,EAAE,oBAAsB,GACxBA,EAAE,qBAAuBK,GAAyBL,EAAE,QAASA,EAAE,gBAAgB,GAG3F,CAAA,CACH,EAED,MAAMM,EAAyBC,GAC3BC,GACI/C,EACAoB,EAA4B,WAC5B7B,EACAoB,EACA,EACJ,EACA0B,GACA9C,EACAgB,GACAK,GACA/F,EACA8F,CAAA,EAEEqC,EAAmC,CACrC,GAAGpF,EACH,WAAYiF,CAAA,EAEPnH,EAAAW,EAAc,cAAcwG,CAAsB,CAAC,EACnDnH,EAAAW,EAAc,mBAAmB2G,CAAgC,CAAC,EAClEtH,EAAAW,EAAc,iCAAiC,EAAI,CAAC,CACjE,CAAA,EACD,CACC+E,EACApB,EACAT,EACA8C,GACA9B,GACAK,GACA/F,EACAa,EACAiF,EACA/C,EACAE,EAAA,CACH,EAED,MAAMmF,GAAuB,IAAM,CAC/B5F,EAAmB,EAAI,EACjB,MAAA6F,EAA8BC,GAA8C7E,CAAoB,EAC/F,MAAA,CACHjC,EAAc,wBAAwB6G,CAA2B,EACjE7G,EAAc,qBAAqBiB,CAAiB,EACpDjB,EAAc,4BAA4BmB,CAAwB,CAAA,CACtE,EAGE4F,GAA0B,CAACC,EAAwBC,IAAwB,CAC7E,MAAMC,EAAoBF,IAAUG,GAAgB,MAAQH,EAAQ,OAC9DI,GAAe,CACjB,GAAGnF,EACH,yBAA0B,CACtB,GAAGA,EAAqB,yBACxB,MAAOgF,EACP,kBAAAC,CACJ,CAAA,EAEK7H,EAAAW,EAAc,wBAAwBoH,EAAY,CAAC,CAAA,EAEhEhL,EAAAA,UAAU,IAAM,CACN,MAAAiL,EAA2B1D,GAAA,YAAAA,EAAiB,KAAMuC,GAAMjI,EAAgBiI,CAAC,GAAKA,EAAE,mBAElF,GAAAmB,GAA4BpG,IAAsB,OAAW,CACvD,MAAAqG,EAAsBD,EAAyB,YAAY,IACxDhI,EAAAW,EAAc,qBAAqBsH,CAAmB,CAAC,EAEhE,MAAMC,EAAuBC,GACzB/G,EAAO,WACPuB,EACAxD,EACAmF,EACA2D,CAAA,EAEJlG,EAA4BmG,CAAoB,EACvClI,EAAAW,EAAc,4BAA4BuH,CAAoB,CAAC,CAC5E,CAAA,EACD,CAAC5D,EAAiBtE,EAAU4B,EAAmBzC,EAAkBiC,EAAO,WAAYuB,CAAgB,CAAC,EAElG,KAAA,CAAE,aAAAyF,GAAc,aAAAC,EAAA,EAAiBC,GACnCf,GACAvF,EACC/B,GAA2CsI,GAActI,CAAK,CAAA,EAG7Df,EAA8BsJ,GAChCpH,EAAO,WACPyC,EACAlF,CAAA,EAGE8J,GAA6BnJ,GAC/BH,EACA0E,EACArE,GACAN,EACAE,EACAT,EACAuG,EAAA,EAGEwD,GAAgCzJ,GAClCC,EACAP,EACAQ,EACAC,CAAA,EAGEuJ,GAAwD,IAAM,EAC3DF,IAA8B9F,IAAqB,CAAC+F,IAC5C1I,EAAAW,EAAc,+BAA+B,MAAS,CAAC,CACpE,EAGEiI,GAAwCC,GAEtCJ,IAA8BC,IAAiCG,IAAkC,OAInGC,GAAMC,SAAqB,IAAI,EAC/BC,GAAgBC,GAAgB,CAClCtH,EAAmB,EAAI,EACnBH,GAAsB,CAAC0H,KACnBJ,GAAI,SACJA,GAAI,QAAQ,eAGsCH,KAElDC,GAAqCK,EAAO,yBAAyB,GACrEb,GAAaa,CAAM,EAE3B,EAGEE,GAAiBC,KACjBC,GAAyBC,KAE/BvM,EAAAA,UAAU,IAAM,CACR0I,EAAA,cAAczC,GAAgBX,EAAO,GAAG,CAC7C,EAAA,CAACA,EAAO,IAAKW,EAAc,CAAC,EAE/B,MAAMuG,GAAoBC,GACtBnH,EAAO,MACPY,GACAE,EACAG,EACAE,GACAV,EAAA,EAEE2G,IACDrE,GACK,GACAI,KAA0CW,EAAc,YAC7DD,GAA2C,GAAQI,KAAmCH,EAAc,UAEnG,CAAE,gCAAiCuD,GAAmB,iCAAAC,IACxDlE,EAAI,oBACAmE,GACIC,GAAa,eACbzK,EACAmD,EACAE,EACAe,GACAF,EACAiD,GAAgBvB,CAA2B,EAC3Ce,EACAF,EACJ,EACA4D,EAAA,EAEF,CAAE,gCAAiCK,EAAiB,EAAIrE,EAAI,oBAC9DmE,GACIC,GAAa,aACbzK,EACAmD,EACAE,EACAe,GACAF,EACAiD,GAAgBvB,CAA2B,EAC3Ce,EACAF,EACJ,EACA4D,EAAA,EAGEM,GAAsBC,GAAsB,CAC9CrI,EAAmB,EAAK,EACf3B,EAAAW,EAAc,cAAcqJ,CAAM,CAAC,EAC5C,MAAM/B,EAAsBgC,GAAqB3F,EAAiB0F,EAAQrH,CAAgB,EAC1Fd,EAAqBoG,CAAmB,EAExC,MAAMC,EAAuBC,GACzB6B,EACArH,EACAxD,EACAmF,EACA2D,CAAA,EAEJlG,EAA4BmG,CAAoB,EACvClI,EAAAW,EAAc,4BAA4BuH,CAAoB,CAAC,CAAA,EAyB5E,GAtBAnL,EAAAA,UAAU,IAAM,CACZ,GAAI4M,GACA,MAAAO,EAAyBP,EAAgC,EACnD,IAAI,MACN,yHAAA,EAGR,GAAIpE,GACA,MAAA2E,EAAyB3E,EAA6B,EAChD,IAAI,MACN,8IAAA,EAIR,GAAIc,GACA,MAAA6D,EAAyB7D,EAAsB,EACzC,IAAI,MACN,6JAAA,CAGT,EAAA,CAACsD,GAAkCpE,GAA+Bc,EAAsB,CAAC,EAGxF,CAACqD,IACD,CAACI,IACAtE,KAA0CW,EAAc,UACrD,CAACf,IACJkB,KAAmCH,EAAc,UAAY,CAACD,GAE/D,OACK7J,EAAAA,IAAA,MAAA,CAAI,MAAO,CAAE,UAAW,SAAU,QAAS,SACxC,EAAA,SAAAA,EAAA,IAAC8N,GAAO,CAAA,KAAK,UAAU,CAC3B,CAAA,EAIF,MAAAC,GAAiBC,GAAsCP,GAAkBJ,EAAiB,EAC1FY,GAAwBC,GAAwBb,GAAkB,aAAa,OAAO,EAEtFc,GACF9H,KAAiBmH,GAAa,eAAiBO,GAAe,GAAG,EAAIA,GAAe,EAAE,EAEpFlB,GACFvG,IAAqBb,IAA6B,QAAaA,EAAyB,SAAW,GAEjG2I,GAAwB,IAAM,CAC1B,MAAAC,EAA+BtJ,EAAO,WAAW,OAAQ4F,GAC3D2D,GAAiC3D,CAAO,CAAA,EAEnChH,EAAAW,EAAc,gBAAgB+J,CAA4B,CAAC,EAC3D1K,EAAAW,EAAc,qBAAqB,EAAI,CAAC,CAAA,EAG/CiK,GAAwB,IAAM,CAC5B3K,EAAM,kBACND,EAASW,EAAc,cAAcV,EAAM,gBAAgB,UAAU,CAAC,EACtED,EAASW,EAAc,4BAA4B,CAAA,CAAE,CAAC,EACtDoB,EAA4B,CAAE,CAAA,EAClC,EAIA,OAAA1F,EAAA,IAAC4B,GAAyB,cAAzB,CACG,cAAeI,GAA+B4B,EAAM,OAAO,2BAA2B,EACtF,SAAUmI,GACV,SAAUU,GACV,WAAY,CAAC,CAAE,OAAAG,KAAa,CAClB,MAAAnJ,EAAaiB,GAA0B,aAAa,CACtD,0BAA2BkI,EAAOjL,EAAoB,yBAAyB,GAAKQ,GAAQ,GAC5F,WAAAG,EACA,4BAAAO,CAAA,CACH,EAGG,OAAA1B,EAAA,KAACqN,GAAA,CACG,YAAatO,EAAUJ,EAAM,oBAAoB,EACjD,aAAa,aACb,UAAWI,EAAUJ,EAAM,mBAAmB,EAC9C,SAAUgN,GACV,gBAAiBE,GACjB,MAAOyB,GAAW3O,EAAMwG,CAAgB,EAExC,SAAA,CAACtG,EAAAA,IAAAqB,EAAA,CAAM,UAAU,IACb,SAAArB,EAAA,IAAC0O,GAAA,CACG,gBAAA7I,EACA,oBAAqB,GACrB,4BAA6BsI,GAC7B,sBAAAF,EAAA,CAAA,EAER,EACAjO,EAAA,IAAC2O,GAAA,CACG,kBAAAzB,GACA,uBAAA5F,GACA,YAAAR,EACA,WAAY/B,EAAO,WACnB,qBAAA7B,EACA,mBAAAwK,GACA,eAAgBS,GAChB,eAAAvG,GACA,cAAA1B,EACA,eAAgB0I,GACZ3I,GACAuC,GACA1F,EACA2E,GAAgBvE,CAAoB,CACxC,EACA,iBAAAoD,EACA,iBAAAxD,EACA,kBAAAgF,GACA,gBAAiBT,GACjB,qBAAAc,GACA,UAAAhF,GACA,UAAAuE,GACA,WAAAK,GACA,eAAA3B,EACA,aAAAC,GACA,WAAA7C,GACA,qBAAA+C,EACA,sBAAAnB,EACA,wBAAAiG,GACA,gBAAAxF,EACA,yBAAAJ,EACA,aAAA2C,GACA,sBAAAF,GACA,gBAAiBpC,GAA4B,OAAYmC,EACzD,sBAAAmG,GACA,sBAAAG,GACA,WAAAjM,EACA,KAAAS,EACA,eAAgB8L,GAAc,eAC9B,2BAAAzC,GACA,4BAAAvJ,EACA,gBAAA6D,EACA,6BAA8BiC,EAC9B,6BAAAC,EACA,sBAAAqF,EAAA,CACJ,EACC7B,IACGpM,EAAA,IAACqB,EAAM,CAAA,UAAU,IACb,SAAArB,EAAA,IAACuD,GAAA,CACG,WAAAjB,EACA,4BAAAO,EACA,WAAYE,EAAK,WACjB,WAAAU,CAAA,CAAA,EAER,EAEHzD,EAAA,IAAAY,GAAA,CAAoB,OAAQqE,EAAiB,UAAWC,EAAoB,EAC5E,CAACC,GAAsBE,SACnBhE,EAAM,CAAA,gBAAiB,GAAM,UAAU,IACpC,SAACrB,EAAA,IAAAuE,GAAA,CAAM,QAAQ,QACX,SAAAvE,MAAC0B,GAAiB,GAAG,uCAAA,CAAwC,CACjE,CAAA,EACJ,EAEHmL,IAAuBxH,GACpBrF,EAAA,IAACqB,EAAM,CAAA,gBAAiB,GAAM,UAAU,IACpC,SAACrB,EAAA,IAAAuE,GAAA,CAAM,QAAQ,QACX,SAAAvE,MAAC0B,GAAiB,GAAG,qDAAA,CAAsD,CAC/E,CAAA,EACJ,QAEHL,EAAM,CAAA,gBAAiB,GAAM,UAAU,IACpC,gBAACyN,GACI,CAAA,SAAA,CAAA,CAACxI,GACEtG,EAAA,IAACwB,GAAA,CACG,QAAQ,YACR,GAAIuN,GACJ,QAAUC,GAAU,CAChBA,EAAM,eAAe,EACrB9J,EAAmB,EAAI,CAC3B,EACA,GAAI+J,GAAoB,YAAY,EAEpC,SAAAjP,EAAAA,IAAC0B,EAAiB,CAAA,GAAG,gBAAiB,CAAA,CAAA,CAC1C,EAEJ1B,EAAA,IAACwB,GAAA,CACG,KAAK,SACL,QAASmL,GACT,SAAUX,GACV,QAASA,GAER,SAAA9L,EAAUJ,EAAM,iBAAiB,CAAA,CACtC,CAAA,CAAA,CACJ,CACJ,CAAA,CAAA,CAAA,CAAA,CAGZ,CAAA,CAAA,CAGZ,EChpBMoP,GAAc,CAACC,EAAqBpK,IAA4B,CAClE,OAAQoK,EAAO,CACX,KAAK1N,EAAa,eACd,OAAOsD,EAAO,oBAAsB,GACxC,KAAKtD,EAAa,aACd,OAAO2N,GAAsCrK,EAAO,UAAU,IAAM,IAASA,EAAO,WAAW,OAAS,EAC5G,QACW,MAAA,EACf,CACJ,ECcAsK,GAAA,CAAAC,EAAAhJ,EAAAiJ,IACID,EAIAC,EAIAjJ,EACInF,EAAA,KAAAqO,WAAA,CAAA,SAAA,CAEQxP,EAAAA,IAAAyP,EAAA,CAAA,KAAAhO,EAAA,WAAA,QAAAzB,MAAA4E,GAAA,CAAA,CAAA,EAAA,EAAmE5E,EAAAA,IAAAyP,EAAA,CAAA,KAAAhO,EAAA,aAAA,QAAAzB,MAAA0P,GAAA,CAAA,CAAA,EAAA,EACA1P,EAAAA,IAAAyP,EAAA,CAAA,KAAAhO,EAAA,aAAA,QAAAzB,MAAA2P,GAAA,CAAA,CAAA,EAAA,CACD,CAAA,CAAA,EAK9ExO,EAAA,KAAAqO,WAAA,CAAA,SAAA,CAEQxP,EAAAA,IAAAyP,EAAA,CAAA,KAAAhO,EAAA,eAAA,QAAAzB,MAAA4P,GAAA,CAAA,CAAA,EAAA,EAAuE5P,EAAAA,IAAAyP,EAAA,CAAA,KAAAhO,EAAA,UAAA,QAAAzB,MAAA6P,GAAA,CAAA,CAAA,EAAA,EACX7P,EAAAA,IAAAyP,EAAA,CAAA,KAAAhO,EAAA,eAAA,QAAAzB,MAAA8P,GAAA,CAAA,CAAA,EAAA,EACU9P,EAAAA,IAAAyP,EAAA,CAAA,KAAAhO,EAAA,gBAAA,QAAAzB,MAAA+P,GAAA,CAAA,CAAA,EAAA,EACE/P,EAAAA,IAAAyP,EAAA,CAAA,KAAAhO,EAAA,WAAA,QAAAzB,MAAA4E,GAAA,CAAA,CAAA,EAAA,EACL5E,EAAAA,IAAAyP,EAAA,CAAA,KAAAhO,EAAA,iBAAA,QAAAzB,MAAAgQ,GAAA,CAAA,CAAA,EAAA,EACYhQ,EAAAA,IAAAyP,EAAA,CAAA,KAAAhO,EAAA,2BAAA,QAAAzB,MAAAiQ,GAAA,CAAA,CAAA,EAAA,EACmBjQ,EAAAA,IAAAyP,EAAA,CAAA,KAAAhO,EAAA,wBAAA,QAAAzB,MAAAkQ,GAAA,CAAA,CAAA,EAAA,EACNlQ,EAAAA,IAAAyP,EAAA,CAAA,KAAAhO,EAAA,oBAAA,QAAAzB,MAAAmQ,GAAA,CAAA,CAAA,EAAA,EACXnQ,EAAAA,IAAAyP,EAAA,CAAA,KAAAhO,EAAA,aAAA,QAAAzB,MAAA0P,GAAA,CAAA,CAAA,EAAA,EACd1P,EAAAA,IAAAyP,EAAA,CAAA,KAAAhO,EAAA,aAAA,QAAAzB,MAAA2P,GAAA,CAAA,CAAA,EAAA,CACD,CAAA,CAAA,EAzBtE3P,EAAA,IAAAyP,EAAA,CAAA,KAAA,IAAA,QAAAzP,EAAAA,IAAAoQ,GAAA,CAAA,GAAA3O,EAAA,WAAA,CAAA,CAAA,CAAA,EAJAzB,EAAA,IAAAyP,EAAA,CAAA,KAAA,IAAA,QAAAzP,EAAAA,IAAAoQ,GAAA,CAAA,GAAA3O,EAAA,SAAA,CAAA,CAAA,CAAA,EAkCR4O,GAAA,CAAA,CAAA,QAAAxQ,EAAA,OAAAF,EAAA,eAAA2Q,EAAA,aAAAC,CAAA,IAAA,CACI,KAAA,CAAA,MAAA3M,GAAAC,KACA5C,EAAAC,KACAsP,EAAAC,KACAnB,EAAA1L,EAAA,OAAA,kBACA8M,EAAA9M,EAAA,UAAA,OAAA,SACA,CAAA+M,EAAAC,CAAA,EAAAnQ,EAAA,SAAA,EAAA,EAEAC,OAAAA,EAAAA,UAAA,IAAA,CACI6P,GAAAG,GAAApB,GAAAqB,IACIC,EAAA,EAAA,EACA1B,GAAAqB,EAAA3M,EAAA,MAAA,EACI3C,EAAAsP,CAAA,EAEAC,EAAA,WAAA/O,EAAA,cACIR,EAAAQ,EAAA,UAAA,EAGZ,EAAA,CAAA8O,EAAAG,EAAApB,EAAArO,EAAA0P,EAAA/M,EAAA,OAAA4M,EAAA,QAAA,CAAA,EAGJrP,EAAA,KAAA0P,GAAA,CAAA,SAAA,CAEQ7Q,EAAA,IAAAyP,EAAC,CAAA,KAAAhO,EAAA,UACsB,QAAAzB,EAAA,IAEf8Q,GAAC,CAAA,QAAAjR,EACG,OAAAF,EACA,MAAAiE,EAAA,MACa,eAAA0M,EACb,IAAA1M,EAAA,UAAA,OAAA,GAC4B,CAAA,CAChC,CAAA,EAER5D,EAAA,IAAAyP,EAAA,CAAA,KAAAhO,EAAA,YAAA,QAAAzB,EAAA,IAAAJ,GAAA,CAAA,QAAAgE,EAAA,UAAA,OAAA,OAAA,CAAA,EAAA,EACyGyL,GAAAC,EAAA1L,EAAA,OAAA,iBAAA8M,CAAA,CAE3B,CAAA,CAAA,CAG1F,glCCpGA,MAAMK,GAAyB5B,GAAiC,CAC5D,OAAQA,EAAO,CACX,KAAK1N,EAAa,WAClB,KAAKA,EAAa,aAClB,KAAKA,EAAa,aACP,MAAA,GACX,QACW,MAAA,EACf,CACJ,EAEauP,GAAsBC,GAC3BA,EAAY,QAAUA,EAAY,OAAO,kBACrC,CAACF,GAAsBE,EAAY,YAAY,EACxC,GAIRA,EAAY,UAAY,ECHnCC,GAAA,IAAAlR,EAAAA,IAAA,MAAA,CAAA,MAAA,CAAA,UAAA,SAAA,QAAA,SAAA,EAAA,SAAAA,EAAAA,IAAA8N,GAAA,CAAA,KAAA,SAAA,CAAA,CAAA,CAAA,EAMAqD,GAAA,CAAA,CAAA,OAAAxR,EAAA,eAAA2Q,KAAA,CACI,KAAA,CAAA,cAAAc,EAAA,eAAAC,CAAA,EAAAjI,EAAA,aAAA,EACA,CAAA,UAAAkI,EAAA,WAAAC,CAAA,EAAAnI,EAAA,YAAA,EACA,CAAA,YAAAoI,CAAA,EAAApI,EAAA,kBAAA,EACA,CAAA,SAAAzF,EAAA,MAAAC,CAAA,EAAAC,GAAA,EAgCA,OA9BAnD,EAAAA,UAAA,IAAA,CACI8Q,GACIR,GAAAQ,CAAA,GACI7N,EAAAW,EAAA,iBAAAkN,CAAA,CAAA,EAGRJ,GACIzN,EAAAW,EAAA,aAAAmN,GAAAL,CAAA,CAAA,CAAA,EAGJE,GACI3N,EAAAW,EAAA,SAAAgN,EAAA,cAAA,CAAA,CACJ,EAAA,CAAA3N,EAAA6N,EAAAJ,EAAAE,CAAA,CAAA,EAGJ5Q,EAAAA,UAAA,IAAA,CACI,GAAA2Q,EACI,MAAAxD,EAAAwD,CAAA,EACA,IAAA,MAAU,yHACN,EAGR,GAAAE,EACI,MAAA1D,EAAA0D,CAAA,EACA,IAAA,MAAU,iIACN,CAER,EAAA,CAAAF,EAAAE,CAAA,CAAA,EAGJ,CAAA3N,EAAA,WAAA,CAAA0N,EACIJ,GAAA,EAGJlR,MAAA0R,GAAA,CAAA,SAAA1R,EAAA,IAEQqQ,GAAC,CAAA,QAAAzM,EAAA,UAAA,OAAA,QACmC,OAAAjE,EAChC,eAAA2Q,EACA,aAAAkB,EAAAA,EAAA,aAAA/P,EAAA,SACoE,CAAA,CAAA,CAAA,CAIpF,8XC/DA,MAAAkQ,WAAAC,EAAAA,SAAA,CAAkD,YAAAC,EAAA,CAE1C,MAAAA,CAAA,EACA,KAAA,MAAA,CAAA,SAAA,GAAA,MAAA,KAA4C,CAChD,kBAAAC,EAAAC,EAAA,CAGID,GAAAA,EAAA,UAAA,sCACI,KAAA,SAAA,CAAA,GAAA,KAAA,MAAA,SAAA,GAAA,MAAAA,CAAA,CAAA,EAEAE,GAAAC,GAAA,CACIA,EAAA,UAAAF,CAAA,EACAG,GAAAJ,CAAA,CAA6B,CAAA,EAErC,CACJ,QAAA,OAGI,GAAA,KAAA,MAAA,SAAA,CACI,MAAAK,EAAA,CAAA,CAAA,KAAA,MAAA,OAAA,CAAA,CAAA,KAAA,MAAA,MAAA,SAAA,KAAA,MAAA,MAAA,UAAAC,GAIAC,EAAAF,EAAA,0BAAA,wBACA,OAAAnS,EAAA,IACIC,GAAC,CAAA,eAAA,0BACkB,QAAA,IAAAqS,EAAA,KAAA,MAAA,QAAA,YAAAA,EAAA,OAAA,GACsB,OAAAD,EAC7B,aAAA,CACM,OAAA,OACF,MAAA,kCACD,MAAA,CAAA,MAAA,0CAAA,IAAAlS,GAAA,YAAA,CAC4E,EACvF,4BAAAgS,CAC6B,CAAA,CACjC,CAIR,OAAA,KAAA,MAAA,QAAkB,CAE1B,iHClDO,MAAMI,GAAsB,IAAM,CACrC,MAAMC,EAAcC,KACb,OAAAD,EAAcA,EAAY,OAAS,KAAO,EACrD,ECSME,GAA2BjT,GAAsC,EAEjEkT,GAA6B,CAC/B,GAAI,CAAE,GAAGC,GAAY,GAAGC,GAAkB,EAAG,EAC7C,GAAI,CAAE,GAAGC,GAAY,GAAGD,GAAkB,EAAG,CACjD,EAEArQ,EAAM,OAAOkQ,EAAwB,EAErC,MAAMK,GAAe,IAAM,CACvB,KAAM,CAACpT,EAAQqT,CAAS,EAAIvS,WAAmBiS,EAAwB,EAEvEhS,OAAAA,EAAAA,UAAU,IAAM,CACRU,GAAM,eACNA,GAAM,cAAc,MAAM,CAC9B,CACH,EAGGpB,EAAA,IAACiT,IACG,SAACjT,EAAAA,IAAA2R,GAAA,CACG,gBAACuB,GAAa,CAAA,OAAAvT,EAAgB,wBAAyBgT,GACnD,SAAA,CAAC3S,EAAAA,IAAAmT,GAAA,CAAiB,mBAAoBZ,GAAuB,CAAA,CAAA,EAC7DvS,EAAA,IAACmR,GAAA,CACG,OAAAxR,EACA,eAAiByT,GAA2B,CACxC1T,GAA0B0T,CAAY,EACtCJ,EAAUI,CAAY,CAC1B,CAAA,CACJ,CAAA,EACJ,EACJ,CACJ,CAAA,CAER,EAEAC,GAAeN;;;;;;;;;;;;;;;;;;"}