{"version":3,"file":"FormikFileUploader-b07a358a.js","sources":["../../../../packages/fp-common/src/common/types/Skjemanummer.ts","../../src/app/api/attachmentApi.ts","../../src/app/components/formik-file-uploader/FormikFileUploader.tsx"],"sourcesContent":["export enum Skjemanummer {\n    ANNET = 'I000060',\n    BEKREFTELSE_DELTAR_KVALIFISERINGSPROGRAM = 'I000051',\n    BEKREFTELSE_FRA_STUDIESTED = 'I000061',\n    DOKUMENTASJON_AV_TERMIN_ELLER_FØDSEL = 'I000041',\n    DOK_AV_ALENEOMSORG = 'I000110',\n    DOK_BEGRUNNELSE_SØKE_TILBAKE_I_TID = 'I000111',\n    DOK_DELTAKELSE_I_INTRODUKSJONSPROGRAMMET = 'I000112',\n    DOK_INNLEGGELSE = 'I000037',\n    DOK_MILITÆR_SILVIL_TJENESTE = 'I000039',\n    DOK_MORS_UTDANNING_ARBEID_SYKDOM = 'I000038',\n    DOK_OVERFØRING_FOR_SYK = 'I000023',\n    ETTERLØNN_ELLER_SLUTTVEDERLAG = 'I000044',\n    INNTEKTSOPPLYSNINGER_FRILANS_ELLER_SELVSTENDIG = 'I000007',\n    OMSORGSOVERTAKELSESDATO = 'I000042',\n    TERMINBEKREFTELSE = 'I000062',\n    HV_ØVELSE = 'I000116',\n    NAV_TILTAK = 'I000117',\n}\n","import Environment from 'app/Environment';\nimport getAxiosInstance from './apiInterceptor';\nimport { Attachment } from '@navikt/fp-common';\n\nfunction saveAttachment(attachment: Attachment) {\n    const config = {\n        withCredentials: true,\n        timeout: 45 * 1000,\n        headers: {\n            'content-type': 'multipart/form-data',\n        },\n    };\n\n    const formData = new FormData();\n    formData.append('id', attachment.id);\n    formData.append('vedlegg', attachment.file, attachment.filename);\n\n    const url = `${Environment.REST_API_URL}/storage/vedlegg`;\n    return getAxiosInstance().post(url, formData, config);\n}\n\nconst AttachmentApi = { saveAttachment };\n\nexport default AttachmentApi;\n","import { useState } from 'react';\nimport { ArrayHelpers, useFormikContext } from 'formik';\nimport { FormikFileInput } from '@navikt/sif-common-formik-ds/lib';\nimport {\n    Attachment,\n    AttachmentType,\n    Block,\n    deleteAttachment,\n    intlUtils,\n    isAttachmentWithError,\n    mapFilTilVedlegg,\n    PictureScanningGuide,\n    Skjemanummer,\n} from '@navikt/fp-common';\nimport AttachmentApi from 'app/api/attachmentApi';\nimport AttachmentList from '../attachment/AttachmentList';\nimport { IntlShape, useIntl } from 'react-intl';\nimport { BodyShort, ReadMore } from '@navikt/ds-react';\n\nexport type FieldArrayReplaceFn = (index: number, value: any) => void;\nexport type FieldArrayPushFn = (obj: any) => void;\nexport type FieldArrayRemoveFn = (index: number) => undefined;\n\nexport interface Props {\n    attachments: Attachment[];\n    name: any;\n    label: string;\n    attachmentType: AttachmentType;\n    skjemanummer: Skjemanummer;\n    legend: string;\n    onFileInputClick?: () => void;\n}\n\nconst VALID_EXTENSIONS = ['.pdf', '.jpeg', '.jpg', '.png'];\nconst MAX_FIL_STØRRELSE_KB = 16777;\nconst KILOBYTES_IN_BYTE = 0.0009765625;\n\nconst mapFilerTilPendingVedlegg = (\n    filer: File[],\n    attachmentType: AttachmentType,\n    skjemanummer: Skjemanummer,\n): Attachment[] => {\n    return filer.map((fil) => {\n        const nyttVedlegg = mapFilTilVedlegg(fil, attachmentType, skjemanummer);\n        nyttVedlegg.pending = true;\n        return nyttVedlegg;\n    });\n};\n\nconst fileExtensionIsValid = (filename: string): boolean => {\n    const ext = filename.split('.').pop();\n    return VALID_EXTENSIONS.includes(`.${ext!.toLowerCase()}`);\n};\n\nconst fileSizeIsValid = (filesizeInB: number): boolean => {\n    const filesizeInKb = filesizeInB * KILOBYTES_IN_BYTE;\n    return filesizeInKb <= MAX_FIL_STØRRELSE_KB;\n};\n\nconst sjekkVedlegg = (\n    alleNyeVedlegg: Attachment[],\n    setErrors: React.Dispatch<React.SetStateAction<string[]>>,\n    intl: IntlShape,\n): Attachment[] => {\n    return alleNyeVedlegg.filter((vedlegg) => {\n        const erGyldigFiltype = fileExtensionIsValid(vedlegg.filename);\n        if (!erGyldigFiltype) {\n            setErrors((oldState) =>\n                oldState.concat(intlUtils(intl, 'vedlegg.feilmelding.ugyldig.type', { filename: vedlegg.filename })),\n            );\n        }\n        const erGyldigFilstørrelse = fileSizeIsValid(vedlegg.filesize);\n        if (!erGyldigFilstørrelse) {\n            setErrors((oldState) =>\n                oldState.concat(\n                    intlUtils(intl, 'vedlegg.feilmelding.ugyldig.størrelse', {\n                        filename: vedlegg.filename,\n                        maxStørrelse: MAX_FIL_STØRRELSE_KB,\n                    }),\n                ),\n            );\n        }\n        return erGyldigFiltype && erGyldigFilstørrelse;\n    });\n};\n\nconst lastOppVedlegg = (\n    alleNyeVedlegg: Attachment[],\n    replaceFn: FieldArrayReplaceFn,\n    removeFn: FieldArrayRemoveFn,\n    setErrors: React.Dispatch<React.SetStateAction<string[]>>,\n    antallEksisterendeVedlegg: number,\n    intl: IntlShape,\n): void => {\n    alleNyeVedlegg.forEach(async (vedlegg, index) => {\n        try {\n            const response = await AttachmentApi.saveAttachment(vedlegg);\n            vedlegg.pending = false;\n            vedlegg.url = response.headers.location;\n            vedlegg.uploaded = true;\n            vedlegg.uuid = response.data;\n            replaceFn(antallEksisterendeVedlegg + index, vedlegg);\n        } catch (error) {\n            removeFn(antallEksisterendeVedlegg + index);\n            setErrors((oldState) =>\n                oldState.concat(\n                    intlUtils(intl, 'vedlegg.feilmelding.opplasting.feilet', { filename: vedlegg.filename }),\n                ),\n            );\n        }\n    });\n};\n\nconst FormikFileUploader: React.FunctionComponent<Props> = ({\n    attachments,\n    name,\n    onFileInputClick,\n    attachmentType,\n    skjemanummer,\n    label,\n    legend,\n    ...otherProps\n}) => {\n    const intl = useIntl();\n    const { setFieldValue } = useFormikContext<any>();\n    const [errors, setErrors] = useState<string[]>([]);\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <FormikFileInput\n                    legend={legend}\n                    buttonLabel={label}\n                    name={name}\n                    accept={VALID_EXTENSIONS.join(', ')}\n                    onFilesSelect={(files: File[], { push, replace, remove }: ArrayHelpers) => {\n                        const alleNyeVedlegg = mapFilerTilPendingVedlegg(files, attachmentType, skjemanummer);\n                        const alleNyeGyldigeVedlegg = sjekkVedlegg(alleNyeVedlegg, setErrors, intl);\n                        alleNyeGyldigeVedlegg.forEach((nyttVedlegg) => push(nyttVedlegg));\n                        lastOppVedlegg(alleNyeGyldigeVedlegg, replace, remove, setErrors, attachments.length, intl);\n                    }}\n                    onClick={onFileInputClick}\n                    error={\n                        errors.length > 0\n                            ? errors.map((error) => <BodyShort key={error}>{error}</BodyShort>)\n                            : undefined\n                    }\n                    {...otherProps}\n                />\n            </Block>\n            <Block padBottom=\"l\" visible={attachments.length > 0}>\n                <AttachmentList\n                    attachments={attachments.filter((a) => !isAttachmentWithError(a))}\n                    showFileSize={true}\n                    onDelete={(file: Attachment) => {\n                        setFieldValue(name, deleteAttachment(attachments, file));\n                    }}\n                />\n            </Block>\n            <Block>\n                <ReadMore header={intlUtils(intl, 'pictureScanninGuide.apneLabel')}>\n                    <PictureScanningGuide backgroundColor=\"blue\" />\n                </ReadMore>\n            </Block>\n        </>\n    );\n};\n\nexport default FormikFileUploader;\n"],"names":["Skjemanummer","saveAttachment","attachment","config","formData","url","Environment","getAxiosInstance","AttachmentApi","VALID_EXTENSIONS","MAX_FIL_STØRRELSE_KB","KILOBYTES_IN_BYTE","mapFilerTilPendingVedlegg","filer","attachmentType","skjemanummer","fil","nyttVedlegg","mapFilTilVedlegg","fileExtensionIsValid","filename","ext","fileSizeIsValid","filesizeInB","sjekkVedlegg","alleNyeVedlegg","setErrors","intl","vedlegg","erGyldigFiltype","oldState","intlUtils","erGyldigFilstørrelse","lastOppVedlegg","replaceFn","removeFn","antallEksisterendeVedlegg","index","response","FormikFileUploader","attachments","name","onFileInputClick","label","legend","otherProps","useIntl","setFieldValue","useFormikContext","errors","useState","jsxs","Fragment","jsx","Block","FormikFileInput","files","push","replace","remove","alleNyeGyldigeVedlegg","error","BodyShort","AttachmentList","a","isAttachmentWithError","file","deleteAttachment","ReadMore","PictureScanningGuide","FormikFileUploader$1"],"mappings":"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"}