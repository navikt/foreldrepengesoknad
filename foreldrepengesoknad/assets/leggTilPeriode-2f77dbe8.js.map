{"version":3,"file":"leggTilPeriode-2f77dbe8.js","sources":["../../../../packages/fp-common/src/common/types/Arbeidsform.ts","../../../../packages/fp-common/src/common/types/PeriodeHullÅrsak.ts","../../../../packages/uttaksplan/src/builder/uttaksplanbuilderUtils.ts","../../../../packages/uttaksplan/src/builder/leggTilPeriode.ts"],"sourcesContent":["export enum Arbeidsform {\n    arbeidstaker = 'ARBEIDSTAKER',\n    frilans = 'FRILANS',\n    selvstendignæringsdrivende = 'SELVSTENDIG_NÆRINGSDRIVENDE',\n}\n","export enum PeriodeHullÅrsak {\n    fridag = 'fridag',\n    avslåttPeriode = 'avslåttPeriode',\n}\n","import {\n    Periode,\n    PeriodeHull,\n    PeriodeHullÅrsak,\n    PeriodeUtenUttak,\n    Perioden,\n    Periodene,\n    Periodetype,\n    TidsperiodeDate,\n    Tidsperioden,\n    andreAugust2022ReglerGjelder,\n    førsteOktober2021ReglerGjelder,\n    guid,\n    isHull,\n    isPeriodeUtenUttak,\n    isPeriodeUtenUttakUtsettelse,\n    isUtsettelseAnnenPart,\n    isUttaksperiode,\n    isValidTidsperiode,\n    sorterPerioder,\n    tidperiodeOverlapperDato,\n} from '@navikt/fp-common';\nimport dayjs from 'dayjs';\nimport { splittPeriodePåDato } from './leggTilPeriode';\nimport { Uttaksdagen } from '@navikt/fp-common/src/common/utils/Uttaksdagen';\n\nexport const slåSammenLikePerioder = (\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n    annenPartsUttak?: Periode[],\n): Periode[] => {\n    if (perioder.length <= 1) {\n        return perioder;\n    }\n    const nyePerioder: Periode[] = [];\n    let forrigePeriode: Periode | undefined = { ...perioder[0] };\n    perioder.forEach((periode, index) => {\n        if (index === 0) {\n            return;\n        }\n        if (forrigePeriode === undefined) {\n            forrigePeriode = periode;\n            return;\n        }\n        if (\n            Perioden(forrigePeriode).erLik(periode, false, true) &&\n            Perioden(forrigePeriode).erSammenhengende(periode)\n        ) {\n            if (\n                annenPartsUttak &&\n                isUttaksperiode(periode) &&\n                periode.ønskerSamtidigUttak &&\n                isUttaksperiode(forrigePeriode) &&\n                forrigePeriode.ønskerSamtidigUttak\n            ) {\n                const overlappendePerioderAnnenPartForrigePeriode =\n                    Periodene(annenPartsUttak).finnOverlappendePerioder(forrigePeriode);\n                const overlappendePerioderAnnenPart = Periodene(annenPartsUttak).finnOverlappendePerioder(periode);\n\n                if (\n                    (overlappendePerioderAnnenPart.length === 0 &&\n                        overlappendePerioderAnnenPartForrigePeriode.length > 0) ||\n                    (overlappendePerioderAnnenPart.length > 0 &&\n                        overlappendePerioderAnnenPartForrigePeriode.length === 0)\n                ) {\n                    nyePerioder.push(forrigePeriode);\n                    forrigePeriode = periode;\n                    return;\n                }\n            }\n\n            if (\n                (dayjs(forrigePeriode.tidsperiode.tom).isBefore(familiehendelsesdato, 'day') &&\n                    dayjs(periode.tidsperiode.tom).isSameOrAfter(\n                        Uttaksdagen(familiehendelsesdato).denneEllerNeste(),\n                    )) ||\n                (førsteUttaksdagNesteBarnsSak !== undefined &&\n                    dayjs(forrigePeriode.tidsperiode.tom).isBefore(førsteUttaksdagNesteBarnsSak, 'day') &&\n                    dayjs(periode.tidsperiode.fom).isSameOrAfter(\n                        Uttaksdagen(førsteUttaksdagNesteBarnsSak).denneEllerNeste(),\n                        'day',\n                    ))\n            ) {\n                nyePerioder.push(forrigePeriode);\n                forrigePeriode = periode;\n                return;\n            }\n\n            const nyTidsperiode = {\n                fom: forrigePeriode.tidsperiode.fom,\n                tom: periode.tidsperiode.tom,\n            };\n\n            forrigePeriode.tidsperiode = { ...nyTidsperiode };\n            return;\n        } else {\n            nyePerioder.push(forrigePeriode);\n        }\n        forrigePeriode = periode;\n    });\n    nyePerioder.push(forrigePeriode);\n\n    return nyePerioder;\n};\n\nconst getSplittetPeriodeOmNødvendig = (\n    nyHullPeriode: PeriodeHull | PeriodeUtenUttak,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n): Array<PeriodeHull | PeriodeUtenUttak> => {\n    if (\n        førsteUttaksdagNesteBarnsSak !== undefined &&\n        tidperiodeOverlapperDato(nyHullPeriode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n    ) {\n        return splittPeriodePåDato(nyHullPeriode, førsteUttaksdagNesteBarnsSak) as Array<\n            PeriodeHull | PeriodeUtenUttak\n        >;\n    }\n    return [nyHullPeriode];\n};\n\nexport const getPeriodeHullEllerPeriodeUtenUttak = (\n    tidsperiode: TidsperiodeDate,\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    familiehendelsesdato: Date,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n    årsak: PeriodeHullÅrsak = PeriodeHullÅrsak.fridag,\n): Array<PeriodeHull | PeriodeUtenUttak> => {\n    const skalLeggeInnPerioderUtenUttak = førsteOktober2021ReglerGjelder(familiehendelsesdato);\n\n    if (skalLeggeInnPerioderUtenUttak) {\n        const ANTALL_UTTAKSDAGER_SEKS_UKER = 30;\n        const førsteUttaksdagFamiliehendelsesdato = Uttaksdagen(familiehendelsesdato).denneEllerNeste();\n        const førsteUttaksdagEtterSeksUker = Uttaksdagen(førsteUttaksdagFamiliehendelsesdato).leggTil(\n            ANTALL_UTTAKSDAGER_SEKS_UKER,\n        );\n        const tidsperiodeErInnenFørsteSeksUker =\n            Tidsperioden(tidsperiode).erInnenforFørsteSeksUker(familiehendelsesdato);\n\n        const farMedmorBeholderDagerIkkeTattUtDeFørsteSeksUkene =\n            dayjs(tidsperiode.fom).isBefore(førsteUttaksdagEtterSeksUker, 'day') &&\n            !erAdopsjon &&\n            ((bareFarHarRett && førsteOktober2021ReglerGjelder(familiehendelsesdato)) ||\n                (erFarEllerMedmor && andreAugust2022ReglerGjelder(familiehendelsesdato)));\n\n        if (harAktivitetskravIPeriodeUtenUttak && !farMedmorBeholderDagerIkkeTattUtDeFørsteSeksUkene) {\n            return getSplittetPeriodeOmNødvendig(getPeriodeHull(tidsperiode, årsak), førsteUttaksdagNesteBarnsSak);\n        }\n\n        if (dayjs(tidsperiode.fom).isBefore(familiehendelsesdato, 'day')) {\n            return getSplittetPeriodeOmNødvendig(getNyPeriodeUtenUttak(tidsperiode), førsteUttaksdagNesteBarnsSak);\n        }\n\n        if (tidsperiodeErInnenFørsteSeksUker && !erAdopsjon) {\n            if (dayjs(tidsperiode.tom).isBefore(førsteUttaksdagEtterSeksUker, 'day')) {\n                if (\n                    (bareFarHarRett && førsteOktober2021ReglerGjelder(familiehendelsesdato)) ||\n                    (erFarEllerMedmor && andreAugust2022ReglerGjelder(familiehendelsesdato))\n                ) {\n                    return [getNyPeriodeUtenUttak(tidsperiode)];\n                }\n                return [getPeriodeHull(tidsperiode, årsak)];\n            }\n\n            const antallDagerFraFomTilFørsteUttaksdagSeksUker =\n                Tidsperioden({ fom: tidsperiode.fom, tom: førsteUttaksdagEtterSeksUker }).getAntallUttaksdager() - 2;\n\n            const nyPeriodeUtenUttakTidsperiodeLengde =\n                Tidsperioden(tidsperiode).getAntallUttaksdager() - antallDagerFraFomTilFørsteUttaksdagSeksUker;\n\n            const førsteSeksUkerTidsperiode: TidsperiodeDate = {\n                fom: tidsperiode.fom,\n                tom: Uttaksdagen(førsteUttaksdagEtterSeksUker).leggTil(-1),\n            };\n\n            const etterFørsteSeksUkerTidsperiode: TidsperiodeDate = {\n                fom: førsteUttaksdagEtterSeksUker,\n                tom: Uttaksdagen(førsteUttaksdagEtterSeksUker).leggTil(nyPeriodeUtenUttakTidsperiodeLengde - 2),\n            };\n\n            if (\n                (bareFarHarRett && førsteOktober2021ReglerGjelder(familiehendelsesdato)) ||\n                (erFarEllerMedmor && andreAugust2022ReglerGjelder(familiehendelsesdato))\n            ) {\n                if (erFarEllerMedmor && !bareFarHarRett) {\n                    return [getNyPeriodeUtenUttak(tidsperiode)];\n                }\n\n                const periodeUtenUttak = getNyPeriodeUtenUttak(førsteSeksUkerTidsperiode);\n                const periodeHull = getPeriodeHull(etterFørsteSeksUkerTidsperiode, årsak);\n                return [periodeUtenUttak, periodeHull];\n            }\n\n            const periodeHull = getPeriodeHull(førsteSeksUkerTidsperiode, årsak);\n            const periodeUtenUttak = getNyPeriodeUtenUttak(etterFørsteSeksUkerTidsperiode);\n\n            return [periodeHull, periodeUtenUttak];\n        }\n\n        return getSplittetPeriodeOmNødvendig(getNyPeriodeUtenUttak(tidsperiode), førsteUttaksdagNesteBarnsSak);\n    }\n\n    return getSplittetPeriodeOmNødvendig(getPeriodeHull(tidsperiode, årsak), førsteUttaksdagNesteBarnsSak);\n};\n\nexport const getPeriodeHull = (tidsperiode: TidsperiodeDate, årsak?: PeriodeHullÅrsak): PeriodeHull => ({\n    id: guid(),\n    type: Periodetype.Hull,\n    tidsperiode,\n    årsak,\n});\n\nexport const getNyPeriodeUtenUttak = (tidsperiode: TidsperiodeDate): PeriodeUtenUttak => ({\n    id: guid(),\n    type: Periodetype.PeriodeUtenUttak,\n    tidsperiode,\n});\n\nexport const getTidsperiodeMellomPerioder = (\n    tidsperiode1: TidsperiodeDate,\n    tidsperiode2: TidsperiodeDate,\n): TidsperiodeDate | undefined => {\n    const tidsperiodeMellomPerioder: TidsperiodeDate = {\n        fom: Uttaksdagen(tidsperiode1.tom).neste(),\n        tom: Uttaksdagen(tidsperiode2.fom).forrige(),\n    };\n\n    const antallDagerIMellomrom = Tidsperioden(tidsperiodeMellomPerioder).getAntallUttaksdager();\n\n    if (isValidTidsperiode(tidsperiodeMellomPerioder) && antallDagerIMellomrom > 0) {\n        return tidsperiodeMellomPerioder;\n    }\n\n    return undefined;\n};\n\nexport const fjernUnødvendigeHull = (perioder: Periode[]) => {\n    return perioder.reduce((res, periode, index) => {\n        if (index === 0) {\n            if (isPeriodeUtenUttak(periode)) {\n                return res;\n            }\n        }\n\n        if (index === perioder.length - 1) {\n            if (isHull(periode) || isPeriodeUtenUttak(periode)) {\n                return res;\n            }\n\n            res.push(periode);\n            return res;\n        }\n\n        res.push(periode);\n        return res;\n    }, [] as Periode[]);\n};\n\nexport const finnOgSettInnHull = (\n    perioder: Periode[],\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    familiehendelsesdato: Date,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n) => {\n    if (perioder.length === 0) {\n        return perioder;\n    }\n\n    const result = perioder.reduce((res, periode, index) => {\n        if (index === 0 && erFarEllerMedmor) {\n            const førsteUttaksdagFamiliehendelsesdato = Uttaksdagen(familiehendelsesdato).denneEllerNeste();\n            if (dayjs(førsteUttaksdagFamiliehendelsesdato).isBefore(periode.tidsperiode.fom)) {\n                const tidsperiodeMellom6ukerEtterFødselOgPerioden: TidsperiodeDate = {\n                    fom: førsteUttaksdagFamiliehendelsesdato,\n                    tom: Uttaksdagen(periode.tidsperiode.fom).forrige(),\n                };\n                const uttaksdagerITidsperiode = Tidsperioden(\n                    tidsperiodeMellom6ukerEtterFødselOgPerioden,\n                ).getAntallUttaksdager();\n\n                if (uttaksdagerITidsperiode > 0) {\n                    res.push(\n                        ...getPeriodeHullEllerPeriodeUtenUttak(\n                            tidsperiodeMellom6ukerEtterFødselOgPerioden,\n                            harAktivitetskravIPeriodeUtenUttak,\n                            familiehendelsesdato,\n                            erAdopsjon,\n                            bareFarHarRett,\n                            erFarEllerMedmor,\n                            førsteUttaksdagNesteBarnsSak,\n                        ),\n                    );\n                }\n            }\n        }\n\n        res.push(periode);\n\n        if (index === perioder.length - 1) {\n            return res;\n        }\n\n        const nestePeriode = perioder[index + 1];\n\n        const tidsperiodeMellomPerioder: TidsperiodeDate = {\n            fom: Uttaksdagen(periode.tidsperiode.tom).neste(),\n            tom: Uttaksdagen(nestePeriode.tidsperiode.fom).forrige(),\n        };\n\n        if (dayjs(tidsperiodeMellomPerioder.tom).isBefore(tidsperiodeMellomPerioder.fom, 'day')) {\n            return res;\n        }\n\n        if (!erFarEllerMedmor && dayjs(tidsperiodeMellomPerioder.tom).isBefore(familiehendelsesdato, 'day')) {\n            return res;\n        }\n\n        const uttaksdagerITidsperiode = Tidsperioden(tidsperiodeMellomPerioder).getAntallUttaksdager();\n\n        if (uttaksdagerITidsperiode > 0) {\n            res.push(\n                ...getPeriodeHullEllerPeriodeUtenUttak(\n                    tidsperiodeMellomPerioder,\n                    harAktivitetskravIPeriodeUtenUttak,\n                    familiehendelsesdato,\n                    erAdopsjon,\n                    bareFarHarRett,\n                    erFarEllerMedmor,\n                    førsteUttaksdagNesteBarnsSak,\n                ),\n            );\n        }\n\n        return res;\n    }, [] as Periode[]);\n\n    return result;\n};\n\ninterface SplittetDatoType {\n    dato: Date;\n    erFom: boolean;\n}\n\nconst splittPeriodePåDatoer = (periode: Periode, alleDatoer: SplittetDatoType[]) => {\n    const datoerIPerioden = alleDatoer.filter((datoWrapper) =>\n        Tidsperioden(periode.tidsperiode).inneholderDato(datoWrapper.dato),\n    );\n    const oppsplittetPeriode: Periode[] = [];\n\n    if (datoerIPerioden.length === 2) {\n        return [periode];\n    }\n\n    datoerIPerioden.forEach((datoWrapper, index) => {\n        if (index === 0) {\n            oppsplittetPeriode.push({\n                ...periode,\n                tidsperiode: { fom: datoWrapper.dato, tom: undefined! },\n            });\n            return;\n        }\n\n        oppsplittetPeriode[index - 1].tidsperiode.tom = datoWrapper.erFom\n            ? Uttaksdagen(datoWrapper.dato).forrige()\n            : datoWrapper.dato;\n\n        if (index < datoerIPerioden.length - 1) {\n            oppsplittetPeriode.push({\n                ...periode,\n                id: guid(),\n                tidsperiode: {\n                    fom: datoWrapper.erFom ? datoWrapper.dato : Uttaksdagen(datoWrapper.dato).neste(),\n                    tom: undefined!,\n                },\n            });\n        }\n    });\n\n    return oppsplittetPeriode.filter((p) => isValidTidsperiode(p.tidsperiode));\n};\n\n// Funksjon som gjør at alle perioder overlapper 1 til 1\nexport const normaliserPerioder = (perioder: Periode[], annenPartsUttak: Periode[]) => {\n    const perioderTidsperioder: SplittetDatoType[] = perioder\n        .filter((per) => isValidTidsperiode(per.tidsperiode))\n        .reduce((res, p) => {\n            res.push({ dato: p.tidsperiode.fom, erFom: true });\n            res.push({ dato: p.tidsperiode.tom, erFom: false });\n            return res;\n        }, [] as SplittetDatoType[]);\n    const annenPartsUttakTidsperioder = annenPartsUttak.reduce((res, p) => {\n        res.push({ dato: p.tidsperiode.fom, erFom: true });\n        res.push({ dato: p.tidsperiode.tom, erFom: false });\n        return res;\n    }, [] as SplittetDatoType[]);\n\n    const alleDatoer = perioderTidsperioder.concat(annenPartsUttakTidsperioder).sort((d1, d2) => {\n        if (d1.dato.getTime() - d2.dato.getTime() === 0) {\n            if (!d1.erFom) {\n                return 1;\n            }\n\n            if (!d2.erFom) {\n                return -1;\n            }\n        }\n\n        return d1.dato.getTime() - d2.dato.getTime();\n    });\n\n    const alleUnikeDatoer = alleDatoer.filter(\n        (date, i, self) =>\n            self.findIndex((d) => d.dato.getTime() === date.dato.getTime() && d.erFom === date.erFom) === i,\n    );\n\n    const normaliserteEgnePerioder: Periode[] = [];\n    const normaliserteAnnenPartsPerioder: Periode[] = [];\n\n    perioder.forEach((p) => {\n        const oppsplittetPeriode = splittPeriodePåDatoer(p, alleUnikeDatoer);\n        normaliserteEgnePerioder.push(...oppsplittetPeriode);\n    });\n\n    annenPartsUttak.forEach((p) => {\n        const oppsplittetPeriode = splittPeriodePåDatoer(p, alleUnikeDatoer);\n        normaliserteAnnenPartsPerioder.push(...oppsplittetPeriode);\n    });\n\n    return {\n        normaliserteEgnePerioder,\n        normaliserteAnnenPartsPerioder,\n    };\n};\n\nexport const settInnAnnenPartsUttak = (\n    perioder: Periode[],\n    annenPartsUttak: Periode[],\n    familiehendelsesdato: Date,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n    initiellMappingFraSaksperioder = false,\n) => {\n    if (annenPartsUttak.length === 0) {\n        return perioder;\n    }\n\n    if (perioder.length === 0) {\n        return annenPartsUttak;\n    }\n\n    const { normaliserteEgnePerioder, normaliserteAnnenPartsPerioder } = normaliserPerioder(perioder, annenPartsUttak);\n\n    const result = normaliserteEgnePerioder.reduce((res, p) => {\n        const overlappendePerioderAnnenPart = Periodene(normaliserteAnnenPartsPerioder).finnOverlappendePerioder(p);\n\n        if (overlappendePerioderAnnenPart.length === 0) {\n            if (isUttaksperiode(p) && p.ønskerSamtidigUttak && initiellMappingFraSaksperioder) {\n                res.push({\n                    ...p,\n                    ønskerSamtidigUttak: false,\n                });\n\n                return res;\n            }\n\n            res.push(p);\n\n            return res;\n        }\n\n        if (isPeriodeUtenUttak(p) || isPeriodeUtenUttakUtsettelse(p) || isHull(p)) {\n            const overlappendePeriode = overlappendePerioderAnnenPart[0];\n\n            res.push({ ...overlappendePeriode, visPeriodeIPlan: true } as Periode);\n            return res;\n        }\n\n        if (isUttaksperiode(p) && p.ønskerSamtidigUttak) {\n            const overlappendePeriode = overlappendePerioderAnnenPart[0];\n            res.push(p);\n\n            if (!isUtsettelseAnnenPart(overlappendePeriode)) {\n                res.push({ ...overlappendePeriode, visPeriodeIPlan: false, ønskerSamtidigUttak: true } as Periode);\n            }\n\n            return res;\n        } else {\n            res.push(p);\n            return res;\n        }\n    }, [] as Periode[]);\n\n    result.sort(sorterPerioder);\n\n    const førstePeriodeStartdato = perioder[0].tidsperiode.fom;\n    const annenPartsUttakSomSlutterFørFørstePeriode = normaliserteAnnenPartsPerioder.filter((ap) =>\n        dayjs(ap.tidsperiode.tom).isBefore(førstePeriodeStartdato, 'day'),\n    );\n\n    const sistePeriodeSluttdato = perioder[perioder.length - 1].tidsperiode.tom;\n    const annenPartsUttakSomStarterEtterSistePeriode = normaliserteAnnenPartsPerioder.filter((ap) =>\n        dayjs(ap.tidsperiode.fom).isAfter(sistePeriodeSluttdato, 'day'),\n    );\n\n    return slåSammenLikePerioder(\n        [...annenPartsUttakSomSlutterFørFørstePeriode, ...result, ...annenPartsUttakSomStarterEtterSistePeriode],\n        familiehendelsesdato,\n        førsteUttaksdagNesteBarnsSak,\n        annenPartsUttak,\n    );\n};\n","import dayjs from 'dayjs';\nimport { getPeriodeHullEllerPeriodeUtenUttak, getTidsperiodeMellomPerioder } from './uttaksplanbuilderUtils';\nimport {\n    Periode,\n    Periodene,\n    StønadskontoType,\n    Tidsperioden,\n    Uttaksperiode,\n    guid,\n    isForeldrepengerFørFødselUttaksperiode,\n    isOverskrivbarPeriode,\n    isUtsettelsesperiode,\n    sorterPerioder,\n} from '@navikt/fp-common';\nimport { Uttaksdagen } from '@navikt/fp-common/src/common/utils/Uttaksdagen';\n\nconst splittPeriodePåPeriode = (berørtPeriode: Periode, nyPeriode: Periode): Periode[] => {\n    const dagerIBerørtPeriode = Tidsperioden(berørtPeriode.tidsperiode).getAntallUttaksdager();\n\n    const førsteDel: Periode = {\n        ...berørtPeriode,\n        tidsperiode: {\n            fom: berørtPeriode.tidsperiode.fom,\n            tom: Uttaksdagen(nyPeriode.tidsperiode.fom).forrige(),\n        },\n    };\n\n    const dagerIFørsteDel = Tidsperioden(førsteDel.tidsperiode).getAntallUttaksdager();\n    const dagerIAndreDel = dagerIBerørtPeriode - dagerIFørsteDel;\n    const startDatoAndreDel = Uttaksdagen(nyPeriode.tidsperiode.tom).neste();\n\n    if (isOverskrivbarPeriode(berørtPeriode)) {\n        // Hvis berørt periode er overskrivbar, la forskyvPerioder ta seg av logikk for forskyving av datoer\n        const andreDel: Periode = {\n            ...berørtPeriode,\n            id: guid(),\n            tidsperiode: {\n                fom: nyPeriode.tidsperiode.fom,\n                tom: berørtPeriode.tidsperiode.tom,\n            },\n        };\n\n        return [førsteDel, nyPeriode, andreDel];\n    } else {\n        const andreDel: Periode = {\n            ...berørtPeriode,\n            id: guid(),\n            tidsperiode: {\n                fom: startDatoAndreDel,\n                tom: Uttaksdagen(startDatoAndreDel).leggTil(dagerIAndreDel - 1),\n            },\n        };\n\n        return [førsteDel, nyPeriode, andreDel];\n    }\n};\n\nexport const splittPeriodePåDato = (periode: Periode, dato: Date): Periode[] => {\n    const periodeFørDato: Periode = {\n        ...periode,\n        tidsperiode: {\n            fom: periode.tidsperiode.fom,\n            tom: Uttaksdagen(dato).forrige(),\n        },\n    };\n\n    const periodeFraOgMedDato: Periode = {\n        ...periode,\n        id: guid(),\n        tidsperiode: {\n            fom: Uttaksdagen(periodeFørDato.tidsperiode.tom).neste(),\n            tom: periode.tidsperiode.tom,\n        },\n    };\n\n    return [periodeFørDato, periodeFraOgMedDato];\n};\n\nexport const splittUttaksperiodePåFamiliehendelsesdato = (periode: Uttaksperiode, famDato: Date): Uttaksperiode[] => {\n    const periodeFørFamDato: Periode = {\n        ...periode,\n        konto: periode.konto == StønadskontoType.Foreldrepenger ? StønadskontoType.AktivitetsfriKvote : periode.konto,\n        morsAktivitetIPerioden:\n            periode.konto == StønadskontoType.Foreldrepenger ? undefined : periode.morsAktivitetIPerioden,\n        erMorForSyk: periode.konto == StønadskontoType.Foreldrepenger ? undefined : periode.erMorForSyk,\n        tidsperiode: {\n            fom: periode.tidsperiode.fom,\n            tom: Uttaksdagen(famDato).forrige(),\n        },\n    };\n\n    const periodeFraOgMedFamDato: Periode = {\n        ...periode,\n        id: guid(),\n        tidsperiode: {\n            fom: Uttaksdagen(periodeFørFamDato.tidsperiode.tom).neste(),\n            tom: periode.tidsperiode.tom,\n        },\n    };\n\n    return [periodeFørFamDato, periodeFraOgMedFamDato];\n};\n\nconst getAntallOverlappendeUttaksdager = (periode: Periode, nyPeriode: Periode): number => {\n    if (Periodene([periode]).finnOverlappendePerioder(nyPeriode).length > 0) {\n        const dateArray = [\n            dayjs(periode.tidsperiode.fom),\n            dayjs(periode.tidsperiode.tom),\n            dayjs(nyPeriode.tidsperiode.fom),\n            dayjs(nyPeriode.tidsperiode.tom),\n        ];\n        const minDate = dayjs.min(dateArray);\n        const maxDate = dayjs.max(dateArray);\n        const overlappendeTidsperiode = dateArray.filter((date) => date !== minDate && date !== maxDate);\n\n        return Tidsperioden({\n            fom: dayjs.min(overlappendeTidsperiode)!.toDate(),\n            tom: dayjs.max(overlappendeTidsperiode)!.toDate(),\n        }).getAntallUttaksdager();\n    }\n\n    return 0;\n};\n\ninterface LeggTilPeriodeParams {\n    perioder: Periode[];\n    nyPeriode: Periode;\n    familiehendelsesdato: Date;\n    harAktivitetskravIPeriodeUtenUttak: boolean;\n    erAdopsjon: boolean;\n    bareFarHarRett: boolean;\n    erFarEllerMedmor: boolean;\n    førsteUttaksdagNesteBarnsSak: Date | undefined;\n}\n\nexport const leggTilPeriode = ({\n    perioder,\n    nyPeriode,\n    familiehendelsesdato,\n    harAktivitetskravIPeriodeUtenUttak,\n    erAdopsjon,\n    bareFarHarRett,\n    erFarEllerMedmor,\n    førsteUttaksdagNesteBarnsSak,\n}: LeggTilPeriodeParams): Periode[] => {\n    if (perioder.length === 0) {\n        return [nyPeriode];\n    }\n\n    const nyPeriodeFomDate = nyPeriode.tidsperiode.fom;\n    const nyPeriodeTomDate = nyPeriode.tidsperiode.tom;\n\n    if (\n        dayjs(nyPeriodeFomDate).isBefore(familiehendelsesdato, 'day') &&\n        dayjs(nyPeriodeTomDate).isSameOrAfter(familiehendelsesdato, 'day')\n    ) {\n        // Nye perioder skal legges før eller etter famdato ikke begge deler\n        return [...perioder];\n    }\n\n    const berørtPeriode = perioder.find((p) => Tidsperioden(p.tidsperiode).inneholderDato(nyPeriodeFomDate));\n\n    if (berørtPeriode) {\n        if (isUtsettelsesperiode(berørtPeriode) || isForeldrepengerFørFødselUttaksperiode(berørtPeriode)) {\n            // Uttak som legges over utsettelse eller FFF skal ikke tillates av validering. Ignore\n            return [...perioder];\n        }\n\n        const foregåendePerioder = Periodene(perioder).finnAlleForegåendePerioder(berørtPeriode);\n        const påfølgendePerioder = Periodene(perioder).finnAllePåfølgendePerioder(berørtPeriode);\n        const antallDagerINyPeriode = Tidsperioden(nyPeriode.tidsperiode).getAntallUttaksdager();\n\n        if (dayjs(berørtPeriode.tidsperiode.fom).isSame(nyPeriodeFomDate)) {\n            return [\n                ...foregåendePerioder,\n                nyPeriode,\n                ...Periodene([berørtPeriode, ...påfølgendePerioder]).forskyvPerioder(antallDagerINyPeriode),\n            ];\n        }\n\n        const berørtPeriodeSplittetPåNyPeriode = splittPeriodePåPeriode(berørtPeriode, nyPeriode);\n\n        if (isOverskrivbarPeriode(berørtPeriode)) {\n            // Hvis berørt periode er overskrivbar, la forskyvPerioder ta seg av logikk for overskriving\n            return [\n                ...foregåendePerioder,\n                berørtPeriodeSplittetPåNyPeriode[0],\n                berørtPeriodeSplittetPåNyPeriode[1],\n                ...Periodene([berørtPeriodeSplittetPåNyPeriode[2], ...påfølgendePerioder]).forskyvPerioder(\n                    antallDagerINyPeriode,\n                ),\n            ];\n        }\n\n        return [\n            ...foregåendePerioder,\n            ...berørtPeriodeSplittetPåNyPeriode,\n            ...Periodene(påfølgendePerioder).forskyvPerioder(antallDagerINyPeriode),\n        ];\n    } else {\n        const førstePeriode = perioder[0];\n        const sistePeriode = perioder[perioder.length - 1];\n        const nyPeriodeFom = dayjs(nyPeriode.tidsperiode.fom);\n        const nyPeriodeTom = dayjs(nyPeriode.tidsperiode.tom);\n\n        if (nyPeriodeFom.isBefore(førstePeriode.tidsperiode.fom, 'day')) {\n            const tidsperiodeMellomNyPeriodeOgFørstePeriode = getTidsperiodeMellomPerioder(\n                nyPeriode.tidsperiode,\n                førstePeriode.tidsperiode,\n            );\n\n            if (nyPeriodeTom.isSameOrAfter(førstePeriode.tidsperiode.fom, 'day')) {\n                if (nyPeriodeFom.isBefore(familiehendelsesdato, 'day')) {\n                    // Kan ikke overlappe perioder før fødsel\n                    return [...perioder];\n                }\n\n                const antallOverlappendeUttaksdager = getAntallOverlappendeUttaksdager(førstePeriode, nyPeriode);\n\n                return [nyPeriode, ...Periodene(perioder).forskyvPerioder(antallOverlappendeUttaksdager)];\n            }\n\n            if (tidsperiodeMellomNyPeriodeOgFørstePeriode) {\n                return [\n                    nyPeriode,\n                    ...getPeriodeHullEllerPeriodeUtenUttak(\n                        tidsperiodeMellomNyPeriodeOgFørstePeriode,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        familiehendelsesdato,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        førsteUttaksdagNesteBarnsSak,\n                    ),\n                    ...perioder,\n                ];\n            }\n\n            return [nyPeriode, ...perioder];\n        } else {\n            const tidsperiodeMellomSistePeriodeOgNyPeriode = getTidsperiodeMellomPerioder(\n                sistePeriode.tidsperiode,\n                nyPeriode.tidsperiode,\n            );\n\n            if (tidsperiodeMellomSistePeriodeOgNyPeriode) {\n                return [\n                    ...perioder,\n                    ...getPeriodeHullEllerPeriodeUtenUttak(\n                        tidsperiodeMellomSistePeriodeOgNyPeriode,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        familiehendelsesdato,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        førsteUttaksdagNesteBarnsSak,\n                    ),\n                    nyPeriode,\n                ];\n            }\n\n            return [...perioder, nyPeriode].sort(sorterPerioder);\n        }\n    }\n};\n"],"names":["Arbeidsform","PeriodeHullÅrsak","slåSammenLikePerioder","perioder","familiehendelsesdato","førsteUttaksdagNesteBarnsSak","annenPartsUttak","nyePerioder","forrigePeriode","periode","index","Perioden","isUttaksperiode","overlappendePerioderAnnenPartForrigePeriode","Periodene","overlappendePerioderAnnenPart","dayjs","Uttaksdagen","nyTidsperiode","getSplittetPeriodeOmNødvendig","nyHullPeriode","tidperiodeOverlapperDato","splittPeriodePåDato","getPeriodeHullEllerPeriodeUtenUttak","tidsperiode","harAktivitetskravIPeriodeUtenUttak","erAdopsjon","bareFarHarRett","erFarEllerMedmor","årsak","førsteOktober2021ReglerGjelder","førsteUttaksdagFamiliehendelsesdato","førsteUttaksdagEtterSeksUker","tidsperiodeErInnenFørsteSeksUker","Tidsperioden","farMedmorBeholderDagerIkkeTattUtDeFørsteSeksUkene","andreAugust2022ReglerGjelder","getPeriodeHull","getNyPeriodeUtenUttak","antallDagerFraFomTilFørsteUttaksdagSeksUker","nyPeriodeUtenUttakTidsperiodeLengde","førsteSeksUkerTidsperiode","etterFørsteSeksUkerTidsperiode","periodeUtenUttak","periodeHull","guid","Periodetype","getTidsperiodeMellomPerioder","tidsperiode1","tidsperiode2","tidsperiodeMellomPerioder","antallDagerIMellomrom","isValidTidsperiode","fjernUnødvendigeHull","res","isPeriodeUtenUttak","isHull","finnOgSettInnHull","tidsperiodeMellom6ukerEtterFødselOgPerioden","nestePeriode","splittPeriodePåDatoer","alleDatoer","datoerIPerioden","datoWrapper","oppsplittetPeriode","p","normaliserPerioder","perioderTidsperioder","per","annenPartsUttakTidsperioder","alleUnikeDatoer","d1","d2","date","i","self","d","normaliserteEgnePerioder","normaliserteAnnenPartsPerioder","settInnAnnenPartsUttak","initiellMappingFraSaksperioder","result","isPeriodeUtenUttakUtsettelse","overlappendePeriode","isUtsettelseAnnenPart","sorterPerioder","førstePeriodeStartdato","annenPartsUttakSomSlutterFørFørstePeriode","ap","sistePeriodeSluttdato","annenPartsUttakSomStarterEtterSistePeriode","splittPeriodePåPeriode","berørtPeriode","nyPeriode","dagerIBerørtPeriode","førsteDel","dagerIFørsteDel","dagerIAndreDel","startDatoAndreDel","isOverskrivbarPeriode","andreDel","dato","periodeFørDato","periodeFraOgMedDato","splittUttaksperiodePåFamiliehendelsesdato","famDato","periodeFørFamDato","StønadskontoType","periodeFraOgMedFamDato","getAntallOverlappendeUttaksdager","dateArray","minDate","maxDate","overlappendeTidsperiode","leggTilPeriode","nyPeriodeFomDate","nyPeriodeTomDate","isUtsettelsesperiode","isForeldrepengerFørFødselUttaksperiode","foregåendePerioder","påfølgendePerioder","antallDagerINyPeriode","berørtPeriodeSplittetPåNyPeriode","førstePeriode","sistePeriode","nyPeriodeFom","nyPeriodeTom","tidsperiodeMellomNyPeriodeOgFørstePeriode","antallOverlappendeUttaksdager","tidsperiodeMellomSistePeriodeOgNyPeriode"],"mappings":"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"}