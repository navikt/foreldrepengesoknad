{"version":3,"file":"useOnValidSubmit-7c76a5c0.js","sources":["../../src/app/utils/hooks/useOnValidSubmit.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport SøknadRoutes from 'app/routes/routes';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport actionCreator, { ForeldrepengesøknadContextAction } from 'app/context/action/actionCreator';\nimport { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport { redirectToLogin } from '../redirectToLogin';\nimport { sendErrorMessageToSentry } from 'app/api/apiUtils';\n\nconst useOnValidSubmit = <T>(\n    submitHandler: (values: T) => ForeldrepengesøknadContextAction[],\n    nextRoute: SøknadRoutes,\n    postSubmit: (state: ForeldrepengesøknadContextState) => Promise<any>,\n) => {\n    const { dispatch, state } = useForeldrepengesøknadContext();\n    const navigate = useNavigate();\n    const [harSubmitted, setSubmitted] = useState(false);\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [submitError, setSubmitError] = useState(undefined);\n\n    useEffect(() => {\n        if (harSubmitted) {\n            postSubmit(state)\n                .then(() => {\n                    if (nextRoute === SøknadRoutes.SØKNAD_SENDT) {\n                        navigate(nextRoute);\n                    } else {\n                        navigate(state.currentRoute);\n                    }\n                })\n                .catch((error) => {\n                    if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n                        redirectToLogin();\n                    } else {\n                        setSubmitError(error);\n                    }\n                });\n        }\n    }, [harSubmitted, navigate, nextRoute, state, postSubmit]);\n\n    useEffect(() => {\n        if (submitError) {\n            sendErrorMessageToSentry(submitError);\n            throw new Error(submitError);\n        }\n    }, [submitError]);\n\n    const handleSubmit = (values: T) => {\n        setIsSubmitting(true);\n        const actions = submitHandler(values);\n        const dispatchRouteChange =\n            nextRoute === SøknadRoutes.SØKNAD_SENDT ? undefined : dispatch(actionCreator.updateCurrentRoute(nextRoute));\n        Promise.all([dispatchRouteChange, ...actions.map((a) => dispatch(a))]).then(() => setSubmitted(true));\n    };\n\n    return { handleSubmit, isSubmitting };\n};\n\n//TODO Midlertidig hook for å unngå omskrivning av original = mindre risiko\nexport const useOnValidSubmitNew = <T>(\n    submitHandler: (values: T) => ForeldrepengesøknadContextAction[],\n    getNewRoute: (values: T) => SøknadRoutes,\n    postSubmit: (state: ForeldrepengesøknadContextState) => Promise<any>,\n) => {\n    const { dispatch, state } = useForeldrepengesøknadContext();\n    const navigate = useNavigate();\n\n    const handleSubmit = (values: T): Promise<any> => {\n        const newRoute = getNewRoute(values);\n\n        const actions = submitHandler(values);\n        const dispatchRouteChange =\n            newRoute === SøknadRoutes.SØKNAD_SENDT ? undefined : dispatch(actionCreator.updateCurrentRoute(newRoute));\n\n        return Promise.all([dispatchRouteChange, ...actions.map((a) => dispatch(a))]).then(() => {\n            return postSubmit(state)\n                .then(() => {\n                    navigate(newRoute);\n                })\n                .catch((error) => {\n                    if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n                        redirectToLogin();\n                    } else {\n                        sendErrorMessageToSentry(error);\n                        throw new Error(error);\n                    }\n                });\n        });\n    };\n\n    return { handleSubmit };\n};\n\nexport default useOnValidSubmit;\n"],"names":["useOnValidSubmit","submitHandler","nextRoute","postSubmit","dispatch","state","useForeldrepengesøknadContext","navigate","useNavigate","harSubmitted","setSubmitted","useState","isSubmitting","setIsSubmitting","submitError","setSubmitError","useEffect","SøknadRoutes","error","redirectToLogin","sendErrorMessageToSentry","values","actions","dispatchRouteChange","actionCreator","a","useOnValidSubmitNew","getNewRoute","newRoute"],"mappings":"wOASA,MAAMA,EAAmB,CACrBC,EACAC,EACAC,IACC,CACD,KAAM,CAAE,SAAAC,EAAU,MAAAC,CAAM,EAAIC,EAA8B,EACpDC,EAAWC,IACX,CAACC,EAAcC,CAAY,EAAIC,WAAS,EAAK,EAC7C,CAACC,EAAcC,CAAe,EAAIF,WAAS,EAAK,EAChD,CAACG,EAAaC,CAAc,EAAIJ,EAAAA,SAAS,MAAS,EAExDK,OAAAA,EAAAA,UAAU,IAAM,CACRP,GACWN,EAAAE,CAAK,EACX,KAAK,IAAM,CACJH,IAAce,EAAa,aAC3BV,EAASL,CAAS,EAElBK,EAASF,EAAM,YAAY,CAC/B,CACH,EACA,MAAOa,GAAU,CACVA,EAAM,WAAaA,EAAM,SAAS,SAAW,KAAOA,EAAM,SAAS,SAAW,KAC9DC,IAEhBJ,EAAeG,CAAK,CACxB,CACH,CACT,EACD,CAACT,EAAcF,EAAUL,EAAWG,EAAOF,CAAU,CAAC,EAEzDa,EAAAA,UAAU,IAAM,CACZ,GAAIF,EACA,MAAAM,EAAyBN,CAAW,EAC9B,IAAI,MAAMA,CAAW,CAC/B,EACD,CAACA,CAAW,CAAC,EAUT,CAAE,aARaO,GAAc,CAChCR,EAAgB,EAAI,EACd,MAAAS,EAAUrB,EAAcoB,CAAM,EAC9BE,EACFrB,IAAce,EAAa,aAAe,OAAYb,EAASoB,EAAc,mBAAmBtB,CAAS,CAAC,EAC9G,QAAQ,IAAI,CAACqB,EAAqB,GAAGD,EAAQ,IAAKG,GAAMrB,EAASqB,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,IAAMf,EAAa,EAAI,CAAC,CAAA,EAGjF,aAAAE,EAC3B,EAGac,EAAsB,CAC/BzB,EACA0B,EACAxB,IACC,CACD,KAAM,CAAE,SAAAC,EAAU,MAAAC,CAAM,EAAIC,EAA8B,EACpDC,EAAWC,IAyBjB,MAAO,CAAE,aAvBaa,GAA4B,CACxC,MAAAO,EAAWD,EAAYN,CAAM,EAE7BC,EAAUrB,EAAcoB,CAAM,EAC9BE,EACFK,IAAaX,EAAa,aAAe,OAAYb,EAASoB,EAAc,mBAAmBI,CAAQ,CAAC,EAE5G,OAAO,QAAQ,IAAI,CAACL,EAAqB,GAAGD,EAAQ,IAAKG,GAAMrB,EAASqB,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,IACxEtB,EAAWE,CAAK,EAClB,KAAK,IAAM,CACRE,EAASqB,CAAQ,CAAA,CACpB,EACA,MAAOV,GAAU,CACV,GAAAA,EAAM,WAAaA,EAAM,SAAS,SAAW,KAAOA,EAAM,SAAS,SAAW,KAC9DC,QAEhB,OAAAC,EAAyBF,CAAK,EACxB,IAAI,MAAMA,CAAK,CACzB,CACH,CACR,CAAA,CAGiB,CAC1B"}