{"version":3,"file":"morsAktivitetUtils-aa87b102.js","sources":["../../src/uttaksplan/utils/uttaksskjema/kontoSkalBesvarer.ts","../../src/uttaksplan/utils/uttaksskjema/uttakRundtFødselÅrsakSpørsmålSkalBesvares.ts","../../src/uttaksplan/utils/uttaksskjema/aktivitetskravMorSkalBesvares.ts","../../src/app/utils/morsAktivitetUtils.ts"],"sourcesContent":["import { TidsperiodeDate } from '@navikt/fp-common';\nimport { isValidTidsperiode } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\nimport dayjs from 'dayjs';\nimport { Periodetype } from 'uttaksplan/types/Periode';\nimport { StønadskontoUttak } from 'uttaksplan/types/StønadskontoUttak';\n\nconst kontoSkalBesvares = (\n    periodetype: Periodetype,\n    tidsperiode: TidsperiodeDate,\n    stønadskontoer: StønadskontoUttak[],\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean\n): boolean => {\n    if (\n        !isValidTidsperiode(tidsperiode) ||\n        stønadskontoer.length === 0 ||\n        (andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n            periodetype === Periodetype.Uttak &&\n            erFarEllerMedmor &&\n            dayjs(tidsperiode.fom).isBefore(familiehendelsesdato, 'day'))\n    ) {\n        return false;\n    }\n\n    return true;\n};\n\nexport default kontoSkalBesvares;\n","import { TidsperiodeDate } from '@navikt/fp-common';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\nimport { erFarMedmorSinWLBTidsperiodeRundtFødsel } from 'app/utils/wlbUtils';\nimport dayjs from 'dayjs';\nimport { Periodetype } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\n\nexport const uttakRundtFødselÅrsakSpørsmålSkalBesvares = (\n    periodetype: Periodetype,\n    konto: StønadskontoType,\n    tidsperiode: TidsperiodeDate,\n    søkerErFarEllerMedmor: boolean,\n    erAleneOmOmsorg: boolean,\n    annenForelderKanIkkeOppgis: boolean,\n    søkerHarMidlertidigOmsorg: boolean,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    situasjon: Situasjon,\n    bareFarMedmorHarRett: boolean\n): boolean => {\n    if (\n        erAleneOmOmsorg ||\n        annenForelderKanIkkeOppgis ||\n        søkerHarMidlertidigOmsorg ||\n        !søkerErFarEllerMedmor ||\n        bareFarMedmorHarRett ||\n        !andreAugust2022ReglerGjelder(familiehendelsesdato) ||\n        situasjon !== 'fødsel' ||\n        dayjs(tidsperiode.fom).isBefore(familiehendelsesdato, 'day')\n    ) {\n        return false;\n    }\n\n    if (periodetype === Periodetype.Uttak) {\n        if (\n            erFarMedmorSinWLBTidsperiodeRundtFødsel(\n                tidsperiode,\n                familiehendelsesdato,\n                periodetype,\n                konto,\n                søkerErFarEllerMedmor,\n                termindato,\n                situasjon\n            )\n        ) {\n            return true;\n        }\n        return false;\n    }\n    return false;\n};\n\nexport default uttakRundtFødselÅrsakSpørsmålSkalBesvares;\n","import { TidsperiodeDate } from '@navikt/fp-common';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { getSisteUttaksdag6UkerEtterFødsel } from 'app/utils/wlbUtils';\nimport dayjs from 'dayjs';\nimport { Periodetype } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { StønadskontoUttak } from 'uttaksplan/types/StønadskontoUttak';\nimport kontoSkalBesvares from './kontoSkalBesvarer';\nimport uttakRundtFødselÅrsakSpørsmålSkalBesvares from './uttakRundtFødselÅrsakSpørsmålSkalBesvares';\n\nexport const farMedmorBrukerForeldrepengerMedAktivitetskravRundtFødselOgMorIkkeErSyk = (\n    famDato: Date,\n    erFarEllerMedmor: boolean,\n    konto: StønadskontoType | undefined,\n    erMorForSyk: boolean | undefined,\n    tidsperiode: TidsperiodeDate,\n    situasjon: Situasjon\n) => {\n    const sisteUttaksdag6UkerEtterFødsel = getSisteUttaksdag6UkerEtterFødsel(famDato);\n    return (\n        erFarEllerMedmor &&\n        konto === StønadskontoType.Foreldrepenger &&\n        erMorForSyk === false &&\n        situasjon === 'fødsel' &&\n        dayjs(tidsperiode.fom).isSameOrBefore(sisteUttaksdag6UkerEtterFødsel, 'day')\n    );\n};\n\nexport const aktivitetskravMorSkalBesvares = (\n    ønskerFlerbarnsdager: boolean | undefined,\n    samtidigUttak: boolean | undefined,\n    erMorForSyk: boolean | undefined,\n    periodetype: Periodetype,\n    kontotype: StønadskontoType | undefined,\n    søkerErMor: boolean,\n    erAleneOmOmsorg: boolean,\n    annenForelderKanIkkeOppgis: boolean,\n    søkerHarMidlertidigOmsorg: boolean,\n    tidsperiode: TidsperiodeDate,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    situasjon: Situasjon,\n    stønadskontoer: StønadskontoUttak[],\n    bareFarMedmorHarRett: boolean\n): boolean => {\n    if (\n        søkerErMor ||\n        erAleneOmOmsorg ||\n        periodetype !== Periodetype.Uttak ||\n        annenForelderKanIkkeOppgis ||\n        søkerHarMidlertidigOmsorg ||\n        uttakRundtFødselÅrsakSpørsmålSkalBesvares(\n            periodetype,\n            kontotype as StønadskontoType,\n            tidsperiode,\n            !søkerErMor,\n            erAleneOmOmsorg,\n            annenForelderKanIkkeOppgis,\n            søkerHarMidlertidigOmsorg,\n            familiehendelsesdato,\n            termindato,\n            situasjon,\n            bareFarMedmorHarRett\n        ) ||\n        !kontoSkalBesvares(periodetype, tidsperiode, stønadskontoer, familiehendelsesdato, !søkerErMor) ||\n        farMedmorBrukerForeldrepengerMedAktivitetskravRundtFødselOgMorIkkeErSyk(\n            familiehendelsesdato,\n            !søkerErMor,\n            kontotype,\n            erMorForSyk,\n            tidsperiode,\n            situasjon\n        )\n    ) {\n        return false;\n    }\n\n    if (\n        !erAleneOmOmsorg &&\n        (kontotype === StønadskontoType.Fellesperiode || kontotype === StønadskontoType.Foreldrepenger)\n    ) {\n        if (ønskerFlerbarnsdager || samtidigUttak || (erMorForSyk && kontotype === StønadskontoType.Fellesperiode)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    return false;\n};\n","import AnnenForelder, { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport { Skjemanummer } from 'app/types/Skjemanummer';\nimport dayjs from 'dayjs';\nimport { MorsAktivitet } from 'uttaksplan/types/MorsAktivitet';\nimport { hasValue } from '@navikt/fp-common';\n\nexport const aktivitetskravMorUtil = {\n    skalBesvaresVedUtsettelse(søkerErFarEllerMedmor: boolean, annenForelder: AnnenForelder): boolean {\n        const reglerFørFørsteOkt2021 = dayjs(new Date()).isBefore(new Date('2021-10-01'), 'day');\n        const annenForelderErUfør = isAnnenForelderOppgitt(annenForelder) ? annenForelder.erUfør : undefined;\n        const annenForelderHarRett = isAnnenForelderOppgitt(annenForelder)\n            ? annenForelder.harRettPåForeldrepengerINorge || annenForelder.harRettPåForeldrepengerIEØS\n            : undefined;\n\n        return !søkerErFarEllerMedmor ||\n            (annenForelderHarRett === false && annenForelderErUfør === true && !reglerFørFørsteOkt2021)\n            ? false\n            : annenForelderHarRett === false;\n    },\n};\n\nexport const getMorsAktivitetSkjemanummer = (morsAktivitet?: MorsAktivitet): Skjemanummer => {\n    switch (morsAktivitet) {\n        case MorsAktivitet.Innlagt:\n            return Skjemanummer.DOK_INNLEGGELSE;\n        case MorsAktivitet.Kvalifiseringsprogrammet:\n            return Skjemanummer.BEKREFTELSE_DELTAR_KVALIFISERINGSPROGRAM;\n        case MorsAktivitet.Introduksjonsprogrammet:\n            return Skjemanummer.DOK_DELTAKELSE_I_INTRODUKSJONSPROGRAMMET;\n        case MorsAktivitet.ArbeidOgUtdanning:\n        case MorsAktivitet.Arbeid:\n        case MorsAktivitet.TrengerHjelp:\n            return Skjemanummer.DOK_MORS_UTDANNING_ARBEID_SYKDOM;\n        case MorsAktivitet.Utdanning:\n            return Skjemanummer.BEKREFTELSE_FRA_STUDIESTED;\n        default:\n            return Skjemanummer.ANNET;\n    }\n};\n\nexport const getMorsAktivitet = (\n    aktivitetskravMorValue: string | undefined,\n    erMorForSykValue: boolean | undefined\n): MorsAktivitet | undefined => {\n    if (hasValue(aktivitetskravMorValue)) {\n        return aktivitetskravMorValue as MorsAktivitet;\n    }\n    if (erMorForSykValue) {\n        return MorsAktivitet.TrengerHjelp;\n    }\n    return undefined;\n};\n"],"names":["kontoSkalBesvares","periodetype","tidsperiode","stønadskontoer","familiehendelsesdato","erFarEllerMedmor","isValidTidsperiode","andreAugust2022ReglerGjelder","Periodetype","dayjs","uttakRundtFødselÅrsakSpørsmålSkalBesvares","konto","søkerErFarEllerMedmor","erAleneOmOmsorg","annenForelderKanIkkeOppgis","søkerHarMidlertidigOmsorg","termindato","situasjon","bareFarMedmorHarRett","erFarMedmorSinWLBTidsperiodeRundtFødsel","farMedmorBrukerForeldrepengerMedAktivitetskravRundtFødselOgMorIkkeErSyk","famDato","erMorForSyk","sisteUttaksdag6UkerEtterFødsel","getSisteUttaksdag6UkerEtterFødsel","StønadskontoType","aktivitetskravMorSkalBesvares","ønskerFlerbarnsdager","samtidigUttak","kontotype","søkerErMor","aktivitetskravMorUtil","annenForelder","reglerFørFørsteOkt2021","annenForelderErUfør","isAnnenForelderOppgitt","annenForelderHarRett","getMorsAktivitetSkjemanummer","morsAktivitet","MorsAktivitet","Skjemanummer","getMorsAktivitet","aktivitetskravMorValue","erMorForSykValue","hasValue"],"mappings":"iXAOA,MAAMA,EAAoB,CACtBC,EACAC,EACAC,EACAC,EACAC,IAGI,GAACC,EAAmBJ,CAAW,GAC/BC,EAAe,SAAW,GACzBI,EAA6BH,CAAoB,GAC9CH,IAAgBO,EAAY,OAC5BH,GACAI,EAAMP,EAAY,GAAG,EAAE,SAASE,EAAsB,KAAK,GCZ1DM,EAA4C,CACrDT,EACAU,EACAT,EACAU,EACAC,EACAC,EACAC,EACAX,EACAY,EACAC,EACAC,IAGIL,GACAC,GACAC,GACA,CAACH,GACDM,GACA,CAACX,EAA6BH,CAAoB,GAClDa,IAAc,UACdR,EAAMP,EAAY,GAAG,EAAE,SAASE,EAAsB,KAAK,EAEpD,GAGPH,IAAgBO,EAAY,MAExB,EAAAW,EACIjB,EACAE,EACAH,EACAU,EACAC,EACAI,EACAC,CAAA,EAOL,GCxCEG,EAA0E,CACnFC,EACAhB,EACAM,EACAW,EACApB,EACAe,IACC,CACK,MAAAM,EAAiCC,EAAkCH,CAAO,EAChF,OACIhB,GACAM,IAAUc,EAAiB,gBAC3BH,IAAgB,IAChBL,IAAc,UACdR,EAAMP,EAAY,GAAG,EAAE,eAAeqB,EAAgC,KAAK,CAEnF,EAEaG,EAAgC,CACzCC,EACAC,EACAN,EACArB,EACA4B,EACAC,EACAjB,EACAC,EACAC,EACAb,EACAE,EACAY,EACAC,EACAd,EACAe,IAGIY,GACAjB,GACAZ,IAAgBO,EAAY,OAC5BM,GACAC,GACAL,EACIT,EACA4B,EACA3B,EACA,CAAC4B,EACDjB,EACAC,EACAC,EACAX,EACAY,EACAC,EACAC,CAAA,GAEJ,CAAClB,EAAkBC,EAAaC,EAAaC,EAAgBC,EAAsB,CAAC0B,CAAU,GAC9FV,EACIhB,EACA,CAAC0B,EACDD,EACAP,EACApB,EACAe,CAAA,EAGG,GAIP,CAACJ,IACAgB,IAAcJ,EAAiB,eAAiBI,IAAcJ,EAAiB,gBAE5E,EAAAE,GAAwBC,GAAkBN,GAAeO,IAAcJ,EAAiB,eAOzF,GClFEM,EAAwB,CACjC,0BAA0BnB,EAAgCoB,EAAuC,CACvF,MAAAC,EAAyBxB,EAAM,IAAI,IAAM,EAAE,SAAa,IAAA,KAAK,YAAY,EAAG,KAAK,EACjFyB,EAAsBC,EAAuBH,CAAa,EAAIA,EAAc,OAAS,OACrFI,EAAuBD,EAAuBH,CAAa,EAC3DA,EAAc,+BAAiCA,EAAc,4BAC7D,OAEC,MAAA,CAACpB,GACHwB,IAAyB,IAASF,IAAwB,IAAQ,CAACD,EAClE,GACAG,IAAyB,EACnC,CACJ,EAEaC,EAAgCC,GAAgD,CACzF,OAAQA,EAAe,CACnB,KAAKC,EAAc,QACf,OAAOC,EAAa,gBACxB,KAAKD,EAAc,yBACf,OAAOC,EAAa,yCACxB,KAAKD,EAAc,wBACf,OAAOC,EAAa,yCACxB,KAAKD,EAAc,kBACnB,KAAKA,EAAc,OACnB,KAAKA,EAAc,aACf,OAAOC,EAAa,iCACxB,KAAKD,EAAc,UACf,OAAOC,EAAa,2BACxB,QACI,OAAOA,EAAa,KAC5B,CACJ,EAEaC,EAAmB,CAC5BC,EACAC,IAC4B,CACxB,GAAAC,EAASF,CAAsB,EACxB,OAAAA,EAEX,GAAIC,EACA,OAAOJ,EAAc,YAG7B"}