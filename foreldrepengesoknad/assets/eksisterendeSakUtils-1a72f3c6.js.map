{"version":3,"file":"eksisterendeSakUtils-1a72f3c6.js","sources":["../../src/app/types/UttakArbeidType.ts","../../src/app/types/OppholdÅrsakTypeDTO.ts","../../src/app/types/FamiliehendelseType.ts","../../src/app/utils/getFamiliehendelseType.ts","../../src/app/types/UtsettelseÅrsakTypeDTO.ts","../../src/uttaksplan/types/PeriodeResultatÅrsak.ts","../../src/uttaksplan/types/PeriodeHullÅrsak.ts","../../src/uttaksplan/builder/leggTilPeriode.ts","../../src/uttaksplan/builder/uttaksplanbuilderUtils.ts","../../src/app/utils/mapSaksperioderTilUttaksperioder.ts","../../src/app/types/DekningsgradDTO.ts","../../src/app/types/RettighetType.ts","../../src/app/utils/eksisterendeSakUtils.ts"],"sourcesContent":["export enum UttakArbeidType {\n    'ORDINÆRT_ARBEID' = 'ORDINÆRT_ARBEID',\n    'SELVSTENDIG_NÆRINGSDRIVENDE' = 'SELVSTENDIG_NÆRINGSDRIVENDE',\n    'FRILANS' = 'FRILANS',\n    'ANNET' = 'ANNET',\n}\n","export enum OppholdÅrsakTypeDTO {\n    UttakFellesperiodeAnnenForelder = 'FELLESPERIODE_ANNEN_FORELDER',\n    UttakFedrekvoteAnnenForelder = 'FEDREKVOTE_ANNEN_FORELDER',\n    UttakMødrekvoteAnnenForelder = 'MØDREKVOTE_ANNEN_FORELDER',\n    UttakForeldrepengerAnnenForelder = 'FORELDREPENGER_ANNEN_FORELDER',\n    Ingen = 'INGEN',\n}\n","export enum FamiliehendelseType {\n    'ADOPSJON' = 'ADPSJN',\n    'OMSORGSOVERTAKELSE' = 'OMSRGO',\n    'FØDSEL' = 'FODSL',\n    'TERM' = 'TERM',\n}\n","import { FamiliehendelseType } from 'app/types/FamiliehendelseType';\n\nexport const getFamiliehendelseType = (\n    fødselsdato: string | undefined,\n    termindato: string | undefined,\n    omsorgsovertagelsesdato: string | undefined\n) => {\n    if (omsorgsovertagelsesdato !== undefined) {\n        return FamiliehendelseType.ADOPSJON;\n    } else if (fødselsdato !== undefined) {\n        return FamiliehendelseType.FØDSEL;\n    } else if (termindato !== undefined) {\n        return FamiliehendelseType.TERM;\n    } else {\n        throw new Error('Fødselsdato/ termindato/ omsorgsovertakelsedato mangler');\n    }\n};\n","export enum UtsettelseÅrsakTypeDTO {\n    Ferie = 'LOVBESTEMT_FERIE',\n    Arbeid = 'ARBEID',\n    Sykdom = 'SØKER_SYKDOM',\n    InstitusjonSøker = 'SØKER_INNLAGT',\n    InstitusjonBarnet = 'BARN_INNLAGT',\n    HvØvelse = 'HV_ØVELSE',\n    NavTiltak = 'NAV_TILTAK',\n    Fri = 'FRI',\n}\n","export enum PeriodeResultatÅrsak {\n    AVSLAG_FRATREKK_PLEIEPENGER = 'AVSLAG_FRATREKK_PLEIEPENGER',\n    AVSLAG_HULL_MELLOM_FORELDRENES_PERIODER = 'AVSLAG_HULL_MELLOM_FORELDRENES_PERIODER',\n    ANNET = 'ANNET',\n}\n","export enum PeriodeHullÅrsak {\n    fridag = 'fridag',\n    avslåttPeriode = 'avslåttPeriode',\n}\n","import { Periodene, sorterPerioder } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport dayjs from 'dayjs';\nimport {\n    isForeldrepengerFørFødselUttaksperiode,\n    isOverskrivbarPeriode,\n    isUtsettelsesperiode,\n    Periode,\n    Uttaksperiode,\n} from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { getPeriodeHullEllerPeriodeUtenUttak, getTidsperiodeMellomPerioder } from './uttaksplanbuilderUtils';\nimport { guid } from '@navikt/fp-common';\n\nconst splittPeriodePåPeriode = (berørtPeriode: Periode, nyPeriode: Periode): Periode[] => {\n    const dagerIBerørtPeriode = Tidsperioden(berørtPeriode.tidsperiode).getAntallUttaksdager();\n\n    const førsteDel: Periode = {\n        ...berørtPeriode,\n        tidsperiode: {\n            fom: berørtPeriode.tidsperiode.fom,\n            tom: Uttaksdagen(nyPeriode.tidsperiode.fom).forrige(),\n        },\n    };\n\n    const dagerIFørsteDel = Tidsperioden(førsteDel.tidsperiode).getAntallUttaksdager();\n    const dagerIAndreDel = dagerIBerørtPeriode - dagerIFørsteDel;\n    const startDatoAndreDel = Uttaksdagen(nyPeriode.tidsperiode.tom).neste();\n\n    if (isOverskrivbarPeriode(berørtPeriode)) {\n        // Hvis berørt periode er overskrivbar, la forskyvPerioder ta seg av logikk for forskyving av datoer\n        const andreDel: Periode = {\n            ...berørtPeriode,\n            id: guid(),\n            tidsperiode: {\n                fom: nyPeriode.tidsperiode.fom,\n                tom: berørtPeriode.tidsperiode.tom,\n            },\n        };\n\n        return [førsteDel, nyPeriode, andreDel];\n    } else {\n        const andreDel: Periode = {\n            ...berørtPeriode,\n            id: guid(),\n            tidsperiode: {\n                fom: startDatoAndreDel,\n                tom: Uttaksdagen(startDatoAndreDel).leggTil(dagerIAndreDel - 1),\n            },\n        };\n\n        return [førsteDel, nyPeriode, andreDel];\n    }\n};\n\nexport const splittPeriodePåDato = (periode: Periode, dato: Date): Periode[] => {\n    const periodeFørDato: Periode = {\n        ...periode,\n        tidsperiode: {\n            fom: periode.tidsperiode.fom,\n            tom: Uttaksdagen(dato).forrige(),\n        },\n    };\n\n    const periodeFraOgMedDato: Periode = {\n        ...periode,\n        id: guid(),\n        tidsperiode: {\n            fom: Uttaksdagen(periodeFørDato.tidsperiode.tom).neste(),\n            tom: periode.tidsperiode.tom,\n        },\n    };\n\n    return [periodeFørDato, periodeFraOgMedDato];\n};\n\nexport const splittUttaksperiodePåFamiliehendelsesdato = (periode: Uttaksperiode, famDato: Date): Uttaksperiode[] => {\n    const periodeFørFamDato: Periode = {\n        ...periode,\n        konto: periode.konto == StønadskontoType.Foreldrepenger ? StønadskontoType.AktivitetsfriKvote : periode.konto,\n        morsAktivitetIPerioden:\n            periode.konto == StønadskontoType.Foreldrepenger ? undefined : periode.morsAktivitetIPerioden,\n        erMorForSyk: periode.konto == StønadskontoType.Foreldrepenger ? undefined : periode.erMorForSyk,\n        tidsperiode: {\n            fom: periode.tidsperiode.fom,\n            tom: Uttaksdagen(famDato).forrige(),\n        },\n    };\n\n    const periodeFraOgMedFamDato: Periode = {\n        ...periode,\n        id: guid(),\n        tidsperiode: {\n            fom: Uttaksdagen(periodeFørFamDato.tidsperiode.tom).neste(),\n            tom: periode.tidsperiode.tom,\n        },\n    };\n\n    return [periodeFørFamDato, periodeFraOgMedFamDato];\n};\n\nconst getAntallOverlappendeUttaksdager = (periode: Periode, nyPeriode: Periode): number => {\n    if (Periodene([periode]).finnOverlappendePerioder(nyPeriode).length > 0) {\n        const dateArray = [\n            dayjs(periode.tidsperiode.fom),\n            dayjs(periode.tidsperiode.tom),\n            dayjs(nyPeriode.tidsperiode.fom),\n            dayjs(nyPeriode.tidsperiode.tom),\n        ];\n        const minDate = dayjs.min(dateArray);\n        const maxDate = dayjs.max(dateArray);\n        const overlappendeTidsperiode = dateArray.filter((date) => date !== minDate && date !== maxDate);\n\n        return Tidsperioden({\n            fom: dayjs.min(overlappendeTidsperiode)!.toDate(),\n            tom: dayjs.max(overlappendeTidsperiode)!.toDate(),\n        }).getAntallUttaksdager();\n    }\n\n    return 0;\n};\n\ninterface LeggTilPeriodeParams {\n    perioder: Periode[];\n    nyPeriode: Periode;\n    familiehendelsesdato: Date;\n    harAktivitetskravIPeriodeUtenUttak: boolean;\n    erAdopsjon: boolean;\n    bareFarHarRett: boolean;\n    erFarEllerMedmor: boolean;\n    førsteUttaksdagNesteBarnsSak: Date | undefined;\n}\n\nexport const leggTilPeriode = ({\n    perioder,\n    nyPeriode,\n    familiehendelsesdato,\n    harAktivitetskravIPeriodeUtenUttak,\n    erAdopsjon,\n    bareFarHarRett,\n    erFarEllerMedmor,\n    førsteUttaksdagNesteBarnsSak,\n}: LeggTilPeriodeParams): Periode[] => {\n    if (perioder.length === 0) {\n        return [nyPeriode];\n    }\n\n    const nyPeriodeFomDate = nyPeriode.tidsperiode.fom;\n    const nyPeriodeTomDate = nyPeriode.tidsperiode.tom;\n\n    if (\n        dayjs(nyPeriodeFomDate).isBefore(familiehendelsesdato, 'day') &&\n        dayjs(nyPeriodeTomDate).isSameOrAfter(familiehendelsesdato, 'day')\n    ) {\n        // Nye perioder skal legges før eller etter famdato ikke begge deler\n        return [...perioder];\n    }\n\n    const berørtPeriode = perioder.find((p) => Tidsperioden(p.tidsperiode).inneholderDato(nyPeriodeFomDate));\n\n    if (berørtPeriode) {\n        if (isUtsettelsesperiode(berørtPeriode) || isForeldrepengerFørFødselUttaksperiode(berørtPeriode)) {\n            // Uttak som legges over utsettelse eller FFF skal ikke tillates av validering. Ignore\n            return [...perioder];\n        }\n\n        const foregåendePerioder = Periodene(perioder).finnAlleForegåendePerioder(berørtPeriode);\n        const påfølgendePerioder = Periodene(perioder).finnAllePåfølgendePerioder(berørtPeriode);\n        const antallDagerINyPeriode = Tidsperioden(nyPeriode.tidsperiode).getAntallUttaksdager();\n\n        if (dayjs(berørtPeriode.tidsperiode.fom).isSame(nyPeriodeFomDate)) {\n            return [\n                ...foregåendePerioder,\n                nyPeriode,\n                ...Periodene([berørtPeriode, ...påfølgendePerioder]).forskyvPerioder(antallDagerINyPeriode),\n            ];\n        }\n\n        const berørtPeriodeSplittetPåNyPeriode = splittPeriodePåPeriode(berørtPeriode, nyPeriode);\n\n        if (isOverskrivbarPeriode(berørtPeriode)) {\n            // Hvis berørt periode er overskrivbar, la forskyvPerioder ta seg av logikk for overskriving\n            return [\n                ...foregåendePerioder,\n                berørtPeriodeSplittetPåNyPeriode[0],\n                berørtPeriodeSplittetPåNyPeriode[1],\n                ...Periodene([berørtPeriodeSplittetPåNyPeriode[2], ...påfølgendePerioder]).forskyvPerioder(\n                    antallDagerINyPeriode,\n                ),\n            ];\n        }\n\n        return [\n            ...foregåendePerioder,\n            ...berørtPeriodeSplittetPåNyPeriode,\n            ...Periodene(påfølgendePerioder).forskyvPerioder(antallDagerINyPeriode),\n        ];\n    } else {\n        const førstePeriode = perioder[0];\n        const sistePeriode = perioder[perioder.length - 1];\n        const nyPeriodeFom = dayjs(nyPeriode.tidsperiode.fom);\n        const nyPeriodeTom = dayjs(nyPeriode.tidsperiode.tom);\n\n        if (nyPeriodeFom.isBefore(førstePeriode.tidsperiode.fom, 'day')) {\n            const tidsperiodeMellomNyPeriodeOgFørstePeriode = getTidsperiodeMellomPerioder(\n                nyPeriode.tidsperiode,\n                førstePeriode.tidsperiode,\n            );\n\n            if (nyPeriodeTom.isSameOrAfter(førstePeriode.tidsperiode.fom, 'day')) {\n                if (nyPeriodeFom.isBefore(familiehendelsesdato, 'day')) {\n                    // Kan ikke overlappe perioder før fødsel\n                    return [...perioder];\n                }\n\n                const antallOverlappendeUttaksdager = getAntallOverlappendeUttaksdager(førstePeriode, nyPeriode);\n\n                return [nyPeriode, ...Periodene(perioder).forskyvPerioder(antallOverlappendeUttaksdager)];\n            }\n\n            if (tidsperiodeMellomNyPeriodeOgFørstePeriode) {\n                return [\n                    nyPeriode,\n                    ...getPeriodeHullEllerPeriodeUtenUttak(\n                        tidsperiodeMellomNyPeriodeOgFørstePeriode,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        familiehendelsesdato,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        førsteUttaksdagNesteBarnsSak,\n                    ),\n                    ...perioder,\n                ];\n            }\n\n            return [nyPeriode, ...perioder];\n        } else {\n            const tidsperiodeMellomSistePeriodeOgNyPeriode = getTidsperiodeMellomPerioder(\n                sistePeriode.tidsperiode,\n                nyPeriode.tidsperiode,\n            );\n\n            if (tidsperiodeMellomSistePeriodeOgNyPeriode) {\n                return [\n                    ...perioder,\n                    ...getPeriodeHullEllerPeriodeUtenUttak(\n                        tidsperiodeMellomSistePeriodeOgNyPeriode,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        familiehendelsesdato,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        førsteUttaksdagNesteBarnsSak,\n                    ),\n                    nyPeriode,\n                ];\n            }\n\n            return [...perioder, nyPeriode].sort(sorterPerioder);\n        }\n    }\n};\n","import { TidsperiodeDate, guid } from '@navikt/fp-common';\nimport { Perioden } from 'app/steps/uttaksplan-info/utils/Perioden';\nimport { Periodene, sorterPerioder } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport {\n    // ANTALL_UTTAKSDAGER_SEKS_UKER,\n    isValidTidsperiode,\n    Tidsperioden,\n} from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport {\n    andreAugust2022ReglerGjelder,\n    førsteOktober2021ReglerGjelder,\n    tidperiodeOverlapperDato,\n} from 'app/utils/dateUtils';\nimport dayjs from 'dayjs';\nimport {\n    isHull,\n    isPeriodeUtenUttak,\n    isPeriodeUtenUttakUtsettelse,\n    isUtsettelseAnnenPart,\n    isUttaksperiode,\n    Periode,\n    PeriodeHull,\n    Periodetype,\n    PeriodeUtenUttak,\n} from 'uttaksplan/types/Periode';\nimport { PeriodeHullÅrsak } from 'uttaksplan/types/PeriodeHullÅrsak';\nimport { splittPeriodePåDato } from './leggTilPeriode';\n\nexport const slåSammenLikePerioder = (\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n    annenPartsUttak?: Periode[]\n): Periode[] => {\n    if (perioder.length <= 1) {\n        return perioder;\n    }\n    const nyePerioder: Periode[] = [];\n    let forrigePeriode: Periode | undefined = { ...perioder[0] };\n    perioder.forEach((periode, index) => {\n        if (index === 0) {\n            return;\n        }\n        if (forrigePeriode === undefined) {\n            forrigePeriode = periode;\n            return;\n        }\n        if (\n            Perioden(forrigePeriode).erLik(periode, false, true) &&\n            Perioden(forrigePeriode).erSammenhengende(periode)\n        ) {\n            if (\n                annenPartsUttak &&\n                isUttaksperiode(periode) &&\n                periode.ønskerSamtidigUttak &&\n                isUttaksperiode(forrigePeriode) &&\n                forrigePeriode.ønskerSamtidigUttak\n            ) {\n                const overlappendePerioderAnnenPartForrigePeriode =\n                    Periodene(annenPartsUttak).finnOverlappendePerioder(forrigePeriode);\n                const overlappendePerioderAnnenPart = Periodene(annenPartsUttak).finnOverlappendePerioder(periode);\n\n                if (\n                    (overlappendePerioderAnnenPart.length === 0 &&\n                        overlappendePerioderAnnenPartForrigePeriode.length > 0) ||\n                    (overlappendePerioderAnnenPart.length > 0 &&\n                        overlappendePerioderAnnenPartForrigePeriode.length === 0)\n                ) {\n                    nyePerioder.push(forrigePeriode);\n                    forrigePeriode = periode;\n                    return;\n                }\n            }\n\n            if (\n                (dayjs(forrigePeriode.tidsperiode.tom).isBefore(familiehendelsesdato, 'day') &&\n                    dayjs(periode.tidsperiode.tom).isSameOrAfter(\n                        Uttaksdagen(familiehendelsesdato).denneEllerNeste()\n                    )) ||\n                (førsteUttaksdagNesteBarnsSak !== undefined &&\n                    dayjs(forrigePeriode.tidsperiode.tom).isBefore(førsteUttaksdagNesteBarnsSak, 'day') &&\n                    dayjs(periode.tidsperiode.fom).isSameOrAfter(\n                        Uttaksdagen(førsteUttaksdagNesteBarnsSak).denneEllerNeste(),\n                        'day'\n                    ))\n            ) {\n                nyePerioder.push(forrigePeriode);\n                forrigePeriode = periode;\n                return;\n            }\n\n            const nyTidsperiode = {\n                fom: forrigePeriode.tidsperiode.fom,\n                tom: periode.tidsperiode.tom,\n            };\n\n            forrigePeriode.tidsperiode = { ...nyTidsperiode };\n            return;\n        } else {\n            nyePerioder.push(forrigePeriode);\n        }\n        forrigePeriode = periode;\n    });\n    nyePerioder.push(forrigePeriode);\n\n    return nyePerioder;\n};\n\nconst getSplittetPeriodeOmNødvendig = (\n    nyHullPeriode: PeriodeHull | PeriodeUtenUttak,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n): Array<PeriodeHull | PeriodeUtenUttak> => {\n    if (\n        førsteUttaksdagNesteBarnsSak !== undefined &&\n        tidperiodeOverlapperDato(nyHullPeriode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n    ) {\n        return splittPeriodePåDato(nyHullPeriode, førsteUttaksdagNesteBarnsSak) as Array<\n            PeriodeHull | PeriodeUtenUttak\n        >;\n    }\n    return [nyHullPeriode];\n};\n\nexport const getPeriodeHullEllerPeriodeUtenUttak = (\n    tidsperiode: TidsperiodeDate,\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    familiehendelsesdato: Date,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n    årsak: PeriodeHullÅrsak = PeriodeHullÅrsak.fridag\n): Array<PeriodeHull | PeriodeUtenUttak> => {\n    const skalLeggeInnPerioderUtenUttak = førsteOktober2021ReglerGjelder(familiehendelsesdato);\n\n    if (skalLeggeInnPerioderUtenUttak) {\n        const ANTALL_UTTAKSDAGER_SEKS_UKER = 30;\n        const førsteUttaksdagFamiliehendelsesdato = Uttaksdagen(familiehendelsesdato).denneEllerNeste();\n        const førsteUttaksdagEtterSeksUker = Uttaksdagen(førsteUttaksdagFamiliehendelsesdato).leggTil(\n            ANTALL_UTTAKSDAGER_SEKS_UKER\n        );\n        const tidsperiodeErInnenFørsteSeksUker =\n            Tidsperioden(tidsperiode).erInnenforFørsteSeksUker(familiehendelsesdato);\n\n        const farMedmorBeholderDagerIkkeTattUtDeFørsteSeksUkene =\n            dayjs(tidsperiode.fom).isBefore(førsteUttaksdagEtterSeksUker, 'day') &&\n            !erAdopsjon &&\n            ((bareFarHarRett && førsteOktober2021ReglerGjelder(familiehendelsesdato)) ||\n                (erFarEllerMedmor && andreAugust2022ReglerGjelder(familiehendelsesdato)));\n\n        if (harAktivitetskravIPeriodeUtenUttak && !farMedmorBeholderDagerIkkeTattUtDeFørsteSeksUkene) {\n            return getSplittetPeriodeOmNødvendig(getPeriodeHull(tidsperiode, årsak), førsteUttaksdagNesteBarnsSak);\n        }\n\n        if (dayjs(tidsperiode.fom).isBefore(familiehendelsesdato, 'day')) {\n            return getSplittetPeriodeOmNødvendig(getNyPeriodeUtenUttak(tidsperiode), førsteUttaksdagNesteBarnsSak);\n        }\n\n        if (tidsperiodeErInnenFørsteSeksUker && !erAdopsjon) {\n            if (dayjs(tidsperiode.tom).isBefore(førsteUttaksdagEtterSeksUker, 'day')) {\n                if (\n                    (bareFarHarRett && førsteOktober2021ReglerGjelder(familiehendelsesdato)) ||\n                    (erFarEllerMedmor && andreAugust2022ReglerGjelder(familiehendelsesdato))\n                ) {\n                    return [getNyPeriodeUtenUttak(tidsperiode)];\n                }\n                return [getPeriodeHull(tidsperiode, årsak)];\n            }\n\n            const antallDagerFraFomTilFørsteUttaksdagSeksUker =\n                Tidsperioden({ fom: tidsperiode.fom, tom: førsteUttaksdagEtterSeksUker }).getAntallUttaksdager() - 2;\n\n            const nyPeriodeUtenUttakTidsperiodeLengde =\n                Tidsperioden(tidsperiode).getAntallUttaksdager() - antallDagerFraFomTilFørsteUttaksdagSeksUker;\n\n            const førsteSeksUkerTidsperiode: TidsperiodeDate = {\n                fom: tidsperiode.fom,\n                tom: Uttaksdagen(førsteUttaksdagEtterSeksUker).leggTil(-1),\n            };\n\n            const etterFørsteSeksUkerTidsperiode: TidsperiodeDate = {\n                fom: førsteUttaksdagEtterSeksUker,\n                tom: Uttaksdagen(førsteUttaksdagEtterSeksUker).leggTil(nyPeriodeUtenUttakTidsperiodeLengde - 2),\n            };\n\n            if (\n                (bareFarHarRett && førsteOktober2021ReglerGjelder(familiehendelsesdato)) ||\n                (erFarEllerMedmor && andreAugust2022ReglerGjelder(familiehendelsesdato))\n            ) {\n                if (erFarEllerMedmor && !bareFarHarRett) {\n                    return [getNyPeriodeUtenUttak(tidsperiode)];\n                }\n\n                const periodeUtenUttak = getNyPeriodeUtenUttak(førsteSeksUkerTidsperiode);\n                const periodeHull = getPeriodeHull(etterFørsteSeksUkerTidsperiode, årsak);\n                return [periodeUtenUttak, periodeHull];\n            }\n\n            const periodeHull = getPeriodeHull(førsteSeksUkerTidsperiode, årsak);\n            const periodeUtenUttak = getNyPeriodeUtenUttak(etterFørsteSeksUkerTidsperiode);\n\n            return [periodeHull, periodeUtenUttak];\n        }\n\n        return getSplittetPeriodeOmNødvendig(getNyPeriodeUtenUttak(tidsperiode), førsteUttaksdagNesteBarnsSak);\n    }\n\n    return getSplittetPeriodeOmNødvendig(getPeriodeHull(tidsperiode, årsak), førsteUttaksdagNesteBarnsSak);\n};\n\nexport const getPeriodeHull = (tidsperiode: TidsperiodeDate, årsak?: PeriodeHullÅrsak): PeriodeHull => ({\n    id: guid(),\n    type: Periodetype.Hull,\n    tidsperiode,\n    årsak,\n});\n\nexport const getNyPeriodeUtenUttak = (tidsperiode: TidsperiodeDate): PeriodeUtenUttak => ({\n    id: guid(),\n    type: Periodetype.PeriodeUtenUttak,\n    tidsperiode,\n});\n\nexport const getTidsperiodeMellomPerioder = (\n    tidsperiode1: TidsperiodeDate,\n    tidsperiode2: TidsperiodeDate\n): TidsperiodeDate | undefined => {\n    const tidsperiodeMellomPerioder: TidsperiodeDate = {\n        fom: Uttaksdagen(tidsperiode1.tom).neste(),\n        tom: Uttaksdagen(tidsperiode2.fom).forrige(),\n    };\n\n    const antallDagerIMellomrom = Tidsperioden(tidsperiodeMellomPerioder).getAntallUttaksdager();\n\n    if (isValidTidsperiode(tidsperiodeMellomPerioder) && antallDagerIMellomrom > 0) {\n        return tidsperiodeMellomPerioder;\n    }\n\n    return undefined;\n};\n\nexport const fjernUnødvendigeHull = (perioder: Periode[]) => {\n    return perioder.reduce((res, periode, index) => {\n        if (index === 0) {\n            if (isPeriodeUtenUttak(periode)) {\n                return res;\n            }\n        }\n\n        if (index === perioder.length - 1) {\n            if (isHull(periode) || isPeriodeUtenUttak(periode)) {\n                return res;\n            }\n\n            res.push(periode);\n            return res;\n        }\n\n        res.push(periode);\n        return res;\n    }, [] as Periode[]);\n};\n\nexport const finnOgSettInnHull = (\n    perioder: Periode[],\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    familiehendelsesdato: Date,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n) => {\n    if (perioder.length === 0) {\n        return perioder;\n    }\n\n    const result = perioder.reduce((res, periode, index) => {\n        if (index === 0 && erFarEllerMedmor) {\n            const førsteUttaksdagFamiliehendelsesdato = Uttaksdagen(familiehendelsesdato).denneEllerNeste();\n            if (dayjs(førsteUttaksdagFamiliehendelsesdato).isBefore(periode.tidsperiode.fom)) {\n                const tidsperiodeMellom6ukerEtterFødselOgPerioden: TidsperiodeDate = {\n                    fom: førsteUttaksdagFamiliehendelsesdato,\n                    tom: Uttaksdagen(periode.tidsperiode.fom).forrige(),\n                };\n                const uttaksdagerITidsperiode = Tidsperioden(\n                    tidsperiodeMellom6ukerEtterFødselOgPerioden\n                ).getAntallUttaksdager();\n\n                if (uttaksdagerITidsperiode > 0) {\n                    res.push(\n                        ...getPeriodeHullEllerPeriodeUtenUttak(\n                            tidsperiodeMellom6ukerEtterFødselOgPerioden,\n                            harAktivitetskravIPeriodeUtenUttak,\n                            familiehendelsesdato,\n                            erAdopsjon,\n                            bareFarHarRett,\n                            erFarEllerMedmor,\n                            førsteUttaksdagNesteBarnsSak\n                        )\n                    );\n                }\n            }\n        }\n\n        res.push(periode);\n\n        if (index === perioder.length - 1) {\n            return res;\n        }\n\n        const nestePeriode = perioder[index + 1];\n\n        const tidsperiodeMellomPerioder: TidsperiodeDate = {\n            fom: Uttaksdagen(periode.tidsperiode.tom).neste(),\n            tom: Uttaksdagen(nestePeriode.tidsperiode.fom).forrige(),\n        };\n\n        if (dayjs(tidsperiodeMellomPerioder.tom).isBefore(tidsperiodeMellomPerioder.fom, 'day')) {\n            return res;\n        }\n\n        if (!erFarEllerMedmor && dayjs(tidsperiodeMellomPerioder.tom).isBefore(familiehendelsesdato, 'day')) {\n            return res;\n        }\n\n        const uttaksdagerITidsperiode = Tidsperioden(tidsperiodeMellomPerioder).getAntallUttaksdager();\n\n        if (uttaksdagerITidsperiode > 0) {\n            res.push(\n                ...getPeriodeHullEllerPeriodeUtenUttak(\n                    tidsperiodeMellomPerioder,\n                    harAktivitetskravIPeriodeUtenUttak,\n                    familiehendelsesdato,\n                    erAdopsjon,\n                    bareFarHarRett,\n                    erFarEllerMedmor,\n                    førsteUttaksdagNesteBarnsSak\n                )\n            );\n        }\n\n        return res;\n    }, [] as Periode[]);\n\n    return result;\n};\n\ninterface SplittetDatoType {\n    dato: Date;\n    erFom: boolean;\n}\n\nconst splittPeriodePåDatoer = (periode: Periode, alleDatoer: SplittetDatoType[]) => {\n    const datoerIPerioden = alleDatoer.filter((datoWrapper) =>\n        Tidsperioden(periode.tidsperiode).inneholderDato(datoWrapper.dato)\n    );\n    const oppsplittetPeriode: Periode[] = [];\n\n    if (datoerIPerioden.length === 2) {\n        return [periode];\n    }\n\n    datoerIPerioden.forEach((datoWrapper, index) => {\n        if (index === 0) {\n            oppsplittetPeriode.push({\n                ...periode,\n                tidsperiode: { fom: datoWrapper.dato, tom: undefined! },\n            });\n            return;\n        }\n\n        oppsplittetPeriode[index - 1].tidsperiode.tom = datoWrapper.erFom\n            ? Uttaksdagen(datoWrapper.dato).forrige()\n            : datoWrapper.dato;\n\n        if (index < datoerIPerioden.length - 1) {\n            oppsplittetPeriode.push({\n                ...periode,\n                id: guid(),\n                tidsperiode: {\n                    fom: datoWrapper.erFom ? datoWrapper.dato : Uttaksdagen(datoWrapper.dato).neste(),\n                    tom: undefined!,\n                },\n            });\n        }\n    });\n\n    return oppsplittetPeriode.filter((p) => isValidTidsperiode(p.tidsperiode));\n};\n\n// Funksjon som gjør at alle perioder overlapper 1 til 1\nexport const normaliserPerioder = (perioder: Periode[], annenPartsUttak: Periode[]) => {\n    const perioderTidsperioder: SplittetDatoType[] = perioder\n        .filter((per) => isValidTidsperiode(per.tidsperiode))\n        .reduce((res, p) => {\n            res.push({ dato: p.tidsperiode.fom, erFom: true });\n            res.push({ dato: p.tidsperiode.tom, erFom: false });\n            return res;\n        }, [] as SplittetDatoType[]);\n    const annenPartsUttakTidsperioder = annenPartsUttak.reduce((res, p) => {\n        res.push({ dato: p.tidsperiode.fom, erFom: true });\n        res.push({ dato: p.tidsperiode.tom, erFom: false });\n        return res;\n    }, [] as SplittetDatoType[]);\n\n    const alleDatoer = perioderTidsperioder.concat(annenPartsUttakTidsperioder).sort((d1, d2) => {\n        if (d1.dato.getTime() - d2.dato.getTime() === 0) {\n            if (!d1.erFom) {\n                return 1;\n            }\n\n            if (!d2.erFom) {\n                return -1;\n            }\n        }\n\n        return d1.dato.getTime() - d2.dato.getTime();\n    });\n\n    const alleUnikeDatoer = alleDatoer.filter(\n        (date, i, self) =>\n            self.findIndex((d) => d.dato.getTime() === date.dato.getTime() && d.erFom === date.erFom) === i\n    );\n\n    const normaliserteEgnePerioder: Periode[] = [];\n    const normaliserteAnnenPartsPerioder: Periode[] = [];\n\n    perioder.forEach((p) => {\n        const oppsplittetPeriode = splittPeriodePåDatoer(p, alleUnikeDatoer);\n        normaliserteEgnePerioder.push(...oppsplittetPeriode);\n    });\n\n    annenPartsUttak.forEach((p) => {\n        const oppsplittetPeriode = splittPeriodePåDatoer(p, alleUnikeDatoer);\n        normaliserteAnnenPartsPerioder.push(...oppsplittetPeriode);\n    });\n\n    return {\n        normaliserteEgnePerioder,\n        normaliserteAnnenPartsPerioder,\n    };\n};\n\nexport const settInnAnnenPartsUttak = (\n    perioder: Periode[],\n    annenPartsUttak: Periode[],\n    familiehendelsesdato: Date,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n    initiellMappingFraSaksperioder = false\n) => {\n    if (annenPartsUttak.length === 0) {\n        return perioder;\n    }\n\n    if (perioder.length === 0) {\n        return annenPartsUttak;\n    }\n\n    const { normaliserteEgnePerioder, normaliserteAnnenPartsPerioder } = normaliserPerioder(perioder, annenPartsUttak);\n\n    const result = normaliserteEgnePerioder.reduce((res, p) => {\n        const overlappendePerioderAnnenPart = Periodene(normaliserteAnnenPartsPerioder).finnOverlappendePerioder(p);\n\n        if (overlappendePerioderAnnenPart.length === 0) {\n            if (isUttaksperiode(p) && p.ønskerSamtidigUttak && initiellMappingFraSaksperioder) {\n                res.push({\n                    ...p,\n                    ønskerSamtidigUttak: false,\n                });\n\n                return res;\n            }\n\n            res.push(p);\n\n            return res;\n        }\n\n        if (isPeriodeUtenUttak(p) || isPeriodeUtenUttakUtsettelse(p) || isHull(p)) {\n            const overlappendePeriode = overlappendePerioderAnnenPart[0];\n\n            res.push({ ...overlappendePeriode, visPeriodeIPlan: true } as Periode);\n            return res;\n        }\n\n        if (isUttaksperiode(p) && p.ønskerSamtidigUttak) {\n            const overlappendePeriode = overlappendePerioderAnnenPart[0];\n            res.push(p);\n\n            if (!isUtsettelseAnnenPart(overlappendePeriode)) {\n                res.push({ ...overlappendePeriode, visPeriodeIPlan: false, ønskerSamtidigUttak: true } as Periode);\n            }\n\n            return res;\n        } else {\n            res.push(p);\n            return res;\n        }\n    }, [] as Periode[]);\n\n    result.sort(sorterPerioder);\n\n    const førstePeriodeStartdato = perioder[0].tidsperiode.fom;\n    const annenPartsUttakSomSlutterFørFørstePeriode = normaliserteAnnenPartsPerioder.filter((ap) =>\n        dayjs(ap.tidsperiode.tom).isBefore(førstePeriodeStartdato, 'day')\n    );\n\n    const sistePeriodeSluttdato = perioder[perioder.length - 1].tidsperiode.tom;\n    const annenPartsUttakSomStarterEtterSistePeriode = normaliserteAnnenPartsPerioder.filter((ap) =>\n        dayjs(ap.tidsperiode.fom).isAfter(sistePeriodeSluttdato, 'day')\n    );\n\n    return slåSammenLikePerioder(\n        [...annenPartsUttakSomSlutterFørFørstePeriode, ...result, ...annenPartsUttakSomStarterEtterSistePeriode],\n        familiehendelsesdato,\n        førsteUttaksdagNesteBarnsSak,\n        annenPartsUttak\n    );\n};\n","import dayjs from 'dayjs';\nimport {\n    AvslåttPeriode,\n    isInfoPeriode,\n    isUttaksperiode,\n    Overføringsperiode,\n    Periode,\n    Periodetype,\n    UtsettelseAnnenPartInfoPeriode,\n    Utsettelsesperiode,\n    UttakAnnenPartInfoPeriode,\n    Uttaksperiode,\n} from 'uttaksplan/types/Periode';\nimport { Perioden } from 'app/steps/uttaksplan-info/utils/Perioden';\nimport { isValidTidsperiode, Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { sorterPerioder } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { erUttaksdag, Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { Saksperiode } from 'app/types/Saksperiode';\nimport { Forelder } from 'app/types/Forelder';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { Saksgrunnlag } from 'app/types/Saksgrunnlag';\nimport { getArbeidsformFromUttakArbeidstype } from './eksisterendeSakUtils';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\nimport {\n    convertTidsperiodeToTidsperiodeDate,\n    getRelevantFamiliehendelseDato,\n    ISOStringToDate,\n    tidperiodeOverlapperDato,\n} from './dateUtils';\nimport { UtsettelseÅrsakTypeDTO } from 'app/types/UtsettelseÅrsakTypeDTO';\nimport { FamiliehendelseType } from 'app/types/FamiliehendelseType';\nimport { PeriodeResultatÅrsak } from 'uttaksplan/types/PeriodeResultatÅrsak';\nimport { finnOgSettInnHull, settInnAnnenPartsUttak } from 'uttaksplan/builder/uttaksplanbuilderUtils';\nimport { MorsAktivitet } from 'uttaksplan/types/MorsAktivitet';\nimport { splittUttaksperiodePåFamiliehendelsesdato, splittPeriodePåDato } from 'uttaksplan/builder/leggTilPeriode';\nimport { PeriodeInfoType } from 'uttaksplan/types/PeriodeInfoType';\nimport { OppholdÅrsakType } from 'uttaksplan/types/OppholdÅrsakType';\nimport { guid } from '@navikt/fp-common';\n\nconst harUttaksdager = (periode: Periode): boolean => {\n    return Perioden(periode).getAntallUttaksdager() > 0;\n};\n\nconst harGyldigTidsperiode = (periode: Periode): boolean => {\n    return isValidTidsperiode(periode.tidsperiode);\n};\n\nconst slåSammenLikePerioder = (\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n): Periode[] => {\n    if (perioder.length <= 1) {\n        return perioder;\n    }\n\n    const nyePerioder: Periode[] = [];\n    const infoPerioder = perioder.filter((p) => isInfoPeriode(p));\n    const ordinærePerioder = perioder.filter((p) => !isInfoPeriode(p));\n    const tmp: Periode[] = [...ordinærePerioder, ...infoPerioder];\n    let forrigePeriode: Periode | undefined = { ...tmp[0] };\n\n    tmp.forEach((periode, index) => {\n        if (index === 0) {\n            return;\n        }\n\n        if (forrigePeriode === undefined) {\n            forrigePeriode = periode;\n            return;\n        }\n\n        if (\n            Perioden(forrigePeriode).erLik(periode, false, true) &&\n            Perioden(forrigePeriode).erSammenhengende(periode) &&\n            !dayjs(periode.tidsperiode.fom).isSame(familiehendelsesdato, 'day') &&\n            !(\n                førsteUttaksdagNesteBarnsSak !== undefined &&\n                dayjs(periode.tidsperiode.fom).isSame(førsteUttaksdagNesteBarnsSak, 'day')\n            )\n        ) {\n            forrigePeriode.tidsperiode.tom = periode.tidsperiode.tom;\n            return;\n        } else {\n            nyePerioder.push(forrigePeriode);\n        }\n\n        forrigePeriode = periode;\n    });\n\n    nyePerioder.push(forrigePeriode);\n\n    return nyePerioder.sort(sorterPerioder);\n};\n\nconst korrigerTidsperiodeTilGyldigUttaksdag = (periode: Periode): Periode => {\n    const { fom, tom } = periode.tidsperiode;\n    const fomOk = erUttaksdag(fom);\n    const tomOk = erUttaksdag(tom);\n    if (fomOk && tomOk) {\n        return periode;\n    } else if (!fomOk && !tomOk) {\n        return {\n            ...periode,\n            tidsperiode: {\n                fom: Uttaksdagen(fom).neste(),\n                tom: Uttaksdagen(tom).forrige(),\n            },\n        };\n    } else if (!fomOk && tomOk) {\n        return {\n            ...periode,\n            tidsperiode: {\n                fom: Uttaksdagen(fom).neste(),\n                tom,\n            },\n        };\n    } else {\n        return {\n            ...periode,\n            tidsperiode: {\n                fom,\n                tom: Uttaksdagen(tom).forrige(),\n            },\n        };\n    }\n};\n\nconst getForelderForPeriode = (saksperiode: Saksperiode, søkerErFarEllerMedmor: boolean): Forelder => {\n    if (saksperiode.gjelderAnnenPart) {\n        return søkerErFarEllerMedmor ? Forelder.mor : Forelder.farMedmor;\n    }\n    return søkerErFarEllerMedmor ? Forelder.farMedmor : Forelder.mor;\n};\n\nexport const getUtsettelseÅrsakFromSaksperiode = (\n    årsak: UtsettelseÅrsakTypeDTO | undefined\n): UtsettelseÅrsakType | undefined => {\n    switch (årsak) {\n        case UtsettelseÅrsakTypeDTO.Arbeid:\n            return UtsettelseÅrsakType.Arbeid;\n        case UtsettelseÅrsakTypeDTO.Ferie:\n            return UtsettelseÅrsakType.Ferie;\n        case UtsettelseÅrsakTypeDTO.InstitusjonBarnet:\n            return UtsettelseÅrsakType.InstitusjonBarnet;\n        case UtsettelseÅrsakTypeDTO.InstitusjonSøker:\n            return UtsettelseÅrsakType.InstitusjonSøker;\n        case UtsettelseÅrsakTypeDTO.Sykdom:\n            return UtsettelseÅrsakType.Sykdom;\n        case UtsettelseÅrsakTypeDTO.HvØvelse:\n            return UtsettelseÅrsakType.HvØvelse;\n        case UtsettelseÅrsakTypeDTO.NavTiltak:\n            return UtsettelseÅrsakType.NavTiltak;\n        case UtsettelseÅrsakTypeDTO.Fri:\n            return UtsettelseÅrsakType.Fri;\n        default:\n            return undefined;\n    }\n};\n\nconst getOppholdÅrsakFromSaksperiode = (saksperiode: Saksperiode): OppholdÅrsakType | undefined => {\n    switch (saksperiode.kontoType) {\n        case StønadskontoType.Fedrekvote:\n            return OppholdÅrsakType.UttakFedrekvoteAnnenForelder;\n        case StønadskontoType.Fellesperiode:\n            return OppholdÅrsakType.UttakFellesperiodeAnnenForelder;\n        case StønadskontoType.Mødrekvote:\n            return OppholdÅrsakType.UttakMødrekvoteAnnenForelder;\n        case StønadskontoType.Foreldrepenger:\n            return OppholdÅrsakType.UttakForeldrepengerAnnenForelder;\n        case StønadskontoType.ForeldrepengerFørFødsel:\n            return OppholdÅrsakType.ForeldrepengerFørFødsel;\n        default:\n            return undefined;\n    }\n};\n\nconst beregnSamtidigUttaksProsent = (\n    egenProsent: number | undefined,\n    andrePartsProsent: number | undefined,\n    graderingsprosent: number | undefined\n): string | undefined => {\n    if (egenProsent) {\n        return egenProsent.toString();\n    }\n\n    if (andrePartsProsent) {\n        return graderingsprosent ? (100 - graderingsprosent).toString() : '100';\n    }\n\n    return undefined;\n};\n\nexport const getKontotypeBareFarHarRett = (periodeTrekkerMinsterett: boolean): StønadskontoType => {\n    return periodeTrekkerMinsterett ? StønadskontoType.AktivitetsfriKvote : StønadskontoType.Foreldrepenger;\n};\n\nconst getErMorForSyk = (\n    erFarEllerMedmor: boolean,\n    saksperiode: Saksperiode,\n    familiehendelsesdato: string,\n    konto: StønadskontoType | undefined\n) => {\n    if (\n        erFarEllerMedmor &&\n        !saksperiode.flerbarnsdager &&\n        !saksperiode.samtidigUttak &&\n        dayjs(saksperiode.periode.fom).isBefore(dayjs(familiehendelsesdato).add(6, 'weeks'), 'day') &&\n        konto !== StønadskontoType.AktivitetsfriKvote\n    ) {\n        if (saksperiode.morsAktivitet !== MorsAktivitet.Uføre) {\n            return true;\n        }\n    }\n\n    return undefined;\n};\n\nexport const mapUttaksperiodeFromSaksperiode = (\n    saksperiode: Saksperiode,\n    grunnlag: Saksgrunnlag,\n    innvilgedePerioder: Saksperiode[]\n): Periode => {\n    const gradert = saksperiode.gradering !== undefined && saksperiode.resultat.innvilget;\n    const tidsperiodeDate = convertTidsperiodeToTidsperiodeDate(saksperiode.periode);\n    const erFarEllerMedmorOgKunSøkerHarRett =\n        grunnlag.søkerErFarEllerMedmor &&\n        !grunnlag.morHarRett &&\n        !grunnlag.farMedmorErAleneOmOmsorg &&\n        !grunnlag.harAnnenForelderTilsvarendeRettEØS;\n\n    const annenPartSamtidigUttakPeriode: Saksperiode | undefined =\n        innvilgedePerioder !== undefined\n            ? innvilgedePerioder.find(\n                  (ip) =>\n                      (Tidsperioden(convertTidsperiodeToTidsperiodeDate(ip.periode)).erLik(tidsperiodeDate) ||\n                          Tidsperioden(convertTidsperiodeToTidsperiodeDate(ip.periode)).overlapper(tidsperiodeDate)) &&\n                      ip.guid !== saksperiode.guid\n              )\n            : undefined;\n\n    let samtidigUttakProsentAnnenPart;\n\n    if (annenPartSamtidigUttakPeriode) {\n        samtidigUttakProsentAnnenPart = annenPartSamtidigUttakPeriode.samtidigUttak;\n    }\n\n    const samtidigUttakProsent = beregnSamtidigUttaksProsent(\n        saksperiode.samtidigUttak,\n        samtidigUttakProsentAnnenPart,\n        saksperiode.gradering?.arbeidstidprosent\n    );\n\n    const { termindato, fødselsdato, omsorgsovertakelsesdato } = grunnlag;\n\n    const familiehendelseDato = getRelevantFamiliehendelseDato(termindato, fødselsdato, omsorgsovertakelsesdato);\n    const kontoType = erFarEllerMedmorOgKunSøkerHarRett\n        ? getKontotypeBareFarHarRett(saksperiode.resultat.trekkerMinsterett)\n        : saksperiode.kontoType;\n    const uttaksperiode: Uttaksperiode = {\n        id: guid(),\n        type: Periodetype.Uttak,\n        konto: kontoType!,\n        tidsperiode: tidsperiodeDate,\n        forelder: getForelderForPeriode(saksperiode, grunnlag.søkerErFarEllerMedmor),\n        ønskerSamtidigUttak: saksperiode.samtidigUttak !== undefined,\n        gradert,\n        samtidigUttakProsent,\n        ønskerFlerbarnsdager: grunnlag.antallBarn > 1 ? saksperiode.flerbarnsdager : undefined,\n        stillingsprosent: gradert ? saksperiode.gradering!.arbeidstidprosent.toString() : undefined,\n        arbeidsformer: gradert\n            ? [getArbeidsformFromUttakArbeidstype(saksperiode.gradering!.aktivitet.type)]\n            : undefined,\n        orgnumre:\n            gradert && saksperiode.gradering!.aktivitet.arbeidsgiver !== undefined\n                ? [saksperiode.gradering!.aktivitet.arbeidsgiver.id]\n                : undefined,\n        morsAktivitetIPerioden: saksperiode.morsAktivitet,\n        erMorForSyk: getErMorForSyk(grunnlag.søkerErFarEllerMedmor, saksperiode, familiehendelseDato, kontoType),\n        angittAvAnnenPart: saksperiode.angittAvAnnenPart,\n    };\n\n    return uttaksperiode;\n};\n\nconst mapUtsettelseperiodeFromSaksperiode = (saksperiode: Saksperiode, erFarEllerMedmor: boolean): Periode => {\n    const utsettelsesperiode: Utsettelsesperiode = {\n        id: guid(),\n        type: Periodetype.Utsettelse,\n        årsak: getUtsettelseÅrsakFromSaksperiode(saksperiode.utsettelseÅrsak)!,\n        tidsperiode: convertTidsperiodeToTidsperiodeDate(saksperiode.periode),\n        forelder: getForelderForPeriode(saksperiode, erFarEllerMedmor),\n        erArbeidstaker: false,\n        morsAktivitetIPerioden: saksperiode.morsAktivitet,\n    };\n\n    return utsettelsesperiode;\n};\n\nconst mapInfoPeriodeFromAvslåttSaksperiode = (saksperiode: Saksperiode, erFarEllerMedmor: boolean): AvslåttPeriode => {\n    const avslåttPeriode: AvslåttPeriode = {\n        id: guid(),\n        type: Periodetype.Info,\n        infotype: PeriodeInfoType.avslåttPeriode,\n        tidsperiode: convertTidsperiodeToTidsperiodeDate(saksperiode.periode),\n        avslåttPeriodeType: saksperiode.utsettelseÅrsak !== undefined ? Periodetype.Utsettelse : Periodetype.Uttak,\n        kontoType: saksperiode.kontoType,\n        forelder: getForelderForPeriode(saksperiode, erFarEllerMedmor),\n        overskrives: true,\n        visPeriodeIPlan: true,\n        kanSlettes: saksperiode.resultat.årsak !== PeriodeResultatÅrsak.AVSLAG_FRATREKK_PLEIEPENGER,\n    };\n    return avslåttPeriode;\n};\n\nconst mapAnnenPartInfoPeriodeFromSaksperiode = (\n    saksperiode: Saksperiode,\n    erFarEllerMedmor: boolean,\n    termindato: string | undefined,\n    innvilgedePerioder?: Saksperiode[]\n): UttakAnnenPartInfoPeriode | UtsettelseAnnenPartInfoPeriode | AvslåttPeriode => {\n    const tidsperiodeDate = convertTidsperiodeToTidsperiodeDate(saksperiode.periode);\n\n    if (saksperiode.utsettelseÅrsak !== undefined && saksperiode.resultat.innvilget === true) {\n        return {\n            type: Periodetype.Info,\n            infotype: PeriodeInfoType.utsettelseAnnenPart,\n            id: guid(),\n            årsak: getUtsettelseÅrsakFromSaksperiode(saksperiode.utsettelseÅrsak)!,\n            tidsperiode: tidsperiodeDate,\n            forelder: getForelderForPeriode(saksperiode, erFarEllerMedmor),\n            overskrives: true,\n            visPeriodeIPlan: true,\n        };\n    }\n\n    const skalVises =\n        innvilgedePerioder !== undefined &&\n        !innvilgedePerioder.some(\n            (ip) =>\n                (Tidsperioden(convertTidsperiodeToTidsperiodeDate(ip.periode)).erLik(tidsperiodeDate) ||\n                    Tidsperioden(convertTidsperiodeToTidsperiodeDate(ip.periode)).overlapper(tidsperiodeDate)) &&\n                ip.guid !== saksperiode.guid\n        );\n    const årsak = getOppholdÅrsakFromSaksperiode(saksperiode);\n\n    const annenPartSamtidigUttakPeriode: Saksperiode | undefined =\n        innvilgedePerioder !== undefined\n            ? innvilgedePerioder.find(\n                  (ip) =>\n                      (Tidsperioden(convertTidsperiodeToTidsperiodeDate(ip.periode)).erLik(tidsperiodeDate) ||\n                          Tidsperioden(convertTidsperiodeToTidsperiodeDate(ip.periode)).overlapper(tidsperiodeDate)) &&\n                      ip.guid !== saksperiode.guid\n              )\n            : undefined;\n    let samtidigUttakProsentAnnenPart;\n\n    if (annenPartSamtidigUttakPeriode) {\n        samtidigUttakProsentAnnenPart = annenPartSamtidigUttakPeriode.samtidigUttak;\n    }\n\n    const samtidigUttakProsent = beregnSamtidigUttaksProsent(\n        saksperiode.samtidigUttak,\n        samtidigUttakProsentAnnenPart,\n        saksperiode.gradering?.arbeidstidprosent\n    );\n\n    if (erAnnenPartsAvslåttePrematurePeriode(saksperiode, termindato)) {\n        return {\n            type: Periodetype.Info,\n            infotype: PeriodeInfoType.avslåttPeriode,\n            id: guid(),\n            tidsperiode: tidsperiodeDate,\n            forelder: getForelderForPeriode(saksperiode, erFarEllerMedmor),\n            overskrives: true,\n            visPeriodeIPlan: skalVises,\n            kontoType: saksperiode.kontoType,\n            avslåttPeriodeType: Periodetype.Uttak,\n            kanSlettes: false,\n        };\n    }\n\n    return {\n        type: Periodetype.Info,\n        infotype: PeriodeInfoType.uttakAnnenPart,\n        id: guid(),\n        årsak: årsak!,\n        tidsperiode: tidsperiodeDate,\n        forelder: getForelderForPeriode(saksperiode, erFarEllerMedmor),\n        overskrives: true,\n        gradert: saksperiode.gradering !== undefined ? true : false,\n        ønskerSamtidigUttak: samtidigUttakProsent !== undefined,\n        samtidigUttakProsent: samtidigUttakProsent,\n        stillingsprosent:\n            saksperiode.gradering !== undefined ? saksperiode.gradering.arbeidstidprosent.toString() : undefined,\n        visPeriodeIPlan: skalVises,\n    };\n};\n\nconst mapOverføringsperiodeFromSaksperiode = (\n    saksperiode: Saksperiode,\n    erFarEllerMedmor: boolean\n): Overføringsperiode => {\n    return {\n        id: guid(),\n        forelder: getForelderForPeriode(saksperiode, erFarEllerMedmor),\n        konto: saksperiode.kontoType!,\n        tidsperiode: convertTidsperiodeToTidsperiodeDate(saksperiode.periode),\n        type: Periodetype.Overføring,\n        årsak: saksperiode.overføringÅrsak!,\n    };\n};\n\nconst mapPeriodeFromSaksperiode = (\n    saksperiode: Saksperiode,\n    grunnlag: Saksgrunnlag,\n    gyldigePerioder: Saksperiode[]\n): Periode => {\n    const innvilgedePerioder = gyldigePerioder.filter(\n        (p) => !erAnnenPartsAvslåttePrematurePeriode(p, grunnlag.termindato)\n    );\n    if (saksperiode.gjelderAnnenPart) {\n        return mapAnnenPartInfoPeriodeFromSaksperiode(\n            saksperiode,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.termindato,\n            innvilgedePerioder\n        );\n    }\n\n    if (!saksperiode.resultat.innvilget) {\n        return mapInfoPeriodeFromAvslåttSaksperiode(saksperiode, grunnlag.søkerErFarEllerMedmor);\n    }\n\n    if (saksperiode.utsettelseÅrsak !== undefined) {\n        return mapUtsettelseperiodeFromSaksperiode(saksperiode, grunnlag.søkerErFarEllerMedmor);\n    }\n\n    if (saksperiode.overføringÅrsak !== undefined) {\n        return mapOverføringsperiodeFromSaksperiode(saksperiode, grunnlag.søkerErFarEllerMedmor);\n    }\n\n    return mapUttaksperiodeFromSaksperiode(saksperiode, grunnlag, innvilgedePerioder);\n};\n\nexport const erAnnenPartsAvslåttePrematurePeriode = (saksperiode: Saksperiode, termindato: string | undefined) => {\n    return (\n        termindato &&\n        saksperiode.gjelderAnnenPart &&\n        !saksperiode.resultat.innvilget &&\n        saksperiode.resultat.trekkerDager &&\n        dayjs(saksperiode.periode.tom).isBefore(dayjs(ISOStringToDate(termindato)), 'd') &&\n        saksperiode.kontoType !== StønadskontoType.Fedrekvote\n    );\n};\n\nexport const gyldigeSaksperioder = (saksperiode: Saksperiode, termindato: string | undefined) => {\n    if (saksperiode.resultat.innvilget) return true;\n\n    if (saksperiode.gjelderAnnenPart) {\n        if (erAnnenPartsAvslåttePrematurePeriode(saksperiode, termindato)) {\n            return true;\n        }\n        return false;\n    }\n    if (\n        saksperiode.resultat.årsak !== PeriodeResultatÅrsak.AVSLAG_HULL_MELLOM_FORELDRENES_PERIODER &&\n        saksperiode.resultat.trekkerDager === true\n    ) {\n        return true;\n    }\n    return false;\n};\n\nexport const getPerioderSplittetOverFødselOgNesteBarnsFørsteStønadsdag = (\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n): Periode[] => {\n    const nyePerioder = [] as Periode[];\n    perioder.forEach((p) => {\n        if (tidperiodeOverlapperDato(p.tidsperiode, familiehendelsesdato) && isUttaksperiode(p)) {\n            const splittedePerioder = splittUttaksperiodePåFamiliehendelsesdato(p, familiehendelsesdato);\n            splittedePerioder.forEach((periode) => nyePerioder.push(periode));\n        } else if (\n            førsteUttaksdagNesteBarnsSak !== undefined &&\n            tidperiodeOverlapperDato(p.tidsperiode, førsteUttaksdagNesteBarnsSak)\n        ) {\n            const splittedePerioder = splittPeriodePåDato(p, førsteUttaksdagNesteBarnsSak);\n            splittedePerioder.forEach((periode) => nyePerioder.push(periode));\n        } else {\n            nyePerioder.push(p);\n        }\n    });\n    return nyePerioder;\n};\n\nconst mapSaksperioderTilUttaksperioder = (\n    saksperioder: Saksperiode[],\n    grunnlag: Saksgrunnlag,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n): Periode[] => {\n    const gyldigePerioder = saksperioder.filter((periode) => gyldigeSaksperioder(periode, grunnlag.termindato));\n    const perioder = gyldigePerioder.map((periode) => mapPeriodeFromSaksperiode(periode, grunnlag, gyldigePerioder));\n    const familiehendelsesdato = new Date(grunnlag.familiehendelseDato);\n\n    const splittedePerioder = getPerioderSplittetOverFødselOgNesteBarnsFørsteStønadsdag(\n        perioder,\n        familiehendelsesdato,\n        førsteUttaksdagNesteBarnsSak\n    );\n\n    const sammenslåddePerioder: Periode[] = slåSammenLikePerioder(\n        [...splittedePerioder]\n            .sort(sorterPerioder)\n            .filter(harUttaksdager)\n            .map(korrigerTidsperiodeTilGyldigUttaksdag)\n            .filter(harGyldigTidsperiode)\n            .filter(harUttaksdager),\n        familiehendelsesdato,\n        førsteUttaksdagNesteBarnsSak\n    );\n\n    const kunFarMedmorHarRett =\n        !grunnlag.morHarRett && grunnlag.farMedmorHarRett && !grunnlag.harAnnenForelderTilsvarendeRettEØS;\n    const erAdopsjon = grunnlag.familiehendelseType === FamiliehendelseType.ADOPSJON;\n\n    const perioderUtenAnnenPartsSamtidigUttak = sammenslåddePerioder.filter((p) => !isInfoPeriode(p));\n\n    const annenPartsUttak = sammenslåddePerioder.filter((p) => isInfoPeriode(p));\n    const harAktivitetskravIPeriodeUtenUttak =\n        !grunnlag.erDeltUttak && kunFarMedmorHarRett && !grunnlag.farMedmorErAleneOmOmsorg;\n    const perioderUtenAnnenPartsSamtidigUttakMedHull = finnOgSettInnHull(\n        perioderUtenAnnenPartsSamtidigUttak,\n        harAktivitetskravIPeriodeUtenUttak,\n        familiehendelsesdato,\n        erAdopsjon,\n        kunFarMedmorHarRett,\n        grunnlag.søkerErFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak\n    );\n\n    return finnOgSettInnHull(\n        settInnAnnenPartsUttak(\n            perioderUtenAnnenPartsSamtidigUttakMedHull,\n            annenPartsUttak,\n            familiehendelsesdato,\n            førsteUttaksdagNesteBarnsSak\n        ),\n        harAktivitetskravIPeriodeUtenUttak,\n        familiehendelsesdato,\n        erAdopsjon,\n        kunFarMedmorHarRett,\n        grunnlag.søkerErFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak\n    );\n};\n\nexport default mapSaksperioderTilUttaksperioder;\n","export enum DekningsgradDTO {\n    ÅTTI_PROSENT = 'ÅTTI',\n    HUNDRE_PROSENT = 'HUNDRE',\n}\n","export enum RettighetType {\n    BARE_SØKER_RETT = 'BARE_SØKER_RETT',\n    ALENEOMSORG = 'ALENEOMSORG',\n    BEGGE_RETT = 'BEGGE_RETT',\n}\n","import { UttakArbeidType } from 'app/types/UttakArbeidType';\nimport { Arbeidsform, isInfoPeriode } from 'uttaksplan/types/Periode';\nimport { OppholdÅrsakTypeDTO } from 'app/types/OppholdÅrsakTypeDTO';\nimport { EksisterendeSak } from 'app/types/EksisterendeSak';\nimport { Saksperiode } from 'app/types/Saksperiode';\nimport { Saksgrunnlag } from 'app/types/Saksgrunnlag';\nimport { Dekningsgrad } from 'app/types/Dekningsgrad';\nimport { getFamiliehendelseType } from './getFamiliehendelseType';\nimport {\n    convertTidsperiodeToTidsperiodeDate,\n    getRelevantFamiliehendelseDato,\n    ISOStringToDate,\n    sorterDatoEtterEldst,\n} from './dateUtils';\nimport { SaksperiodeDTO } from 'app/types/SaksperiodeDTO';\nimport mapSaksperioderTilUttaksperioder from './mapSaksperioderTilUttaksperioder';\nimport { Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { Søkerinfo } from 'app/types/Søkerinfo';\nimport { Søkerrolle } from 'app/types/Søkerrolle';\nimport { Søknad } from 'app/context/types/Søknad';\nimport AnnenForelder from 'app/context/types/AnnenForelder';\nimport Søker from 'app/context/types/Søker';\nimport Person, { RegistrertAnnenForelder, RegistrertBarn } from 'app/types/Person';\nimport { Situasjon } from 'app/types/Situasjon';\nimport Barn, { BarnType, isAdoptertBarn, isFødtBarn, isUfødtBarn } from 'app/context/types/Barn';\nimport { FamiliehendelseType } from 'app/types/FamiliehendelseType';\nimport { DekningsgradDTO } from 'app/types/DekningsgradDTO';\nimport { RettighetType } from 'app/types/RettighetType';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { AnnenPartVedtakDTO } from 'app/types/AnnenPartVedtakDTO';\nimport { SelectableBarn } from 'app/pages/velkommen/components/barnVelger/BarnVelger';\nimport Søkersituasjon from 'app/context/types/Søkersituasjon';\nimport { OppholdÅrsakType } from 'uttaksplan/types/OppholdÅrsakType';\nimport { guid, intlUtils } from '@navikt/fp-common';\nimport { IntlShape } from 'react-intl';\nimport { Sak } from 'app/types/Sak';\nimport PersonFnrDTO from 'app/types/PersonFnrDTO';\nimport { getErDatoInnenEnDagFraAnnenDato } from 'app/pages/velkommen/velkommenUtils';\nimport { dateToISOString } from '@navikt/sif-common-formik-ds/lib';\n\nexport const getArbeidsformFromUttakArbeidstype = (arbeidstype: UttakArbeidType): Arbeidsform => {\n    switch (arbeidstype) {\n        case UttakArbeidType.SELVSTENDIG_NÆRINGSDRIVENDE:\n            return Arbeidsform.selvstendignæringsdrivende;\n        case UttakArbeidType.FRILANS:\n            return Arbeidsform.frilans;\n        default:\n            return Arbeidsform.arbeidstaker;\n    }\n};\n\nconst getStønadskontoTypeFromOppholdÅrsakType = (årsak: OppholdÅrsakTypeDTO): StønadskontoType | undefined => {\n    switch (årsak) {\n        case OppholdÅrsakTypeDTO.UttakFedrekvoteAnnenForelder:\n            return StønadskontoType.Fedrekvote;\n        case OppholdÅrsakTypeDTO.UttakFellesperiodeAnnenForelder:\n            return StønadskontoType.Fellesperiode;\n        case OppholdÅrsakTypeDTO.UttakMødrekvoteAnnenForelder:\n            return StønadskontoType.Mødrekvote;\n        default:\n            return undefined;\n    }\n};\n\nconst mapOppholdÅrsakType = (årsak: OppholdÅrsakTypeDTO | undefined): OppholdÅrsakType | undefined => {\n    switch (årsak) {\n        case OppholdÅrsakTypeDTO.UttakFedrekvoteAnnenForelder:\n            return OppholdÅrsakType.UttakFedrekvoteAnnenForelder;\n        case OppholdÅrsakTypeDTO.UttakFellesperiodeAnnenForelder:\n            return OppholdÅrsakType.UttakFellesperiodeAnnenForelder;\n        case OppholdÅrsakTypeDTO.UttakMødrekvoteAnnenForelder:\n            return OppholdÅrsakType.UttakMødrekvoteAnnenForelder;\n        default:\n            return undefined;\n    }\n};\n\nexport const mapSaksperiodeFromDTO = (p: SaksperiodeDTO, erAnnenPartsSak: boolean): Saksperiode => {\n    const { oppholdÅrsak } = p;\n    const returnPeriode: Saksperiode = {\n        guid: guid(),\n        periode: {\n            fom: p.fom,\n            tom: p.tom,\n        },\n        gjelderAnnenPart: erAnnenPartsSak,\n        resultat: p.resultat,\n        kontoType: p.kontoType,\n        flerbarnsdager: p.flerbarnsdager,\n        gradering: p.gradering,\n        utsettelseÅrsak: p.utsettelseÅrsak,\n        overføringÅrsak: p.overføringÅrsak,\n        samtidigUttak: p.samtidigUttak,\n        morsAktivitet: p.morsAktivitet,\n        oppholdÅrsak: mapOppholdÅrsakType(p.oppholdÅrsak),\n    } as Saksperiode;\n\n    if (oppholdÅrsak !== undefined && erAnnenPartsSak === false) {\n        returnPeriode.gjelderAnnenPart = true;\n        returnPeriode.kontoType = getStønadskontoTypeFromOppholdÅrsakType(oppholdÅrsak)!;\n    }\n\n    if (oppholdÅrsak !== undefined && erAnnenPartsSak) {\n        returnPeriode.gjelderAnnenPart = false;\n        returnPeriode.angittAvAnnenPart = true;\n        returnPeriode.kontoType = getStønadskontoTypeFromOppholdÅrsakType(oppholdÅrsak)!;\n    }\n\n    return returnPeriode as Saksperiode;\n};\n\nconst saksperiodeErInnvilget = (saksperiode: Saksperiode): boolean => saksperiode.resultat.innvilget;\n\nconst filterAvslåttePeriodeMedInnvilgetPeriodeISammeTidsperiode = (\n    periode: Saksperiode,\n    _index: number,\n    saksperioder: Saksperiode[]\n) => {\n    const likePerioder = saksperioder.filter(\n        (periode2) =>\n            periode.guid !== periode2.guid &&\n            Tidsperioden(convertTidsperiodeToTidsperiodeDate(periode.periode)).erLik(\n                convertTidsperiodeToTidsperiodeDate(periode2.periode)\n            )\n    );\n\n    if (likePerioder.length === 0) {\n        return true;\n    }\n\n    const innvilgedePerioder = likePerioder.filter(saksperiodeErInnvilget);\n\n    if (saksperiodeErInnvilget(periode) === false && innvilgedePerioder.length > 0) {\n        return false;\n    }\n\n    return true;\n};\n\nexport const getStartdatoFørstePeriodeAnnenPart = (\n    annenPartsSak: AnnenPartVedtakDTO | undefined | ''\n): Date | undefined => {\n    if (\n        annenPartsSak === undefined ||\n        annenPartsSak === '' ||\n        Object.keys(annenPartsSak).length === 0 ||\n        annenPartsSak.perioder.length === 0\n    ) {\n        return undefined;\n    }\n    return ISOStringToDate(annenPartsSak.perioder[0].fom);\n};\n\nexport const mapAnnenPartsEksisterendeSakFromDTO = (\n    eksisterendeSakAnnenPart: AnnenPartVedtakDTO | undefined | '',\n    barn: Barn,\n    søkerErFarEllerMedmor: boolean,\n    familiehendelsesdato: string,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n): EksisterendeSak | undefined => {\n    if (\n        eksisterendeSakAnnenPart === undefined ||\n        eksisterendeSakAnnenPart === '' ||\n        Object.keys(eksisterendeSakAnnenPart).length === 0\n    ) {\n        return undefined;\n    }\n    const erAnnenPartsSak = true;\n    const saksperioderAnnenPart = eksisterendeSakAnnenPart.perioder\n        .map((p) => {\n            return mapSaksperiodeFromDTO(p, erAnnenPartsSak);\n        })\n        .filter(filterAvslåttePeriodeMedInnvilgetPeriodeISammeTidsperiode);\n    let termindato = undefined;\n    if (eksisterendeSakAnnenPart.termindato !== undefined) {\n        termindato = eksisterendeSakAnnenPart.termindato;\n    } else if ((isFødtBarn(barn) || isUfødtBarn(barn)) && barn.termindato !== undefined) {\n        termindato = dateToISOString(barn.termindato);\n    }\n    const fødselsdato = isFødtBarn(barn) ? dateToISOString(barn.fødselsdatoer[0]) : undefined;\n    const adopsjonsdato = isAdoptertBarn(barn) ? dateToISOString(barn.adopsjonsdato) : undefined;\n\n    const grunnlagForAnnenPart = {\n        dekningsgrad:\n            eksisterendeSakAnnenPart.dekningsgrad === DekningsgradDTO.HUNDRE_PROSENT\n                ? Dekningsgrad.HUNDRE_PROSENT\n                : Dekningsgrad.ÅTTI_PROSENT,\n        antallBarn: eksisterendeSakAnnenPart.antallBarn ? eksisterendeSakAnnenPart.antallBarn : barn.antallBarn,\n        morErAleneOmOmsorg: false,\n        morErUfør: false,\n        morHarRett: true,\n        farMedmorErAleneOmOmsorg: false,\n        farMedmorHarRett: true,\n        søkerErFarEllerMedmor,\n        termindato,\n        fødselsdato,\n        omsorgsovertakelsesdato: adopsjonsdato,\n        erDeltUttak: true,\n        erBarnetFødt: fødselsdato !== undefined,\n        familiehendelseDato: familiehendelsesdato,\n        familiehendelseType: getFamiliehendelseType(fødselsdato, termindato, adopsjonsdato),\n        harAnnenForelderTilsvarendeRettEØS: false,\n        ønskerJustertUttakVedFødsel: undefined,\n        barn: [], // barn brukes ikke videre her\n    };\n\n    const uttaksplanAnnenPart = mapSaksperioderTilUttaksperioder(\n        saksperioderAnnenPart,\n        grunnlagForAnnenPart,\n        førsteUttaksdagNesteBarnsSak\n    );\n\n    return {\n        saksnummer: '',\n        erAnnenPartsSak,\n        grunnlag: grunnlagForAnnenPart,\n        saksperioder: saksperioderAnnenPart,\n        uttaksplan: uttaksplanAnnenPart.filter((p) => isInfoPeriode(p)),\n    };\n};\n\nexport const mapSøkerensEksisterendeSakFromDTO = (\n    eksisterendeSak: Sak | undefined | '',\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n): EksisterendeSak | undefined => {\n    if (eksisterendeSak === undefined || eksisterendeSak === '' || Object.keys(eksisterendeSak).length === 0) {\n        return undefined;\n    }\n    const erAnnenPartsSak = false;\n    const {\n        dekningsgrad,\n        familiehendelse: { fødselsdato, termindato, omsorgsovertakelse, antallBarn },\n        harAnnenForelderTilsvarendeRettEØS,\n        morUføretrygd,\n        rettighetType,\n        sakTilhørerMor,\n        ønskerJustertUttakVedFødsel,\n    } = eksisterendeSak;\n\n    const perioder = eksisterendeSak.gjeldendeVedtak ? eksisterendeSak.gjeldendeVedtak.perioder : [];\n\n    const erFarEllerMedmor = !sakTilhørerMor;\n    const grunnlag: Saksgrunnlag = {\n        dekningsgrad:\n            dekningsgrad === DekningsgradDTO.HUNDRE_PROSENT ? Dekningsgrad.HUNDRE_PROSENT : Dekningsgrad.ÅTTI_PROSENT,\n        antallBarn: antallBarn,\n        morErAleneOmOmsorg: sakTilhørerMor && rettighetType === RettighetType.ALENEOMSORG,\n        morErUfør: morUføretrygd,\n        morHarRett: sakTilhørerMor || rettighetType === RettighetType.BEGGE_RETT,\n        farMedmorErAleneOmOmsorg: !sakTilhørerMor && rettighetType === RettighetType.ALENEOMSORG,\n        farMedmorHarRett: !sakTilhørerMor || rettighetType === RettighetType.BEGGE_RETT,\n        søkerErFarEllerMedmor: erFarEllerMedmor,\n        termindato,\n        fødselsdato,\n        omsorgsovertakelsesdato: omsorgsovertakelse,\n        erDeltUttak: rettighetType === RettighetType.BEGGE_RETT,\n        erBarnetFødt: fødselsdato !== undefined,\n        familiehendelseDato: getRelevantFamiliehendelseDato(termindato, fødselsdato, omsorgsovertakelse),\n        familiehendelseType: getFamiliehendelseType(fødselsdato, termindato, omsorgsovertakelse),\n        ønskerJustertUttakVedFødsel: fødselsdato === undefined ? ønskerJustertUttakVedFødsel : undefined,\n        harAnnenForelderTilsvarendeRettEØS,\n    };\n\n    const saksperioder = perioder\n        .map((p) => {\n            return mapSaksperiodeFromDTO(p, erAnnenPartsSak);\n        })\n        .filter(filterAvslåttePeriodeMedInnvilgetPeriodeISammeTidsperiode);\n\n    const uttaksplan = mapSaksperioderTilUttaksperioder(saksperioder, grunnlag, førsteUttaksdagNesteBarnsSak);\n\n    return {\n        saksnummer: eksisterendeSak.saksnummer,\n        erAnnenPartsSak,\n        grunnlag,\n        saksperioder,\n        uttaksplan,\n    };\n};\n\nconst getSøkersituasjonFromSaksgrunnlag = (familiehendelseType: FamiliehendelseType): Situasjon => {\n    if (familiehendelseType === FamiliehendelseType.TERM || familiehendelseType === FamiliehendelseType.FØDSEL) {\n        return 'fødsel';\n    }\n\n    return 'adopsjon';\n};\n\nconst getSøkerFromSaksgrunnlag = (grunnlag: Saksgrunnlag, erFarEllerMedmor: boolean): Partial<Søker> => {\n    return {\n        erAleneOmOmsorg: erFarEllerMedmor ? grunnlag.farMedmorErAleneOmOmsorg : grunnlag.morErAleneOmOmsorg,\n    };\n};\n\nconst getSøkerrolleFromSaksgrunnlag = (\n    person: Person,\n    situasjon: Situasjon,\n    grunnlag: Saksgrunnlag\n): Søkerrolle | undefined => {\n    const { søkerErFarEllerMedmor } = grunnlag;\n    const søkerErKvinne = person.kjønn === 'K';\n    switch (situasjon) {\n        case 'fødsel':\n        case 'adopsjon':\n            if (søkerErKvinne) {\n                return søkerErFarEllerMedmor ? 'medmor' : 'mor';\n            }\n            return 'far';\n        default:\n            return undefined;\n    }\n};\n\nconst getFødselsdatoer = (valgteBarn: SelectableBarn | undefined, sak: Saksgrunnlag): Date[] => {\n    if (valgteBarn && valgteBarn.fødselsdatoer) {\n        return sorterDatoEtterEldst(valgteBarn.fødselsdatoer);\n    } else if (sak.fødselsdato) {\n        return Array(sak.antallBarn).fill(ISOStringToDate(sak.fødselsdato)!);\n    }\n    return [];\n};\n\nconst getBarnFromSaksgrunnlag = (\n    situasjon: Situasjon,\n    sak: Saksgrunnlag,\n    valgteBarn: SelectableBarn | undefined\n): Barn | undefined => {\n    switch (situasjon) {\n        case 'fødsel':\n            if (sak.fødselsdato) {\n                return {\n                    type: BarnType.FØDT,\n                    antallBarn: sak.antallBarn,\n                    fødselsdatoer: getFødselsdatoer(valgteBarn, sak),\n                    termindato: sak.termindato ? ISOStringToDate(sak.termindato) : undefined,\n                    fnr: valgteBarn?.fnr,\n                };\n            }\n\n            return {\n                type: BarnType.UFØDT,\n                antallBarn: sak.antallBarn,\n                termindato: ISOStringToDate(sak.termindato)!,\n                terminbekreftelse: [],\n            };\n        case 'adopsjon':\n            return {\n                type: BarnType.ADOPTERT_STEBARN,\n                adopsjonsdato: ISOStringToDate(sak.omsorgsovertakelsesdato)!,\n                antallBarn: sak.antallBarn,\n                fødselsdatoer: getFødselsdatoer(valgteBarn, sak),\n                omsorgsovertakelse: [],\n                fnr: valgteBarn?.fnr,\n            };\n        default:\n            return undefined;\n    }\n};\n\nconst getAnnenForelderFromSaksgrunnlag = (\n    situasjon: Situasjon,\n    grunnlag: Saksgrunnlag,\n    annenPart: RegistrertAnnenForelder,\n    erFarEllerMedmor: boolean,\n    intl: IntlShape\n): AnnenForelder | undefined => {\n    switch (situasjon) {\n        case 'fødsel':\n        case 'adopsjon':\n            if (erFarEllerMedmor) {\n                return {\n                    fornavn:\n                        annenPart.fornavn !== undefined && annenPart.fornavn !== ''\n                            ? annenPart.fornavn\n                            : intlUtils(intl, 'annen.forelder'),\n                    etternavn: annenPart.etternavn,\n                    erUfør: grunnlag.morErUfør,\n                    harRettPåForeldrepengerINorge:\n                        !!grunnlag.morHarRett && !grunnlag.harAnnenForelderTilsvarendeRettEØS,\n                    fnr: annenPart.fnr,\n                    kanIkkeOppgis: false,\n                    harRettPåForeldrepengerIEØS: grunnlag.harAnnenForelderTilsvarendeRettEØS,\n                };\n            }\n            return {\n                fornavn:\n                    annenPart.fornavn !== undefined && annenPart.fornavn !== ''\n                        ? annenPart.fornavn\n                        : intlUtils(intl, 'annen.forelder'),\n                etternavn: annenPart.etternavn,\n                harRettPåForeldrepengerINorge:\n                    !!grunnlag.farMedmorHarRett && !grunnlag.harAnnenForelderTilsvarendeRettEØS,\n                fnr: annenPart.fnr,\n                kanIkkeOppgis: false,\n                harRettPåForeldrepengerIEØS: grunnlag.harAnnenForelderTilsvarendeRettEØS,\n            };\n        default:\n            return undefined;\n    }\n};\n\nconst finnAnnenForelderForSaken = (\n    barn: RegistrertBarn[],\n    fødselsdato: Date | undefined,\n    grunnlag: Saksgrunnlag,\n    situasjon: Situasjon,\n    intl: IntlShape,\n    valgtBarnFnr: string[] | undefined,\n    annenForeldersFnrFraSaken: string | undefined\n): AnnenForelder | undefined => {\n    if ((valgtBarnFnr === undefined && fødselsdato === undefined) || !annenForeldersFnrFraSaken) {\n        return undefined;\n    }\n    const barnMedGittFnr =\n        valgtBarnFnr !== undefined\n            ? barn.find((b) => valgtBarnFnr.includes(b.fnr) && b.annenForelder !== undefined)\n            : undefined;\n    const barnMedGittFødselsdato =\n        fødselsdato !== undefined\n            ? barn.find(\n                  (b) => getErDatoInnenEnDagFraAnnenDato(b.fødselsdato, fødselsdato) && b.annenForelder !== undefined\n              )\n            : undefined;\n\n    const barnet = barnMedGittFnr || barnMedGittFødselsdato;\n\n    if (barnet !== undefined && barnet.annenForelder?.fnr === annenForeldersFnrFraSaken) {\n        const annenForelder = barnet.annenForelder;\n        const { fornavn } = annenForelder;\n        const fornavnAnnenForelder =\n            fornavn !== undefined && fornavn.trim() !== '' ? fornavn : intlUtils(intl, 'annen.forelder');\n        const annenPart: RegistrertAnnenForelder = { ...annenForelder, fornavn: fornavnAnnenForelder };\n        return getAnnenForelderFromSaksgrunnlag(situasjon, grunnlag, annenPart, grunnlag.søkerErFarEllerMedmor, intl);\n    }\n\n    return undefined;\n};\n\nconst getBarnFromValgteBarn = (valgteBarn: SelectableBarn): Barn => {\n    if (valgteBarn.fødselsdatoer !== undefined && valgteBarn.fødselsdatoer.length > 0) {\n        return {\n            type: BarnType.FØDT,\n            antallBarn: valgteBarn.antallBarn,\n            fødselsdatoer: sorterDatoEtterEldst(valgteBarn.fødselsdatoer),\n            fnr:\n                valgteBarn.fnr !== undefined && valgteBarn.fnr.length > 0\n                    ? valgteBarn.fnr.filter((fnr) => !!fnr)\n                    : undefined,\n        };\n    } else if (valgteBarn.termindato !== undefined) {\n        return {\n            type: BarnType.UFØDT,\n            antallBarn: valgteBarn.antallBarn,\n            termindato: valgteBarn.termindato,\n        };\n    } else {\n        return {\n            type: BarnType.IKKE_UTFYLT,\n            antallBarn: valgteBarn.antallBarn,\n            fødselsdatoer: valgteBarn.fødselsdatoer ? sorterDatoEtterEldst(valgteBarn.fødselsdatoer) : [],\n            fnr:\n                valgteBarn.fnr !== undefined && valgteBarn.fnr.length > 0\n                    ? valgteBarn.fnr.filter((fnr) => !!fnr)\n                    : undefined,\n        };\n    }\n};\n\nconst getAnnenForelderFromValgteBarn = (valgteBarn: SelectableBarn): AnnenForelder | undefined => {\n    if (valgteBarn.annenForelder !== undefined) {\n        return {\n            fornavn: valgteBarn.annenForelder.fornavn,\n            etternavn: valgteBarn.annenForelder.etternavn,\n            fnr: valgteBarn.annenForelder.fnr,\n            kanIkkeOppgis: false,\n        };\n    }\n\n    return {\n        kanIkkeOppgis: false,\n    };\n};\n\nexport const opprettSøknadFraValgteBarn = (valgteBarn: SelectableBarn): Partial<Søknad> | undefined => {\n    const barn = getBarnFromValgteBarn(valgteBarn);\n    const annenForelder = getAnnenForelderFromValgteBarn(valgteBarn);\n    const søknad: Partial<Søknad> = {\n        barn,\n        annenForelder,\n        erEndringssøknad: false,\n    };\n\n    return søknad;\n};\n\nexport const opprettAnnenForelderFraEksisterendeSak = (\n    intl: IntlShape,\n    annenPartFraSak: PersonFnrDTO | undefined,\n    grunnlag: Saksgrunnlag,\n    søkerinfo: Søkerinfo,\n    situasjon: Situasjon,\n    valgteBarnFnr: string[] | undefined\n): AnnenForelder => {\n    const fnrAnnenForelderFraSak = annenPartFraSak !== undefined ? annenPartFraSak.fnr : undefined;\n\n    const mockAnnenForelder = {\n        fornavn: intlUtils(intl, 'annen.forelder'),\n        etternavn: '',\n        fnr: fnrAnnenForelderFraSak ? fnrAnnenForelderFraSak : '',\n        harRettPåForeldrepengerINorge: grunnlag.søkerErFarEllerMedmor\n            ? !!grunnlag.morHarRett && !grunnlag.harAnnenForelderTilsvarendeRettEØS\n            : !!grunnlag.farMedmorHarRett && !grunnlag.harAnnenForelderTilsvarendeRettEØS,\n        harRettPåForeldrepengerIEØS: grunnlag.harAnnenForelderTilsvarendeRettEØS,\n        kanIkkeOppgis: false,\n        erUfør: grunnlag.søkerErFarEllerMedmor ? grunnlag.morErUfør : undefined,\n    };\n    const annenForelderFraSak = finnAnnenForelderForSaken(\n        søkerinfo.registrerteBarn,\n        ISOStringToDate(grunnlag.fødselsdato),\n        grunnlag,\n        situasjon,\n        intl,\n        valgteBarnFnr,\n        fnrAnnenForelderFraSak\n    );\n    return annenForelderFraSak || mockAnnenForelder;\n};\n\nexport const opprettSøknadFraValgteBarnMedSak = (\n    valgteBarn: SelectableBarn,\n    intl: IntlShape,\n    søkerinfo: Søkerinfo\n): Partial<Søknad> | undefined => {\n    const eksisterendeSak = mapSøkerensEksisterendeSakFromDTO(valgteBarn.sak, undefined);\n    const { grunnlag } = eksisterendeSak!;\n    const situasjon = getSøkersituasjonFromSaksgrunnlag(grunnlag.familiehendelseType);\n    const barn = getBarnFromValgteBarn(valgteBarn);\n    const annenForelder = opprettAnnenForelderFraEksisterendeSak(\n        intl,\n        valgteBarn.sak?.annenPart,\n        grunnlag,\n        søkerinfo,\n        situasjon,\n        valgteBarn.fnr\n    );\n    const søknad: Partial<Søknad> = {\n        barn,\n        annenForelder,\n        erEndringssøknad: false,\n    };\n\n    if (valgteBarn.sak !== undefined) {\n        const søkersituasjon = {\n            situasjon: valgteBarn.sak.gjelderAdopsjon ? 'adopsjon' : 'fødsel',\n            rolle: valgteBarn.sak.sakTilhørerMor ? undefined : 'far',\n        } as Søkersituasjon;\n        søknad.søkersituasjon = søkersituasjon;\n    }\n    return søknad;\n};\n\nexport const opprettSøknadFraEksisterendeSak = (\n    søkerinfo: Søkerinfo,\n    eksisterendeSak: EksisterendeSak,\n    intl: IntlShape,\n    annenPartFraSak: PersonFnrDTO | undefined,\n    valgteBarn: SelectableBarn | undefined\n): Partial<Søknad> | undefined => {\n    const { grunnlag, uttaksplan } = eksisterendeSak;\n    const { dekningsgrad, familiehendelseType, søkerErFarEllerMedmor, ønskerJustertUttakVedFødsel } = grunnlag;\n    const situasjon = getSøkersituasjonFromSaksgrunnlag(familiehendelseType);\n\n    if (!situasjon) {\n        return undefined;\n    }\n\n    const søker = getSøkerFromSaksgrunnlag(grunnlag, søkerErFarEllerMedmor);\n    const barn = getBarnFromSaksgrunnlag(situasjon, grunnlag, valgteBarn);\n\n    const rolle = getSøkerrolleFromSaksgrunnlag(søkerinfo.person, situasjon, grunnlag);\n\n    if (!barn || !rolle) {\n        return undefined;\n    }\n\n    const annenForelder = opprettAnnenForelderFraEksisterendeSak(\n        intl,\n        annenPartFraSak,\n        grunnlag,\n        søkerinfo,\n        situasjon,\n        valgteBarn?.fnr\n    );\n\n    const søknad: Partial<Søknad> = {\n        søker: søker as Søker,\n        søkersituasjon: {\n            situasjon,\n            rolle,\n        },\n        barn,\n        annenForelder,\n        erEndringssøknad: true,\n        dekningsgrad,\n        uttaksplan,\n        saksnummer: eksisterendeSak.saksnummer,\n        ønskerJustertUttakVedFødsel: ønskerJustertUttakVedFødsel,\n    };\n\n    return søknad;\n};\n"],"names":["UttakArbeidType","OppholdÅrsakTypeDTO","FamiliehendelseType","getFamiliehendelseType","fødselsdato","termindato","omsorgsovertagelsesdato","UtsettelseÅrsakTypeDTO","PeriodeResultatÅrsak","PeriodeHullÅrsak","splittPeriodePåPeriode","berørtPeriode","nyPeriode","dagerIBerørtPeriode","Tidsperioden","førsteDel","Uttaksdagen","dagerIFørsteDel","dagerIAndreDel","startDatoAndreDel","isOverskrivbarPeriode","andreDel","guid","splittPeriodePåDato","periode","dato","periodeFørDato","periodeFraOgMedDato","splittUttaksperiodePåFamiliehendelsesdato","famDato","periodeFørFamDato","StønadskontoType","periodeFraOgMedFamDato","getAntallOverlappendeUttaksdager","Periodene","dateArray","dayjs","minDate","maxDate","overlappendeTidsperiode","date","leggTilPeriode","perioder","familiehendelsesdato","harAktivitetskravIPeriodeUtenUttak","erAdopsjon","bareFarHarRett","erFarEllerMedmor","førsteUttaksdagNesteBarnsSak","nyPeriodeFomDate","nyPeriodeTomDate","p","isUtsettelsesperiode","isForeldrepengerFørFødselUttaksperiode","foregåendePerioder","påfølgendePerioder","antallDagerINyPeriode","berørtPeriodeSplittetPåNyPeriode","førstePeriode","sistePeriode","nyPeriodeFom","nyPeriodeTom","tidsperiodeMellomNyPeriodeOgFørstePeriode","getTidsperiodeMellomPerioder","antallOverlappendeUttaksdager","getPeriodeHullEllerPeriodeUtenUttak","tidsperiodeMellomSistePeriodeOgNyPeriode","sorterPerioder","slåSammenLikePerioder","annenPartsUttak","nyePerioder","forrigePeriode","index","Perioden","isUttaksperiode","overlappendePerioderAnnenPartForrigePeriode","overlappendePerioderAnnenPart","nyTidsperiode","getSplittetPeriodeOmNødvendig","nyHullPeriode","tidperiodeOverlapperDato","tidsperiode","årsak","førsteOktober2021ReglerGjelder","førsteUttaksdagFamiliehendelsesdato","førsteUttaksdagEtterSeksUker","tidsperiodeErInnenFørsteSeksUker","farMedmorBeholderDagerIkkeTattUtDeFørsteSeksUkene","andreAugust2022ReglerGjelder","getPeriodeHull","getNyPeriodeUtenUttak","antallDagerFraFomTilFørsteUttaksdagSeksUker","nyPeriodeUtenUttakTidsperiodeLengde","førsteSeksUkerTidsperiode","etterFørsteSeksUkerTidsperiode","periodeUtenUttak","periodeHull","Periodetype","tidsperiode1","tidsperiode2","tidsperiodeMellomPerioder","antallDagerIMellomrom","isValidTidsperiode","fjernUnødvendigeHull","res","isPeriodeUtenUttak","isHull","finnOgSettInnHull","tidsperiodeMellom6ukerEtterFødselOgPerioden","nestePeriode","splittPeriodePåDatoer","alleDatoer","datoerIPerioden","datoWrapper","oppsplittetPeriode","normaliserPerioder","perioderTidsperioder","per","annenPartsUttakTidsperioder","alleUnikeDatoer","d1","d2","i","self","d","normaliserteEgnePerioder","normaliserteAnnenPartsPerioder","settInnAnnenPartsUttak","initiellMappingFraSaksperioder","result","isPeriodeUtenUttakUtsettelse","overlappendePeriode","isUtsettelseAnnenPart","førstePeriodeStartdato","annenPartsUttakSomSlutterFørFørstePeriode","ap","sistePeriodeSluttdato","annenPartsUttakSomStarterEtterSistePeriode","harUttaksdager","harGyldigTidsperiode","infoPerioder","isInfoPeriode","tmp","korrigerTidsperiodeTilGyldigUttaksdag","fom","tom","fomOk","erUttaksdag","tomOk","getForelderForPeriode","saksperiode","søkerErFarEllerMedmor","Forelder","getUtsettelseÅrsakFromSaksperiode","UtsettelseÅrsakType","getOppholdÅrsakFromSaksperiode","OppholdÅrsakType","beregnSamtidigUttaksProsent","egenProsent","andrePartsProsent","graderingsprosent","getKontotypeBareFarHarRett","periodeTrekkerMinsterett","getErMorForSyk","konto","MorsAktivitet","mapUttaksperiodeFromSaksperiode","grunnlag","innvilgedePerioder","gradert","tidsperiodeDate","convertTidsperiodeToTidsperiodeDate","erFarEllerMedmorOgKunSøkerHarRett","annenPartSamtidigUttakPeriode","ip","samtidigUttakProsentAnnenPart","samtidigUttakProsent","_a","omsorgsovertakelsesdato","familiehendelseDato","getRelevantFamiliehendelseDato","kontoType","getArbeidsformFromUttakArbeidstype","mapUtsettelseperiodeFromSaksperiode","mapInfoPeriodeFromAvslåttSaksperiode","PeriodeInfoType","mapAnnenPartInfoPeriodeFromSaksperiode","skalVises","erAnnenPartsAvslåttePrematurePeriode","mapOverføringsperiodeFromSaksperiode","mapPeriodeFromSaksperiode","gyldigePerioder","ISOStringToDate","gyldigeSaksperioder","getPerioderSplittetOverFødselOgNesteBarnsFørsteStønadsdag","mapSaksperioderTilUttaksperioder","saksperioder","splittedePerioder","sammenslåddePerioder","kunFarMedmorHarRett","perioderUtenAnnenPartsSamtidigUttak","perioderUtenAnnenPartsSamtidigUttakMedHull","DekningsgradDTO","RettighetType","arbeidstype","Arbeidsform","getStønadskontoTypeFromOppholdÅrsakType","mapOppholdÅrsakType","mapSaksperiodeFromDTO","erAnnenPartsSak","oppholdÅrsak","returnPeriode","saksperiodeErInnvilget","filterAvslåttePeriodeMedInnvilgetPeriodeISammeTidsperiode","_index","likePerioder","periode2","getStartdatoFørstePeriodeAnnenPart","annenPartsSak","mapAnnenPartsEksisterendeSakFromDTO","eksisterendeSakAnnenPart","barn","saksperioderAnnenPart","isFødtBarn","isUfødtBarn","dateToISOString","adopsjonsdato","isAdoptertBarn","grunnlagForAnnenPart","Dekningsgrad","uttaksplanAnnenPart","mapSøkerensEksisterendeSakFromDTO","eksisterendeSak","dekningsgrad","omsorgsovertakelse","antallBarn","harAnnenForelderTilsvarendeRettEØS","morUføretrygd","rettighetType","sakTilhørerMor","ønskerJustertUttakVedFødsel","uttaksplan","getSøkersituasjonFromSaksgrunnlag","familiehendelseType","getSøkerFromSaksgrunnlag","getSøkerrolleFromSaksgrunnlag","person","situasjon","søkerErKvinne","getFødselsdatoer","valgteBarn","sak","sorterDatoEtterEldst","getBarnFromSaksgrunnlag","BarnType","getAnnenForelderFromSaksgrunnlag","annenPart","intl","intlUtils","finnAnnenForelderForSaken","valgtBarnFnr","annenForeldersFnrFraSaken","barnMedGittFnr","b","barnMedGittFødselsdato","getErDatoInnenEnDagFraAnnenDato","barnet","annenForelder","fornavn","fornavnAnnenForelder","getBarnFromValgteBarn","fnr","getAnnenForelderFromValgteBarn","opprettSøknadFraValgteBarn","opprettAnnenForelderFraEksisterendeSak","annenPartFraSak","søkerinfo","valgteBarnFnr","fnrAnnenForelderFraSak","mockAnnenForelder","opprettSøknadFraValgteBarnMedSak","søknad","søkersituasjon","opprettSøknadFraEksisterendeSak","søker","rolle"],"mappings":"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"}