{"version":3,"file":"velkommenUtils-40bb4bde.js","sources":["../../src/app/pages/velkommen/velkommenFormConfig.ts","../../src/app/pages/velkommen/validation/velkommenValidation.ts","../../src/app/pages/velkommen/components/SøknadStatus.tsx","../../src/app/pages/velkommen/components/barnVelger/BarnVelger.tsx","../../src/app/pages/velkommen/velkommenUtils.ts"],"sourcesContent":["import { Questions, QuestionConfig } from '@navikt/sif-common-question-config/lib';\nimport { SelectableBarn } from './components/barnVelger/BarnVelger';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\n\nexport enum VelkommenFormField {\n    harForståttRettigheterOgPlikter = 'harForståttRettigheterOgPlikter',\n    valgteBarn = 'valgteBarn',\n}\n\nexport interface VelkommenFormData {\n    [VelkommenFormField.harForståttRettigheterOgPlikter]: boolean;\n    [VelkommenFormField.valgteBarn]: string | undefined;\n}\n\nexport const getInitialVelkommenValues = (harForståttRettigheterOgPlikter: boolean): VelkommenFormData => ({\n    [VelkommenFormField.harForståttRettigheterOgPlikter]: harForståttRettigheterOgPlikter,\n    [VelkommenFormField.valgteBarn]: undefined,\n});\n\nexport interface VelkommenQuestionsPayload extends VelkommenFormData {\n    selectableBarn: SelectableBarn[];\n}\n\nexport const VelkommenFormConfig: QuestionConfig<VelkommenQuestionsPayload, VelkommenFormField> = {\n    [VelkommenFormField.valgteBarn]: {\n        isIncluded: ({ selectableBarn }) => selectableBarn.length > 0,\n        isAnswered: ({ valgteBarn }) => valgteBarn !== undefined,\n        visibilityFilter: ({ selectableBarn }) => selectableBarn.length > 0,\n    },\n    [VelkommenFormField.harForståttRettigheterOgPlikter]: {\n        isAnswered: ({ harForståttRettigheterOgPlikter }) => harForståttRettigheterOgPlikter === true,\n        isIncluded: ({ valgteBarn, selectableBarn }) => valgteBarn !== undefined || selectableBarn.length === 0,\n    },\n};\n\nexport const VelkommenFormComponents = getTypedFormComponents<VelkommenFormField, VelkommenFormData, string>();\n\nexport const velkommenFormQuestions = Questions<VelkommenQuestionsPayload, VelkommenFormField>(VelkommenFormConfig);\n","import { intlUtils } from '@navikt/fp-common';\nimport { IntlShape } from 'react-intl';\nimport { SelectableBarn } from '../components/barnVelger/BarnVelger';\n\nexport const validateHarForståttRettigheterOgPlikter = (intl: IntlShape) => (value: boolean) => {\n    if (value !== true) {\n        return intlUtils(intl, 'valideringsfeil.velkommen.harForståttRettigheterOgPlikter.påkrevd');\n    }\n\n    return undefined;\n};\n\nexport const validateHarValgtEtBarn = (intl: IntlShape) => (value: SelectableBarn | undefined) => {\n    if (value === undefined) {\n        return intlUtils(intl, 'steg.footer.spørsmålMåBesvares');\n    }\n\n    return undefined;\n};\n","import { useIntl } from 'react-intl';\nimport { intlUtils } from '@navikt/fp-common';\nimport { BodyShort, Tag } from '@navikt/ds-react';\n\nimport './søknadStatus.less';\nimport './wrapper.less';\n\ninterface Props {\n    sakErFerdigbehandlet: boolean;\n}\n\nconst SøknadStatusEtikett: React.FunctionComponent<Props> = ({ sakErFerdigbehandlet }) => {\n    const intl = useIntl();\n    const etikettType = sakErFerdigbehandlet ? 'success' : 'warning';\n    const statusTekst = sakErFerdigbehandlet\n        ? 'velkommen.sak.status.ferdigBehandlet'\n        : 'velkommen.sak.status.underBehandling';\n    return (\n        <Tag className=\"blokk-xxxs\" variant={etikettType}>\n            <BodyShort size=\"small\">{intlUtils(intl, statusTekst)} </BodyShort>\n        </Tag>\n    );\n};\n\nexport default SøknadStatusEtikett;\n","import { Block, formatDate, intlUtils } from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\nimport { VelkommenFormComponents, VelkommenFormData, VelkommenFormField } from '../../velkommenFormConfig';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport SøknadStatusEtikett from '../SøknadStatus';\nimport { validateHarValgtEtBarn } from '../../validation/velkommenValidation';\nimport { formaterFødselsdatoerPåBarn, formaterNavnPåBarn, getTekstForAntallBarn } from 'app/utils/barnUtils';\nimport { Sak } from 'app/types/Sak';\nimport { RegistrertAnnenForelder } from 'app/types/Person';\n\nimport './barnVelger.less';\nimport { BodyShort } from '@navikt/ds-react';\n\nexport enum SelectableBarnType {\n    FØDT = 'født',\n    UFØDT = 'ufødt',\n    ADOPTERT = 'adoptert',\n    IKKE_UTFYLT = 'ikkeUtfylt',\n}\n\nexport enum SelectableBarnOptions {\n    SØKNAD_GJELDER_NYTT_BARN = 'søknad_gjeder_nytt_barn',\n}\n\nexport interface SelectableBarn {\n    id: string;\n    type: SelectableBarnType;\n    antallBarn: number;\n    sortableDato: Date;\n    fnr?: string[];\n    termindato?: Date;\n    fødselsdatoer?: Date[];\n    omsorgsovertagelse?: Date;\n    fornavn?: string[];\n    kanSøkeOmEndring?: boolean;\n    sak?: Sak;\n    annenForelder?: RegistrertAnnenForelder;\n    familiehendelsesdato?: Date;\n    startdatoFørsteStønadsperiode?: Date;\n    alleBarnaLever: boolean;\n}\n\ninterface Props {\n    selectableBarn: SelectableBarn[];\n    visibility: QuestionVisibility<VelkommenFormField>;\n    formValues: VelkommenFormData;\n    setFieldValue: (field: string, value: any, shouldValidate?: boolean | undefined) => void;\n}\n\nconst getRadioForNyttBarn = (intl: IntlShape): any => {\n    return {\n        label: (\n            <>\n                <BodyShort className=\"radioTittle\" size=\"medium\">\n                    {intlUtils(intl, 'omBarnet.gjelderAnnetBarn')}\n                </BodyShort>\n                <Block margin=\"l\">\n                    <BodyShort size=\"small\"> {intlUtils(intl, 'velkommen.intro.harSaker.barnVelger.info')}</BodyShort>\n                </Block>\n            </>\n        ),\n        value: SelectableBarnOptions.SØKNAD_GJELDER_NYTT_BARN,\n        className: 'radioGroupButton',\n    };\n};\n\nconst getSakstatus = (sakErFerdigbehandlet: boolean) => {\n    return (\n        <Block className=\"radioDescription\" margin=\"l\">\n            <SøknadStatusEtikett sakErFerdigbehandlet={sakErFerdigbehandlet}></SøknadStatusEtikett>\n        </Block>\n    );\n};\n\nconst getTittelForUfødtBarn = (antallBarn: number, termindato: Date, intl: IntlShape): string => {\n    const barnTekst = getTekstForAntallBarn(antallBarn, intl);\n    return intlUtils(intl, 'velkommen.barnVelger.ufødtBarn', {\n        antallBarnTekst: barnTekst,\n        termin: formatDate(termindato),\n    });\n};\n\nconst getRadioForUfødtBarn = (barn: SelectableBarn, intl: IntlShape): any => {\n    const tittel = getTittelForUfødtBarn(barn.antallBarn, barn.termindato!, intl);\n    const saksStatus = barn.sak !== undefined ? getSakstatus(barn.sak.åpenBehandling === undefined) : undefined;\n    const saksnummerTekst =\n        barn.sak !== undefined\n            ? intlUtils(intl, 'velkommen.barnVelger.saksnummer', { saksnummer: barn.sak.saksnummer })\n            : '';\n    const harSak = barn.sak !== undefined;\n\n    return {\n        label: (\n            <>\n                <BodyShort className=\"radioTittle\" size=\"medium\">\n                    {tittel}\n                </BodyShort>\n\n                {harSak && (\n                    <>\n                        <BodyShort size=\"small\" className=\"radioDescription\">\n                            {saksnummerTekst}\n                        </BodyShort>\n                        {saksStatus}\n                    </>\n                )}\n            </>\n        ),\n        value: barn.id,\n        className: 'radioGroupButton',\n    };\n};\n\nconst getRadioForFødtEllerAdoptertBarn = (barn: SelectableBarn, intl: IntlShape): any => {\n    const navnTekstEllerBarnMedUkjentNavnTekst = formaterNavnPåBarn(\n        barn.fornavn,\n        barn.fødselsdatoer,\n        barn.omsorgsovertagelse,\n        barn.alleBarnaLever,\n        barn.antallBarn,\n        intl\n    );\n    const fødselsdatoerTekst = formaterFødselsdatoerPåBarn(barn.fødselsdatoer);\n    const fødtAdoptertDatoTekst =\n        barn.type === SelectableBarnType.FØDT || barn.type === SelectableBarnType.IKKE_UTFYLT\n            ? fødselsdatoerTekst\n            : formatDate(barn.omsorgsovertagelse!);\n    const situasjonTekst =\n        barn.type === SelectableBarnType.FØDT || barn.type === SelectableBarnType.IKKE_UTFYLT\n            ? intlUtils(intl, 'velkommen.barnVelger.født')\n            : intlUtils(intl, 'velkommen.barnVelger.adopsjon');\n\n    const saksnummerTekst =\n        barn.sak !== undefined\n            ? intlUtils(intl, 'velkommen.barnVelger.saksnummer', { saksnummer: barn.sak.saksnummer })\n            : '';\n    const saksStatus = barn.sak !== undefined ? getSakstatus(barn.sak.åpenBehandling === undefined) : undefined;\n    return {\n        label: (\n            <>\n                <BodyShort size=\"medium\" className=\"radioTittle\">\n                    {navnTekstEllerBarnMedUkjentNavnTekst}\n                </BodyShort>\n                {barn.alleBarnaLever && (\n                    <BodyShort size=\"small\" className=\"radioDescription\">\n                        {situasjonTekst} {fødtAdoptertDatoTekst}\n                    </BodyShort>\n                )}\n                <BodyShort size=\"small\">{saksnummerTekst}</BodyShort>\n                {saksStatus !== undefined && saksStatus}\n            </>\n        ),\n        value: barn.id,\n        name: VelkommenFormField.valgteBarn,\n        className: 'radioGroupButton',\n    };\n};\n\nconst getCheckboxForBarn = (barn: SelectableBarn, intl: IntlShape): any => {\n    const barnType = barn.type;\n    switch (barnType) {\n        case SelectableBarnType.FØDT:\n        case SelectableBarnType.ADOPTERT:\n        case SelectableBarnType.IKKE_UTFYLT:\n            return getRadioForFødtEllerAdoptertBarn(barn, intl);\n        case SelectableBarnType.UFØDT:\n            return getRadioForUfødtBarn(barn, intl);\n        default:\n            return undefined;\n    }\n};\n\nconst BarnVelger: FunctionComponent<Props> = (props: Props) => {\n    const intl = useIntl();\n\n    return (\n        <Block visible={props.visibility.isVisible(VelkommenFormField.valgteBarn)}>\n            <Block margin=\"xl\">\n                <VelkommenFormComponents.RadioGroup\n                    legend={intlUtils(intl, 'velkommen.intro.harSaker.barnVelger.label')}\n                    name={VelkommenFormField.valgteBarn}\n                    validate={validateHarValgtEtBarn(intl)}\n                    radios={props.selectableBarn\n                        .map((barnet) => getCheckboxForBarn(barnet, intl))\n                        .concat([getRadioForNyttBarn(intl)])}\n                />\n            </Block>\n        </Block>\n    );\n};\n\nexport default BarnVelger;\n","import { Sak } from 'app/types/Sak';\nimport { SelectableBarn, SelectableBarnType } from './components/barnVelger/BarnVelger';\nimport { Familiehendelse } from 'app/types/Familiehendelse';\nimport { RegistrertAnnenForelder, RegistrertBarn } from 'app/types/Person';\nimport dayjs from 'dayjs';\nimport { erEldreEnn3ÅrOg3Måneder } from 'app/utils/personUtils';\nimport { getRelevantFamiliehendelseDato, ISOStringToDate } from 'app/utils/dateUtils';\nimport { BarnFraNesteSak } from 'app/context/types/Barn';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport {\n    getAndreBarnFødtSammenMedBarnet,\n    getDødeBarnetForMerEnn3MånederSiden,\n    getLeverBarnet,\n} from 'app/utils/barnUtils';\nimport { guid } from '@navikt/fp-common';\n\nexport const getSortableBarnDato = (\n    fødselsdatoer: Date[],\n    termindato: Date | undefined,\n    omsorgsovertagelse: Date | undefined\n): Date => {\n    //Dato som skal kun brukes til å sortere barna i visningen\n    if (fødselsdatoer.length > 0) {\n        return fødselsdatoer[0];\n    }\n    if (termindato !== undefined) {\n        return termindato;\n    }\n\n    return omsorgsovertagelse!;\n};\n\nconst getSelectableBarnType = (gjelderAdopsjon: boolean, familiehendelse: Familiehendelse): SelectableBarnType => {\n    if (gjelderAdopsjon) {\n        return SelectableBarnType.ADOPTERT;\n    }\n    if (familiehendelse.fødselsdato !== undefined) {\n        return SelectableBarnType.FØDT;\n    }\n    return SelectableBarnType.UFØDT;\n};\n\nexport const getErDatoInnenEnDagFraAnnenDato = (dato1: Date | undefined, dato2: Date | undefined): boolean => {\n    if (dato1 === undefined || dato2 === undefined) {\n        return false;\n    }\n    return (\n        dayjs(dato1).isSameOrAfter(dayjs(dato2).subtract(1, 'day'), 'day') &&\n        dayjs(dato1).isSameOrBefore(dayjs(dato2).add(1, 'day'), 'day')\n    );\n};\n\nconst getSelectableBarnFraSak = (sak: Sak, registrerteBarn: RegistrertBarn[]): SelectableBarn => {\n    const barnFnrFraSaken = sak.barn !== undefined ? sak.barn.map((b) => b.fnr).flat() : [];\n    const fødselsdatoFraSak = ISOStringToDate(sak.familiehendelse.fødselsdato);\n\n    const pdlBarnMedSammeFnr = registrerteBarn.filter((b) => barnFnrFraSaken.includes(b.fnr));\n\n    //Noen saken sendes uten barn, derfor må sjekke PDL mot fødselsdato også\n    const pdlBarnMedSammeFødselsdato =\n        fødselsdatoFraSak !== undefined\n            ? registrerteBarn.filter(\n                  (barn) =>\n                      getErDatoInnenEnDagFraAnnenDato(barn.fødselsdato, fødselsdatoFraSak) &&\n                      !pdlBarnMedSammeFnr.find((pdlBarn) => pdlBarn.fnr === barn.fnr)\n              )\n            : [];\n    const pdlBarn = pdlBarnMedSammeFnr.concat(pdlBarnMedSammeFødselsdato);\n\n    const familiehendelseDato = ISOStringToDate(\n        getRelevantFamiliehendelseDato(\n            sak.familiehendelse.termindato,\n            sak.familiehendelse.fødselsdato,\n            sak.familiehendelse.omsorgsovertakelse\n        )\n    );\n    const barnType = getSelectableBarnType(sak.gjelderAdopsjon, sak.familiehendelse);\n\n    let fødselsdatoer;\n    if (pdlBarn && pdlBarn.length > 0) {\n        fødselsdatoer = pdlBarn.map((barn) => barn.fødselsdato);\n    } else if (fødselsdatoFraSak !== undefined) {\n        fødselsdatoer = Array(sak.familiehendelse.antallBarn).fill(fødselsdatoFraSak);\n    }\n    return {\n        id: guid(),\n        type: barnType,\n        antallBarn: sak.familiehendelse.antallBarn,\n        termindato: ISOStringToDate(sak.familiehendelse.termindato),\n        omsorgsovertagelse: ISOStringToDate(sak.familiehendelse.omsorgsovertakelse),\n        kanSøkeOmEndring: sak.kanSøkeOmEndring,\n        sak: sak,\n        fødselsdatoer,\n        familiehendelsesdato: familiehendelseDato,\n        sortableDato: ISOStringToDate(sak.familiehendelse.termindato)!,\n        startdatoFørsteStønadsperiode:\n            sak.gjeldendeVedtak !== undefined && sak.gjeldendeVedtak.perioder.length > 0\n                ? Uttaksdagen(ISOStringToDate(sak.gjeldendeVedtak.perioder[0].fom)!).denneEllerNeste()\n                : undefined,\n        fornavn:\n            pdlBarn !== undefined && pdlBarn.length > 0\n                ? pdlBarn\n                      .filter((b) => b.fornavn !== undefined && b.fornavn.trim() !== '')\n                      .map((b) => [b.fornavn, b.mellomnavn !== undefined ? b.mellomnavn : ''].join(' '))\n                : undefined,\n        fnr:\n            pdlBarn !== undefined && pdlBarn.length > 0\n                ? pdlBarn.filter((barn) => barn.fnr !== undefined).map((b) => b.fnr)\n                : undefined,\n        alleBarnaLever:\n            pdlBarn !== undefined && pdlBarn.length > 0 ? pdlBarn.every((barn) => getLeverBarnet(barn)) : false,\n    };\n};\n\nconst getSelectableBarnFraPDL = (\n    registrertBarn: RegistrertBarn,\n    annenForelder: RegistrertAnnenForelder | undefined\n): SelectableBarn => {\n    const navn =\n        registrertBarn.mellomnavn !== undefined\n            ? [registrertBarn.fornavn, registrertBarn.mellomnavn].join(' ')\n            : registrertBarn.fornavn;\n    return {\n        id: guid(),\n        type: SelectableBarnType.IKKE_UTFYLT,\n        antallBarn: 1,\n        fødselsdatoer: [registrertBarn.fødselsdato],\n        fornavn: navn !== undefined ? [navn] : undefined,\n        fnr: [registrertBarn.fnr],\n        sortableDato: registrertBarn.fødselsdato,\n        alleBarnaLever: getLeverBarnet(registrertBarn),\n        annenForelder,\n    };\n};\n\nconst getSelectableFlerlingerFraPDL = (\n    registrertBarn: RegistrertBarn,\n    barnFødtISammePeriode: RegistrertBarn[],\n    annenForelder: RegistrertAnnenForelder | undefined\n): SelectableBarn | undefined => {\n    const alleBarna = [registrertBarn].concat(barnFødtISammePeriode).sort(sorterRegistrerteBarnEtterEldstOgNavn);\n    const minstEttBarnDødeForMerEnn3MndSiden = !!alleBarna.find(\n        (b) => !getLeverBarnet(b) && getDødeBarnetForMerEnn3MånederSiden(b)\n    );\n    if (minstEttBarnDødeForMerEnn3MndSiden || alleBarna.length == 0) {\n        return undefined;\n    }\n\n    return {\n        id: guid(),\n        type: SelectableBarnType.IKKE_UTFYLT,\n        antallBarn: alleBarna.length,\n        fødselsdatoer: alleBarna.map((b) => b.fødselsdato),\n        fornavn: alleBarna.map((b) => [b.fornavn, b.mellomnavn !== undefined ? b.mellomnavn : ''].join(' ')),\n        fnr: alleBarna.map((b) => b.fnr),\n        sortableDato: alleBarna[0].fødselsdato,\n        alleBarnaLever: alleBarna.every((b) => getLeverBarnet(b)),\n        annenForelder,\n    };\n};\n\nconst getSelectableBarnOptionsFromSaker = (saker: Sak[], registrerteBarn: RegistrertBarn[]) => {\n    return saker\n        .filter(\n            (sak) =>\n                (sak.barn !== undefined && sak.barn.length > 0) ||\n                sak.familiehendelse.termindato !== undefined ||\n                sak.familiehendelse.fødselsdato !== undefined ||\n                sak.familiehendelse.omsorgsovertakelse !== undefined\n        )\n        .map((sakMedBarn) => getSelectableBarnFraSak(sakMedBarn, registrerteBarn));\n};\n\nconst getSelectableBarnOptionsFraPDL = (\n    registrerteBarn: RegistrertBarn[],\n    barnFraSaker: SelectableBarn[],\n    avsluttedeSaker: Sak[]\n): SelectableBarn[] => {\n    //Vi ønsker ikke å vise barn som har avsluttet sak\n    const registrerteBarnUtenAvsluttedeSaker = registrerteBarn.filter(\n        (regBarn) =>\n            !avsluttedeSaker.find((sak) =>\n                getErDatoInnenEnDagFraAnnenDato(regBarn.fødselsdato, ISOStringToDate(sak.familiehendelse.fødselsdato))\n            )\n    );\n\n    //Må oppdatere dødfødte barn med falsk fnr for å kunne identifisere de som allerede er blitt lagt til i visningen\n    const tempString = 'tempFnr';\n    const registrerteBarnMedFnr = registrerteBarnUtenAvsluttedeSaker.map((b) =>\n        b.fnr === undefined ? { ...b, fnr: tempString + guid().toString() } : b\n    );\n\n    //Dødfødte barn har ikke fnr og må filtreres bort senere\n    const fnrPåBarnSomErLagtTil = barnFraSaker.map((b) => b.fnr).flat();\n    const fødselsdatoPåBarnFraSaker = barnFraSaker\n        .filter((barn) => barn.fødselsdatoer !== undefined && barn.fødselsdatoer.length > 0)\n        .map((b) => b.fødselsdatoer)\n        .flat();\n    const selectableBarnFraPDL = [] as SelectableBarn[];\n\n    //Fjerner dødfødte barn som har en sak\n    const registrerteBarnUtenDødeBarnMedSak = registrerteBarnMedFnr.filter(\n        (b) =>\n            !(\n                b.dødsdato !== undefined &&\n                !!fødselsdatoPåBarnFraSaker.find((dato) => dayjs(dato).isSame(dayjs(b.fødselsdato), 'day'))\n            )\n    );\n    registrerteBarnUtenDødeBarnMedSak.forEach((regBarn) => {\n        if (!fnrPåBarnSomErLagtTil.includes(regBarn.fnr) && !erEldreEnn3ÅrOg3Måneder(regBarn.fødselsdato)) {\n            const barnFødtISammePeriode = getAndreBarnFødtSammenMedBarnet(\n                regBarn.fnr,\n                regBarn.fødselsdato,\n                registrerteBarnMedFnr\n            );\n            const annenForelder =\n                regBarn.annenForelder !== undefined\n                    ? {\n                          fnr: regBarn.annenForelder.fnr,\n                          fornavn: regBarn.annenForelder.fornavn,\n                          mellomnavn: regBarn.annenForelder.mellomnavn,\n                          etternavn: regBarn.annenForelder.etternavn,\n                      }\n                    : undefined;\n            fnrPåBarnSomErLagtTil.push(regBarn.fnr);\n            if (barnFødtISammePeriode.length === 0) {\n                if (!getDødeBarnetForMerEnn3MånederSiden(regBarn)) {\n                    const selectableBarn = getSelectableBarnFraPDL(regBarn, annenForelder);\n                    selectableBarnFraPDL.push(selectableBarn);\n                }\n            } else {\n                const selectableFlerlinger = getSelectableFlerlingerFraPDL(\n                    regBarn,\n                    barnFødtISammePeriode,\n                    annenForelder\n                );\n                barnFødtISammePeriode.forEach((b) => {\n                    fnrPåBarnSomErLagtTil.push(b.fnr);\n                });\n                if (selectableFlerlinger !== undefined) {\n                    selectableBarnFraPDL.push(selectableFlerlinger);\n                }\n            }\n        }\n    });\n    //Fjerner temp fnr fra barna som skal vises på forsiden\n    const selectableBarn = selectableBarnFraPDL.map((b) =>\n        b.fnr && b.fnr.length > 0 ? { ...b, fnr: b.fnr.filter((nr) => nr && !nr.startsWith(tempString)) } : b\n    );\n    return selectableBarn;\n};\n\nexport const getSelectableBarnOptions = (saker: Sak[], registrerteBarn: RegistrertBarn[]) => {\n    const åpneSaker = saker.filter((sak) => !sak.sakAvsluttet);\n    const avsluttedeSaker = saker.filter((sak) => sak.sakAvsluttet);\n    const barnFraSaker = getSelectableBarnOptionsFromSaker(åpneSaker, registrerteBarn);\n    const barnFraPDL = getSelectableBarnOptionsFraPDL(registrerteBarn, barnFraSaker, avsluttedeSaker);\n    return barnFraSaker.concat(barnFraPDL);\n};\n\nexport const getBarnFraNesteSak = (\n    valgteBarn: SelectableBarn,\n    selectableBarn: SelectableBarn[]\n): BarnFraNesteSak | undefined => {\n    const allePåfølgendeBarn = selectableBarn.filter(\n        (barn) =>\n            barn.sak !== undefined &&\n            barn.id !== valgteBarn.id &&\n            barn.familiehendelsesdato !== undefined &&\n            dayjs(barn.familiehendelsesdato).isAfter(valgteBarn.familiehendelsesdato!, 'day')\n    );\n    allePåfølgendeBarn.sort(sorterSelectableBarnEtterYngst);\n    const nesteBarn = allePåfølgendeBarn[allePåfølgendeBarn.length - 1];\n    if (nesteBarn === undefined) {\n        return undefined;\n    }\n\n    return {\n        familiehendelsesdato: nesteBarn.familiehendelsesdato!,\n        startdatoFørsteStønadsperiode: nesteBarn.startdatoFørsteStønadsperiode!,\n        fnr: nesteBarn.fnr,\n        annenForelderFnr: nesteBarn.sak?.annenPart?.fnr,\n    };\n};\n\nexport function sorterRegistrerteBarnEtterEldstOgNavn(b1: RegistrertBarn, b2: RegistrertBarn) {\n    if (dayjs(b1.fødselsdato).isAfter(b2.fødselsdato, 'd')) {\n        return 1;\n    } else if (dayjs(b1.fødselsdato).isBefore(b2.fødselsdato, 'd')) {\n        return -1;\n    } else {\n        return b1.fornavn < b2.fornavn ? -1 : 1;\n    }\n}\n\nexport function sorterSelectableBarnEtterYngst(b1: SelectableBarn, b2: SelectableBarn) {\n    return dayjs(b1.sortableDato).isBefore(b2.sortableDato, 'd')\n        ? 1\n        : dayjs(b1.sortableDato).isAfter(b2.sortableDato, 'd')\n        ? -1\n        : 0;\n}\n"],"names":["VelkommenFormField","getInitialVelkommenValues","harForståttRettigheterOgPlikter","VelkommenFormConfig","selectableBarn","valgteBarn","VelkommenFormComponents","getTypedFormComponents","velkommenFormQuestions","Questions","validateHarForståttRettigheterOgPlikter","intl","value","intlUtils","validateHarValgtEtBarn","SøknadStatusEtikett","sakErFerdigbehandlet","useIntl","jsx","Tag","jsxs","BodyShort","SelectableBarnType","SelectableBarnType2","SelectableBarnOptions","SelectableBarnOptions2","getRadioForNyttBarn","Fragment","Block","getSakstatus","getTittelForUfødtBarn","antallBarn","termindato","barnTekst","getTekstForAntallBarn","formatDate","getRadioForUfødtBarn","barn","tittel","saksStatus","saksnummerTekst","harSak","getRadioForFødtEllerAdoptertBarn","navnTekstEllerBarnMedUkjentNavnTekst","formaterNavnPåBarn","fødselsdatoerTekst","formaterFødselsdatoerPåBarn","fødtAdoptertDatoTekst","situasjonTekst","getCheckboxForBarn","BarnVelger","props","barnet","getSelectableBarnType","gjelderAdopsjon","familiehendelse","getErDatoInnenEnDagFraAnnenDato","dato1","dato2","dayjs","getSelectableBarnFraSak","sak","registrerteBarn","barnFnrFraSaken","b","fødselsdatoFraSak","ISOStringToDate","pdlBarnMedSammeFnr","pdlBarnMedSammeFødselsdato","pdlBarn","familiehendelseDato","getRelevantFamiliehendelseDato","barnType","fødselsdatoer","guid","Uttaksdagen","getLeverBarnet","getSelectableBarnFraPDL","registrertBarn","annenForelder","navn","getSelectableFlerlingerFraPDL","barnFødtISammePeriode","alleBarna","sorterRegistrerteBarnEtterEldstOgNavn","getDødeBarnetForMerEnn3MånederSiden","getSelectableBarnOptionsFromSaker","saker","sakMedBarn","getSelectableBarnOptionsFraPDL","barnFraSaker","avsluttedeSaker","registrerteBarnUtenAvsluttedeSaker","regBarn","tempString","registrerteBarnMedFnr","fnrPåBarnSomErLagtTil","fødselsdatoPåBarnFraSaker","selectableBarnFraPDL","dato","erEldreEnn3ÅrOg3Måneder","getAndreBarnFødtSammenMedBarnet","selectableFlerlinger","nr","getSelectableBarnOptions","åpneSaker","barnFraPDL","getBarnFraNesteSak","allePåfølgendeBarn","sorterSelectableBarnEtterYngst","nesteBarn","_b","_a","b1","b2"],"mappings":"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"}