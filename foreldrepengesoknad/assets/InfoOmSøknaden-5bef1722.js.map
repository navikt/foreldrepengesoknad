{"version":3,"file":"InfoOmSøknaden-5bef1722.js","sources":["../../src/app/steps/uttaksplan-info/utils/stønadskontoer.ts","../../src/app/components/info-eksisterende-sak/InfoEksisterendePerioder.tsx","../../src/app/components/info-eksisterende-sak/InfoOmSøknaden.tsx"],"sourcesContent":["import { StønadskontoType, TilgjengeligStønadskonto } from '@navikt/fp-common';\n\nexport const getVelgbareStønadskontotyper = (stønadskontoTyper: TilgjengeligStønadskonto[]): StønadskontoType[] =>\n    stønadskontoTyper\n        .filter(\n            (kontoType) =>\n                kontoType.konto === StønadskontoType.Fellesperiode ||\n                kontoType.konto === StønadskontoType.Fedrekvote ||\n                kontoType.konto === StønadskontoType.Mødrekvote ||\n                kontoType.konto === StønadskontoType.Foreldrepenger ||\n                kontoType.konto === StønadskontoType.AktivitetsfriKvote,\n        )\n        .map((kontoType) => kontoType.konto);\n\nexport const getStønadskontoSortOrder = (konto: StønadskontoType): number => (stønadskontoSortOrder as any)[konto];\n\nexport const stønadskontoSortOrder = {\n    [StønadskontoType.ForeldrepengerFørFødsel]: 1,\n    [StønadskontoType.Mødrekvote]: 2,\n    [StønadskontoType.Fedrekvote]: 3,\n    [StønadskontoType.Fellesperiode]: 4,\n    [StønadskontoType.Foreldrepenger]: 5,\n    [StønadskontoType.AktivitetsfriKvote]: 6,\n};\n\nexport const getAntallUker = (kontoer: TilgjengeligStønadskonto[]): number => {\n    return kontoer.reduce((sum: number, konto: TilgjengeligStønadskonto) => sum + konto.dager / 5, 0);\n};\n\nexport const getAntallUkerMødrekvote = (kontoer: TilgjengeligStønadskonto[]): number => {\n    return kontoer\n        .filter((konto: TilgjengeligStønadskonto) => konto.konto === StønadskontoType.Mødrekvote)\n        .reduce((sum: number, konto: TilgjengeligStønadskonto) => sum + konto.dager / 5, 0);\n};\n\nexport const getAntallUkerFedrekvote = (kontoer: TilgjengeligStønadskonto[]): number => {\n    return kontoer\n        .filter((konto: TilgjengeligStønadskonto) => konto.konto === StønadskontoType.Fedrekvote)\n        .reduce((sum: number, konto: TilgjengeligStønadskonto) => sum + konto.dager / 5, 0);\n};\n\nexport const getAntallUkerFellesperiode = (kontoer: TilgjengeligStønadskonto[]): number => {\n    return kontoer\n        .filter((konto: TilgjengeligStønadskonto) => konto.konto === StønadskontoType.Fellesperiode)\n        .reduce((sum: number, konto: TilgjengeligStønadskonto) => sum + konto.dager / 5, 0);\n};\n\nexport const getAntallUkerMinsterett = (minsteRettDager: number | undefined): number | undefined => {\n    if (minsteRettDager !== undefined) {\n        return minsteRettDager / 5;\n    }\n    return undefined;\n};\n","import {\n    NavnPåForeldre,\n    Periode,\n    Situasjon,\n    bemUtils,\n    formaterDato,\n    getNavnGenitivEierform,\n    getPeriodeTittel,\n    guid,\n} from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { BodyShort, Label } from '@navikt/ds-react';\n\nimport './infoEksisterendePerioder.less';\n\ninterface Props {\n    oppgittePerioder: Periode[];\n    navnForOverskrift?: string;\n    navnPåForeldre: NavnPåForeldre;\n    familiehendelsesdato: Date;\n    termindato: Date | undefined;\n    situasjon: Situasjon;\n}\n\nconst InfoEksisterendePerioder: FunctionComponent<Props> = ({\n    oppgittePerioder,\n    navnForOverskrift,\n    navnPåForeldre,\n    familiehendelsesdato,\n    termindato,\n    situasjon,\n}) => {\n    const intl = useIntl();\n    const dateFormat = 'DD. MMM YYYY';\n    const bem = bemUtils('infoEksisterendePerioder');\n\n    return (\n        <div className={bem.block}>\n            {navnForOverskrift && (\n                <BodyShort>\n                    <FormattedMessage\n                        id=\"eksisterendeSak.label.annenPartsPlan\"\n                        values={{\n                            navn: getNavnGenitivEierform(navnForOverskrift, intl.locale),\n                        }}\n                    />\n                </BodyShort>\n            )}\n            <ol className={bem.element('list')}>\n                {oppgittePerioder.map((periode) => {\n                    return (\n                        <li key={guid()}>\n                            <div className={bem.element('listInfo')}>\n                                <Label className={bem.element('listInfoPeriode')}>\n                                    <div>{formaterDato(periode.tidsperiode.fom, dateFormat)} -</div>\n                                    <div>{formaterDato(periode.tidsperiode.tom, dateFormat)}:</div>\n                                </Label>\n                                <BodyShort>\n                                    {getPeriodeTittel(\n                                        intl,\n                                        periode,\n                                        navnPåForeldre,\n                                        familiehendelsesdato,\n                                        termindato,\n                                        situasjon,\n                                    )}\n                                </BodyShort>\n                            </div>\n                        </li>\n                    );\n                })}\n            </ol>\n        </div>\n    );\n};\n\nexport default InfoEksisterendePerioder;\n","import { useIntl, IntlShape, FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport { BodyShort, ReadMore } from '@navikt/ds-react';\nimport { notEmpty } from '@navikt/fp-validation';\nimport SituasjonSirkel from '@navikt/fp-common/src/common/components/situasjon-sirkel/SituasjonSirkel';\nimport UkerSirkel from '@navikt/fp-common/src/common/components/uker-sirkel/UkerSirkel';\nimport {\n    bemUtils,\n    Block,\n    EksisterendeSak,\n    Forelder,\n    formatDate,\n    formaterDato,\n    getFarMedmorErAleneOmOmsorg,\n    getForeldreparSituasjon,\n    getKjønnFromFnr,\n    getMorErAleneOmOmsorg,\n    getNavnGenitivEierform,\n    getNavnPåForeldre,\n    getToTetteReglerGjelder,\n    getVarighetString,\n    hasValue,\n    InfoPeriode,\n    intlUtils,\n    isAnnenForelderOppgitt,\n    isFarEllerMedmor,\n    isInfoPeriode,\n    ISOStringToDate,\n    links,\n    Periodene,\n    Periodetype,\n    TilgjengeligStønadskonto,\n    Uttaksdagen,\n} from '@navikt/fp-common';\nimport InnholdMedIllustrasjon from '@navikt/fp-common/src/common/components/innhold-med-illustrasjon/InnholdMedIllustrasjon';\nimport { getAntallUker } from 'app/steps/uttaksplan-info/utils/stønadskontoer';\nimport InfoEksisterendePerioder from './InfoEksisterendePerioder';\nimport { getFamiliehendelsedato, getTermindato } from 'app/utils/barnUtils';\nimport { ContextDataType, useContextGetData } from 'app/context/FpDataContext';\n\nimport './infoOmSøknaden.less';\nimport Person from '@navikt/fp-common/src/common/types/Person';\n\nconst getHvem = (\n    intl: IntlShape,\n    erDeltUttak: boolean,\n    navnAnnenForelder: string | undefined,\n    erAnnenPartsEksisterendeSak?: boolean,\n): string => {\n    if (erDeltUttak && navnAnnenForelder !== undefined) {\n        return erAnnenPartsEksisterendeSak\n            ? intlUtils(intl, 'eksisterendeSak.tekst.benevning.førstegangssøknaMedEkisterndeSakAnnenPart', {\n                  navn: navnAnnenForelder,\n              })\n            : intlUtils(intl, 'eksisterendeSak.tekst.benevning.deltOmsorg', { navn: navnAnnenForelder });\n    }\n\n    return intlUtils(intl, 'eksisterendeSak.tekst.benevning.aleneomsorg');\n};\n\nexport interface Props {\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[];\n    eksisterendeSak: EksisterendeSak | undefined;\n    erIUttaksplanenSteg: boolean;\n    minsterettUkerToTette?: number;\n    person: Person;\n}\n\nconst InfoOmSøknaden: React.FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer,\n    eksisterendeSak,\n    erIUttaksplanenSteg,\n    minsterettUkerToTette,\n    person,\n}) => {\n    const bem = bemUtils('infoOmSøknaden');\n    const intl = useIntl();\n\n    const barn = notEmpty(useContextGetData(ContextDataType.OM_BARNET));\n    const annenForelder = notEmpty(useContextGetData(ContextDataType.ANNEN_FORELDER));\n    const søker = notEmpty(useContextGetData(ContextDataType.SØKER));\n    const søkersituasjon = notEmpty(useContextGetData(ContextDataType.SØKERSITUASJON));\n    const uttaksplanMetadata = useContextGetData(ContextDataType.UTTAKSPLAN_METADATA);\n    const barnFraNesteSak = useContextGetData(ContextDataType.BARN_FRA_NESTE_SAK);\n\n    const uker = getAntallUker(tilgjengeligeStønadskontoer);\n    const annenForelderKjønn = getKjønnFromFnr(annenForelder);\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const annenForelderNavn = isAnnenForelderOppgitt(annenForelder) ? annenForelder.fornavn : '';\n    const erDeltUttak = isAnnenForelderOppgitt(annenForelder)\n        ? !!annenForelder.harRettPåForeldrepengerINorge || !!annenForelder.harRettPåForeldrepengerIEØS\n        : false;\n    const erDeltUttakINorge = isAnnenForelderOppgitt(annenForelder) && !!annenForelder.harRettPåForeldrepengerINorge;\n    const erAleneOmOmsorg = søker.erAleneOmOmsorg;\n    const morErAleneOmOmsorg = getMorErAleneOmOmsorg(!erFarEllerMedmor, erAleneOmOmsorg, annenForelder);\n    const farMedmorErAleneOmOmsorg = getFarMedmorErAleneOmOmsorg(erFarEllerMedmor, erAleneOmOmsorg, annenForelder);\n    const { rolle } = søkersituasjon;\n    const dekningsgradGrunnlag = eksisterendeSak ? eksisterendeSak.grunnlag.dekningsgrad : undefined;\n    const situasjon = getForeldreparSituasjon(\n        person.kjønn,\n        annenForelderKjønn,\n        erDeltUttak,\n        morErAleneOmOmsorg,\n        farMedmorErAleneOmOmsorg,\n        rolle,\n    );\n    const skalViseInfoOmMorsSak = hasValue(annenForelderNavn) && erFarEllerMedmor && erDeltUttak;\n\n    const forelderVedAleneomsorg = erDeltUttak ? undefined : erFarEllerMedmor ? Forelder.farMedmor : Forelder.mor;\n\n    const hvem = getHvem(\n        intl,\n        erDeltUttakINorge,\n        annenForelderNavn,\n        eksisterendeSak ? eksisterendeSak.erAnnenPartsSak : false,\n    );\n    const navnPåForeldre = getNavnPåForeldre(person, annenForelder, erFarEllerMedmor, intl);\n    const familiehendelsedatoNesteBarn =\n        barnFraNesteSak !== undefined ? barnFraNesteSak.familiehendelsesdato : undefined;\n    const familiehendelsesdato = ISOStringToDate(getFamiliehendelsedato(barn));\n    const erToTette = getToTetteReglerGjelder(familiehendelsesdato, familiehendelsedatoNesteBarn);\n    const minsterettToTetteAntallUkerTekst = [minsterettUkerToTette, intlUtils(intl, 'uker')].join(' ');\n    const startStønadsperiodeNyttBarn =\n        barnFraNesteSak !== undefined ? barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n    const sisteUttaksdagDetteBarnet =\n        startStønadsperiodeNyttBarn !== undefined ? Uttaksdagen(startStønadsperiodeNyttBarn).forrige() : undefined;\n    const termindato = getTermindato(barn);\n    let sisteInfoPeriode;\n    if (eksisterendeSak) {\n        sisteInfoPeriode = eksisterendeSak.uttaksplan\n            ? Periodene(eksisterendeSak.uttaksplan).finnSisteInfoperiode()\n            : undefined;\n    }\n    const nesteMuligeUttaksdagEtterAnnenPart =\n        eksisterendeSak && eksisterendeSak.uttaksplan && sisteInfoPeriode\n            ? Uttaksdagen(sisteInfoPeriode.tidsperiode.tom).neste()\n            : undefined;\n\n    const navnGenitivEierform = getNavnGenitivEierform(annenForelderNavn, intl.locale);\n\n    const infoperioder: InfoPeriode[] =\n        eksisterendeSak !== undefined ? eksisterendeSak.uttaksplan.filter(isInfoPeriode) : [];\n\n    const visPlanTekst: string = erIUttaksplanenSteg\n        ? 'eksisterendeSak.label.seAnnenPartsPlanIPlanen'\n        : 'eksisterendeSak.label.seAnnenPartsPlan';\n\n    const søkersPerioder =\n        eksisterendeSak &&\n        eksisterendeSak.uttaksplan &&\n        eksisterendeSak.uttaksplan.filter((p) => p.type !== Periodetype.Info);\n\n    return (\n        <Block padBottom=\"xl\" className={classNames(`${bem.block}`)}>\n            <InnholdMedIllustrasjon\n                tittel={intlUtils(intl, `eksisterendeSak.tittel.${erDeltUttakINorge ? 'deltUttak' : 'aleneomsorg'}`)}\n                illustrasjoner={[\n                    <SituasjonSirkel key=\"situasjon\" situasjon={situasjon} valgtForelder={forelderVedAleneomsorg} />,\n                    <UkerSirkel key=\"uker\" uker={uker} />,\n                ]}\n            >\n                <Block padBottom=\"xl\">\n                    <BodyShort className={bem.element('infoTekst')}>\n                        <FormattedMessage\n                            id=\"eksisterendeSak.tekst.html\"\n                            values={{\n                                uker: <strong>{getVarighetString(uker * 5, intl)}</strong>,\n                                dekningsgrad: (\n                                    <strong>{uttaksplanMetadata?.dekningsgrad ?? dekningsgradGrunnlag}</strong>\n                                ),\n                                navn: hvem,\n                            }}\n                        />\n                    </BodyShort>\n                </Block>\n                {skalViseInfoOmMorsSak && hasValue(annenForelderNavn) && nesteMuligeUttaksdagEtterAnnenPart && (\n                    <BodyShort className={bem.element('infoTekst')}>\n                        <FormattedMessage\n                            id=\"eksisterendeSak.tekst.nesteMuligeUttaksdato\"\n                            values={{\n                                dato: formaterDato(nesteMuligeUttaksdagEtterAnnenPart, 'DD. MMM YYYY'),\n                                navn: annenForelderNavn,\n                                b: (msg: any) => <b>{msg}</b>,\n                            }}\n                        />\n                    </BodyShort>\n                )}\n\n                {skalViseInfoOmMorsSak &&\n                    hasValue(annenForelderNavn) &&\n                    infoperioder !== undefined &&\n                    infoperioder.length > 0 && (\n                        <Block padBottom=\"l\">\n                            <ReadMore\n                                header={intlUtils(intl, visPlanTekst, {\n                                    navn: navnGenitivEierform,\n                                })}\n                            >\n                                <InfoEksisterendePerioder\n                                    oppgittePerioder={infoperioder}\n                                    navnForOverskrift={annenForelderNavn}\n                                    navnPåForeldre={navnPåForeldre}\n                                    familiehendelsesdato={familiehendelsesdato!}\n                                    termindato={termindato}\n                                    situasjon={søkersituasjon.situasjon}\n                                />\n                            </ReadMore>\n                        </Block>\n                    )}\n            </InnholdMedIllustrasjon>\n            {skalViseInfoOmMorsSak && søkersPerioder !== undefined && søkersPerioder.length > 0 && (\n                <InnholdMedIllustrasjon\n                    tittel={intlUtils(intl, 'eksisterendeSak.tittel.dineDagerMedForeldrepenger')}\n                    illustrasjoner={[]}\n                    infoboks={\n                        erIUttaksplanenSteg === false ? (\n                            <>\n                                <ReadMore header=\"Se perioder oppgitt av annen forelder\">\n                                    Periodene med foreldrepenger oppgitt av annen forelder\n                                    <InfoEksisterendePerioder\n                                        oppgittePerioder={søkersPerioder}\n                                        navnPåForeldre={navnPåForeldre}\n                                        familiehendelsesdato={familiehendelsesdato!}\n                                        termindato={termindato}\n                                        situasjon={søkersituasjon.situasjon}\n                                    />\n                                </ReadMore>\n                            </>\n                        ) : undefined\n                    }\n                ></InnholdMedIllustrasjon>\n            )}\n            {erToTette && startStønadsperiodeNyttBarn !== undefined && (\n                <Block padBottom=\"xl\">\n                    <BodyShort>\n                        <strong>\n                            <FormattedMessage\n                                id=\"infoOmSøknaden.toTette.finnesBarnMedNesteSak.tittel\"\n                                values={{ antallUkerToTette: minsterettUkerToTette }}\n                            ></FormattedMessage>\n                        </strong>\n                    </BodyShort>\n                    <BodyShort>\n                        <FormattedMessage\n                            id=\"infoOmSøknaden.toTette.finnesBarnMedNesteSak\"\n                            values={{\n                                startStønadsperiodeNyttBarn: formatDate(startStønadsperiodeNyttBarn),\n                                minsterettAntallUker: <strong>{minsterettToTetteAntallUkerTekst}</strong>,\n                            }}\n                        />\n                    </BodyShort>\n                </Block>\n            )}\n            {!erToTette && startStønadsperiodeNyttBarn !== undefined && (\n                <Block padBottom=\"xl\">\n                    <BodyShort>\n                        <strong>\n                            <FormattedMessage\n                                id=\"infoOmSøknaden.ikkeToTette.finnesBarnMedNesteSak.tittel\"\n                                values={{ sisteUttaksdagDetteBarnet: formaterDato(sisteUttaksdagDetteBarnet) }}\n                            ></FormattedMessage>\n                        </strong>\n                    </BodyShort>\n                    <BodyShort>\n                        <FormattedMessage\n                            id=\"infoOmSøknaden.ikkeToTette.finnesBarnMedNesteSak\"\n                            values={{\n                                startStønadsperiodeNyttBarn: formatDate(startStønadsperiodeNyttBarn),\n                                sisteUttaksdagDetteBarnet: formaterDato(sisteUttaksdagDetteBarnet),\n                            }}\n                        />\n                    </BodyShort>\n                </Block>\n            )}\n            <BodyShort>\n                <FormattedMessage\n                    id=\"uttaksplan.informasjon.lesMer\"\n                    values={{\n                        a: (msg: any) => (\n                            <a href={links.viktigeFrister} className=\"lenke\" rel=\"noreferrer\" target=\"_blank\">\n                                {msg}\n                            </a>\n                        ),\n                    }}\n                />\n            </BodyShort>\n        </Block>\n    );\n};\n\nexport default InfoOmSøknaden;\n"],"names":["StønadskontoType","getAntallUker","kontoer","sum","konto","getAntallUkerMødrekvote","getAntallUkerFedrekvote","getAntallUkerFellesperiode","getAntallUkerMinsterett","minsteRettDager","InfoEksisterendePerioder","oppgittePerioder","navnForOverskrift","navnPåForeldre","familiehendelsesdato","termindato","situasjon","intl","useIntl","dateFormat","bem","bemUtils","jsxs","jsx","BodyShort","FormattedMessage","getNavnGenitivEierform","periode","Label","formaterDato","getPeriodeTittel","guid","getHvem","erDeltUttak","navnAnnenForelder","erAnnenPartsEksisterendeSak","intlUtils","InfoOmSøknaden","tilgjengeligeStønadskontoer","eksisterendeSak","erIUttaksplanenSteg","minsterettUkerToTette","person","barn","notEmpty","useContextGetData","ContextDataType","annenForelder","søker","søkersituasjon","uttaksplanMetadata","barnFraNesteSak","uker","annenForelderKjønn","getKjønnFromFnr","erFarEllerMedmor","isFarEllerMedmor","annenForelderNavn","isAnnenForelderOppgitt","erDeltUttakINorge","erAleneOmOmsorg","morErAleneOmOmsorg","getMorErAleneOmOmsorg","farMedmorErAleneOmOmsorg","getFarMedmorErAleneOmOmsorg","rolle","dekningsgradGrunnlag","getForeldreparSituasjon","skalViseInfoOmMorsSak","hasValue","forelderVedAleneomsorg","Forelder","hvem","getNavnPåForeldre","familiehendelsedatoNesteBarn","ISOStringToDate","getFamiliehendelsedato","erToTette","getToTetteReglerGjelder","minsterettToTetteAntallUkerTekst","startStønadsperiodeNyttBarn","sisteUttaksdagDetteBarnet","Uttaksdagen","getTermindato","sisteInfoPeriode","Periodene","nesteMuligeUttaksdagEtterAnnenPart","navnGenitivEierform","infoperioder","isInfoPeriode","visPlanTekst","søkersPerioder","p","Periodetype","Block","classNames","InnholdMedIllustrasjon","SituasjonSirkel","UkerSirkel","getVarighetString","msg","ReadMore","Fragment","formatDate","links","InfoOmSøknaden$1"],"mappings":"g7BAiBKA,EAAiB,wBAAjB,GACAA,EAAiB,WAAjB,GACAA,EAAiB,WAAjB,GACAA,EAAiB,cAAjB,GACAA,EAAiB,eAAjB,GACAA,EAAiB,mBAAjB,GAGQ,MAAAC,GAAiBC,GACnBA,EAAQ,OAAO,CAACC,EAAaC,IAAoCD,EAAMC,EAAM,MAAQ,EAAG,CAAC,EAGvFC,GAA2BH,GAC7BA,EACF,OAAQE,GAAoCA,EAAM,QAAUJ,EAAiB,UAAU,EACvF,OAAO,CAACG,EAAaC,IAAoCD,EAAMC,EAAM,MAAQ,EAAG,CAAC,EAG7EE,GAA2BJ,GAC7BA,EACF,OAAQE,GAAoCA,EAAM,QAAUJ,EAAiB,UAAU,EACvF,OAAO,CAACG,EAAaC,IAAoCD,EAAMC,EAAM,MAAQ,EAAG,CAAC,EAG7EG,GAA8BL,GAChCA,EACF,OAAQE,GAAoCA,EAAM,QAAUJ,EAAiB,aAAa,EAC1F,OAAO,CAACG,EAAaC,IAAoCD,EAAMC,EAAM,MAAQ,EAAG,CAAC,EAG7EI,GAA2BC,GAA4D,CAChG,GAAIA,IAAoB,OACpB,OAAOA,EAAkB,CAGjC,EC3BA,MAAAC,EAAA,CAAA,CAA4D,iBAAAC,EACxD,kBAAAC,EACA,eAAAC,EACA,qBAAAC,EACA,WAAAC,EACA,UAAAC,CAEJ,IAAA,CACI,MAAAC,EAAAC,IACAC,EAAA,eACAC,EAAAC,EAAA,0BAAA,EAEA,OAAAC,EAAAA,KAAA,MAAA,CAAA,UAAAF,EAAA,MAAA,SAAA,CAESR,GAAAW,EAAA,IAAAC,EAAA,CAAA,SAAAD,EAAA,IAEOE,EAAC,CAAA,GAAA,uCACM,OAAA,CACK,KAAAC,EAAAd,EAAAK,EAAA,MAAA,CACuD,CAC/D,CAAA,EAAA,EAERM,EAAAA,IAAA,KAAA,CAAA,UAAAH,EAAA,QAAA,MAAA,EAAA,SAAAT,EAAA,IAAAgB,GAIIJ,MAAA,KAAA,CAAA,SAAAD,EAAAA,KAAA,MAAA,CAAA,UAAAF,EAAA,QAAA,UAAA,EAAA,SAAA,CAGYE,EAAA,KAAAM,GAAA,CAAA,UAAAR,EAAA,QAAA,iBAAA,EAAA,SAAA,CACIE,OAAA,MAAA,CAAA,SAAA,CAAMO,EAAAF,EAAA,YAAA,IAAAR,CAAA,EAAgD,IAAE,EAAA,EAAEG,OAAA,MAAA,CAAA,SAAA,CACpDO,EAAAF,EAAA,YAAA,IAAAR,CAAA,EAAgD,GAAE,EAAA,CAAC,EAAA,EAC7DI,MAAAC,EAAA,CAAA,SAAAM,GAEKb,EACGU,EACAd,EACAC,EACAC,EACAC,CACA,EAAA,CAER,EAAA,CAAA,EAAAe,GAAA,CAAA,CAER,EAAA,CAGZ,CAAA,CAAA,CAGZ,+1BChCA,MAAAC,GAAA,CAAAf,EAAAgB,EAAAC,EAAAC,IAMIF,GAAAC,IAAA,OACIC,EAAAC,EAAAnB,EAAA,4EAAA,CACmG,KAAAiB,CACnF,CAAA,EAAAE,EAAAnB,EAAA,6CAAA,CAAA,KAAAiB,CAAA,CAAA,EAKpBE,EAAAnB,EAAA,6CAAA,EAWJoB,GAAA,CAAA,CAAwD,4BAAAC,EACpD,gBAAAC,EACA,oBAAAC,EACA,sBAAAC,EACA,OAAAC,CAEJ,IAAA,CACI,MAAAtB,EAAAC,EAAA,gBAAA,EACAJ,EAAAC,IAEAyB,EAAAC,EAAAC,EAAAC,EAAA,SAAA,CAAA,EACAC,EAAAH,EAAAC,EAAAC,EAAA,cAAA,CAAA,EACAE,EAAAJ,EAAAC,EAAAC,EAAA,KAAA,CAAA,EACAG,EAAAL,EAAAC,EAAAC,EAAA,cAAA,CAAA,EACAI,EAAAL,EAAAC,EAAA,mBAAA,EACAK,EAAAN,EAAAC,EAAA,kBAAA,EAEAM,EAAAnD,GAAAqC,CAAA,EACAe,EAAAC,GAAAP,CAAA,EACAQ,EAAAC,GAAAP,EAAA,KAAA,EACAQ,EAAAC,EAAAX,CAAA,EAAAA,EAAA,QAAA,GACAd,EAAAyB,EAAAX,CAAA,EAAA,CAAA,CAAAA,EAAA,+BAAA,CAAA,CAAAA,EAAA,4BAAA,GAGAY,EAAAD,EAAAX,CAAA,GAAA,CAAA,CAAAA,EAAA,8BACAa,EAAAZ,EAAA,gBACAa,EAAAC,GAAA,CAAAP,EAAAK,EAAAb,CAAA,EACAgB,GAAAC,GAAAT,EAAAK,EAAAb,CAAA,EACA,CAAA,MAAAkB,EAAA,EAAAhB,EACAiB,GAAA3B,EAAAA,EAAA,SAAA,aAAA,OACAvB,GAAAmD,GAAkBzB,EAAA,MACPW,EACPpB,EACA4B,EACAE,GACAE,EACA,EAEJG,EAAAC,EAAAZ,CAAA,GAAAF,GAAAtB,EAEAqC,GAAArC,EAAA,OAAAsB,EAAAgB,EAAA,UAAAA,EAAA,IAEAC,GAAAxC,GAAaf,EACT0C,EACAF,EACAlB,EAAAA,EAAA,gBAAA,EACoD,EAExD1B,EAAA4D,GAAA/B,EAAAK,EAAAQ,EAAAtC,CAAA,EACAyD,GAAAvB,IAAA,OAAAA,EAAA,qBAAA,OAEArC,EAAA6D,GAAAC,GAAAjC,CAAA,CAAA,EACAkC,EAAAC,GAAAhE,EAAA4D,EAAA,EACAK,GAAA,CAAAtC,EAAAL,EAAAnB,EAAA,MAAA,CAAA,EAAA,KAAA,GAAA,EACA+D,EAAA7B,IAAA,OAAAA,EAAA,8BAAA,OAEA8B,EAAAD,IAAA,OAAAE,EAAAF,CAAA,EAAA,UAAA,OAEAjE,EAAAoE,GAAAxC,CAAA,EACA,IAAAyC,EACA7C,IACI6C,EAAA7C,EAAA,WAAA8C,GAAA9C,EAAA,UAAA,EAAA,uBAAA,QAIJ,MAAA+C,EAAA/C,GAAAA,EAAA,YAAA6C,EAAAF,EAAAE,EAAA,YAAA,GAAA,EAAA,MAAA,EAAA,OAKAG,GAAA7D,EAAA+B,EAAAxC,EAAA,MAAA,EAEAuE,EAAAjD,IAAA,OAAAA,EAAA,WAAA,OAAAkD,EAAA,EAAA,GAGAC,GAAAlD,EAAA,gDAAA,yCAIAmD,EAAApD,GAAAA,EAAA,YAAAA,EAAA,WAAA,OAAAqD,GAAAA,EAAA,OAAAC,GAAA,IAAA,EAKA,OAAAvE,EAAA,KAAAwE,EAAA,CAAA,UAAA,KAAA,UAAAC,GAAA,GAAA3E,EAAA,KAAA,EAAA,EAAA,SAAA,CAEQE,EAAA,KAAA0E,EAAC,CAAA,OAAA5D,EAAAnB,EAAA,0BAAA0C,EAAA,YAAA,aAAA,EAAA,EACsG,eAAA,CACnFpC,EAAA,IAAA0E,GAAA,CAAA,UAAAjF,GAAA,cAAAsD,EAAA,EAAA,WAAA,EACkF/C,EAAAA,IAAA2E,GAAA,CAAA,KAAA9C,CAAA,EAAA,MAAA,CAC3D,EACvC,SAAA,CAEA7B,EAAAA,IAAAuE,EAAA,CAAA,UAAA,KAAA,SAAAvE,EAAA,IAAAC,EAAA,CAAA,UAAAJ,EAAA,QAAA,WAAA,EAAA,SAAAG,EAAA,IAEQE,EAAC,CAAA,GAAA,6BACM,OAAA,CACK,KAAAF,EAAAA,IAAA,SAAA,CAAA,SAAA4E,GAAA/C,EAAA,EAAAnC,CAAA,EAAA,EAC6C,aAAAM,EAAA,IAAA,SAAA,CAAA,UAAA2B,GAAA,YAAAA,EAAA,eAAAgB,GAAA,EAEqB,KAAAM,EAEhE,CACV,CAAA,CAAA,CAAA,CAAA,CAAA,EAGZJ,GAAAC,EAAAZ,CAAA,GAAA6B,GAAA/D,EAAAA,IAAAC,EAAA,CAAA,UAAAJ,EAAA,QAAA,WAAA,EAAA,SAAAG,EAAA,IAGQE,EAAC,CAAA,GAAA,8CACM,OAAA,CACK,KAAAI,EAAAyD,EAAA,cAAA,EACiE,KAAA7B,EAC/D,EAAA2C,GAAA7E,EAAA,IAAA,IAAA,CAAA,SAAA6E,EAAA,CACmB,CAC7B,CAAA,EAAA,EAERhC,GAAAC,EAAAZ,CAAA,GAAA+B,IAAA,QAAAA,EAAA,OAAA,GAAAjE,EAAA,IAAAuE,EAAA,CAAA,UAAA,IAAA,SAAAvE,EAAA,IAQQ8E,EAAC,CAAA,OAAAjE,EAAAnB,EAAAyE,GAAA,CACyC,KAAAH,EAC5B,CAAA,EACT,SAAAhE,EAAA,IAEDb,EAAC,CAAA,iBAAA8E,EACqB,kBAAA/B,EACC,eAAA5C,EACnB,qBAAAC,EACA,WAAAC,EACA,UAAAkC,EAAA,SAC0B,CAAA,CAC9B,CAAA,EAAA,CAER,CAAA,CAAA,EAEZmB,GAAAuB,IAAA,QAAAA,EAAA,OAAA,GAAApE,EAAA,IAEIyE,EAAC,CAAA,OAAA5D,EAAAnB,EAAA,mDAAA,EAC8E,eAAA,CAAA,EAC1D,SAAAuB,IAAA,GAAAjB,EAAAA,IAAA+E,EAAAA,SAAA,CAAA,SAAAhF,EAAAA,KAAA+E,EAAA,CAAA,OAAA,wCAAA,SAAA,CAIoD,yDAAA9E,EAAA,IAErDb,EAAC,CAAA,iBAAAiF,EACqB,eAAA9E,EAClB,qBAAAC,EACA,WAAAC,EACA,UAAAkC,EAAA,SAC0B,CAAA,CAC9B,EAAA,CAAA,CAAA,EAAA,MAGR,CAAA,EAEX4B,GAAAG,IAAA,QAAA1D,EAAAA,KAAAwE,EAAA,CAAA,UAAA,KAAA,SAAA,CAIGvE,EAAA,IAAAC,EAAA,CAAA,SAAAD,EAAA,IAAA,SAAA,CAAA,SAAAA,EAAA,IAEQE,EAAC,CAAA,GAAA,sDACM,OAAA,CAAA,kBAAAgB,CAAA,CACgD,CAAA,CAAA,CAAA,CAAA,CAAA,EAG/DlB,MAAAC,EAAA,CAAA,SAAAD,EAAA,IAEIE,EAAC,CAAA,GAAA,+CACM,OAAA,CACK,4BAAA8E,EAAAvB,CAAA,EAC+D,qBAAAzD,EAAAA,IAAA,SAAA,CAAA,SAAAwD,EAAA,CAAA,CACH,CACpE,CAAA,EAAA,CAER,EAAA,EACJ,CAAAF,GAAAG,IAAA,QAAA1D,EAAAA,KAAAwE,EAAA,CAAA,UAAA,KAAA,SAAA,CAIIvE,EAAA,IAAAC,EAAA,CAAA,SAAAD,EAAA,IAAA,SAAA,CAAA,SAAAA,EAAA,IAEQE,EAAC,CAAA,GAAA,0DACM,OAAA,CAAA,0BAAAI,EAAAoD,CAAA,CAAA,CAC0E,CAAA,CAAA,CAAA,CAAA,CAAA,EAGzF1D,MAAAC,EAAA,CAAA,SAAAD,EAAA,IAEIE,EAAC,CAAA,GAAA,mDACM,OAAA,CACK,4BAAA8E,EAAAvB,CAAA,EAC+D,0BAAAnD,EAAAoD,CAAA,CACF,CACrE,CAAA,EAAA,CAER,EAAA,EACJ1D,MAAAC,EAAA,CAAA,SAAAD,EAAA,IAGAE,EAAC,CAAA,GAAA,gCACM,OAAA,CACK,EAAA2E,GAAA7E,EAAA,IAAA,IAAA,CAAA,KAAAiF,GAAA,eAAA,UAAA,QAAA,IAAA,aAAA,OAAA,SAAA,SAAAJ,EAAA,CAIA,CAER,CAAA,EAAA,CAER,CAAA,CAAA,CAGZ,EAEAK,GAAApE"}