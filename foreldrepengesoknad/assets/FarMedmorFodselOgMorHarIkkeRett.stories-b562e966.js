import{j as s}from"./jsx-runtime-69eee039.js";import{w as u}from"./withIntl-902881a4.js";import{w as O}from"./withRouter-025ea7c0.js";import{w as R,F as S}from"./ForeldrepengerStateMock-14e379f5.js";import{A as N}from"./AxiosMock-6b1c8141.js";import{F as U,U as T}from"./UttaksplanInfo-f1eb948d.js";import{R as A}from"./api-9c727c36.js";import"./index-7c191284.js";import"./IntlProvider-a6625fc8.js";import"./validationUtils-52801e0e.js";import"./index-b3a39e30.js";import"./Link-00530630.js";import"./clsx.m-266f4de0.js";import"./index-e13aeee6.js";import"./extends-2a43ab49.js";import"./index-ecbee218.js";import"./Label-2ad8abda.js";import"./v4-a960c1f4.js";import"./useSøknad-d91e9ba5.js";import"./dateUtils-04b407de.js";import"./mapSøkerinfoDTO-3b9336f6.js";import"./AttachmentType-f6ad37cf.js";import"./useSaveLoadedRoute-66d41ce7.js";import"./amplitude-bdf1e125.js";import"./globalUtil-c820f73d.js";import"./submitUtils-11ed6e7a.js";import"./AnnenForelder-5c5d4f7f.js";import"./vedleggUtils-fe89b468.js";import"./Attachment-a8e5b8d1.js";import"./periodeUtils-604aac1e.js";import"./Periodene-21fb5519.js";import"./apiInterceptor-c6c2844c.js";import"./personUtils-6d894d58.js";import"./Personkort-1e618102.js";import"./Dekningsgrad-fced8842.js";import"./useSøkerinfo-1c6ac28b.js";import"./index-47edccfa.js";import"./annenForelderUtils-98162410.js";import"./constants-c4bc2eb8.js";import"./LenkeKnapp-4a871682.js";import"./InfoOmSøknaden-a9c61b87.js";import"./Sirkelmaske-3353d4e4.js";import"./Foreldrepar-8addd8ac.js";import"./InnholdMedIllustrasjon-09301804.js";import"./links-b36d21ab.js";import"./useOnValidSubmit-afa78197.js";import"./eksisterendeSakUtils-9c55f90c.js";import"./velkommenUtils-635e27c3.js";import"./Fieldset-2a6c6c1b.js";import"./formUtils-3000cdf9.js";const I={søker:{fnr:"1212121313",fornavn:"Espen",etternavn:"Utvikler",kjønn:"M",fødselsdato:"1978-04-12",barn:[{fnr:"19047815714",fødselsdato:"2021-03-15",annenForelder:{fnr:"12038517080",fødselsdato:"1985-03-12",fornavn:"TALENTFULL",etternavn:"MYGG"},fornavn:"KLØKTIG",etternavn:"MIDTPUNKT",kjønn:"M"}]}},E=4,x="/soknad/uttaksplan-info",D={søknad:{type:"foreldrepenger",harGodkjentVilkår:!0,søkersituasjon:{situasjon:"fødsel",rolle:"far"},barn:{type:"født",fødselsdatoer:["2021-07-01"],antallBarn:"1",termindato:"2021-07-01"},annenForelder:{etternavn:"dfg",fornavn:"dsgdfg",fnr:"123123123",utenlandskFnr:!1,erUfør:!1,kanIkkeOppgis:!1,harRettPåForeldrepengerINorge:!1,harRettPåForeldrepengerIEØS:!1},søker:{erAleneOmOmsorg:!1,språkkode:"nb"},informasjonOmUtenlandsopphold:{tidligereOpphold:[],senereOpphold:[]},erEndringssøknad:!1,uttaksplan:[]},version:E,currentRoute:x,søknadGjelderEtNyttBarn:!0},L={FORELDREPENGER:250},P={farRundtFødsel:0,generellMinsterett:0,toTette:0},l={kontoer:L,minsteretter:P},_={FORELDREPENGER:200},v={farRundtFødsel:0,generellMinsterett:0,toTette:0},f={kontoer:_,minsteretter:v},y="/innsyn/v2/annenPartVedtak",a="/konto",o=D,M=I,Pe={title:"steps/uttaksplan-info/FarMedmorFødselOgMorHarIkkeRett",component:U,decorators:[O,u,R]},g=t=>{const F=n=>{n.onPost(y).replyOnce(200,void 0,A.FINISHED),n.onGet(a).replyOnce(200,t.stønadskonto100),n.onGet(a).replyOnce(200,t.stønadskonto80)};return s.jsx(N,{mock:F,children:s.jsx(S,{søknad:t.context,søkerinfo:t.søkerinfo,children:s.jsx(T,{})})})},e=g.bind({});e.args={stønadskonto100:f,stønadskonto80:l,context:o,søkerinfo:M};const r=g.bind({});r.args={stønadskonto100:f,stønadskonto80:l,context:{...o,søknad:{...o.søknad,annenForelder:{...o.søknad.annenForelder,erUfør:!0}}},søkerinfo:M};var p,k,i;e.parameters={...e.parameters,docs:{...(p=e.parameters)==null?void 0:p.docs,source:{originalSource:`args => {
  const restMock = (apiMock: MockAdapter) => {
    apiMock.onPost(UTTAKSPLAN_ANNEN_URL).replyOnce(200, undefined, RequestStatus.FINISHED);
    apiMock.onGet(STØNADSKONTO_URL).replyOnce(200, args.stønadskonto100);
    apiMock.onGet(STØNADSKONTO_URL).replyOnce(200, args.stønadskonto80);
  };
  return <AxiosMock mock={restMock}>
            <ForeldrepengerStateMock søknad={(args.context as ForeldrepengesøknadContextState)} søkerinfo={(args.søkerinfo as SøkerinfoDTO)}>
                <UttaksplanInfo />
            </ForeldrepengerStateMock>
        </AxiosMock>;
}`,...(i=(k=e.parameters)==null?void 0:k.docs)==null?void 0:i.source}}};var d,m,c;r.parameters={...r.parameters,docs:{...(d=r.parameters)==null?void 0:d.docs,source:{originalSource:`args => {
  const restMock = (apiMock: MockAdapter) => {
    apiMock.onPost(UTTAKSPLAN_ANNEN_URL).replyOnce(200, undefined, RequestStatus.FINISHED);
    apiMock.onGet(STØNADSKONTO_URL).replyOnce(200, args.stønadskonto100);
    apiMock.onGet(STØNADSKONTO_URL).replyOnce(200, args.stønadskonto80);
  };
  return <AxiosMock mock={restMock}>
            <ForeldrepengerStateMock søknad={(args.context as ForeldrepengesøknadContextState)} søkerinfo={(args.søkerinfo as SøkerinfoDTO)}>
                <UttaksplanInfo />
            </ForeldrepengerStateMock>
        </AxiosMock>;
}`,...(c=(m=r.parameters)==null?void 0:m.docs)==null?void 0:c.source}}};const _e=["UttaksplanDerMorIkkeHarRettPåForeldrepenger","UttaksplanDerMorIkkeHarRettPåForeldrepengerOgMorErUfør"];export{e as UttaksplanDerMorIkkeHarRettPåForeldrepenger,r as UttaksplanDerMorIkkeHarRettPåForeldrepengerOgMorErUfør,_e as __namedExportsOrder,Pe as default};
//# sourceMappingURL=FarMedmorFodselOgMorHarIkkeRett.stories-b562e966.js.map
