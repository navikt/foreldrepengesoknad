{"version":3,"file":"eksisterendeSakUtils-3e67918d.js","sources":["../../../../packages/fp-common/src/common/types/DekningsgradDTO.ts","../../../../packages/fp-common/src/common/types/FamiliehendelseType.ts","../../../../packages/fp-common/src/common/types/OppholdÅrsakTypeDTO.ts","../../../../packages/fp-common/src/common/types/PeriodeResultatÅrsak.ts","../../../../packages/fp-common/src/common/types/UtsettelseÅrsakTypeDTO.ts","../../../../packages/fp-common/src/common/types/UttakArbeidType.ts","../../../../packages/fp-common/src/common/types/RettighetType.ts","../../src/app/utils/getFamiliehendelseType.ts","../../src/app/utils/mapSaksperioderTilUttaksperioder.ts","../../src/app/utils/eksisterendeSakUtils.ts"],"sourcesContent":["export enum DekningsgradDTO {\n    ÅTTI_PROSENT = 'ÅTTI',\n    HUNDRE_PROSENT = 'HUNDRE',\n}\n","export enum FamiliehendelseType {\n    'ADOPSJON' = 'ADPSJN',\n    'OMSORGSOVERTAKELSE' = 'OMSRGO',\n    'FØDSEL' = 'FODSL',\n    'TERM' = 'TERM',\n}\n","export enum OppholdÅrsakTypeDTO {\n    UttakFellesperiodeAnnenForelder = 'FELLESPERIODE_ANNEN_FORELDER',\n    UttakFedrekvoteAnnenForelder = 'FEDREKVOTE_ANNEN_FORELDER',\n    UttakMødrekvoteAnnenForelder = 'MØDREKVOTE_ANNEN_FORELDER',\n    UttakForeldrepengerAnnenForelder = 'FORELDREPENGER_ANNEN_FORELDER',\n    Ingen = 'INGEN',\n}\n","export enum PeriodeResultatÅrsak {\n    AVSLAG_FRATREKK_PLEIEPENGER = 'AVSLAG_FRATREKK_PLEIEPENGER',\n    AVSLAG_HULL_MELLOM_FORELDRENES_PERIODER = 'AVSLAG_HULL_MELLOM_FORELDRENES_PERIODER',\n    ANNET = 'ANNET',\n}\n","export enum UtsettelseÅrsakTypeDTO {\n    Ferie = 'LOVBESTEMT_FERIE',\n    Arbeid = 'ARBEID',\n    Sykdom = 'SØKER_SYKDOM',\n    InstitusjonSøker = 'SØKER_INNLAGT',\n    InstitusjonBarnet = 'BARN_INNLAGT',\n    HvØvelse = 'HV_ØVELSE',\n    NavTiltak = 'NAV_TILTAK',\n    Fri = 'FRI',\n}\n","export enum UttakArbeidType {\n    'ORDINÆRT_ARBEID' = 'ORDINÆRT_ARBEID',\n    'SELVSTENDIG_NÆRINGSDRIVENDE' = 'SELVSTENDIG_NÆRINGSDRIVENDE',\n    'FRILANS' = 'FRILANS',\n    'ANNET' = 'ANNET',\n}\n","export enum RettighetType {\n    BARE_SØKER_RETT = 'BARE_SØKER_RETT',\n    ALENEOMSORG = 'ALENEOMSORG',\n    BEGGE_RETT = 'BEGGE_RETT',\n}\n","import { FamiliehendelseType } from '@navikt/fp-common';\n\nexport const getFamiliehendelseType = (\n    fødselsdato: string | undefined,\n    termindato: string | undefined,\n    omsorgsovertagelsesdato: string | undefined,\n) => {\n    if (omsorgsovertagelsesdato !== undefined) {\n        return FamiliehendelseType.ADOPSJON;\n    } else if (fødselsdato !== undefined) {\n        return FamiliehendelseType.FØDSEL;\n    } else if (termindato !== undefined) {\n        return FamiliehendelseType.TERM;\n    } else {\n        throw new Error('Fødselsdato/ termindato/ omsorgsovertakelsedato mangler');\n    }\n};\n","import dayjs from 'dayjs';\nimport { getArbeidsformFromUttakArbeidstype } from './eksisterendeSakUtils';\nimport { getRelevantFamiliehendelseDato } from './dateUtils';\nimport {\n    AvslåttPeriode,\n    FamiliehendelseType,\n    Forelder,\n    ISOStringToDate,\n    MorsAktivitet,\n    OppholdÅrsakType,\n    Overføringsperiode,\n    Periode,\n    PeriodeInfoType,\n    PeriodeResultatÅrsak,\n    Perioden,\n    Periodetype,\n    Saksgrunnlag,\n    Saksperiode,\n    StønadskontoType,\n    Tidsperioden,\n    UtsettelseAnnenPartInfoPeriode,\n    Utsettelsesperiode,\n    UtsettelseÅrsakType,\n    UtsettelseÅrsakTypeDTO,\n    UttakAnnenPartInfoPeriode,\n    Uttaksdagen,\n    Uttaksperiode,\n    convertTidsperiodeToTidsperiodeDate,\n    erUttaksdag,\n    guid,\n    isInfoPeriode,\n    isUttaksperiode,\n    isValidTidsperiode,\n    sorterPerioder,\n    tidperiodeOverlapperDato,\n} from '@navikt/fp-common';\nimport {\n    splittPeriodePåDato,\n    splittUttaksperiodePåFamiliehendelsesdato,\n} from '@navikt/uttaksplan/src/builder/leggTilPeriode';\nimport { finnOgSettInnHull, settInnAnnenPartsUttak } from '@navikt/uttaksplan/src/builder/uttaksplanbuilderUtils';\n\nconst harUttaksdager = (periode: Periode): boolean => {\n    return Perioden(periode).getAntallUttaksdager() > 0;\n};\n\nconst harGyldigTidsperiode = (periode: Periode): boolean => {\n    return isValidTidsperiode(periode.tidsperiode);\n};\n\nconst slåSammenLikePerioder = (\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n): Periode[] => {\n    if (perioder.length <= 1) {\n        return perioder;\n    }\n\n    const nyePerioder: Periode[] = [];\n    const infoPerioder = perioder.filter((p) => isInfoPeriode(p));\n    const ordinærePerioder = perioder.filter((p) => !isInfoPeriode(p));\n    const tmp: Periode[] = [...ordinærePerioder, ...infoPerioder];\n    let forrigePeriode: Periode | undefined = { ...tmp[0] };\n\n    tmp.forEach((periode, index) => {\n        if (index === 0) {\n            return;\n        }\n\n        if (forrigePeriode === undefined) {\n            forrigePeriode = periode;\n            return;\n        }\n\n        if (\n            Perioden(forrigePeriode).erLik(periode, false, true) &&\n            Perioden(forrigePeriode).erSammenhengende(periode) &&\n            !dayjs(periode.tidsperiode.fom).isSame(familiehendelsesdato, 'day') &&\n            !(\n                førsteUttaksdagNesteBarnsSak !== undefined &&\n                dayjs(periode.tidsperiode.fom).isSame(førsteUttaksdagNesteBarnsSak, 'day')\n            )\n        ) {\n            forrigePeriode.tidsperiode.tom = periode.tidsperiode.tom;\n            return;\n        } else {\n            nyePerioder.push(forrigePeriode);\n        }\n\n        forrigePeriode = periode;\n    });\n\n    nyePerioder.push(forrigePeriode);\n\n    return nyePerioder.sort(sorterPerioder);\n};\n\nconst korrigerTidsperiodeTilGyldigUttaksdag = (periode: Periode): Periode => {\n    const { fom, tom } = periode.tidsperiode;\n    const fomOk = erUttaksdag(fom);\n    const tomOk = erUttaksdag(tom);\n    if (fomOk && tomOk) {\n        return periode;\n    } else if (!fomOk && !tomOk) {\n        return {\n            ...periode,\n            tidsperiode: {\n                fom: Uttaksdagen(fom).neste(),\n                tom: Uttaksdagen(tom).forrige(),\n            },\n        };\n    } else if (!fomOk && tomOk) {\n        return {\n            ...periode,\n            tidsperiode: {\n                fom: Uttaksdagen(fom).neste(),\n                tom,\n            },\n        };\n    } else {\n        return {\n            ...periode,\n            tidsperiode: {\n                fom,\n                tom: Uttaksdagen(tom).forrige(),\n            },\n        };\n    }\n};\n\nconst getForelderForPeriode = (saksperiode: Saksperiode, søkerErFarEllerMedmor: boolean): Forelder => {\n    if (saksperiode.gjelderAnnenPart) {\n        return søkerErFarEllerMedmor ? Forelder.mor : Forelder.farMedmor;\n    }\n    return søkerErFarEllerMedmor ? Forelder.farMedmor : Forelder.mor;\n};\n\nexport const getUtsettelseÅrsakFromSaksperiode = (\n    årsak: UtsettelseÅrsakTypeDTO | undefined,\n): UtsettelseÅrsakType | undefined => {\n    switch (årsak) {\n        case UtsettelseÅrsakTypeDTO.Arbeid:\n            return UtsettelseÅrsakType.Arbeid;\n        case UtsettelseÅrsakTypeDTO.Ferie:\n            return UtsettelseÅrsakType.Ferie;\n        case UtsettelseÅrsakTypeDTO.InstitusjonBarnet:\n            return UtsettelseÅrsakType.InstitusjonBarnet;\n        case UtsettelseÅrsakTypeDTO.InstitusjonSøker:\n            return UtsettelseÅrsakType.InstitusjonSøker;\n        case UtsettelseÅrsakTypeDTO.Sykdom:\n            return UtsettelseÅrsakType.Sykdom;\n        case UtsettelseÅrsakTypeDTO.HvØvelse:\n            return UtsettelseÅrsakType.HvØvelse;\n        case UtsettelseÅrsakTypeDTO.NavTiltak:\n            return UtsettelseÅrsakType.NavTiltak;\n        case UtsettelseÅrsakTypeDTO.Fri:\n            return UtsettelseÅrsakType.Fri;\n        default:\n            return undefined;\n    }\n};\n\nconst getOppholdÅrsakFromSaksperiode = (saksperiode: Saksperiode): OppholdÅrsakType | undefined => {\n    switch (saksperiode.kontoType) {\n        case StønadskontoType.Fedrekvote:\n            return OppholdÅrsakType.UttakFedrekvoteAnnenForelder;\n        case StønadskontoType.Fellesperiode:\n            return OppholdÅrsakType.UttakFellesperiodeAnnenForelder;\n        case StønadskontoType.Mødrekvote:\n            return OppholdÅrsakType.UttakMødrekvoteAnnenForelder;\n        case StønadskontoType.Foreldrepenger:\n            return OppholdÅrsakType.UttakForeldrepengerAnnenForelder;\n        case StønadskontoType.ForeldrepengerFørFødsel:\n            return OppholdÅrsakType.ForeldrepengerFørFødsel;\n        default:\n            return undefined;\n    }\n};\n\nconst beregnSamtidigUttaksProsent = (\n    egenProsent: number | undefined,\n    andrePartsProsent: number | undefined,\n    graderingsprosent: number | undefined,\n): string | undefined => {\n    if (egenProsent) {\n        return egenProsent.toString();\n    }\n\n    if (andrePartsProsent) {\n        return graderingsprosent ? (100 - graderingsprosent).toString() : '100';\n    }\n\n    return undefined;\n};\n\nexport const getKontotypeBareFarHarRett = (periodeTrekkerMinsterett: boolean): StønadskontoType => {\n    return periodeTrekkerMinsterett ? StønadskontoType.AktivitetsfriKvote : StønadskontoType.Foreldrepenger;\n};\n\nconst getErMorForSyk = (\n    erFarEllerMedmor: boolean,\n    saksperiode: Saksperiode,\n    familiehendelsesdato: string,\n    konto: StønadskontoType | undefined,\n) => {\n    if (\n        erFarEllerMedmor &&\n        !saksperiode.flerbarnsdager &&\n        !saksperiode.samtidigUttak &&\n        dayjs(saksperiode.periode.fom).isBefore(dayjs(familiehendelsesdato).add(6, 'weeks'), 'day') &&\n        konto !== StønadskontoType.AktivitetsfriKvote\n    ) {\n        if (saksperiode.morsAktivitet !== MorsAktivitet.Uføre) {\n            return true;\n        }\n    }\n\n    return undefined;\n};\n\nexport const mapUttaksperiodeFromSaksperiode = (\n    saksperiode: Saksperiode,\n    grunnlag: Saksgrunnlag,\n    innvilgedePerioder: Saksperiode[],\n): Periode => {\n    const gradert = saksperiode.gradering !== undefined && saksperiode.resultat.innvilget;\n    const tidsperiodeDate = convertTidsperiodeToTidsperiodeDate(saksperiode.periode);\n    const erFarEllerMedmorOgKunSøkerHarRett =\n        grunnlag.søkerErFarEllerMedmor &&\n        !grunnlag.morHarRett &&\n        !grunnlag.farMedmorErAleneOmOmsorg &&\n        !grunnlag.harAnnenForelderTilsvarendeRettEØS;\n\n    const annenPartSamtidigUttakPeriode: Saksperiode | undefined =\n        innvilgedePerioder !== undefined\n            ? innvilgedePerioder.find(\n                  (ip) =>\n                      (Tidsperioden(convertTidsperiodeToTidsperiodeDate(ip.periode)).erLik(tidsperiodeDate) ||\n                          Tidsperioden(convertTidsperiodeToTidsperiodeDate(ip.periode)).overlapper(tidsperiodeDate)) &&\n                      ip.guid !== saksperiode.guid,\n              )\n            : undefined;\n\n    let samtidigUttakProsentAnnenPart;\n\n    if (annenPartSamtidigUttakPeriode) {\n        samtidigUttakProsentAnnenPart = annenPartSamtidigUttakPeriode.samtidigUttak;\n    }\n\n    const samtidigUttakProsent = beregnSamtidigUttaksProsent(\n        saksperiode.samtidigUttak,\n        samtidigUttakProsentAnnenPart,\n        saksperiode.gradering?.arbeidstidprosent,\n    );\n\n    const { termindato, fødselsdato, omsorgsovertakelsesdato } = grunnlag;\n\n    const familiehendelseDato = getRelevantFamiliehendelseDato(termindato, fødselsdato, omsorgsovertakelsesdato);\n    const kontoType = erFarEllerMedmorOgKunSøkerHarRett\n        ? getKontotypeBareFarHarRett(saksperiode.resultat.trekkerMinsterett)\n        : saksperiode.kontoType;\n    const uttaksperiode: Uttaksperiode = {\n        id: guid(),\n        type: Periodetype.Uttak,\n        konto: kontoType!,\n        tidsperiode: tidsperiodeDate,\n        forelder: getForelderForPeriode(saksperiode, grunnlag.søkerErFarEllerMedmor),\n        ønskerSamtidigUttak: saksperiode.samtidigUttak !== undefined,\n        gradert,\n        samtidigUttakProsent,\n        ønskerFlerbarnsdager: grunnlag.antallBarn > 1 ? saksperiode.flerbarnsdager : undefined,\n        stillingsprosent: gradert ? saksperiode.gradering!.arbeidstidprosent.toString() : undefined,\n        arbeidsformer: gradert\n            ? [getArbeidsformFromUttakArbeidstype(saksperiode.gradering!.aktivitet.type)]\n            : undefined,\n        orgnumre:\n            gradert && saksperiode.gradering!.aktivitet.arbeidsgiver !== undefined\n                ? [saksperiode.gradering!.aktivitet.arbeidsgiver.id]\n                : undefined,\n        morsAktivitetIPerioden: saksperiode.morsAktivitet,\n        erMorForSyk: getErMorForSyk(grunnlag.søkerErFarEllerMedmor, saksperiode, familiehendelseDato, kontoType),\n        angittAvAnnenPart: saksperiode.angittAvAnnenPart,\n    };\n\n    return uttaksperiode;\n};\n\nconst mapUtsettelseperiodeFromSaksperiode = (saksperiode: Saksperiode, erFarEllerMedmor: boolean): Periode => {\n    const utsettelsesperiode: Utsettelsesperiode = {\n        id: guid(),\n        type: Periodetype.Utsettelse,\n        årsak: getUtsettelseÅrsakFromSaksperiode(saksperiode.utsettelseÅrsak)!,\n        tidsperiode: convertTidsperiodeToTidsperiodeDate(saksperiode.periode),\n        forelder: getForelderForPeriode(saksperiode, erFarEllerMedmor),\n        erArbeidstaker: false,\n        morsAktivitetIPerioden: saksperiode.morsAktivitet,\n    };\n\n    return utsettelsesperiode;\n};\n\nconst mapInfoPeriodeFromAvslåttSaksperiode = (saksperiode: Saksperiode, erFarEllerMedmor: boolean): AvslåttPeriode => {\n    const avslåttPeriode: AvslåttPeriode = {\n        id: guid(),\n        type: Periodetype.Info,\n        infotype: PeriodeInfoType.avslåttPeriode,\n        tidsperiode: convertTidsperiodeToTidsperiodeDate(saksperiode.periode),\n        avslåttPeriodeType: saksperiode.utsettelseÅrsak !== undefined ? Periodetype.Utsettelse : Periodetype.Uttak,\n        kontoType: saksperiode.kontoType,\n        forelder: getForelderForPeriode(saksperiode, erFarEllerMedmor),\n        overskrives: true,\n        visPeriodeIPlan: true,\n        kanSlettes: saksperiode.resultat.årsak !== PeriodeResultatÅrsak.AVSLAG_FRATREKK_PLEIEPENGER,\n    };\n    return avslåttPeriode;\n};\n\nconst mapAnnenPartInfoPeriodeFromSaksperiode = (\n    saksperiode: Saksperiode,\n    erFarEllerMedmor: boolean,\n    termindato: string | undefined,\n    innvilgedePerioder?: Saksperiode[],\n): UttakAnnenPartInfoPeriode | UtsettelseAnnenPartInfoPeriode | AvslåttPeriode => {\n    const tidsperiodeDate = convertTidsperiodeToTidsperiodeDate(saksperiode.periode);\n\n    if (saksperiode.utsettelseÅrsak !== undefined && saksperiode.resultat.innvilget === true) {\n        return {\n            type: Periodetype.Info,\n            infotype: PeriodeInfoType.utsettelseAnnenPart,\n            id: guid(),\n            årsak: getUtsettelseÅrsakFromSaksperiode(saksperiode.utsettelseÅrsak)!,\n            tidsperiode: tidsperiodeDate,\n            forelder: getForelderForPeriode(saksperiode, erFarEllerMedmor),\n            overskrives: true,\n            visPeriodeIPlan: true,\n        };\n    }\n\n    const skalVises =\n        innvilgedePerioder !== undefined &&\n        !innvilgedePerioder.some(\n            (ip) =>\n                (Tidsperioden(convertTidsperiodeToTidsperiodeDate(ip.periode)).erLik(tidsperiodeDate) ||\n                    Tidsperioden(convertTidsperiodeToTidsperiodeDate(ip.periode)).overlapper(tidsperiodeDate)) &&\n                ip.guid !== saksperiode.guid,\n        );\n    const årsak = getOppholdÅrsakFromSaksperiode(saksperiode);\n\n    const annenPartSamtidigUttakPeriode: Saksperiode | undefined =\n        innvilgedePerioder !== undefined\n            ? innvilgedePerioder.find(\n                  (ip) =>\n                      (Tidsperioden(convertTidsperiodeToTidsperiodeDate(ip.periode)).erLik(tidsperiodeDate) ||\n                          Tidsperioden(convertTidsperiodeToTidsperiodeDate(ip.periode)).overlapper(tidsperiodeDate)) &&\n                      ip.guid !== saksperiode.guid,\n              )\n            : undefined;\n    let samtidigUttakProsentAnnenPart;\n\n    if (annenPartSamtidigUttakPeriode) {\n        samtidigUttakProsentAnnenPart = annenPartSamtidigUttakPeriode.samtidigUttak;\n    }\n\n    const samtidigUttakProsent = beregnSamtidigUttaksProsent(\n        saksperiode.samtidigUttak,\n        samtidigUttakProsentAnnenPart,\n        saksperiode.gradering?.arbeidstidprosent,\n    );\n\n    if (erAnnenPartsAvslåttePrematurePeriode(saksperiode, termindato)) {\n        return {\n            type: Periodetype.Info,\n            infotype: PeriodeInfoType.avslåttPeriode,\n            id: guid(),\n            tidsperiode: tidsperiodeDate,\n            forelder: getForelderForPeriode(saksperiode, erFarEllerMedmor),\n            overskrives: true,\n            visPeriodeIPlan: skalVises,\n            kontoType: saksperiode.kontoType,\n            avslåttPeriodeType: Periodetype.Uttak,\n            kanSlettes: false,\n        };\n    }\n\n    return {\n        type: Periodetype.Info,\n        infotype: PeriodeInfoType.uttakAnnenPart,\n        id: guid(),\n        årsak: årsak!,\n        tidsperiode: tidsperiodeDate,\n        forelder: getForelderForPeriode(saksperiode, erFarEllerMedmor),\n        overskrives: true,\n        gradert: saksperiode.gradering !== undefined ? true : false,\n        ønskerSamtidigUttak: samtidigUttakProsent !== undefined,\n        samtidigUttakProsent: samtidigUttakProsent,\n        stillingsprosent:\n            saksperiode.gradering !== undefined ? saksperiode.gradering.arbeidstidprosent.toString() : undefined,\n        visPeriodeIPlan: skalVises,\n    };\n};\n\nconst mapOverføringsperiodeFromSaksperiode = (\n    saksperiode: Saksperiode,\n    erFarEllerMedmor: boolean,\n): Overføringsperiode => {\n    return {\n        id: guid(),\n        forelder: getForelderForPeriode(saksperiode, erFarEllerMedmor),\n        konto: saksperiode.kontoType!,\n        tidsperiode: convertTidsperiodeToTidsperiodeDate(saksperiode.periode),\n        type: Periodetype.Overføring,\n        årsak: saksperiode.overføringÅrsak!,\n    };\n};\n\nconst mapPeriodeFromSaksperiode = (\n    saksperiode: Saksperiode,\n    grunnlag: Saksgrunnlag,\n    gyldigePerioder: Saksperiode[],\n): Periode => {\n    const innvilgedePerioder = gyldigePerioder.filter(\n        (p) => !erAnnenPartsAvslåttePrematurePeriode(p, grunnlag.termindato),\n    );\n    if (saksperiode.gjelderAnnenPart) {\n        return mapAnnenPartInfoPeriodeFromSaksperiode(\n            saksperiode,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.termindato,\n            innvilgedePerioder,\n        );\n    }\n\n    if (!saksperiode.resultat.innvilget) {\n        return mapInfoPeriodeFromAvslåttSaksperiode(saksperiode, grunnlag.søkerErFarEllerMedmor);\n    }\n\n    if (saksperiode.utsettelseÅrsak !== undefined) {\n        return mapUtsettelseperiodeFromSaksperiode(saksperiode, grunnlag.søkerErFarEllerMedmor);\n    }\n\n    if (saksperiode.overføringÅrsak !== undefined) {\n        return mapOverføringsperiodeFromSaksperiode(saksperiode, grunnlag.søkerErFarEllerMedmor);\n    }\n\n    return mapUttaksperiodeFromSaksperiode(saksperiode, grunnlag, innvilgedePerioder);\n};\n\nexport const erAnnenPartsAvslåttePrematurePeriode = (saksperiode: Saksperiode, termindato: string | undefined) => {\n    return (\n        termindato &&\n        saksperiode.gjelderAnnenPart &&\n        !saksperiode.resultat.innvilget &&\n        saksperiode.resultat.trekkerDager &&\n        dayjs(saksperiode.periode.tom).isBefore(dayjs(ISOStringToDate(termindato)), 'd') &&\n        saksperiode.kontoType !== StønadskontoType.Fedrekvote\n    );\n};\n\nexport const gyldigeSaksperioder = (saksperiode: Saksperiode, termindato: string | undefined) => {\n    if (saksperiode.resultat.innvilget) return true;\n\n    if (saksperiode.gjelderAnnenPart) {\n        if (erAnnenPartsAvslåttePrematurePeriode(saksperiode, termindato)) {\n            return true;\n        }\n        return false;\n    }\n    if (\n        saksperiode.resultat.årsak !== PeriodeResultatÅrsak.AVSLAG_HULL_MELLOM_FORELDRENES_PERIODER &&\n        saksperiode.resultat.trekkerDager === true\n    ) {\n        return true;\n    }\n    return false;\n};\n\nexport const getPerioderSplittetOverFødselOgNesteBarnsFørsteStønadsdag = (\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n): Periode[] => {\n    const nyePerioder = [] as Periode[];\n    perioder.forEach((p) => {\n        if (tidperiodeOverlapperDato(p.tidsperiode, familiehendelsesdato) && isUttaksperiode(p)) {\n            const splittedePerioder = splittUttaksperiodePåFamiliehendelsesdato(p, familiehendelsesdato);\n            splittedePerioder.forEach((periode) => nyePerioder.push(periode));\n        } else if (\n            førsteUttaksdagNesteBarnsSak !== undefined &&\n            tidperiodeOverlapperDato(p.tidsperiode, førsteUttaksdagNesteBarnsSak)\n        ) {\n            const splittedePerioder = splittPeriodePåDato(p, førsteUttaksdagNesteBarnsSak);\n            splittedePerioder.forEach((periode) => nyePerioder.push(periode));\n        } else {\n            nyePerioder.push(p);\n        }\n    });\n    return nyePerioder;\n};\n\nconst mapSaksperioderTilUttaksperioder = (\n    saksperioder: Saksperiode[],\n    grunnlag: Saksgrunnlag,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n): Periode[] => {\n    const gyldigePerioder = saksperioder.filter((periode) => gyldigeSaksperioder(periode, grunnlag.termindato));\n    const perioder = gyldigePerioder.map((periode) => mapPeriodeFromSaksperiode(periode, grunnlag, gyldigePerioder));\n    const familiehendelsesdato = new Date(grunnlag.familiehendelseDato);\n\n    const splittedePerioder = getPerioderSplittetOverFødselOgNesteBarnsFørsteStønadsdag(\n        perioder,\n        familiehendelsesdato,\n        førsteUttaksdagNesteBarnsSak,\n    );\n\n    const sammenslåddePerioder: Periode[] = slåSammenLikePerioder(\n        [...splittedePerioder]\n            .sort(sorterPerioder)\n            .filter(harUttaksdager)\n            .map(korrigerTidsperiodeTilGyldigUttaksdag)\n            .filter(harGyldigTidsperiode)\n            .filter(harUttaksdager),\n        familiehendelsesdato,\n        førsteUttaksdagNesteBarnsSak,\n    );\n\n    const kunFarMedmorHarRett =\n        !grunnlag.morHarRett && grunnlag.farMedmorHarRett && !grunnlag.harAnnenForelderTilsvarendeRettEØS;\n    const erAdopsjon = grunnlag.familiehendelseType === FamiliehendelseType.ADOPSJON;\n\n    const perioderUtenAnnenPartsSamtidigUttak = sammenslåddePerioder.filter((p) => !isInfoPeriode(p));\n\n    const annenPartsUttak = sammenslåddePerioder.filter((p) => isInfoPeriode(p));\n    const harAktivitetskravIPeriodeUtenUttak =\n        !grunnlag.erDeltUttak && kunFarMedmorHarRett && !grunnlag.farMedmorErAleneOmOmsorg;\n    const perioderUtenAnnenPartsSamtidigUttakMedHull = finnOgSettInnHull(\n        perioderUtenAnnenPartsSamtidigUttak,\n        harAktivitetskravIPeriodeUtenUttak,\n        familiehendelsesdato,\n        erAdopsjon,\n        kunFarMedmorHarRett,\n        grunnlag.søkerErFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak,\n    );\n\n    return finnOgSettInnHull(\n        settInnAnnenPartsUttak(\n            perioderUtenAnnenPartsSamtidigUttakMedHull,\n            annenPartsUttak,\n            familiehendelsesdato,\n            førsteUttaksdagNesteBarnsSak,\n        ),\n        harAktivitetskravIPeriodeUtenUttak,\n        familiehendelsesdato,\n        erAdopsjon,\n        kunFarMedmorHarRett,\n        grunnlag.søkerErFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak,\n    );\n};\n\nexport default mapSaksperioderTilUttaksperioder;\n","import { getFamiliehendelseType } from './getFamiliehendelseType';\nimport { getRelevantFamiliehendelseDato, sorterDatoEtterEldst } from './dateUtils';\nimport mapSaksperioderTilUttaksperioder from './mapSaksperioderTilUttaksperioder';\nimport { Søknad } from 'app/context/types/Søknad';\nimport Søker from 'app/context/types/Søker';\nimport { AnnenPartVedtakDTO } from 'app/types/AnnenPartVedtakDTO';\nimport { SelectableBarn } from 'app/pages/velkommen/components/barnVelger/BarnVelger';\nimport {\n    AnnenForelder,\n    Arbeidsform,\n    Barn,\n    BarnType,\n    Dekningsgrad,\n    DekningsgradDTO,\n    EksisterendeSak,\n    FamiliehendelseType,\n    ISOStringToDate,\n    OppholdÅrsakType,\n    OppholdÅrsakTypeDTO,\n    Sak,\n    Saksgrunnlag,\n    Saksperiode,\n    SaksperiodeDTO,\n    Situasjon,\n    StønadskontoType,\n    Søkerinfo,\n    Søkerrolle,\n    Søkersituasjon,\n    Tidsperioden,\n    UttakArbeidType,\n    convertTidsperiodeToTidsperiodeDate,\n    guid,\n    intlUtils,\n    isAdoptertBarn,\n    isFødtBarn,\n    isInfoPeriode,\n    isUfødtBarn,\n} from '@navikt/fp-common';\nimport { IntlShape } from 'react-intl';\nimport { getErDatoInnenEnDagFraAnnenDato } from 'app/pages/velkommen/velkommenUtils';\nimport { dateToISOString } from '@navikt/sif-common-formik-ds/lib';\nimport { RettighetType } from '@navikt/fp-common/src/common/types/RettighetType';\nimport Person, { RegistrertAnnenForelder, RegistrertBarn } from '@navikt/fp-common/src/common/types/Person';\nimport PersonFnrDTO from '@navikt/fp-common/src/common/types/PersonFnrDTO';\n\nexport const getArbeidsformFromUttakArbeidstype = (arbeidstype: UttakArbeidType): Arbeidsform => {\n    switch (arbeidstype) {\n        case UttakArbeidType.SELVSTENDIG_NÆRINGSDRIVENDE:\n            return Arbeidsform.selvstendignæringsdrivende;\n        case UttakArbeidType.FRILANS:\n            return Arbeidsform.frilans;\n        default:\n            return Arbeidsform.arbeidstaker;\n    }\n};\n\nconst getStønadskontoTypeFromOppholdÅrsakType = (årsak: OppholdÅrsakTypeDTO): StønadskontoType | undefined => {\n    switch (årsak) {\n        case OppholdÅrsakTypeDTO.UttakFedrekvoteAnnenForelder:\n            return StønadskontoType.Fedrekvote;\n        case OppholdÅrsakTypeDTO.UttakFellesperiodeAnnenForelder:\n            return StønadskontoType.Fellesperiode;\n        case OppholdÅrsakTypeDTO.UttakMødrekvoteAnnenForelder:\n            return StønadskontoType.Mødrekvote;\n        default:\n            return undefined;\n    }\n};\n\nconst mapOppholdÅrsakType = (årsak: OppholdÅrsakTypeDTO | undefined): OppholdÅrsakType | undefined => {\n    switch (årsak) {\n        case OppholdÅrsakTypeDTO.UttakFedrekvoteAnnenForelder:\n            return OppholdÅrsakType.UttakFedrekvoteAnnenForelder;\n        case OppholdÅrsakTypeDTO.UttakFellesperiodeAnnenForelder:\n            return OppholdÅrsakType.UttakFellesperiodeAnnenForelder;\n        case OppholdÅrsakTypeDTO.UttakMødrekvoteAnnenForelder:\n            return OppholdÅrsakType.UttakMødrekvoteAnnenForelder;\n        default:\n            return undefined;\n    }\n};\n\nexport const mapSaksperiodeFromDTO = (p: SaksperiodeDTO, erAnnenPartsSak: boolean): Saksperiode => {\n    const { oppholdÅrsak } = p;\n    const returnPeriode: Saksperiode = {\n        guid: guid(),\n        periode: {\n            fom: p.fom,\n            tom: p.tom,\n        },\n        gjelderAnnenPart: erAnnenPartsSak,\n        resultat: p.resultat,\n        kontoType: p.kontoType,\n        flerbarnsdager: p.flerbarnsdager,\n        gradering: p.gradering,\n        utsettelseÅrsak: p.utsettelseÅrsak,\n        overføringÅrsak: p.overføringÅrsak,\n        samtidigUttak: p.samtidigUttak,\n        morsAktivitet: p.morsAktivitet,\n        oppholdÅrsak: mapOppholdÅrsakType(p.oppholdÅrsak),\n    } as Saksperiode;\n\n    if (oppholdÅrsak !== undefined && erAnnenPartsSak === false) {\n        returnPeriode.gjelderAnnenPart = true;\n        returnPeriode.kontoType = getStønadskontoTypeFromOppholdÅrsakType(oppholdÅrsak)!;\n    }\n\n    if (oppholdÅrsak !== undefined && erAnnenPartsSak) {\n        returnPeriode.gjelderAnnenPart = false;\n        returnPeriode.angittAvAnnenPart = true;\n        returnPeriode.kontoType = getStønadskontoTypeFromOppholdÅrsakType(oppholdÅrsak)!;\n    }\n\n    return returnPeriode as Saksperiode;\n};\n\nconst saksperiodeErInnvilget = (saksperiode: Saksperiode): boolean => saksperiode.resultat.innvilget;\n\nconst filterAvslåttePeriodeMedInnvilgetPeriodeISammeTidsperiode = (\n    periode: Saksperiode,\n    _index: number,\n    saksperioder: Saksperiode[],\n) => {\n    const likePerioder = saksperioder.filter(\n        (periode2) =>\n            periode.guid !== periode2.guid &&\n            Tidsperioden(convertTidsperiodeToTidsperiodeDate(periode.periode)).erLik(\n                convertTidsperiodeToTidsperiodeDate(periode2.periode),\n            ),\n    );\n\n    if (likePerioder.length === 0) {\n        return true;\n    }\n\n    const innvilgedePerioder = likePerioder.filter(saksperiodeErInnvilget);\n\n    if (saksperiodeErInnvilget(periode) === false && innvilgedePerioder.length > 0) {\n        return false;\n    }\n\n    return true;\n};\n\nexport const getStartdatoFørstePeriodeAnnenPart = (\n    annenPartsSak: AnnenPartVedtakDTO | undefined | '',\n): Date | undefined => {\n    if (\n        annenPartsSak === undefined ||\n        annenPartsSak === '' ||\n        Object.keys(annenPartsSak).length === 0 ||\n        annenPartsSak.perioder.length === 0\n    ) {\n        return undefined;\n    }\n    return ISOStringToDate(annenPartsSak.perioder[0].fom);\n};\n\nexport const mapAnnenPartsEksisterendeSakFromDTO = (\n    eksisterendeSakAnnenPart: AnnenPartVedtakDTO | undefined | '',\n    barn: Barn,\n    søkerErFarEllerMedmor: boolean,\n    familiehendelsesdato: string,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n): EksisterendeSak | undefined => {\n    if (\n        eksisterendeSakAnnenPart === undefined ||\n        eksisterendeSakAnnenPart === '' ||\n        Object.keys(eksisterendeSakAnnenPart).length === 0\n    ) {\n        return undefined;\n    }\n    const erAnnenPartsSak = true;\n    const saksperioderAnnenPart = eksisterendeSakAnnenPart.perioder\n        .map((p) => {\n            return mapSaksperiodeFromDTO(p, erAnnenPartsSak);\n        })\n        .filter(filterAvslåttePeriodeMedInnvilgetPeriodeISammeTidsperiode);\n    let termindato = undefined;\n    if (eksisterendeSakAnnenPart.termindato !== undefined) {\n        termindato = eksisterendeSakAnnenPart.termindato;\n    } else if ((isFødtBarn(barn) || isUfødtBarn(barn)) && barn.termindato !== undefined) {\n        termindato = dateToISOString(barn.termindato);\n    }\n    const fødselsdato = isFødtBarn(barn) ? dateToISOString(barn.fødselsdatoer[0]) : undefined;\n    const adopsjonsdato = isAdoptertBarn(barn) ? dateToISOString(barn.adopsjonsdato) : undefined;\n\n    const grunnlagForAnnenPart = {\n        dekningsgrad:\n            eksisterendeSakAnnenPart.dekningsgrad === DekningsgradDTO.HUNDRE_PROSENT\n                ? Dekningsgrad.HUNDRE_PROSENT\n                : Dekningsgrad.ÅTTI_PROSENT,\n        antallBarn: eksisterendeSakAnnenPart.antallBarn ? eksisterendeSakAnnenPart.antallBarn : barn.antallBarn,\n        morErAleneOmOmsorg: false,\n        morErUfør: false,\n        morHarRett: true,\n        farMedmorErAleneOmOmsorg: false,\n        farMedmorHarRett: true,\n        søkerErFarEllerMedmor,\n        termindato,\n        fødselsdato,\n        omsorgsovertakelsesdato: adopsjonsdato,\n        erDeltUttak: true,\n        erBarnetFødt: fødselsdato !== undefined,\n        familiehendelseDato: familiehendelsesdato,\n        familiehendelseType: getFamiliehendelseType(fødselsdato, termindato, adopsjonsdato),\n        harAnnenForelderTilsvarendeRettEØS: false,\n        ønskerJustertUttakVedFødsel: undefined,\n        barn: [], // barn brukes ikke videre her\n    };\n\n    const uttaksplanAnnenPart = mapSaksperioderTilUttaksperioder(\n        saksperioderAnnenPart,\n        grunnlagForAnnenPart,\n        førsteUttaksdagNesteBarnsSak,\n    );\n\n    return {\n        saksnummer: '',\n        erAnnenPartsSak,\n        grunnlag: grunnlagForAnnenPart,\n        saksperioder: saksperioderAnnenPart,\n        uttaksplan: uttaksplanAnnenPart.filter((p) => isInfoPeriode(p)),\n    };\n};\n\nexport const mapSøkerensEksisterendeSakFromDTO = (\n    eksisterendeSak: Sak | undefined | '',\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n): EksisterendeSak | undefined => {\n    if (eksisterendeSak === undefined || eksisterendeSak === '' || Object.keys(eksisterendeSak).length === 0) {\n        return undefined;\n    }\n    const erAnnenPartsSak = false;\n    const {\n        dekningsgrad,\n        familiehendelse: { fødselsdato, termindato, omsorgsovertakelse, antallBarn },\n        harAnnenForelderTilsvarendeRettEØS,\n        morUføretrygd,\n        rettighetType,\n        sakTilhørerMor,\n        ønskerJustertUttakVedFødsel,\n    } = eksisterendeSak;\n\n    const perioder = eksisterendeSak.gjeldendeVedtak ? eksisterendeSak.gjeldendeVedtak.perioder : [];\n\n    const erFarEllerMedmor = !sakTilhørerMor;\n    const grunnlag: Saksgrunnlag = {\n        dekningsgrad:\n            dekningsgrad === DekningsgradDTO.HUNDRE_PROSENT ? Dekningsgrad.HUNDRE_PROSENT : Dekningsgrad.ÅTTI_PROSENT,\n        antallBarn: antallBarn,\n        morErAleneOmOmsorg: sakTilhørerMor && rettighetType === RettighetType.ALENEOMSORG,\n        morErUfør: morUføretrygd,\n        morHarRett: sakTilhørerMor || rettighetType === RettighetType.BEGGE_RETT,\n        farMedmorErAleneOmOmsorg: !sakTilhørerMor && rettighetType === RettighetType.ALENEOMSORG,\n        farMedmorHarRett: !sakTilhørerMor || rettighetType === RettighetType.BEGGE_RETT,\n        søkerErFarEllerMedmor: erFarEllerMedmor,\n        termindato,\n        fødselsdato,\n        omsorgsovertakelsesdato: omsorgsovertakelse,\n        erDeltUttak: rettighetType === RettighetType.BEGGE_RETT,\n        erBarnetFødt: fødselsdato !== undefined,\n        familiehendelseDato: getRelevantFamiliehendelseDato(termindato, fødselsdato, omsorgsovertakelse),\n        familiehendelseType: getFamiliehendelseType(fødselsdato, termindato, omsorgsovertakelse),\n        ønskerJustertUttakVedFødsel: fødselsdato === undefined ? ønskerJustertUttakVedFødsel : undefined,\n        harAnnenForelderTilsvarendeRettEØS,\n    };\n\n    const saksperioder = perioder\n        .map((p) => {\n            return mapSaksperiodeFromDTO(p, erAnnenPartsSak);\n        })\n        .filter(filterAvslåttePeriodeMedInnvilgetPeriodeISammeTidsperiode);\n\n    const uttaksplan = mapSaksperioderTilUttaksperioder(saksperioder, grunnlag, førsteUttaksdagNesteBarnsSak);\n\n    return {\n        saksnummer: eksisterendeSak.saksnummer,\n        erAnnenPartsSak,\n        grunnlag,\n        saksperioder,\n        uttaksplan,\n    };\n};\n\nconst getSøkersituasjonFromSaksgrunnlag = (familiehendelseType: FamiliehendelseType): Situasjon => {\n    if (familiehendelseType === FamiliehendelseType.TERM || familiehendelseType === FamiliehendelseType.FØDSEL) {\n        return 'fødsel';\n    }\n\n    return 'adopsjon';\n};\n\nconst getSøkerFromSaksgrunnlag = (grunnlag: Saksgrunnlag, erFarEllerMedmor: boolean): Partial<Søker> => {\n    return {\n        erAleneOmOmsorg: erFarEllerMedmor ? grunnlag.farMedmorErAleneOmOmsorg : grunnlag.morErAleneOmOmsorg,\n    };\n};\n\nconst getSøkerrolleFromSaksgrunnlag = (\n    person: Person,\n    situasjon: Situasjon,\n    grunnlag: Saksgrunnlag,\n): Søkerrolle | undefined => {\n    const { søkerErFarEllerMedmor } = grunnlag;\n    const søkerErKvinne = person.kjønn === 'K';\n    switch (situasjon) {\n        case 'fødsel':\n        case 'adopsjon':\n            if (søkerErKvinne) {\n                return søkerErFarEllerMedmor ? 'medmor' : 'mor';\n            }\n            return 'far';\n        default:\n            return undefined;\n    }\n};\n\nconst getFødselsdatoer = (valgteBarn: SelectableBarn | undefined, sak: Saksgrunnlag): Date[] => {\n    if (valgteBarn && valgteBarn.fødselsdatoer) {\n        return sorterDatoEtterEldst(valgteBarn.fødselsdatoer);\n    } else if (sak.fødselsdato) {\n        return Array(sak.antallBarn).fill(ISOStringToDate(sak.fødselsdato)!);\n    }\n    return [];\n};\n\nconst getBarnFromSaksgrunnlag = (\n    situasjon: Situasjon,\n    sak: Saksgrunnlag,\n    valgteBarn: SelectableBarn | undefined,\n): Barn | undefined => {\n    switch (situasjon) {\n        case 'fødsel':\n            if (sak.fødselsdato) {\n                return {\n                    type: BarnType.FØDT,\n                    antallBarn: sak.antallBarn,\n                    fødselsdatoer: getFødselsdatoer(valgteBarn, sak),\n                    termindato: sak.termindato ? ISOStringToDate(sak.termindato) : undefined,\n                    fnr: valgteBarn?.fnr,\n                };\n            }\n\n            return {\n                type: BarnType.UFØDT,\n                antallBarn: sak.antallBarn,\n                termindato: ISOStringToDate(sak.termindato)!,\n                terminbekreftelse: [],\n            };\n        case 'adopsjon':\n            return {\n                type: BarnType.ADOPTERT_STEBARN,\n                adopsjonsdato: ISOStringToDate(sak.omsorgsovertakelsesdato)!,\n                antallBarn: sak.antallBarn,\n                fødselsdatoer: getFødselsdatoer(valgteBarn, sak),\n                omsorgsovertakelse: [],\n                fnr: valgteBarn?.fnr,\n            };\n        default:\n            return undefined;\n    }\n};\n\nconst getAnnenForelderFromSaksgrunnlag = (\n    situasjon: Situasjon,\n    grunnlag: Saksgrunnlag,\n    annenPart: RegistrertAnnenForelder,\n    erFarEllerMedmor: boolean,\n    intl: IntlShape,\n): AnnenForelder | undefined => {\n    switch (situasjon) {\n        case 'fødsel':\n        case 'adopsjon':\n            if (erFarEllerMedmor) {\n                return {\n                    fornavn:\n                        annenPart.fornavn !== undefined && annenPart.fornavn !== ''\n                            ? annenPart.fornavn\n                            : intlUtils(intl, 'annen.forelder'),\n                    etternavn: annenPart.etternavn,\n                    erUfør: grunnlag.morErUfør,\n                    harRettPåForeldrepengerINorge:\n                        !!grunnlag.morHarRett && !grunnlag.harAnnenForelderTilsvarendeRettEØS,\n                    fnr: annenPart.fnr,\n                    kanIkkeOppgis: false,\n                    harRettPåForeldrepengerIEØS: grunnlag.harAnnenForelderTilsvarendeRettEØS,\n                };\n            }\n            return {\n                fornavn:\n                    annenPart.fornavn !== undefined && annenPart.fornavn !== ''\n                        ? annenPart.fornavn\n                        : intlUtils(intl, 'annen.forelder'),\n                etternavn: annenPart.etternavn,\n                harRettPåForeldrepengerINorge:\n                    !!grunnlag.farMedmorHarRett && !grunnlag.harAnnenForelderTilsvarendeRettEØS,\n                fnr: annenPart.fnr,\n                kanIkkeOppgis: false,\n                harRettPåForeldrepengerIEØS: grunnlag.harAnnenForelderTilsvarendeRettEØS,\n            };\n        default:\n            return undefined;\n    }\n};\n\nconst finnAnnenForelderForSaken = (\n    barn: RegistrertBarn[],\n    fødselsdato: Date | undefined,\n    grunnlag: Saksgrunnlag,\n    situasjon: Situasjon,\n    intl: IntlShape,\n    valgtBarnFnr: string[] | undefined,\n    annenForeldersFnrFraSaken: string | undefined,\n): AnnenForelder | undefined => {\n    if ((valgtBarnFnr === undefined && fødselsdato === undefined) || !annenForeldersFnrFraSaken) {\n        return undefined;\n    }\n    const barnMedGittFnr =\n        valgtBarnFnr !== undefined\n            ? barn.find((b) => valgtBarnFnr.includes(b.fnr) && b.annenForelder !== undefined)\n            : undefined;\n    const barnMedGittFødselsdato =\n        fødselsdato !== undefined\n            ? barn.find(\n                  (b) => getErDatoInnenEnDagFraAnnenDato(b.fødselsdato, fødselsdato) && b.annenForelder !== undefined,\n              )\n            : undefined;\n\n    const barnet = barnMedGittFnr || barnMedGittFødselsdato;\n\n    if (barnet !== undefined && barnet.annenForelder?.fnr === annenForeldersFnrFraSaken) {\n        const annenForelder = barnet.annenForelder;\n        const { fornavn } = annenForelder;\n        const fornavnAnnenForelder =\n            fornavn !== undefined && fornavn.trim() !== '' ? fornavn : intlUtils(intl, 'annen.forelder');\n        const annenPart: RegistrertAnnenForelder = { ...annenForelder, fornavn: fornavnAnnenForelder };\n        return getAnnenForelderFromSaksgrunnlag(situasjon, grunnlag, annenPart, grunnlag.søkerErFarEllerMedmor, intl);\n    }\n\n    return undefined;\n};\n\nconst getBarnFromValgteBarn = (valgteBarn: SelectableBarn): Barn => {\n    if (valgteBarn.fødselsdatoer !== undefined && valgteBarn.fødselsdatoer.length > 0) {\n        return {\n            type: BarnType.FØDT,\n            antallBarn: valgteBarn.antallBarn,\n            fødselsdatoer: sorterDatoEtterEldst(valgteBarn.fødselsdatoer),\n            fnr:\n                valgteBarn.fnr !== undefined && valgteBarn.fnr.length > 0\n                    ? valgteBarn.fnr.filter((fnr) => !!fnr)\n                    : undefined,\n        };\n    } else if (valgteBarn.termindato !== undefined) {\n        return {\n            type: BarnType.UFØDT,\n            antallBarn: valgteBarn.antallBarn,\n            termindato: valgteBarn.termindato,\n        };\n    } else {\n        return {\n            type: BarnType.IKKE_UTFYLT,\n            antallBarn: valgteBarn.antallBarn,\n            fødselsdatoer: valgteBarn.fødselsdatoer ? sorterDatoEtterEldst(valgteBarn.fødselsdatoer) : [],\n            fnr:\n                valgteBarn.fnr !== undefined && valgteBarn.fnr.length > 0\n                    ? valgteBarn.fnr.filter((fnr) => !!fnr)\n                    : undefined,\n        };\n    }\n};\n\nconst getAnnenForelderFromValgteBarn = (valgteBarn: SelectableBarn): AnnenForelder | undefined => {\n    if (valgteBarn.annenForelder !== undefined) {\n        return {\n            fornavn: valgteBarn.annenForelder.fornavn,\n            etternavn: valgteBarn.annenForelder.etternavn,\n            fnr: valgteBarn.annenForelder.fnr,\n            kanIkkeOppgis: false,\n        };\n    }\n\n    return {\n        kanIkkeOppgis: false,\n    };\n};\n\nexport const opprettSøknadFraValgteBarn = (valgteBarn: SelectableBarn): Partial<Søknad> | undefined => {\n    const barn = getBarnFromValgteBarn(valgteBarn);\n    const annenForelder = getAnnenForelderFromValgteBarn(valgteBarn);\n    const søknad: Partial<Søknad> = {\n        barn,\n        annenForelder,\n        erEndringssøknad: false,\n    };\n\n    return søknad;\n};\n\nexport const opprettAnnenForelderFraEksisterendeSak = (\n    intl: IntlShape,\n    annenPartFraSak: PersonFnrDTO | undefined,\n    grunnlag: Saksgrunnlag,\n    søkerinfo: Søkerinfo,\n    situasjon: Situasjon,\n    valgteBarnFnr: string[] | undefined,\n): AnnenForelder => {\n    const fnrAnnenForelderFraSak = annenPartFraSak !== undefined ? annenPartFraSak.fnr : undefined;\n\n    const mockAnnenForelder = {\n        fornavn: intlUtils(intl, 'annen.forelder'),\n        etternavn: '',\n        fnr: fnrAnnenForelderFraSak ? fnrAnnenForelderFraSak : '',\n        harRettPåForeldrepengerINorge: grunnlag.søkerErFarEllerMedmor\n            ? !!grunnlag.morHarRett && !grunnlag.harAnnenForelderTilsvarendeRettEØS\n            : !!grunnlag.farMedmorHarRett && !grunnlag.harAnnenForelderTilsvarendeRettEØS,\n        harRettPåForeldrepengerIEØS: grunnlag.harAnnenForelderTilsvarendeRettEØS,\n        kanIkkeOppgis: false,\n        erUfør: grunnlag.søkerErFarEllerMedmor ? grunnlag.morErUfør : undefined,\n    };\n    const annenForelderFraSak = finnAnnenForelderForSaken(\n        søkerinfo.registrerteBarn,\n        ISOStringToDate(grunnlag.fødselsdato),\n        grunnlag,\n        situasjon,\n        intl,\n        valgteBarnFnr,\n        fnrAnnenForelderFraSak,\n    );\n    return annenForelderFraSak || mockAnnenForelder;\n};\n\nexport const opprettSøknadFraValgteBarnMedSak = (\n    valgteBarn: SelectableBarn,\n    intl: IntlShape,\n    søkerinfo: Søkerinfo,\n): Partial<Søknad> | undefined => {\n    const eksisterendeSak = mapSøkerensEksisterendeSakFromDTO(valgteBarn.sak, undefined);\n    const { grunnlag } = eksisterendeSak!;\n    const situasjon = getSøkersituasjonFromSaksgrunnlag(grunnlag.familiehendelseType);\n    const barn = getBarnFromValgteBarn(valgteBarn);\n    const annenForelder = opprettAnnenForelderFraEksisterendeSak(\n        intl,\n        valgteBarn.sak?.annenPart,\n        grunnlag,\n        søkerinfo,\n        situasjon,\n        valgteBarn.fnr,\n    );\n    const søknad: Partial<Søknad> = {\n        barn,\n        annenForelder,\n        erEndringssøknad: false,\n    };\n\n    if (valgteBarn.sak !== undefined) {\n        const søkersituasjon = {\n            situasjon: valgteBarn.sak.gjelderAdopsjon ? 'adopsjon' : 'fødsel',\n            rolle: valgteBarn.sak.sakTilhørerMor ? undefined : 'far',\n        } as Søkersituasjon;\n        søknad.søkersituasjon = søkersituasjon;\n    }\n    return søknad;\n};\n\nexport const opprettSøknadFraEksisterendeSak = (\n    søkerinfo: Søkerinfo,\n    eksisterendeSak: EksisterendeSak,\n    intl: IntlShape,\n    annenPartFraSak: PersonFnrDTO | undefined,\n    valgteBarn: SelectableBarn | undefined,\n): Partial<Søknad> | undefined => {\n    const { grunnlag, uttaksplan } = eksisterendeSak;\n    const { dekningsgrad, familiehendelseType, søkerErFarEllerMedmor, ønskerJustertUttakVedFødsel } = grunnlag;\n    const situasjon = getSøkersituasjonFromSaksgrunnlag(familiehendelseType);\n\n    if (!situasjon) {\n        return undefined;\n    }\n\n    const søker = getSøkerFromSaksgrunnlag(grunnlag, søkerErFarEllerMedmor);\n    const barn = getBarnFromSaksgrunnlag(situasjon, grunnlag, valgteBarn);\n\n    const rolle = getSøkerrolleFromSaksgrunnlag(søkerinfo.person, situasjon, grunnlag);\n\n    if (!barn || !rolle) {\n        return undefined;\n    }\n\n    const annenForelder = opprettAnnenForelderFraEksisterendeSak(\n        intl,\n        annenPartFraSak,\n        grunnlag,\n        søkerinfo,\n        situasjon,\n        valgteBarn?.fnr,\n    );\n\n    const søknad: Partial<Søknad> = {\n        søker: søker as Søker,\n        søkersituasjon: {\n            situasjon,\n            rolle,\n        },\n        barn,\n        annenForelder,\n        erEndringssøknad: true,\n        dekningsgrad,\n        uttaksplan,\n        saksnummer: eksisterendeSak.saksnummer,\n        ønskerJustertUttakVedFødsel: ønskerJustertUttakVedFødsel,\n    };\n\n    return søknad;\n};\n"],"names":["DekningsgradDTO","FamiliehendelseType","OppholdÅrsakTypeDTO","PeriodeResultatÅrsak","UtsettelseÅrsakTypeDTO","UttakArbeidType","RettighetType","getFamiliehendelseType","fødselsdato","termindato","omsorgsovertagelsesdato","harUttaksdager","periode","Perioden","harGyldigTidsperiode","isValidTidsperiode","slåSammenLikePerioder","perioder","familiehendelsesdato","førsteUttaksdagNesteBarnsSak","nyePerioder","infoPerioder","p","isInfoPeriode","tmp","forrigePeriode","index","dayjs","sorterPerioder","korrigerTidsperiodeTilGyldigUttaksdag","fom","tom","fomOk","erUttaksdag","tomOk","Uttaksdagen","getForelderForPeriode","saksperiode","søkerErFarEllerMedmor","Forelder","getUtsettelseÅrsakFromSaksperiode","årsak","UtsettelseÅrsakType","getOppholdÅrsakFromSaksperiode","StønadskontoType","OppholdÅrsakType","beregnSamtidigUttaksProsent","egenProsent","andrePartsProsent","graderingsprosent","getKontotypeBareFarHarRett","periodeTrekkerMinsterett","getErMorForSyk","erFarEllerMedmor","konto","MorsAktivitet","mapUttaksperiodeFromSaksperiode","grunnlag","innvilgedePerioder","gradert","tidsperiodeDate","convertTidsperiodeToTidsperiodeDate","erFarEllerMedmorOgKunSøkerHarRett","annenPartSamtidigUttakPeriode","ip","Tidsperioden","samtidigUttakProsentAnnenPart","samtidigUttakProsent","_a","omsorgsovertakelsesdato","familiehendelseDato","getRelevantFamiliehendelseDato","kontoType","guid","Periodetype","getArbeidsformFromUttakArbeidstype","mapUtsettelseperiodeFromSaksperiode","mapInfoPeriodeFromAvslåttSaksperiode","PeriodeInfoType","mapAnnenPartInfoPeriodeFromSaksperiode","skalVises","erAnnenPartsAvslåttePrematurePeriode","mapOverføringsperiodeFromSaksperiode","mapPeriodeFromSaksperiode","gyldigePerioder","ISOStringToDate","gyldigeSaksperioder","getPerioderSplittetOverFødselOgNesteBarnsFørsteStønadsdag","tidperiodeOverlapperDato","isUttaksperiode","splittUttaksperiodePåFamiliehendelsesdato","splittPeriodePåDato","mapSaksperioderTilUttaksperioder","saksperioder","splittedePerioder","sammenslåddePerioder","kunFarMedmorHarRett","erAdopsjon","perioderUtenAnnenPartsSamtidigUttak","annenPartsUttak","harAktivitetskravIPeriodeUtenUttak","perioderUtenAnnenPartsSamtidigUttakMedHull","finnOgSettInnHull","settInnAnnenPartsUttak","arbeidstype","Arbeidsform","getStønadskontoTypeFromOppholdÅrsakType","mapOppholdÅrsakType","mapSaksperiodeFromDTO","erAnnenPartsSak","oppholdÅrsak","returnPeriode","saksperiodeErInnvilget","filterAvslåttePeriodeMedInnvilgetPeriodeISammeTidsperiode","_index","likePerioder","periode2","getStartdatoFørstePeriodeAnnenPart","annenPartsSak","mapAnnenPartsEksisterendeSakFromDTO","eksisterendeSakAnnenPart","barn","saksperioderAnnenPart","isFødtBarn","isUfødtBarn","dateToISOString","adopsjonsdato","isAdoptertBarn","grunnlagForAnnenPart","Dekningsgrad","uttaksplanAnnenPart","mapSøkerensEksisterendeSakFromDTO","eksisterendeSak","dekningsgrad","omsorgsovertakelse","antallBarn","harAnnenForelderTilsvarendeRettEØS","morUføretrygd","rettighetType","sakTilhørerMor","ønskerJustertUttakVedFødsel","uttaksplan","getSøkersituasjonFromSaksgrunnlag","familiehendelseType","getSøkerFromSaksgrunnlag","getSøkerrolleFromSaksgrunnlag","person","situasjon","søkerErKvinne","getFødselsdatoer","valgteBarn","sak","sorterDatoEtterEldst","getBarnFromSaksgrunnlag","BarnType","getAnnenForelderFromSaksgrunnlag","annenPart","intl","intlUtils","finnAnnenForelderForSaken","valgtBarnFnr","annenForeldersFnrFraSaken","barnMedGittFnr","b","barnMedGittFødselsdato","getErDatoInnenEnDagFraAnnenDato","barnet","annenForelder","fornavn","fornavnAnnenForelder","getBarnFromValgteBarn","fnr","getAnnenForelderFromValgteBarn","opprettSøknadFraValgteBarn","opprettAnnenForelderFraEksisterendeSak","annenPartFraSak","søkerinfo","valgteBarnFnr","fnrAnnenForelderFraSak","mockAnnenForelder","opprettSøknadFraValgteBarnMedSak","søknad","søkersituasjon","opprettSøknadFraEksisterendeSak","søker","rolle"],"mappings":"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"}