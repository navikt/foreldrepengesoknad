{"version":3,"file":"Uttaksplan-e691a8f5.js","sources":["../../../../packages/fp-common/src/common/types/UttakRundtFødselÅrsak.ts","../../../../packages/fp-common/src/common/utils/annenForelderUtils.ts","../../../../packages/fp-common/src/common/utils/morsAktivitetUtils.ts","../../../../packages/fp-common/src/common/utils/minsterettUtils.ts","../../../../packages/fp-common/src/common/utils/uttaksplanHarForMangeFlerbarnsuker.ts","../../../../packages/fp-common/src/common/utils/uttaksplanDatoavgrensninger.ts","../../../../node_modules/.pnpm/@formatjs+intl@2.9.0_typescript@5.2.2/node_modules/@formatjs/intl/lib/src/utils.js","../../../../node_modules/.pnpm/react-intl@6.4.4_react@18.2.0_typescript@5.2.2/node_modules/react-intl/lib/src/utils.js","../../../../node_modules/.pnpm/react-intl@6.4.4_react@18.2.0_typescript@5.2.2/node_modules/react-intl/lib/src/components/injectIntl.js","../../../../node_modules/.pnpm/react-intl@6.4.4_react@18.2.0_typescript@5.2.2/node_modules/react-intl/lib/src/components/useIntl.js","../../../../node_modules/.pnpm/react-intl@6.4.4_react@18.2.0_typescript@5.2.2/node_modules/react-intl/lib/src/components/createFormattedComponent.js","../../../../node_modules/.pnpm/react-intl@6.4.4_react@18.2.0_typescript@5.2.2/node_modules/react-intl/lib/src/components/message.js","../../../../node_modules/.pnpm/react-intl@6.4.4_react@18.2.0_typescript@5.2.2/node_modules/react-intl/lib/index.js","../../../../packages/uttaksplan/src/components/uttaks-forms/periode-uttak-form/periodeUttakFormConfig.ts","../../../../packages/uttaksplan/src/components/uttaks-forms/spørsmål/er-mor-for-syk-dokumentasjon/MorErForSykDokumentasjonOpplastning.tsx","../../../../packages/uttaksplan/src/components/uttaks-forms/spørsmål/er-mor-for-syk/ErMorForSykSpørsmål.tsx","../../../../packages/uttaksplan/src/components/uttaks-forms/spørsmål/flerbarnsdager/FlerbarnsdagerSpørsmål.tsx","../../../../packages/uttaksplan/src/components/uttaks-forms/spørsmål/hvem-skal-ha-uttak/HvemSkalHaUttakSpørsmål.tsx","../../../../packages/uttaksplan/src/components/uttaks-forms/spørsmål/hvilken-konto/HvilkenKontoSpørsmål.tsx","../../../../packages/uttaksplan/src/components/uttaks-forms/spørsmål/uttak-rundt-fødsel-årsak/UttakRundtFødselÅrsakSpørsmål.tsx","../../../../packages/uttaksplan/src/components/uttaks-forms/spørsmål/overføringsårsak/OverføringsårsakSpørsmål.tsx","../../../../packages/uttaksplan/src/utils/prosentValidering.ts","../../../../packages/uttaksplan/src/components/uttaks-forms/spørsmål/samtidig-uttak/SamtidigUttakSpørsmål.tsx","../../../../packages/uttaksplan/src/components/uttaks-forms/spørsmål/skal-ha-gradering/SkalHaGraderingSpørsmål.tsx","../../../../packages/uttaksplan/src/components/uttaks-forms/submit-listener/SubmitListener.tsx","../../../../packages/uttaksplan/src/utils/uttaksdatoerUtils.ts","../../../../packages/uttaksplan/src/utils/datoAvgrensningerUtils.ts","../../../../packages/uttaksplan/src/components/uttaks-forms/tidsperiode-form/TidsperiodeForm.tsx","../../../../packages/uttaksplan/src/utils/uttaksskjema/kontoSkalBesvarer.ts","../../../../packages/uttaksplan/src/utils/uttaksskjema/uttakRundtFødselÅrsakSpørsmålSkalBesvares.ts","../../../../packages/uttaksplan/src/utils/uttaksskjema/aktivitetskravMorSkalBesvares.ts","../../../../packages/uttaksplan/src/utils/uttaksskjema/erMorForSykSkalBesvares.ts","../../../../packages/uttaksplan/src/utils/uttaksskjema/graderingSkalBesvares.ts","../../../../packages/uttaksplan/src/utils/uttaksskjema/graderingSkalBesvaresPgaWLBUttakRundtFødsel.ts","../../../../packages/uttaksplan/src/utils/uttaksskjema/samtidigUttakSkalBesvares.ts","../../../../packages/uttaksplan/src/utils/uttaksskjema/ønskerFlerbarnsdagerSkalBesvares.ts","../../../../packages/uttaksplan/src/utils/uttaksskjema/hvemSkalTaUttakSkalBesvares.ts","../../../../packages/uttaksplan/src/utils/uttaksskjema/overføringsårsakSkalBesvares.ts","../../../../packages/uttaksplan/src/utils/uttaksskjema/uttakSkjemaregler.ts","../../../../packages/uttaksplan/src/components/uttaks-forms/periode-uttak-form/periodeUttakFormQuestionsConfig.ts","../../../../packages/uttaksplan/src/components/uttaks-forms/spørsmål/aktivitetskrav/AktivitetskravSpørsmål.tsx","../../../../packages/uttaksplan/src/components/uttaks-forms/periode-uttak-form/periodeUttakFormUtils.ts","../../../../packages/uttaksplan/src/components/tidsperiode-display/TidsperiodeDisplay.tsx","../../../../packages/uttaksplan/src/assets/RangeIcon.tsx","../../../../packages/uttaksplan/src/components/aria-text/AriaText.tsx","../../../../packages/uttaksplan/src/utils/preventDoubleTapZoom.ts","../../../../packages/uttaksplan/src/components/sirkelknapp/Sirkelknapp.tsx","../../../../packages/uttaksplan/src/components/number-stepper/StepperKnapp.tsx","../../../../packages/uttaksplan/src/components/number-stepper/NumberStepper.tsx","../../../../packages/uttaksplan/src/components/uker-dager-teller/UkerDagerTeller.tsx","../../../../packages/uttaksplan/src/components/uttak-endre-tidsperiode-spørsmål/UttakEndreTidsperiodeSpørsmål.tsx","../../../../packages/uttaksplan/src/components/uttaks-forms/periode-uttak-form/PeriodeUttakForm.tsx","../../../../packages/uttaksplan/src/components/uttaks-forms/periode-utsettelse-form/periodeUtsettelseFormConfig.ts","../../../../packages/uttaksplan/src/components/uttaks-forms/periode-utsettelse-form/periodeUtsettelseFormUtils.ts","../../../../packages/uttaksplan/src/components/uttaks-forms/periode-utsettelse-form/periodeUtsettelseFormQuestionsConfig.ts","../../../../packages/uttaksplan/src/components/uttaks-forms/spørsmål/utsettelse-årsak/UtsettelseÅrsakSpørsmål.tsx","../../../../packages/uttaksplan/src/components/utsettelse-tidsperiode-spørsmål/UtsettelseTidsperiodeSpørsmål.tsx","../../../../packages/uttaksplan/src/components/uttaks-forms/periode-utsettelse-form/PeriodeUtsettelseForm.tsx","../../../../packages/uttaksplan/src/components/uttaks-forms/ny-periode/NyPeriode.tsx","../../../../packages/uttaksplan/src/components/icon-box/IconBox.tsx","../../../../packages/uttaksplan/src/assets/ArbeidIkon.tsx","../../../../packages/uttaksplan/src/assets/FerieIkon.tsx","../../../../packages/uttaksplan/src/assets/SykdomIkon.tsx","../../../../packages/uttaksplan/src/assets/TerminIkon.tsx","../../../../packages/uttaksplan/src/assets/UttakIkon.tsx","../../../../packages/uttaksplan/src/components/uttaksplan-ikon/UttaksplanIkon.tsx","../../../../packages/uttaksplan/src/types/UttaksplanColor.ts","../../../../packages/uttaksplan/src/utils/styleUtils.ts","../../../../packages/uttaksplan/src/components/stønadskonto-ikon/StønadskontoIkon.tsx","../../../../packages/uttaksplan/src/components/utsettelse-ikon/UtsettelseIkon.tsx","../../../../packages/uttaksplan/src/assets/UttaksplanAdvarselIkon.tsx","../../../../packages/uttaksplan/src/validering/veilederInfo/components/VeilederMelding.tsx","../../../../packages/uttaksplan/src/components/periodeliste-item-header/PeriodelisteItemHeader.tsx","../../../../packages/uttaksplan/src/components/perioder/PeriodeHull.tsx","../../../../packages/uttaksplan/src/components/perioder/PeriodeInfo.tsx","../../../../packages/uttaksplan/src/components/perioder/PeriodeUtenUttak.tsx","../../../../packages/uttaksplan/src/components/uttaks-forms/periode-før-fødsel-form/periodeFørFødselFormConfig.ts","../../../../packages/uttaksplan/src/components/uttaks-forms/periode-før-fødsel-form/periodeFørFødselFormQuestionsConfig.ts","../../../../packages/uttaksplan/src/components/uttaks-forms/periode-før-fødsel-form/periodeFørFødselFormUtils.ts","../../../../packages/uttaksplan/src/components/uttaks-forms/periode-før-fødsel-form/PeriodeFørFødselForm.tsx","../../../../packages/uttaksplan/src/components/perioder/SlettbarAvslåttPeriode.tsx","../../../../packages/uttaksplan/src/validering/veilederInfo/VeilederMeldinger.tsx","../../../../packages/uttaksplan/src/components/periodeliste-item/PeriodelisteItem.tsx","../../../../packages/uttaksplan/src/assets/HjerteIkon.tsx","../../../../packages/uttaksplan/src/components/familiehendelsedato-display/FamiliehendelsedatoDisplay.tsx","../../../../packages/uttaksplan/src/components/periodeliste/Periodeliste.tsx","../../../../packages/uttaksplan/src/components/planlegger/Planlegger.tsx","../../../../packages/uttaksplan/src/components/oversikt-kvoter/konto-status/Kontostatus.tsx","../../../../packages/uttaksplan/src/components/oversikt-kvoter/tilesList/TilesList.tsx","../../../../packages/uttaksplan/src/utils/brukteDagerUtils.ts","../../../../packages/uttaksplan/src/utils/uttaksstatus.ts","../../../../packages/uttaksplan/src/components/oversikt-kvoter/OversiktKvoter.tsx","../../../../packages/uttaksplan/src/validering/tester/inneholderUttaksplanPerioderTest.ts","../../../../packages/uttaksplan/src/validering/utils/uttakValideringUtils.ts","../../../../packages/uttaksplan/src/validering/tester/harMorSøktUgyldigUttakFørsteSeksUkerTest.ts","../../../../packages/uttaksplan/src/validering/tester/stønadskontoInneholderForMyeUttakKunSøkerTest.ts","../../../../packages/uttaksplan/src/validering/tester/harFarMedmorSøktUgyldigUttakEllerUtsettelseFørsteSeksUkerTest.ts","../../../../packages/uttaksplan/src/validering/tester/erUttaksplanBareOppholdTest.ts","../../../../packages/uttaksplan/src/validering/tester/slutterUttaksplanMedOppholdTest.ts","../../../../packages/uttaksplan/src/validering/tester/starterUttaksplanMedOppholdTest.ts","../../../../packages/uttaksplan/src/validering/tester/erUttaksplanGraderingStørreEnnSamtidigUttakTest.ts","../../../../packages/uttaksplan/src/validering/tester/erTilleggsopplysningerGyldigTest.ts","../../../../packages/uttaksplan/src/validering/tester/harTilleggsopplysningerGyldigeCharsTest.ts","../../../../packages/uttaksplan/src/validering/tester/harUttaksplanForMangeFlerbarnsdagerTest.ts","../../../../packages/uttaksplan/src/validering/tester/inneholderUttaksplanDatoSomIkkeErUttaksdagTest.ts","../../../../packages/uttaksplan/src/utils/manglendeVedleggUtils.ts","../../../../packages/uttaksplan/src/validering/tester/harPerioderManglendeVedleggTest.ts","../../../../packages/uttaksplan/src/validering/tester/inneholderSenUtsettelsePgaFerieTest.ts","../../../../packages/uttaksplan/src/validering/tester/inneholderTapteDagerTest.ts","../../../../packages/uttaksplan/src/validering/tester/inneholderBareUtsettelserTest.ts","../../../../packages/uttaksplan/src/validering/tester/inneholderSenUtsettelsePgaArbeidTest.ts","../../../../packages/uttaksplan/src/validering/tester/overskriverEndringerAnnenPartsPerioder.ts","../../../../packages/uttaksplan/src/validering/tester/overlapperPeriodeAndrePerioderTest.ts","../../../../packages/uttaksplan/src/validering/utils/types/regelTypes.ts","../../../../packages/uttaksplan/src/validering/utils/regelUtils.ts","../../../../packages/uttaksplan/src/validering/utils/stillingsprosentValideringUtils.ts","../../../../packages/uttaksplan/src/validering/utils/periodeValideringUtils.ts","../../../../packages/uttaksplan/src/validering/tester/periodevalideringstester/harUttaksperiodeGyldigGradering.ts","../../../../packages/uttaksplan/src/validering/utils/validatorUtils.ts","../../../../packages/uttaksplan/src/validering/utils/tidsperiodeValideringUtils.ts","../../../../packages/uttaksplan/src/validering/tester/periodevalideringstester/harPeriodeGyldigTidsperiode.ts","../../../../packages/uttaksplan/src/validering/tester/periodevalideringstester/harUttaksperiodeStønadskonto.ts","../../../../packages/uttaksplan/src/validering/tester/periodevalideringstester/erSamtidigUttakGyldig.ts","../../../../packages/uttaksplan/src/validering/tester/periodevalideringstester/erUtsettelseEtterFamiliehendelsesdato.ts","../../../../packages/uttaksplan/src/validering/tester/periodevalideringstester/starterUttaksperiodeRundtFødselEtter2UkerFørFødsel.ts","../../../../packages/uttaksplan/src/validering/tester/periodevalideringstester/slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel.ts","../../../../packages/uttaksplan/src/validering/tester/periodevalideringstester/periodeDeFørsteSeksUkeneHarUlovligUttakBFHR.ts","../../../../packages/uttaksplan/src/validering/tester/periodevalideringstester/harBekreftet100ProsentArbeidIUtsettelsePgaArbeid.ts","../../../../packages/uttaksplan/src/validering/tester/periodevalideringstester/forSenUttakVedPåfølgendeBarn.ts","../../../../packages/uttaksplan/src/validering/tester/periodevalideringstester/index.ts","../../../../packages/uttaksplan/src/validering/tester/harSøktOmFerieUtenArbeidsforholdTest.ts","../../../../packages/uttaksplan/src/validering/tester/inneholderForMyeFerie.ts","../../../../packages/uttaksplan/src/validering/tester/kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme.ts","../../../../packages/uttaksplan/src/validering/tester/erUttaksmengdeForFarMedmorForHøyTest.ts","../../../../packages/uttaksplan/src/validering/tester/burdeKanskjeSøkeGraderingTest.tsx","../../../../packages/uttaksplan/src/validering/tester/ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindatoTest.ts","../../../../packages/uttaksplan/src/validering/tester/inneholderPerioderUtenAktivitetskrav.ts","../../../../packages/uttaksplan/src/validering/tester/inneholderUtsettelserUtenÅrsak.ts","../../../../packages/uttaksplan/src/validering/tester/farMedmorHarSøktUgyldigAntallDagerUttakRundtFødselTest.ts","../../../../packages/uttaksplan/src/validering/tester/harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUkerTest.ts","../../../../packages/uttaksplan/src/validering/tester/farMedMorHarRettPåUttakRundtFødselTest.ts","../../../../packages/uttaksplan/src/validering/tester/farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest.tsx","../../../../packages/uttaksplan/src/validering/tester/inneholderUttaksperioderMedUbesvartGradering.ts","../../../../packages/uttaksplan/src/validering/tester/inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest.ts","../../../../packages/uttaksplan/src/validering/tester/farMedmorHarRettPåFlerbarnsdagerTest.tsx","../../../../packages/uttaksplan/src/validering/tester/overstigerMinsterettVedToTette.ts","../../../../packages/uttaksplan/src/validering/tester/harPerioderEtterFørsteStønadsdagNesteBarnDerToTette.ts","../../../../packages/uttaksplan/src/validering/index.ts","../../../../packages/uttaksplan/src/validering/validerUttaksplan.ts","../../../../packages/uttaksplan/src/validering/veilederInfo/VeilederInfo.tsx","../../../../packages/uttaksplan/src/validering/veilederInfo/utils.ts","../../../../node_modules/.pnpm/lodash.throttle@4.1.1/node_modules/lodash.throttle/index.js","../../../../packages/uttaksplan/src/components/oppgi-tilleggsopplysninger/OppgiTilleggsopplysninger.tsx","../../../../packages/uttaksplan/src/components/slett-uttaksplan-modal/SlettUttaksplanModal.tsx","../../../../packages/uttaksplan/src/builder/slettPeriode.ts","../../../../packages/uttaksplan/src/builder/oppdaterPeriode.ts","../../../../packages/uttaksplan/src/builder/Uttaksplanbuilder.ts","../../../../packages/uttaksplan/src/components/reset-uttaksplan-modal/ResetUttaksplanModal.tsx","../../../../packages/uttaksplan/src/utils/uttaksplanUtils.ts","../../../../packages/uttaksplan/src/Uttaksplan.tsx"],"sourcesContent":["export enum UttakRundtFødselÅrsak {\n    samtidigUttak = 'Samtidig Uttak',\n    morErForSyk = 'Mor er for syk',\n}\n","import { IntlShape } from 'react-intl';\nimport { AnnenForelder, AnnenForelderOppgitt, Sak, isAnnenForelderOppgitt } from '../types';\nimport intlUtils from './intlUtils';\nimport { RettighetType } from '../types/RettighetType';\n\nexport const getErMorUfør = (annenForelder: AnnenForelder, erFarEllerMedmor: boolean) => {\n    if (isAnnenForelderOppgitt(annenForelder) && erFarEllerMedmor) {\n        return !!annenForelder.erUfør;\n    }\n\n    return false;\n};\n\nexport const harAnnenForelderRettIEØS = (annenForelder: AnnenForelder): boolean => {\n    return isAnnenForelderOppgitt(annenForelder) && !!annenForelder.harRettPåForeldrepengerIEØS;\n};\n\nexport const getMockAnnenForelder = (sak: Sak, intl: IntlShape): AnnenForelderOppgitt => {\n    return {\n        fornavn: intlUtils(intl, 'annen.forelder'),\n        etternavn: '',\n        fnr: '',\n        harRettPåForeldrepengerINorge:\n            sak.rettighetType === RettighetType.BEGGE_RETT && !sak.harAnnenForelderTilsvarendeRettEØS,\n        harRettPåForeldrepengerIEØS: sak.harAnnenForelderTilsvarendeRettEØS,\n        erUfør: (!sak.sakTilhørerMor && sak.morUføretrygd) || undefined,\n        kanIkkeOppgis: false,\n    };\n};\n","import dayjs from 'dayjs';\nimport { hasValue } from './validationUtils';\nimport { isAnnenForelderOppgitt, AnnenForelder, MorsAktivitet, Skjemanummer } from '../types';\n\nexport const aktivitetskravMorUtil = {\n    skalBesvaresVedUtsettelse(søkerErFarEllerMedmor: boolean, annenForelder: AnnenForelder): boolean {\n        const reglerFørFørsteOkt2021 = dayjs(new Date()).isBefore(new Date('2021-10-01'), 'day');\n        const annenForelderErUfør = isAnnenForelderOppgitt(annenForelder) ? annenForelder.erUfør : undefined;\n        const annenForelderHarRett = isAnnenForelderOppgitt(annenForelder)\n            ? annenForelder.harRettPåForeldrepengerINorge || annenForelder.harRettPåForeldrepengerIEØS\n            : undefined;\n\n        return !søkerErFarEllerMedmor ||\n            (annenForelderHarRett === false && annenForelderErUfør === true && !reglerFørFørsteOkt2021)\n            ? false\n            : annenForelderHarRett === false;\n    },\n};\n\nexport const getMorsAktivitetSkjemanummer = (morsAktivitet?: MorsAktivitet): Skjemanummer => {\n    switch (morsAktivitet) {\n        case MorsAktivitet.Innlagt:\n            return Skjemanummer.DOK_INNLEGGELSE;\n        case MorsAktivitet.Kvalifiseringsprogrammet:\n            return Skjemanummer.BEKREFTELSE_DELTAR_KVALIFISERINGSPROGRAM;\n        case MorsAktivitet.Introduksjonsprogrammet:\n            return Skjemanummer.DOK_DELTAKELSE_I_INTRODUKSJONSPROGRAMMET;\n        case MorsAktivitet.ArbeidOgUtdanning:\n        case MorsAktivitet.Arbeid:\n        case MorsAktivitet.TrengerHjelp:\n            return Skjemanummer.DOK_MORS_UTDANNING_ARBEID_SYKDOM;\n        case MorsAktivitet.Utdanning:\n            return Skjemanummer.BEKREFTELSE_FRA_STUDIESTED;\n        default:\n            return Skjemanummer.ANNET;\n    }\n};\n\nexport const getMorsAktivitet = (\n    aktivitetskravMorValue: string | undefined,\n    erMorForSykValue: boolean | undefined,\n): MorsAktivitet | undefined => {\n    if (hasValue(aktivitetskravMorValue)) {\n        return aktivitetskravMorValue as MorsAktivitet;\n    }\n    if (erMorForSykValue) {\n        return MorsAktivitet.TrengerHjelp;\n    }\n    return undefined;\n};\n","import uttaksConstants from '../constants/constants';\nimport { Dekningsgrad } from '../types';\nimport { andreAugust2022ReglerGjelder } from './dateUtils';\n\nexport const getBareFarHarRettKontoUtenAktivitetskravUker = (\n    antallBarn: number,\n    morErUfør: boolean,\n    familiehendelsesdato: Date,\n    dekningsgrad: Dekningsgrad,\n    bareFarHarRett: boolean,\n): number => {\n    if (!bareFarHarRett) {\n        return 0;\n    }\n\n    if (andreAugust2022ReglerGjelder(familiehendelsesdato) && antallBarn === 1 && !morErUfør) {\n        return 8;\n    }\n    let morUførUker = 0;\n    let flerbarnsukerSomDelAvMinsterett = 0;\n\n    if (morErUfør) {\n        morUførUker = dekningsgrad === Dekningsgrad.HUNDRE_PROSENT ? 15 : 19;\n    }\n\n    if (andreAugust2022ReglerGjelder(familiehendelsesdato)) {\n        if (antallBarn === 2) {\n            flerbarnsukerSomDelAvMinsterett = dekningsgrad === Dekningsgrad.HUNDRE_PROSENT ? 17 : 21;\n        } else if (antallBarn > 2) {\n            flerbarnsukerSomDelAvMinsterett = dekningsgrad === Dekningsgrad.HUNDRE_PROSENT ? 46 : 56;\n        }\n    }\n\n    return flerbarnsukerSomDelAvMinsterett + morUførUker;\n};\n\nexport const getBareFarHarRettFlerbarnsdagerUker = (\n    antallBarn: number,\n    familiehendelsesdato: Date,\n    dekningsgrad: Dekningsgrad,\n    bareFarHarRett: boolean,\n): number => {\n    if (!bareFarHarRett || antallBarn === 1) {\n        return 0;\n    }\n\n    //Flerbarnsdager regnes som en del av minsteretten når WLB Regler gjelder, og blir med i kontoen uten aktivitetskrav\n    if (andreAugust2022ReglerGjelder(familiehendelsesdato)) {\n        return 0;\n    }\n\n    let flerbarnsUker = 0;\n\n    if (antallBarn === 2) {\n        flerbarnsUker =\n            dekningsgrad === Dekningsgrad.HUNDRE_PROSENT\n                ? uttaksConstants.ANTALL_UKER_2_BARN_100_PROSENT_UTTAK\n                : uttaksConstants.ANTALL_UKER_2_BARN_80_PROSENT_UTTAK;\n    } else if (antallBarn > 2) {\n        flerbarnsUker =\n            dekningsgrad === Dekningsgrad.HUNDRE_PROSENT\n                ? uttaksConstants.ANTALL_UKER_3_ELLER_FLERE_BARN_100_PROSENT_UTTAK\n                : uttaksConstants.ANTALL_UKER_3_ELLER_FLERE_BARN_80_PROSENT_UTTAK;\n    }\n\n    return flerbarnsUker;\n};\n\nexport const getBareFarHarRettAntallUkerPåÅTaUtDagerUtenAktivitetskravFørWLB = (\n    antallBarn: number,\n    familiehendelsesdato: Date,\n    dekningsgrad: Dekningsgrad,\n    bareFarHarRett: boolean,\n) => {\n    if (!bareFarHarRett) {\n        return 0;\n    }\n    const antallUkerEtterFødselMor = uttaksConstants.ANTALL_UKER_MØDREKVOTE_ETTER_FØDSEL;\n    const antallUkerForeldrepengerFar =\n        dekningsgrad === Dekningsgrad.HUNDRE_PROSENT\n            ? uttaksConstants.ANTALL_UKER_FORELDREPENGER_BARE_FAR_HAR_RETT_100_PROSENT\n            : uttaksConstants.ANTALL_UKER_FORELDREPENGER_BARE_FAR_HAR_RETT_80_PROSENT;\n    const flerbarnsUker = getBareFarHarRettFlerbarnsdagerUker(\n        antallBarn,\n        familiehendelsesdato,\n        dekningsgrad,\n        bareFarHarRett,\n    );\n\n    return antallUkerEtterFødselMor + antallUkerForeldrepengerFar + flerbarnsUker;\n};\n","import { Dekningsgrad, Periode, isUttaksperiode } from '../types';\nimport { finnAntallDagerÅTrekke } from './uttaksPlanStatus';\n\nexport const getFlerbarnsuker = (dekningsgrad: string, antallBarn: number): number => {\n    if (antallBarn === 2) {\n        if (dekningsgrad === Dekningsgrad.HUNDRE_PROSENT) {\n            return 17;\n        } else {\n            return 21;\n        }\n    } else {\n        if (dekningsgrad === Dekningsgrad.HUNDRE_PROSENT) {\n            return 46;\n        } else {\n            return 56;\n        }\n    }\n};\n\nexport const uttaksplanHarForMangeFlerbarnsdager = (\n    uttaksplan: Periode[],\n    dekningsgrad: Dekningsgrad,\n    antallBarn: number,\n) => {\n    const result: number = uttaksplan\n        .slice()\n        .filter((periode) => isUttaksperiode(periode) && periode.ønskerFlerbarnsdager === true)\n        .reduce((sum: number, periode: Periode) => {\n            if (isUttaksperiode(periode)) {\n                return finnAntallDagerÅTrekke(periode) + sum;\n            } else {\n                return sum;\n            }\n        }, 0);\n\n    return result > getFlerbarnsuker(dekningsgrad, antallBarn) * 5;\n};\n","import dayjs from 'dayjs';\nimport { Uttaksdagen } from './Uttaksdagen';\nimport { dateToISOString } from '@navikt/sif-common-formik-ds/lib';\nimport { DatepickerLimitations } from '@navikt/ds-datepicker';\nimport uttaksConstants from '../constants/constants';\nimport { Situasjon } from '../types';\nimport { andreAugust2022ReglerGjelder } from './dateUtils';\nimport { getFørsteUttaksdag2UkerFørFødsel } from './wlbUtils';\n\nfunction sisteMuligePermisjonsdag(familiehendelsedato: Date): Date {\n    const startDato = Uttaksdagen(familiehendelsedato).denneEllerNeste();\n    return Uttaksdagen(\n        dayjs(startDato).add(uttaksConstants.MAKS_PERMISJONSLENGDE_I_ÅR, 'years').toDate(),\n    ).denneEllerNeste();\n}\n\nconst konverterMinOgMaxDatoerTilString = (minDate: Date, maxDate: Date) => ({\n    minDate: dateToISOString(minDate),\n    maxDate: dateToISOString(maxDate),\n});\n\nconst defaultPermisjonsperiodeAvgrensning = (familiehendelsesdato: Date): DatepickerLimitations => {\n    const minDato = Uttaksdagen(familiehendelsesdato).denneEllerNeste();\n    const maksDato = sisteMuligePermisjonsdag(familiehendelsesdato);\n    return {\n        ...konverterMinOgMaxDatoerTilString(minDato, maksDato),\n        weekendsNotSelectable: true,\n    };\n};\n\nconst startdatoFørTermin = (familiehendelsesdato: Date, termindato: Date | undefined): DatepickerLimitations => {\n    const termindatoMinus12Uker =\n        termindato !== undefined\n            ? dayjs(termindato).subtract(uttaksConstants.MAKS_ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5 - 1, 'weeks')\n            : undefined;\n    const erFødselsdatoFørTermindatoMinus12Uker =\n        termindato !== undefined ? dayjs(familiehendelsesdato).isBefore(termindatoMinus12Uker) : false;\n\n    if (erFødselsdatoFørTermindatoMinus12Uker) {\n        const maksDato = Uttaksdagen(dayjs(termindato).toDate()).forrige();\n        const minDato = Uttaksdagen(familiehendelsesdato).denneEllerForrige();\n        return {\n            ...konverterMinOgMaxDatoerTilString(minDato, maksDato),\n            weekendsNotSelectable: true,\n        };\n    } else {\n        const datoÅRegneFra = termindato !== undefined ? termindato : familiehendelsesdato;\n        const maksDato = Uttaksdagen(dayjs(datoÅRegneFra).toDate()).forrige();\n        const minDato = Uttaksdagen(maksDato).trekkFra(\n            uttaksConstants.MAKS_ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5 - 1,\n        );\n        return {\n            ...konverterMinOgMaxDatoerTilString(minDato, maksDato),\n            weekendsNotSelectable: true,\n        };\n    }\n};\n\nconst startdatoFørTerminForeldrepengerFørFødselKonto = (familiehendelsesdato: string): DatepickerLimitations => {\n    const maksDato = Uttaksdagen(dayjs(familiehendelsesdato).toDate()).forrige();\n    const minDato = Uttaksdagen(maksDato).trekkFra(uttaksConstants.ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5 - 1);\n    return {\n        ...konverterMinOgMaxDatoerTilString(minDato, maksDato),\n        weekendsNotSelectable: true,\n    };\n};\n\nconst ekstrauttakFørFødsel = (familiehendelsesdato: string): DatepickerLimitations => {\n    const sisteDagFørFødsel = Uttaksdagen(dayjs(familiehendelsesdato).toDate()).forrige();\n    const minDato = Uttaksdagen(sisteDagFørFødsel).trekkFra(\n        uttaksConstants.MAKS_ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5 - 1,\n    );\n    const maksDato = Uttaksdagen(sisteDagFørFødsel).trekkFra(\n        uttaksConstants.ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5 - 1,\n    );\n    return {\n        ...konverterMinOgMaxDatoerTilString(minDato, maksDato),\n        weekendsNotSelectable: true,\n    };\n};\n\nconst startdatoPermisjonAleneomsorgFarMedmor = (\n    datoForAleneomsorg: string,\n    familiehendelsesdato: string,\n): DatepickerLimitations => {\n    const minDato = Uttaksdagen(dayjs(datoForAleneomsorg).toDate()).denneEllerNeste();\n    const maksDato = sisteMuligePermisjonsdag(dayjs(familiehendelsesdato).toDate());\n    return {\n        ...konverterMinOgMaxDatoerTilString(minDato, maksDato),\n        weekendsNotSelectable: true,\n    };\n};\n\nconst startdatoPermisjonAdopsjon = (familiehendelsesdato: string): DatepickerLimitations => {\n    return defaultPermisjonsperiodeAvgrensning(dayjs(familiehendelsesdato).toDate());\n};\n\nconst morsSisteUttaksdag = (familiehendelsesdato: string): DatepickerLimitations => {\n    return defaultPermisjonsperiodeAvgrensning(dayjs(familiehendelsesdato).toDate());\n};\n\nconst startdatoPermisjonFarMedmor = (\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    situasjon: Situasjon,\n): DatepickerLimitations => {\n    const defaultAvgrensning = defaultPermisjonsperiodeAvgrensning(familiehendelsesdato);\n    if (situasjon === 'fødsel' && andreAugust2022ReglerGjelder(familiehendelsesdato)) {\n        return {\n            ...defaultAvgrensning,\n            minDate: dateToISOString(getFørsteUttaksdag2UkerFørFødsel(familiehendelsesdato, termindato)),\n        };\n    }\n    return defaultAvgrensning;\n};\n\nexport const uttaksplanDatoavgrensninger = {\n    startdatoFørTermin,\n    morsSisteUttaksdag,\n    startdatoPermisjonFarMedmor,\n    startdatoPermisjonAdopsjon,\n    startdatoPermisjonAleneomsorgFarMedmor,\n    startdatoFørTerminForeldrepengerFørFødselKonto,\n    ekstrauttakFørFødsel,\n};\n","import { __assign, __spreadArray } from \"tslib\";\nimport { IntlMessageFormat } from 'intl-messageformat';\nimport { memoize, strategies } from '@formatjs/fast-memoize';\nimport { UnsupportedFormatterError } from './error';\nexport function filterProps(props, allowlist, defaults) {\n    if (defaults === void 0) { defaults = {}; }\n    return allowlist.reduce(function (filtered, name) {\n        if (name in props) {\n            filtered[name] = props[name];\n        }\n        else if (name in defaults) {\n            filtered[name] = defaults[name];\n        }\n        return filtered;\n    }, {});\n}\nvar defaultErrorHandler = function (error) {\n    // @ts-ignore just so we don't need to declare dep on @types/node\n    if (process.env.NODE_ENV !== 'production') {\n        console.error(error);\n    }\n};\nvar defaultWarnHandler = function (warning) {\n    // @ts-ignore just so we don't need to declare dep on @types/node\n    if (process.env.NODE_ENV !== 'production') {\n        console.warn(warning);\n    }\n};\nexport var DEFAULT_INTL_CONFIG = {\n    formats: {},\n    messages: {},\n    timeZone: undefined,\n    defaultLocale: 'en',\n    defaultFormats: {},\n    fallbackOnEmptyString: true,\n    onError: defaultErrorHandler,\n    onWarn: defaultWarnHandler,\n};\nexport function createIntlCache() {\n    return {\n        dateTime: {},\n        number: {},\n        message: {},\n        relativeTime: {},\n        pluralRules: {},\n        list: {},\n        displayNames: {},\n    };\n}\nfunction createFastMemoizeCache(store) {\n    return {\n        create: function () {\n            return {\n                get: function (key) {\n                    return store[key];\n                },\n                set: function (key, value) {\n                    store[key] = value;\n                },\n            };\n        },\n    };\n}\n/**\n * Create intl formatters and populate cache\n * @param cache explicit cache to prevent leaking memory\n */\nexport function createFormatters(cache) {\n    if (cache === void 0) { cache = createIntlCache(); }\n    var RelativeTimeFormat = Intl.RelativeTimeFormat;\n    var ListFormat = Intl.ListFormat;\n    var DisplayNames = Intl.DisplayNames;\n    var getDateTimeFormat = memoize(function () {\n        var _a;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return new ((_a = Intl.DateTimeFormat).bind.apply(_a, __spreadArray([void 0], args, false)))();\n    }, {\n        cache: createFastMemoizeCache(cache.dateTime),\n        strategy: strategies.variadic,\n    });\n    var getNumberFormat = memoize(function () {\n        var _a;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return new ((_a = Intl.NumberFormat).bind.apply(_a, __spreadArray([void 0], args, false)))();\n    }, {\n        cache: createFastMemoizeCache(cache.number),\n        strategy: strategies.variadic,\n    });\n    var getPluralRules = memoize(function () {\n        var _a;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return new ((_a = Intl.PluralRules).bind.apply(_a, __spreadArray([void 0], args, false)))();\n    }, {\n        cache: createFastMemoizeCache(cache.pluralRules),\n        strategy: strategies.variadic,\n    });\n    return {\n        getDateTimeFormat: getDateTimeFormat,\n        getNumberFormat: getNumberFormat,\n        getMessageFormat: memoize(function (message, locales, overrideFormats, opts) {\n            return new IntlMessageFormat(message, locales, overrideFormats, __assign({ formatters: {\n                    getNumberFormat: getNumberFormat,\n                    getDateTimeFormat: getDateTimeFormat,\n                    getPluralRules: getPluralRules,\n                } }, (opts || {})));\n        }, {\n            cache: createFastMemoizeCache(cache.message),\n            strategy: strategies.variadic,\n        }),\n        getRelativeTimeFormat: memoize(function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return new (RelativeTimeFormat.bind.apply(RelativeTimeFormat, __spreadArray([void 0], args, false)))();\n        }, {\n            cache: createFastMemoizeCache(cache.relativeTime),\n            strategy: strategies.variadic,\n        }),\n        getPluralRules: getPluralRules,\n        getListFormat: memoize(function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return new (ListFormat.bind.apply(ListFormat, __spreadArray([void 0], args, false)))();\n        }, {\n            cache: createFastMemoizeCache(cache.list),\n            strategy: strategies.variadic,\n        }),\n        getDisplayNames: memoize(function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            return new (DisplayNames.bind.apply(DisplayNames, __spreadArray([void 0], args, false)))();\n        }, {\n            cache: createFastMemoizeCache(cache.displayNames),\n            strategy: strategies.variadic,\n        }),\n    };\n}\nexport function getNamedFormat(formats, type, name, onError) {\n    var formatType = formats && formats[type];\n    var format;\n    if (formatType) {\n        format = formatType[name];\n    }\n    if (format) {\n        return format;\n    }\n    onError(new UnsupportedFormatterError(\"No \".concat(type, \" format named: \").concat(name)));\n}\n","import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport { invariant } from '@formatjs/ecma402-abstract';\nimport { DEFAULT_INTL_CONFIG as CORE_DEFAULT_INTL_CONFIG } from '@formatjs/intl';\nexport function invariantIntlContext(intl) {\n    invariant(intl, '[React Intl] Could not find required `intl` object. ' +\n        '<IntlProvider> needs to exist in the component ancestry.');\n}\nexport var DEFAULT_INTL_CONFIG = __assign(__assign({}, CORE_DEFAULT_INTL_CONFIG), { textComponent: React.Fragment });\n/**\n * Takes a `formatXMLElementFn`, and composes it in function, which passes\n * argument `parts` through, assigning unique key to each part, to prevent\n * \"Each child in a list should have a unique \"key\"\" React error.\n * @param formatXMLElementFn\n */\nexport function assignUniqueKeysToParts(formatXMLElementFn) {\n    return function (parts) {\n        // eslint-disable-next-line prefer-rest-params\n        return formatXMLElementFn(React.Children.toArray(parts));\n    };\n}\nexport function shallowEqual(objA, objB) {\n    if (objA === objB) {\n        return true;\n    }\n    if (!objA || !objB) {\n        return false;\n    }\n    var aKeys = Object.keys(objA);\n    var bKeys = Object.keys(objB);\n    var len = aKeys.length;\n    if (bKeys.length !== len) {\n        return false;\n    }\n    for (var i = 0; i < len; i++) {\n        var key = aKeys[i];\n        if (objA[key] !== objB[key] ||\n            !Object.prototype.hasOwnProperty.call(objB, key)) {\n            return false;\n        }\n    }\n    return true;\n}\n","import { __assign } from \"tslib\";\nimport * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { invariantIntlContext } from '../utils';\nfunction getDisplayName(Component) {\n    return Component.displayName || Component.name || 'Component';\n}\n// This is primarily dealing with packaging systems where multiple copies of react-intl\n// might exist\nvar IntlContext = typeof window !== 'undefined' && !window.__REACT_INTL_BYPASS_GLOBAL_CONTEXT__\n    ? window.__REACT_INTL_CONTEXT__ ||\n        (window.__REACT_INTL_CONTEXT__ = React.createContext(null))\n    : React.createContext(null);\nvar IntlConsumer = IntlContext.Consumer, IntlProvider = IntlContext.Provider;\nexport var Provider = IntlProvider;\nexport var Context = IntlContext;\nexport default function injectIntl(WrappedComponent, options) {\n    var _a = options || {}, _b = _a.intlPropName, intlPropName = _b === void 0 ? 'intl' : _b, _c = _a.forwardRef, forwardRef = _c === void 0 ? false : _c, _d = _a.enforceContext, enforceContext = _d === void 0 ? true : _d;\n    var WithIntl = function (props) { return (React.createElement(IntlConsumer, null, function (intl) {\n        var _a;\n        if (enforceContext) {\n            invariantIntlContext(intl);\n        }\n        var intlProp = (_a = {}, _a[intlPropName] = intl, _a);\n        return (React.createElement(WrappedComponent, __assign({}, props, intlProp, { ref: forwardRef ? props.forwardedRef : null })));\n    })); };\n    WithIntl.displayName = \"injectIntl(\".concat(getDisplayName(WrappedComponent), \")\");\n    WithIntl.WrappedComponent = WrappedComponent;\n    if (forwardRef) {\n        return hoistNonReactStatics(React.forwardRef(function (props, ref) { return (React.createElement(WithIntl, __assign({}, props, { forwardedRef: ref }))); }), WrappedComponent);\n    }\n    return hoistNonReactStatics(WithIntl, WrappedComponent);\n}\n","import * as React from 'react';\nimport { Context } from './injectIntl';\nimport { invariantIntlContext } from '../utils';\nexport default function useIntl() {\n    var intl = React.useContext(Context);\n    invariantIntlContext(intl);\n    return intl;\n}\n","import { __rest } from \"tslib\";\nimport * as React from 'react';\nimport useIntl from './useIntl';\nvar DisplayName;\n(function (DisplayName) {\n    DisplayName[\"formatDate\"] = \"FormattedDate\";\n    DisplayName[\"formatTime\"] = \"FormattedTime\";\n    DisplayName[\"formatNumber\"] = \"FormattedNumber\";\n    DisplayName[\"formatList\"] = \"FormattedList\";\n    // Note that this DisplayName is the locale display name, not to be confused with\n    // the name of the enum, which is for React component display name in dev tools.\n    DisplayName[\"formatDisplayName\"] = \"FormattedDisplayName\";\n})(DisplayName || (DisplayName = {}));\nvar DisplayNameParts;\n(function (DisplayNameParts) {\n    DisplayNameParts[\"formatDate\"] = \"FormattedDateParts\";\n    DisplayNameParts[\"formatTime\"] = \"FormattedTimeParts\";\n    DisplayNameParts[\"formatNumber\"] = \"FormattedNumberParts\";\n    DisplayNameParts[\"formatList\"] = \"FormattedListParts\";\n})(DisplayNameParts || (DisplayNameParts = {}));\nexport var FormattedNumberParts = function (props) {\n    var intl = useIntl();\n    var value = props.value, children = props.children, formatProps = __rest(props, [\"value\", \"children\"]);\n    return children(intl.formatNumberToParts(value, formatProps));\n};\nFormattedNumberParts.displayName = 'FormattedNumberParts';\nexport var FormattedListParts = function (props) {\n    var intl = useIntl();\n    var value = props.value, children = props.children, formatProps = __rest(props, [\"value\", \"children\"]);\n    return children(intl.formatListToParts(value, formatProps));\n};\nFormattedNumberParts.displayName = 'FormattedNumberParts';\nexport function createFormattedDateTimePartsComponent(name) {\n    var ComponentParts = function (props) {\n        var intl = useIntl();\n        var value = props.value, children = props.children, formatProps = __rest(props, [\"value\", \"children\"]);\n        var date = typeof value === 'string' ? new Date(value || 0) : value;\n        var formattedParts = name === 'formatDate'\n            ? intl.formatDateToParts(date, formatProps)\n            : intl.formatTimeToParts(date, formatProps);\n        return children(formattedParts);\n    };\n    ComponentParts.displayName = DisplayNameParts[name];\n    return ComponentParts;\n}\nexport function createFormattedComponent(name) {\n    var Component = function (props) {\n        var intl = useIntl();\n        var value = props.value, children = props.children, formatProps = __rest(props\n        // TODO: fix TS type definition for localeMatcher upstream\n        , [\"value\", \"children\"]);\n        // TODO: fix TS type definition for localeMatcher upstream\n        var formattedValue = intl[name](value, formatProps);\n        if (typeof children === 'function') {\n            return children(formattedValue);\n        }\n        var Text = intl.textComponent || React.Fragment;\n        return React.createElement(Text, null, formattedValue);\n    };\n    Component.displayName = DisplayName[name];\n    return Component;\n}\n","/*\n * Copyright 2015, Yahoo Inc.\n * Copyrights licensed under the New BSD License.\n * See the accompanying LICENSE file for terms.\n */\nimport { __rest } from \"tslib\";\nimport * as React from 'react';\nimport useIntl from './useIntl';\nimport { shallowEqual } from '../utils';\nfunction areEqual(prevProps, nextProps) {\n    var values = prevProps.values, otherProps = __rest(prevProps, [\"values\"]);\n    var nextValues = nextProps.values, nextOtherProps = __rest(nextProps, [\"values\"]);\n    return (shallowEqual(nextValues, values) &&\n        shallowEqual(otherProps, nextOtherProps));\n}\nfunction FormattedMessage(props) {\n    var intl = useIntl();\n    var formatMessage = intl.formatMessage, _a = intl.textComponent, Text = _a === void 0 ? React.Fragment : _a;\n    var id = props.id, description = props.description, defaultMessage = props.defaultMessage, values = props.values, children = props.children, _b = props.tagName, Component = _b === void 0 ? Text : _b, ignoreTag = props.ignoreTag;\n    var descriptor = { id: id, description: description, defaultMessage: defaultMessage };\n    var nodes = formatMessage(descriptor, values, {\n        ignoreTag: ignoreTag,\n    });\n    if (typeof children === 'function') {\n        return children(Array.isArray(nodes) ? nodes : [nodes]);\n    }\n    if (Component) {\n        return React.createElement(Component, null, React.Children.toArray(nodes));\n    }\n    return React.createElement(React.Fragment, null, nodes);\n}\nFormattedMessage.displayName = 'FormattedMessage';\nvar MemoizedFormattedMessage = React.memo(FormattedMessage, areEqual);\nMemoizedFormattedMessage.displayName = 'MemoizedFormattedMessage';\nexport default MemoizedFormattedMessage;\n","import { createFormattedComponent, createFormattedDateTimePartsComponent, } from './src/components/createFormattedComponent';\nimport injectIntl, { Provider as RawIntlProvider, Context as IntlContext, } from './src/components/injectIntl';\nimport useIntl from './src/components/useIntl';\nimport IntlProvider, { createIntl } from './src/components/provider';\nimport FormattedRelativeTime from './src/components/relative';\nimport FormattedPlural from './src/components/plural';\nimport FormattedMessage from './src/components/message';\nimport FormattedDateTimeRange from './src/components/dateTimeRange';\nexport { FormattedDateTimeRange, FormattedMessage, FormattedPlural, FormattedRelativeTime, IntlContext, IntlProvider, RawIntlProvider, createIntl, injectIntl, useIntl, };\nexport { createIntlCache, UnsupportedFormatterError, InvalidConfigError, MissingDataError, MessageFormatError, MissingTranslationError, IntlErrorCode as ReactIntlErrorCode, IntlError as ReactIntlError, } from '@formatjs/intl';\nexport function defineMessages(msgs) {\n    return msgs;\n}\nexport function defineMessage(msg) {\n    return msg;\n}\n// IMPORTANT: Explicit here to prevent api-extractor from outputing `import('./src/types').CustomFormatConfig`\nexport var FormattedDate = createFormattedComponent('formatDate');\nexport var FormattedTime = createFormattedComponent('formatTime');\nexport var FormattedNumber = createFormattedComponent('formatNumber');\nexport var FormattedList = createFormattedComponent('formatList');\nexport var FormattedDisplayName = createFormattedComponent('formatDisplayName');\nexport var FormattedDateParts = createFormattedDateTimePartsComponent('formatDate');\nexport var FormattedTimeParts = createFormattedDateTimePartsComponent('formatTime');\nexport { FormattedNumberParts, FormattedListParts, } from './src/components/createFormattedComponent';\n","import {\n    Attachment,\n    Forelder,\n    MorsAktivitet,\n    StønadskontoType,\n    OverføringÅrsakType,\n    Arbeidsform,\n    UttakRundtFødselÅrsak,\n} from '@navikt/fp-common';\nimport { YesOrNo, getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\n\nexport enum PeriodeUttakFormField {\n    fom = 'fom',\n    tom = 'tom',\n    konto = 'konto',\n    samtidigUttak = 'samtidigUttak',\n    aktivitetskravMor = 'aktivitetskravMor',\n    aktivitetskravMorDokumentasjon = 'aktivitetskravMorDokumentasjon',\n    overføringsårsak = 'overføringsårsak',\n    overføringsdokumentasjon = 'overføringsdokumentasjon',\n    skalHaGradering = 'skalHaGradering',\n    stillingsprosent = 'stillingsprosent',\n    arbeidsformer = 'arbeidsformer',\n    erMorForSyk = 'erMorForSyk',\n    erMorForSykDokumentasjon = 'erMorForSykDokumentasjon',\n    uttakRundtFødselÅrsak = 'uttakRundtFødselÅrsak',\n    samtidigUttakProsent = 'samtidigUttakProsent',\n    hvemSkalTaUttak = 'hvemSkalTaUttak',\n    ønskerFlerbarnsdager = 'ønskerFlerbarnsdager',\n}\n\nexport interface PeriodeUttakFormData {\n    [PeriodeUttakFormField.fom]: Date | undefined;\n    [PeriodeUttakFormField.tom]: Date | undefined;\n    [PeriodeUttakFormField.konto]: StønadskontoType | '';\n    [PeriodeUttakFormField.samtidigUttak]: YesOrNo;\n    [PeriodeUttakFormField.aktivitetskravMor]: MorsAktivitet | '';\n    [PeriodeUttakFormField.aktivitetskravMorDokumentasjon]: Attachment[];\n    [PeriodeUttakFormField.overføringsårsak]: OverføringÅrsakType | '';\n    [PeriodeUttakFormField.overføringsdokumentasjon]: Attachment[];\n    [PeriodeUttakFormField.skalHaGradering]: YesOrNo;\n    [PeriodeUttakFormField.stillingsprosent]: string;\n    [PeriodeUttakFormField.arbeidsformer]: Arbeidsform | '';\n    [PeriodeUttakFormField.erMorForSyk]: YesOrNo;\n    [PeriodeUttakFormField.erMorForSykDokumentasjon]: Attachment[];\n    [PeriodeUttakFormField.uttakRundtFødselÅrsak]: UttakRundtFødselÅrsak | '';\n    [PeriodeUttakFormField.samtidigUttakProsent]: string;\n    [PeriodeUttakFormField.hvemSkalTaUttak]: Forelder | '';\n    [PeriodeUttakFormField.ønskerFlerbarnsdager]: YesOrNo;\n}\n\nexport const PeriodeUttakFormComponents = getTypedFormComponents<PeriodeUttakFormField, PeriodeUttakFormData>();\n","import { Attachment, AttachmentType, Block, Skjemanummer } from '@navikt/fp-common';\nimport FormikFileUploader from 'app/components/formik-file-uploader/FormikFileUploader';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\nimport { GuidePanel } from '@navikt/ds-react';\n\ninterface Props {\n    vedlegg: Attachment[];\n    navnMor: string;\n    isOpen: boolean;\n}\n\nconst MorErForSykDokumentasjonOpplastning: FunctionComponent<Props> = ({ navnMor, vedlegg, isOpen }) => {\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <GuidePanel>\n                    <FormattedMessage id=\"uttaksplan.erMorForSykVeileder\" values={{ navn: navnMor }} />\n                </GuidePanel>\n            </Block>\n            <Block visible={isOpen}>\n                <FormikFileUploader\n                    legend=\"Dokumentasjon for mors sykdom\"\n                    label=\"Last opp dokumentasjon for mors sykdom\"\n                    name={PeriodeUttakFormField.erMorForSykDokumentasjon}\n                    attachmentType={AttachmentType.UTSETTELSE_SYKDOM}\n                    skjemanummer={Skjemanummer.DOK_MORS_UTDANNING_ARBEID_SYKDOM}\n                    attachments={vedlegg}\n                />\n            </Block>\n        </>\n    );\n};\n\nexport default MorErForSykDokumentasjonOpplastning;\n","import { Attachment, Block, intlUtils } from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\nimport MorErForSykDokumentasjonOpplastning from '../er-mor-for-syk-dokumentasjon/MorErForSykDokumentasjonOpplastning';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\n\ninterface Props {\n    fieldName: PeriodeUttakFormField;\n    erMorForSyk: YesOrNo;\n    vedlegg: Attachment[];\n    navnMor: string;\n    isOpen: boolean;\n}\n\nconst ErMorForSykSpørsmål: FunctionComponent<Props> = ({ fieldName, erMorForSyk, navnMor, vedlegg, isOpen }) => {\n    const intl = useIntl();\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <PeriodeUttakFormComponents.YesOrNoQuestion\n                    name={fieldName}\n                    legend={intlUtils(intl, 'uttaksplan.erMorForSyk')}\n                    validate={(value: YesOrNo) => {\n                        if (value === YesOrNo.UNANSWERED) {\n                            return intlUtils(intl, 'uttaksplan.validering.erMorForSyk');\n                        }\n\n                        return undefined;\n                    }}\n                />\n            </Block>\n            <Block padBottom=\"l\" visible={erMorForSyk === YesOrNo.YES}>\n                <MorErForSykDokumentasjonOpplastning navnMor={navnMor} vedlegg={vedlegg} isOpen={isOpen} />\n            </Block>\n        </>\n    );\n};\n\nexport default ErMorForSykSpørsmål;\n","import { intlUtils } from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\n\ninterface Props {\n    fieldName: PeriodeUttakFormField;\n}\n\nconst FlerbarnsdagerSpørsmål: FunctionComponent<Props> = ({ fieldName }) => {\n    const intl = useIntl();\n\n    return (\n        <PeriodeUttakFormComponents.YesOrNoQuestion\n            name={fieldName}\n            legend={intlUtils(intl, 'uttaksplan.flerbarnsdager')}\n            validate={(value: YesOrNo) => {\n                if (value === YesOrNo.UNANSWERED) {\n                    return intlUtils(intl, 'uttaksplan.validering.flerbarnsdager');\n                }\n\n                return undefined;\n            }}\n        />\n    );\n};\n\nexport default FlerbarnsdagerSpørsmål;\n","import { Forelder, NavnPåForeldre, hasValue, intlUtils } from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\nimport { capitalizeFirstLetter } from '@navikt/fp-common/src/common/utils/stringUtils';\n\ninterface Props {\n    fieldName: PeriodeUttakFormField;\n    navnPåForeldre: NavnPåForeldre;\n    erFarEllerMedmor: boolean;\n}\n\nconst HvemSkalHaUttakSpørsmål: FunctionComponent<Props> = ({ fieldName, navnPåForeldre, erFarEllerMedmor }) => {\n    const intl = useIntl();\n\n    return (\n        <PeriodeUttakFormComponents.RadioGroup\n            legend={intlUtils(intl, 'uttaksplan.hvemSkalHaUttak')}\n            name={fieldName}\n            radios={[\n                {\n                    label: erFarEllerMedmor\n                        ? capitalizeFirstLetter(navnPåForeldre.farMedmor)\n                        : capitalizeFirstLetter(navnPåForeldre.mor),\n                    value: erFarEllerMedmor ? Forelder.farMedmor : Forelder.mor,\n                },\n                {\n                    label: erFarEllerMedmor\n                        ? capitalizeFirstLetter(navnPåForeldre.mor)\n                        : capitalizeFirstLetter(navnPåForeldre.farMedmor),\n                    value: erFarEllerMedmor ? Forelder.mor : Forelder.farMedmor,\n                },\n            ]}\n            validate={(value) => {\n                if (!hasValue(value)) {\n                    return intlUtils(intl, 'uttaksplan.validering.hvemSkalHaUttak');\n                }\n\n                return undefined;\n            }}\n        />\n    );\n};\n\nexport default HvemSkalHaUttakSpørsmål;\n","import { NavnPåForeldre, StønadskontoType, getStønadskontoNavn, hasValue, intlUtils } from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\nimport { FormikRadioProp } from '@navikt/sif-common-formik-ds/lib/components/formik-radio-group/FormikRadioGroup';\n\ninterface Props {\n    velgbareStønadskontoer: StønadskontoType[];\n    erOppholdsperiode: boolean;\n    navnPåForeldre: NavnPåForeldre;\n    fieldName: PeriodeUttakFormField;\n    erFarEllerMedmor: boolean;\n    erAleneOmOmsorg: boolean;\n}\n\nconst getSpørsmålsTekst = (\n    erOppholdsperiode: boolean,\n    intl: IntlShape,\n    navnPåForeldre: NavnPåForeldre,\n    erFarEllerMedmor: boolean,\n): string => {\n    if (erOppholdsperiode) {\n        const navnAnnenForelder = erFarEllerMedmor ? navnPåForeldre.mor : navnPåForeldre.farMedmor;\n        return intlUtils(intl, 'uttaksplan.hvilkenKvote.annenForelder', {\n            navnAnnenForelder,\n        });\n    } else {\n        return intlUtils(intl, 'uttaksplan.hvilkenKvote');\n    }\n};\n\nconst HvilkenKontoSpørsmål: FunctionComponent<Props> = ({\n    velgbareStønadskontoer,\n    erOppholdsperiode,\n    navnPåForeldre,\n    fieldName,\n    erFarEllerMedmor,\n    erAleneOmOmsorg,\n}) => {\n    const intl = useIntl();\n    const legend = getSpørsmålsTekst(erOppholdsperiode, intl, navnPåForeldre, erFarEllerMedmor);\n\n    const radios = velgbareStønadskontoer.map(\n        (konto): FormikRadioProp => ({\n            label: getStønadskontoNavn(intl, konto, navnPåForeldre, erFarEllerMedmor, erAleneOmOmsorg),\n            value: `${konto}`,\n        }),\n    );\n\n    return (\n        <PeriodeUttakFormComponents.RadioGroup\n            name={fieldName}\n            radios={radios}\n            legend={legend}\n            validate={(value) => {\n                if (!hasValue(value)) {\n                    return intlUtils(intl, 'uttaksplan.validering.hvilkenKonto');\n                }\n\n                return undefined;\n            }}\n        />\n    );\n};\n\nexport default HvilkenKontoSpørsmål;\n","import { Attachment, Block, UttakRundtFødselÅrsak, hasValue, intlUtils } from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\nimport MorErForSykDokumentasjonOpplastning from '../er-mor-for-syk-dokumentasjon/MorErForSykDokumentasjonOpplastning';\n\ninterface Props {\n    fieldName: PeriodeUttakFormField;\n    uttakRundtFødselÅrsak: UttakRundtFødselÅrsak | '';\n    vedlegg: Attachment[];\n    navnMor: string;\n    isOpen: boolean;\n}\n\nconst UttakRundtFødselÅrsakSpørsmål: FunctionComponent<Props> = ({\n    fieldName,\n    uttakRundtFødselÅrsak,\n    navnMor,\n    vedlegg,\n    isOpen,\n}) => {\n    const intl = useIntl();\n    const radios = [\n        {\n            label: intlUtils(intl, 'ja'),\n            value: UttakRundtFødselÅrsak.samtidigUttak,\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.uttakrundtFødselÅrsak.nei.morErForSyk'),\n            value: UttakRundtFødselÅrsak.morErForSyk,\n        },\n    ];\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <PeriodeUttakFormComponents.RadioGroup\n                    legend={intlUtils(intl, 'uttaksplan.uttakrundtFødselÅrsak.spørsmål')}\n                    name={fieldName}\n                    radios={radios}\n                    validate={(value) => {\n                        if (!hasValue(value)) {\n                            return intlUtils(intl, 'uttaksplan.validering.uttakRundtFødselFarMedmorWLB');\n                        }\n\n                        return undefined;\n                    }}\n                />\n            </Block>\n            <Block padBottom=\"l\" visible={uttakRundtFødselÅrsak === UttakRundtFødselÅrsak.morErForSyk}>\n                <MorErForSykDokumentasjonOpplastning navnMor={navnMor} vedlegg={vedlegg} isOpen={isOpen} />\n            </Block>\n        </>\n    );\n};\n\nexport default UttakRundtFødselÅrsakSpørsmål;\n","import {\n    intlUtils,\n    Block,\n    hasValue,\n    Attachment,\n    OverføringÅrsakType,\n    AttachmentType,\n    Skjemanummer,\n    getNavnGenitivEierform,\n} from '@navikt/fp-common';\nimport FormikFileUploader from 'app/components/formik-file-uploader/FormikFileUploader';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\nimport { GuidePanel } from '@navikt/ds-react';\nimport { capitalizeFirstLetter } from '@navikt/fp-common/src/common/utils/stringUtils';\ninterface Props {\n    vedlegg: Attachment[];\n    navnAnnenForelder: string;\n    erEndringssøknad: boolean;\n    valgtOverføringsårsak: OverføringÅrsakType | '';\n    isOpen: boolean;\n}\n\nconst OverføringsårsakSpørsmål: FunctionComponent<Props> = ({\n    vedlegg,\n    navnAnnenForelder,\n    erEndringssøknad,\n    valgtOverføringsårsak,\n    isOpen,\n}) => {\n    const intl = useIntl();\n    const navn = capitalizeFirstLetter(navnAnnenForelder);\n    const radios = [\n        {\n            label: intlUtils(intl, 'uttaksplan.overføringsårsaktype.INSTITUSJONSOPPHOLD_ANNEN_FORELDER', {\n                navnAnnenForelder: navn,\n            }),\n            value: OverføringÅrsakType.institusjonsoppholdAnnenForelder,\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.overføringsårsaktype.SYKDOM_ANNEN_FORELDER', {\n                navnAnnenForelder: navn,\n            }),\n            value: OverføringÅrsakType.sykdomAnnenForelder,\n        },\n    ];\n\n    if (erEndringssøknad) {\n        radios.push({\n            label: intlUtils(intl, 'uttaksplan.overføringsårsaktype.ALENEOMSORG'),\n            value: OverføringÅrsakType.aleneomsorg,\n        });\n        radios.push({\n            label: intlUtils(intl, 'uttaksplan.overføringsårsaktype.IKKE_RETT_ANNEN_FORELDER', {\n                navnAnnenForelder: navn,\n            }),\n            value: OverføringÅrsakType.ikkeRettAnnenForelder,\n        });\n    }\n\n    const beOmDokumentasjon =\n        valgtOverføringsårsak !== '' &&\n        valgtOverføringsårsak !== OverføringÅrsakType.aleneomsorg &&\n        valgtOverføringsårsak !== OverføringÅrsakType.ikkeRettAnnenForelder;\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <PeriodeUttakFormComponents.RadioGroup\n                    name={PeriodeUttakFormField.overføringsårsak}\n                    legend={intlUtils(intl, 'uttaksplan.overføringsårsak', {\n                        navnAnnenForelder: getNavnGenitivEierform(navnAnnenForelder, intl.locale),\n                    })}\n                    radios={radios}\n                    validate={(value) => {\n                        if (!hasValue(value)) {\n                            return intlUtils(intl, 'uttaksplan.validering.overføringsårsak');\n                        }\n\n                        return undefined;\n                    }}\n                />\n            </Block>\n            {beOmDokumentasjon && (\n                <Block padBottom=\"l\">\n                    <GuidePanel>\n                        <FormattedMessage\n                            id=\"uttaksplan.overføringsårsak.informasjonVedSykdomAnnenForelder\"\n                            values={{ navnAnnenForelder }}\n                        />\n                    </GuidePanel>\n                </Block>\n            )}\n            {beOmDokumentasjon && isOpen && (\n                <Block padBottom=\"l\">\n                    <FormikFileUploader\n                        legend=\"Dokumentasjon for overføringsårsak\"\n                        label={intlUtils(intl, 'uttaksplan.overføringsårsak.dokumentasjon')}\n                        name={PeriodeUttakFormField.overføringsdokumentasjon}\n                        attachments={vedlegg || []}\n                        attachmentType={AttachmentType.OVERFØRING_KVOTE}\n                        skjemanummer={Skjemanummer.DOK_OVERFØRING_FOR_SYK}\n                    />\n                </Block>\n            )}\n        </>\n    );\n};\n\nexport default OverføringsårsakSpørsmål;\n","import { getFloatFromString, hasValue, intlUtils } from '@navikt/fp-common';\nimport { IntlShape } from 'react-intl';\n\nexport const prosentValideringSamtidigUttak = (intl: IntlShape) => (value: string) => {\n    const samtidigUttakProsent = getFloatFromString(value);\n\n    if (!hasValue(value)) {\n        return intlUtils(intl, 'uttaksplan.validering.samtidigUttaksprosent.required');\n    }\n\n    if (samtidigUttakProsent === undefined) {\n        return intlUtils(intl, 'uttaksplan.validering.samtidigUttaksprosent.måVæreEtTall');\n    }\n\n    if (samtidigUttakProsent < 0) {\n        return intlUtils(intl, 'uttaksplan.validering.samtidigUttaksprosent.måVæreStørreEnn0');\n    }\n\n    if (samtidigUttakProsent > 100) {\n        return intlUtils(intl, 'uttaksplan.validering.samtidigUttaksprosent.måVæreMindreEnn100');\n    }\n\n    return undefined;\n};\n\nexport const prosentValideringGradering = (intl: IntlShape) => (value: string) => {\n    const stillingsprosent = getFloatFromString(value);\n\n    if (!hasValue(value) || value.trim() === '') {\n        return intlUtils(intl, 'uttaksplan.validering.stillingsprosent.required');\n    }\n\n    if (stillingsprosent === undefined) {\n        return intlUtils(intl, 'uttaksplan.validering.stillingsprosent.måVæreEtTall');\n    }\n\n    if (stillingsprosent < 0) {\n        return intlUtils(intl, 'uttaksplan.validering.stillingsprosent.måVæreStørreEnn0');\n    }\n\n    if (stillingsprosent > 100) {\n        return intlUtils(intl, 'uttaksplan.validering.stillingsprosent.måVæreMindreEnn100');\n    }\n\n    return undefined;\n};\n","import { FunctionComponent } from 'react';\nimport { Block, NavnPåForeldre, Situasjon, andreAugust2022ReglerGjelder, intlUtils, links } from '@navikt/fp-common';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\nimport { GuidePanel, Link } from '@navikt/ds-react';\nimport { prosentValideringSamtidigUttak } from '../../../../utils/prosentValidering';\n\ninterface Props {\n    erFlerbarnssøknad: boolean;\n    navnPåForeldre: NavnPåForeldre;\n    navnPåAnnenForelder: string | undefined;\n    samtidigUttakProsentVisible: boolean;\n    familiehendelsesdato: Date;\n    situasjon: Situasjon;\n}\n\nconst SamtidigUttakSpørsmål: FunctionComponent<Props> = ({\n    erFlerbarnssøknad,\n    navnPåForeldre,\n    navnPåAnnenForelder,\n    samtidigUttakProsentVisible,\n    familiehendelsesdato,\n    situasjon,\n}) => {\n    const intl = useIntl();\n    let samtidigUttakInfoTekst;\n    if (erFlerbarnssøknad) {\n        samtidigUttakInfoTekst = 'uttaksplan.samtidigUttak.flerBarnsuker.veiledertekst';\n    } else if (andreAugust2022ReglerGjelder(familiehendelsesdato) && situasjon === 'fødsel') {\n        samtidigUttakInfoTekst = 'uttaksplan.samtidigUttak.veiledertekst.etterWLB';\n    } else {\n        samtidigUttakInfoTekst = 'uttaksplan.samtidigUttak.veiledertekst.førWLB';\n    }\n\n    return (\n        <>\n            <Block padBottom={samtidigUttakProsentVisible ? 'l' : 'none'}>\n                <PeriodeUttakFormComponents.YesOrNoQuestion\n                    name={PeriodeUttakFormField.samtidigUttak}\n                    legend={intlUtils(intl, 'uttaksplan.samtidigUttak', { navnAnnenForelder: navnPåAnnenForelder })}\n                    validate={(value: YesOrNo) => {\n                        if (value === YesOrNo.UNANSWERED) {\n                            return intlUtils(intl, 'uttaksplan.validering.samtidigUttak');\n                        }\n\n                        return undefined;\n                    }}\n                />\n            </Block>\n            <Block visible={samtidigUttakProsentVisible} padBottom=\"l\">\n                <GuidePanel>\n                    <FormattedMessage\n                        id={samtidigUttakInfoTekst}\n                        values={{\n                            link: (\n                                <Link href={links.fleksibeltuttak} target=\"_blank\">\n                                    <FormattedMessage id=\"uttaksplan.samtidigUttak.veiledertekst.lenke\" />\n                                </Link>\n                            ),\n                            navnMor: navnPåForeldre.mor,\n                            navnFar: navnPåForeldre.farMedmor,\n                        }}\n                    />\n                </GuidePanel>\n            </Block>\n            <Block visible={samtidigUttakProsentVisible}>\n                <PeriodeUttakFormComponents.NumberInput\n                    name={PeriodeUttakFormField.samtidigUttakProsent}\n                    label={intlUtils(intl, 'uttaksplan.samtidigUttakProsent')}\n                    maxLength={5}\n                    validate={prosentValideringSamtidigUttak(intl)}\n                />\n            </Block>\n        </>\n    );\n};\n\nexport default SamtidigUttakSpørsmål;\n","import {\n    intlUtils,\n    Block,\n    hasValue,\n    TidsperiodeDate,\n    Arbeidsforhold,\n    Arbeidsform,\n    getKunArbeidsforholdForValgtTidsperiode,\n} from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\nimport { BodyShort, ReadMore } from '@navikt/ds-react';\nimport { FormikRadioProp } from '@navikt/sif-common-formik-ds/lib/components/formik-radio-group/FormikRadioGroup';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\nimport { prosentValideringGradering } from '../../../../utils/prosentValidering';\n\ninterface Props {\n    graderingsprosentVisible: boolean;\n    arbeidsforhold: Arbeidsforhold[];\n    tidsperiode: TidsperiodeDate;\n}\n\nexport const getArbeidsOptions = (\n    arbeidsforhold: Arbeidsforhold[],\n    tidsperiode: TidsperiodeDate,\n): FormikRadioProp[] => {\n    const aktiveArbeidsforholdIPerioden = getKunArbeidsforholdForValgtTidsperiode(arbeidsforhold, tidsperiode);\n\n    const defaultOptions: FormikRadioProp[] = [\n        {\n            label: 'Selvstendig næringsdrivende',\n            value: Arbeidsform.selvstendignæringsdrivende,\n        },\n        {\n            label: 'Frilans',\n            value: Arbeidsform.frilans,\n        },\n    ];\n    const eksisterendeArbeidsforhold: FormikRadioProp[] = [];\n\n    if (aktiveArbeidsforholdIPerioden.length > 0) {\n        aktiveArbeidsforholdIPerioden.forEach((arb) =>\n            eksisterendeArbeidsforhold.push({ label: `${arb.arbeidsgiverNavn}`, value: `${arb.arbeidsgiverId}` }),\n        );\n    }\n\n    return [...eksisterendeArbeidsforhold, ...defaultOptions];\n};\n\nconst SkalHaGraderingSpørsmål: FunctionComponent<Props> = ({\n    graderingsprosentVisible,\n    arbeidsforhold,\n    tidsperiode,\n}) => {\n    const intl = useIntl();\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <PeriodeUttakFormComponents.YesOrNoQuestion\n                    name={PeriodeUttakFormField.skalHaGradering}\n                    legend={intlUtils(intl, 'uttaksplan.skalHaGradering')}\n                    validate={(value: YesOrNo) => {\n                        if (value === YesOrNo.UNANSWERED) {\n                            return intlUtils(intl, 'uttaksplan.validering.skalHaGradering');\n                        }\n\n                        return undefined;\n                    }}\n                />\n            </Block>\n            <Block padBottom=\"l\" visible={graderingsprosentVisible}>\n                <Block padBottom=\"s\">\n                    <PeriodeUttakFormComponents.NumberInput\n                        name={PeriodeUttakFormField.stillingsprosent}\n                        label={intlUtils(intl, 'uttaksplan.stillingsprosent')}\n                        maxLength={5}\n                        validate={prosentValideringGradering(intl)}\n                    />\n                </Block>\n                <ReadMore header={intlUtils(intl, 'uttaksplan.stillingsprosent.lesMer.tittel')}>\n                    <BodyShort>\n                        <FormattedMessage id=\"uttaksplan.stillingsprosent.lesMer.innhold\" />\n                    </BodyShort>\n                </ReadMore>\n            </Block>\n            <Block visible={graderingsprosentVisible}>\n                <PeriodeUttakFormComponents.RadioGroup\n                    name={PeriodeUttakFormField.arbeidsformer}\n                    legend={intlUtils(intl, 'uttaksplan.arbeidsformer')}\n                    radios={getArbeidsOptions(arbeidsforhold, tidsperiode)}\n                    validate={(value) => {\n                        if (!hasValue(value)) {\n                            return intlUtils(intl, 'uttaksplan.validering.arbeidsformer');\n                        }\n\n                        return undefined;\n                    }}\n                />\n                <ReadMore header={intlUtils(intl, 'uttaksplan.arbeidsformer.lesMer.tittel')}>\n                    <BodyShort>\n                        <FormattedMessage id=\"uttaksplan.arbeidsformer.lesMer.innhold\" />\n                    </BodyShort>\n                </ReadMore>\n            </Block>\n        </>\n    );\n};\n\nexport default SkalHaGraderingSpørsmål;\n","import { FunctionComponent, useEffect, useRef } from 'react';\nimport { useFormikContext } from 'formik';\nimport { PeriodeUttakFormData } from '../periode-uttak-form/periodeUttakFormConfig';\nimport { PeriodeUtsettelseFormData } from '../periode-utsettelse-form/periodeUtsettelseFormConfig';\nimport { PeriodeFørFødselFormData } from '../periode-før-fødsel-form/periodeFørFødselFormConfig';\n\ninterface Props {\n    cleanup: () => PeriodeUttakFormData | PeriodeUtsettelseFormData | PeriodeFørFødselFormData;\n}\n\nexport const jsonSort = (json: any): string => {\n    function isObject(v: any) {\n        return '[object Object]' === Object.prototype.toString.call(v);\n    }\n\n    const sort = (o: any): any => {\n        if (Array.isArray(o)) {\n            return o.sort().map(sort);\n        } else if (isObject(o)) {\n            return Object.keys(o)\n                .sort((a, b) => a.localeCompare(b))\n                .reduce((a: any, k) => {\n                    a[k] = sort(o[k]);\n                    return a;\n                }, {});\n        }\n\n        return o;\n    };\n    return sort(json);\n};\n\nexport const SubmitListener: FunctionComponent<Props> = ({ cleanup }) => {\n    const formik = useFormikContext<PeriodeUttakFormData | PeriodeUtsettelseFormData | PeriodeFørFødselFormData>();\n    const { isSubmitting, isValidating, submitForm, setValues } = formik;\n    const cleanedValues = cleanup();\n    const ref = useRef(cleanedValues);\n\n    useEffect(() => {\n        if (!isSubmitting && !isValidating) {\n            const currentValuesJSONString = JSON.stringify(jsonSort(ref.current));\n            const previousValuesJSONString = JSON.stringify(jsonSort(cleanedValues));\n            const valuesEqualLastValues = previousValuesJSONString === currentValuesJSONString;\n\n            if (!valuesEqualLastValues) {\n                ref.current = cleanedValues;\n            }\n\n            if (!valuesEqualLastValues) {\n                setValues(cleanedValues);\n                setTimeout(() => submitForm(), 0);\n            }\n        }\n    }, [isSubmitting, isValidating, submitForm, setValues, cleanedValues, cleanup]);\n\n    return null;\n};\n","import {\n    Situasjon,\n    TidsperiodeDate,\n    Uttaksdagen,\n    andreAugust2022ReglerGjelder,\n    getFørsteUttaksdag2UkerFørFødsel,\n    getTidsperiode,\n    isValidTidsperiode,\n    uttaksConstants,\n} from '@navikt/fp-common';\nimport dayjs from 'dayjs';\n\nexport interface Uttaksdatoer {\n    førsteUttaksdag: Date;\n    førFødsel: {\n        førsteMuligeUttaksdag: Date;\n        førsteUttaksdagForeldrepengerFørFødsel: Date;\n        sisteUttaksdagFørFødsel: Date;\n    };\n    etterFødsel: {\n        sisteUttaksdagInnenforSeksUker: Date;\n        førsteUttaksdagEtterSeksUker: Date;\n        sisteMuligeUttaksdag: Date;\n    };\n}\n\nexport const uttaksdatoer = (familiehendelsesdato: Date, erFarEllerMedmor: boolean, termindato: Date | undefined) => ({\n    førsteUttaksdagForeldrepengerFørFødsel: getFørsteUttaksdagForeldrepengerFørFødsel(familiehendelsesdato),\n    førsteUttaksdagPåEllerEtterFødsel: Uttaksdagen(familiehendelsesdato).denneEllerNeste(),\n    førsteMuligeUttaksdagFørTermin: getFørsteMuligeUttaksdag(familiehendelsesdato, erFarEllerMedmor, termindato),\n    sisteMuligeUttaksdagEtterTermin: getSisteMuligeUttaksdag(familiehendelsesdato),\n});\n\nexport const getUttaksdatoer = (\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n): Uttaksdatoer => {\n    const førsteUttaksdag = Uttaksdagen(familiehendelsesdato).denneEllerNeste();\n\n    const førsteUttaksdagForeldrepengerFørFødsel = getFørsteUttaksdagForeldrepengerFørFødsel(familiehendelsesdato);\n    const førsteMuligeUttaksdag = getFørsteMuligeUttaksdag(familiehendelsesdato, erFarEllerMedmor, termindato);\n    const sisteUttaksdagFørFødsel = Uttaksdagen(førsteUttaksdag).forrige();\n    const sisteMuligeUttaksdag = getSisteMuligeUttaksdag(familiehendelsesdato);\n\n    const sisteUttaksdagInnenforSeksUker = getTidsperiode(førsteUttaksdag, 30).tom;\n    return {\n        førsteUttaksdag,\n        førFødsel: {\n            førsteMuligeUttaksdag,\n            sisteUttaksdagFørFødsel,\n            førsteUttaksdagForeldrepengerFørFødsel,\n        },\n        etterFødsel: {\n            sisteUttaksdagInnenforSeksUker,\n            førsteUttaksdagEtterSeksUker: Uttaksdagen(sisteUttaksdagInnenforSeksUker).neste(),\n            sisteMuligeUttaksdag,\n        },\n    };\n};\n\nexport function getFørsteUttaksdagPåEllerEtterFødsel(familiehendelsesdato: Date) {\n    return Uttaksdagen(familiehendelsesdato).denneEllerNeste();\n}\n\nexport function getFørsteUttaksdagForeldrepengerFørFødsel(familiehendelsesdato: Date): Date {\n    return Uttaksdagen(getFørsteUttaksdagPåEllerEtterFødsel(familiehendelsesdato)).trekkFra(\n        uttaksConstants.ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5,\n    );\n}\n\nexport function getFørsteMuligeUttaksdag(\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n): Date {\n    if (erFarEllerMedmor) {\n        if (andreAugust2022ReglerGjelder(familiehendelsesdato)) {\n            return getFørsteUttaksdag2UkerFørFødsel(familiehendelsesdato, termindato);\n        } else {\n            return Uttaksdagen(familiehendelsesdato).denneEllerNeste();\n        }\n    }\n\n    const termindatoMinus12Uker =\n        termindato !== undefined\n            ? dayjs(termindato).subtract(uttaksConstants.MAKS_ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5 - 1, 'weeks')\n            : undefined;\n    const erFødselsdatoFørTermindatoMinus12Uker =\n        termindato !== undefined ? dayjs(familiehendelsesdato).isBefore(termindatoMinus12Uker) : false;\n\n    if (erFødselsdatoFørTermindatoMinus12Uker) {\n        return Uttaksdagen(familiehendelsesdato).denneEllerForrige();\n    }\n\n    const datoÅRegneFra = termindato !== undefined ? termindato : familiehendelsesdato;\n\n    return Uttaksdagen(getFørsteUttaksdagPåEllerEtterFødsel(datoÅRegneFra)).trekkFra(\n        uttaksConstants.MAKS_ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5,\n    );\n}\n\nexport function getSisteMuligeUttaksdag(familiehendelsesdato: Date): Date {\n    return Uttaksdagen(\n        dayjs(getFørsteUttaksdagPåEllerEtterFødsel(familiehendelsesdato))\n            .add(uttaksConstants.MAKS_PERMISJONSLENGDE_I_ÅR, 'year')\n            .subtract(1, 'day')\n            .toDate(),\n    ).denneEllerNeste();\n}\n\nexport const erInnenFørsteSeksUkerFødselFarMedmor = (\n    tidsperiode: TidsperiodeDate,\n    situasjon: Situasjon,\n    søkerErFarEllerMedmor: boolean,\n    førsteUttaksdagEtterSeksUker: Date,\n): boolean => {\n    if (\n        situasjon !== 'fødsel' ||\n        !søkerErFarEllerMedmor ||\n        tidsperiode === undefined ||\n        isValidTidsperiode(tidsperiode) === false\n    ) {\n        return false;\n    }\n    return dayjs(tidsperiode.fom).isBefore(dayjs(førsteUttaksdagEtterSeksUker), 'day');\n};\n","import {\n    ISOStringToDate,\n    StønadskontoType,\n    Tidsperiode,\n    TidsperiodeDate,\n    Tidsperioden,\n    Uttaksdagen,\n    getFørsteUttaksdag2UkerFørFødsel,\n    getSisteUttaksdag6UkerEtterFødsel,\n    isValidTidsperiode,\n    uttaksplanDatoavgrensninger,\n} from '@navikt/fp-common';\nimport { getFørsteMuligeUttaksdag, getSisteMuligeUttaksdag } from './uttaksdatoerUtils';\nimport { DatepickerLimitations } from '@navikt/ds-datepicker';\nimport { dateToISOString } from '@navikt/sif-common-formik-ds/lib';\n\nexport interface DatoAvgrensninger {\n    fra: Avgrensninger;\n    til: Avgrensninger;\n}\n\nexport interface Avgrensninger {\n    minDato: Date;\n    maksDato: Date;\n    ugyldigeTidsperioder?: Tidsperiode[];\n    helgedagerIkkeTillatt: boolean;\n}\n\nexport const getDatoavgrensningerForFarMedmorPeriodeRundtFødselWLB = (\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    ugyldigeTidsperioder: Tidsperiode[] | undefined,\n): DatoAvgrensninger => {\n    const minDato = getFørsteUttaksdag2UkerFørFødsel(familiehendelsesdato, termindato);\n    const maksDato = getSisteUttaksdag6UkerEtterFødsel(familiehendelsesdato);\n    return {\n        fra: {\n            minDato,\n            maksDato,\n            helgedagerIkkeTillatt: true,\n            ugyldigeTidsperioder,\n        },\n        til: {\n            minDato,\n            maksDato,\n            helgedagerIkkeTillatt: true,\n            ugyldigeTidsperioder,\n        },\n    };\n};\n\nexport const getDatoavgrensningerForStønadskonto = (\n    konto: StønadskontoType | undefined,\n    familiehendelsesdato: Date,\n    tidsperiode: Partial<TidsperiodeDate> | undefined,\n    ugyldigeTidsperioder: Tidsperiode[] | undefined,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n): DatoAvgrensninger => {\n    if (konto === undefined) {\n        return getDatoavgrensningerForPeriodeUtenKonto(\n            familiehendelsesdato,\n            ugyldigeTidsperioder,\n            erFarEllerMedmor,\n            termindato,\n        );\n    }\n    if (konto === StønadskontoType.ForeldrepengerFørFødsel) {\n        return getDatoavgrensningerForForeldrepengerFørFødsel(familiehendelsesdato);\n    }\n    if (isValidTidsperiode(tidsperiode) && Tidsperioden(tidsperiode).erFørDato(familiehendelsesdato)) {\n        return getDatoavgrensningerForEkstrauttakFørTermin(familiehendelsesdato, termindato);\n    }\n\n    const standardAvgrensninger = standardAvgrensningerForUttakEtterFødsel(familiehendelsesdato);\n\n    return {\n        fra: {\n            ...standardAvgrensninger,\n            ugyldigeTidsperioder,\n        },\n        til: {\n            ...standardAvgrensninger,\n            ugyldigeTidsperioder,\n        },\n    };\n};\n\nconst getDatoavgrensningerForPeriodeUtenKonto = (\n    familiehendelsesdato: Date,\n    ugyldigeTidsperioder: Tidsperiode[] | undefined,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n) => {\n    const minDato = getFørsteMuligeUttaksdag(familiehendelsesdato, erFarEllerMedmor, termindato);\n\n    return {\n        fra: {\n            minDato,\n            maksDato: getSisteMuligeUttaksdag(familiehendelsesdato),\n            ugyldigeTidsperioder,\n            helgedagerIkkeTillatt: true,\n        },\n        til: {\n            minDato,\n            maksDato: getSisteMuligeUttaksdag(familiehendelsesdato),\n            ugyldigeTidsperioder,\n            helgedagerIkkeTillatt: true,\n        },\n    };\n};\n\nconst standardAvgrensningerForUttakEtterFødsel = (familiehendelsesdato: Date): Avgrensninger => {\n    return {\n        helgedagerIkkeTillatt: true,\n        minDato: Uttaksdagen(familiehendelsesdato).denneEllerNeste(),\n        maksDato: getSisteMuligeUttaksdag(familiehendelsesdato),\n    };\n};\n\nconst getDatoavgrensningerForForeldrepengerFørFødsel = (familiehendelsesdato: Date): DatoAvgrensninger => {\n    const avgrensninger: DatepickerLimitations = {\n        ...standardAvgrensningerForUttakEtterFødsel,\n        ...uttaksplanDatoavgrensninger.startdatoFørTerminForeldrepengerFørFødselKonto(\n            dateToISOString(familiehendelsesdato),\n        ),\n    };\n\n    return {\n        fra: {\n            helgedagerIkkeTillatt: !!avgrensninger.weekendsNotSelectable,\n            minDato: ISOStringToDate(avgrensninger.minDate)!,\n            maksDato: ISOStringToDate(avgrensninger.maxDate)!,\n        },\n        til: {\n            helgedagerIkkeTillatt: !!avgrensninger.weekendsNotSelectable,\n            minDato: ISOStringToDate(avgrensninger.minDate)!,\n            maksDato: ISOStringToDate(avgrensninger.maxDate)!,\n        },\n    };\n};\n\nconst getDatoavgrensningerForEkstrauttakFørTermin = (\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n): DatoAvgrensninger => {\n    const datoÅRegneFra = termindato !== undefined ? termindato : familiehendelsesdato;\n    const avgrensninger: DatepickerLimitations = {\n        ...standardAvgrensningerForUttakEtterFødsel,\n        ...uttaksplanDatoavgrensninger.ekstrauttakFørFødsel(dateToISOString(datoÅRegneFra)),\n    };\n\n    return {\n        fra: {\n            helgedagerIkkeTillatt: !!avgrensninger.weekendsNotSelectable,\n            minDato: ISOStringToDate(avgrensninger.minDate)!,\n            maksDato: ISOStringToDate(avgrensninger.maxDate)!,\n        },\n        til: {\n            helgedagerIkkeTillatt: !!avgrensninger.weekendsNotSelectable,\n            minDato: ISOStringToDate(avgrensninger.minDate)!,\n            maksDato: ISOStringToDate(avgrensninger.maxDate)!,\n        },\n    };\n};\n\nexport const getDatoavgrensningerForBareFarMedmorHarRettWLB = (\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    ugyldigeTidsperioder: Tidsperiode[] | undefined,\n): DatoAvgrensninger => {\n    const minDato = getFørsteUttaksdag2UkerFørFødsel(familiehendelsesdato, termindato);\n    const maksDato = getSisteMuligeUttaksdag(familiehendelsesdato);\n    return {\n        fra: {\n            minDato,\n            maksDato,\n            helgedagerIkkeTillatt: true,\n            ugyldigeTidsperioder,\n        },\n        til: {\n            minDato,\n            maksDato,\n            helgedagerIkkeTillatt: true,\n            ugyldigeTidsperioder,\n        },\n    };\n};\n","import {\n    intlUtils,\n    Tidsperiode,\n    Block,\n    TidsperiodeDate,\n    Situasjon,\n    Periode,\n    Utsettelsesperiode,\n    isUtsettelsesperiode,\n    isUttaksperiodeFarMedmorPgaFødsel,\n    andreAugust2022ReglerGjelder,\n    isUttaksperiodeBareFarMedmorHarRett,\n    isUttaksperiode,\n    mapTidsperiodeStringToTidsperiode,\n    ISOStringToDate,\n    dateRangeValidation,\n    getFørsteUttaksdagPåEllerEtterFødsel,\n} from '@navikt/fp-common';\nimport dayjs from 'dayjs';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { dateToISOString, getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\nimport { Button } from '@navikt/ds-react';\nimport { getFørsteMuligeUttaksdag } from '../../../utils/uttaksdatoerUtils';\nimport {\n    DatoAvgrensninger,\n    getDatoavgrensningerForBareFarMedmorHarRettWLB,\n    getDatoavgrensningerForFarMedmorPeriodeRundtFødselWLB,\n    getDatoavgrensningerForStønadskonto,\n} from '../../../utils/datoAvgrensningerUtils';\n\ninterface Props {\n    periode?: Periode;\n    tidsperiode: TidsperiodeDate;\n    familiehendelsesdato: Date;\n    ugyldigeTidsperioder: Tidsperiode[] | undefined;\n    utsettelserIPlan: Utsettelsesperiode[];\n    erFarEllerMedmor: boolean;\n    morHarRett: boolean;\n    onBekreft: (tidsperiode: Partial<Tidsperiode>) => void;\n    onCancel?: () => void;\n    initialMonth?: Date;\n    termindato?: Date;\n    situasjon: Situasjon;\n    erFarMedmorOgHarAleneomsorg: boolean;\n}\n\nenum TidsperiodeFormFields {\n    fom = 'fom',\n    tom = 'tom',\n}\n\nexport type TidsperiodeFormValues = Partial<Tidsperiode>;\n\nconst Form = getTypedFormComponents<TidsperiodeFormFields, TidsperiodeFormValues>();\n\nconst getDatoAvgrensninger = (\n    periode: Periode | undefined,\n    familiehendelsesdato: Date,\n    fom: string | undefined,\n    tom: string | undefined,\n    tidsperiode: Partial<TidsperiodeDate>,\n    ugyldigeTidsperioder: Tidsperiode[] | undefined,\n    termindato: Date | undefined,\n    erFarEllerMedmor: boolean,\n    morHarRett: boolean,\n    situasjon: Situasjon,\n    erFarMedmorOgHarAleneomsorg: boolean,\n): DatoAvgrensninger => {\n    if (periode && !isUtsettelsesperiode(periode)) {\n        if (\n            isUttaksperiodeFarMedmorPgaFødsel(periode, familiehendelsesdato, termindato) &&\n            andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n            situasjon === 'fødsel'\n        ) {\n            return getDatoavgrensningerForFarMedmorPeriodeRundtFødselWLB(\n                familiehendelsesdato,\n                termindato,\n                ugyldigeTidsperioder,\n            );\n        }\n        if (\n            isUttaksperiodeBareFarMedmorHarRett(periode, morHarRett) &&\n            andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n            situasjon === 'fødsel'\n        ) {\n            return getDatoavgrensningerForBareFarMedmorHarRettWLB(\n                familiehendelsesdato,\n                termindato,\n                ugyldigeTidsperioder,\n            );\n        }\n        return getDatoavgrensningerForStønadskonto(\n            isUttaksperiode(periode) ? periode.konto : undefined,\n            familiehendelsesdato,\n            mapTidsperiodeStringToTidsperiode({ fom, tom }),\n            ugyldigeTidsperioder,\n            erFarEllerMedmor,\n            termindato,\n        );\n    }\n\n    const førsteMuligeUttaksdag = erFarMedmorOgHarAleneomsorg\n        ? getFørsteUttaksdagPåEllerEtterFødsel(familiehendelsesdato)\n        : getFørsteMuligeUttaksdag(familiehendelsesdato, erFarEllerMedmor, termindato);\n\n    return {\n        fra: {\n            minDato: førsteMuligeUttaksdag,\n            maksDato: tidsperiode\n                ? ISOStringToDate(tom)!\n                : dayjs(familiehendelsesdato).add(3, 'years').subtract(1, 'day').toDate(),\n            ugyldigeTidsperioder,\n            helgedagerIkkeTillatt: true,\n        },\n        til: {\n            minDato: tidsperiode ? ISOStringToDate(fom)! : førsteMuligeUttaksdag,\n            maksDato: dayjs(familiehendelsesdato).add(3, 'years').subtract(1, 'day').toDate(),\n            ugyldigeTidsperioder,\n            helgedagerIkkeTillatt: true,\n        },\n    };\n};\n\nconst TidsperiodeForm: React.FunctionComponent<Props> = ({\n    periode,\n    tidsperiode,\n    familiehendelsesdato,\n    ugyldigeTidsperioder,\n    utsettelserIPlan,\n    initialMonth,\n    termindato,\n    erFarEllerMedmor,\n    morHarRett,\n    situasjon,\n    onBekreft,\n    onCancel,\n    erFarMedmorOgHarAleneomsorg,\n}) => {\n    const intl = useIntl();\n\n    return (\n        <Form.FormikWrapper\n            initialValues={{ fom: dateToISOString(tidsperiode.fom), tom: dateToISOString(tidsperiode.tom) }}\n            onSubmit={onBekreft}\n            enableReinitialize={true}\n            renderForm={({ values }) => {\n                const datoAvgrensninger = getDatoAvgrensninger(\n                    periode,\n                    familiehendelsesdato,\n                    values.fom,\n                    values.tom,\n                    tidsperiode,\n                    ugyldigeTidsperioder,\n                    termindato,\n                    erFarEllerMedmor,\n                    morHarRett,\n                    situasjon,\n                    erFarMedmorOgHarAleneomsorg,\n                );\n\n                return (\n                    <Form.Form onCancel={onCancel} includeButtons={false}>\n                        <Block>\n                            <Form.DateIntervalPicker\n                                legend={intlUtils(intl, 'utenlandsopphold.leggTilUtenlandsopphold.tidsrom')}\n                                fromDatepickerProps={{\n                                    name: TidsperiodeFormFields.fom,\n                                    disableWeekend: true,\n                                    label: intlUtils(intl, 'utenlandsopphold.leggTilUtenlandsopphold.fraogmed'),\n                                    fullscreenOverlay: true,\n                                    placeholder: 'dd.mm.åååå',\n                                    minDate: datoAvgrensninger.fra.minDato,\n                                    maxDate: datoAvgrensninger.fra.maksDato,\n                                    validate: (value) =>\n                                        dateRangeValidation.validateFromDateInRange({\n                                            intl,\n                                            date: ISOStringToDate(value),\n                                            minDate: datoAvgrensninger.fra.minDato,\n                                            maxDate: datoAvgrensninger.fra.maksDato,\n                                            errorKey: 'valideringsfeil.fraOgMedDato.førTilDato',\n                                            toDate: ISOStringToDate(values.tom),\n                                            disableWeekend: datoAvgrensninger.fra.helgedagerIkkeTillatt,\n                                            utsettelserIPlan: utsettelserIPlan,\n                                            periodeId: periode !== undefined ? periode.id : undefined,\n                                        }),\n                                    dayPickerProps: {\n                                        defaultMonth: initialMonth || familiehendelsesdato,\n                                    },\n                                }}\n                                toDatepickerProps={{\n                                    name: TidsperiodeFormFields.tom,\n                                    disableWeekend: true,\n                                    label: intlUtils(intl, 'utenlandsopphold.leggTilUtenlandsopphold.tilogmed'),\n                                    fullscreenOverlay: true,\n                                    placeholder: 'dd.mm.åååå',\n                                    minDate: ISOStringToDate(values.fom) || familiehendelsesdato,\n                                    maxDate: datoAvgrensninger.til.maksDato,\n                                    validate: (value) =>\n                                        dateRangeValidation.validateToDateInRange({\n                                            intl,\n                                            date: ISOStringToDate(value),\n                                            minDate: datoAvgrensninger.til.minDato,\n                                            maxDate: datoAvgrensninger.til.maksDato,\n                                            errorKey: 'valideringsfeil.tilOgMedDato.etterFraDato',\n                                            fromDate: ISOStringToDate(values.fom),\n                                            disableWeekend: datoAvgrensninger.til.helgedagerIkkeTillatt,\n                                            utsettelserIPlan: utsettelserIPlan,\n                                            periodeId: periode !== undefined ? periode.id : undefined,\n                                        }),\n                                    dayPickerProps: {\n                                        defaultMonth: ISOStringToDate(values.fom),\n                                    },\n                                }}\n                            />\n                        </Block>\n                        <Button type=\"submit\">\n                            <FormattedMessage id=\"uttaksplan.gåVidere\" />\n                        </Button>\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default TidsperiodeForm;\n","import {\n    Periodetype,\n    StønadskontoUttak,\n    TidsperiodeDate,\n    andreAugust2022ReglerGjelder,\n    isValidTidsperiode,\n} from '@navikt/fp-common';\nimport dayjs from 'dayjs';\n\nconst kontoSkalBesvares = (\n    periodetype: Periodetype,\n    tidsperiode: TidsperiodeDate,\n    stønadskontoer: StønadskontoUttak[],\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n): boolean => {\n    if (\n        !isValidTidsperiode(tidsperiode) ||\n        stønadskontoer.length === 0 ||\n        (andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n            periodetype === Periodetype.Uttak &&\n            erFarEllerMedmor &&\n            dayjs(tidsperiode.fom).isBefore(familiehendelsesdato, 'day'))\n    ) {\n        return false;\n    }\n\n    return true;\n};\n\nexport default kontoSkalBesvares;\n","import {\n    Periodetype,\n    Situasjon,\n    StønadskontoType,\n    TidsperiodeDate,\n    andreAugust2022ReglerGjelder,\n    erFarMedmorSinWLBTidsperiodeRundtFødsel,\n} from '@navikt/fp-common';\nimport dayjs from 'dayjs';\n\nexport const uttakRundtFødselÅrsakSpørsmålSkalBesvares = (\n    periodetype: Periodetype,\n    konto: StønadskontoType,\n    tidsperiode: TidsperiodeDate,\n    søkerErFarEllerMedmor: boolean,\n    erAleneOmOmsorg: boolean,\n    annenForelderKanIkkeOppgis: boolean,\n    søkerHarMidlertidigOmsorg: boolean,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    situasjon: Situasjon,\n    bareFarMedmorHarRett: boolean,\n): boolean => {\n    if (\n        erAleneOmOmsorg ||\n        annenForelderKanIkkeOppgis ||\n        søkerHarMidlertidigOmsorg ||\n        !søkerErFarEllerMedmor ||\n        bareFarMedmorHarRett ||\n        !andreAugust2022ReglerGjelder(familiehendelsesdato) ||\n        situasjon !== 'fødsel' ||\n        dayjs(tidsperiode.fom).isBefore(familiehendelsesdato, 'day')\n    ) {\n        return false;\n    }\n\n    if (periodetype === Periodetype.Uttak) {\n        if (\n            erFarMedmorSinWLBTidsperiodeRundtFødsel(\n                tidsperiode,\n                familiehendelsesdato,\n                periodetype,\n                konto,\n                søkerErFarEllerMedmor,\n                termindato,\n                situasjon,\n            )\n        ) {\n            return true;\n        }\n        return false;\n    }\n    return false;\n};\n\nexport default uttakRundtFødselÅrsakSpørsmålSkalBesvares;\n","import {\n    Periodetype,\n    Situasjon,\n    StønadskontoType,\n    StønadskontoUttak,\n    TidsperiodeDate,\n    getSisteUttaksdag6UkerEtterFødsel,\n} from '@navikt/fp-common';\nimport dayjs from 'dayjs';\nimport kontoSkalBesvares from './kontoSkalBesvarer';\nimport uttakRundtFødselÅrsakSpørsmålSkalBesvares from './uttakRundtFødselÅrsakSpørsmålSkalBesvares';\n\nexport const farMedmorBrukerForeldrepengerMedAktivitetskravRundtFødselOgMorIkkeErSyk = (\n    famDato: Date,\n    erFarEllerMedmor: boolean,\n    konto: StønadskontoType | undefined,\n    erMorForSyk: boolean | undefined,\n    tidsperiode: TidsperiodeDate,\n    situasjon: Situasjon,\n) => {\n    const sisteUttaksdag6UkerEtterFødsel = getSisteUttaksdag6UkerEtterFødsel(famDato);\n    return (\n        erFarEllerMedmor &&\n        konto === StønadskontoType.Foreldrepenger &&\n        erMorForSyk === false &&\n        situasjon === 'fødsel' &&\n        dayjs(tidsperiode.fom).isSameOrBefore(sisteUttaksdag6UkerEtterFødsel, 'day')\n    );\n};\n\nexport const aktivitetskravMorSkalBesvares = (\n    ønskerFlerbarnsdager: boolean | undefined,\n    samtidigUttak: boolean | undefined,\n    erMorForSyk: boolean | undefined,\n    periodetype: Periodetype,\n    kontotype: StønadskontoType | undefined,\n    søkerErMor: boolean,\n    erAleneOmOmsorg: boolean,\n    annenForelderKanIkkeOppgis: boolean,\n    søkerHarMidlertidigOmsorg: boolean,\n    tidsperiode: TidsperiodeDate,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    situasjon: Situasjon,\n    stønadskontoer: StønadskontoUttak[],\n    bareFarMedmorHarRett: boolean,\n): boolean => {\n    if (\n        søkerErMor ||\n        erAleneOmOmsorg ||\n        periodetype !== Periodetype.Uttak ||\n        annenForelderKanIkkeOppgis ||\n        søkerHarMidlertidigOmsorg ||\n        uttakRundtFødselÅrsakSpørsmålSkalBesvares(\n            periodetype,\n            kontotype as StønadskontoType,\n            tidsperiode,\n            !søkerErMor,\n            erAleneOmOmsorg,\n            annenForelderKanIkkeOppgis,\n            søkerHarMidlertidigOmsorg,\n            familiehendelsesdato,\n            termindato,\n            situasjon,\n            bareFarMedmorHarRett,\n        ) ||\n        !kontoSkalBesvares(periodetype, tidsperiode, stønadskontoer, familiehendelsesdato, !søkerErMor) ||\n        farMedmorBrukerForeldrepengerMedAktivitetskravRundtFødselOgMorIkkeErSyk(\n            familiehendelsesdato,\n            !søkerErMor,\n            kontotype,\n            erMorForSyk,\n            tidsperiode,\n            situasjon,\n        )\n    ) {\n        return false;\n    }\n\n    if (\n        !erAleneOmOmsorg &&\n        (kontotype === StønadskontoType.Fellesperiode || kontotype === StønadskontoType.Foreldrepenger)\n    ) {\n        if (ønskerFlerbarnsdager || samtidigUttak || (erMorForSyk && kontotype === StønadskontoType.Fellesperiode)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    return false;\n};\n","import { Periodetype, Situasjon, StønadskontoType, TidsperiodeDate } from '@navikt/fp-common';\nimport dayjs from 'dayjs';\nimport { erInnenFørsteSeksUkerFødselFarMedmor, Uttaksdatoer } from '../uttaksdatoerUtils';\nimport uttakRundtFødselÅrsakSpørsmålSkalBesvares from './uttakRundtFødselÅrsakSpørsmålSkalBesvares';\n\nconst erMorForForSykSkalBesvares = (\n    periodetype: Periodetype,\n    konto: StønadskontoType,\n    tidsperiode: TidsperiodeDate,\n    situasjon: Situasjon,\n    søkerErFarEllerMedmor: boolean,\n    uttaksdatoer: Uttaksdatoer,\n    erFlerbarnssøknad: boolean,\n    erAleneOmOmsorg: boolean,\n    annenForelderKanIkkeOppgis: boolean,\n    ønskerFlerbarnsdager: boolean | undefined,\n    søkerHarMidlertidigOmsorg: boolean,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    bareFarMedmorHarRett: boolean,\n): boolean => {\n    const årsakTilUttakRundtFødselSkalBesvares = uttakRundtFødselÅrsakSpørsmålSkalBesvares(\n        periodetype,\n        konto as StønadskontoType,\n        tidsperiode,\n        søkerErFarEllerMedmor,\n        erAleneOmOmsorg,\n        annenForelderKanIkkeOppgis,\n        søkerHarMidlertidigOmsorg,\n        familiehendelsesdato,\n        termindato,\n        situasjon,\n        bareFarMedmorHarRett,\n    );\n\n    if (\n        erAleneOmOmsorg ||\n        annenForelderKanIkkeOppgis ||\n        søkerHarMidlertidigOmsorg ||\n        årsakTilUttakRundtFødselSkalBesvares ||\n        dayjs(tidsperiode.fom).isBefore(familiehendelsesdato, 'day') ||\n        konto === StønadskontoType.AktivitetsfriKvote\n    ) {\n        return false;\n    }\n\n    if (periodetype === Periodetype.Uttak && søkerErFarEllerMedmor) {\n        if (\n            (konto === StønadskontoType.Fedrekvote || konto === StønadskontoType.Foreldrepenger) &&\n            erInnenFørsteSeksUkerFødselFarMedmor(\n                tidsperiode,\n                situasjon,\n                søkerErFarEllerMedmor,\n                uttaksdatoer.etterFødsel.førsteUttaksdagEtterSeksUker,\n            )\n        ) {\n            if (erFlerbarnssøknad) {\n                return ønskerFlerbarnsdager !== undefined && ønskerFlerbarnsdager === false;\n            }\n\n            return true;\n        }\n        return false;\n    }\n\n    return false;\n};\n\nexport default erMorForForSykSkalBesvares;\n","import {\n    Periodetype,\n    StønadskontoType,\n    TidsperiodeDate,\n    andreAugust2022ReglerGjelder,\n    getSisteUttaksdag6UkerEtterFødsel,\n} from '@navikt/fp-common';\nimport dayjs from 'dayjs';\n\nexport const graderingSkalBesvares = (\n    periodetype: Periodetype,\n    konto: StønadskontoType,\n    familiehendelsesdato: Date,\n    erFarMedmor: boolean,\n    morErForSyk: boolean | undefined,\n    tidsperiode: TidsperiodeDate,\n): boolean => {\n    const farMedmorSøkerDeFørsteSeksUkeneFørWLBOgMorErIkkeSyk =\n        !andreAugust2022ReglerGjelder(familiehendelsesdato) && erFarMedmor && morErForSyk === false;\n    const sisteUttaksdagInnenSeksUkerEtterFødsel = getSisteUttaksdag6UkerEtterFødsel(familiehendelsesdato);\n    const bareFarHarRettSøkerAktivitetsKravKontoDeFørsteSeksUkeneOgMorErIkkeSyk =\n        erFarMedmor &&\n        konto === StønadskontoType.Foreldrepenger &&\n        morErForSyk === false &&\n        dayjs(tidsperiode.fom).isSameOrBefore(sisteUttaksdagInnenSeksUkerEtterFødsel, 'day');\n    if (\n        periodetype === Periodetype.Uttak &&\n        konto !== StønadskontoType.ForeldrepengerFørFødsel &&\n        !farMedmorSøkerDeFørsteSeksUkeneFørWLBOgMorErIkkeSyk &&\n        !bareFarHarRettSøkerAktivitetsKravKontoDeFørsteSeksUkeneOgMorErIkkeSyk\n    ) {\n        return true;\n    }\n    return false;\n};\n","import {\n    Periodetype,\n    Situasjon,\n    StønadskontoType,\n    TidsperiodeDate,\n    erFarMedmorSinWLBTidsperiodeRundtFødsel,\n} from '@navikt/fp-common';\n\nexport const graderingSkalBesvaresPgaWLBUttakRundtFødsel = (\n    tidperiode: TidsperiodeDate,\n    periodetype: Periodetype,\n    konto: StønadskontoType,\n    erFarEllerMedmor: boolean,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    situasjon: Situasjon,\n): boolean => {\n    return erFarMedmorSinWLBTidsperiodeRundtFødsel(\n        tidperiode,\n        familiehendelsesdato,\n        periodetype,\n        konto,\n        erFarEllerMedmor,\n        termindato,\n        situasjon,\n    );\n};\n","import { Periodetype, Situasjon, StønadskontoType, TidsperiodeDate } from '@navikt/fp-common';\nimport dayjs from 'dayjs';\nimport { uttakRundtFødselÅrsakSpørsmålSkalBesvares } from './uttakRundtFødselÅrsakSpørsmålSkalBesvares';\n\nconst samtidigUttakSkalBesvares = (\n    periodetype: Periodetype,\n    konto: StønadskontoType,\n    erUttakInnenFørsteSeksUkerFødselFarMedmor: boolean,\n    erUttakFørFødsel: boolean,\n    erAleneOmsorg: boolean,\n    erDeltUttakINorge: boolean,\n    søkerHarMidlertidigOmsorg: boolean,\n    erMorForSyk: boolean | undefined,\n    ønskerFlerbarnsdager: boolean | undefined,\n    tidsperiode: TidsperiodeDate,\n    søkerErFarEllerMedmor: boolean,\n    annenforelderKanIkkeOppgis: boolean,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    situasjon: Situasjon,\n    bareFarMedmorHarRett: boolean,\n): boolean => {\n    if (erAleneOmsorg || !erDeltUttakINorge || søkerHarMidlertidigOmsorg) {\n        return false;\n    }\n    if (søkerErFarEllerMedmor && dayjs(tidsperiode.fom).isBefore(familiehendelsesdato, 'd')) {\n        return false;\n    }\n    if (\n        uttakRundtFødselÅrsakSpørsmålSkalBesvares(\n            periodetype,\n            konto,\n            tidsperiode,\n            søkerErFarEllerMedmor,\n            erAleneOmsorg,\n            annenforelderKanIkkeOppgis,\n            søkerHarMidlertidigOmsorg,\n            familiehendelsesdato,\n            termindato,\n            situasjon,\n            bareFarMedmorHarRett,\n        )\n    ) {\n        return false;\n    }\n\n    if (periodetype === Periodetype.Uttak) {\n        if (erMorForSyk) {\n            return false;\n        }\n\n        const erUttakEgenKvoteFarMedmorFørsteSeksUkerUtenFlerbarnsdager: boolean =\n            erUttakInnenFørsteSeksUkerFødselFarMedmor &&\n            (konto === StønadskontoType.Fedrekvote || konto === StønadskontoType.Foreldrepenger) &&\n            ønskerFlerbarnsdager !== true;\n\n        return !(erUttakFørFødsel || erUttakEgenKvoteFarMedmorFørsteSeksUkerUtenFlerbarnsdager);\n    }\n\n    return false;\n};\n\nexport default samtidigUttakSkalBesvares;\n","import {\n    Periodetype,\n    StønadskontoType,\n    TidsperiodeDate,\n    UttakRundtFødselÅrsak,\n    andreAugust2022ReglerGjelder,\n} from '@navikt/fp-common';\nimport dayjs from 'dayjs';\n\nexport const ønskerFlerbarnsdagerSkalBesvares = (\n    periodetype: Periodetype,\n    erFlerbarnssøknad: boolean,\n    søkerErFarEllerMedmor: boolean,\n    familiehendelsesdato: Date,\n    tidsperiode: TidsperiodeDate,\n    stønadskontoType: StønadskontoType,\n    bareFarHarRett: boolean,\n    antallBarn: number,\n    erAleneOmOmsorg: boolean,\n    erDeltUttakINorge: boolean,\n    uttakRundtFødselÅrsak: UttakRundtFødselÅrsak | undefined,\n): boolean => {\n    if (dayjs(tidsperiode.fom).isBefore(familiehendelsesdato, 'day')) {\n        return false;\n    }\n\n    if (\n        stønadskontoType === StønadskontoType.AktivitetsfriKvote ||\n        uttakRundtFødselÅrsak === UttakRundtFødselÅrsak.morErForSyk\n    ) {\n        return false;\n    }\n    if (søkerErFarEllerMedmor && (bareFarHarRett || erAleneOmOmsorg) && antallBarn > 1) {\n        if (andreAugust2022ReglerGjelder(familiehendelsesdato)) {\n            return false;\n        }\n        return true;\n    }\n    if (!erDeltUttakINorge && stønadskontoType !== StønadskontoType.Fellesperiode) {\n        return false;\n    }\n    return periodetype === Periodetype.Uttak && erFlerbarnssøknad && søkerErFarEllerMedmor;\n};\n","import { Situasjon, TidsperiodeDate } from '@navikt/fp-common';\nimport { erSamtidigUttakFarMedmorFørFørsteSeksUkerWLB } from '../../components/uttaks-forms/periode-uttak-form/periodeUttakFormQuestionsConfig';\n\nconst hvemSkalTaUttakSkalBesvares = (\n    tidsperiode: TidsperiodeDate,\n    erDeltUttakINorge: boolean,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    situasjon: Situasjon,\n): boolean => {\n    if (erFarEllerMedmor) {\n        if (\n            erSamtidigUttakFarMedmorFørFørsteSeksUkerWLB(\n                { fom: tidsperiode.fom },\n                familiehendelsesdato,\n                erFarEllerMedmor,\n                erDeltUttakINorge,\n                situasjon,\n            )\n        ) {\n            return false;\n        }\n    }\n    return erDeltUttakINorge;\n};\n\nexport default hvemSkalTaUttakSkalBesvares;\n","import { AnnenForelder, Periodetype, StønadskontoType, harAnnenForelderRettIEØS } from '@navikt/fp-common';\n\nconst overføringsårsakSkalBesvares = (\n    periodetype: Periodetype,\n    erFarEllerMedmor: boolean,\n    kontoValue: StønadskontoType,\n    annenForelder: AnnenForelder,\n): boolean => {\n    const annenForelderHarRettIEØS = harAnnenForelderRettIEØS(annenForelder);\n    return (\n        periodetype === Periodetype.Overføring ||\n        (annenForelderHarRettIEØS && erFarEllerMedmor && kontoValue === StønadskontoType.Mødrekvote) ||\n        (annenForelderHarRettIEØS && !erFarEllerMedmor && kontoValue === StønadskontoType.Fedrekvote)\n    );\n};\n\nexport default overføringsårsakSkalBesvares;\n","import {\n    AnnenForelder,\n    Periodetype,\n    Situasjon,\n    StønadskontoType,\n    StønadskontoUttak,\n    TidsperiodeDate,\n    Tidsperioden,\n    convertYesOrNoOrUndefinedToBoolean,\n} from '@navikt/fp-common';\nimport { getUttaksdatoer } from '../uttaksdatoerUtils';\nimport { aktivitetskravMorSkalBesvares } from './aktivitetskravMorSkalBesvares';\nimport erMorForForSykSkalBesvares from './erMorForSykSkalBesvares';\nimport { graderingSkalBesvares } from './graderingSkalBesvares';\nimport { graderingSkalBesvaresPgaWLBUttakRundtFødsel } from './graderingSkalBesvaresPgaWLBUttakRundtFødsel';\nimport samtidigUttakSkalBesvares from './samtidigUttakSkalBesvares';\nimport { ønskerFlerbarnsdagerSkalBesvares } from './ønskerFlerbarnsdagerSkalBesvares';\nimport uttakRundtFødselÅrsakSpørsmålSkalBesvares from './uttakRundtFødselÅrsakSpørsmålSkalBesvares';\nimport kontoSkalBesvares from './kontoSkalBesvarer';\nimport hvemSkalTaUttakSkalBesvares from './hvemSkalTaUttakSkalBesvares';\nimport overføringsårsakSkalBesvares from './overføringsårsakSkalBesvares';\nimport { PeriodeUttakFormData } from '../../components/uttaks-forms/periode-uttak-form/periodeUttakFormConfig';\nexport interface UttakSkjemaregler {\n    aktivitetskravMorSkalBesvares: () => boolean;\n    erMorForSykSkalBesvares: () => boolean;\n    uttakRundtFødselÅrsakSpørsmålSkalBesvares: () => boolean;\n    samtidigUttakSkalBesvares: () => boolean;\n    kontoSkalBesvares: () => boolean;\n    hvemSkalTaUttakSkalBesvares: () => boolean;\n    overføringsårsakSkalBesvares: () => boolean;\n    ønskerFlerbarnsdagerSkalBesvares: () => boolean;\n    graderingSkalBesvares: () => boolean;\n    graderingSkalBesvaresPgaWLBUttakRundtFødsel: () => boolean;\n}\n\nexport interface UttakSkjemaReglerProps {\n    erFarEllerMedmor: boolean;\n    erAleneOmOmsorg: boolean;\n    annenForelder: AnnenForelder;\n    situasjon: Situasjon;\n    erFlerbarnssøknad: boolean;\n    erDeltUttakINorge: boolean;\n    familiehendelsesdato: Date;\n    periodetype: Periodetype;\n    termindato: Date | undefined;\n    morHarRett: boolean;\n    stønadskontoer: StønadskontoUttak[];\n    antallBarn: number;\n}\n\nexport const getUttakSkjemaregler = (\n    formValues: PeriodeUttakFormData,\n    regelProps: UttakSkjemaReglerProps,\n): UttakSkjemaregler => {\n    const {\n        erFarEllerMedmor,\n        erAleneOmOmsorg,\n        annenForelder,\n        situasjon,\n        erFlerbarnssøknad,\n        erDeltUttakINorge,\n        familiehendelsesdato,\n        periodetype,\n        termindato,\n        stønadskontoer,\n        morHarRett,\n        antallBarn,\n    } = regelProps;\n\n    const { konto } = formValues;\n\n    const uttaksdatoer = getUttaksdatoer(familiehendelsesdato, erFarEllerMedmor, termindato);\n    const tidsperiode: TidsperiodeDate = { fom: formValues.fom!, tom: formValues.tom! };\n\n    return {\n        aktivitetskravMorSkalBesvares: () =>\n            aktivitetskravMorSkalBesvares(\n                convertYesOrNoOrUndefinedToBoolean(formValues.ønskerFlerbarnsdager),\n                convertYesOrNoOrUndefinedToBoolean(formValues.samtidigUttak),\n                convertYesOrNoOrUndefinedToBoolean(formValues.erMorForSyk),\n                periodetype,\n                konto as StønadskontoType,\n                !erFarEllerMedmor,\n                erAleneOmOmsorg,\n                annenForelder.kanIkkeOppgis,\n                false, // TODO Midlertidig omsorg,\n                tidsperiode,\n                familiehendelsesdato,\n                termindato,\n                situasjon,\n                stønadskontoer,\n                !morHarRett,\n            ),\n        erMorForSykSkalBesvares: (): boolean =>\n            erMorForForSykSkalBesvares(\n                periodetype,\n                konto as StønadskontoType,\n                tidsperiode,\n                situasjon,\n                erFarEllerMedmor,\n                uttaksdatoer,\n                erFlerbarnssøknad,\n                erAleneOmOmsorg,\n                annenForelder.kanIkkeOppgis,\n                convertYesOrNoOrUndefinedToBoolean(formValues.ønskerFlerbarnsdager),\n                false, // TODO Midlertidig omsorg,\n                familiehendelsesdato,\n                termindato,\n                !morHarRett,\n            ),\n        samtidigUttakSkalBesvares: (): boolean =>\n            samtidigUttakSkalBesvares(\n                periodetype,\n                konto as StønadskontoType,\n                Tidsperioden(tidsperiode).erInnenforFørsteSeksUker(familiehendelsesdato) && situasjon === 'fødsel',\n                periodetype === Periodetype.Uttak && konto === StønadskontoType.ForeldrepengerFørFødsel,\n                erAleneOmOmsorg,\n                erDeltUttakINorge,\n                false, // TODO Midlertidig omsorg,\n                convertYesOrNoOrUndefinedToBoolean(formValues.erMorForSyk),\n                convertYesOrNoOrUndefinedToBoolean(formValues.ønskerFlerbarnsdager),\n                tidsperiode,\n                erFarEllerMedmor,\n                annenForelder.kanIkkeOppgis,\n                familiehendelsesdato,\n                termindato,\n                situasjon,\n                !morHarRett,\n            ),\n        kontoSkalBesvares: (): boolean =>\n            kontoSkalBesvares(periodetype, tidsperiode, stønadskontoer, familiehendelsesdato, erFarEllerMedmor),\n        ønskerFlerbarnsdagerSkalBesvares: (): boolean => {\n            return ønskerFlerbarnsdagerSkalBesvares(\n                periodetype,\n                erFlerbarnssøknad,\n                erFarEllerMedmor,\n                familiehendelsesdato,\n                tidsperiode,\n                konto as StønadskontoType,\n                !morHarRett,\n                antallBarn,\n                erAleneOmOmsorg,\n                erDeltUttakINorge,\n                formValues.uttakRundtFødselÅrsak === '' ? undefined : formValues.uttakRundtFødselÅrsak,\n            );\n        },\n        hvemSkalTaUttakSkalBesvares: (): boolean =>\n            hvemSkalTaUttakSkalBesvares(\n                tidsperiode,\n                erDeltUttakINorge,\n                familiehendelsesdato,\n                erFarEllerMedmor,\n                situasjon,\n            ),\n        graderingSkalBesvares: (): boolean => {\n            return graderingSkalBesvares(\n                periodetype,\n                konto as StønadskontoType,\n                familiehendelsesdato,\n                erFarEllerMedmor,\n                convertYesOrNoOrUndefinedToBoolean(formValues.erMorForSyk),\n                tidsperiode,\n            );\n        },\n        graderingSkalBesvaresPgaWLBUttakRundtFødsel: (): boolean => {\n            return graderingSkalBesvaresPgaWLBUttakRundtFødsel(\n                tidsperiode,\n                periodetype,\n                konto as StønadskontoType,\n                erFarEllerMedmor,\n                familiehendelsesdato,\n                termindato,\n                situasjon,\n            );\n        },\n        overføringsårsakSkalBesvares: (): boolean => {\n            return overføringsårsakSkalBesvares(\n                periodetype,\n                erFarEllerMedmor,\n                konto as StønadskontoType,\n                annenForelder,\n            );\n        },\n        uttakRundtFødselÅrsakSpørsmålSkalBesvares: () => {\n            return uttakRundtFødselÅrsakSpørsmålSkalBesvares(\n                periodetype,\n                konto as StønadskontoType,\n                tidsperiode,\n                erFarEllerMedmor,\n                erAleneOmOmsorg,\n                annenForelder.kanIkkeOppgis,\n                false, //TODO: midlertidig omsorg\n                familiehendelsesdato,\n                termindato,\n                situasjon,\n                !morHarRett,\n            );\n        },\n    };\n};\n\nexport default getUttakSkjemaregler;\n","import {\n    andreAugust2022ReglerGjelder,\n    AnnenForelder,\n    erFarMedmorSinWLBTidsperiodeRundtFødsel,\n    getSisteUttaksdag6UkerEtterFødsel,\n    harAnnenForelderRettIEØS,\n    hasValue,\n    isValidTidsperiode,\n    Periodetype,\n    Situasjon,\n    StønadskontoType,\n    TidsperiodeDate,\n    UttakRundtFødselÅrsak,\n} from '@navikt/fp-common';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport dayjs from 'dayjs';\nimport { PeriodeUttakFormData, PeriodeUttakFormField } from './periodeUttakFormConfig';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\nimport getUttakSkjemaregler, {\n    UttakSkjemaregler,\n    UttakSkjemaReglerProps,\n} from '../../../utils/uttaksskjema/uttakSkjemaregler';\nimport hvemSkalTaUttakSkalBesvares from '../../../utils/uttaksskjema/hvemSkalTaUttakSkalBesvares';\nexport interface PeriodeUttakFormQuestionsPayload {\n    values: PeriodeUttakFormData;\n    regelProps: UttakSkjemaReglerProps;\n    isOpen: boolean;\n}\n\nexport const erSamtidigUttakFarMedmorFørFødselWLB = (\n    values: Partial<PeriodeUttakFormData>,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    erDeltUttak: boolean,\n    situasjon: Situasjon,\n) => {\n    return (\n        andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n        erFarEllerMedmor &&\n        erDeltUttak &&\n        situasjon === 'fødsel' &&\n        hasValue(values.fom) &&\n        dayjs(values.fom).isBefore(familiehendelsesdato, 'day')\n    );\n};\n\nexport const erSamtidigUttakFarMedmorFørFørsteSeksUkerWLB = (\n    values: Partial<PeriodeUttakFormData>,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    erDeltUttak: boolean,\n    situasjon: Situasjon,\n) => {\n    const sisteUttaksdag6UkerEtterFødsel = getSisteUttaksdag6UkerEtterFødsel(familiehendelsesdato);\n\n    return (\n        andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n        erFarEllerMedmor &&\n        erDeltUttak &&\n        situasjon === 'fødsel' &&\n        hasValue(values.fom) &&\n        dayjs(values.fom).isSameOrBefore(sisteUttaksdag6UkerEtterFødsel, 'day')\n    );\n};\n\nexport const skalViseWLBInfoOmSamtidigUttakRundtFødsel = (\n    values: PeriodeUttakFormData,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    erDeltUttak: boolean,\n    situasjon: Situasjon,\n) => {\n    return (\n        values.uttakRundtFødselÅrsak === UttakRundtFødselÅrsak.samtidigUttak ||\n        erSamtidigUttakFarMedmorFørFødselWLB(values, familiehendelsesdato, erFarEllerMedmor, erDeltUttak, situasjon)\n    );\n};\n\nconst skalViseGradering = (\n    regler: UttakSkjemaregler,\n    values: PeriodeUttakFormData,\n    familiehendelsesdato: Date,\n    erDeltUttakINorge: boolean,\n    annenForelder: AnnenForelder,\n): boolean => {\n    if (!isValidTidsperiode({ fom: values.fom, tom: values.tom })) {\n        return false;\n    }\n\n    if (regler.overføringsårsakSkalBesvares() && !hasValue(values.overføringsårsak)) {\n        return false;\n    }\n\n    if (\n        regler.graderingSkalBesvaresPgaWLBUttakRundtFødsel() &&\n        dayjs(values.fom).isSameOrAfter(familiehendelsesdato, 'd') &&\n        (erDeltUttakINorge || harAnnenForelderRettIEØS(annenForelder)) &&\n        !hasValue(values.uttakRundtFødselÅrsak)\n    ) {\n        return false;\n    }\n\n    if (\n        values.konto === '' ||\n        (regler.samtidigUttakSkalBesvares() && values.samtidigUttak === YesOrNo.UNANSWERED) ||\n        (regler.ønskerFlerbarnsdagerSkalBesvares() && values.ønskerFlerbarnsdager === YesOrNo.UNANSWERED) ||\n        (regler.aktivitetskravMorSkalBesvares() &&\n            values.aktivitetskravMor === '' &&\n            values.erMorForSyk !== YesOrNo.YES) ||\n        (regler.erMorForSykSkalBesvares() && values.erMorForSyk !== YesOrNo.YES)\n    ) {\n        return false;\n    }\n\n    return true;\n};\n\nconst skalViseAktivitetskrav = (regler: UttakSkjemaregler, values: PeriodeUttakFormData): boolean => {\n    if (!isValidTidsperiode({ fom: values.fom, tom: values.tom })) {\n        return false;\n    }\n\n    if (regler.erMorForSykSkalBesvares() && values.erMorForSyk !== YesOrNo.NO) {\n        return false;\n    }\n\n    if (regler.ønskerFlerbarnsdagerSkalBesvares() && values.ønskerFlerbarnsdager === YesOrNo.UNANSWERED) {\n        return false;\n    }\n\n    return regler.samtidigUttakSkalBesvares()\n        ? values.samtidigUttak !== YesOrNo.UNANSWERED\n        : values.konto !== undefined;\n};\n\nconst skalViseSamtidigUttak = (regler: UttakSkjemaregler, values: PeriodeUttakFormData): boolean => {\n    if (!isValidTidsperiode({ fom: values.fom, tom: values.tom })) {\n        return false;\n    }\n\n    if (values.konto === StønadskontoType.Foreldrepenger) {\n        return false;\n    }\n\n    if (values.konto === '') {\n        return false;\n    }\n\n    if (regler.ønskerFlerbarnsdagerSkalBesvares() && values.ønskerFlerbarnsdager === YesOrNo.UNANSWERED) {\n        return false;\n    }\n\n    if (regler.erMorForSykSkalBesvares() && values.erMorForSyk === YesOrNo.NO) {\n        return false;\n    }\n\n    return true;\n};\n\nconst skalViseFlerbarnsdager = (\n    values: PeriodeUttakFormData,\n    tidsperiode: TidsperiodeDate,\n    familiehendelsesdato: Date,\n    periodetype: Periodetype,\n    kontoValue: StønadskontoType | '',\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n    situasjon: Situasjon,\n): boolean => {\n    if (!isValidTidsperiode({ fom: values.fom, tom: values.tom })) {\n        return false;\n    }\n    if (\n        kontoValue !== '' &&\n        erFarMedmorSinWLBTidsperiodeRundtFødsel(\n            tidsperiode,\n            familiehendelsesdato,\n            periodetype,\n            kontoValue,\n            erFarEllerMedmor,\n            termindato,\n            situasjon,\n        ) &&\n        values.uttakRundtFødselÅrsak === ''\n    ) {\n        return false;\n    }\n\n    return (\n        values.konto === StønadskontoType.Fellesperiode ||\n        values.konto === StønadskontoType.Fedrekvote ||\n        values.konto === StønadskontoType.Foreldrepenger\n    );\n};\n\nconst skalViseKonto = (\n    values: PeriodeUttakFormData,\n    familiehendelsesdato: Date,\n    erDeltUttakINorge: boolean,\n    erFarEllerMedmor: boolean,\n    situasjon: Situasjon,\n): boolean => {\n    const tidsperiode = { fom: values.fom, tom: values.tom };\n    if (!isValidTidsperiode(tidsperiode)) {\n        return false;\n    }\n    if (\n        hvemSkalTaUttakSkalBesvares(\n            tidsperiode as TidsperiodeDate,\n            erDeltUttakINorge,\n            familiehendelsesdato,\n            erFarEllerMedmor,\n            situasjon,\n        ) &&\n        !hasValue(values.hvemSkalTaUttak)\n    ) {\n        return false;\n    }\n    return true;\n};\n\nconst PeriodeUttakFormConfig: QuestionConfig<PeriodeUttakFormQuestionsPayload, PeriodeUttakFormField> = {\n    [PeriodeUttakFormField.fom]: {\n        isAnswered: ({ values }) => hasValue(values.fom),\n        isIncluded: () => true,\n    },\n    [PeriodeUttakFormField.tom]: {\n        isAnswered: ({ values }) => hasValue(values.tom),\n        isIncluded: () => true,\n    },\n    [PeriodeUttakFormField.hvemSkalTaUttak]: {\n        isAnswered: ({ values }) => hasValue(values.hvemSkalTaUttak),\n        isIncluded: ({ regelProps, values }) => getUttakSkjemaregler(values, regelProps).hvemSkalTaUttakSkalBesvares(),\n        visibilityFilter: ({ values }) => isValidTidsperiode({ fom: values.fom, tom: values.tom }),\n    },\n    [PeriodeUttakFormField.konto]: {\n        isAnswered: ({ values }) => hasValue(values.konto),\n        isIncluded: ({ regelProps, values }) => getUttakSkjemaregler(values, regelProps).kontoSkalBesvares(),\n        visibilityFilter: ({ regelProps, values }) =>\n            skalViseKonto(\n                values,\n                regelProps.familiehendelsesdato,\n                regelProps.erDeltUttakINorge,\n                regelProps.erFarEllerMedmor,\n                regelProps.situasjon,\n            ),\n    },\n    [PeriodeUttakFormField.ønskerFlerbarnsdager]: {\n        isAnswered: ({ values }) => values.ønskerFlerbarnsdager !== YesOrNo.UNANSWERED,\n        isIncluded: ({ values, regelProps }) =>\n            getUttakSkjemaregler(values, regelProps).ønskerFlerbarnsdagerSkalBesvares(),\n        visibilityFilter: ({ values, regelProps }) =>\n            skalViseFlerbarnsdager(\n                values,\n                { fom: values.fom!, tom: values.tom! },\n                regelProps.familiehendelsesdato,\n                regelProps.periodetype,\n                values.konto,\n                regelProps.erFarEllerMedmor,\n                regelProps.termindato,\n                regelProps.situasjon,\n            ),\n    },\n    [PeriodeUttakFormField.erMorForSyk]: {\n        isAnswered: ({ values }) => values.erMorForSyk !== YesOrNo.UNANSWERED,\n        isIncluded: ({ values, regelProps }) => getUttakSkjemaregler(values, regelProps).erMorForSykSkalBesvares(),\n        visibilityFilter: ({ values }) => values.ønskerFlerbarnsdager !== YesOrNo.UNANSWERED || hasValue(values.konto),\n    },\n    [PeriodeUttakFormField.uttakRundtFødselÅrsak]: {\n        isAnswered: ({ values }) => hasValue(values.uttakRundtFødselÅrsak),\n        isIncluded: ({ values, regelProps }) =>\n            getUttakSkjemaregler(values, regelProps).uttakRundtFødselÅrsakSpørsmålSkalBesvares(),\n        visibilityFilter: ({ values }) => values.ønskerFlerbarnsdager !== YesOrNo.UNANSWERED || hasValue(values.konto),\n    },\n    [PeriodeUttakFormField.samtidigUttak]: {\n        isAnswered: ({ values }) => values.samtidigUttak !== YesOrNo.UNANSWERED,\n        isIncluded: ({ values, regelProps }) => getUttakSkjemaregler(values, regelProps).samtidigUttakSkalBesvares(),\n        visibilityFilter: ({ values, regelProps }) =>\n            skalViseSamtidigUttak(getUttakSkjemaregler(values, regelProps), values),\n    },\n    [PeriodeUttakFormField.samtidigUttakProsent]: {\n        isAnswered: ({ values }) => hasValue(values.samtidigUttakProsent),\n        isIncluded: ({ values, regelProps }) => getUttakSkjemaregler(values, regelProps).samtidigUttakSkalBesvares(),\n        visibilityFilter: ({ values }) => values.samtidigUttak === YesOrNo.YES,\n    },\n    [PeriodeUttakFormField.skalHaGradering]: {\n        isAnswered: ({ values }) => values.skalHaGradering !== YesOrNo.UNANSWERED,\n        isIncluded: ({ values, regelProps }) => getUttakSkjemaregler(values, regelProps).graderingSkalBesvares(),\n        visibilityFilter: ({ values, regelProps }) =>\n            skalViseGradering(\n                getUttakSkjemaregler(values, regelProps),\n                values,\n                regelProps.familiehendelsesdato,\n                regelProps.erDeltUttakINorge,\n                regelProps.annenForelder,\n            ),\n    },\n    [PeriodeUttakFormField.stillingsprosent]: {\n        isAnswered: ({ values }) => hasValue(values.stillingsprosent),\n        isIncluded: ({ values, regelProps }) => getUttakSkjemaregler(values, regelProps).graderingSkalBesvares(),\n        visibilityFilter: ({ values }) => values.skalHaGradering === YesOrNo.YES,\n    },\n    [PeriodeUttakFormField.arbeidsformer]: {\n        isAnswered: ({ values }) => values.arbeidsformer.length > 0,\n        isIncluded: ({ values, regelProps }) => getUttakSkjemaregler(values, regelProps).graderingSkalBesvares(),\n        visibilityFilter: ({ values }) => values.skalHaGradering === YesOrNo.YES,\n    },\n    [PeriodeUttakFormField.overføringsårsak]: {\n        isAnswered: ({ values }) => hasValue(values.overføringsårsak),\n        isIncluded: ({ values, regelProps }) => getUttakSkjemaregler(values, regelProps).overføringsårsakSkalBesvares(),\n        visibilityFilter: ({ values }) => hasValue(values.konto),\n    },\n    [PeriodeUttakFormField.overføringsdokumentasjon]: {\n        isAnswered: ({ values }) => values.overføringsdokumentasjon.length >= 0,\n        isIncluded: ({ values, regelProps }) => getUttakSkjemaregler(values, regelProps).overføringsårsakSkalBesvares(),\n        visibilityFilter: ({ values }) => hasValue(values.overføringsårsak),\n    },\n    [PeriodeUttakFormField.aktivitetskravMor]: {\n        isAnswered: ({ values }) => hasValue(values.aktivitetskravMor),\n        isIncluded: ({ values, regelProps }) =>\n            getUttakSkjemaregler(values, regelProps).aktivitetskravMorSkalBesvares(),\n        visibilityFilter: ({ values, regelProps }) =>\n            skalViseAktivitetskrav(getUttakSkjemaregler(values, regelProps), values),\n    },\n    [PeriodeUttakFormField.aktivitetskravMorDokumentasjon]: {\n        isAnswered: ({ values }) => values.aktivitetskravMorDokumentasjon.length >= 0,\n        isIncluded: ({ values, regelProps, isOpen }) =>\n            getUttakSkjemaregler(values, regelProps).aktivitetskravMorSkalBesvares() && isOpen,\n        visibilityFilter: ({ values, regelProps }) =>\n            skalViseAktivitetskrav(getUttakSkjemaregler(values, regelProps), values),\n    },\n};\n\nexport const periodeUttakFormQuestionsConfig = Questions<PeriodeUttakFormQuestionsPayload, PeriodeUttakFormField>(\n    PeriodeUttakFormConfig,\n);\n","import {\n    Attachment,\n    AttachmentType,\n    Block,\n    FormikFileUploader,\n    MorsAktivitet,\n    NavnPåForeldre,\n    Skjemanummer,\n    getNavnGenitivEierform,\n    hasValue,\n    intlUtils,\n    links,\n} from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport { PeriodeUtsettelseFormField } from '../../periode-utsettelse-form/periodeUtsettelseFormConfig';\nimport { PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\nimport { BodyShort, GuidePanel } from '@navikt/ds-react';\n\ninterface Props {\n    fieldName: PeriodeUttakFormField | PeriodeUtsettelseFormField;\n    vedleggFieldName:\n        | PeriodeUttakFormField.aktivitetskravMorDokumentasjon\n        | PeriodeUtsettelseFormField.morsAktivitetIPeriodenDokumentasjon;\n    FormComponents: any;\n    navnPåForeldre: NavnPåForeldre;\n    aktivitetskravMorValue: MorsAktivitet | '';\n    aktivitetskravVedlegg: Attachment[];\n    isOpen: boolean;\n    saveAttachment: (vedlegg: Attachment) => void;\n}\n\nconst getVeilederTekst = (\n    intl: IntlShape,\n    morsAktivitetIPerioden: MorsAktivitet | '',\n    navnPåForeldre: NavnPåForeldre,\n) => {\n    if (morsAktivitetIPerioden === MorsAktivitet.Arbeid) {\n        return (\n            <BodyShort>\n                <FormattedMessage\n                    id=\"uttaksplan.morsAktivitet.veileder.arbeid\"\n                    values={{ navnMor: getNavnGenitivEierform(navnPåForeldre.mor, intl.locale) }}\n                />\n            </BodyShort>\n        );\n    } else if (morsAktivitetIPerioden === MorsAktivitet.ArbeidOgUtdanning) {\n        const listData = [\n            intlUtils(intl, 'uttaksplan.morsAktivitet.veileder.arbeidOgUtdanning.punkt1'),\n            intlUtils(intl, 'uttaksplan.morsAktivitet.veileder.arbeidOgUtdanning.punkt2'),\n            intlUtils(intl, 'uttaksplan.morsAktivitet.veileder.arbeidOgUtdanning.punkt3'),\n            intlUtils(intl, 'uttaksplan.morsAktivitet.veileder.arbeidOgUtdanning.punkt4'),\n        ];\n\n        return (\n            <>\n                <BodyShort>\n                    <FormattedMessage\n                        id=\"uttaksplan.morsAktivitet.veileder.arbeidOgUtdanning\"\n                        values={{ navnMor: navnPåForeldre.mor }}\n                    />\n                </BodyShort>\n                <ul>\n                    {listData.map((listItem, index) => (\n                        <li key={`arbeidOgUtdanning${index}`}>{listItem}</li>\n                    ))}\n                </ul>\n            </>\n        );\n    } else if (\n        morsAktivitetIPerioden === MorsAktivitet.Innlagt ||\n        morsAktivitetIPerioden === MorsAktivitet.TrengerHjelp\n    ) {\n        return (\n            <BodyShort>\n                <FormattedMessage\n                    id=\"uttaksplan.morsAktivitet.veileder.informasjonVedSykdomAnnenForelder\"\n                    values={{ navn: navnPåForeldre.mor }}\n                />\n            </BodyShort>\n        );\n    } else if (morsAktivitetIPerioden === MorsAktivitet.Introduksjonsprogrammet) {\n        return (\n            <BodyShort>\n                <FormattedMessage\n                    id=\"uttaksplan.morsAktivitet.veileder.introduksjonsprogrammet\"\n                    values={{ navnMor: navnPåForeldre.mor }}\n                />\n            </BodyShort>\n        );\n    } else if (morsAktivitetIPerioden === MorsAktivitet.Kvalifiseringsprogrammet) {\n        return (\n            <BodyShort>\n                <FormattedMessage\n                    id=\"uttaksplan.morsAktivitet.veileder.kvalifiseringsprogrammet\"\n                    values={{ navnMor: navnPåForeldre.mor }}\n                />\n            </BodyShort>\n        );\n    } else if (morsAktivitetIPerioden === MorsAktivitet.Utdanning) {\n        const listData = [\n            intlUtils(intl, 'uttaksplan.morsAktivitet.veileder.utdanning.punkt1'),\n            intlUtils(intl, 'uttaksplan.morsAktivitet.veileder.utdanning.punkt2'),\n            intlUtils(intl, 'uttaksplan.morsAktivitet.veileder.utdanning.punkt3'),\n            intlUtils(intl, 'uttaksplan.morsAktivitet.veileder.utdanning.punkt4'),\n        ];\n\n        return (\n            <>\n                <BodyShort>\n                    <FormattedMessage\n                        id=\"uttaksplan.morsAktivitet.veileder.utdanning\"\n                        values={{ navnMor: navnPåForeldre.mor }}\n                    />\n                </BodyShort>\n                <ul>\n                    {listData.map((listItem, index) => (\n                        <li key={`trengerhjelp${index}`}>{listItem}</li>\n                    ))}\n                </ul>\n            </>\n        );\n    } else {\n        return '';\n    }\n};\n\nconst renderOptions = (intl: IntlShape) => {\n    return Object.keys(MorsAktivitet)\n        .filter(\n            (aktivitetsid) =>\n                (MorsAktivitet as any)[aktivitetsid] !== MorsAktivitet.Uføre &&\n                (MorsAktivitet as any)[aktivitetsid] !== MorsAktivitet.IkkeOppgitt,\n        )\n        .map((aktivitetsid) => (\n            <option value={(MorsAktivitet as any)[aktivitetsid]} key={(MorsAktivitet as any)[aktivitetsid]}>\n                {intlUtils(intl, `uttaksplan.morsAktivitet.${aktivitetsid}`)}\n            </option>\n        ));\n};\n\nexport const getMorsAktivitetSkjemanummer = (morsAktivitet?: MorsAktivitet): Skjemanummer => {\n    switch (morsAktivitet) {\n        case MorsAktivitet.Innlagt:\n            return Skjemanummer.DOK_INNLEGGELSE;\n        case MorsAktivitet.Kvalifiseringsprogrammet:\n            return Skjemanummer.BEKREFTELSE_DELTAR_KVALIFISERINGSPROGRAM;\n        case MorsAktivitet.Introduksjonsprogrammet:\n            return Skjemanummer.DOK_DELTAKELSE_I_INTRODUKSJONSPROGRAMMET;\n        case MorsAktivitet.ArbeidOgUtdanning:\n        case MorsAktivitet.Arbeid:\n        case MorsAktivitet.TrengerHjelp:\n            return Skjemanummer.DOK_MORS_UTDANNING_ARBEID_SYKDOM;\n        case MorsAktivitet.Utdanning:\n            return Skjemanummer.BEKREFTELSE_FRA_STUDIESTED;\n        default:\n            return Skjemanummer.ANNET;\n    }\n};\n\nconst AktivitetskravSpørsmål: FunctionComponent<Props> = ({\n    fieldName,\n    vedleggFieldName,\n    navnPåForeldre,\n    aktivitetskravMorValue,\n    aktivitetskravVedlegg,\n    FormComponents,\n    isOpen,\n    saveAttachment,\n}) => {\n    const intl = useIntl();\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <FormComponents.Select\n                    name={fieldName}\n                    label={intlUtils(intl, 'uttaksplan.aktivitetskrav', { navnMor: navnPåForeldre.mor })}\n                    validate={(value: MorsAktivitet | '') => {\n                        if (!hasValue(value)) {\n                            return intlUtils(intl, 'uttaksplan.validering.aktivitetskrav');\n                        }\n\n                        return undefined;\n                    }}\n                >\n                    <option value=\"\" />\n                    {renderOptions(intl)}\n                </FormComponents.Select>\n            </Block>\n            <Block padBottom=\"l\" visible={hasValue(aktivitetskravMorValue)}>\n                <GuidePanel>\n                    {getVeilederTekst(intl, aktivitetskravMorValue, navnPåForeldre)}\n                    <BodyShort>\n                        <FormattedMessage\n                            id=\"uttaksplan.morsAktivitet.lesmer\"\n                            values={{\n                                a: (msg: any) => (\n                                    <a\n                                        href={links.morsAktivitetskrav}\n                                        className=\"lenke\"\n                                        rel=\"noreferrer\"\n                                        target=\"_blank\"\n                                    >\n                                        {msg}\n                                    </a>\n                                ),\n                            }}\n                        />\n                    </BodyShort>\n                </GuidePanel>\n            </Block>\n\n            <Block padBottom=\"l\" visible={hasValue(aktivitetskravMorValue) && isOpen}>\n                <FormikFileUploader\n                    legend=\"Dokumentasjon for mors aktivitet\"\n                    label=\"Last opp dokumentasjon for mors aktivitet\"\n                    name={vedleggFieldName}\n                    attachmentType={AttachmentType.MORS_AKTIVITET_DOKUMENTASJON}\n                    skjemanummer={getMorsAktivitetSkjemanummer(aktivitetskravMorValue as MorsAktivitet)}\n                    attachments={aktivitetskravVedlegg}\n                    saveAttachment={saveAttachment}\n                />\n            </Block>\n        </>\n    );\n};\n\nexport default AktivitetskravSpørsmål;\n","import {\n    Attachment,\n    AttachmentType,\n    Forelder,\n    MorsAktivitet,\n    Situasjon,\n    Skjemanummer,\n    StønadskontoType,\n    OverføringÅrsakType,\n    hasValue,\n    Periode,\n    isUttaksperiode,\n    isOverføringsperiode,\n    isOppholdsperiode,\n    getStønadskontoFromOppholdsårsak,\n    Arbeidsform,\n    trimNumberValue,\n    Periodetype,\n    Overføringsperiode,\n    Oppholdsperiode,\n    getOppholdsÅrsakFromStønadskonto,\n    Uttaksperiode,\n    convertBooleanOrUndefinedToYesOrNo,\n    convertYesOrNoOrUndefinedToBoolean,\n    lagSendSenereDokumentNårIngenAndreFinnes,\n    getMorsAktivitet,\n    UttakRundtFødselÅrsak,\n} from '@navikt/fp-common';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport dayjs from 'dayjs';\nimport { PeriodeUttakFormData, PeriodeUttakFormField } from './periodeUttakFormConfig';\nimport {\n    erSamtidigUttakFarMedmorFørFødselWLB,\n    erSamtidigUttakFarMedmorFørFørsteSeksUkerWLB,\n} from './periodeUttakFormQuestionsConfig';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\nimport { getMorsAktivitetSkjemanummer } from '../spørsmål/aktivitetskrav/AktivitetskravSpørsmål';\n\nconst getInitialKonto = (\n    erDeltUttak: boolean,\n    erMorUfør: boolean,\n    periodenStarterFørFamdato: boolean,\n    erFarEllerMedmor: boolean,\n) => {\n    if (erDeltUttak) {\n        if (periodenStarterFørFamdato && erFarEllerMedmor) {\n            return StønadskontoType.Fedrekvote;\n        }\n\n        return '';\n    }\n\n    if (erFarEllerMedmor && periodenStarterFørFamdato) {\n        return StønadskontoType.AktivitetsfriKvote;\n    }\n\n    if (erMorUfør) {\n        return '';\n    }\n\n    return StønadskontoType.Foreldrepenger;\n};\n\nconst getHvemSkalTaUttak = (\n    erDeltUttak: boolean,\n    forelder: Forelder,\n    periodenStarterFørFamdato: boolean,\n    erFarEllerMedmor: boolean,\n    annenForelderHarRettIEØS: boolean,\n) => {\n    if (erDeltUttak) {\n        if ((periodenStarterFørFamdato || annenForelderHarRettIEØS) && erFarEllerMedmor) {\n            return Forelder.farMedmor;\n        }\n        if (annenForelderHarRettIEØS) {\n            return erFarEllerMedmor ? Forelder.farMedmor : Forelder.mor;\n        }\n\n        return '';\n    }\n\n    return forelder;\n};\n\nconst getInitialValues = (\n    erDeltUttak: boolean,\n    forelder: Forelder,\n    erMorUfør: boolean,\n    familiehendelsesdato: Date,\n    startdatoPeriode: Date | undefined,\n    erFarEllerMedmor: boolean,\n    annenForelderHarRettIEØS: boolean,\n): PeriodeUttakFormData => {\n    const periodenStarterFørFamdato = startdatoPeriode\n        ? dayjs(startdatoPeriode).isBefore(familiehendelsesdato, 'day')\n        : false;\n    const hvemSkalTaUttak = getHvemSkalTaUttak(\n        erDeltUttak,\n        forelder,\n        periodenStarterFørFamdato,\n        erFarEllerMedmor,\n        annenForelderHarRettIEØS,\n    );\n    const konto = getInitialKonto(erDeltUttak, erMorUfør, periodenStarterFørFamdato, erFarEllerMedmor);\n\n    return {\n        [PeriodeUttakFormField.fom]: undefined,\n        [PeriodeUttakFormField.tom]: undefined,\n        [PeriodeUttakFormField.konto]: konto,\n        [PeriodeUttakFormField.samtidigUttak]: YesOrNo.UNANSWERED,\n        [PeriodeUttakFormField.aktivitetskravMor]: '',\n        [PeriodeUttakFormField.aktivitetskravMorDokumentasjon]: [],\n        [PeriodeUttakFormField.overføringsårsak]: '',\n        [PeriodeUttakFormField.overføringsdokumentasjon]: [],\n        [PeriodeUttakFormField.skalHaGradering]: YesOrNo.UNANSWERED,\n        [PeriodeUttakFormField.stillingsprosent]: '',\n        [PeriodeUttakFormField.arbeidsformer]: '',\n        [PeriodeUttakFormField.erMorForSyk]: YesOrNo.UNANSWERED,\n        [PeriodeUttakFormField.erMorForSykDokumentasjon]: [],\n        [PeriodeUttakFormField.uttakRundtFødselÅrsak]: '',\n        [PeriodeUttakFormField.samtidigUttakProsent]: '',\n        [PeriodeUttakFormField.hvemSkalTaUttak]: hvemSkalTaUttak,\n        [PeriodeUttakFormField.ønskerFlerbarnsdager]: YesOrNo.UNANSWERED,\n    };\n};\n\nexport const cleanPeriodeUttakFormData = (\n    values: PeriodeUttakFormData,\n    visibility: QuestionVisibility<PeriodeUttakFormField, undefined>,\n    erDeltUttak: boolean,\n    forelder: Forelder,\n    erMorUfør: boolean,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    annenForelderHarRettIEØS: boolean,\n): PeriodeUttakFormData => {\n    const initialValues = getInitialValues(\n        erDeltUttak,\n        forelder,\n        erMorUfør,\n        familiehendelsesdato,\n        values.fom,\n        erFarEllerMedmor,\n        annenForelderHarRettIEØS,\n    );\n\n    const cleanedData: PeriodeUttakFormData = {\n        fom: values.fom,\n        tom: values.tom,\n        hvemSkalTaUttak: values.hvemSkalTaUttak,\n        aktivitetskravMor: visibility.isVisible(PeriodeUttakFormField.aktivitetskravMor)\n            ? values.aktivitetskravMor\n            : '',\n        aktivitetskravMorDokumentasjon: visibility.isVisible(PeriodeUttakFormField.aktivitetskravMorDokumentasjon)\n            ? values.aktivitetskravMorDokumentasjon\n            : [],\n        erMorForSyk: visibility.isVisible(PeriodeUttakFormField.erMorForSyk)\n            ? values.erMorForSyk\n            : initialValues.erMorForSyk,\n        erMorForSykDokumentasjon:\n            visibility.isVisible(PeriodeUttakFormField.erMorForSyk) ||\n            values.uttakRundtFødselÅrsak === UttakRundtFødselÅrsak.morErForSyk\n                ? values.erMorForSykDokumentasjon\n                : initialValues.erMorForSykDokumentasjon,\n        uttakRundtFødselÅrsak: visibility.isVisible(PeriodeUttakFormField.uttakRundtFødselÅrsak)\n            ? values.uttakRundtFødselÅrsak\n            : initialValues.uttakRundtFødselÅrsak,\n        arbeidsformer: visibility.isVisible(PeriodeUttakFormField.arbeidsformer) ? values.arbeidsformer : '',\n        konto: values.konto,\n        overføringsdokumentasjon: visibility.isVisible(PeriodeUttakFormField.overføringsdokumentasjon)\n            ? values.overføringsdokumentasjon\n            : [],\n        overføringsårsak: visibility.isVisible(PeriodeUttakFormField.overføringsårsak)\n            ? values.overføringsårsak\n            : initialValues.overføringsårsak,\n        samtidigUttak: visibility.isVisible(PeriodeUttakFormField.samtidigUttak)\n            ? values.samtidigUttak\n            : initialValues.samtidigUttak,\n        samtidigUttakProsent: visibility.isVisible(PeriodeUttakFormField.samtidigUttakProsent)\n            ? values.samtidigUttakProsent\n            : initialValues.samtidigUttakProsent,\n        skalHaGradering: visibility.isVisible(PeriodeUttakFormField.skalHaGradering)\n            ? values.skalHaGradering\n            : initialValues.skalHaGradering,\n        stillingsprosent: visibility.isVisible(PeriodeUttakFormField.stillingsprosent)\n            ? values.stillingsprosent\n            : initialValues.stillingsprosent,\n        ønskerFlerbarnsdager: visibility.isVisible(PeriodeUttakFormField.ønskerFlerbarnsdager)\n            ? values.ønskerFlerbarnsdager\n            : initialValues.ønskerFlerbarnsdager,\n    };\n\n    return cleanedData;\n};\n\nconst getInitialÅrsakForUttakRundtFødsel = (\n    erMorForSyk: boolean | undefined,\n    ønskerSamtidigUttak: boolean | undefined,\n    erDeltUttak: boolean,\n): UttakRundtFødselÅrsak | undefined => {\n    if (!erDeltUttak) {\n        return undefined;\n    }\n    if (erMorForSyk) {\n        return UttakRundtFødselÅrsak.morErForSyk;\n    }\n    if (ønskerSamtidigUttak) {\n        return UttakRundtFødselÅrsak.samtidigUttak;\n    }\n    return undefined;\n};\n\nexport const getPeriodeUttakFormInitialValues = (\n    periode: Periode,\n    erDeltUttak: boolean,\n    forelder: Forelder,\n    erMorUfør: boolean,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    annenForelderHarRettIEØS: boolean,\n): PeriodeUttakFormData => {\n    const initialValues = getInitialValues(\n        erDeltUttak,\n        forelder,\n        erMorUfør,\n        familiehendelsesdato,\n        periode.tidsperiode.fom,\n        erFarEllerMedmor,\n        annenForelderHarRettIEØS,\n    );\n\n    if (periode !== undefined) {\n        if (isUttaksperiode(periode)) {\n            return {\n                ...initialValues,\n                fom: periode.tidsperiode.fom,\n                tom: periode.tidsperiode.tom,\n                aktivitetskravMor: periode.morsAktivitetIPerioden || '',\n                aktivitetskravMorDokumentasjon: periode.vedlegg || [],\n                erMorForSyk: convertBooleanOrUndefinedToYesOrNo(periode.erMorForSyk),\n                erMorForSykDokumentasjon: periode.vedlegg || [],\n                hvemSkalTaUttak: periode.forelder || initialValues.hvemSkalTaUttak,\n                arbeidsformer:\n                    periode.arbeidsformer && periode.arbeidsformer.length > 0\n                        ? getFrilansSNEllerOrgnr(periode.arbeidsformer, periode.orgnumre)\n                        : '',\n                konto: periode.konto || initialValues.konto,\n                samtidigUttak: convertBooleanOrUndefinedToYesOrNo(periode.ønskerSamtidigUttak),\n                samtidigUttakProsent: periode.samtidigUttakProsent || '',\n                skalHaGradering: convertBooleanOrUndefinedToYesOrNo(periode.gradert),\n                stillingsprosent: periode.stillingsprosent || '',\n                ønskerFlerbarnsdager: convertBooleanOrUndefinedToYesOrNo(periode.ønskerFlerbarnsdager),\n                uttakRundtFødselÅrsak:\n                    getInitialÅrsakForUttakRundtFødsel(periode.erMorForSyk, periode.ønskerSamtidigUttak, erDeltUttak) ||\n                    initialValues.uttakRundtFødselÅrsak,\n            };\n        }\n\n        if (isOverføringsperiode(periode)) {\n            return {\n                ...initialValues,\n                hvemSkalTaUttak: periode.forelder,\n                konto: periode.konto,\n                fom: periode.tidsperiode.fom,\n                tom: periode.tidsperiode.tom,\n                overføringsårsak: periode.årsak,\n                overføringsdokumentasjon: periode.vedlegg || [],\n            };\n        }\n\n        if (isOppholdsperiode(periode)) {\n            return {\n                ...initialValues,\n                hvemSkalTaUttak: periode.forelder,\n                konto: getStønadskontoFromOppholdsårsak(periode.årsak),\n                fom: periode.tidsperiode.fom,\n                tom: periode.tidsperiode.tom,\n            };\n        }\n\n        return {\n            ...initialValues,\n            fom: periode.tidsperiode.fom,\n            tom: periode.tidsperiode.tom,\n        };\n    }\n\n    return {\n        ...initialValues,\n    };\n};\n\nconst getFrilansSNEllerOrgnr = (arbeidsformer: Arbeidsform[], orgnumre?: string[]): Arbeidsform => {\n    if (arbeidsformer.includes(Arbeidsform.frilans) || arbeidsformer.includes(Arbeidsform.selvstendignæringsdrivende)) {\n        return arbeidsformer[0];\n    }\n\n    return orgnumre![0] as Arbeidsform;\n};\n\nconst getArbeidsform = (arbeidsformer: Arbeidsform[]): Arbeidsform[] => {\n    return arbeidsformer.includes(Arbeidsform.frilans) || arbeidsformer.includes(Arbeidsform.selvstendignæringsdrivende)\n        ? arbeidsformer\n        : [Arbeidsform.arbeidstaker];\n};\n\nconst getOrgnummer = (arbeidsformer: Arbeidsform[]): string[] => {\n    return arbeidsformer.includes(Arbeidsform.frilans) || arbeidsformer.includes(Arbeidsform.selvstendignæringsdrivende)\n        ? []\n        : arbeidsformer;\n};\n\nconst getErArbeidstaker = (arbeidsformer: Arbeidsform[]): boolean => {\n    return (\n        arbeidsformer.includes(Arbeidsform.frilans) || arbeidsformer.includes(Arbeidsform.selvstendignæringsdrivende)\n    );\n};\n\nconst getSamtidigUttaksProsentWLB = (\n    ønskerGradering: boolean | undefined,\n    dekningsgrad: string | undefined,\n): string => {\n    return ønskerGradering && dekningsgrad !== undefined\n        ? (100 - parseFloat(trimNumberValue(dekningsgrad))).toString()\n        : '100';\n};\n\nconst velgVedleggSomSkalBrukes = (\n    aktivitetskravMorDokumentasjon: Attachment[],\n    erMorForSykDokumentasjon: Attachment[],\n): Attachment[] => {\n    if (aktivitetskravMorDokumentasjon.length > 0) {\n        return aktivitetskravMorDokumentasjon;\n    }\n\n    return erMorForSykDokumentasjon;\n};\n\nconst skalVedleggPåkreves = (\n    morsAktivitetIPerioden: '' | MorsAktivitet | undefined,\n    erMorForSyk: boolean,\n    uttakRundtFødselÅrsak: UttakRundtFødselÅrsak | '' | undefined,\n): boolean => {\n    if (\n        hasValue(morsAktivitetIPerioden) ||\n        erMorForSyk ||\n        (uttakRundtFødselÅrsak !== undefined && uttakRundtFødselÅrsak === UttakRundtFødselÅrsak.morErForSyk)\n    ) {\n        return true;\n    }\n\n    return false;\n};\n\nconst getKontoVerdi = (\n    samtidigWLBUttakFørFødselFarMedmor: boolean,\n    erFarEllerMedmor: boolean,\n    erDeltUttak: boolean,\n    startDato: Date,\n    inputKonto: StønadskontoType,\n    familiehendelsesdato: Date,\n): StønadskontoType => {\n    if (samtidigWLBUttakFørFødselFarMedmor) {\n        return StønadskontoType.Fedrekvote;\n    }\n    if (!erDeltUttak && erFarEllerMedmor && dayjs(startDato).isBefore(familiehendelsesdato, 'day')) {\n        return StønadskontoType.AktivitetsfriKvote;\n    }\n\n    return inputKonto;\n};\n\nexport const mapPeriodeUttakFormToPeriode = (\n    values: Partial<PeriodeUttakFormData>,\n    id: string,\n    type: Periodetype,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    erDeltUttak: boolean,\n    situasjon: Situasjon,\n): Periode => {\n    if (type === Periodetype.Overføring) {\n        const overføringTrengerDokumentasjon =\n            values.overføringsårsak !== OverføringÅrsakType.aleneomsorg &&\n            values.overføringsårsak !== OverføringÅrsakType.ikkeRettAnnenForelder;\n        const vedlegg = overføringTrengerDokumentasjon\n            ? lagSendSenereDokumentNårIngenAndreFinnes(\n                  values.overføringsdokumentasjon!,\n                  AttachmentType.OVERFØRING_KVOTE,\n                  Skjemanummer.DOK_OVERFØRING_FOR_SYK,\n              )\n            : undefined;\n        const periode: Overføringsperiode = {\n            id,\n            type,\n            forelder: values.hvemSkalTaUttak as Forelder,\n            konto: values.konto as StønadskontoType,\n            tidsperiode: {\n                fom: values.fom!,\n                tom: values.tom!,\n            },\n            årsak: values.overføringsårsak as OverføringÅrsakType,\n            vedlegg,\n        };\n\n        return periode;\n    }\n\n    if (type === Periodetype.Opphold) {\n        const periode: Oppholdsperiode = {\n            id,\n            type,\n            forelder: values.hvemSkalTaUttak as Forelder,\n            årsak: getOppholdsÅrsakFromStønadskonto(values.konto as StønadskontoType)!,\n            tidsperiode: {\n                fom: values.fom!,\n                tom: values.tom!,\n            },\n        };\n\n        return periode;\n    }\n    const samtidigWLBUttakFørFødselFarMedmor = erSamtidigUttakFarMedmorFørFødselWLB(\n        values,\n        familiehendelsesdato,\n        erFarEllerMedmor,\n        erDeltUttak,\n        situasjon,\n    );\n    const samtidigWLBUttakFørFørsteSeksUkerFarMedmor = erSamtidigUttakFarMedmorFørFørsteSeksUkerWLB(\n        values,\n        familiehendelsesdato,\n        erFarEllerMedmor,\n        erDeltUttak,\n        situasjon,\n    );\n    const attachmentType = hasValue(values.aktivitetskravMor)\n        ? AttachmentType.MORS_AKTIVITET_DOKUMENTASJON\n        : AttachmentType.UTSETTELSE_SYKDOM;\n\n    const skjemanummer = hasValue(values.aktivitetskravMor)\n        ? getMorsAktivitetSkjemanummer(values.aktivitetskravMor as MorsAktivitet)\n        : Skjemanummer.DOK_MORS_UTDANNING_ARBEID_SYKDOM;\n\n    const relevantVedlegg = velgVedleggSomSkalBrukes(\n        values.aktivitetskravMorDokumentasjon!,\n        values.erMorForSykDokumentasjon!,\n    );\n\n    const morErForSyk =\n        hasValue(values.uttakRundtFødselÅrsak) && values.uttakRundtFødselÅrsak === UttakRundtFødselÅrsak.morErForSyk\n            ? true\n            : convertYesOrNoOrUndefinedToBoolean(values.erMorForSyk);\n\n    const erSamtidigUttak =\n        values.uttakRundtFødselÅrsak === UttakRundtFødselÅrsak.samtidigUttak || samtidigWLBUttakFørFødselFarMedmor\n            ? true\n            : convertYesOrNoOrUndefinedToBoolean(values.samtidigUttak);\n\n    const samtidigUttakProsentInputVerdi = hasValue(values.samtidigUttakProsent)\n        ? trimNumberValue(values.samtidigUttakProsent!)\n        : undefined;\n\n    const samtidigUttakProsentVerdi =\n        values.uttakRundtFødselÅrsak === UttakRundtFødselÅrsak.samtidigUttak || samtidigWLBUttakFørFødselFarMedmor\n            ? getSamtidigUttaksProsentWLB(\n                  convertYesOrNoOrUndefinedToBoolean(values.skalHaGradering),\n                  values.stillingsprosent,\n              )\n            : samtidigUttakProsentInputVerdi;\n\n    const forelderVerdi = samtidigWLBUttakFørFørsteSeksUkerFarMedmor\n        ? Forelder.farMedmor\n        : (values.hvemSkalTaUttak as Forelder);\n\n    const kontoVerdi = getKontoVerdi(\n        samtidigWLBUttakFørFødselFarMedmor,\n        erFarEllerMedmor,\n        erDeltUttak,\n        values.fom!,\n        values.konto as StønadskontoType,\n        familiehendelsesdato,\n    );\n\n    const periode: Uttaksperiode = {\n        id,\n        forelder: forelderVerdi,\n        konto: kontoVerdi,\n        tidsperiode: {\n            fom: values.fom!,\n            tom: values.tom!,\n        },\n        type: Periodetype.Uttak,\n        arbeidsformer: hasValue(values.arbeidsformer)\n            ? getArbeidsform([values.arbeidsformer as Arbeidsform])\n            : undefined,\n        morsAktivitetIPerioden: getMorsAktivitet(\n            values.aktivitetskravMor,\n            convertYesOrNoOrUndefinedToBoolean(values.erMorForSyk),\n        ),\n\n        erArbeidstaker: getErArbeidstaker(\n            hasValue(values.arbeidsformer) ? getArbeidsform([values.arbeidsformer as Arbeidsform]) : [],\n        ),\n        erMorForSyk: morErForSyk,\n        gradert: convertYesOrNoOrUndefinedToBoolean(values.skalHaGradering),\n        harIkkeAktivitetskrav: values.konto === StønadskontoType.AktivitetsfriKvote ? true : undefined,\n        orgnumre: getOrgnummer(hasValue(values.arbeidsformer) ? [values.arbeidsformer as Arbeidsform] : []),\n        stillingsprosent: hasValue(values.stillingsprosent) ? trimNumberValue(values.stillingsprosent!) : undefined,\n        ønskerFlerbarnsdager: convertYesOrNoOrUndefinedToBoolean(values.ønskerFlerbarnsdager),\n        ønskerSamtidigUttak: erSamtidigUttak,\n        samtidigUttakProsent: samtidigUttakProsentVerdi,\n        vedlegg: skalVedleggPåkreves(\n            values.aktivitetskravMor,\n            convertYesOrNoOrUndefinedToBoolean(values.erMorForSyk) || false,\n            values.uttakRundtFødselÅrsak,\n        )\n            ? lagSendSenereDokumentNårIngenAndreFinnes(relevantVedlegg, attachmentType, skjemanummer)\n            : [],\n    };\n\n    return periode;\n};\n","import { IntlShape, useIntl } from 'react-intl';\nimport { formatDate, Block, intlUtils, TidsperiodeDate, bemUtils } from '@navikt/fp-common';\nimport { BodyShort, Label, Link } from '@navikt/ds-react';\n\nimport './tidsperiodeDisplay.less';\n\ninterface Props {\n    tidsperiode: Partial<TidsperiodeDate> | undefined;\n    toggleVisTidsperiode: () => void;\n}\n\nconst bem = bemUtils('tidsperiodeDisplay');\n\nconst formaterTidsperiodeDato = (dato: Date | undefined) => {\n    if (dato) {\n        return formatDate(dato);\n    }\n\n    return 'Ingen valgt dato';\n};\n\nconst renderTidsperiode = (tidsperiode: Partial<TidsperiodeDate> | undefined, intl: IntlShape) => {\n    if (tidsperiode) {\n        return (\n            <div className={bem.element('dato-container')}>\n                <div className={bem.element('dato')}>\n                    <Label>{`${intlUtils(intl, 'fraogmed')}:`}</Label>\n                    <BodyShort>{formaterTidsperiodeDato(tidsperiode.fom)}</BodyShort>\n                </div>\n                <div className={bem.element('dato')}>\n                    <Label>{`${intlUtils(intl, 'tilogmed')}:`}</Label>\n                    <BodyShort>{formaterTidsperiodeDato(tidsperiode.tom)}</BodyShort>\n                </div>\n            </div>\n        );\n    }\n\n    return 'Ingen valgt tidsperiode';\n};\n\nconst TidsperiodeDisplay: React.FunctionComponent<Props> = ({ tidsperiode, toggleVisTidsperiode }) => {\n    const intl = useIntl();\n\n    return (\n        <Block padBottom=\"l\">\n            <Label>Tidsrom</Label>\n            <div className={bem.block}>\n                {renderTidsperiode(tidsperiode, intl)}\n                <Link\n                    href=\"#\"\n                    onClick={(e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        toggleVisTidsperiode();\n                    }}\n                >\n                    <BodyShort>Endre tidsrom</BodyShort>\n                </Link>\n            </div>\n        </Block>\n    );\n};\n\nexport default TidsperiodeDisplay;\n","import { Component } from 'react';\n\ninterface RangeIconProps {\n    type: 'plus' | 'minus';\n}\n\nexport default class RangeIcon extends Component<RangeIconProps> {\n    renderPlusIcon() {\n        return (\n            <path\n                d=\"M18.2616283,12.5217391 L12.5222595,12.5217391 L12.5222595,18.2608696 C12.5222595,18.5488696 12.2874672,18.7826087 12.0004988,18.7826087 C11.7124868,18.7826087 11.478738,18.5488696 11.478738,18.2608696 L11.478738,12.5217391 L5.73936926,12.5217391 C5.4513573,12.5206957 5.21656494,12.288 5.21760846,12 C5.21760846,11.7130435 5.4513573,11.4782609 5.73936926,11.4782609 L11.478738,11.4782609 L11.478738,5.73913043 C11.478738,5.45113043 11.7124868,5.2173913 12.0004988,5.2173913 C12.2874672,5.2173913 12.5222595,5.45113043 12.5222595,5.73913043 L12.5222595,11.4782609 L18.2616283,11.4782609 C18.5485967,11.4782609 18.7844326,11.712 18.783389,12 C18.783389,12.288 18.5496402,12.5217391 18.2616283,12.5217391 Z\"\n                id=\"Inner\"\n                fill=\"#FFFFFF\"\n            />\n        );\n    }\n\n    renderMinusIcon() {\n        return (\n            <path\n                d=\"M18.2616283,12.5217391 L5.73936926,12.5217391 C5.4513573,12.5206957 5.21656494,12.288 5.21760846,12 C5.21760846,11.7130435 5.4513573,11.4782609 5.73936926,11.4782609 L18.2616283,11.4782609 C18.5485967,11.4782609 18.7844326,11.712 18.783389,12 C18.783389,12.288 18.5496402,12.5217391 18.2616283,12.5217391 Z\"\n                id=\"Inner\"\n                fill=\"#FFFFFF\"\n            />\n        );\n    }\n\n    render() {\n        const { type } = this.props;\n        const icon = type === 'minus' ? this.renderMinusIcon() : this.renderPlusIcon();\n\n        return (\n            <svg\n                focusable=\"false\"\n                role=\"img\"\n                aria-hidden=\"true\"\n                width=\"24px\"\n                height=\"24px\"\n                viewBox=\"0 0 24 24\"\n                className=\"rangeIcon\"\n            >\n                <g id=\"Icons/subtract/default\" stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\n                    {icon}\n                </g>\n            </svg>\n        );\n    }\n}\n","import { FunctionComponent, ReactNode, createElement } from 'react';\n\n/**\n *  Skjuler tekst slik at den ikke er synlig på skjerm, men leses av skjermleser\n */\nexport interface AriaTextProps {\n    id?: string;\n    children?: ReactNode;\n    tag?: string;\n}\n\nconst AriaText: FunctionComponent<AriaTextProps> = ({ id, children, tag }) => {\n    const tagName = tag || 'span';\n    return createElement(tagName, { id, className: 'sr-only' }, children);\n};\n\nexport default AriaText;\n","// Ensure touches occur rapidly\nconst delay = 500;\n// Sequential touches must be in close vicinity\nconst minZoomTouchDelta = 10;\n\n// Track state of the last touch\nlet lastTapAt = 0;\nlet lastClientX = 0;\nlet lastClientY = 0;\n\nexport default function preventDoubleTapZoom(event: React.TouchEvent<any>) {\n    // Exit early if this involves more than one finger (e.g. pinch to zoom)\n    if (event.touches.length > 1) {\n        return;\n    }\n\n    const tapAt = new Date().getTime();\n    const timeDiff = tapAt - lastTapAt;\n    const { clientX, clientY } = event.touches[0];\n    const xDiff = Math.abs(lastClientX - clientX);\n    const yDiff = Math.abs(lastClientY - clientY);\n    if (xDiff < minZoomTouchDelta && yDiff < minZoomTouchDelta && event.touches.length === 1 && timeDiff < delay) {\n        event.preventDefault();\n        // Trigger a fake click for the tap we just prevented\n        (event.target as any).click();\n    }\n    lastClientX = clientX;\n    lastClientY = clientY;\n    lastTapAt = tapAt;\n}\n","import classnames from 'classnames';\nimport AriaText from '../aria-text/AriaText';\nimport { guid } from '@navikt/fp-common';\n\nimport './sirkelknapp.less';\nimport preventDoubleTapZoom from '../../utils/preventDoubleTapZoom';\n\nexport type Stil = 'hvit' | 'bla' | 'info';\n\nexport interface SirkelknappProps {\n    /** Tekst som blir lest opp og satt som tittel på knappen */\n    ariaLabel: string;\n    /** Ikon som brukes inne i knappen */\n    ikon: React.ReactNode;\n    /** Funksjon som kalles knappen klikkes på */\n    onClick: () => void;\n    /** Om knappen er disabled eller ikke. Default false. */\n    disabled?: boolean;\n    /** Om knappen skal ha tilstanded pressed/valgt. Default false. */\n    toggle?: {\n        pressed: boolean;\n    };\n    /** Layout varianter */\n    stil?: Stil;\n    /** Størrelse - default normal */\n    size?: 'normal' | 'stor';\n    posisjoneringFraHøyre?: number;\n}\n\nconst Sirkelknapp: React.FunctionComponent<SirkelknappProps> = ({\n    onClick,\n    ariaLabel,\n    ikon,\n    toggle,\n    disabled,\n    stil = 'info',\n    size = 'normal',\n    posisjoneringFraHøyre,\n}) => {\n    const labelId = guid();\n    return (\n        <button\n            style={{ left: posisjoneringFraHøyre }}\n            type=\"button\"\n            onClick={() => onClick()}\n            onTouchStart={preventDoubleTapZoom}\n            aria-labelledby={labelId}\n            className={classnames(`sirkelknapp`, `sirkelknapp--${stil}`, `sirkelknapp--${size}`, {\n                'sirkelknapp--pressed': toggle && toggle.pressed,\n                'sirkelknapp--disabled': disabled,\n            })}\n            disabled={disabled}\n            aria-pressed={toggle ? toggle.pressed : undefined}\n        >\n            <span className=\"sirkelknapp__ikon\" role=\"presentation\">\n                {ikon}\n            </span>\n            <AriaText id={labelId}>{ariaLabel}</AriaText>\n        </button>\n    );\n};\n\nexport default Sirkelknapp;\n","import RangeIcon from '../../assets/RangeIcon';\nimport Sirkelknapp from '../sirkelknapp/Sirkelknapp';\n\nexport type Direction = 'next' | 'previous';\n\nexport interface Props {\n    onClick: () => void;\n    direction: Direction;\n    label: string;\n    disabled?: boolean;\n}\n\nconst StepperKnapp: React.FunctionComponent<Props> = ({ direction, onClick, label, disabled }) => (\n    <Sirkelknapp\n        stil=\"hvit\"\n        onClick={() => onClick()}\n        ariaLabel={label}\n        disabled={disabled}\n        ikon={direction === 'previous' ? <RangeIcon type=\"minus\" /> : <RangeIcon type=\"plus\" />}\n    />\n);\n\nexport default StepperKnapp;\n","import StepperKnapp from './StepperKnapp';\nimport { bemUtils } from '@navikt/fp-common';\n\nimport './numberStepper.less';\n\nexport interface Props {\n    value: number;\n    increaseAriaLabel: string;\n    decreaseAriaLabel: string;\n    stepSize?: number;\n    max?: number;\n    min?: number;\n    onChange: (value: number) => void;\n    legendId?: string;\n}\n\nconst bem = bemUtils('numberStepper');\n\nconst NumberStepper: React.FunctionComponent<Props> = ({\n    value,\n    min,\n    max,\n    stepSize = 1,\n    legendId,\n    onChange,\n    increaseAriaLabel,\n    decreaseAriaLabel,\n}) => {\n    const canDecrease = min === undefined || value > min;\n    const canIncrease = max === undefined || value < max;\n    return (\n        <div className={bem.block}>\n            <div className={bem.element('decrease')}>\n                <StepperKnapp\n                    direction=\"previous\"\n                    disabled={canDecrease === false}\n                    onClick={() => onChange(value - stepSize)}\n                    label={decreaseAriaLabel}\n                />\n            </div>\n            <div className={bem.element('input')}>\n                <input\n                    type=\"number\"\n                    value={value}\n                    onChange={(evt) => onChange(parseInt(evt.target.value, 10))}\n                    aria-labelledby={legendId}\n                />\n            </div>\n            <div className={bem.element('increase')}>\n                <StepperKnapp\n                    direction=\"next\"\n                    disabled={canIncrease === false}\n                    onClick={() => onChange(value + stepSize)}\n                    label={increaseAriaLabel}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default NumberStepper;\n","import { Label } from '@navikt/ds-react';\nimport { Block, Fieldset, bemUtils, guid } from '@navikt/fp-common';\nimport NumberStepper, { Props as NumberStepperProps } from './../number-stepper/NumberStepper';\n\nimport './ukerDagerTeller.less';\n\nexport interface Props {\n    ukeLegend: string;\n    dagLegend: string;\n    ukeStepper: NumberStepperProps;\n    dagStepper: NumberStepperProps;\n}\n\nconst UkerDagerTeller: React.FunctionComponent<Props> = ({ ukeStepper, dagStepper, ukeLegend, dagLegend }) => {\n    const bem = bemUtils('ukerDagerTeller');\n    const ukeLegendId = guid();\n    const dagLegendId = guid();\n    return (\n        <>\n            <legend>\n                <Label as=\"span\">Varighet på perioden</Label>\n            </legend>\n            <div className={bem.block}>\n                <div className={bem.element('ukerFelt')}>\n                    <Block padBottom=\"l\">\n                        <Fieldset legend={<span id={ukeLegendId}>{ukeLegend}</span>}>\n                            <NumberStepper {...ukeStepper} legendId={ukeLegendId} />\n                        </Fieldset>\n                    </Block>\n                </div>\n                <Fieldset legend={<span id={dagLegendId}>{dagLegend}</span>}>\n                    <NumberStepper {...dagStepper} legendId={dagLegendId} />\n                </Fieldset>\n            </div>\n        </>\n    );\n};\n\nexport default UkerDagerTeller;\n","import { useIntl } from 'react-intl';\nimport dayjs from 'dayjs';\nimport TidsperiodeForm, { TidsperiodeFormValues } from '../uttaks-forms/tidsperiode-form/TidsperiodeForm';\nimport {\n    Block,\n    getTidsperiode,\n    getUkerOgDagerFromDager,\n    intlUtils,\n    isForeldrepengerFørFødselUttaksperiode,\n    Periode,\n    Situasjon,\n    Tidsperiode,\n    TidsperiodeDate,\n    Tidsperioden,\n    Utsettelsesperiode,\n} from '@navikt/fp-common';\nimport UkerDagerTeller from './../uker-dager-teller/UkerDagerTeller';\nimport { Modal } from '@navikt/ds-react';\n\ninterface Props {\n    periode: Periode;\n    tidsperiode: TidsperiodeDate;\n    familiehendelsesdato: Date;\n    ugyldigeTidsperioder: Tidsperiode[] | undefined;\n    utsettelserIPlan: Utsettelsesperiode[];\n    visible: boolean;\n    onAvbryt: () => void;\n    onBekreft: (tidsperiode: TidsperiodeFormValues) => void;\n    changeTidsperiode: (tidsperiode: Partial<TidsperiodeDate>) => void;\n    erFarEllerMedmor: boolean;\n    morHarRett: boolean;\n    situasjon: Situasjon;\n    erFarMedmorOgHarAleneomsorg: boolean;\n    termindato?: Date;\n}\n\nconst UttakEndreTidsperiodeSpørsmål: React.FunctionComponent<Props> = ({\n    onBekreft,\n    onAvbryt,\n    changeTidsperiode,\n    visible,\n    periode,\n    tidsperiode,\n    familiehendelsesdato,\n    ugyldigeTidsperioder,\n    utsettelserIPlan,\n    termindato,\n    erFarEllerMedmor,\n    morHarRett,\n    situasjon,\n    erFarMedmorOgHarAleneomsorg,\n}) => {\n    const intl = useIntl();\n    const erForeldrepengerFørFødsel = isForeldrepengerFørFødselUttaksperiode(periode);\n    const initialMonth = erForeldrepengerFørFødsel ? familiehendelsesdato : undefined;\n    const varighetIDager = dayjs(tidsperiode.fom).isSameOrBefore(tidsperiode.tom, 'day')\n        ? Tidsperioden({\n              fom: tidsperiode.fom,\n              tom: tidsperiode.tom,\n          }).getAntallUttaksdager()\n        : undefined;\n    const { uker, dager } = varighetIDager ? getUkerOgDagerFromDager(Math.abs(varighetIDager)) : { uker: 0, dager: 0 };\n    const handleOnSubmit = (values: TidsperiodeFormValues) => {\n        onBekreft(values);\n    };\n\n    const getDagValue = (uker: number, dager: number): number => {\n        if (dager >= 5) {\n            return 0;\n        }\n\n        if (uker === 0 && dager === 0) {\n            return 1;\n        }\n\n        return dager;\n    };\n\n    return (\n        <>\n            <Modal open={visible} closeButton={true} onClose={onAvbryt} aria-label=\"Endre tidsperiode\">\n                <Modal.Content>\n                    <TidsperiodeForm\n                        familiehendelsesdato={familiehendelsesdato}\n                        onBekreft={handleOnSubmit}\n                        periode={periode}\n                        tidsperiode={tidsperiode}\n                        ugyldigeTidsperioder={ugyldigeTidsperioder}\n                        utsettelserIPlan={utsettelserIPlan}\n                        initialMonth={initialMonth}\n                        termindato={termindato}\n                        erFarEllerMedmor={erFarEllerMedmor}\n                        morHarRett={morHarRett}\n                        situasjon={situasjon}\n                        erFarMedmorOgHarAleneomsorg={erFarMedmorOgHarAleneomsorg}\n                    />\n                </Modal.Content>\n            </Modal>\n            <Block padBottom=\"m\">\n                <UkerDagerTeller\n                    ukeLegend={intlUtils(intl, 'uker.label')}\n                    dagLegend={intlUtils(intl, 'dager.label')}\n                    ukeStepper={{\n                        value: uker !== undefined ? uker : 0,\n                        min: 0,\n                        max: 100,\n                        onChange: (nyUker: number) => {\n                            const date = tidsperiode.fom;\n                            if (date) {\n                                changeTidsperiode({\n                                    fom: date,\n                                    tom: getTidsperiode(date, Math.min(nyUker, 200) * 5 + getDagValue(nyUker, dager))\n                                        .tom,\n                                });\n                            }\n                        },\n                        increaseAriaLabel: 'Øk antall uker med en uke',\n                        decreaseAriaLabel: 'Mink antall uker med en uke',\n                    }}\n                    dagStepper={{\n                        value: getDagValue(uker, dager),\n                        min: uker === 0 ? 1 : 0,\n                        max: 5,\n                        onChange: (nyDager: number) => {\n                            const date = tidsperiode.fom;\n                            const ekstraUke = nyDager === 5 ? 1 : 0;\n\n                            if (date) {\n                                changeTidsperiode({\n                                    fom: date,\n                                    tom: getTidsperiode(date, (uker + ekstraUke) * 5 + getDagValue(uker, nyDager)).tom,\n                                });\n                            }\n                        },\n                        increaseAriaLabel: 'Øk antall dager med en dag',\n                        decreaseAriaLabel: 'Mink antall dager med en dag',\n                    }}\n                />\n            </Block>\n        </>\n    );\n};\n\nexport default UttakEndreTidsperiodeSpørsmål;\n","import {\n    ActionLink,\n    andreAugust2022ReglerGjelder,\n    AnnenForelder,\n    Arbeidsforhold,\n    Attachment,\n    bemUtils,\n    Block,\n    Forelder,\n    formaterDatoKompakt,\n    getFørsteUttaksdag2UkerFørFødsel,\n    getIsValidStateForPerioder,\n    getSisteUttaksdag6UkerEtterFødsel,\n    getSlettPeriodeTekst,\n    getVelgbareStønadskontotyper,\n    guid,\n    intlUtils,\n    isAnnenForelderOppgitt,\n    ISOStringToDate,\n    isValidTidsperiode,\n    NavnPåForeldre,\n    Periode,\n    Periodetype,\n    PeriodeValidState,\n    Situasjon,\n    starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel,\n    StønadskontoType,\n    TidsperiodeDate,\n    TilgjengeligStønadskonto,\n    Utsettelsesperiode,\n} from '@navikt/fp-common';\nimport { Dispatch, FunctionComponent, SetStateAction, useEffect, useState } from 'react';\nimport ErMorForSykSpørsmål from '../spørsmål/er-mor-for-syk/ErMorForSykSpørsmål';\nimport FlerbarnsdagerSpørsmål from '../spørsmål/flerbarnsdager/FlerbarnsdagerSpørsmål';\nimport HvemSkalHaUttakSpørsmål from '../spørsmål/hvem-skal-ha-uttak/HvemSkalHaUttakSpørsmål';\nimport HvilkenKontoSpørsmål from '../spørsmål/hvilken-konto/HvilkenKontoSpørsmål';\nimport UttakRundtFødselÅrsakSpørsmål from '../spørsmål/uttak-rundt-fødsel-årsak/UttakRundtFødselÅrsakSpørsmål';\nimport OverføringsårsakSpørsmål from '../spørsmål/overføringsårsak/OverføringsårsakSpørsmål';\nimport SamtidigUttakSpørsmål from '../spørsmål/samtidig-uttak/SamtidigUttakSpørsmål';\nimport SkalHaGraderingSpørsmål from '../spørsmål/skal-ha-gradering/SkalHaGraderingSpørsmål';\nimport { SubmitListener } from '../submit-listener/SubmitListener';\nimport TidsperiodeForm from '../tidsperiode-form/TidsperiodeForm';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormData, PeriodeUttakFormField } from './periodeUttakFormConfig';\nimport {\n    periodeUttakFormQuestionsConfig,\n    PeriodeUttakFormQuestionsPayload,\n    skalViseWLBInfoOmSamtidigUttakRundtFødsel,\n} from './periodeUttakFormQuestionsConfig';\nimport {\n    cleanPeriodeUttakFormData,\n    getPeriodeUttakFormInitialValues,\n    mapPeriodeUttakFormToPeriode,\n} from './periodeUttakFormUtils';\nimport { FormattedMessage, IntlShape } from 'react-intl';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport AktivitetskravSpørsmål from '../spørsmål/aktivitetskrav/AktivitetskravSpørsmål';\nimport { Button, GuidePanel } from '@navikt/ds-react';\nimport TidsperiodeDisplay from '../../tidsperiode-display/TidsperiodeDisplay';\nimport UttakEndreTidsperiodeSpørsmål from '../../uttak-endre-tidsperiode-spørsmål/UttakEndreTidsperiodeSpørsmål';\n\nimport './periodeUttakForm.less';\n\ninterface Props {\n    periode: Periode;\n    erEndringssøknad: boolean;\n    familiehendelsesdato: Date;\n    stønadskontoer: TilgjengeligStønadskonto[];\n    navnPåForeldre: NavnPåForeldre;\n    annenForelder: AnnenForelder;\n    arbeidsforhold: Arbeidsforhold[];\n    erFarEllerMedmor: boolean;\n    erFlerbarnssøknad: boolean;\n    erAleneOmOmsorg: boolean;\n    erDeltUttak: boolean;\n    situasjon: Situasjon;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n    handleAddPeriode?: (nyPeriode: Periode, familiehendelsedato: Date) => void;\n    setNyPeriodeFormIsVisible?: Dispatch<SetStateAction<boolean>>;\n    toggleIsOpen?: (id: string) => void;\n    handleDeletePeriode?: (periodeId: string) => void;\n    isNyPeriode?: boolean;\n    erMorUfør: boolean;\n    setPerioderErGyldige: React.Dispatch<React.SetStateAction<PeriodeValidState[]>>;\n    termindato: Date | undefined;\n    morHarRett: boolean;\n    antallBarn: number;\n    utsettelserIPlan: Utsettelsesperiode[];\n    intl: IntlShape;\n    isOpen: boolean;\n    saveAttachment: (vedlegg: Attachment) => void;\n}\n\nconst periodenGjelderAnnenForelder = (erFarEllerMedmor: boolean, forelder: Forelder): boolean => {\n    return (erFarEllerMedmor && forelder === Forelder.farMedmor) || (!erFarEllerMedmor && forelder === Forelder.mor)\n        ? false\n        : true;\n};\n\nconst erUttakAvAnnenForeldersKvote = (konto: StønadskontoType | '', søkerErFarEllerMedmor: boolean): boolean => {\n    return (\n        (konto === StønadskontoType.Mødrekvote && søkerErFarEllerMedmor === true) ||\n        (konto === StønadskontoType.Fedrekvote && søkerErFarEllerMedmor === false)\n    );\n};\n\nconst getPeriodeType = (\n    periodenGjelder: Forelder | '',\n    erFarEllerMedmor: boolean,\n    konto: StønadskontoType | '',\n    familiehendelsedato: Date,\n    termindato: Date | undefined,\n    tidsperiode: TidsperiodeDate,\n): Periodetype => {\n    if (\n        erFarEllerMedmor &&\n        erUttakAvAnnenForeldersKvote(konto, erFarEllerMedmor) &&\n        starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel(tidsperiode, familiehendelsedato, termindato)\n    ) {\n        return Periodetype.Overføring;\n    }\n    if (periodenGjelder === '' || konto === '') {\n        return Periodetype.Uttak;\n    }\n\n    if (periodenGjelderAnnenForelder(erFarEllerMedmor, periodenGjelder)) {\n        return Periodetype.Opphold;\n    }\n\n    if (erUttakAvAnnenForeldersKvote(konto, erFarEllerMedmor)) {\n        return Periodetype.Overføring;\n    }\n\n    return Periodetype.Uttak;\n};\n\nconst PeriodeUttakForm: FunctionComponent<Props> = ({\n    familiehendelsesdato,\n    periode,\n    handleUpdatePeriode,\n    stønadskontoer,\n    navnPåForeldre,\n    annenForelder,\n    toggleIsOpen,\n    arbeidsforhold,\n    handleDeletePeriode,\n    setNyPeriodeFormIsVisible,\n    handleAddPeriode,\n    isNyPeriode = false,\n    erFarEllerMedmor,\n    erFlerbarnssøknad,\n    erAleneOmOmsorg,\n    erDeltUttak,\n    situasjon,\n    erMorUfør,\n    erEndringssøknad,\n    setPerioderErGyldige,\n    termindato,\n    morHarRett,\n    antallBarn,\n    utsettelserIPlan,\n    intl,\n    isOpen,\n    saveAttachment,\n}) => {\n    const [tidsperiodeIsOpen, setTidsperiodeIsOpen] = useState(false);\n    const [periodeIsValid, setPeriodeIsValid] = useState(true);\n    const bem = bemUtils('periodeUttakForm');\n    const toggleVisTidsperiode = () => {\n        setTidsperiodeIsOpen(!tidsperiodeIsOpen);\n    };\n    const forelder = erFarEllerMedmor ? Forelder.farMedmor : Forelder.mor;\n    const annenForelderHarRettIEØS =\n        isAnnenForelderOppgitt(annenForelder) && !!annenForelder.harRettPåForeldrepengerIEØS;\n\n    useEffect(() => {\n        setPerioderErGyldige((previousState: PeriodeValidState[]) => {\n            return getIsValidStateForPerioder(previousState, periode, periodeIsValid);\n        });\n    }, [periodeIsValid]);\n\n    const handleCleanup = (\n        values: PeriodeUttakFormData,\n        visibility: QuestionVisibility<PeriodeUttakFormField, undefined>,\n    ): PeriodeUttakFormData => {\n        return cleanPeriodeUttakFormData(\n            values,\n            visibility,\n            erDeltUttak,\n            forelder,\n            erMorUfør,\n            familiehendelsesdato,\n            erFarEllerMedmor,\n            annenForelderHarRettIEØS,\n        );\n    };\n    const erDeltUttakINorge = erDeltUttak && !annenForelderHarRettIEØS;\n    const velgbareStønadskontoer = getVelgbareStønadskontotyper(stønadskontoer);\n    const navnPåAnnenForelder =\n        isAnnenForelderOppgitt(annenForelder) && annenForelder.fornavn !== undefined && annenForelder.fornavn !== ''\n            ? annenForelder.fornavn\n            : intlUtils(intl, 'annen.forelder');\n\n    const startDatoPeriodeRundtFødselFarMedmor =\n        erFarEllerMedmor && andreAugust2022ReglerGjelder(familiehendelsesdato)\n            ? getFørsteUttaksdag2UkerFørFødsel(familiehendelsesdato, termindato)\n            : undefined;\n    const sluttDatoPeriodeRundtFødselFarMedmor =\n        erFarEllerMedmor && andreAugust2022ReglerGjelder(familiehendelsesdato)\n            ? getSisteUttaksdag6UkerEtterFødsel(familiehendelsesdato)\n            : undefined;\n\n    const erFarMedmorOgHarAleneomsorg = erFarEllerMedmor && erAleneOmOmsorg;\n\n    if (!isOpen) {\n        return null;\n    }\n\n    return (\n        <PeriodeUttakFormComponents.FormikWrapper\n            initialValues={getPeriodeUttakFormInitialValues(\n                periode,\n                erDeltUttak,\n                forelder,\n                erMorUfør,\n                familiehendelsesdato,\n                erFarEllerMedmor,\n                annenForelderHarRettIEØS,\n            )}\n            enableReinitialize={false}\n            onSubmit={(values: Partial<PeriodeUttakFormData>) => {\n                if (isNyPeriode) {\n                    const periodetype = getPeriodeType(\n                        values.hvemSkalTaUttak!,\n                        erFarEllerMedmor,\n                        values.konto!,\n                        familiehendelsesdato,\n                        termindato,\n                        { fom: values.fom, tom: values.tom } as TidsperiodeDate,\n                    );\n                    setNyPeriodeFormIsVisible!(false);\n                    handleAddPeriode!(\n                        mapPeriodeUttakFormToPeriode(\n                            values,\n                            guid(),\n                            periodetype,\n                            familiehendelsesdato,\n                            erFarEllerMedmor,\n                            erDeltUttak,\n                            situasjon,\n                        ),\n                        familiehendelsesdato,\n                    );\n                } else {\n                    return handleUpdatePeriode(\n                        mapPeriodeUttakFormToPeriode(\n                            values,\n                            periode.id,\n                            getPeriodeType(\n                                values.hvemSkalTaUttak!,\n                                erFarEllerMedmor,\n                                values.konto!,\n                                familiehendelsesdato,\n                                termindato,\n                                { fom: values.fom, tom: values.tom } as TidsperiodeDate,\n                            ),\n                            familiehendelsesdato,\n                            erFarEllerMedmor,\n                            erDeltUttak,\n                            situasjon,\n                        ),\n                        familiehendelsesdato,\n                    );\n                }\n            }}\n            renderForm={({ setFieldValue, values, isValid }) => {\n                const periodetype = getPeriodeType(\n                    values.hvemSkalTaUttak!,\n                    erFarEllerMedmor,\n                    values.konto!,\n                    familiehendelsesdato,\n                    termindato,\n                    { fom: values.fom, tom: values.tom } as TidsperiodeDate,\n                );\n                const søkerOppgirAnnenForeldersPeriode =\n                    (values.hvemSkalTaUttak === 'mor' && erFarEllerMedmor) ||\n                    (values.hvemSkalTaUttak === 'farMedmor' && !erFarEllerMedmor);\n\n                if (isValid !== periodeIsValid) {\n                    setPeriodeIsValid(isValid);\n                }\n                const visibility = periodeUttakFormQuestionsConfig.getVisbility({\n                    values,\n                    regelProps: {\n                        annenForelder,\n                        erAleneOmOmsorg,\n                        erDeltUttakINorge,\n                        erFarEllerMedmor,\n                        erFlerbarnssøknad,\n                        familiehendelsesdato,\n                        periodetype,\n                        situasjon,\n                        termindato,\n                        morHarRett,\n                        stønadskontoer,\n                        antallBarn,\n                    },\n                } as PeriodeUttakFormQuestionsPayload);\n\n                return (\n                    <>\n                        <Block visible={!isValidTidsperiode({ fom: values.fom!, tom: values.tom! })} padBottom=\"xl\">\n                            <TidsperiodeForm\n                                tidsperiode={{ fom: values.fom!, tom: values.tom! }}\n                                familiehendelsesdato={familiehendelsesdato}\n                                periode={periode}\n                                onBekreft={(values) => {\n                                    setFieldValue(PeriodeUttakFormField.fom, ISOStringToDate(values.fom));\n                                    setFieldValue(PeriodeUttakFormField.tom, ISOStringToDate(values.tom));\n                                }}\n                                ugyldigeTidsperioder={undefined}\n                                utsettelserIPlan={utsettelserIPlan}\n                                termindato={termindato}\n                                erFarEllerMedmor={erFarEllerMedmor}\n                                morHarRett={morHarRett}\n                                situasjon={situasjon}\n                                erFarMedmorOgHarAleneomsorg={erFarMedmorOgHarAleneomsorg}\n                            />\n                        </Block>\n                        <PeriodeUttakFormComponents.Form includeButtons={false}>\n                            {!isNyPeriode && (\n                                <SubmitListener\n                                    cleanup={() => handleCleanup(values as PeriodeUttakFormData, visibility)}\n                                />\n                            )}\n\n                            <Block visible={isValidTidsperiode({ fom: values.fom!, tom: values.tom! })} padBottom=\"xl\">\n                                <TidsperiodeDisplay\n                                    tidsperiode={{ fom: values.fom!, tom: values.tom! }}\n                                    toggleVisTidsperiode={toggleVisTidsperiode}\n                                />\n                                <UttakEndreTidsperiodeSpørsmål\n                                    periode={periode}\n                                    familiehendelsesdato={familiehendelsesdato}\n                                    ugyldigeTidsperioder={undefined}\n                                    utsettelserIPlan={utsettelserIPlan}\n                                    onBekreft={(values) => {\n                                        toggleVisTidsperiode();\n                                        setFieldValue(PeriodeUttakFormField.fom, ISOStringToDate(values.fom));\n                                        setFieldValue(PeriodeUttakFormField.tom, ISOStringToDate(values.tom));\n                                    }}\n                                    changeTidsperiode={(values) => {\n                                        setTimeout(() => {\n                                            setFieldValue(PeriodeUttakFormField.fom, values.fom);\n                                            setFieldValue(PeriodeUttakFormField.tom, values.tom);\n                                        }, 0);\n                                    }}\n                                    tidsperiode={{ fom: values.fom!, tom: values.tom! }}\n                                    onAvbryt={() => toggleVisTidsperiode()}\n                                    visible={tidsperiodeIsOpen}\n                                    termindato={termindato}\n                                    erFarEllerMedmor={erFarEllerMedmor}\n                                    morHarRett={morHarRett}\n                                    situasjon={situasjon}\n                                    erFarMedmorOgHarAleneomsorg={erFarMedmorOgHarAleneomsorg}\n                                />\n                            </Block>\n                            <Block padBottom=\"xl\" visible={visibility.isVisible(PeriodeUttakFormField.hvemSkalTaUttak)}>\n                                <HvemSkalHaUttakSpørsmål\n                                    fieldName={PeriodeUttakFormField.hvemSkalTaUttak}\n                                    erFarEllerMedmor={false}\n                                    navnPåForeldre={navnPåForeldre}\n                                />\n                            </Block>\n                            <Block padBottom=\"xl\" visible={visibility.isVisible(PeriodeUttakFormField.konto)}>\n                                <HvilkenKontoSpørsmål\n                                    fieldName={PeriodeUttakFormField.konto}\n                                    velgbareStønadskontoer={velgbareStønadskontoer}\n                                    erOppholdsperiode={søkerOppgirAnnenForeldersPeriode}\n                                    navnPåForeldre={navnPåForeldre}\n                                    erFarEllerMedmor={erFarEllerMedmor}\n                                    erAleneOmOmsorg={erAleneOmOmsorg}\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"xl\"\n                                visible={visibility.isVisible(PeriodeUttakFormField.overføringsårsak)}\n                            >\n                                <OverføringsårsakSpørsmål\n                                    vedlegg={values.overføringsdokumentasjon!}\n                                    navnAnnenForelder={navnPåAnnenForelder}\n                                    erEndringssøknad={erEndringssøknad}\n                                    valgtOverføringsårsak={values.overføringsårsak!}\n                                    isOpen={isOpen}\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"xl\"\n                                visible={visibility.isVisible(PeriodeUttakFormField.uttakRundtFødselÅrsak)}\n                            >\n                                <UttakRundtFødselÅrsakSpørsmål\n                                    fieldName={PeriodeUttakFormField.uttakRundtFødselÅrsak}\n                                    uttakRundtFødselÅrsak={values.uttakRundtFødselÅrsak!}\n                                    navnMor={navnPåForeldre.mor}\n                                    vedlegg={values.erMorForSykDokumentasjon!}\n                                    isOpen={isOpen}\n                                />\n                            </Block>\n                            {startDatoPeriodeRundtFødselFarMedmor !== undefined &&\n                                sluttDatoPeriodeRundtFødselFarMedmor !== undefined && (\n                                    <Block\n                                        padBottom=\"xl\"\n                                        visible={skalViseWLBInfoOmSamtidigUttakRundtFødsel(\n                                            values as PeriodeUttakFormData,\n                                            familiehendelsesdato,\n                                            erFarEllerMedmor,\n                                            erDeltUttak,\n                                            situasjon,\n                                        )}\n                                    >\n                                        <GuidePanel>\n                                            <FormattedMessage\n                                                id=\"uttaksplan.samtidigUttakVeileder\"\n                                                values={{\n                                                    fomDato: formaterDatoKompakt(startDatoPeriodeRundtFødselFarMedmor),\n                                                    tomDato: formaterDatoKompakt(sluttDatoPeriodeRundtFødselFarMedmor),\n                                                }}\n                                            />\n                                        </GuidePanel>\n                                    </Block>\n                                )}\n                            <Block\n                                padBottom=\"xl\"\n                                visible={visibility.isVisible(PeriodeUttakFormField.ønskerFlerbarnsdager)}\n                            >\n                                <FlerbarnsdagerSpørsmål fieldName={PeriodeUttakFormField.ønskerFlerbarnsdager} />\n                            </Block>\n                            <Block padBottom=\"xl\" visible={visibility.isVisible(PeriodeUttakFormField.erMorForSyk)}>\n                                <ErMorForSykSpørsmål\n                                    fieldName={PeriodeUttakFormField.erMorForSyk}\n                                    erMorForSyk={values.erMorForSyk!}\n                                    navnMor={navnPåForeldre.mor}\n                                    vedlegg={values.erMorForSykDokumentasjon!}\n                                    isOpen={isOpen}\n                                />\n                            </Block>\n                            <Block padBottom=\"xl\" visible={visibility.isVisible(PeriodeUttakFormField.samtidigUttak)}>\n                                <SamtidigUttakSpørsmål\n                                    erFlerbarnssøknad={erFlerbarnssøknad}\n                                    navnPåForeldre={navnPåForeldre}\n                                    navnPåAnnenForelder={navnPåAnnenForelder}\n                                    samtidigUttakProsentVisible={visibility.isVisible(\n                                        PeriodeUttakFormField.samtidigUttakProsent,\n                                    )}\n                                    familiehendelsesdato={familiehendelsesdato}\n                                    situasjon={situasjon}\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"xl\"\n                                visible={visibility.isVisible(PeriodeUttakFormField.aktivitetskravMor)}\n                            >\n                                <AktivitetskravSpørsmål\n                                    fieldName={PeriodeUttakFormField.aktivitetskravMor}\n                                    navnPåForeldre={navnPåForeldre}\n                                    aktivitetskravMorValue={values.aktivitetskravMor!}\n                                    aktivitetskravVedlegg={values.aktivitetskravMorDokumentasjon!}\n                                    FormComponents={PeriodeUttakFormComponents}\n                                    vedleggFieldName={PeriodeUttakFormField.aktivitetskravMorDokumentasjon}\n                                    isOpen={isOpen}\n                                    saveAttachment={saveAttachment}\n                                />\n                            </Block>\n                            <Block padBottom=\"xl\" visible={visibility.isVisible(PeriodeUttakFormField.skalHaGradering)}>\n                                <SkalHaGraderingSpørsmål\n                                    graderingsprosentVisible={visibility.isVisible(\n                                        PeriodeUttakFormField.stillingsprosent,\n                                    )}\n                                    arbeidsforhold={arbeidsforhold}\n                                    tidsperiode={{ fom: values.fom!, tom: values.tom! }}\n                                />\n                            </Block>\n                            <Block\n                                visible={\n                                    !isNyPeriode && handleDeletePeriode !== undefined && toggleIsOpen !== undefined\n                                }\n                            >\n                                <div className={bem.element('knapperad-endre')}>\n                                    <Button type=\"button\" variant=\"secondary\" onClick={() => toggleIsOpen!(periode.id)}>\n                                        <FormattedMessage id=\"uttaksplan.lukk\" />\n                                    </Button>\n                                    <div className={bem.element('slettPeriodeWrapper')}>\n                                        <ActionLink\n                                            onClick={() => handleDeletePeriode!(periode.id)}\n                                            className={bem.element('slettPeriode')}\n                                        >\n                                            <FormattedMessage id={getSlettPeriodeTekst(periode.type)} />\n                                        </ActionLink>\n                                    </div>\n                                </div>\n                            </Block>\n                            <Block\n                                visible={\n                                    isNyPeriode &&\n                                    setNyPeriodeFormIsVisible !== undefined &&\n                                    handleAddPeriode !== undefined\n                                }\n                            >\n                                <div className={bem.element('knapperad-legg-til')}>\n                                    <Button\n                                        type=\"button\"\n                                        variant=\"secondary\"\n                                        onClick={() => setNyPeriodeFormIsVisible!(false)}\n                                    >\n                                        <FormattedMessage id=\"uttaksplan.avbryt\" />\n                                    </Button>\n                                    {visibility.areAllQuestionsAnswered() ? (\n                                        <Button type=\"submit\">\n                                            <FormattedMessage id=\"uttaksplan.leggTil\" />\n                                        </Button>\n                                    ) : null}\n                                </div>\n                            </Block>\n                        </PeriodeUttakFormComponents.Form>\n                    </>\n                );\n            }}\n        />\n    );\n};\n\nexport default PeriodeUttakForm;\n","import { Arbeidsform, Attachment, MorsAktivitet, UtsettelseÅrsakType } from '@navikt/fp-common';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\n\nexport enum PeriodeUtsettelseFormField {\n    fom = 'fom',\n    tom = 'tom',\n    årsak = 'årsak',\n    vedlegg = 'vedlegg',\n    morsAktivitetIPeriodenDokumentasjon = 'morsAktivitetIPeriodenDokumentasjon',\n    morsAktivitetIPerioden = 'morsAktivitetIPerioden',\n    bekrefterArbeidIPerioden = 'bekrefterArbeidIPerioden',\n}\n\nexport type ArbeidUnderUtsettelse = Arbeidsform | string;\n\nexport interface PeriodeUtsettelseFormData {\n    [PeriodeUtsettelseFormField.fom]: Date | undefined;\n    [PeriodeUtsettelseFormField.tom]: Date | undefined;\n    [PeriodeUtsettelseFormField.årsak]: UtsettelseÅrsakType | '';\n    [PeriodeUtsettelseFormField.morsAktivitetIPerioden]: MorsAktivitet | '';\n    [PeriodeUtsettelseFormField.morsAktivitetIPeriodenDokumentasjon]: Attachment[];\n    [PeriodeUtsettelseFormField.vedlegg]: Attachment[];\n    [PeriodeUtsettelseFormField.bekrefterArbeidIPerioden]: boolean | undefined;\n}\n\nexport const PeriodeUtsettelseFormComponents = getTypedFormComponents<\n    PeriodeUtsettelseFormField,\n    PeriodeUtsettelseFormData\n>();\n","import { PeriodeUtsettelseFormData, PeriodeUtsettelseFormField } from './periodeUtsettelseFormConfig';\nimport {\n    Attachment,\n    AttachmentType,\n    Forelder,\n    Periode,\n    Periodetype,\n    UtsettelseÅrsakType,\n    isUtsettelsePgaArbeid,\n    isUtsettelsesperiode,\n} from '@navikt/fp-common';\n\nexport const initialValues: PeriodeUtsettelseFormData = {\n    [PeriodeUtsettelseFormField.fom]: undefined,\n    [PeriodeUtsettelseFormField.tom]: undefined,\n    [PeriodeUtsettelseFormField.årsak]: '',\n    [PeriodeUtsettelseFormField.morsAktivitetIPerioden]: '',\n    [PeriodeUtsettelseFormField.morsAktivitetIPeriodenDokumentasjon]: [],\n    [PeriodeUtsettelseFormField.vedlegg]: [],\n    [PeriodeUtsettelseFormField.bekrefterArbeidIPerioden]: undefined,\n};\n\nconst getFormStateFraVedlegg = (vedlegg: Attachment[], gjelderMorsAktivitet: boolean): Attachment[] => {\n    return gjelderMorsAktivitet\n        ? vedlegg.filter((v) => v.type === AttachmentType.MORS_AKTIVITET_DOKUMENTASJON)\n        : vedlegg.filter((v) => v.type !== AttachmentType.MORS_AKTIVITET_DOKUMENTASJON);\n};\n\nexport const getPeriodeUtsettelseFormInitialValues = (periode: Periode): PeriodeUtsettelseFormData => {\n    if (isUtsettelsesperiode(periode)) {\n        return {\n            ...initialValues,\n            fom: periode.tidsperiode.fom,\n            tom: periode.tidsperiode.tom,\n            årsak: periode.årsak,\n            morsAktivitetIPerioden: periode.morsAktivitetIPerioden ? periode.morsAktivitetIPerioden : '',\n            morsAktivitetIPeriodenDokumentasjon: getFormStateFraVedlegg(periode.vedlegg || [], true),\n            vedlegg: getFormStateFraVedlegg(periode.vedlegg || [], false),\n            bekrefterArbeidIPerioden: isUtsettelsePgaArbeid(periode) ? periode.bekrefterArbeidIPerioden : undefined,\n        };\n    }\n\n    return initialValues;\n};\n\nconst getVedleggFraFormState = (\n    morsAktivitetIPeriodenDokumentasjon: Attachment[],\n    vedlegg: Attachment[],\n): Attachment[] => {\n    return [...morsAktivitetIPeriodenDokumentasjon, ...vedlegg];\n};\n\nexport const mapPeriodeUtsettelseFormToPeriode = (\n    values: Partial<PeriodeUtsettelseFormData>,\n    id: string,\n    erFarEllerMedmor: boolean,\n): Periode => {\n    return {\n        id,\n        type: Periodetype.Utsettelse,\n        årsak: values.årsak as UtsettelseÅrsakType,\n        morsAktivitetIPerioden: values.morsAktivitetIPerioden ? values.morsAktivitetIPerioden : undefined,\n        forelder: erFarEllerMedmor ? Forelder.farMedmor : Forelder.mor,\n        tidsperiode: {\n            fom: values.fom!,\n            tom: values.tom!,\n        },\n        vedlegg: getVedleggFraFormState(values.morsAktivitetIPeriodenDokumentasjon || [], values.vedlegg || []),\n        bekrefterArbeidIPerioden: values.bekrefterArbeidIPerioden,\n        erArbeidstaker: !!values.bekrefterArbeidIPerioden,\n    };\n};\n\nexport const cleanupPeriodeUtsettelseFormData = (values: PeriodeUtsettelseFormData): PeriodeUtsettelseFormData => {\n    if (values.årsak !== UtsettelseÅrsakType.Arbeid) {\n        return {\n            ...values,\n            bekrefterArbeidIPerioden: undefined,\n        };\n    }\n    return values;\n};\n","import { hasValue, isValidTidsperiode, UtsettelseÅrsakType } from '@navikt/fp-common';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport { PeriodeUtsettelseFormData, PeriodeUtsettelseFormField } from './periodeUtsettelseFormConfig';\n\nexport interface PeriodeUtsettelseFormConfigPayload {\n    values: PeriodeUtsettelseFormData;\n    erFarEllerMedmor: boolean;\n    erAleneOmOmsorg: boolean;\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean;\n}\n\nconst PeriodeUtsettelseFormConfig: QuestionConfig<PeriodeUtsettelseFormConfigPayload, PeriodeUtsettelseFormField> = {\n    [PeriodeUtsettelseFormField.fom]: {\n        isAnswered: ({ values }) => hasValue(values.fom),\n        isIncluded: () => true,\n    },\n    [PeriodeUtsettelseFormField.tom]: {\n        isAnswered: ({ values }) => hasValue(values.tom),\n        isIncluded: () => true,\n    },\n    [PeriodeUtsettelseFormField.årsak]: {\n        isAnswered: ({ values }) => hasValue(values.årsak),\n        isIncluded: () => true,\n        visibilityFilter: ({ values }) => isValidTidsperiode({ fom: values.fom, tom: values.tom }),\n    },\n    [PeriodeUtsettelseFormField.bekrefterArbeidIPerioden]: {\n        isAnswered: ({ values }) =>\n            values.årsak !== UtsettelseÅrsakType.Arbeid ||\n            (hasValue(values.bekrefterArbeidIPerioden) && values.bekrefterArbeidIPerioden !== undefined),\n        isIncluded: ({ values }) => hasValue(values.årsak) && values.årsak === UtsettelseÅrsakType.Arbeid,\n        visibilityFilter: ({ values }) => hasValue(values.årsak),\n    },\n    [PeriodeUtsettelseFormField.vedlegg]: {\n        isAnswered: () => true,\n        isIncluded: ({ values }) => hasValue(values.årsak),\n        visibilityFilter: ({ values }) => hasValue(values.årsak),\n    },\n    [PeriodeUtsettelseFormField.morsAktivitetIPerioden]: {\n        isAnswered: ({ values, søkerErFarEllerMedmorOgKunDeHarRett }) =>\n            hasValue(values.morsAktivitetIPerioden) || !søkerErFarEllerMedmorOgKunDeHarRett,\n        isIncluded: ({ søkerErFarEllerMedmorOgKunDeHarRett }) => søkerErFarEllerMedmorOgKunDeHarRett,\n        visibilityFilter: ({ values }) => hasValue(values.årsak),\n    },\n};\n\nexport const periodeUtsettelseFormQuestionsConfig = Questions<\n    PeriodeUtsettelseFormConfigPayload,\n    PeriodeUtsettelseFormField\n>(PeriodeUtsettelseFormConfig);\n","import { Attachment, AttachmentType, Block, intlUtils, Skjemanummer, UtsettelseÅrsakType } from '@navikt/fp-common';\nimport FormikFileUploader from 'app/components/formik-file-uploader/FormikFileUploader';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport {\n    PeriodeUtsettelseFormComponents,\n    PeriodeUtsettelseFormField,\n} from '../../periode-utsettelse-form/periodeUtsettelseFormConfig';\nimport { BodyShort, GuidePanel } from '@navikt/ds-react';\nimport { FormikRadioProp } from '@navikt/sif-common-formik-ds/lib/components/formik-radio-group/FormikRadioGroup';\n\ninterface Props {\n    periodenErKunHelligdager: boolean;\n    skalViseGamleUtsettelseÅrsaker: boolean;\n    erFarEllerMedmor: boolean;\n    tidsperiodenErInnenforFørsteSeksUker: boolean;\n    utsettelseårsak: UtsettelseÅrsakType | '';\n    vedlegg: Attachment[];\n    erMorUfør: boolean;\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean;\n    isOpen: boolean;\n}\n\nconst getUtsettelseÅrsakOptions = (\n    intl: IntlShape,\n    periodenErKunHelligdager: boolean,\n    skalViseGamleUtsettelseÅrsaker: boolean,\n    erFarEllerMedmor: boolean,\n    tidsperiodenErInnenforFørsteSeksUker: boolean,\n    erMorUfør: boolean,\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean,\n) => {\n    const allRadios: FormikRadioProp[] = [\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.jegskalhaferie'),\n            value: UtsettelseÅrsakType.Ferie,\n            disabled: periodenErKunHelligdager === true,\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.jegskaljobbeheltid'),\n            value: UtsettelseÅrsakType.Arbeid,\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.pgasykdom'),\n            value: UtsettelseÅrsakType.Sykdom,\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.institusjonBarn'),\n            value: UtsettelseÅrsakType.InstitusjonBarnet,\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.institusjonSøker'),\n            value: UtsettelseÅrsakType.InstitusjonSøker,\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.hv_øvelse'),\n            value: UtsettelseÅrsakType.HvØvelse,\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.navtiltak'),\n            value: UtsettelseÅrsakType.NavTiltak,\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.fri'),\n            value: UtsettelseÅrsakType.Fri,\n        },\n    ];\n\n    const defaultRadios = allRadios.filter((option) => {\n        if (skalViseGamleUtsettelseÅrsaker) {\n            if (option.value === UtsettelseÅrsakType.Fri) {\n                return false;\n            }\n\n            return true;\n        }\n\n        if (!skalViseGamleUtsettelseÅrsaker && !erFarEllerMedmor) {\n            if (tidsperiodenErInnenforFørsteSeksUker) {\n                return (\n                    option.value === UtsettelseÅrsakType.Sykdom ||\n                    option.value === UtsettelseÅrsakType.InstitusjonBarnet ||\n                    option.value === UtsettelseÅrsakType.InstitusjonSøker\n                );\n            }\n\n            return false;\n        }\n\n        if (!skalViseGamleUtsettelseÅrsaker && erFarEllerMedmor) {\n            if (!erMorUfør) {\n                if (option.value === UtsettelseÅrsakType.Fri && søkerErFarEllerMedmorOgKunDeHarRett) {\n                    return true;\n                }\n\n                return false;\n            }\n\n            if (tidsperiodenErInnenforFørsteSeksUker) {\n                return (\n                    option.value === UtsettelseÅrsakType.Sykdom ||\n                    option.value === UtsettelseÅrsakType.InstitusjonBarnet ||\n                    option.value === UtsettelseÅrsakType.InstitusjonSøker\n                );\n            }\n\n            return option.value === UtsettelseÅrsakType.Fri;\n        }\n\n        return option.value === UtsettelseÅrsakType.Sykdom || option.value === UtsettelseÅrsakType.Fri;\n    });\n\n    return defaultRadios;\n};\n\nconst getUtsettelseårsakSkjemanummer = (årsak: UtsettelseÅrsakType | '') => {\n    switch (årsak) {\n        case UtsettelseÅrsakType.Sykdom:\n            return Skjemanummer.DOK_OVERFØRING_FOR_SYK;\n        case UtsettelseÅrsakType.InstitusjonSøker:\n        case UtsettelseÅrsakType.InstitusjonBarnet:\n            return Skjemanummer.DOK_INNLEGGELSE;\n        case UtsettelseÅrsakType.HvØvelse:\n            return Skjemanummer.HV_ØVELSE;\n        case UtsettelseÅrsakType.NavTiltak:\n            return Skjemanummer.NAV_TILTAK;\n        default:\n            return Skjemanummer.ANNET;\n    }\n};\n\nconst showAttachmentUploader = (årsak: UtsettelseÅrsakType | ''): boolean => {\n    switch (årsak) {\n        case UtsettelseÅrsakType.Sykdom:\n        case UtsettelseÅrsakType.InstitusjonSøker:\n        case UtsettelseÅrsakType.InstitusjonBarnet:\n        case UtsettelseÅrsakType.HvØvelse:\n        case UtsettelseÅrsakType.NavTiltak:\n            return true;\n        default:\n            return false;\n    }\n};\n\nconst getAttachmentUploaderLabel = (årsak: UtsettelseÅrsakType | ''): string => {\n    switch (årsak) {\n        case UtsettelseÅrsakType.Sykdom:\n        case UtsettelseÅrsakType.InstitusjonSøker:\n        case UtsettelseÅrsakType.InstitusjonBarnet:\n            return 'Last opp dokumentasjon for sykdom';\n        case UtsettelseÅrsakType.HvØvelse:\n            return 'Last opp dokumentasjon for HV-øvelse';\n        case UtsettelseÅrsakType.NavTiltak:\n            return 'Last opp dokumentasjon for NAV tiltak';\n        default:\n            return '';\n    }\n};\n\nconst getAttachmentUploaderType = (årsak: UtsettelseÅrsakType | ''): AttachmentType => {\n    switch (årsak) {\n        case UtsettelseÅrsakType.Sykdom:\n        case UtsettelseÅrsakType.InstitusjonSøker:\n        case UtsettelseÅrsakType.InstitusjonBarnet:\n            return AttachmentType.UTSETTELSE_SYKDOM;\n        case UtsettelseÅrsakType.HvØvelse:\n            return AttachmentType.HV_ØVELSE;\n        case UtsettelseÅrsakType.NavTiltak:\n            return AttachmentType.NAV_TILTAK;\n        default:\n            return AttachmentType.UTSETTELSE_SYKDOM; // Should never happen\n    }\n};\n\nconst getVeilederTekst = (årsak: UtsettelseÅrsakType | ''): React.ReactElement => {\n    switch (årsak) {\n        case UtsettelseÅrsakType.Sykdom:\n        case UtsettelseÅrsakType.InstitusjonSøker:\n        case UtsettelseÅrsakType.InstitusjonBarnet:\n            return <FormattedMessage id=\"uttaksplan.veileder.sykdom\" />;\n        case UtsettelseÅrsakType.HvØvelse:\n            return <FormattedMessage id=\"uttaksplan.veileder.hvØvelse\" />;\n        case UtsettelseÅrsakType.NavTiltak:\n            return <FormattedMessage id=\"uttaksplan.veileder.navTiltak\" />;\n        default:\n            return <FormattedMessage id=\"uttaksplan.veileder.sykdom\" />; // Should never happen\n    }\n};\n\nconst UtsettelseÅrsakSpørsmål: FunctionComponent<Props> = ({\n    periodenErKunHelligdager,\n    skalViseGamleUtsettelseÅrsaker,\n    erFarEllerMedmor,\n    tidsperiodenErInnenforFørsteSeksUker,\n    utsettelseårsak,\n    vedlegg,\n    erMorUfør,\n    søkerErFarEllerMedmorOgKunDeHarRett,\n    isOpen,\n}) => {\n    const intl = useIntl();\n    const årsakOptions = getUtsettelseÅrsakOptions(\n        intl,\n        periodenErKunHelligdager,\n        skalViseGamleUtsettelseÅrsaker,\n        erFarEllerMedmor,\n        tidsperiodenErInnenforFørsteSeksUker,\n        erMorUfør,\n        søkerErFarEllerMedmorOgKunDeHarRett,\n    );\n\n    if (årsakOptions.length === 0) {\n        return (\n            <GuidePanel>\n                <Block padBottom=\"l\">\n                    <BodyShort>\n                        <b>\n                            <FormattedMessage id=\"uttaksplan.veileder.trengerIkkeUtsettelse.del1\" />\n                        </b>\n                    </BodyShort>\n                </Block>\n                <Block padBottom=\"l\">\n                    <BodyShort>\n                        <FormattedMessage id=\"uttaksplan.veileder.trengerIkkeUtsettelse.del2\" />\n                    </BodyShort>\n                </Block>\n                <Block padBottom=\"l\">\n                    <BodyShort>\n                        <FormattedMessage id=\"uttaksplan.veileder.trengerIkkeUtsettelse.del3\" />\n                    </BodyShort>\n                </Block>\n            </GuidePanel>\n        );\n    }\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <PeriodeUtsettelseFormComponents.RadioGroup\n                    legend=\"Velg årsak for utsettelse\"\n                    name={PeriodeUtsettelseFormField.årsak}\n                    radios={årsakOptions}\n                    validate={(value) => {\n                        if (value === '') {\n                            return 'Årsak må fylles ut';\n                        }\n                        return undefined;\n                    }}\n                />\n            </Block>\n            <Block padBottom=\"l\" visible={showAttachmentUploader(utsettelseårsak)}>\n                <GuidePanel>{getVeilederTekst(utsettelseårsak)}</GuidePanel>\n            </Block>\n            <Block padBottom=\"l\" visible={showAttachmentUploader(utsettelseårsak) && isOpen}>\n                <FormikFileUploader\n                    legend=\"Dokumentasjon for utsettelsesårsak\"\n                    label={getAttachmentUploaderLabel(utsettelseårsak)}\n                    name={PeriodeUtsettelseFormField.vedlegg}\n                    attachments={vedlegg || []}\n                    attachmentType={getAttachmentUploaderType(utsettelseårsak)}\n                    skjemanummer={getUtsettelseårsakSkjemanummer(utsettelseårsak)}\n                />\n            </Block>\n        </>\n    );\n};\n\nexport default UtsettelseÅrsakSpørsmål;\n","import {\n    getTidsperiode,\n    getUkerOgDagerFromDager,\n    intlUtils,\n    isForeldrepengerFørFødselUttaksperiode,\n    Periode,\n    Situasjon,\n    Tidsperiode,\n    TidsperiodeDate,\n    Tidsperioden,\n    Utsettelsesperiode,\n} from '@navikt/fp-common';\nimport UkerDagerTeller from './../uker-dager-teller/UkerDagerTeller';\nimport dayjs from 'dayjs';\n\nimport { useIntl } from 'react-intl';\nimport TidsperiodeForm, { TidsperiodeFormValues } from '../uttaks-forms/tidsperiode-form/TidsperiodeForm';\nimport { Modal } from '@navikt/ds-react';\n\ninterface Props {\n    periode: Periode;\n    tidsperiode: TidsperiodeDate;\n    familiehendelsesdato: Date;\n    ugyldigeTidsperioder: Tidsperiode[] | undefined;\n    utsettelserIPlan: Utsettelsesperiode[];\n    visible: boolean;\n    erFarEllerMedmor: boolean;\n    morHarRett: boolean;\n    situasjon: Situasjon;\n    erFarMedmorOgHarAleneomsorg: boolean;\n    onAvbryt: () => void;\n    onBekreft: (tidsperiode: TidsperiodeFormValues) => void;\n    changeTidsperiode: (tidsperiode: Partial<TidsperiodeDate>) => void;\n}\n\nconst UtsettelseEndreTidsperiodeSpørsmål: React.FunctionComponent<Props> = ({\n    onBekreft,\n    onAvbryt,\n    changeTidsperiode,\n    visible,\n    periode,\n    tidsperiode,\n    familiehendelsesdato,\n    ugyldigeTidsperioder,\n    utsettelserIPlan,\n    erFarEllerMedmor,\n    morHarRett,\n    situasjon,\n    erFarMedmorOgHarAleneomsorg,\n}) => {\n    const intl = useIntl();\n    const erForeldrepengerFørFødsel = isForeldrepengerFørFødselUttaksperiode(periode);\n    const initialMonth = erForeldrepengerFørFødsel ? familiehendelsesdato : undefined;\n    const varighetIDager =\n        tidsperiode &&\n        tidsperiode.fom &&\n        tidsperiode.tom &&\n        dayjs(tidsperiode.fom).isSameOrBefore(tidsperiode.tom, 'day')\n            ? Tidsperioden({\n                  fom: tidsperiode.fom,\n                  tom: tidsperiode.tom,\n              }).getAntallUttaksdager()\n            : undefined;\n    const { uker, dager } = varighetIDager ? getUkerOgDagerFromDager(Math.abs(varighetIDager)) : { uker: 0, dager: 0 };\n    const handleOnSubmit = (values: TidsperiodeFormValues) => {\n        onBekreft(values);\n    };\n\n    const getDagValue = (uker: number, dager: number): number => {\n        if (dager >= 5) {\n            return 0;\n        }\n\n        if (uker === 0 && dager === 0) {\n            return 1;\n        }\n\n        return dager;\n    };\n\n    return (\n        <>\n            <Modal open={visible} closeButton={true} onClose={onAvbryt} aria-label=\"Endre tidsperiode\">\n                <Modal.Content>\n                    <TidsperiodeForm\n                        familiehendelsesdato={familiehendelsesdato}\n                        onBekreft={handleOnSubmit}\n                        periode={periode}\n                        tidsperiode={tidsperiode}\n                        ugyldigeTidsperioder={ugyldigeTidsperioder}\n                        utsettelserIPlan={utsettelserIPlan}\n                        initialMonth={initialMonth}\n                        erFarEllerMedmor={erFarEllerMedmor}\n                        morHarRett={morHarRett}\n                        situasjon={situasjon}\n                        erFarMedmorOgHarAleneomsorg={erFarMedmorOgHarAleneomsorg}\n                    />\n                </Modal.Content>\n            </Modal>\n            <UkerDagerTeller\n                ukeLegend={intlUtils(intl, 'uker.label')}\n                dagLegend={intlUtils(intl, 'dager.label')}\n                ukeStepper={{\n                    value: uker !== undefined ? uker : 0,\n                    min: 0,\n                    max: 100,\n                    onChange: (nyUker: number) => {\n                        const date = tidsperiode.fom;\n                        if (date) {\n                            changeTidsperiode({\n                                fom: date,\n                                tom: getTidsperiode(date, Math.min(nyUker, 200) * 5 + getDagValue(nyUker, dager)).tom,\n                            });\n                        }\n                    },\n                    increaseAriaLabel: 'Øk antall uker med en uke',\n                    decreaseAriaLabel: 'Mink antall uker med en uke',\n                }}\n                dagStepper={{\n                    value: getDagValue(uker, dager),\n                    min: uker === 0 ? 1 : 0,\n                    max: 5,\n                    onChange: (nyDager: number) => {\n                        const date = tidsperiode.fom;\n                        const ekstraUke = nyDager === 5 ? 1 : 0;\n\n                        if (date) {\n                            changeTidsperiode({\n                                fom: date,\n                                tom: getTidsperiode(date, (uker + ekstraUke) * 5 + getDagValue(uker, nyDager)).tom,\n                            });\n                        }\n                    },\n                    increaseAriaLabel: 'Øk antall dager med en dag',\n                    decreaseAriaLabel: 'Mink antall dager med en dag',\n                }}\n            />\n        </>\n    );\n};\n\nexport default UtsettelseEndreTidsperiodeSpørsmål;\n","import {\n    bemUtils,\n    Block,\n    guid,\n    hasValue,\n    intlUtils,\n    ActionLink,\n    NavnPåForeldre,\n    Situasjon,\n    Arbeidsforhold,\n    Periode,\n    Utsettelsesperiode,\n    førsteOktober2021ReglerGjelder,\n    getIsValidStateForPerioder,\n    Tidsperioden,\n    isValidTidsperiode,\n    ISOStringToDate,\n    getSlettPeriodeTekst,\n    Attachment,\n    PeriodeValidState,\n} from '@navikt/fp-common';\nimport { Dispatch, FunctionComponent, useEffect, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { SubmitListener } from '../submit-listener/SubmitListener';\nimport TidsperiodeForm from '../tidsperiode-form/TidsperiodeForm';\nimport {\n    PeriodeUtsettelseFormComponents,\n    PeriodeUtsettelseFormData,\n    PeriodeUtsettelseFormField,\n} from './periodeUtsettelseFormConfig';\nimport {\n    cleanupPeriodeUtsettelseFormData,\n    getPeriodeUtsettelseFormInitialValues,\n    mapPeriodeUtsettelseFormToPeriode,\n} from './periodeUtsettelseFormUtils';\n\nimport {\n    PeriodeUtsettelseFormConfigPayload,\n    periodeUtsettelseFormQuestionsConfig,\n} from './periodeUtsettelseFormQuestionsConfig';\nimport UtsettelseÅrsakSpørsmål from '../spørsmål/utsettelse-årsak/UtsettelseÅrsakSpørsmål';\nimport AktivitetskravSpørsmål from '../spørsmål/aktivitetskrav/AktivitetskravSpørsmål';\nimport { Button } from '@navikt/ds-react';\nimport TidsperiodeDisplay from '../../tidsperiode-display/TidsperiodeDisplay';\nimport UtsettelseEndreTidsperiodeSpørsmål from '../../utsettelse-tidsperiode-spørsmål/UtsettelseTidsperiodeSpørsmål';\n\nimport './periodeUtsettelseForm.less';\n\ninterface Props {\n    periode: Periode;\n    familiehendelsesdato: Date;\n    erFarEllerMedmor: boolean;\n    erAleneOmOmsorg: boolean;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n    handleAddPeriode?: (nyPeriode: Periode, familiehendelsedato: Date) => void;\n    setNyPeriodeFormIsVisible?: Dispatch<React.SetStateAction<boolean>>;\n    toggleIsOpen?: (id: string) => void;\n    handleDeletePeriode?: (periodeId: string) => void;\n    isNyPeriode?: boolean;\n    navnPåForeldre: NavnPåForeldre;\n    erMorUfør: boolean;\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean;\n    arbeidsforhold: Arbeidsforhold[];\n    situasjon: Situasjon;\n    utsettelserIPlan: Utsettelsesperiode[];\n    setPerioderErGyldige: React.Dispatch<React.SetStateAction<PeriodeValidState[]>>;\n    isOpen: boolean;\n    saveAttachment: (vedlegg: Attachment) => void;\n}\n\nconst PeriodeUtsettelseForm: FunctionComponent<Props> = ({\n    periode,\n    familiehendelsesdato,\n    handleUpdatePeriode,\n    erFarEllerMedmor,\n    erAleneOmOmsorg,\n    handleAddPeriode,\n    handleDeletePeriode,\n    toggleIsOpen,\n    isNyPeriode = false,\n    setNyPeriodeFormIsVisible,\n    navnPåForeldre,\n    erMorUfør,\n    søkerErFarEllerMedmorOgKunDeHarRett,\n    situasjon,\n    utsettelserIPlan,\n    setPerioderErGyldige,\n    isOpen,\n    saveAttachment,\n}) => {\n    const intl = useIntl();\n    const [periodeIsValid, setPeriodeIsValid] = useState(true);\n    const { id } = periode;\n    const [tidsperiodeIsOpen, setTidsperiodeIsOpen] = useState(false);\n    const bem = bemUtils('periodeUtsettelseForm');\n    const skalViseGamleUtsettelseÅrsaker = førsteOktober2021ReglerGjelder(familiehendelsesdato) === false; // Utsettelseårsaker som gjelder for søknader sendt før 1. oktober 2021\n    const erFarMedmorOgHarAleneomsorg = erFarEllerMedmor && erAleneOmOmsorg;\n\n    const toggleVisTidsperiode = () => {\n        setTidsperiodeIsOpen(!tidsperiodeIsOpen);\n    };\n\n    useEffect(() => {\n        setPerioderErGyldige((previousState: PeriodeValidState[]) => {\n            return getIsValidStateForPerioder(previousState, periode, periodeIsValid);\n        });\n    }, [periodeIsValid]);\n\n    return (\n        <PeriodeUtsettelseFormComponents.FormikWrapper\n            initialValues={getPeriodeUtsettelseFormInitialValues(periode)}\n            onSubmit={(values) => {\n                if (!isNyPeriode) {\n                    handleUpdatePeriode(\n                        mapPeriodeUtsettelseFormToPeriode(values, id, erFarEllerMedmor),\n                        familiehendelsesdato,\n                    );\n                } else {\n                    setNyPeriodeFormIsVisible!(false);\n                    handleAddPeriode!(\n                        mapPeriodeUtsettelseFormToPeriode(values, guid(), erFarEllerMedmor),\n                        familiehendelsesdato,\n                    );\n                }\n            }}\n            renderForm={({ setFieldValue, values, isValid }) => {\n                const visibility = periodeUtsettelseFormQuestionsConfig.getVisbility({\n                    values,\n                    erFarEllerMedmor,\n                    erAleneOmOmsorg,\n                    søkerErFarEllerMedmorOgKunDeHarRett,\n                } as PeriodeUtsettelseFormConfigPayload);\n                if (isValid !== periodeIsValid) {\n                    setPeriodeIsValid(isValid);\n                }\n                const antallHelligdager = Tidsperioden({ fom: values.fom!, tom: values.tom! }).getAntallFridager();\n                const antallUttaksdager = Tidsperioden({ fom: values.fom!, tom: values.tom! }).getAntallUttaksdager();\n                const periodenErKunHelligdager = antallHelligdager === antallUttaksdager;\n                return (\n                    <>\n                        <Block visible={!isValidTidsperiode({ fom: values.fom!, tom: values.tom! })} padBottom=\"xl\">\n                            <TidsperiodeForm\n                                tidsperiode={{ fom: values.fom!, tom: values.tom! }}\n                                familiehendelsesdato={familiehendelsesdato}\n                                onBekreft={(values) => {\n                                    setFieldValue(PeriodeUtsettelseFormField.fom, ISOStringToDate(values.fom));\n                                    setFieldValue(PeriodeUtsettelseFormField.tom, ISOStringToDate(values.tom));\n                                }}\n                                ugyldigeTidsperioder={undefined}\n                                utsettelserIPlan={utsettelserIPlan}\n                                erFarEllerMedmor={erFarEllerMedmor}\n                                morHarRett={!søkerErFarEllerMedmorOgKunDeHarRett}\n                                situasjon={situasjon}\n                                erFarMedmorOgHarAleneomsorg={erFarMedmorOgHarAleneomsorg}\n                            />\n                        </Block>\n                        <PeriodeUtsettelseFormComponents.Form includeButtons={false}>\n                            {!isNyPeriode && (\n                                <SubmitListener\n                                    cleanup={() =>\n                                        cleanupPeriodeUtsettelseFormData(values as PeriodeUtsettelseFormData)\n                                    }\n                                />\n                            )}\n\n                            <Block visible={isValidTidsperiode({ fom: values.fom!, tom: values.tom! })} padBottom=\"xl\">\n                                <TidsperiodeDisplay\n                                    tidsperiode={{ fom: values.fom!, tom: values.tom! }}\n                                    toggleVisTidsperiode={toggleVisTidsperiode}\n                                />\n                                <UtsettelseEndreTidsperiodeSpørsmål\n                                    periode={periode}\n                                    familiehendelsesdato={familiehendelsesdato}\n                                    ugyldigeTidsperioder={undefined}\n                                    utsettelserIPlan={utsettelserIPlan}\n                                    onBekreft={(values) => {\n                                        toggleVisTidsperiode();\n                                        setFieldValue(PeriodeUtsettelseFormField.fom, ISOStringToDate(values.fom));\n                                        setFieldValue(PeriodeUtsettelseFormField.tom, ISOStringToDate(values.tom));\n                                    }}\n                                    changeTidsperiode={(values) => {\n                                        setTimeout(() => {\n                                            setFieldValue(PeriodeUtsettelseFormField.fom, values.fom);\n                                            setFieldValue(PeriodeUtsettelseFormField.tom, values.tom);\n                                        }, 0);\n                                    }}\n                                    tidsperiode={{ fom: values.fom!, tom: values.tom! }}\n                                    onAvbryt={() => toggleVisTidsperiode()}\n                                    visible={tidsperiodeIsOpen}\n                                    erFarEllerMedmor={erFarEllerMedmor}\n                                    morHarRett={!søkerErFarEllerMedmorOgKunDeHarRett}\n                                    situasjon={situasjon}\n                                    erFarMedmorOgHarAleneomsorg={erFarMedmorOgHarAleneomsorg}\n                                />\n                            </Block>\n                            <Block visible={visibility.isVisible(PeriodeUtsettelseFormField.årsak)} padBottom=\"xl\">\n                                <UtsettelseÅrsakSpørsmål\n                                    periodenErKunHelligdager={periodenErKunHelligdager}\n                                    skalViseGamleUtsettelseÅrsaker={skalViseGamleUtsettelseÅrsaker}\n                                    erFarEllerMedmor={erFarEllerMedmor}\n                                    tidsperiodenErInnenforFørsteSeksUker={Tidsperioden({\n                                        fom: values.fom!,\n                                        tom: values.tom!,\n                                    }).erInnenforFørsteSeksUker(familiehendelsesdato)}\n                                    utsettelseårsak={values.årsak!}\n                                    vedlegg={values.vedlegg!}\n                                    erMorUfør={erMorUfør}\n                                    søkerErFarEllerMedmorOgKunDeHarRett={søkerErFarEllerMedmorOgKunDeHarRett}\n                                    isOpen={isOpen}\n                                />\n                            </Block>\n                            <Block\n                                visible={visibility.isVisible(PeriodeUtsettelseFormField.bekrefterArbeidIPerioden)}\n                                padBottom=\"xl\"\n                            >\n                                <PeriodeUtsettelseFormComponents.Checkbox\n                                    name={PeriodeUtsettelseFormField.bekrefterArbeidIPerioden}\n                                    label={intlUtils(intl, 'uttaksplan.bekrefterArbeidIPerioden')}\n                                    validate={(value) => {\n                                        if (!hasValue(value) || value === undefined || value === false) {\n                                            return intlUtils(intl, 'uttaksplan.validering.bekrefterArbeidIPerioden');\n                                        }\n\n                                        return undefined;\n                                    }}\n                                />\n                            </Block>\n                            <Block\n                                visible={visibility.isVisible(PeriodeUtsettelseFormField.morsAktivitetIPerioden)}\n                                padBottom=\"xl\"\n                            >\n                                <AktivitetskravSpørsmål\n                                    aktivitetskravMorValue={values.morsAktivitetIPerioden!}\n                                    aktivitetskravVedlegg={values.morsAktivitetIPeriodenDokumentasjon!}\n                                    fieldName={PeriodeUtsettelseFormField.morsAktivitetIPerioden}\n                                    navnPåForeldre={navnPåForeldre}\n                                    FormComponents={PeriodeUtsettelseFormComponents}\n                                    vedleggFieldName={PeriodeUtsettelseFormField.morsAktivitetIPeriodenDokumentasjon}\n                                    isOpen={isOpen}\n                                    saveAttachment={saveAttachment}\n                                />\n                            </Block>\n                            <Block\n                                visible={\n                                    !isNyPeriode && handleDeletePeriode !== undefined && toggleIsOpen !== undefined\n                                }\n                            >\n                                <div style={{ textAlign: 'center', position: 'relative' }}>\n                                    <Button variant=\"secondary\" onClick={() => toggleIsOpen!(periode.id)}>\n                                        <FormattedMessage id=\"uttaksplan.lukk\" />\n                                    </Button>\n                                    <div className={bem.element('slettPeriodeWrapper')}>\n                                        <ActionLink\n                                            onClick={() => handleDeletePeriode!(periode.id)}\n                                            className={bem.element('slettPeriode')}\n                                        >\n                                            <FormattedMessage id={getSlettPeriodeTekst(periode.type)} />\n                                        </ActionLink>\n                                    </div>\n                                </div>\n                            </Block>\n                            <Block\n                                visible={\n                                    isNyPeriode &&\n                                    setNyPeriodeFormIsVisible !== undefined &&\n                                    handleAddPeriode !== undefined\n                                }\n                            >\n                                <div className={bem.element('knapperad')}>\n                                    <Button variant=\"secondary\" onClick={() => setNyPeriodeFormIsVisible!(false)}>\n                                        <FormattedMessage id=\"uttaksplan.avbryt\" />\n                                    </Button>\n                                    {visibility.areAllQuestionsAnswered() ? (\n                                        <Button type=\"submit\">\n                                            <FormattedMessage id=\"uttaksplan.leggTil\" />\n                                        </Button>\n                                    ) : null}\n                                </div>\n                            </Block>\n                        </PeriodeUtsettelseFormComponents.Form>\n                    </>\n                );\n            }}\n        />\n    );\n};\n\nexport default PeriodeUtsettelseForm;\n","import {\n    AnnenForelder,\n    Arbeidsforhold,\n    Attachment,\n    Block,\n    NavnPåForeldre,\n    Periode,\n    PeriodeValidState,\n    Periodetype,\n    Situasjon,\n    TilgjengeligStønadskonto,\n    Utsettelsesperiode,\n} from '@navikt/fp-common';\nimport { Dispatch, FunctionComponent, SetStateAction, useState } from 'react';\nimport PeriodeUttakForm from '../periode-uttak-form/PeriodeUttakForm';\nimport PeriodeUtsettelseForm from '../periode-utsettelse-form/PeriodeUtsettelseForm';\nimport { FormattedMessage, IntlShape } from 'react-intl';\nimport { Heading } from '@navikt/ds-react';\n\ninterface Props {\n    familiehendelsesdato: Date;\n    stønadskontoer: TilgjengeligStønadskonto[];\n    navnPåForeldre: NavnPåForeldre;\n    annenForelder: AnnenForelder;\n    setNyPeriodeFormIsVisible: Dispatch<SetStateAction<boolean>>;\n    arbeidsforhold: Arbeidsforhold[];\n    isUtsettelse: boolean;\n    handleAddPeriode: (nyPeriode: Periode, familiehendelsedato: Date) => void;\n    erFarEllerMedmor: boolean;\n    erFlerbarnssøknad: boolean;\n    erAleneOmOmsorg: boolean;\n    erDeltUttak: boolean;\n    situasjon: Situasjon;\n    erMorUfør: boolean;\n    setPerioderErGyldige: React.Dispatch<React.SetStateAction<PeriodeValidState[]>>;\n    nesteLedigeUttaksdato: Date | undefined;\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean;\n    erEndringssøknad: boolean;\n    termindato: Date | undefined;\n    antallBarn: number;\n    utsettelserIPlan: Utsettelsesperiode[];\n    intl: IntlShape;\n    saveAttachment: (vedlegg: Attachment) => void;\n}\n\nconst NyPeriode: FunctionComponent<Props> = ({\n    setNyPeriodeFormIsVisible,\n    isUtsettelse,\n    annenForelder,\n    arbeidsforhold,\n    navnPåForeldre,\n    stønadskontoer,\n    familiehendelsesdato,\n    handleAddPeriode,\n    erFarEllerMedmor,\n    erFlerbarnssøknad,\n    erAleneOmOmsorg,\n    erDeltUttak,\n    situasjon,\n    erMorUfør,\n    setPerioderErGyldige,\n    nesteLedigeUttaksdato,\n    søkerErFarEllerMedmorOgKunDeHarRett,\n    erEndringssøknad,\n    termindato,\n    antallBarn,\n    utsettelserIPlan,\n    intl,\n    saveAttachment,\n}) => {\n    const [periode, setPeriode] = useState<Periode>({\n        type: isUtsettelse ? Periodetype.Utsettelse : Periodetype.Uttak,\n        tidsperiode: { fom: isUtsettelse ? undefined : nesteLedigeUttaksdato },\n    } as Periode);\n\n    return !isUtsettelse ? (\n        <>\n            <Block padBottom=\"xl\">\n                <Heading size=\"small\">\n                    <FormattedMessage id=\"uttaksplan.nyPeriode.tittel\" />\n                </Heading>\n            </Block>\n            <PeriodeUttakForm\n                periode={periode}\n                handleUpdatePeriode={setPeriode}\n                handleAddPeriode={handleAddPeriode}\n                annenForelder={annenForelder}\n                arbeidsforhold={arbeidsforhold}\n                familiehendelsesdato={familiehendelsesdato}\n                navnPåForeldre={navnPåForeldre}\n                stønadskontoer={stønadskontoer}\n                setNyPeriodeFormIsVisible={setNyPeriodeFormIsVisible}\n                isNyPeriode={true}\n                erFarEllerMedmor={erFarEllerMedmor}\n                erFlerbarnssøknad={erFlerbarnssøknad}\n                erAleneOmOmsorg={erAleneOmOmsorg}\n                erDeltUttak={erDeltUttak}\n                situasjon={situasjon}\n                erMorUfør={erMorUfør}\n                setPerioderErGyldige={setPerioderErGyldige}\n                erEndringssøknad={erEndringssøknad}\n                termindato={termindato}\n                morHarRett={!søkerErFarEllerMedmorOgKunDeHarRett}\n                antallBarn={antallBarn}\n                utsettelserIPlan={utsettelserIPlan}\n                intl={intl}\n                isOpen={true}\n                saveAttachment={saveAttachment}\n            />\n        </>\n    ) : (\n        <PeriodeUtsettelseForm\n            periode={periode}\n            familiehendelsesdato={familiehendelsesdato}\n            handleUpdatePeriode={setPeriode}\n            erFarEllerMedmor={erFarEllerMedmor}\n            erAleneOmOmsorg={erAleneOmOmsorg}\n            handleAddPeriode={handleAddPeriode}\n            setNyPeriodeFormIsVisible={setNyPeriodeFormIsVisible}\n            isNyPeriode={true}\n            navnPåForeldre={navnPåForeldre}\n            erMorUfør={erMorUfør}\n            søkerErFarEllerMedmorOgKunDeHarRett={søkerErFarEllerMedmorOgKunDeHarRett}\n            arbeidsforhold={arbeidsforhold}\n            situasjon={situasjon}\n            utsettelserIPlan={utsettelserIPlan}\n            setPerioderErGyldige={setPerioderErGyldige}\n            isOpen={true}\n            saveAttachment={saveAttachment}\n        />\n    );\n};\n\nexport default NyPeriode;\n","import classnames from 'classnames';\nimport { bemUtils } from '@navikt/fp-common';\nimport { UttaksplanColor } from '../../types/UttaksplanColor';\n\nimport './iconBox.less';\n\nexport interface Props {\n    color: UttaksplanColor;\n    stripes?: boolean;\n    children?: React.ReactNode;\n}\n\nconst IconBox: React.FunctionComponent<Props> = ({ children, color, stripes }) => {\n    const bem = bemUtils('iconBox');\n\n    return (\n        <div className={classnames(bem.block, bem.modifier(`${color}${stripes ? '--striped' : ''}`))}>{children}</div>\n    );\n};\n\nexport default IconBox;\n","import { UttaksplanIkonProps } from '../components/uttaksplan-ikon/UttaksplanIkon';\n\nconst ArbeidIkon = (props: UttaksplanIkonProps) => {\n    const { title, ...rest } = props;\n    return (\n        <svg\n            focusable=\"false\"\n            role=\"img\"\n            aria-hidden=\"true\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            width={32}\n            height={32}\n            {...rest}\n        >\n            <title>{props.title}</title>\n            <defs>\n                <rect id=\"a\" width={32} height={32} rx={10} />\n            </defs>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <path\n                    fill=\"#FFF\"\n                    fillRule=\"nonzero\"\n                    d=\"M23.378 7.79l-.001-.002-1.666-1.665A.413.413 0 0 0 21.417 6H10.583a.417.417 0 0 0-.295.123L8.622 7.788l-.002.002a.463.463 0 0 0-.12.293v17.5c0 .23.187.417.417.417h5.416v-3.75c0-.23.187-.417.417-.417h2.5c.23 0 .417.187.417.417V26h5.416c.23 0 .417-.187.417-.417v-17.5a.46.46 0 0 0-.122-.293zM12.667 20.167h-2.5v-2.5h2.5v2.5zm0-4.167h-2.5v-2.5h2.5V16zm0-4.167h-2.5v-2.5h2.5v2.5zm5 8.334h-3.334v-2.5h3.334v2.5zm0-4.167h-3.334v-2.5h3.334V16zm0-4.167h-3.334v-2.5h3.334v2.5zm4.166 8.334h-2.5v-2.5h2.5v2.5zm0-4.167h-2.5v-2.5h2.5V16zm0-4.167h-2.5v-2.5h2.5v2.5zM9.923 7.667l.833-.834h10.488l.834.834H9.923z\"\n                />\n            </g>\n        </svg>\n    );\n};\n\nexport default ArbeidIkon;\n","import { UttaksplanIkonProps } from '../components/uttaksplan-ikon/UttaksplanIkon';\n\nconst FerieIkon = (props: UttaksplanIkonProps) => {\n    const { title, ...rest } = props;\n    return (\n        <svg\n            focusable=\"false\"\n            role=\"img\"\n            aria-hidden=\"true\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            width={32}\n            height={32}\n            {...rest}\n        >\n            <title>{props.title}</title>\n            <defs>\n                <rect id=\"a\" width={32} height={32} rx={10} />\n            </defs>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <g stroke=\"#FFF\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                    <path d=\"M25.583 19.737h-5c-2.042 0-3.85.657-4.991 1.667m4.991-1.654l-2.763-6.973m-2.149-5.423l-.307-.774\" />\n                    <path\n                        fill=\"#FFF\"\n                        d=\"M15.671 7.354c-4.065 1.61-6.704 4.571-5.517 7.566l.306.775 1.937-.769.468-1.081 1.082.468 7.747-3.07.467-1.082 1.082.467 1.937-.768-.307-.775c-1.188-2.995-5.138-3.342-9.202-1.731z\"\n                    />\n                    <path d=\"M25.583 24.75c-.833 0-1.666-.747-1.666-1.667 0 .92-.834 1.667-1.667 1.667-.833 0-1.667-.747-1.667-1.667 0 .92-.833 1.667-1.666 1.667-.834 0-1.667-.747-1.667-1.667 0 .92-.833 1.667-1.667 1.667-.833 0-1.666-.747-1.666-1.667 0 .92-.834 1.667-1.667 1.667-.833 0-1.667-.747-1.667-1.667 0 .92-.833 1.667-1.666 1.667-.834 0-1.667-.747-1.667-1.667 0 .575-.386 1.083-.833 1.383\" />\n                </g>\n            </g>\n        </svg>\n    );\n};\n\nexport default FerieIkon;\n","import { UttaksplanIkonProps } from '../components/uttaksplan-ikon/UttaksplanIkon';\n\nconst SykdomIkon = (props: UttaksplanIkonProps) => {\n    const { title, ...rest } = props;\n    return (\n        <svg\n            focusable=\"false\"\n            role=\"img\"\n            aria-hidden=\"true\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            width={32}\n            height={32}\n            {...rest}\n        >\n            <title>{props.title}</title>\n            <defs>\n                <rect id=\"a\" width={32} height={32} rx={10} />\n                <path\n                    id=\"c\"\n                    d=\"M8.294 1.518l10.19 10.19c1.823 1.822 1.785 4.82-.086 6.69s-4.867 1.91-6.69.086L1.518 8.294c-1.823-1.822-1.786-4.818.086-6.69 1.872-1.871 4.867-1.91 6.69-.086zm6.27 7.4l-3.473-3.476-5.648 5.647 3.475 3.476 5.646-5.648zM3.258 6.65a.472.472 0 0 0-.138.339.499.499 0 0 0 .49.489A.472.472 0 0 0 4.085 7a.497.497 0 0 0-.489-.489.472.472 0 0 0-.34.138zM4.96 4.963a.47.47 0 0 0-.137.34.498.498 0 0 0 .488.488.47.47 0 0 0 .476-.476.496.496 0 0 0-.488-.488.466.466 0 0 0-.34.136zm-2.005-.31a.468.468 0 0 0-.138.338.499.499 0 0 0 .49.49.47.47 0 0 0 .476-.478.497.497 0 0 0-.489-.489.468.468 0 0 0-.34.138zm1.694-1.694a.472.472 0 0 0-.138.34.496.496 0 0 0 .488.487.467.467 0 0 0 .477-.477.496.496 0 0 0-.488-.488.472.472 0 0 0-.34.138zm.622 4.009a.47.47 0 0 0-.136.34.496.496 0 0 0 .489.488.466.466 0 0 0 .476-.476.498.498 0 0 0-.488-.489.474.474 0 0 0-.341.137zm1.694-1.693a.472.472 0 0 0-.138.34.496.496 0 0 0 .488.487.467.467 0 0 0 .477-.477.495.495 0 0 0-.488-.487.472.472 0 0 0-.34.137zM6.654 3.27a.472.472 0 0 0-.138.339.5.5 0 0 0 .49.49.47.47 0 0 0 .477-.477.5.5 0 0 0-.49-.49.472.472 0 0 0-.34.138zm5.993 12.771a.468.468 0 0 0-.138.34.498.498 0 0 0 .49.488.47.47 0 0 0 .337-.139.47.47 0 0 0 .14-.337.499.499 0 0 0-.49-.49.468.468 0 0 0-.34.138zm1.694-1.696a.473.473 0 0 0-.137.339c.002.268.22.486.489.489a.466.466 0 0 0 .476-.476.499.499 0 0 0-.49-.49.476.476 0 0 0-.338.138zm.31 2.006a.472.472 0 0 0-.137.339.499.499 0 0 0 .49.489.472.472 0 0 0 .476-.477.497.497 0 0 0-.489-.489.472.472 0 0 0-.34.138zm1.696-1.693a.469.469 0 0 0-.137.338c.002.267.22.485.489.49a.469.469 0 0 0 .476-.477.499.499 0 0 0-.49-.489.472.472 0 0 0-.338.138zm-4.011-.623a.469.469 0 0 0-.137.338.497.497 0 0 0 .489.49.469.469 0 0 0 .476-.477.499.499 0 0 0-.489-.489.472.472 0 0 0-.34.138zm1.694-1.694a.472.472 0 0 0-.138.339.499.499 0 0 0 .489.489.472.472 0 0 0 .476-.476.495.495 0 0 0-.489-.49.469.469 0 0 0-.338.138zm2.005.31a.472.472 0 0 0-.137.34.499.499 0 0 0 .489.489.466.466 0 0 0 .475-.476.495.495 0 0 0-.489-.488.466.466 0 0 0-.338.136z\"\n                />\n            </defs>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <g transform=\"translate(6 6)\">\n                    <mask id=\"d\" fill=\"#fff\">\n                        <use xlinkHref=\"#c\" />\n                    </mask>\n                    <g fill=\"#FFF\" mask=\"url(#d)\">\n                        <path d=\"M0 20h20V0H0z\" />\n                    </g>\n                </g>\n            </g>\n        </svg>\n    );\n};\n\nexport default SykdomIkon;\n","import { UttaksplanIkonProps } from '../components/uttaksplan-ikon/UttaksplanIkon';\n\nconst TerminIkon = (props: UttaksplanIkonProps) => {\n    const { title, ...rest } = props;\n    return (\n        <svg focusable=\"false\" role=\"img\" aria-hidden=\"true\" width={24} height={24} viewBox=\"0 0 24 24\" {...rest}>\n            <title>{props.title}</title>\n            <path\n                fill=\"none\"\n                fillRule=\"evenodd\"\n                stroke=\"#3E3832\"\n                strokeLinejoin=\"round\"\n                d=\"M12 22.993s10.5-8.128 10.5-15.82-9.316-8.284-10.5-.59C10.816-1.112 1.5-.52 1.5 7.764S12 22.993 12 22.993z\"\n            />\n        </svg>\n    );\n};\n\nexport default TerminIkon;\n","import { UttaksplanIkonProps } from '../components/uttaksplan-ikon/UttaksplanIkon';\n\nconst UttakIkon = (props: UttaksplanIkonProps) => {\n    const { title, ...rest } = props;\n    return (\n        <svg\n            focusable=\"false\"\n            role=\"img\"\n            aria-hidden=\"true\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            width={32}\n            height={32}\n            {...rest}\n        >\n            <title>{props.title}</title>\n            <defs>\n                <rect id=\"a\" width={32} height={32} rx={10} />\n            </defs>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <g transform=\"translate(6 6)\">\n                    <circle cx={14.583} cy={17.083} r={1.083} stroke=\"#FFF\" strokeWidth={2} />\n                    <circle cx={7.083} cy={17.083} r={1.083} stroke=\"#FFF\" strokeWidth={2} />\n                    <path\n                        fill=\"#FFF\"\n                        d=\"M19.928 8.718c0 3.453-1.997 6.282-5.586 6.282H7.106c-2.586 0-4.682-2.21-4.682-4.936 0-.467.062-.918.176-1.346 3.038 0 14.084-.004 17.328 0zM13.886 2.5c3.734 0 6.042 2.836 6.042 5.385-1.835 0-4.85-.005-8.841-.005l2.8-5.38z\"\n                    />\n                    <path\n                        stroke=\"#FFF\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        d=\"M3.107 9.612c0-2.314-1.218-3.962-2.678-3.962\"\n                    />\n                </g>\n            </g>\n        </svg>\n    );\n};\n\nexport default UttakIkon;\n","import { SVGProps } from 'react';\nimport { XMarkOctagonFillIcon, ExclamationmarkTriangleFillIcon, InformationSquareIcon } from '@navikt/aksel-icons';\nimport ArbeidIkon from '../../assets/ArbeidIkon';\nimport FerieIkon from '../../assets/FerieIkon';\nimport SykdomIkon from '../../assets/SykdomIkon';\nimport TerminIkon from '../../assets/TerminIkon';\nimport UttakIkon from '../../assets/UttakIkon';\n\nexport interface UttaksplanIkonProps extends SVGProps<any> {\n    title: string;\n}\n\nexport enum UttaksplanIkonKeys {\n    'arbeid' = 'arbeid',\n    'ferie' = 'ferie',\n    'sykdom' = 'sykdom',\n    'termin' = 'termin',\n    'uttak' = 'uttak',\n    'info' = 'info',\n    'advarsel' = 'advarsel',\n    'feil' = 'feil',\n}\n\nexport interface Props {\n    ikon: UttaksplanIkonKeys;\n    title: string;\n}\n\nconst UttaksplanIkon: React.FunctionComponent<Props> = ({ ikon, title }) => {\n    switch (ikon) {\n        case 'arbeid':\n            return <ArbeidIkon title={title} />;\n        case 'ferie':\n            return <FerieIkon title={title} />;\n        case 'sykdom':\n            return <SykdomIkon title={title} />;\n        case 'termin':\n            return <TerminIkon title={title} />;\n        case 'info':\n            return <InformationSquareIcon />;\n        case 'advarsel':\n            return <ExclamationmarkTriangleFillIcon />;\n        case 'feil':\n            return <XMarkOctagonFillIcon />;\n        default:\n            return <UttakIkon title={title} />;\n    }\n};\n\nexport default UttaksplanIkon;\n","export enum UttaksplanColor {\n    'purple' = 'purple',\n    'blue' = 'blue',\n    'green' = 'green',\n    'purpleBlue' = 'purpleBlue',\n    'yellow' = 'yellow',\n    'white' = 'white',\n    'transparent' = 'transparent',\n    'infoBlue' = 'infoBlue',\n}\n","import { Forelder, Oppholdsperiode, Periode, Periodetype, StønadskontoType } from '@navikt/fp-common';\nimport { UttaksplanColor } from '../types/UttaksplanColor';\n\nexport const getForelderFarge = (forelder: Forelder) => {\n    return forelder === Forelder.mor ? UttaksplanColor.purple : UttaksplanColor.blue;\n};\n\nexport const getStønadskontoFarge = (\n    konto: StønadskontoType,\n    forelder: Forelder | undefined,\n    forIkon?: boolean,\n    harMidlertidigOmsorg?: boolean,\n): UttaksplanColor => {\n    if (forIkon && konto === StønadskontoType.Fellesperiode) {\n        return UttaksplanColor.purpleBlue;\n    }\n\n    if (harMidlertidigOmsorg) {\n        return UttaksplanColor.purple;\n    }\n\n    if (forelder === undefined) {\n        switch (konto) {\n            case StønadskontoType.Fedrekvote:\n            case StønadskontoType.AktivitetsfriKvote:\n                return UttaksplanColor.blue;\n            case StønadskontoType.Mødrekvote:\n            case StønadskontoType.Foreldrepenger:\n            case StønadskontoType.ForeldrepengerFørFødsel:\n                return UttaksplanColor.purple;\n            case StønadskontoType.Fellesperiode:\n                return UttaksplanColor.purpleBlue;\n            default:\n                return UttaksplanColor.transparent;\n        }\n    }\n    return getForelderFarge(forelder);\n};\n\nexport const getUtsettelseFarge = (): UttaksplanColor => {\n    return UttaksplanColor.green;\n};\n\nexport const getOppholdFarge = (periode: Oppholdsperiode): UttaksplanColor => {\n    return getForelderFarge(periode.forelder);\n};\n\nexport const getPeriodeFarge = (\n    periode: Periode,\n    forelder?: Forelder,\n    harMidlertidligOmsorg?: boolean,\n): UttaksplanColor | undefined => {\n    if (harMidlertidligOmsorg) {\n        return UttaksplanColor.purple;\n    }\n\n    if (periode.type === Periodetype.Uttak || periode.type === Periodetype.Overføring) {\n        return getStønadskontoFarge(periode.konto, periode.forelder || forelder);\n    }\n    if (periode.type === Periodetype.Utsettelse) {\n        return getUtsettelseFarge();\n    }\n    if (periode.type === Periodetype.Opphold) {\n        return getOppholdFarge(periode);\n    }\n    return undefined;\n};\n","import { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport IconBox from '../icon-box/IconBox';\nimport UttaksplanIkon, { UttaksplanIkonKeys } from '../uttaksplan-ikon/UttaksplanIkon';\nimport { Forelder, NavnPåForeldre, Situasjon, StønadskontoType, getStønadskontoNavn } from '@navikt/fp-common';\nimport { getStønadskontoFarge } from '../../utils/styleUtils';\n\nexport interface Props {\n    konto: StønadskontoType;\n    forelder?: Forelder;\n    gradert?: boolean;\n    navnPåForeldre: NavnPåForeldre;\n    erFarEllerMedmor?: boolean;\n    situasjon?: Situasjon;\n    erAleneOmOmsorg?: boolean;\n    harMidlertidigOmsorg?: boolean;\n}\n\nconst StønadskontoIkon: FunctionComponent<Props> = ({\n    konto,\n    forelder,\n    gradert,\n    navnPåForeldre,\n    harMidlertidigOmsorg,\n    erFarEllerMedmor,\n    erAleneOmOmsorg,\n}) => {\n    const intl = useIntl();\n\n    return (\n        <IconBox color={getStønadskontoFarge(konto, forelder, true, harMidlertidigOmsorg)} stripes={gradert}>\n            <UttaksplanIkon\n                ikon={UttaksplanIkonKeys.uttak}\n                title={getStønadskontoNavn(intl, konto, navnPåForeldre, erFarEllerMedmor, erAleneOmOmsorg)}\n            />\n        </IconBox>\n    );\n};\n\nexport default StønadskontoIkon;\n","import { intlUtils, UtsettelseÅrsakType } from '@navikt/fp-common';\n\nimport { useIntl } from 'react-intl';\nimport IconBox from '../icon-box/IconBox';\nimport UttaksplanIkon, { UttaksplanIkonKeys } from '../uttaksplan-ikon/UttaksplanIkon';\nimport { getUtsettelseFarge } from '../../utils/styleUtils';\n\nexport interface Props {\n    årsak: UtsettelseÅrsakType;\n    gradert?: boolean;\n}\n\nconst getIkonForKonto = (årsak: UtsettelseÅrsakType): UttaksplanIkonKeys => {\n    switch (årsak) {\n        case UtsettelseÅrsakType.Ferie:\n            return UttaksplanIkonKeys.ferie;\n        case UtsettelseÅrsakType.Arbeid:\n        case UtsettelseÅrsakType.HvØvelse:\n        case UtsettelseÅrsakType.NavTiltak:\n        case UtsettelseÅrsakType.Fri:\n            return UttaksplanIkonKeys.arbeid;\n        case UtsettelseÅrsakType.InstitusjonBarnet:\n        case UtsettelseÅrsakType.InstitusjonSøker:\n        case UtsettelseÅrsakType.Sykdom:\n            return UttaksplanIkonKeys.sykdom;\n    }\n};\n\nconst UtsettelseIkon: React.FunctionComponent<Props> = ({ årsak, gradert }) => {\n    const intl = useIntl();\n\n    return (\n        <IconBox color={getUtsettelseFarge()} stripes={gradert}>\n            <UttaksplanIkon\n                ikon={getIkonForKonto(årsak)}\n                title={intlUtils(intl, `uttaksplan.utsettelsesårsak.${årsak || 'ukjent'}`)}\n            />\n        </IconBox>\n    );\n};\n\nexport default UtsettelseIkon;\n","import { SVGProps } from 'react';\n\nexport interface OwnProps {\n    type?: 'advarsel' | 'feil';\n    title?: string;\n}\n\ntype Props = OwnProps & SVGProps<any>;\n\nconst UttaksplanAdvarselIkon = (props: Props) => {\n    const farge = props.type === 'feil' ? '#ba3a26' : '#ff9100';\n    const { title, ...rest } = props;\n\n    return (\n        <svg\n            focusable=\"false\"\n            role=\"img\"\n            aria-hidden=\"true\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            width={24}\n            height={24}\n            viewBox=\"0 0 24 24\"\n            {...rest}\n        >\n            <title>{props.title}</title>\n            <defs>\n                <path\n                    id=\"advarsel-a\"\n                    d=\"M23.892 22.23L12.462 1.243c-.178-.324-.758-.324-.934 0L.055 22.307a.445.445 0 0 0 .022.465c.094.14.264.228.446.228h22.955c.287 0 .522-.214.522-.479 0-.109-.04-.21-.108-.29zM11.474 8.784c0-.264.233-.479.521-.479.287 0 .522.215.522.48v7.326c0 .264-.235.479-.522.479-.288 0-.521-.215-.521-.479V8.784zm.521 11.447c-.551 0-.998-.41-.998-.915 0-.505.447-.916.998-.916.55 0 .997.411.997.916 0 .506-.447.915-.997.915z\"\n                />\n            </defs>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <mask id=\"advarsel-b\" fill=\"#fff\">\n                    <use xlinkHref=\"#advarsel-a\" />\n                </mask>\n                <g fill={farge} mask=\"url(#advarsel-b)\">\n                    <path d=\"M0 24h24V0H0z\" />\n                </g>\n            </g>\n        </svg>\n    );\n};\n\nexport default UttaksplanAdvarselIkon;\n","import { VeilederMessage } from '../types';\nimport { FormattedMessage } from 'react-intl';\nimport { bemUtils } from '@navikt/fp-common';\nimport { Alert, Label } from '@navikt/ds-react';\nimport { UttaksplanIkonKeys } from '../../../components/uttaksplan-ikon/UttaksplanIkon';\n\nimport './veilederMelding.less';\n\nexport type VeilederMeldingStil = 'transparent' | 'default';\n\ninterface VeilederpanelInnholdContentProps {\n    message: VeilederMessage;\n    stil?: VeilederMeldingStil;\n    skjulMeldingIkon?: boolean;\n}\n\ntype AlertType = 'error' | 'warning' | 'info' | 'success';\n\nconst getAlertStripeTypeFromMessageType = (message: VeilederMessage): AlertType => {\n    switch (message.type) {\n        case 'normal':\n        case 'info':\n            return 'info';\n        case 'advarsel':\n            return 'warning';\n        case 'feil':\n            return 'error';\n    }\n};\n\nexport const getIkonForVeilederMelding = (melding: VeilederMessage): UttaksplanIkonKeys => {\n    switch (melding.type) {\n        case 'feil':\n            return UttaksplanIkonKeys.feil;\n        case 'advarsel':\n            return UttaksplanIkonKeys.advarsel;\n        default:\n            return UttaksplanIkonKeys.info;\n    }\n};\n\nconst renderAlert = (message: VeilederMessage, skjulMeldingIkon: boolean, stil: VeilederMeldingStil) => {\n    const content = (\n        <>\n            {message.titleIntlKey !== undefined && (\n                <Label as=\"div\">\n                    <FormattedMessage id={message.titleIntlKey} />\n                </Label>\n            )}\n            <FormattedMessage id={message.contentIntlKey} values={message.values} />\n        </>\n    );\n    return skjulMeldingIkon ? (\n        <div>{content}</div>\n    ) : (\n        <Alert variant={getAlertStripeTypeFromMessageType(message)} inline={stil === 'transparent'}>\n            {content}\n        </Alert>\n    );\n};\n\nconst VeilederMelding: React.FunctionComponent<VeilederpanelInnholdContentProps> = ({\n    message,\n    stil = 'default',\n    skjulMeldingIkon = false,\n}) => {\n    const bem = bemUtils('veilederMelding');\n    return (\n        <div className={bem.classNames(bem.block, bem.modifier(stil))}>\n            {message.type !== 'normal' ? (\n                renderAlert(message, skjulMeldingIkon, stil)\n            ) : (\n                <div className=\"veilederMelding__padding\">\n                    <FormattedMessage id={message.contentIntlKey} values={message.values} />\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default VeilederMelding;\n","import {\n    Forelder,\n    NavnPåForeldre,\n    Periode,\n    Periodetype,\n    Situasjon,\n    StønadskontoType,\n    Tidsperioden,\n    bemUtils,\n    getUkerOgDagerFromDager,\n    getValidTidsperiode,\n    intlUtils,\n    isForeldrepengerFørFødselUttaksperiode,\n    isUtsettelseAnnenPart,\n    isUttakAnnenPart,\n    måned,\n    måned3bokstaver,\n    år,\n} from '@navikt/fp-common';\nimport classNames from 'classnames';\nimport dayjs from 'dayjs';\nimport { FunctionComponent } from 'react';\nimport StønadskontoIkon from '../stønadskonto-ikon/StønadskontoIkon';\nimport UtsettelseIkon from '../utsettelse-ikon/UtsettelseIkon';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport UttaksplanIkon from '../uttaksplan-ikon/UttaksplanIkon';\nimport { BodyShort, Label } from '@navikt/ds-react';\n\nimport './periodelisteItemHeader.less';\nimport { getForelderNavn, getPeriodeTittel } from '@navikt/fp-common/src/common/utils/periodeUtils';\nimport { VeilederMessage } from '../../validering/veilederInfo/types';\nimport UttaksplanAdvarselIkon from '../../assets/UttaksplanAdvarselIkon';\nimport { getIkonForVeilederMelding } from '../../validering/veilederInfo/components/VeilederMelding';\n\ninterface Props {\n    egenPeriode: boolean;\n    periode: Periode;\n    navnPåForeldre: NavnPåForeldre;\n    melding: VeilederMessage | undefined;\n    annenForelderSamtidigUttakPeriode?: Periode;\n    familiehendelsesdato: Date;\n    termindato: Date | undefined;\n    situasjon: Situasjon;\n    erFarEllerMedmor: boolean;\n    erAleneOmOmsorg: boolean;\n}\n\nconst bem = bemUtils('periodelisteItemHeader');\n\nexport const getPeriodeIkon = (\n    periode: Periode,\n    navnPåForeldre: NavnPåForeldre,\n    harMidlertidigOmsorg?: boolean,\n    erFarEllerMedmor?: boolean,\n    situasjon?: Situasjon,\n    erAleneOmOmsorg?: boolean,\n): React.ReactNode | undefined => {\n    switch (periode.type) {\n        case Periodetype.Uttak:\n            return (\n                <StønadskontoIkon\n                    konto={periode.konto}\n                    forelder={periode.forelder}\n                    gradert={periode.gradert}\n                    navnPåForeldre={navnPåForeldre}\n                    harMidlertidigOmsorg={harMidlertidigOmsorg}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    situasjon={situasjon}\n                    erAleneOmOmsorg={erAleneOmOmsorg}\n                />\n            );\n        case Periodetype.Overføring:\n            return (\n                <StønadskontoIkon konto={periode.konto} forelder={periode.forelder} navnPåForeldre={navnPåForeldre} />\n            );\n        case Periodetype.Utsettelse:\n            return <UtsettelseIkon årsak={periode.årsak} />;\n        case Periodetype.Opphold:\n            return (\n                <StønadskontoIkon\n                    konto={StønadskontoType.Foreldrepenger}\n                    forelder={periode.forelder}\n                    navnPåForeldre={navnPåForeldre}\n                />\n            );\n        case Periodetype.Info:\n            if (isUtsettelseAnnenPart(periode)) {\n                return <UtsettelseIkon årsak={periode.årsak} />;\n            } else {\n                return (\n                    <StønadskontoIkon\n                        konto={StønadskontoType.Foreldrepenger}\n                        forelder={periode.forelder}\n                        navnPåForeldre={navnPåForeldre}\n                    />\n                );\n            }\n        case Periodetype.Hull:\n            return <UttaksplanAdvarselIkon />;\n    }\n    return undefined;\n};\n\ntype VarighetFormat = 'full' | 'normal';\n\nexport const getVarighetString = (antallDager: number, intl: IntlShape, format: VarighetFormat = 'full'): string => {\n    const { uker, dager } = getUkerOgDagerFromDager(Math.abs(antallDager));\n    const dagerStr = intl.formatMessage(\n        { id: 'common.varighet.dager' },\n        {\n            dager,\n        },\n    );\n    if (uker === 0) {\n        return dagerStr;\n    }\n    const ukerStr = intl.formatMessage({ id: 'common.varighet.uker' }, { uker });\n    if (dager > 0) {\n        return `${ukerStr}${intl.formatMessage({\n            id: `common.varighet.separator--${format}`,\n        })}${dagerStr}`;\n    }\n    return ukerStr;\n};\n\nconst renderDagMnd = (dato: Date, visÅr = true): JSX.Element => {\n    const d = dayjs(dato);\n\n    return (\n        <div className={bem.element('dagmnd')}>\n            <span className={bem.element('dagmnd__dato')}>\n                <BodyShort>\n                    {d.get('date')}. {måned3bokstaver(d)}.\n                </BodyShort>\n            </span>\n            {visÅr && (\n                <BodyShort as=\"span\" className={bem.element('dagmnd__mnd')}>\n                    <abbr title={`${måned(d)} ${år(d)}`}>{år(d)}</abbr>\n                </BodyShort>\n            )}\n        </div>\n    );\n};\n\nconst PeriodelisteItemHeader: FunctionComponent<Props> = ({\n    periode,\n    navnPåForeldre,\n    melding,\n    annenForelderSamtidigUttakPeriode,\n    familiehendelsesdato,\n    termindato,\n    situasjon,\n    erFarEllerMedmor,\n    erAleneOmOmsorg,\n}) => {\n    const intl = useIntl();\n\n    let varighetString;\n    const erFpFørTerminUtenUttak =\n        isForeldrepengerFørFødselUttaksperiode(periode) && periode.skalIkkeHaUttakFørTermin === true;\n    if (erFpFørTerminUtenUttak) {\n        varighetString = intlUtils(intl, 'uttaksplan.periodeliste.header.skalIkkeHaUttakFørTermin');\n    } else {\n        varighetString = getVarighetString(Tidsperioden(periode.tidsperiode).getAntallUttaksdager(), intl);\n    }\n\n    let annenForelderIsMor;\n    let annenForelderNavn;\n    let beskrivelseSamtidigUttak;\n    if (annenForelderSamtidigUttakPeriode && isUttakAnnenPart(annenForelderSamtidigUttakPeriode)) {\n        annenForelderIsMor = annenForelderSamtidigUttakPeriode.forelder === Forelder.mor;\n        annenForelderNavn = getForelderNavn(annenForelderSamtidigUttakPeriode.forelder, navnPåForeldre);\n        beskrivelseSamtidigUttak = getVarighetString(\n            getValidTidsperiode(annenForelderSamtidigUttakPeriode.tidsperiode)\n                ? Tidsperioden(annenForelderSamtidigUttakPeriode.tidsperiode).getAntallUttaksdager()\n                : 0,\n            intl,\n        );\n    }\n\n    return (\n        <div>\n            <div className={bem.block}>\n                <div className={bem.element('content')}>\n                    <div className={bem.element('ikon')}>{getPeriodeIkon(periode, navnPåForeldre)}</div>\n                    <div className={bem.element('tittel')}>\n                        <Label as=\"h3\">\n                            {getPeriodeTittel(\n                                intl,\n                                periode,\n                                navnPåForeldre,\n                                familiehendelsesdato,\n                                termindato,\n                                situasjon,\n                                erFarEllerMedmor,\n                                erAleneOmOmsorg,\n                            )}\n                        </Label>\n                        <BodyShort>{varighetString}</BodyShort>\n                    </div>\n                    <div className={bem.element('advarsel')}>\n                        {melding && (\n                            <span\n                                role=\"presentation\"\n                                className={bem.modifier(`color-${getIkonForVeilederMelding(melding)}`)}\n                            >\n                                <UttaksplanIkon\n                                    ikon={getIkonForVeilederMelding(melding)}\n                                    title={melding.contentIntlKey}\n                                />\n                            </span>\n                        )}\n                    </div>\n                    {!erFpFørTerminUtenUttak && (\n                        <div className={bem.element('dato-container')}>\n                            {renderDagMnd(periode.tidsperiode.fom)}\n                            {renderDagMnd(periode.tidsperiode.tom)}\n                        </div>\n                    )}\n                </div>\n            </div>\n\n            {annenForelderSamtidigUttakPeriode && (\n                <div\n                    className={classNames(bem.element('samtidig-uttak'), {\n                        [bem.element('samtidig-uttak-mor')]: annenForelderIsMor,\n                        [bem.element('samtidig-uttak-far')]: !annenForelderIsMor,\n                    })}\n                >\n                    <div>\n                        <Label>\n                            <FormattedMessage id=\"oppsummering.morsAktivitet.SamtidigUttak\" />\n                        </Label>\n                    </div>\n                    <div className={bem.element('beskrivelse')}>\n                        <em className={bem.element('beskrivelse__tekst')}>\n                            {beskrivelseSamtidigUttak}\n                            <em className={bem.element('hvem')}> - {annenForelderNavn}</em>\n                        </em>\n                    </div>\n                    {annenForelderSamtidigUttakPeriode.tidsperiode && (\n                        <div className={bem.element('tidsrom')}>\n                            {renderDagMnd(annenForelderSamtidigUttakPeriode.tidsperiode.fom, false)}\n                            {renderDagMnd(annenForelderSamtidigUttakPeriode.tidsperiode.tom, false)}\n                        </div>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default PeriodelisteItemHeader;\n","import {\n    ActionLink,\n    bemUtils,\n    Block,\n    førsteOktober2021ReglerGjelder,\n    intlUtils,\n    Periode,\n    Periodetype,\n    Tidsperioden,\n} from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { BodyShort } from '@navikt/ds-react';\n\nimport './periodeHull.less';\n\ninterface Props {\n    periode: Periode;\n    navnAnnenForelder: string;\n    erDeltUttak: boolean;\n    familiehendelsesdato: Date;\n    erFarEllerMedmor: boolean;\n    erAleneOmOmsorg: boolean;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n}\n\nconst PeriodeHull: FunctionComponent<Props> = ({\n    periode,\n    navnAnnenForelder,\n    erDeltUttak,\n    familiehendelsesdato,\n    erFarEllerMedmor,\n    erAleneOmOmsorg,\n    handleUpdatePeriode,\n}) => {\n    const intl = useIntl();\n    const bem = bemUtils('periodeHull');\n\n    const antallDager = Tidsperioden(periode.tidsperiode).getAntallUttaksdager();\n    const antallHelligdager = Tidsperioden(periode.tidsperiode).getAntallFridager();\n    const antallUttaksdager = Tidsperioden(periode.tidsperiode).getAntallUttaksdager();\n    const kunHelligdager = antallHelligdager === antallUttaksdager;\n    const kunUttaksdager = antallHelligdager === 0;\n\n    const onLeggInnNyPeriode = () => {\n        const { id, tidsperiode } = periode;\n\n        handleUpdatePeriode({ id, type: Periodetype.Uttak, tidsperiode } as Periode, familiehendelsesdato);\n    };\n\n    const leggInnNyUtsettelse = () => {\n        const { id, tidsperiode } = periode;\n\n        handleUpdatePeriode({ id, type: Periodetype.Utsettelse, tidsperiode } as Periode, familiehendelsesdato);\n    };\n\n    const nyeRegler = førsteOktober2021ReglerGjelder(familiehendelsesdato);\n\n    return (\n        <div className={bem.block}>\n            <Block padBottom=\"l\" visible={kunHelligdager}>\n                <BodyShort>\n                    <FormattedMessage id=\"uttaksplan.hull.helligdager\" />\n                </BodyShort>\n            </Block>\n            <Block padBottom=\"l\" visible={kunUttaksdager || (kunUttaksdager === false && kunHelligdager === false)}>\n                <BodyShort>\n                    {erDeltUttak ? (\n                        <FormattedMessage\n                            id=\"uttaksplan.hull.uttaksdager.deltUttak\"\n                            values={{\n                                navn: navnAnnenForelder,\n                                dager: antallDager,\n                            }}\n                        />\n                    ) : (\n                        <FormattedMessage\n                            id={\n                                nyeRegler && erFarEllerMedmor && !erAleneOmOmsorg\n                                    ? 'uttaksplan.hull.uttaksdager.ikkeDeltUttak.nyeRegler'\n                                    : 'uttaksplan.hull.uttaksdager.ikkeDeltUttak'\n                            }\n                            values={{\n                                dager: antallDager,\n                            }}\n                        />\n                    )}\n                </BodyShort>\n            </Block>\n            <div className={bem.element('lenker')}>\n                <ActionLink onClick={onLeggInnNyPeriode}>{intlUtils(intl, 'uttaksplan.leggInnNyPeriode')}</ActionLink>\n                <ActionLink onClick={leggInnNyUtsettelse}>\n                    {intlUtils(intl, 'uttaksplan.leggInnNyUtsettelse')}\n                </ActionLink>\n            </div>\n        </div>\n    );\n};\n\nexport default PeriodeHull;\n","import { BodyShort } from '@navikt/ds-react';\nimport {\n    NavnPåForeldre,\n    intlUtils,\n    UtsettelseÅrsakType,\n    UttakAnnenPartInfoPeriode,\n    UtsettelseAnnenPartInfoPeriode,\n    formaterDatoKompakt,\n    isUttakAnnenPart,\n    getOppholdskontoNavn,\n    getForelderNavn,\n    Forelder,\n} from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\n\nexport interface Props {\n    periode: UttakAnnenPartInfoPeriode | UtsettelseAnnenPartInfoPeriode;\n    navnPåForeldre: NavnPåForeldre;\n}\n\nconst getUtsettelseTekst = (intl: IntlShape, årsak: UtsettelseÅrsakType, foreldernavn: string, erMor: boolean) => {\n    return erMor\n        ? intlUtils(intl, `uttaksplan.utsettelseårsaktype.foreldernavn.far.${årsak}`, { foreldernavn })\n        : intlUtils(intl, `uttaksplan.utsettelseårsaktype.foreldernavn.mor.${årsak}`, { foreldernavn });\n};\n\nconst PeriodeInfo: FunctionComponent<Props> = ({ periode, navnPåForeldre }) => {\n    const intl = useIntl();\n\n    return (\n        <BodyShort>\n            <strong>\n                <span>{formaterDatoKompakt(periode.tidsperiode.fom)}</span>\n                <span>&mdash;</span>\n                <span>{formaterDatoKompakt(periode.tidsperiode.tom)}:</span>\n            </strong>{' '}\n            {isUttakAnnenPart(periode)\n                ? getOppholdskontoNavn(\n                      intl,\n                      periode.årsak,\n                      getForelderNavn(periode.forelder, navnPåForeldre),\n                      periode.forelder === Forelder.mor,\n                  )\n                : getUtsettelseTekst(\n                      intl,\n                      periode.årsak,\n                      getForelderNavn(periode.forelder, navnPåForeldre),\n                      periode.forelder === Forelder.mor,\n                  )}\n        </BodyShort>\n    );\n};\n\nexport default PeriodeInfo;\n","import { BodyShort } from '@navikt/ds-react';\nimport { ActionLink, Block, Periode, Periodetype, intlUtils } from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\ninterface Props {\n    periode: Periode;\n    handleUpdatePeriode: (periode: Periode, familiehendelsesdato: Date) => void;\n    familiehendelsesdato: Date;\n}\n\nconst PeriodeUtenUttak: FunctionComponent<Props> = ({ periode, handleUpdatePeriode, familiehendelsesdato }) => {\n    const intl = useIntl();\n\n    const onLeggTilNyPeriode = () => {\n        const { id, tidsperiode } = periode;\n\n        handleUpdatePeriode({ id, type: Periodetype.Uttak, tidsperiode } as Periode, familiehendelsesdato);\n    };\n\n    return (\n        <div>\n            <Block padBottom=\"l\">\n                <BodyShort>\n                    <FormattedMessage id=\"uttaksplan.periodeUtenUttak.info.del1\" />\n                </BodyShort>\n            </Block>\n            <Block padBottom=\"l\">\n                <BodyShort>\n                    <FormattedMessage id=\"uttaksplan.periodeUtenUttak.info.del2\" />\n                </BodyShort>\n            </Block>\n            <ActionLink onClick={onLeggTilNyPeriode}>{intlUtils(intl, 'uttaksplan.leggInnNyPeriode')}</ActionLink>\n        </div>\n    );\n};\n\nexport default PeriodeUtenUttak;\n","import { getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\n\nexport enum PeriodeFørFødselFormField {\n    fom = 'fom',\n    tom = 'tom',\n    skalIkkeHaUttakFørTermin = 'skalIkkeHaUttakFørTermin',\n}\n\nexport interface PeriodeFørFødselFormData {\n    [PeriodeFørFødselFormField.fom]: Date | undefined;\n    [PeriodeFørFødselFormField.tom]: Date | undefined;\n    [PeriodeFørFødselFormField.skalIkkeHaUttakFørTermin]: boolean;\n}\n\nexport const PeriodeFørFødselFormComponents = getTypedFormComponents<\n    PeriodeFørFødselFormField,\n    PeriodeFørFødselFormData\n>();\n","import { hasValue, isValidTidsperiode } from '@navikt/fp-common';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport { PeriodeFørFødselFormData, PeriodeFørFødselFormField } from './periodeFørFødselFormConfig';\n\nconst PeriodeFørFødselFormConfig: QuestionConfig<PeriodeFørFødselFormData, PeriodeFørFødselFormField> = {\n    [PeriodeFørFødselFormField.fom]: {\n        isAnswered: ({ fom }) => hasValue(fom),\n        isIncluded: ({ skalIkkeHaUttakFørTermin }) => !skalIkkeHaUttakFørTermin,\n    },\n    [PeriodeFørFødselFormField.tom]: {\n        isAnswered: ({ tom }) => hasValue(tom),\n        isIncluded: ({ skalIkkeHaUttakFørTermin }) => !skalIkkeHaUttakFørTermin,\n    },\n    [PeriodeFørFødselFormField.skalIkkeHaUttakFørTermin]: {\n        isAnswered: () => true,\n        isIncluded: () => true,\n        visibilityFilter: ({ fom, tom, skalIkkeHaUttakFørTermin }) =>\n            skalIkkeHaUttakFørTermin ? true : isValidTidsperiode({ fom, tom }),\n    },\n};\n\nexport const periodeFørFødselFormQuestionsConfig = Questions<PeriodeFørFødselFormData, PeriodeFørFødselFormField>(\n    PeriodeFørFødselFormConfig,\n);\n","import dayjs from 'dayjs';\nimport { PeriodeFørFødselFormData, PeriodeFørFødselFormField } from './periodeFørFødselFormConfig';\nimport {\n    ForeldrepengerFørFødselUttaksperiode,\n    Periode,\n    Periodetype,\n    StønadskontoType,\n    Uttaksdagen,\n    uttaksConstants,\n} from '@navikt/fp-common';\n\nexport const initialValues: PeriodeFørFødselFormData = {\n    [PeriodeFørFødselFormField.fom]: undefined,\n    [PeriodeFørFødselFormField.tom]: undefined,\n    [PeriodeFørFødselFormField.skalIkkeHaUttakFørTermin]: false,\n};\n\nexport const getPeriodeFørFødselFormInitialValues = (\n    periode: ForeldrepengerFørFødselUttaksperiode,\n    familiehendelsesdato: Date,\n): PeriodeFørFødselFormData => {\n    const sisteUttaksagFørFødsel = Uttaksdagen(dayjs(familiehendelsesdato).toDate()).forrige();\n    const førsteUttaksdag3UkerFørFødsel = Uttaksdagen(sisteUttaksagFørFødsel).trekkFra(\n        uttaksConstants.ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5 - 1,\n    );\n    const fom = periode.tidsperiode.fom !== undefined ? periode.tidsperiode.fom : førsteUttaksdag3UkerFørFødsel;\n    const tom = periode.tidsperiode.tom !== undefined ? periode.tidsperiode.tom : sisteUttaksagFørFødsel;\n    return {\n        ...initialValues,\n        fom,\n        tom,\n        skalIkkeHaUttakFørTermin: periode.skalIkkeHaUttakFørTermin,\n    };\n};\n\nexport const mapPeriodeFørFødselFormToPeriode = (\n    values: Partial<PeriodeFørFødselFormData>,\n    periode: ForeldrepengerFørFødselUttaksperiode,\n): Periode => {\n    return {\n        type: Periodetype.Uttak,\n        id: periode.id,\n        forelder: periode.forelder,\n        konto: StønadskontoType.ForeldrepengerFørFødsel,\n        tidsperiode: {\n            fom: values.fom!,\n            tom: values.tom!,\n        },\n        skalIkkeHaUttakFørTermin: !!values.skalIkkeHaUttakFørTermin,\n    };\n};\n","import {\n    Block,\n    ForeldrepengerFørFødselUttaksperiode,\n    ISOStringToDate,\n    Periode,\n    Situasjon,\n    Utsettelsesperiode,\n    intlUtils,\n    isValidTidsperiode,\n} from '@navikt/fp-common';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { FunctionComponent, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { SubmitListener } from '../submit-listener/SubmitListener';\nimport TidsperiodeForm from '../tidsperiode-form/TidsperiodeForm';\nimport {\n    PeriodeFørFødselFormComponents,\n    PeriodeFørFødselFormData,\n    PeriodeFørFødselFormField,\n} from './periodeFørFødselFormConfig';\nimport { periodeFørFødselFormQuestionsConfig } from './periodeFørFødselFormQuestionsConfig';\nimport { getPeriodeFørFødselFormInitialValues, mapPeriodeFørFødselFormToPeriode } from './periodeFørFødselFormUtils';\nimport TidsperiodeDisplay from '../../tidsperiode-display/TidsperiodeDisplay';\nimport UttakEndreTidsperiodeSpørsmål from '../../uttak-endre-tidsperiode-spørsmål/UttakEndreTidsperiodeSpørsmål';\n\ninterface Props {\n    periode: ForeldrepengerFørFødselUttaksperiode;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n    familiehendelsesdato: Date;\n    erFarEllerMedmor: boolean;\n    morHarRett: boolean;\n    situasjon: Situasjon;\n    utsettelserIPlan: Utsettelsesperiode[];\n}\n\nconst PeriodeFørFødselForm: FunctionComponent<Props> = ({\n    periode,\n    familiehendelsesdato,\n    handleUpdatePeriode,\n    erFarEllerMedmor,\n    morHarRett,\n    situasjon,\n    utsettelserIPlan,\n}) => {\n    const { tidsperiode } = periode;\n    const [tidsperiodeIsOpen, setTidsperiodeIsOpen] = useState(false);\n    const intl = useIntl();\n\n    const toggleVisTidsperiode = () => {\n        setTidsperiodeIsOpen(!tidsperiodeIsOpen);\n    };\n\n    const handleCleanup = (\n        values: PeriodeFørFødselFormData,\n        _visibility: QuestionVisibility<PeriodeFørFødselFormField, undefined>,\n    ): PeriodeFørFødselFormData => {\n        return values;\n    };\n\n    return (\n        <PeriodeFørFødselFormComponents.FormikWrapper\n            initialValues={getPeriodeFørFødselFormInitialValues(periode, familiehendelsesdato)}\n            onSubmit={(values) =>\n                handleUpdatePeriode(mapPeriodeFørFødselFormToPeriode(values, periode), familiehendelsesdato)\n            }\n            renderForm={({ setFieldValue, values }) => {\n                const visibility = periodeFørFødselFormQuestionsConfig.getVisbility(values as PeriodeFørFødselFormData);\n\n                return (\n                    <>\n                        <Block\n                            visible={\n                                !isValidTidsperiode(tidsperiode) && visibility.isVisible(PeriodeFørFødselFormField.fom)\n                            }\n                            padBottom=\"l\"\n                        >\n                            <TidsperiodeForm\n                                tidsperiode={tidsperiode}\n                                familiehendelsesdato={familiehendelsesdato}\n                                onBekreft={(values) => {\n                                    setFieldValue(PeriodeFørFødselFormField.fom, ISOStringToDate(values.fom));\n                                    setFieldValue(PeriodeFørFødselFormField.tom, ISOStringToDate(values.tom));\n                                }}\n                                ugyldigeTidsperioder={undefined}\n                                utsettelserIPlan={utsettelserIPlan}\n                                erFarEllerMedmor={erFarEllerMedmor}\n                                morHarRett={morHarRett}\n                                situasjon={situasjon}\n                                erFarMedmorOgHarAleneomsorg={false}\n                            />\n                        </Block>\n                        <PeriodeFørFødselFormComponents.Form includeButtons={false}>\n                            <SubmitListener\n                                cleanup={() => handleCleanup(values as PeriodeFørFødselFormData, visibility)}\n                            />\n\n                            <Block\n                                visible={\n                                    isValidTidsperiode(tidsperiode) &&\n                                    visibility.isVisible(PeriodeFørFødselFormField.fom)\n                                }\n                                padBottom=\"l\"\n                            >\n                                <TidsperiodeDisplay\n                                    tidsperiode={tidsperiode}\n                                    toggleVisTidsperiode={toggleVisTidsperiode}\n                                />\n                                <UttakEndreTidsperiodeSpørsmål\n                                    periode={periode}\n                                    familiehendelsesdato={familiehendelsesdato}\n                                    ugyldigeTidsperioder={undefined}\n                                    utsettelserIPlan={utsettelserIPlan}\n                                    onBekreft={(values) => {\n                                        toggleVisTidsperiode();\n                                        setFieldValue(PeriodeFørFødselFormField.fom, values.fom);\n                                        setFieldValue(PeriodeFørFødselFormField.tom, values.tom);\n                                    }}\n                                    changeTidsperiode={(values) => {\n                                        setFieldValue(PeriodeFørFødselFormField.fom, values.fom);\n                                        setFieldValue(PeriodeFørFødselFormField.tom, values.tom);\n                                    }}\n                                    tidsperiode={tidsperiode}\n                                    onAvbryt={() => toggleVisTidsperiode()}\n                                    visible={tidsperiodeIsOpen}\n                                    erFarEllerMedmor={erFarEllerMedmor}\n                                    morHarRett={morHarRett}\n                                    situasjon={situasjon}\n                                    erFarMedmorOgHarAleneomsorg={false}\n                                />\n                            </Block>\n\n                            <Block\n                                visible={visibility.isVisible(PeriodeFørFødselFormField.skalIkkeHaUttakFørTermin)}\n                                padBottom=\"l\"\n                            >\n                                <PeriodeFørFødselFormComponents.Checkbox\n                                    name={PeriodeFørFødselFormField.skalIkkeHaUttakFørTermin}\n                                    label={intlUtils(intl, 'uttaksplan.periodeFørFødselForm.skalIkkeHaUttakFørTermin')}\n                                />\n                            </Block>\n                        </PeriodeFørFødselFormComponents.Form>\n                    </>\n                );\n            }}\n        />\n    );\n};\n\nexport default PeriodeFørFødselForm;\n","import { ActionLink, InfoPeriode, bemUtils, getSlettPeriodeTekst } from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport './slettbarAvslåttPeriode.less';\n\ninterface Props {\n    periode: InfoPeriode;\n    handleDeletePeriode: (periodeId: string) => void;\n}\n\nconst SlettbarAvslåttPeriode: FunctionComponent<Props> = ({ periode, handleDeletePeriode }) => {\n    const bem = bemUtils('slettbarAvslåttPeriode');\n    const onSlettPeriode = () => {\n        handleDeletePeriode(periode.id);\n    };\n    return (\n        <div className={bem.element('wrapper')}>\n            <ActionLink onClick={onSlettPeriode}>\n                <FormattedMessage id={getSlettPeriodeTekst(periode.type)} />\n            </ActionLink>\n        </div>\n    );\n};\n\nexport default SlettbarAvslåttPeriode;\n","import * as React from 'react';\nimport { VeilederMessage } from './types';\nimport VeilederMelding, { VeilederMeldingStil } from './components/VeilederMelding';\nimport { Block } from '@navikt/fp-common';\n\ninterface Props {\n    meldinger: VeilederMessage[];\n    stil?: VeilederMeldingStil;\n    skjulMeldingIkon?: boolean;\n}\n\nconst VeilederMeldinger: React.FunctionComponent<Props> = ({ meldinger, stil, skjulMeldingIkon }) => {\n    return (\n        <div>\n            {meldinger.map((melding: VeilederMessage) => (\n                <Block padBottom=\"xl\" key={melding.contentIntlKey + melding.periodeId}>\n                    <VeilederMelding message={melding} stil={stil} skjulMeldingIkon={skjulMeldingIkon} />\n                </Block>\n            ))}\n        </div>\n    );\n};\n\nexport default VeilederMeldinger;\n","import { IntlShape } from 'react-intl';\nimport {\n    AnnenForelder,\n    Arbeidsforhold,\n    Attachment,\n    bemUtils,\n    Block,\n    isAvslåttPeriode,\n    isForeldrepengerFørFødselUttaksperiode,\n    isInfoPeriode,\n    isSlettbarAvslåttPeriode,\n    NavnPåForeldre,\n    Periode,\n    Periodetype,\n    PeriodeValidState,\n    Situasjon,\n    TilgjengeligStønadskonto,\n    Utsettelsesperiode,\n} from '@navikt/fp-common';\nimport classNames from 'classnames';\nimport { FunctionComponent } from 'react';\nimport PeriodelisteItemHeader from '../periodeliste-item-header/PeriodelisteItemHeader';\nimport PeriodeHull from '../perioder/PeriodeHull';\nimport PeriodeInfo from '../perioder/PeriodeInfo';\nimport PeriodeUtenUttak from '../perioder/PeriodeUtenUttak';\nimport PeriodeFørFødselForm from '../uttaks-forms/periode-før-fødsel-form/PeriodeFørFødselForm';\nimport PeriodeUtsettelseForm from '../uttaks-forms/periode-utsettelse-form/PeriodeUtsettelseForm';\nimport PeriodeUttakForm from '../uttaks-forms/periode-uttak-form/PeriodeUttakForm';\nimport { Accordion } from '@navikt/ds-react';\nimport SlettbarAvslåttPeriode from '../perioder/SlettbarAvslåttPeriode';\n\nimport './periodelisteItem.less';\nimport { VeilederMessage } from '../../validering/veilederInfo/types';\nimport VeilederMeldinger from '../../validering/veilederInfo/VeilederMeldinger';\n\ninterface Props {\n    egenPeriode: boolean;\n    periode: Periode;\n    isOpen: boolean;\n    toggleIsOpen: (id: string) => void;\n    familiehendelsesdato: Date;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n    stønadskontoer: TilgjengeligStønadskonto[];\n    navnPåForeldre: NavnPåForeldre;\n    annenForelder: AnnenForelder;\n    arbeidsforhold: Arbeidsforhold[];\n    handleDeletePeriode: (periodeId: string) => void;\n    erFarEllerMedmor: boolean;\n    erFlerbarnssøknad: boolean;\n    erAleneOmOmsorg: boolean;\n    erDeltUttak: boolean;\n    situasjon: Situasjon;\n    meldinger?: VeilederMessage[];\n    erMorUfør: boolean;\n    annenForelderSamtidigUttakPeriode: Periode | undefined;\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean;\n    setPerioderErGyldige: React.Dispatch<React.SetStateAction<PeriodeValidState[]>>;\n    erEndringssøknad: boolean;\n    termindato: Date | undefined;\n    antallBarn: number;\n    utsettelserIPlan: Utsettelsesperiode[];\n    intl: IntlShape;\n    periodeErGyldig: boolean;\n    saveAttachment: (vedlegg: Attachment) => void;\n}\n\nconst renderPeriodeListeInnhold = (\n    periode: Periode,\n    familiehendelsesdato: Date,\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void,\n    stønadskontoer: TilgjengeligStønadskonto[],\n    navnPåForeldre: NavnPåForeldre,\n    annenForelder: AnnenForelder,\n    toggleIsOpen: (id: string) => void,\n    arbeidsforhold: Arbeidsforhold[],\n    handleDeletePeriode: (periodeId: string) => void,\n    erFarEllerMedmor: boolean,\n    erFlerbarnssøknad: boolean,\n    erAleneOmOmsorg: boolean,\n    erDeltUttak: boolean,\n    situasjon: Situasjon,\n    erMorUfør: boolean,\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean,\n    setPerioderErGyldige: React.Dispatch<React.SetStateAction<PeriodeValidState[]>>,\n    erEndringssøknad: boolean,\n    termindato: Date | undefined,\n    antallBarn: number,\n    utsettelserIPlan: Utsettelsesperiode[],\n    intl: IntlShape,\n    isOpen: boolean,\n    saveAttachment: (vedlegg: Attachment) => void,\n) => {\n    switch (periode.type) {\n        case Periodetype.Uttak:\n        case Periodetype.Overføring:\n        case Periodetype.Opphold:\n            if (isForeldrepengerFørFødselUttaksperiode(periode)) {\n                return (\n                    <PeriodeFørFødselForm\n                        periode={periode}\n                        familiehendelsesdato={familiehendelsesdato}\n                        handleUpdatePeriode={handleUpdatePeriode}\n                        erFarEllerMedmor={erFarEllerMedmor}\n                        morHarRett={!søkerErFarEllerMedmorOgKunDeHarRett}\n                        situasjon={situasjon}\n                        utsettelserIPlan={utsettelserIPlan}\n                    />\n                );\n            }\n\n            return (\n                <PeriodeUttakForm\n                    periode={periode}\n                    familiehendelsesdato={familiehendelsesdato}\n                    handleUpdatePeriode={handleUpdatePeriode}\n                    stønadskontoer={stønadskontoer}\n                    navnPåForeldre={navnPåForeldre}\n                    annenForelder={annenForelder}\n                    toggleIsOpen={toggleIsOpen}\n                    arbeidsforhold={arbeidsforhold}\n                    handleDeletePeriode={handleDeletePeriode}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    erFlerbarnssøknad={erFlerbarnssøknad}\n                    erAleneOmOmsorg={erAleneOmOmsorg}\n                    erDeltUttak={erDeltUttak}\n                    situasjon={situasjon}\n                    erMorUfør={erMorUfør}\n                    erEndringssøknad={erEndringssøknad}\n                    setPerioderErGyldige={setPerioderErGyldige}\n                    termindato={termindato}\n                    morHarRett={!søkerErFarEllerMedmorOgKunDeHarRett}\n                    antallBarn={antallBarn}\n                    utsettelserIPlan={utsettelserIPlan}\n                    intl={intl}\n                    isOpen={isOpen}\n                    saveAttachment={saveAttachment}\n                />\n            );\n        case Periodetype.Utsettelse:\n            return (\n                <PeriodeUtsettelseForm\n                    periode={periode}\n                    familiehendelsesdato={familiehendelsesdato}\n                    handleUpdatePeriode={handleUpdatePeriode}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    erAleneOmOmsorg={erAleneOmOmsorg}\n                    handleDeletePeriode={handleDeletePeriode}\n                    toggleIsOpen={toggleIsOpen}\n                    navnPåForeldre={navnPåForeldre}\n                    erMorUfør={erMorUfør}\n                    søkerErFarEllerMedmorOgKunDeHarRett={søkerErFarEllerMedmorOgKunDeHarRett}\n                    arbeidsforhold={arbeidsforhold}\n                    situasjon={situasjon}\n                    utsettelserIPlan={utsettelserIPlan}\n                    setPerioderErGyldige={setPerioderErGyldige}\n                    isOpen={isOpen}\n                    saveAttachment={saveAttachment}\n                />\n            );\n        case Periodetype.Hull:\n            return (\n                <PeriodeHull\n                    erAleneOmOmsorg={erAleneOmOmsorg}\n                    erDeltUttak={erDeltUttak}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    periode={periode}\n                    familiehendelsesdato={familiehendelsesdato}\n                    navnAnnenForelder={erFarEllerMedmor ? navnPåForeldre.mor : navnPåForeldre.farMedmor}\n                    handleUpdatePeriode={handleUpdatePeriode}\n                />\n            );\n        case Periodetype.PeriodeUtenUttak:\n            return (\n                <PeriodeUtenUttak\n                    periode={periode}\n                    handleUpdatePeriode={handleUpdatePeriode}\n                    familiehendelsesdato={familiehendelsesdato}\n                />\n            );\n        case Periodetype.Info:\n            return (\n                <>\n                    {periode.visPeriodeIPlan && !isAvslåttPeriode(periode) && (\n                        <PeriodeInfo periode={periode} navnPåForeldre={navnPåForeldre} />\n                    )}\n                    {isSlettbarAvslåttPeriode(periode) && (\n                        <SlettbarAvslåttPeriode periode={periode} handleDeletePeriode={handleDeletePeriode} />\n                    )}\n                </>\n            );\n        default:\n            return <div>Ingen visning</div>;\n    }\n};\n\nconst PeriodelisteItem: FunctionComponent<Props> = ({\n    egenPeriode,\n    periode,\n    isOpen,\n    toggleIsOpen,\n    familiehendelsesdato,\n    handleUpdatePeriode,\n    stønadskontoer,\n    navnPåForeldre,\n    annenForelder,\n    arbeidsforhold,\n    handleDeletePeriode,\n    erFarEllerMedmor,\n    erFlerbarnssøknad,\n    erAleneOmOmsorg,\n    erDeltUttak,\n    situasjon,\n    meldinger = [],\n    erMorUfør,\n    annenForelderSamtidigUttakPeriode,\n    søkerErFarEllerMedmorOgKunDeHarRett,\n    erEndringssøknad,\n    setPerioderErGyldige,\n    termindato,\n    antallBarn,\n    utsettelserIPlan,\n    intl,\n    periodeErGyldig,\n    saveAttachment,\n}) => {\n    const bem = bemUtils('periodelisteItem');\n    let melding = meldinger.length > 0 ? meldinger[0] : undefined;\n\n    if (!periodeErGyldig) {\n        melding = {\n            type: 'feil',\n            contentIntlKey: 'uttaksplan.validering.feil.erAllePeriodeSkjemaspørsmålBesvart',\n        };\n    }\n\n    if (isInfoPeriode(periode) && !periode.visPeriodeIPlan) {\n        return null;\n    }\n\n    const toggleFocusAndOpen = () => {\n        const headerButton = window.document.getElementById(periode.id);\n\n        if (headerButton) {\n            setTimeout(() => {\n                headerButton.focus();\n            }, 150);\n        }\n\n        toggleIsOpen(periode.id);\n    };\n\n    return (\n        <article\n            className={classNames(bem.block, egenPeriode ? bem.modifier('egenPeriode') : bem.modifier('transparent'))}\n        >\n            <Accordion>\n                <Accordion.Item open={isOpen}>\n                    <Accordion.Header onClick={() => toggleIsOpen(periode.id)} className={bem.element('header')}>\n                        <PeriodelisteItemHeader\n                            egenPeriode={egenPeriode}\n                            periode={periode}\n                            navnPåForeldre={navnPåForeldre}\n                            melding={melding}\n                            annenForelderSamtidigUttakPeriode={annenForelderSamtidigUttakPeriode}\n                            familiehendelsesdato={familiehendelsesdato}\n                            termindato={termindato}\n                            situasjon={situasjon}\n                            erFarEllerMedmor={erFarEllerMedmor}\n                            erAleneOmOmsorg={erAleneOmOmsorg}\n                        />\n                    </Accordion.Header>\n                    <Accordion.Content>\n                        <Block visible={meldinger.length > 0}>\n                            <VeilederMeldinger\n                                stil=\"default\"\n                                meldinger={meldinger.filter((m) => m.avvikType !== 'skjema')}\n                            />\n                        </Block>\n                        {renderPeriodeListeInnhold(\n                            periode,\n                            familiehendelsesdato,\n                            handleUpdatePeriode,\n                            stønadskontoer,\n                            navnPåForeldre,\n                            annenForelder,\n                            toggleFocusAndOpen,\n                            arbeidsforhold,\n                            handleDeletePeriode,\n                            erFarEllerMedmor,\n                            erFlerbarnssøknad,\n                            erAleneOmOmsorg,\n                            erDeltUttak,\n                            situasjon,\n                            erMorUfør,\n                            søkerErFarEllerMedmorOgKunDeHarRett,\n                            setPerioderErGyldige,\n                            erEndringssøknad,\n                            termindato,\n                            antallBarn,\n                            utsettelserIPlan,\n                            intl,\n                            isOpen,\n                            saveAttachment,\n                        )}\n                    </Accordion.Content>\n                </Accordion.Item>\n            </Accordion>\n        </article>\n    );\n};\n\nexport default PeriodelisteItem;\n","import { UttaksplanIkonProps } from '../components/uttaksplan-ikon/UttaksplanIkon';\n\ninterface OwnProps {\n    fylt?: boolean;\n}\n\nconst HjerteIkon = (props: UttaksplanIkonProps & OwnProps) => {\n    const { title, fylt, ...rest } = props;\n    return fylt ? (\n        <svg focusable=\"false\" role=\"img\" aria-hidden=\"true\" width={24} height={24} {...rest}>\n            <title>{title}</title>\n            <path\n                fill=\"#ba3a26\"\n                fillRule=\"evenodd\"\n                d=\"M23 7.173c0 .41-.028.823-.083 1.243-.418 3.173-2.345 6.521-5.291 9.882a43.405 43.405 0 0 1-4.856 4.717c-.22.181-.378.307-.464.374a.5.5 0 0 1-.582.021 16.293 16.293 0 0 1-.467-.325 35.073 35.073 0 0 1-4.87-4.255C3.027 15.28 1 11.544 1 7.765 1-.286 9.586-1.719 12.003 4.612 14.42-1.616 23-.464 23 7.173z\"\n            />\n        </svg>\n    ) : (\n        <svg focusable=\"false\" role=\"img\" aria-hidden=\"true\" width={24} height={24} viewBox=\"0 0 24 24\" {...rest}>\n            <title>{title}</title>\n            <path\n                fill=\"none\"\n                fillRule=\"evenodd\"\n                stroke=\"#3E3832\"\n                strokeLinejoin=\"round\"\n                d=\"M12 22.993s10.5-8.128 10.5-15.82-9.316-8.284-10.5-.59C10.816-1.112 1.5-.52 1.5 7.764S12 22.993 12 22.993z\"\n            />\n        </svg>\n    );\n};\nexport default HjerteIkon;\n","import { Barn, bemUtils, formaterDatoUtenDag, isAdoptertBarn, isFødtBarn } from '@navikt/fp-common';\nimport { FunctionComponent, ReactNode } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { BodyShort } from '@navikt/ds-react';\nimport HjerteIkon from '../../assets/HjerteIkon';\n\nimport './familiehendelsesdatoDisplay.less';\n\ninterface Props {\n    familiehendelsedato: Date;\n    barn: Barn;\n}\n\nconst getTekst = (barn: Barn, familiehendelsedato: Date, antallBarn: number): ReactNode => {\n    if (!isAdoptertBarn(barn)) {\n        if (isFødtBarn(barn)) {\n            return (\n                <FormattedMessage\n                    id=\"uttaksplan.familiehendelsesdato.født\"\n                    values={{ antallBarn, dato: formaterDatoUtenDag(familiehendelsedato) }}\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id=\"uttaksplan.familiehendelsesdato.termin\"\n                values={{ dato: formaterDatoUtenDag(familiehendelsedato) }}\n            />\n        );\n    }\n\n    return (\n        <FormattedMessage\n            id=\"uttaksplan.familiehendelsesdato.adopsjon\"\n            values={{ antallBarn, dato: formaterDatoUtenDag(familiehendelsedato) }}\n        />\n    );\n};\n\nconst FamiliehendelsedatoDisplay: FunctionComponent<Props> = ({ familiehendelsedato, barn }) => {\n    const bem = bemUtils('familiehendelsesdatoDisplay');\n\n    return (\n        <div className={bem.block}>\n            <div className={bem.element('hjerte')}>\n                <HjerteIkon fylt={true} title=\"Hjerte\" />\n            </div>\n            <BodyShort>{getTekst(barn, familiehendelsedato, barn.antallBarn)}</BodyShort>\n        </div>\n    );\n};\n\nexport default FamiliehendelsedatoDisplay;\n","import { FunctionComponent, useState } from 'react';\nimport {\n    AnnenForelder,\n    Arbeidsforhold,\n    Attachment,\n    Barn,\n    BarnFraNesteSak,\n    bemUtils,\n    Block,\n    formatDate,\n    isInfoPeriode,\n    isValidTidsperiode,\n    NavnPåForeldre,\n    Periode,\n    PeriodeValidState,\n    Situasjon,\n    TilgjengeligStønadskonto,\n    Utsettelsesperiode,\n} from '@navikt/fp-common';\nimport PeriodelisteItem from './../periodeliste-item/PeriodelisteItem';\n\nimport dayjs from 'dayjs';\nimport FamiliehendelsedatoDisplay from '../familiehendelsedato-display/FamiliehendelsedatoDisplay';\nimport { FormattedMessage, IntlShape } from 'react-intl';\nimport { Alert } from '@navikt/ds-react';\nimport { getAnnenForelderSamtidigUttakPeriode } from '@navikt/fp-common/src/common/utils/periodeUtils';\nimport { VeiledermeldingerPerPeriode } from '../../validering/veilederInfo/types';\n\nimport './periodeliste.less';\n\ninterface Props {\n    uttaksplan: Periode[];\n    familiehendelsesdato: Date;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n    stønadskontoer: TilgjengeligStønadskonto[];\n    navnPåForeldre: NavnPåForeldre;\n    annenForelder: AnnenForelder;\n    arbeidsforhold: Arbeidsforhold[];\n    handleDeletePeriode: (periodeId: string) => void;\n    erFarEllerMedmor: boolean;\n    erFlerbarnssøknad: boolean;\n    erAleneOmOmsorg: boolean;\n    erDeltUttak: boolean;\n    situasjon: Situasjon;\n    meldingerPerPeriode: VeiledermeldingerPerPeriode;\n    erMorUfør: boolean;\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean;\n    setPerioderErGyldige: React.Dispatch<React.SetStateAction<PeriodeValidState[]>>;\n    erEndringssøknad: boolean;\n    termindato: Date | undefined;\n    antallBarn: number;\n    utsettelserIPlan: Utsettelsesperiode[];\n    barn: Barn;\n    barnFraNesteSak: BarnFraNesteSak | undefined;\n    intl: IntlShape;\n    perioderErGyldige: PeriodeValidState[];\n    saveAttachment: (vedlegg: Attachment) => void;\n}\n\nconst getIndexOfFørstePeriodeEtterFødsel = (uttaksplan: Periode[], familiehendelsesdato: Date) => {\n    return uttaksplan.findIndex(\n        (p) => isValidTidsperiode(p.tidsperiode) && dayjs(p.tidsperiode.fom).isSameOrAfter(familiehendelsesdato),\n    );\n};\n\nconst getIndexOfSistePeriodeFørDato = (uttaksplan: Periode[], dato: Date | undefined) => {\n    if (dato !== undefined) {\n        return Math.max(0, uttaksplan.filter((p) => dayjs(p.tidsperiode.tom).isBefore(dato, 'day')).length);\n    }\n    return undefined;\n};\n\nconst Periodeliste: FunctionComponent<Props> = ({\n    uttaksplan,\n    familiehendelsesdato,\n    handleUpdatePeriode,\n    stønadskontoer,\n    navnPåForeldre,\n    annenForelder,\n    arbeidsforhold,\n    handleDeletePeriode,\n    erFarEllerMedmor,\n    erFlerbarnssøknad,\n    erAleneOmOmsorg,\n    erDeltUttak,\n    situasjon,\n    meldingerPerPeriode,\n    erMorUfør,\n    søkerErFarEllerMedmorOgKunDeHarRett,\n    setPerioderErGyldige,\n    erEndringssøknad,\n    termindato,\n    antallBarn,\n    utsettelserIPlan,\n    barn,\n    barnFraNesteSak,\n    intl,\n    perioderErGyldige,\n    saveAttachment,\n}) => {\n    const [openPeriodeId, setOpenPeriodeId] = useState<string>(null!);\n    const bem = bemUtils('periodeliste');\n\n    const toggleIsOpen = (id: string) => {\n        if (openPeriodeId === id) {\n            setOpenPeriodeId(null!);\n        } else {\n            setOpenPeriodeId(id);\n        }\n    };\n\n    const indexOfFørstePeriodeEtterFødsel = getIndexOfFørstePeriodeEtterFødsel(uttaksplan, familiehendelsesdato);\n    const erAllePerioderIPlanenFørFødsel = indexOfFørstePeriodeEtterFødsel === -1;\n    const indexOfSistePeriodeFørNyStøndasperiodeNyttBarn =\n        barnFraNesteSak !== undefined\n            ? getIndexOfSistePeriodeFørDato(uttaksplan, barnFraNesteSak.startdatoFørsteStønadsperiode)\n            : undefined;\n    return (\n        <div className={bem.block}>\n            {uttaksplan.map((p, index) => {\n                const periodeMedValidState = perioderErGyldige.find((periodeMedState) => periodeMedState.id === p.id);\n                const periodeErGyldig = periodeMedValidState ? periodeMedValidState.isValid : true;\n                return (\n                    <div key={p.id}>\n                        {indexOfFørstePeriodeEtterFødsel === index ? (\n                            <FamiliehendelsedatoDisplay barn={barn} familiehendelsedato={familiehendelsesdato} />\n                        ) : null}\n                        {barnFraNesteSak !== undefined &&\n                        indexOfSistePeriodeFørNyStøndasperiodeNyttBarn !== undefined &&\n                        indexOfSistePeriodeFørNyStøndasperiodeNyttBarn === index ? (\n                            <Block padBottom=\"s\">\n                                <Alert className=\"nyStønadsperiodeNesteSak\" variant=\"info\">\n                                    <FormattedMessage\n                                        id=\"uttaksplan.periodeliste.info.nyStønadsperiodeNesteSak\"\n                                        values={{\n                                            datoStønadsperiodeNyttBarn: formatDate(\n                                                barnFraNesteSak.startdatoFørsteStønadsperiode,\n                                            ),\n                                        }}\n                                    />\n                                </Alert>\n                            </Block>\n                        ) : null}\n                        <PeriodelisteItem\n                            key={p.id}\n                            egenPeriode={!isInfoPeriode(p)}\n                            periode={p}\n                            isOpen={openPeriodeId === p.id}\n                            toggleIsOpen={toggleIsOpen}\n                            familiehendelsesdato={familiehendelsesdato}\n                            handleUpdatePeriode={handleUpdatePeriode}\n                            stønadskontoer={stønadskontoer}\n                            navnPåForeldre={navnPåForeldre}\n                            annenForelder={annenForelder}\n                            arbeidsforhold={arbeidsforhold}\n                            handleDeletePeriode={handleDeletePeriode}\n                            erFarEllerMedmor={erFarEllerMedmor}\n                            erFlerbarnssøknad={erFlerbarnssøknad}\n                            erAleneOmOmsorg={erAleneOmOmsorg}\n                            erDeltUttak={erDeltUttak}\n                            situasjon={situasjon}\n                            meldinger={meldingerPerPeriode[p.id]}\n                            erMorUfør={erMorUfør}\n                            annenForelderSamtidigUttakPeriode={getAnnenForelderSamtidigUttakPeriode(p, uttaksplan)}\n                            søkerErFarEllerMedmorOgKunDeHarRett={søkerErFarEllerMedmorOgKunDeHarRett}\n                            setPerioderErGyldige={setPerioderErGyldige}\n                            erEndringssøknad={erEndringssøknad}\n                            termindato={termindato}\n                            antallBarn={antallBarn}\n                            utsettelserIPlan={utsettelserIPlan}\n                            intl={intl}\n                            periodeErGyldig={periodeErGyldig}\n                            saveAttachment={saveAttachment}\n                        />\n                        {erAllePerioderIPlanenFørFødsel && index === uttaksplan.length - 1 ? (\n                            <FamiliehendelsedatoDisplay barn={barn} familiehendelsedato={familiehendelsesdato} />\n                        ) : null}\n                        {barnFraNesteSak !== undefined &&\n                        index === uttaksplan.length - 1 &&\n                        indexOfSistePeriodeFørNyStøndasperiodeNyttBarn === uttaksplan.length ? (\n                            <Block padBottom=\"s\">\n                                <Alert className=\"nyStønadsperiodeNesteSak\" variant=\"info\">\n                                    <FormattedMessage\n                                        id=\"uttaksplan.periodeliste.info.nyStønadsperiodeNesteSak\"\n                                        values={{\n                                            datoStønadsperiodeNyttBarn: formatDate(\n                                                barnFraNesteSak.startdatoFørsteStønadsperiode,\n                                            ),\n                                        }}\n                                    />\n                                </Alert>\n                            </Block>\n                        ) : null}\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n\nexport default Periodeliste;\n","import {\n    bemUtils,\n    InfoBlock,\n    intlUtils,\n    Block,\n    ActionLink,\n    NavnPåForeldre,\n    Situasjon,\n    TilgjengeligStønadskonto,\n    Arbeidsforhold,\n    Barn,\n    BarnFraNesteSak,\n    AnnenForelder,\n    isAnnenForelderOppgitt,\n    Periode,\n    Periodene,\n    Utsettelsesperiode,\n    Attachment,\n    PeriodeValidState,\n} from '@navikt/fp-common';\nimport { FunctionComponent, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport NyPeriode from '../uttaks-forms/ny-periode/NyPeriode';\nimport Periodeliste from './../periodeliste/Periodeliste';\nimport { Button, Heading } from '@navikt/ds-react';\n\nimport './planlegger.less';\nimport { VeiledermeldingerPerPeriode } from '../../validering/veilederInfo/types';\n\ninterface Props {\n    uttaksplan: Periode[];\n    familiehendelsesdato: Date;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n    stønadskontoer: TilgjengeligStønadskonto[];\n    navnPåForeldre: NavnPåForeldre;\n    annenForelder: AnnenForelder;\n    arbeidsforhold: Arbeidsforhold[];\n    handleDeletePeriode: (periodeId: string) => void;\n    handleAddPeriode: (nyPeriode: Periode, familiehendelsedato: Date) => void;\n    erFarEllerMedmor: boolean;\n    erFlerbarnssøknad: boolean;\n    erAleneOmOmsorg: boolean;\n    erDeltUttak: boolean;\n    situasjon: Situasjon;\n    meldingerPerPeriode: VeiledermeldingerPerPeriode;\n    erMorUfør: boolean;\n    setPerioderErGyldige: React.Dispatch<React.SetStateAction<PeriodeValidState[]>>;\n    erEndringssøknad: boolean;\n    setSlettUttaksplanModalOpen: (isOpen: boolean) => void;\n    setResetUttaksplanModalOpen: (isOpen: boolean) => void;\n    termindato: Date | undefined;\n    barn: Barn;\n    utsettelserIPlan: Utsettelsesperiode[];\n    barnFraNesteSak: BarnFraNesteSak | undefined;\n    perioderErGyldige: PeriodeValidState[];\n    saveAttachment: (vedlegg: Attachment) => void;\n}\n\nconst Planlegger: FunctionComponent<Props> = ({\n    uttaksplan,\n    familiehendelsesdato,\n    handleUpdatePeriode,\n    stønadskontoer,\n    navnPåForeldre,\n    annenForelder,\n    arbeidsforhold,\n    handleDeletePeriode,\n    handleAddPeriode,\n    erFarEllerMedmor,\n    erFlerbarnssøknad,\n    erAleneOmOmsorg,\n    erDeltUttak,\n    situasjon,\n    meldingerPerPeriode,\n    erMorUfør,\n    setPerioderErGyldige,\n    erEndringssøknad,\n    setSlettUttaksplanModalOpen,\n    setResetUttaksplanModalOpen,\n    termindato,\n    barn,\n    utsettelserIPlan,\n    barnFraNesteSak,\n    perioderErGyldige,\n    saveAttachment,\n}) => {\n    const intl = useIntl();\n    const bem = bemUtils('planlegger');\n    const [nyPeriodeFormIsVisible, setNyPeriodeFormIsVisible] = useState(false);\n    const [isUtsettelse, setIsUtsettelse] = useState(false);\n    const nesteLedigeUttaksdato = Periodene(uttaksplan).getFørsteUttaksdagEtterSistePeriode();\n    const annenForelderErOppgitMenHarIkkeRett =\n        isAnnenForelderOppgitt(annenForelder) &&\n        !annenForelder.harRettPåForeldrepengerINorge &&\n        !annenForelder.harRettPåForeldrepengerIEØS;\n    const søkerErFarEllerMedmorOgKunDeHarRett =\n        erFarEllerMedmor && !erAleneOmOmsorg && annenForelderErOppgitMenHarIkkeRett;\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <InfoBlock>\n                    <Block padBottom=\"xl\">\n                        <section>\n                            <div className={bem.element('tittel')}>\n                                <div className={bem.element('tittelLinkWrapper')}>\n                                    <Heading size=\"medium\">{intlUtils(intl, 'uttaksplan.dinPlan')}</Heading>\n                                    {erEndringssøknad && (\n                                        <ActionLink\n                                            onClick={() => setResetUttaksplanModalOpen(true)}\n                                            className={bem.element('resetPlan')}\n                                        >\n                                            <FormattedMessage id=\"uttaksplan.resetPlan.tittel\" />\n                                        </ActionLink>\n                                    )}\n                                    <ActionLink\n                                        onClick={() => setSlettUttaksplanModalOpen(true)}\n                                        className={bem.element('slettPlan')}\n                                    >\n                                        <FormattedMessage id=\"uttaksplan.slettPlan.tittel\" />\n                                    </ActionLink>\n                                </div>\n                            </div>\n\n                            <Periodeliste\n                                uttaksplan={uttaksplan}\n                                familiehendelsesdato={familiehendelsesdato}\n                                handleUpdatePeriode={handleUpdatePeriode}\n                                stønadskontoer={stønadskontoer}\n                                navnPåForeldre={navnPåForeldre}\n                                annenForelder={annenForelder}\n                                arbeidsforhold={arbeidsforhold}\n                                handleDeletePeriode={handleDeletePeriode}\n                                erFarEllerMedmor={erFarEllerMedmor}\n                                erFlerbarnssøknad={erFlerbarnssøknad}\n                                erAleneOmOmsorg={erAleneOmOmsorg}\n                                erDeltUttak={erDeltUttak}\n                                situasjon={situasjon}\n                                meldingerPerPeriode={meldingerPerPeriode}\n                                erMorUfør={erMorUfør}\n                                søkerErFarEllerMedmorOgKunDeHarRett={søkerErFarEllerMedmorOgKunDeHarRett}\n                                setPerioderErGyldige={setPerioderErGyldige}\n                                erEndringssøknad={erEndringssøknad}\n                                termindato={termindato}\n                                antallBarn={barn.antallBarn}\n                                utsettelserIPlan={utsettelserIPlan}\n                                barn={barn}\n                                barnFraNesteSak={barnFraNesteSak}\n                                intl={intl}\n                                perioderErGyldige={perioderErGyldige}\n                                saveAttachment={saveAttachment}\n                            />\n                        </section>\n                    </Block>\n                    {nyPeriodeFormIsVisible && (\n                        <div style={{ backgroundColor: 'white', padding: '1rem' }}>\n                            <NyPeriode\n                                setNyPeriodeFormIsVisible={setNyPeriodeFormIsVisible}\n                                annenForelder={annenForelder}\n                                arbeidsforhold={arbeidsforhold}\n                                familiehendelsesdato={familiehendelsesdato}\n                                isUtsettelse={isUtsettelse}\n                                navnPåForeldre={navnPåForeldre}\n                                stønadskontoer={stønadskontoer}\n                                handleAddPeriode={handleAddPeriode}\n                                erFarEllerMedmor={erFarEllerMedmor}\n                                erFlerbarnssøknad={erFlerbarnssøknad}\n                                erAleneOmOmsorg={erAleneOmOmsorg}\n                                erDeltUttak={erDeltUttak}\n                                situasjon={situasjon}\n                                erMorUfør={erMorUfør}\n                                setPerioderErGyldige={setPerioderErGyldige}\n                                nesteLedigeUttaksdato={nesteLedigeUttaksdato}\n                                søkerErFarEllerMedmorOgKunDeHarRett={søkerErFarEllerMedmorOgKunDeHarRett}\n                                erEndringssøknad={erEndringssøknad}\n                                termindato={termindato}\n                                antallBarn={barn.antallBarn}\n                                utsettelserIPlan={utsettelserIPlan}\n                                intl={intl}\n                                saveAttachment={saveAttachment}\n                            />\n                        </div>\n                    )}\n                </InfoBlock>\n            </Block>\n            {!nyPeriodeFormIsVisible && (\n                <Block padBottom=\"l\">\n                    <div className={bem.element('knapperad')}>\n                        <Button\n                            type=\"button\"\n                            variant=\"secondary\"\n                            onClick={() => {\n                                setNyPeriodeFormIsVisible(true);\n                                setIsUtsettelse(false);\n                            }}\n                        >\n                            Legg til ny periode\n                        </Button>\n                        <Button\n                            type=\"button\"\n                            variant=\"secondary\"\n                            onClick={() => {\n                                setNyPeriodeFormIsVisible(true);\n                                setIsUtsettelse(true);\n                            }}\n                        >\n                            Legg til utsettelse\n                        </Button>\n                    </div>\n                </Block>\n            )}\n        </>\n    );\n};\n\nexport default Planlegger;\n","import { FunctionComponent } from 'react';\nimport { injectIntl, IntlShape } from 'react-intl';\nimport {\n    bemUtils,\n    getVarighetString,\n    NavnPåForeldre,\n    Situasjon,\n    StønadskontoType,\n    StønadskontoUttak,\n} from '@navikt/fp-common';\nimport { BodyShort } from '@navikt/ds-react';\nimport { getStønadskontoNavn } from '@navikt/fp-common/src/common/utils/stønadskontoerUtils';\nimport './kontostatus.less';\nimport StønadskontoIkon from '../../stønadskonto-ikon/StønadskontoIkon';\n\nexport interface Props {\n    uttak: StønadskontoUttak;\n    navnPåForeldre: NavnPåForeldre;\n    erEndringssøknad: boolean;\n    intl: IntlShape;\n    erFarEllerMedmor: boolean;\n    situasjon: Situasjon;\n    erAleneOmOmsorg: boolean;\n}\n\nconst bem = bemUtils('kontostatus');\n\nconst Kontostatus: FunctionComponent<Props> = ({\n    uttak,\n    navnPåForeldre,\n    erEndringssøknad,\n    intl,\n    erFarEllerMedmor,\n    situasjon,\n    erAleneOmOmsorg,\n}) => {\n    if (erEndringssøknad && uttak.konto === StønadskontoType.ForeldrepengerFørFødsel) {\n        uttak.dager = 0;\n    }\n\n    const varighetString = getVarighetString(uttak.dager, intl);\n    const kontoErOvertrukket = uttak.dager < 0;\n\n    return (\n        <BodyShort className={bem.block} as=\"div\">\n            <div className={bem.element('ikon')} aria-hidden={true} role=\"presentation\">\n                <StønadskontoIkon\n                    konto={uttak.konto}\n                    navnPåForeldre={navnPåForeldre}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    situasjon={situasjon}\n                    erAleneOmOmsorg={erAleneOmOmsorg}\n                />\n            </div>\n            <div className={bem.element('content')}>\n                <div className={kontoErOvertrukket ? bem.element('kontoOvertrukket') : bem.element('konto')}>\n                    {getStønadskontoNavn(intl, uttak.konto, navnPåForeldre, erFarEllerMedmor, erAleneOmOmsorg)}\n                </div>\n                <strong\n                    className={kontoErOvertrukket ? bem.element('dagerOvertrukket') : bem.element('dager')}\n                    data-name={uttak.konto}\n                >\n                    {kontoErOvertrukket ? `- ${varighetString}` : varighetString}\n                </strong>\n            </div>\n        </BodyShort>\n    );\n};\n\nexport default injectIntl(Kontostatus);\n","import * as React from 'react';\nimport { bemUtils } from '@navikt/fp-common';\nimport './tilesList.less';\n\nconst bem = bemUtils('tilesList');\n\nconst TilesList: React.FunctionComponent<{ columns?: 1 | 2 | 3 | 'flex'; children?: React.ReactNode }> = ({\n    columns = 3,\n    children,\n}) => (\n    <ol className={bem.classNames(bem.block, bem.modifier(`columns-${columns}`))}>\n        {React.Children.map(children, (child) => (\n            <li className={bem.element('tile')}>{child}</li>\n        ))}\n    </ol>\n);\n\nexport default TilesList;\n","import {\n    Forelder,\n    Periode,\n    Periodene,\n    StønadskontoType,\n    StønadskontoUttak,\n    TilgjengeligStønadskonto,\n    Uttaksperiode,\n    beregnBrukteUttaksdager,\n    getAllePerioderMedUttaksinfoFraUttaksplan,\n    isUttaksperiode,\n} from '@navikt/fp-common';\n\ninterface ForeldersBrukteDager {\n    førTermin: StønadskontoUttak[];\n    etterTermin: StønadskontoUttak[];\n    alle: StønadskontoUttak[];\n    dagerTotalt: number;\n    dagerEgneKvoter: number;\n    dagerAnnenForeldersKvote: number;\n    dagerFellesperiode: number;\n}\n\nexport interface BrukteDager {\n    mor: ForeldersBrukteDager;\n    farMedmor: ForeldersBrukteDager;\n    alle: StønadskontoUttak[];\n}\n\nconst isMorsPeriode = (periode: Uttaksperiode): boolean => {\n    return periode.forelder === Forelder.mor;\n};\nconst isFarsPeriode = (periode: Uttaksperiode): boolean => {\n    return periode.forelder === Forelder.farMedmor;\n};\nconst isFellesperiodeKvote = (uttak: StønadskontoUttak): boolean => uttak.konto === StønadskontoType.Fellesperiode;\n\nconst isMorsKvote = (uttak: StønadskontoUttak): boolean => {\n    switch (uttak.konto) {\n        case StønadskontoType.ForeldrepengerFørFødsel:\n        case StønadskontoType.Mødrekvote:\n            return true;\n        default:\n            return false;\n    }\n};\n\nconst isFarMedmorsKvote = (uttak: StønadskontoUttak): boolean => {\n    return uttak.konto === StønadskontoType.Fedrekvote;\n};\n\nconst summerBrukteUttaksdager = (uttak: StønadskontoUttak[]) => {\n    return uttak.reduce((dager, u) => dager + u.dager, 0);\n};\n\nconst getBrukteDagerForForelder = (\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    perioder: Uttaksperiode[],\n    familiehendelsesdato: Date,\n    forelder: Forelder,\n): ForeldersBrukteDager => {\n    const perioderFørTermin = Periodene(perioder)\n        .getPerioderFørFamiliehendelsesdato(familiehendelsesdato)\n        .filter(isUttaksperiode);\n    const perioderEtterTermin = Periodene(perioder)\n        .getPerioderEtterFamiliehendelsesdato(familiehendelsesdato)\n        .filter(isUttaksperiode);\n    const førTermin = beregnBrukteUttaksdager(tilgjengeligeStønadskontoer, perioderFørTermin);\n    const etterTermin = beregnBrukteUttaksdager(tilgjengeligeStønadskontoer, perioderEtterTermin);\n    const alle = beregnBrukteUttaksdager(tilgjengeligeStønadskontoer, perioder);\n    const dagerTotalt = summerBrukteUttaksdager(alle);\n\n    const isMor = forelder === Forelder.mor;\n    const dagerEgneKvoter = summerBrukteUttaksdager(alle.filter(isMor ? isMorsKvote : isFarMedmorsKvote));\n    const dagerOverført = summerBrukteUttaksdager(alle.filter(isMor ? isFarMedmorsKvote : isMorsKvote));\n    const dagerFellesperiode = summerBrukteUttaksdager(alle.filter(isFellesperiodeKvote));\n\n    return {\n        førTermin,\n        etterTermin,\n        alle,\n        dagerTotalt,\n        dagerEgneKvoter,\n        dagerFellesperiode,\n        dagerAnnenForeldersKvote: dagerOverført,\n    };\n};\n\nexport const getBrukteDager = (\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n): BrukteDager => {\n    const perioderMedUttak = getAllePerioderMedUttaksinfoFraUttaksplan(perioder);\n    return {\n        mor: getBrukteDagerForForelder(\n            tilgjengeligeStønadskontoer,\n            perioderMedUttak.filter(isMorsPeriode),\n            familiehendelsesdato,\n            Forelder.mor,\n        ),\n        farMedmor: getBrukteDagerForForelder(\n            tilgjengeligeStønadskontoer,\n            perioderMedUttak.filter(isFarsPeriode),\n            familiehendelsesdato,\n            Forelder.farMedmor,\n        ),\n        alle: beregnBrukteUttaksdager(tilgjengeligeStønadskontoer, perioder),\n    };\n};\n","import {\n    Periode,\n    StønadskontoType,\n    StønadskontoUttak,\n    TilgjengeligStønadskonto,\n    beregnGjenståendeUttaksdager,\n} from '@navikt/fp-common';\n\nexport interface Uttaksstatus {\n    gjelderDagerBrukt: boolean;\n    uttak: StønadskontoUttak[];\n}\n\nexport const getUttaksstatus = ({\n    erDeltUttak,\n    erEndringssøknad,\n    harKomplettUttaksplan,\n    erFarEllerMedmor,\n    tilgjengeligeStønadskontoer,\n    uttaksplan,\n}: UttaksstatusFuncParams): Uttaksstatus => {\n    const gjelderDagerBrukt =\n        (erEndringssøknad && harKomplettUttaksplan !== true) ||\n        (erDeltUttak && erFarEllerMedmor && harKomplettUttaksplan !== true);\n\n    const uttak: StønadskontoUttak[] = beregnGjenståendeUttaksdager(\n        tilgjengeligeStønadskontoer,\n        uttaksplan,\n        gjelderDagerBrukt,\n    );\n    return {\n        gjelderDagerBrukt,\n        uttak: erFarEllerMedmor\n            ? uttak.filter((kontouttak) => kontouttak.konto !== StønadskontoType.ForeldrepengerFørFødsel)\n            : uttak,\n    };\n};\n\nexport interface UttaksstatusFuncParams {\n    erDeltUttak: boolean;\n    erEndringssøknad: boolean;\n    harKomplettUttaksplan: boolean;\n    erFarEllerMedmor: boolean;\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[];\n    uttaksplan: Periode[];\n}\n\nexport const getUttaksstatusFunc = ({\n    erDeltUttak,\n    erEndringssøknad,\n    harKomplettUttaksplan,\n    erFarEllerMedmor,\n    tilgjengeligeStønadskontoer,\n    uttaksplan,\n}: UttaksstatusFuncParams): (() => Uttaksstatus) => {\n    return () =>\n        getUttaksstatus({\n            erDeltUttak,\n            erEndringssøknad,\n            harKomplettUttaksplan,\n            erFarEllerMedmor,\n            tilgjengeligeStønadskontoer,\n            uttaksplan,\n        });\n};\n","import { FunctionComponent } from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport {\n    ForelderIkon,\n    ForeldreparSituasjon,\n    NavnPåForeldre,\n    Periode,\n    Personkort,\n    Situasjon,\n    StønadskontoType,\n    StønadskontoUttak,\n    Søkerrolle,\n    TilgjengeligStønadskonto,\n    bemUtils,\n    getSituasjonForelderSvg,\n    getVarighetString,\n    guid,\n    intlUtils,\n    isFarEllerMedmor,\n} from '@navikt/fp-common';\nimport Kontostatus from './konto-status/Kontostatus';\nimport TilesList from './tilesList/TilesList';\nimport './oversiktKvoter.less';\nimport { Heading } from '@navikt/ds-react';\nimport { capitalizeFirstLetter } from '@navikt/fp-common/src/common/utils/stringUtils';\nimport { BrukteDager, getBrukteDager } from '../../utils/brukteDagerUtils';\nimport { Uttaksstatus, getUttaksstatus } from '../../utils/uttaksstatus';\n\nconst bem = bemUtils('oversiktKvoter');\n\nconst filtrerBortAnnenPartsKonto = (\n    uttakskontoer: StønadskontoUttak[],\n    erFarEllerMedmor: boolean,\n): StønadskontoUttak[] => {\n    return erFarEllerMedmor\n        ? uttakskontoer.filter((uttak) => uttak.konto !== StønadskontoType.Mødrekvote)\n        : uttakskontoer.filter((uttak) => uttak.konto !== StønadskontoType.Fedrekvote);\n};\ninterface PropsPerForelder {\n    brukteDagerPerForelder: BrukteDager;\n    erDeltUttakINorge: boolean;\n    foreldreparSituasjon: ForeldreparSituasjon;\n    navnPåForeldre: NavnPåForeldre;\n    søkerErFarEllerMedmor: boolean;\n}\n\nconst OversiktPerForelder: FunctionComponent<PropsPerForelder> = ({\n    brukteDagerPerForelder,\n    erDeltUttakINorge,\n    foreldreparSituasjon,\n    navnPåForeldre,\n    søkerErFarEllerMedmor,\n}) => {\n    const intl = useIntl();\n    const søkerErMor = !søkerErFarEllerMedmor;\n    const svgInfo = getSituasjonForelderSvg(foreldreparSituasjon);\n\n    return (\n        <div className={bem.block}>\n            <div className={bem.element('perForelder')}>\n                <Heading size=\"small\" as=\"h2\" className=\"blokk-xs\">\n                    {intlUtils(intl, 'uttaksplan.oversiktKvoter.tittel.foreldre')}\n                </Heading>\n                <TilesList columns={'flex'}>\n                    {(erDeltUttakINorge || søkerErMor) && (\n                        <Personkort\n                            ikon={<ForelderIkon forelder={svgInfo.mor} />}\n                            tittel={capitalizeFirstLetter(navnPåForeldre.mor)}\n                        >\n                            <strong>{getVarighetString(brukteDagerPerForelder.mor.dagerTotalt, intl)}</strong>\n                        </Personkort>\n                    )}\n                    {(erDeltUttakINorge || søkerErFarEllerMedmor) && (\n                        <Personkort\n                            ikon={<ForelderIkon forelder={svgInfo.farMedmor} />}\n                            tittel={capitalizeFirstLetter(navnPåForeldre.farMedmor)}\n                        >\n                            <strong>{getVarighetString(brukteDagerPerForelder.farMedmor.dagerTotalt, intl)}</strong>\n                        </Personkort>\n                    )}\n                </TilesList>\n            </div>\n        </div>\n    );\n};\n\ninterface PropsPerKvote {\n    erDeltUttakINorge: boolean;\n    navnPåForeldre: NavnPåForeldre;\n    erEndringssøknad: boolean;\n    uttaksstatus: Uttaksstatus;\n    erFarEllerMedmor: boolean;\n    situasjon: Situasjon;\n    erAleneOmOmsorg: boolean;\n}\n\nconst OversiktPerKvote: FunctionComponent<PropsPerKvote> = ({\n    erDeltUttakINorge,\n    navnPåForeldre,\n    erEndringssøknad,\n    uttaksstatus,\n    erFarEllerMedmor,\n    situasjon,\n    erAleneOmOmsorg,\n}) => {\n    const uttakÅVise = erDeltUttakINorge\n        ? uttaksstatus.uttak\n        : filtrerBortAnnenPartsKonto(uttaksstatus.uttak, erFarEllerMedmor);\n    return (\n        <div className={bem.element('perKvote')}>\n            <Heading size=\"small\" as=\"h2\" className=\"blokk-xs\">\n                <FormattedMessage\n                    id={\n                        uttaksstatus.gjelderDagerBrukt\n                            ? 'uttaksplan.oversiktKvoter.tittel.kontoer.brukteDager'\n                            : 'uttaksplan.oversiktKvoter.tittel.kontoer.ikkeBrukteDager'\n                    }\n                    values={{ antall: erDeltUttakINorge ? 2 : 1 }}\n                />\n            </Heading>\n            <TilesList columns={2}>\n                {uttakÅVise.map((uttak) => (\n                    <Kontostatus\n                        key={guid()}\n                        uttak={uttak}\n                        navnPåForeldre={navnPåForeldre}\n                        erEndringssøknad={erEndringssøknad}\n                        erFarEllerMedmor={erFarEllerMedmor}\n                        situasjon={situasjon}\n                        erAleneOmOmsorg={erAleneOmOmsorg}\n                    />\n                ))}\n            </TilesList>\n        </div>\n    );\n};\n\ninterface Props {\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[];\n    uttaksplan: Periode[];\n    erDeltUttak: boolean;\n    foreldreparSituasjon: ForeldreparSituasjon;\n    familiehendelsesdato: Date;\n    annenForelderHarRettINorge: boolean;\n    toTetteReglerGjelder: boolean;\n    intl: IntlShape;\n    rolle: Søkerrolle;\n    erEndringssøknad: boolean;\n    situasjon: Situasjon;\n    erAleneOmOmsorg: boolean;\n    navnPåForeldre: NavnPåForeldre;\n}\n\nconst OversiktKvoter: FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer,\n    uttaksplan,\n    erDeltUttak,\n    foreldreparSituasjon,\n    familiehendelsesdato,\n    annenForelderHarRettINorge,\n    rolle,\n    erEndringssøknad,\n    situasjon,\n    erAleneOmOmsorg,\n    navnPåForeldre,\n}) => {\n    const søkerErFarEllerMedmor = isFarEllerMedmor(rolle);\n    const uttaksstatus = getUttaksstatus({\n        erDeltUttak: erDeltUttak,\n        erEndringssøknad: erEndringssøknad,\n        harKomplettUttaksplan: true,\n        erFarEllerMedmor: søkerErFarEllerMedmor,\n        tilgjengeligeStønadskontoer: tilgjengeligeStønadskontoer,\n        uttaksplan,\n    });\n    const brukteDagerPerForelder = getBrukteDager(tilgjengeligeStønadskontoer, uttaksplan, familiehendelsesdato);\n    const erDeltUttakINorge = erDeltUttak && annenForelderHarRettINorge;\n    return (\n        <div className={bem.block}>\n            <OversiktPerForelder\n                brukteDagerPerForelder={brukteDagerPerForelder}\n                erDeltUttakINorge={erDeltUttakINorge}\n                foreldreparSituasjon={foreldreparSituasjon}\n                navnPåForeldre={navnPåForeldre}\n                søkerErFarEllerMedmor={søkerErFarEllerMedmor}\n            />\n            <OversiktPerKvote\n                erDeltUttakINorge={erDeltUttakINorge}\n                navnPåForeldre={navnPåForeldre}\n                erEndringssøknad={erEndringssøknad}\n                uttaksstatus={uttaksstatus}\n                erFarEllerMedmor={søkerErFarEllerMedmor}\n                situasjon={situasjon}\n                erAleneOmOmsorg={erAleneOmOmsorg}\n            />\n        </div>\n    );\n};\n\nexport default OversiktKvoter;\n","import { Søknadsinfo, isHull, isInfoPeriode, isPeriodeUtenUttak, isValidTidsperiode } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\n\nexport const inneholderUttaksplanPerioderTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    return {\n        passerer:\n            grunnlag.perioder\n                .filter((p) => !isInfoPeriode(p) && !isPeriodeUtenUttak(p) && !isHull(p))\n                .filter((periode) => isValidTidsperiode(periode.tidsperiode)).length > 0,\n    };\n};\n","import {\n    AnnenForelder,\n    Forelder,\n    MorsAktivitet,\n    Situasjon,\n    StønadskontoType,\n    UtsettelseÅrsakType,\n    OverføringÅrsakType,\n    Periode,\n    Periodene,\n    Uttaksdagen,\n    getTidsperiode,\n    Tidsperioden,\n    erPeriodeFørDato,\n    Utsettelsesperiode,\n    Uttaksperiode,\n    andreAugust2022ReglerGjelder,\n    Periodetype,\n    isPeriodeUtenUttak,\n} from '@navikt/fp-common';\nimport { uttaksdatoer } from '../../utils/uttaksdatoerUtils';\n\nconst ANTALL_UTTAKSDAGER_SEKS_UKER = 30;\n\nexport interface InformasjonOmTaptUttakVedUttakEtterSeksUkerFarMedmor {\n    antallUttaksdagerTapt: number;\n    førsteRegistrerteUttaksdag: Date;\n    sisteUttaksdagInnenforSeksUker: Date;\n}\n\nexport const getInformasjonOmTaptUttakVedUttakEtterSeksUkerFarMedmor = (\n    uttaksplan: Periode[],\n    familiehendelsesdato: Date,\n    søkerErFarEllerMedmor: boolean,\n    bareFarMedmorHarRett: boolean,\n    morErUfør: boolean,\n    søkerErFarEllerMedmorOgAnnenForelderKanIkkeOppgis: boolean,\n    søkerErFarEllerMedmorOgErAleneOmOmsorgen: boolean,\n): InformasjonOmTaptUttakVedUttakEtterSeksUkerFarMedmor | undefined => {\n    if (søkerErFarEllerMedmor === false || bareFarMedmorHarRett === false || morErUfør === true) {\n        return undefined;\n    }\n\n    if (søkerErFarEllerMedmorOgAnnenForelderKanIkkeOppgis || søkerErFarEllerMedmorOgErAleneOmOmsorgen) {\n        return undefined;\n    }\n\n    const førstePeriode = Periodene(uttaksplan).getFørstePerioderEtterFamiliehendelsesdato(familiehendelsesdato);\n    if (førstePeriode === undefined) {\n        return undefined;\n    }\n\n    const førsteUttaksdag = Uttaksdagen(familiehendelsesdato).denneEllerNeste();\n    const førsteRegistrerteUttaksdag = førstePeriode.tidsperiode.fom;\n    const sisteUttaksdagInnenforSeksUker = getTidsperiode(førsteUttaksdag, 30).tom;\n    const antallUttaksdager =\n        Tidsperioden({\n            fom: førsteUttaksdag,\n            tom: førsteRegistrerteUttaksdag,\n        }).getAntallUttaksdager() - 1;\n\n    if (antallUttaksdager === undefined || antallUttaksdager <= ANTALL_UTTAKSDAGER_SEKS_UKER) {\n        return undefined;\n    }\n\n    return {\n        antallUttaksdagerTapt: antallUttaksdager - ANTALL_UTTAKSDAGER_SEKS_UKER,\n        førsteRegistrerteUttaksdag,\n        sisteUttaksdagInnenforSeksUker,\n    };\n};\n\nexport const getUgyldigUttakMor = (\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    situasjon: Situasjon,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n    flerbarnsFødsel?: boolean,\n    value?: string,\n): Periode[] => {\n    if (situasjon == 'adopsjon') {\n        return [];\n    }\n\n    const førsteUttaksdag = uttaksdatoer(\n        familiehendelsesdato,\n        erFarEllerMedmor,\n        termindato,\n    ).førsteUttaksdagPåEllerEtterFødsel;\n    const førsteUttaksdagEtterSeksUker = Uttaksdagen(førsteUttaksdag).leggTil(30);\n    const førsteUttaksdagEtterÅtteUker = Uttaksdagen(førsteUttaksdag).leggTil(40);\n\n    let ugyldigUttakRegelFørsteDato: Date;\n    let ugyldigUttakRegelSisteDato: Date;\n\n    if (value === 'førsteSeksUkerForMor') {\n        ugyldigUttakRegelFørsteDato = førsteUttaksdag;\n        ugyldigUttakRegelSisteDato = førsteUttaksdagEtterSeksUker;\n    } else if (value === 'mellomSyvOgÅtteUkerForMor') {\n        ugyldigUttakRegelFørsteDato = førsteUttaksdagEtterSeksUker;\n        ugyldigUttakRegelSisteDato = førsteUttaksdagEtterÅtteUker;\n    }\n\n    const ugyldigPeriode = Periodene(perioder)\n        .getPerioderEtterFamiliehendelsesdato(ugyldigUttakRegelFørsteDato!)\n        .filter((p) => erPeriodeFørDato(p, ugyldigUttakRegelSisteDato));\n\n    let ugyldigeUtsettelser: Utsettelsesperiode[] = [];\n\n    if (value === 'mellomSyvOgÅtteUkerForMor') {\n        ugyldigeUtsettelser = Periodene(ugyldigPeriode)\n            .getUtsettelser()\n            .filter(\n                (p) =>\n                    p.forelder === Forelder.mor &&\n                    (p.årsak === UtsettelseÅrsakType.Ferie || p.årsak === UtsettelseÅrsakType.Arbeid),\n            );\n    } else if (value === 'førsteSeksUkerForMor') {\n        ugyldigeUtsettelser = Periodene(ugyldigPeriode)\n            .getUtsettelser()\n            .filter(\n                (p) =>\n                    p.forelder === Forelder.mor &&\n                    p.årsak !== UtsettelseÅrsakType.InstitusjonSøker &&\n                    p.årsak !== UtsettelseÅrsakType.InstitusjonBarnet &&\n                    p.årsak !== UtsettelseÅrsakType.Sykdom,\n            );\n    }\n    const gradertePerioder = Periodene(ugyldigPeriode)\n        .getUttak()\n        .filter((p) => p.forelder === Forelder.mor && p.gradert === true);\n\n    const flernbarnsPerioder = Periodene(ugyldigPeriode)\n        .getUttak()\n        .filter((p) => p.forelder === Forelder.mor && p.ønskerFlerbarnsdager === true);\n\n    const fellesPerioder = Periodene(ugyldigPeriode)\n        .getUttak()\n        .filter((p) => p.forelder === Forelder.mor && p.konto === StønadskontoType.Fellesperiode);\n\n    let samtidigUttaksperioder: Uttaksperiode[] = [];\n\n    if (!flerbarnsFødsel && flerbarnsFødsel !== undefined && !andreAugust2022ReglerGjelder(familiehendelsesdato)) {\n        samtidigUttaksperioder = Periodene(ugyldigPeriode)\n            .getUttak()\n            .filter((p) => p.forelder === Forelder.mor && p.ønskerSamtidigUttak);\n    }\n\n    return [\n        ...flernbarnsPerioder,\n        ...gradertePerioder,\n        ...ugyldigeUtsettelser,\n        ...fellesPerioder,\n        ...samtidigUttaksperioder,\n    ];\n};\n\nexport const unntakFarFørsteSeksUker = (periode: Uttaksperiode, harMidlertidigOmsorg: boolean) => ({\n    erMorForSykDeFørsteSeksUker: (): boolean => {\n        if (harMidlertidigOmsorg) {\n            return true;\n        }\n\n        if (periode.konto === StønadskontoType.Fellesperiode || periode.konto === StønadskontoType.Foreldrepenger) {\n            return (\n                periode.morsAktivitetIPerioden === MorsAktivitet.Innlagt ||\n                periode.morsAktivitetIPerioden === MorsAktivitet.TrengerHjelp ||\n                periode.erMorForSyk === true\n            );\n        }\n\n        if (periode.konto === StønadskontoType.Fedrekvote || periode.konto === StønadskontoType.AktivitetsfriKvote) {\n            return periode.erMorForSyk === true;\n        }\n\n        return false;\n    },\n    erFlerbarnsukerOgUttakAvFlerbarnsdagerEllerFedrekvote: (antallBarn: number): boolean => {\n        return antallBarn > 1 && periode.ønskerFlerbarnsdager === true;\n    },\n});\n\nconst erFarsUttakFørsteSeksUkerGyldig = (\n    periode: Uttaksperiode,\n    antallBarn: number,\n    harMidlertidigOmsorg: boolean,\n): boolean => {\n    const unntak = unntakFarFørsteSeksUker(periode, harMidlertidigOmsorg);\n    return (\n        unntak.erMorForSykDeFørsteSeksUker() || unntak.erFlerbarnsukerOgUttakAvFlerbarnsdagerEllerFedrekvote(antallBarn)\n    );\n};\n\nexport const getUgyldigUttakFørsteSeksUkerForFarMedmor = (\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    antallBarn: number,\n    situasjon: Situasjon,\n    annenForelder: AnnenForelder,\n    erAleneOmOmsorg: boolean,\n    harMidlertidigOmsorg: boolean,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n): Periode[] => {\n    if (situasjon === 'adopsjon' || annenForelder.kanIkkeOppgis || erAleneOmOmsorg) {\n        return [];\n    }\n\n    const førsteUttaksdag = uttaksdatoer(\n        familiehendelsesdato,\n        erFarEllerMedmor,\n        termindato,\n    ).førsteUttaksdagPåEllerEtterFødsel;\n    const førsteUttaksdagEtterSeksUker = Uttaksdagen(førsteUttaksdag).leggTil(30);\n\n    const farsPerioderInnenforSeksFørsteUker = Periodene(perioder)\n        .getPerioderEtterFamiliehendelsesdato(familiehendelsesdato)\n        .filter((p) => erPeriodeFørDato(p, førsteUttaksdagEtterSeksUker))\n        .filter((p) => p.type !== Periodetype.Hull && !isPeriodeUtenUttak(p) && p.forelder === Forelder.farMedmor);\n\n    const ugyldigeUttak = Periodene(farsPerioderInnenforSeksFørsteUker)\n        .getUttak()\n        .filter((p) => erFarsUttakFørsteSeksUkerGyldig(p, antallBarn, harMidlertidigOmsorg) === false);\n\n    const ugyldigeOverføringer = Periodene(farsPerioderInnenforSeksFørsteUker)\n        .getOverføringer()\n        .filter(\n            (p) =>\n                p.årsak !== OverføringÅrsakType.institusjonsoppholdAnnenForelder &&\n                p.årsak !== OverføringÅrsakType.sykdomAnnenForelder,\n        );\n\n    const ugyldigeUtsettelser = Periodene(farsPerioderInnenforSeksFørsteUker)\n        .getUtsettelser()\n        .filter((utsettelse) => utsettelse.årsak !== UtsettelseÅrsakType.InstitusjonBarnet);\n\n    return [...ugyldigeUttak, ...ugyldigeOverføringer, ...ugyldigeUtsettelser];\n};\n","import { Søknadsinfo, andreAugust2022ReglerGjelder } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { getUgyldigUttakMor } from '../utils/uttakValideringUtils';\n\nexport const harMorSøktUgyldigUttakFørsteSeksUkerTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const søkerErMor = !grunnlag.søkerErFarEllerMedmor;\n    if (søkerErMor) {\n        const ugyldigePerioder = getUgyldigUttakMor(\n            grunnlag.perioder,\n            grunnlag.familiehendelsesdato,\n            grunnlag.søkersituasjon.situasjon,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.termindato,\n            grunnlag.erFlerbarnssøknad,\n            'førsteSeksUkerForMor',\n        );\n        const passerer = ugyldigePerioder.length === 0;\n        return {\n            passerer,\n            info: ugyldigePerioder.map((periode) => ({\n                intlKey: andreAugust2022ReglerGjelder(grunnlag.familiehendelsesdato)\n                    ? 'uttaksplan.validering.feil.morHarSøktUgyldigUttakFørsteSeksUker.etterWLB'\n                    : 'uttaksplan.validering.feil.morHarSøktUgyldigUttakFørsteSeksUker.førWLB',\n                periodeId: periode.id,\n            })),\n        };\n    }\n\n    return { passerer: true };\n};\n","import { IntlShape } from 'react-intl';\nimport { getUttaksstatus } from '../../utils/uttaksstatus';\nimport { RegelTest, RegelTestresultat, RegelTestresultatInfo } from '../utils/types/regelTypes';\nimport { Søknadsinfo, getStønadskontoNavn, getVarighetString } from '@navikt/fp-common';\n\nexport const stønadskontoInneholderForMyeUttakKunSøkerTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const {\n        navnPåForeldre,\n        perioder,\n        stønadskontoer,\n        erDeltUttak,\n        erEndringssøknad,\n        harKomplettUttaksplan,\n        søkerErFarEllerMedmor,\n        søkerErAleneOmOmsorg,\n    } = grunnlag;\n    const stønadskontoerMedForMyeUttak = getUttaksstatus({\n        erDeltUttak,\n        erEndringssøknad,\n        harKomplettUttaksplan,\n        erFarEllerMedmor: søkerErFarEllerMedmor,\n        tilgjengeligeStønadskontoer: stønadskontoer,\n        uttaksplan: perioder,\n    }).uttak.filter((u) => u.dager < 0);\n    return {\n        passerer: stønadskontoerMedForMyeUttak.length === 0,\n        info: stønadskontoerMedForMyeUttak.map(\n            (uttak): RegelTestresultatInfo => ({\n                intlKey: 'uttaksplan.validering.feil.forMyeUttak',\n                values: {\n                    dager: (intl: IntlShape) => getVarighetString(Math.abs(uttak.dager), intl),\n                    konto: (intl: IntlShape) =>\n                        getStønadskontoNavn(\n                            intl,\n                            uttak.konto,\n                            navnPåForeldre,\n                            søkerErFarEllerMedmor,\n                            søkerErAleneOmOmsorg,\n                        ),\n                },\n            }),\n        ),\n    };\n};\n","import { Søknadsinfo, andreAugust2022ReglerGjelder, erPeriodeInnvilget } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { getUgyldigUttakFørsteSeksUkerForFarMedmor } from '../utils/uttakValideringUtils';\n\nexport const harFarMedmorSøktUgyldigUttakEllerUtsettelseFørsteSeksUkerTest: RegelTest = (\n    grunnlag: Søknadsinfo,\n): RegelTestresultat => {\n    const wlbReglerGjelder = andreAugust2022ReglerGjelder(grunnlag.familiehendelsesdato);\n    if (grunnlag.søkerErFarEllerMedmor && !wlbReglerGjelder) {\n        const ugyldigePerioder = getUgyldigUttakFørsteSeksUkerForFarMedmor(\n            grunnlag.perioder.filter((p) => !erPeriodeInnvilget(p)),\n            grunnlag.familiehendelsesdato,\n            grunnlag.antallBarn,\n            grunnlag.søkersituasjon.situasjon,\n            grunnlag.annenForelder,\n            grunnlag.søkerErAleneOmOmsorg,\n            grunnlag.søkerHarMidlertidigOmsorg,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.termindato,\n        );\n        const passerer = ugyldigePerioder.length === 0;\n        return {\n            passerer,\n            info: ugyldigePerioder.map((periode) => ({\n                periodeId: periode.id,\n            })),\n        };\n    }\n\n    return { passerer: true };\n};\n","import { Søknadsinfo, uttaksplanErBareOpphold } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\n\nexport const erUttaksplanBareOppholdTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    return { passerer: uttaksplanErBareOpphold(grunnlag.perioder) === false };\n};\n","import { Søknadsinfo, uttaksplanSlutterMedOpphold } from '@navikt/fp-common';\nimport { RegelTestresultat, RegelTest } from '../utils/types/regelTypes';\n\nexport const slutterUttaksplanMedOppholdTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    return { passerer: uttaksplanSlutterMedOpphold(grunnlag.perioder) === false };\n};\n","import { Søknadsinfo, uttaksplanStarterMedOpphold } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\n\nexport const starterUttaksplanMedOppholdTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    if (grunnlag.erEndringssøknad) {\n        return { passerer: true };\n    }\n\n    return { passerer: uttaksplanStarterMedOpphold(grunnlag.perioder) === false };\n};\n","import { Periode, Søknadsinfo, getFloatFromString, isUttaksperiode } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\n\nconst uttaksplanGraderingStørreEnnSamtidigUttak = (uttaksplan: Periode[]) => {\n    const result = uttaksplan\n        .slice()\n        .filter(\n            (periode) => isUttaksperiode(periode) && periode.ønskerSamtidigUttak === true && periode.gradert === true,\n        )\n        .filter(\n            (periode) =>\n                isUttaksperiode(periode) &&\n                getFloatFromString(periode.stillingsprosent)! + getFloatFromString(periode.samtidigUttakProsent)! >\n                    100.0,\n        );\n\n    return result.length > 0;\n};\n\nexport const erUttaksplanGraderingStørreEnnSamtidigUttakTest: RegelTest = (\n    grunnlag: Søknadsinfo,\n): RegelTestresultat => {\n    return { passerer: uttaksplanGraderingStørreEnnSamtidigUttak(grunnlag.perioder) === false };\n};\n","import { Søknadsinfo } from '@navikt/fp-common';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\n\nexport const tilleggsopplysningerMaxLength = 1000;\n\nexport const maxLengthIsGreaterThanOrEqualToStringLength = (maxLength: number, value: string) => {\n    return value.length <= maxLength;\n};\n\nexport const tilleggsopplysningerErGyldig = (begrunnelse?: string) =>\n    maxLengthIsGreaterThanOrEqualToStringLength(tilleggsopplysningerMaxLength, begrunnelse || '');\n\nexport function erTilleggsopplysningerGyldigTest(grunnlag: Søknadsinfo): RegelTestresultat {\n    const { begrunnelseForSenEndring } = grunnlag.tilleggsopplysninger;\n    const begrunnelseTekst = begrunnelseForSenEndring ? begrunnelseForSenEndring.tekst : '';\n    return tilleggsopplysningerErGyldig(begrunnelseTekst)\n        ? { passerer: true }\n        : {\n              passerer: false,\n              info: {\n                  intlKey: 'uttaksplan.veileder.fritekst.kanIkkeVæreLengreEnn',\n                  values: { maxLength: tilleggsopplysningerMaxLength },\n              },\n          };\n}\n","import { Søknadsinfo, getIllegalChars, validateTextHasLegalChars } from '@navikt/fp-common';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\n\nexport function harTilleggsopplysningerGyldigeCharsTest(grunnlag: Søknadsinfo): RegelTestresultat {\n    const { begrunnelseForSenEndring } = grunnlag.tilleggsopplysninger;\n    const tekst = begrunnelseForSenEndring ? begrunnelseForSenEndring.tekst : '';\n    return validateTextHasLegalChars(tekst)\n        ? { passerer: true }\n        : {\n              passerer: false,\n              info: {\n                  intlKey: 'valideringsfeil.begrunnelseForSenEnding.kanIkkeInneholdeTegn',\n                  values: {\n                      ugyldigeTegn: getIllegalChars(tekst),\n                  },\n              },\n          };\n}\n","import { Søknadsinfo, uttaksplanHarForMangeFlerbarnsdager } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\n\nexport const harUttaksplanForMangeFlerbarnsdagerTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const { perioder, dekningsgrad, antallBarn } = grunnlag;\n    return {\n        passerer:\n            dekningsgrad !== undefined &&\n            uttaksplanHarForMangeFlerbarnsdager(perioder, dekningsgrad, antallBarn) === false,\n    };\n};\n","import { Søknadsinfo, erUttaksdag, isInfoPeriode } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat, RegelTestresultatInfo } from '../utils/types/regelTypes';\n\nexport const inneholderUttaksplanDatoSomIkkeErUttaksdag: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const ugyldigePerioder = grunnlag.perioder\n        .filter((p) => !isInfoPeriode(p))\n        .filter(({ tidsperiode: { fom, tom } }) => erUttaksdag(fom) === false || erUttaksdag(tom) === false);\n\n    return {\n        passerer: ugyldigePerioder.length === 0,\n        info: ugyldigePerioder.map((periode): RegelTestresultatInfo => {\n            return {\n                intlKey: `uttaksplan.validering.feil.${\n                    erUttaksdag(periode.tidsperiode.fom)\n                        ? 'periodeSlutterPåDatoSomIkkeErUttaksdag'\n                        : 'periodeStarterPåDatoSomIkkeErUttaksdag'\n                }`,\n                periodeId: periode.id,\n            };\n        }),\n    };\n};\n","import {\n    AnnenForelder,\n    Attachment,\n    AttachmentType,\n    InnsendingsType,\n    MissingAttachment,\n    MorsAktivitet,\n    Overføringsperiode,\n    OverføringÅrsakType,\n    Periode,\n    PeriodeUtenUttakUtsettelse,\n    Periodetype,\n    Skjemanummer,\n    StønadskontoType,\n    Søknadsinfo,\n    Utsettelsesperiode,\n    UtsettelseÅrsakType,\n    Uttaksperiode,\n    aktivitetskravMorUtil,\n    erÅrsakSykdomEllerInstitusjonsopphold,\n    getMorsAktivitetSkjemanummer,\n    isOverføringsperiode,\n    isUtsettelsesperiode,\n    isUttaksperiode,\n} from '@navikt/fp-common';\nimport { aktivitetskravMorSkalBesvares } from './uttaksskjema/aktivitetskravMorSkalBesvares';\n\nconst createMissingAttachment = (\n    index: number,\n    skjemanummer: Skjemanummer,\n    type: AttachmentType,\n    periodeId?: string,\n): MissingAttachment => {\n    return {\n        index,\n        skjemanummer,\n        type,\n        periodeId,\n    };\n};\n\nconst isAttachmentMissing = (attachments?: Attachment[], type?: AttachmentType): boolean =>\n    attachments === undefined ||\n    attachments.length === 0 ||\n    (type !== undefined && attachments.find((a) => a.type === type) === undefined);\n\nexport const shouldPeriodeHaveAttachment = (\n    periode: Periode,\n    søkerErFarEllerMedmor: boolean,\n    annenForelder: AnnenForelder,\n): boolean => {\n    switch (periode.type) {\n        case Periodetype.Overføring:\n            return dokumentasjonBehøvesForOverføringsperiode(søkerErFarEllerMedmor, periode);\n        case Periodetype.Utsettelse:\n            return dokumentasjonBehøvesForUtsettelsesperiode(\n                periode,\n                aktivitetskravMorUtil.skalBesvaresVedUtsettelse(søkerErFarEllerMedmor, annenForelder),\n            );\n        case Periodetype.Uttak:\n            return dokumentasjonBehøvesForUttaksperiode(periode);\n        default:\n            return false;\n    }\n};\n\nexport const hasPeriodeMissingAttachment = (periode: Periode, søknadsinfo: Søknadsinfo): boolean => {\n    const shouldHave = shouldPeriodeHaveAttachment(\n        periode,\n        søknadsinfo.søkerErFarEllerMedmor,\n        søknadsinfo.annenForelder,\n    );\n\n    return (\n        shouldHave &&\n        isAttachmentMissing(periode.vedlegg?.filter((p) => p.innsendingsType !== InnsendingsType.SEND_SENERE))\n    );\n};\n\nexport const findMissingAttachmentsForPerioder = (søknadsinfo: Søknadsinfo): MissingAttachment[] => {\n    const perioder = søknadsinfo.perioderSomSkalSendesInn;\n    if (!perioder) {\n        return [];\n    }\n    const missingAttachments: MissingAttachment[] = [];\n    for (const periode of perioder) {\n        if (hasPeriodeMissingAttachment(periode, søknadsinfo)) {\n            const index = perioder.indexOf(periode);\n            if (\n                (isUtsettelsesperiode(periode) || isUttaksperiode(periode)) &&\n                missingAttachmentForAktivitetskrav(periode, søknadsinfo)\n            ) {\n                missingAttachments.push(\n                    createMissingAttachment(\n                        index,\n                        getMorsAktivitetSkjemanummer(periode.morsAktivitetIPerioden),\n                        AttachmentType.MORS_AKTIVITET_DOKUMENTASJON,\n                        periode.id,\n                    ),\n                );\n            } else {\n                if (isUtsettelsesperiode(periode)) {\n                    if (periode.årsak === UtsettelseÅrsakType.HvØvelse) {\n                        missingAttachments.push(\n                            createMissingAttachment(\n                                index,\n                                Skjemanummer.HV_ØVELSE,\n                                AttachmentType.HV_ØVELSE,\n                                periode.id,\n                            ),\n                        );\n                    }\n\n                    if (\n                        periode.årsak === UtsettelseÅrsakType.Fri &&\n                        søknadsinfo.søkerErFarEllerMedmor &&\n                        !søknadsinfo.morErUfør &&\n                        !søknadsinfo.morHarRett\n                    ) {\n                        missingAttachments.push(\n                            createMissingAttachment(\n                                index,\n                                Skjemanummer.DOK_MORS_UTDANNING_ARBEID_SYKDOM,\n                                AttachmentType.MORS_AKTIVITET_DOKUMENTASJON,\n                                periode.id,\n                            ),\n                        );\n                    }\n\n                    if (periode.årsak === UtsettelseÅrsakType.NavTiltak) {\n                        missingAttachments.push(\n                            createMissingAttachment(\n                                index,\n                                Skjemanummer.NAV_TILTAK,\n                                AttachmentType.NAV_TILTAK,\n                                periode.id,\n                            ),\n                        );\n                    }\n\n                    if (\n                        periode.årsak === UtsettelseÅrsakType.InstitusjonSøker ||\n                        periode.årsak === UtsettelseÅrsakType.InstitusjonBarnet\n                    ) {\n                        missingAttachments.push(\n                            createMissingAttachment(\n                                index,\n                                Skjemanummer.DOK_INNLEGGELSE,\n                                AttachmentType.UTSETTELSE_SYKDOM,\n                                periode.id,\n                            ),\n                        );\n                    }\n\n                    if (periode.årsak === UtsettelseÅrsakType.Sykdom) {\n                        missingAttachments.push(\n                            createMissingAttachment(\n                                index,\n                                Skjemanummer.DOK_OVERFØRING_FOR_SYK,\n                                AttachmentType.UTSETTELSE_SYKDOM,\n                                periode.id,\n                            ),\n                        );\n                    }\n                }\n\n                if (isOverføringsperiode(periode)) {\n                    if (\n                        periode.årsak === OverføringÅrsakType.institusjonsoppholdAnnenForelder ||\n                        periode.årsak === OverføringÅrsakType.sykdomAnnenForelder\n                    ) {\n                        missingAttachments.push(\n                            createMissingAttachment(\n                                index,\n                                Skjemanummer.DOK_OVERFØRING_FOR_SYK,\n                                AttachmentType.OVERFØRING_KVOTE,\n                                periode.id,\n                            ),\n                        );\n                    }\n                }\n\n                if (isUttaksperiode(periode)) {\n                    if (periode.konto === StønadskontoType.Fedrekvote && periode.erMorForSyk === true) {\n                        missingAttachments.push(\n                            createMissingAttachment(\n                                index,\n                                Skjemanummer.DOK_MORS_UTDANNING_ARBEID_SYKDOM,\n                                AttachmentType.UTSETTELSE_SYKDOM,\n                                periode.id,\n                            ),\n                        );\n                    }\n                }\n            }\n        }\n    }\n    return missingAttachments;\n};\n\nconst dokumentasjonBehøvesForUttaksperiode = (periode: Uttaksperiode): boolean => {\n    if (periode.harIkkeAktivitetskrav) {\n        return false;\n    }\n\n    return (\n        (periode.morsAktivitetIPerioden !== undefined && periode.morsAktivitetIPerioden !== MorsAktivitet.Uføre) ||\n        (periode.konto === StønadskontoType.Fedrekvote && periode.erMorForSyk === true)\n    );\n};\n\nconst dokumentasjonBehøvesForUtsettelsesperiode = (\n    { årsak }: Utsettelsesperiode | PeriodeUtenUttakUtsettelse,\n    harMorAktivitetskrav: boolean,\n): boolean => {\n    return (\n        harMorAktivitetskrav ||\n        erÅrsakSykdomEllerInstitusjonsopphold(årsak) ||\n        årsak === UtsettelseÅrsakType.HvØvelse ||\n        årsak === UtsettelseÅrsakType.NavTiltak\n    );\n};\n\nexport const dokumentasjonBehøvesForOverføringsperiode = (\n    erFarEllerMedmor: boolean,\n    periode: Overføringsperiode,\n): boolean =>\n    (erFarEllerMedmor || periode.årsak !== OverføringÅrsakType.aleneomsorg) &&\n    periode.årsak !== OverføringÅrsakType.ikkeRettAnnenForelder;\n\nconst missingAttachmentForAktivitetskrav = (\n    periode: Utsettelsesperiode | Uttaksperiode,\n    søknadsinfo: Søknadsinfo,\n): boolean => {\n    const søkerErMor = !søknadsinfo.søkerErFarEllerMedmor;\n    const ønskerFlerBarnsdager = isUttaksperiode(periode) ? periode.ønskerFlerbarnsdager : undefined;\n    const erSamtidigUttak = isUttaksperiode(periode) ? periode.ønskerSamtidigUttak : undefined;\n    const morErForSyk = isUttaksperiode(periode) ? periode.erMorForSyk : undefined;\n    const konto = isUttaksperiode(periode) ? periode.konto : undefined;\n    return (\n        aktivitetskravMorSkalBesvares(\n            ønskerFlerBarnsdager,\n            erSamtidigUttak,\n            morErForSyk,\n            periode.type,\n            konto,\n            søkerErMor,\n            søknadsinfo.søkerErAleneOmOmsorg,\n            søknadsinfo.annenForelder.kanIkkeOppgis,\n            søknadsinfo.søkerHarMidlertidigOmsorg,\n            periode.tidsperiode,\n            søknadsinfo.familiehendelsesdato,\n            søknadsinfo.termindato,\n            søknadsinfo.søkersituasjon.situasjon,\n            søknadsinfo.stønadskontoer,\n            !søknadsinfo.morHarRett,\n        ) &&\n        isAttachmentMissing(\n            periode.vedlegg?.filter((p) => p.innsendingsType !== InnsendingsType.SEND_SENERE),\n            AttachmentType.MORS_AKTIVITET_DOKUMENTASJON,\n        )\n    );\n};\n","import dayjs from 'dayjs';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { MissingAttachment, Søknadsinfo, isInfoPeriode, sorterPerioder } from '@navikt/fp-common';\nimport { findMissingAttachmentsForPerioder } from '../../utils/manglendeVedleggUtils';\n\nexport const harPerioderManglendeVedleggTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const manglendeVedlegg: MissingAttachment[] = findMissingAttachmentsForPerioder(grunnlag);\n\n    const førsteUttaksEllerUttsettelsesPeriode = grunnlag.perioder\n        .filter((p) => p.tidsperiode.fom !== undefined && !isInfoPeriode(p))\n        .sort(sorterPerioder)\n        .shift();\n    const erLikEllerMindreEnnFireUkerTilUttaketStarter =\n        førsteUttaksEllerUttsettelsesPeriode !== undefined &&\n        dayjs(førsteUttaksEllerUttsettelsesPeriode.tidsperiode.fom).isSameOrBefore(dayjs().add(4, 'weeks'), 'day');\n    const regelTekst = erLikEllerMindreEnnFireUkerTilUttaketStarter\n        ? 'uttaksplan.validering.info.manglendeVedlegg'\n        : 'uttaksplan.validering.advarsel.forTidligUtenDokumentasjon';\n\n    const passerer = manglendeVedlegg.length === 0;\n    const x: RegelTestresultat = {\n        passerer,\n        info: passerer\n            ? undefined\n            : manglendeVedlegg\n                  .filter((vedlegg) => !!vedlegg.periodeId)\n                  .map((vedlegg) => ({\n                      periodeId: vedlegg.periodeId,\n                      intlKey: regelTekst,\n                  })),\n    };\n    return x;\n};\n","import { RegelTestresultat } from '../utils/types/regelTypes';\nimport {\n    erPeriodeInnvilget,\n    erSenUtsettelsePgaFerieEllerArbeid,\n    Periodetype,\n    Søknadsinfo,\n    UtsettelseÅrsakType,\n} from '@navikt/fp-common';\n\nexport function inneholderSenUtsettelsePgaFerieTest(grunnlag: Søknadsinfo): RegelTestresultat {\n    const seneUtsettelsePgaFerie = grunnlag.perioder\n        .filter((p) => !erPeriodeInnvilget(p, grunnlag.eksisterendeSak))\n        .filter(erSenUtsettelsePgaFerieEllerArbeid)\n        .filter((p) => p.type === Periodetype.Utsettelse && p.årsak === UtsettelseÅrsakType.Ferie);\n\n    const passerer = seneUtsettelsePgaFerie.length === 0;\n    return {\n        passerer,\n        info: seneUtsettelsePgaFerie.map((periode) => ({\n            intlKey: 'uttaksplan.validering.advarsel.planenAdvarerOmUtsettelser.ferie',\n            periodeId: periode.id,\n        })),\n    };\n}\n","import { RegelTestresultat } from '../utils/types/regelTypes';\nimport { getInformasjonOmTaptUttakVedUttakEtterSeksUkerFarMedmor } from '../utils/uttakValideringUtils';\nimport { isUttaksperiode, Periodene, Periodetype, StønadskontoType, Søknadsinfo } from '@navikt/fp-common';\n\nexport function inneholderTapteDagerTest(grunnlag: Søknadsinfo): RegelTestresultat {\n    const { perioder, søkerErFarEllerMedmor } = grunnlag;\n    const infoOmTaptUttakVedUttakEtterSeksUkerFarMedmor = getInformasjonOmTaptUttakVedUttakEtterSeksUkerFarMedmor(\n        perioder,\n        grunnlag.familiehendelsesdato,\n        søkerErFarEllerMedmor,\n        grunnlag.morHarRett === false,\n        grunnlag.morErUfør,\n        !!(søkerErFarEllerMedmor && grunnlag.annenForelder.kanIkkeOppgis),\n        !!(søkerErFarEllerMedmor && grunnlag.søkerErAleneOmOmsorg),\n    );\n\n    const planInneholderTapteDager =\n        Periodene(perioder).getHull().length > 0 || infoOmTaptUttakVedUttakEtterSeksUkerFarMedmor !== undefined;\n\n    const planInneholderAnnetEnnAktivitetsfriKvote = perioder\n        .filter((p) => p.type !== Periodetype.Hull)\n        .some((p) => (isUttaksperiode(p) && p.konto !== StønadskontoType.AktivitetsfriKvote) || !isUttaksperiode(p));\n\n    const passerer = (planInneholderTapteDager && planInneholderAnnetEnnAktivitetsfriKvote) === false;\n\n    return {\n        passerer,\n        info: {\n            intlKey: 'uttaksplan.validering.info.planenInneholderHull',\n        },\n    };\n}\n","import {\n    Periodene,\n    Søknadsinfo,\n    Uttaksdagen,\n    formaterDato,\n    isOverskrivbarPeriode,\n    isUtsettelsesperiode,\n} from '@navikt/fp-common';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\n\nexport function inneholderBareUtsettelserTest(grunnlag: Søknadsinfo): RegelTestresultat {\n    const ikkeOverskrivbarePerioder = grunnlag.perioder.filter((p) => !isOverskrivbarPeriode(p));\n    const inneholderAndrePerioderEnnUtsettelser = ikkeOverskrivbarePerioder.some((p) => !isUtsettelsesperiode(p));\n    const bareUtsettelser = !inneholderAndrePerioderEnnUtsettelser;\n    const passerer = bareUtsettelser === false;\n    const intlKey = grunnlag.erEndringssøknad\n        ? 'uttaksplan.veileder.planenInneholderKunUtsettelser.endringssøknad'\n        : 'uttaksplan.veileder.planenInneholderKunUtsettelser';\n\n    return {\n        passerer,\n        info: {\n            intlKey,\n            values: {\n                sisteDag: formaterDato(\n                    Uttaksdagen(Periodene(grunnlag.perioder).getFørsteUttaksdagEtterSistePeriode()!).forrige(),\n                    'D. MMMM YYYY',\n                ),\n            },\n        },\n    };\n}\n","import { RegelTestresultat } from '../utils/types/regelTypes';\nimport {\n    erPeriodeInnvilget,\n    erSenUtsettelsePgaFerieEllerArbeid,\n    Periodetype,\n    Søknadsinfo,\n    UtsettelseÅrsakType,\n} from '@navikt/fp-common';\n\nexport function inneholderSenUtsettelsePgaArbeidTest(grunnlag: Søknadsinfo): RegelTestresultat {\n    const seneUtsettelserPgaArbeid = grunnlag.perioder\n        .filter((p) => !erPeriodeInnvilget(p, grunnlag.eksisterendeSak))\n        .filter(erSenUtsettelsePgaFerieEllerArbeid)\n        .filter((p) => p.type === Periodetype.Utsettelse && p.årsak === UtsettelseÅrsakType.Arbeid);\n\n    const passerer = seneUtsettelserPgaArbeid.length === 0;\n    return {\n        passerer,\n        info: seneUtsettelserPgaArbeid.map((periode) => ({\n            intlKey: 'uttaksplan.validering.advarsel.planenAdvarerOmUtsettelser.arbeid',\n            periodeId: periode.id,\n        })),\n    };\n}\n","import { IntlShape } from 'react-intl';\nimport { RegelTest, RegelTestresultat, RegelTestresultatInfo } from '../utils/types/regelTypes';\nimport {\n    Periode,\n    Periodene,\n    Søknadsinfo,\n    Tidsperioden,\n    getNavnGenitivEierform,\n    getPeriodeTittel,\n    isAvslåttPeriode,\n    isInfoPeriode,\n    isUttaksperiode,\n} from '@navikt/fp-common';\n\nexport const overskriverEndringerAnnenPartsPerioder: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const eksisterendeUttaksplan =\n        grunnlag.eksisterendeSak !== undefined\n            ? grunnlag.eksisterendeSak.uttaksplan.filter((p) => !isAvslåttPeriode(p))\n            : undefined;\n    const fornavnAnnenForelder = grunnlag.søkerErFarEllerMedmor\n        ? grunnlag.navnPåForeldre.mor\n        : grunnlag.navnPåForeldre.farMedmor;\n    if (eksisterendeUttaksplan) {\n        const perioderSomOverlapper: Periode[] = [];\n        const perioderForSjekk = grunnlag.erEndringssøknad\n            ? grunnlag.perioderSomSkalSendesInn\n            : grunnlag.perioder.filter((p) => !isInfoPeriode(p));\n\n        perioderForSjekk.forEach((periode) => {\n            const overlapp = Periodene(eksisterendeUttaksplan.filter(isInfoPeriode)).finnOverlappendePerioder(periode);\n            if (overlapp.length > 0) {\n                perioderSomOverlapper.push(periode);\n            }\n        });\n\n        const perioderSomOverlapperUtenSamtidigUttak = perioderSomOverlapper.filter(\n            (p) => !(isUttaksperiode(p) && p.ønskerSamtidigUttak),\n        );\n\n        const passerer = perioderSomOverlapperUtenSamtidigUttak.length === 0;\n        return {\n            passerer,\n            info: perioderSomOverlapperUtenSamtidigUttak.map((periode) => {\n                const regelInfo: RegelTestresultatInfo = {\n                    periodeId: periode.id,\n                    intlKey: 'uttaksplan.validering.advarsel.periodeOverskriverAnnenPartsPeriode',\n                    renderAsHtml: true,\n                    values: {\n                        periode: (intl: IntlShape) =>\n                            getPeriodeTittel(\n                                intl,\n                                periode,\n                                grunnlag.navnPåForeldre,\n                                grunnlag.familiehendelsesdato,\n                                grunnlag.termindato,\n                                grunnlag.søkersituasjon.situasjon,\n                            ),\n                        tidsperiode: (intl: IntlShape) => Tidsperioden(periode.tidsperiode).formaterStringKort(intl),\n                        forelder: fornavnAnnenForelder,\n                        forelders: (intl: IntlShape) => getNavnGenitivEierform(fornavnAnnenForelder, intl.locale),\n                        //strong: (_intl: IntlShape) => (msg: any) => <strong>{msg}</strong>, //TODO: strong does not work.\n                        strong: (_intl: IntlShape) => (msg: any) => msg,\n                    },\n                };\n                return regelInfo;\n            }),\n        };\n    }\n\n    return { passerer: true };\n};\n","import { IntlShape } from 'react-intl';\nimport { RegelTest, RegelTestresultat, RegelTestresultatInfo } from '../utils/types/regelTypes';\nimport {\n    Periodene,\n    Søknadsinfo,\n    Tidsperioden,\n    getNavnGenitivEierform,\n    getPeriodeForelderNavn,\n    getPeriodeTittel,\n    isUttakAnnenPart,\n} from '@navikt/fp-common';\n\nexport const overlapperPeriodeAndrePerioder: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const { perioder, navnPåForeldre } = grunnlag;\n    const perioderUtenUttakAnnenPart = perioder.filter((p) => !isUttakAnnenPart(p));\n    const perioderSomHarOverlapp = perioderUtenUttakAnnenPart.filter(\n        (periode) => Periodene(perioderUtenUttakAnnenPart).finnOverlappendePerioder(periode).length > 0,\n    );\n\n    const passerer = perioderSomHarOverlapp.length === 0;\n    return {\n        passerer,\n        info: perioderSomHarOverlapp.map((periode) => {\n            const info: RegelTestresultatInfo = {\n                periodeId: periode.id,\n                intlKey: 'uttaksplan.validering.feil.periodeoverlapp.oppsummering',\n                renderAsHtml: true,\n                values: {\n                    periode: (intl: IntlShape) =>\n                        getPeriodeTittel(\n                            intl,\n                            periode,\n                            navnPåForeldre,\n                            grunnlag.familiehendelsesdato,\n                            grunnlag.termindato,\n                            grunnlag.søkersituasjon.situasjon,\n                        ),\n                    tidsperiode: (intl: IntlShape) => Tidsperioden(periode.tidsperiode).formaterStringKort(intl),\n                    forelder: (intl: IntlShape) =>\n                        getNavnGenitivEierform(getPeriodeForelderNavn(periode, navnPåForeldre), intl.locale),\n                },\n            };\n            return info;\n        }),\n    };\n};\n","import { Dictionary } from 'lodash';\nimport { IntlShape } from 'react-intl';\n\ntype FeilIntlMessage = (intl: IntlShape) => string;\n\nexport enum RegelAlvorlighet {\n    FEIL = 'feil',\n    ADVARSEL = 'advarsel',\n    INFO = 'info',\n}\n\nexport interface UttaksplanRegelTestresultat {\n    resultat: RegelStatus[];\n    avvikPerPeriode: Dictionary<RegelAvvik[]>;\n    avvik: RegelAvvik[];\n    harFeil: boolean;\n}\n\nexport type RegelKategori = 'fordeling' | undefined;\n\nexport interface Regel {\n    key: string;\n    test: RegelTest;\n    alvorlighet: RegelAlvorlighet;\n    overstyresAvRegel?: string;\n    overstyrerRegler?: string[];\n    slåsSammenVedOppsummering?: boolean;\n    skjulesIOppsummering?: boolean;\n    skjulesIPeriode?: boolean;\n    avvikType?: AvvikType;\n    kategori?: RegelKategori;\n}\n\nexport type RegelTest = (grunnlag: any) => RegelTestresultat;\n\nexport interface RegelTestresultat {\n    passerer: boolean;\n    info?: RegelTestresultatInfoObject;\n    periodeId?: string;\n}\n\nexport type RegelTestresultatInfoObject = RegelTestresultatInfo | RegelTestresultatInfo[];\n\nexport interface RegelStatus {\n    key: string;\n    passerer: boolean;\n    regelAvvik?: RegelAvvik[];\n}\n\nexport type AvvikType = 'forretning' | 'skjema';\n\nexport interface RegelAvvik {\n    id: string;\n    regel: Regel;\n    periodeId?: string;\n    info: RegelAvvikInfo;\n}\n\ntype avikValueFunk = (intl: IntlShape) => string;\ntype intlHTMLFragmentFunc = (msg: any) => any;\n\ninterface AvvikInfo {\n    periodeId?: string;\n    values?: {\n        [key: string]: string | number | Date | FeilIntlMessage | avikValueFunk | undefined | intlHTMLFragmentFunc;\n    };\n    renderAsHtml?: boolean;\n}\n\nexport interface RegelAvvikInfo extends AvvikInfo {\n    intlKey: string;\n}\n\nexport interface RegelTestresultatInfo extends AvvikInfo {\n    intlKey?: string;\n}\n","import { IntlShape } from 'react-intl';\nimport { flatten, isArray, uniqBy } from 'lodash';\nimport {\n    UttaksplanRegelTestresultat,\n    RegelAvvik,\n    Regel,\n    RegelTestresultatInfo,\n    RegelStatus,\n    RegelTestresultatInfoObject,\n    RegelAvvikInfo,\n    RegelAlvorlighet,\n} from './types/regelTypes';\nimport { Validator } from './types/validatorTypes';\nimport { guid } from '@navikt/fp-common';\n\nconst getRegelIntlKey = (regel: Regel, intlRegelPrefix: string): string =>\n    `${intlRegelPrefix}.${regel.alvorlighet}.${regel.key}`;\n\nconst alvorlighetSortOrder = {\n    [RegelAlvorlighet.FEIL]: 0,\n    [RegelAlvorlighet.ADVARSEL]: 1,\n    [RegelAlvorlighet.INFO]: 2,\n};\n\nconst sorterAvvik = (a1: RegelAvvik, a2: RegelAvvik): number => {\n    if (a1.regel.alvorlighet === a2.regel.alvorlighet) {\n        return 0;\n    }\n    return alvorlighetSortOrder[a1.regel.alvorlighet] < alvorlighetSortOrder[a2.regel.alvorlighet] ? -1 : 1;\n};\n\nconst ensureRegelAvvikIntlKey = (\n    regel: Regel,\n    intlRegelPrefix: string,\n    info?: Partial<RegelTestresultatInfo>,\n): RegelAvvikInfo => ({\n    ...info,\n    intlKey: info ? info.intlKey || getRegelIntlKey(regel, intlRegelPrefix) : getRegelIntlKey(regel, intlRegelPrefix),\n});\n\nconst overstyresAvFilter = (avvik: RegelAvvik, _idx: number, alleAvvik: RegelAvvik[]): boolean => {\n    return (\n        avvik.regel.overstyresAvRegel === undefined &&\n        alleAvvik.some((b2) => b2.regel.key === avvik.regel.overstyresAvRegel) === false\n    );\n};\n\nconst overstyrerAndreFilter = (avvik: RegelAvvik, _idx: number, alleAvvik: RegelAvvik[]): boolean => {\n    const overstyresAvAndre = alleAvvik.some((rb) =>\n        rb.regel.overstyrerRegler\n            ? rb.regel.overstyrerRegler.some((rbo) => {\n                  return rbo === avvik.regel.key;\n              })\n            : false,\n    );\n    return overstyresAvAndre === false;\n};\n\nexport const regelHarAvvik = (\n    regel: Regel,\n    intlRegelPrefix: string,\n    info?: RegelTestresultatInfoObject,\n    periodeId?: string,\n): RegelStatus => {\n    const mapInfoToRegelAvvik = (i?: Partial<RegelTestresultatInfo>): RegelAvvik => ({\n        id: guid(),\n        regel,\n        info: ensureRegelAvvikIntlKey(regel, intlRegelPrefix, i),\n        periodeId: i ? i.periodeId : periodeId,\n    });\n    const regelAvvik: RegelAvvik[] = [];\n    if (isArray(info)) {\n        info.forEach((i) => regelAvvik.push(mapInfoToRegelAvvik(i)));\n    } else {\n        regelAvvik.push(mapInfoToRegelAvvik(info));\n    }\n    return {\n        key: regel.key,\n        passerer: false,\n        regelAvvik,\n    };\n};\n\nexport const regelPasserer = (regel: Regel): RegelStatus => ({\n    key: regel.key,\n    passerer: true,\n});\n\nexport const getRegelAvvikForPeriode = (resultat: UttaksplanRegelTestresultat, periodeId: string): RegelAvvik[] => {\n    return resultat && resultat.avvikPerPeriode[periodeId] ? resultat.avvikPerPeriode[periodeId] : [];\n};\n\nexport const getRegelAvvik = (resultat: RegelStatus[]): RegelAvvik[] => {\n    if (resultat) {\n        return flatten(\n            resultat.filter((r) => r.passerer === false && r.regelAvvik !== undefined).map((r) => r.regelAvvik!),\n        ).sort(sorterAvvik);\n    }\n    return [];\n};\n\nexport const isRegelFeil = (regelAvvik: RegelAvvik): boolean => regelAvvik.regel.alvorlighet === RegelAlvorlighet.FEIL;\n\nexport const hasRegelFeil = (avvik: RegelAvvik[] = []) => avvik.some((a) => isRegelFeil(a));\n\nexport const trimRelaterteRegelAvvik = (avvik: RegelAvvik[], grupperAvvik: boolean): RegelAvvik[] => {\n    return grupperAvvik\n        ? uniqBy(avvik.filter(overstyresAvFilter).filter(overstyrerAndreFilter), (a) => {\n              return a.regel.slåsSammenVedOppsummering ? a.regel.key : guid();\n          })\n        : avvik.filter(overstyresAvFilter).filter(overstyrerAndreFilter);\n};\n\nexport const getRegelIntlValues = (\n    intl: IntlShape,\n    info: RegelTestresultatInfo,\n): { [key: string]: string } | undefined => {\n    const { values } = info;\n    if (values === undefined) {\n        return undefined;\n    }\n    const newValues: { [key: string]: string } = {};\n    Object.keys(values).forEach((key) => {\n        const valueOrFunc = values[key];\n        if (valueOrFunc) {\n            newValues[key] = typeof valueOrFunc === 'function' ? valueOrFunc(intl) : `${valueOrFunc}`;\n        }\n    });\n    return newValues;\n};\n\nexport const hasValueRule = (v: any, failText: string): Validator => ({\n    test: () => v !== undefined && v !== '',\n    failText,\n});\n","import {\n    getFloatFromString,\n    intlUtils,\n    samtidigUttakProsentIsMax100,\n    stillingsprosentIsLessThan100,\n    stillingsprosentIsMoreThan0,\n} from '@navikt/fp-common';\nimport { IntlShape } from 'react-intl';\nimport { hasValueRule } from './regelUtils';\nimport { Validator } from './types/validatorTypes';\n\nexport const getStillingsprosentRegler = (\n    erSamtidigUttak: boolean,\n    stillingsprosent: string,\n    intl?: IntlShape,\n): Validator[] => {\n    const intlKey = 'valideringsfeil.stillingsprosent';\n    return [\n        hasValueRule(stillingsprosent, intl ? intlUtils(intl, `${intlKey}.required`) : ''),\n        {\n            test: () => getFloatFromString(stillingsprosent) !== undefined,\n            failText: intl ? intlUtils(intl, `${intlKey}.ugyldigTall`) : '',\n        },\n        {\n            test: () => stillingsprosentIsMoreThan0(stillingsprosent),\n            failText: intl ? intlUtils(intl, `${intlKey}.under1`) : '',\n        },\n        {\n            test: () =>\n                erSamtidigUttak\n                    ? samtidigUttakProsentIsMax100(stillingsprosent)\n                    : stillingsprosentIsLessThan100(stillingsprosent),\n            failText: intl ? intlUtils(intl, `${intlKey}.over100prosent`) : '',\n        },\n    ];\n};\n","import { Periode, Periodetype } from '@navikt/fp-common';\nimport { getStillingsprosentRegler } from './stillingsprosentValideringUtils';\n\nexport const gradertUttaksperiodeErUgyldig = (periode: Periode) => {\n    if (periode.type === Periodetype.Uttak) {\n        const { gradert, stillingsprosent } = periode;\n        if (gradert === true) {\n            const regler = getStillingsprosentRegler(false, stillingsprosent || '');\n            const results = regler.map((regel) => regel.test() === true);\n            return results.some((erGyldig) => erGyldig === false);\n        }\n    }\n    return false;\n};\n\nexport const samtidigUttaksperiodeErUgyldig = (periode: Periode, søkerErFarEllerMedmor: boolean) => {\n    if (periode.type === Periodetype.Uttak) {\n        const { ønskerSamtidigUttak, samtidigUttakProsent } = periode;\n        if (ønskerSamtidigUttak === true && søkerErFarEllerMedmor) {\n            const regler = getStillingsprosentRegler(true, samtidigUttakProsent || '');\n            const results = regler.map((regel) => regel.test() === true);\n            return results.some((erGyldig) => erGyldig === false);\n        }\n    }\n    return false;\n};\n","import { gradertUttaksperiodeErUgyldig } from '../../utils/periodeValideringUtils';\nimport { Søknadsinfo } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../../utils/types/regelTypes';\n\nexport const harUttaksperiodeGyldigGradering: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const ugyldigePerioder = grunnlag.perioder.filter(gradertUttaksperiodeErUgyldig);\n    return {\n        passerer: ugyldigePerioder.length === 0,\n        info: ugyldigePerioder.map((periode) => ({\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { ValidationResult, ValidationTestVerdict, Validator } from './types/validatorTypes';\n\nexport const runValidators = (validators: Validator[] | undefined, inputName: string): ValidationResult => {\n    if (validators === undefined) {\n        return {\n            name: inputName,\n            tests: [],\n            valid: true,\n        };\n    }\n    const results: Validator[] = validators.filter((validator) => {\n        return validator.test() === false;\n    });\n\n    const valid = results.length === 0;\n    const tests: ValidationTestVerdict[] = valid === false ? [{ verdict: false, failText: results[0].failText }] : [];\n\n    return {\n        name: inputName,\n        tests,\n        valid,\n    };\n};\n\nexport const allValidatorsPass = (validators: Validator[] | undefined): boolean =>\n    validators === undefined ? true : runValidators(validators, 'group').valid;\n","import {\n    Periode,\n    TidsperiodeDate,\n    UtsettelseFormPeriodeType,\n    Uttaksdagen,\n    isForeldrepengerFørFødselUttaksperiode,\n    isValidTidsperiode,\n} from '@navikt/fp-common';\nimport dayjs from 'dayjs';\nimport { DatoValidatorer, Validator } from './types/validatorTypes';\nimport { allValidatorsPass } from './validatorUtils';\nimport { uttaksdatoer } from '../../utils/uttaksdatoerUtils';\n\ntype DateValue = Date | undefined;\n\nconst erUtfyltTest = (dato: DateValue): Validator => ({\n    test: () => dato !== undefined,\n    failText: { intlKey: `uttaksplan.validering.feil.påkrevd` },\n});\n\nconst erUttaksdagTest = (dato: DateValue) => ({\n    test: () => dato !== undefined && Uttaksdagen(dato).erUttaksdag(),\n    failText: { intlKey: `uttaksplan.validering.feil.datoErIkkeUttaksdag` },\n});\n\nconst slutterInnenforGyldigPermisjonsperiode = (\n    dato: DateValue,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n) => ({\n    test: () =>\n        dato !== undefined &&\n        dayjs(dato).isSameOrBefore(\n            uttaksdatoer(familiehendelsesdato, erFarEllerMedmor, termindato).sisteMuligeUttaksdagEtterTermin,\n            'day',\n        ),\n    failText: { intlKey: 'uttaksplan.validering.feil.etterSistePermisjonsdag' },\n});\n\nconst starterInnenforGyldigAntallUkerFørTermin = (\n    dato: DateValue,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n) => ({\n    test: () =>\n        dato !== undefined &&\n        dayjs(dato).isSameOrAfter(\n            uttaksdatoer(familiehendelsesdato, erFarEllerMedmor, termindato).førsteMuligeUttaksdagFørTermin,\n            'day',\n        ),\n    failText: { intlKey: 'uttaksplan.validering.feil.før12UkerFørTermin' },\n});\n\nexport const getUttakTidsperiodeValidatorer = (\n    skalIkkeHaUttak: boolean,\n    tidsperiode: Partial<TidsperiodeDate>,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n): DatoValidatorer | undefined => {\n    if (skalIkkeHaUttak) {\n        return undefined;\n    }\n\n    const { fom, tom } = tidsperiode;\n\n    return {\n        fra: [\n            erUtfyltTest(fom),\n            erUttaksdagTest(fom),\n            starterInnenforGyldigAntallUkerFørTermin(fom, familiehendelsesdato, erFarEllerMedmor, termindato),\n        ],\n        til: [\n            erUtfyltTest(tom),\n            erUttaksdagTest(tom),\n            slutterInnenforGyldigPermisjonsperiode(tom, familiehendelsesdato, erFarEllerMedmor, termindato),\n        ],\n    };\n};\n\nexport const uttakTidsperiodeErGyldig = (\n    uttaksperiode: Periode,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n): boolean => {\n    const { tidsperiode } = uttaksperiode;\n    if (!tidsperiode) {\n        return false;\n    }\n    const skalIkkeHaUttak = isForeldrepengerFørFødselUttaksperiode(uttaksperiode)\n        ? uttaksperiode.skalIkkeHaUttakFørTermin\n        : false;\n\n    if (isValidTidsperiode(tidsperiode) === false && !skalIkkeHaUttak) {\n        return false;\n    }\n    const validators = getUttakTidsperiodeValidatorer(\n        skalIkkeHaUttak,\n        tidsperiode,\n        familiehendelsesdato,\n        erFarEllerMedmor,\n        termindato,\n    );\n    if (validators === undefined) {\n        return true;\n    }\n    const fraDatoErGyldig = allValidatorsPass(validators.fra);\n    const tilDatoErGyldig = allValidatorsPass(validators.til);\n\n    return fraDatoErGyldig && tilDatoErGyldig;\n};\n\nconst getUtsettelseTidsperiodeValidatorer = (\n    tidsperiode: Partial<TidsperiodeDate>,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n): DatoValidatorer | undefined => {\n    return {\n        fra: [erUtfyltTest(tidsperiode.fom), erUttaksdagTest(tidsperiode.fom)],\n        til: [\n            erUtfyltTest(tidsperiode.tom),\n            erUttaksdagTest(tidsperiode.tom),\n            slutterInnenforGyldigPermisjonsperiode(tidsperiode.tom, familiehendelsesdato, erFarEllerMedmor, termindato),\n        ],\n    };\n};\n\nexport const utsettelseTidsperiodeErGyldig = (\n    utsettelesperiode: UtsettelseFormPeriodeType,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n): boolean => {\n    const { tidsperiode } = utsettelesperiode;\n\n    if (isValidTidsperiode(tidsperiode) === false) {\n        return false;\n    }\n    const validators = getUtsettelseTidsperiodeValidatorer(\n        tidsperiode,\n        familiehendelsesdato,\n        erFarEllerMedmor,\n        termindato,\n    );\n    if (validators === undefined) {\n        return true;\n    }\n    const fraDatoErGyldig = allValidatorsPass(validators.fra);\n    const tilDatoErGyldig = allValidatorsPass(validators.til);\n\n    return fraDatoErGyldig && tilDatoErGyldig;\n};\n","import { utsettelseTidsperiodeErGyldig, uttakTidsperiodeErGyldig } from '../../utils/tidsperiodeValideringUtils';\nimport { Periodetype, Søknadsinfo } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../../utils/types/regelTypes';\n\nexport const harPeriodeGyldigTidsperiode: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const perioderMedUgyldigTidsperiode = grunnlag.perioder.filter((periode) => {\n        switch (periode.type) {\n            case Periodetype.Overføring:\n            case Periodetype.Uttak:\n            case Periodetype.Opphold:\n                return (\n                    uttakTidsperiodeErGyldig(\n                        periode,\n                        grunnlag.familiehendelsesdato,\n                        grunnlag.søkerErFarEllerMedmor,\n                        grunnlag.termindato,\n                    ) === false\n                );\n            case Periodetype.Utsettelse:\n                return (\n                    utsettelseTidsperiodeErGyldig(\n                        periode,\n                        grunnlag.familiehendelsesdato,\n                        grunnlag.søkerErFarEllerMedmor,\n                        grunnlag.termindato,\n                    ) === false\n                );\n        }\n        return false;\n    });\n    return {\n        passerer: perioderMedUgyldigTidsperiode.length === 0,\n        info: perioderMedUgyldigTidsperiode.map((periode) => ({\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { Søknadsinfo, isUttaksperiode } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../../utils/types/regelTypes';\n\nexport const harUttaksperiodeStønadskonto: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const uttaksperioderUtenStønadskonto = grunnlag.perioder.filter(\n        (periode) => isUttaksperiode(periode) && periode.konto === undefined,\n    );\n    return {\n        passerer: uttaksperioderUtenStønadskonto.length === 0,\n        info: uttaksperioderUtenStønadskonto.map((periode) => ({\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { Søknadsinfo } from '@navikt/fp-common';\nimport { samtidigUttaksperiodeErUgyldig } from '../../utils/periodeValideringUtils';\nimport { RegelTest, RegelTestresultat } from '../../utils/types/regelTypes';\n\nexport const erSamtidigUttakGyldig: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const perioderMedUgyldigTidsperiode = grunnlag.perioder.filter((periode) =>\n        samtidigUttaksperiodeErUgyldig(periode, grunnlag.søkerErFarEllerMedmor),\n    );\n    return {\n        passerer: perioderMedUgyldigTidsperiode.length === 0,\n        info: perioderMedUgyldigTidsperiode.map((periode) => ({\n            periodeId: periode.id,\n        })),\n    };\n};\n","import dayjs from 'dayjs';\nimport { Søknadsinfo, isUtsettelsesperiode } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../../utils/types/regelTypes';\n\nexport const erUtsettelseEtterFamiliehendelsesdato: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const ugyldigeUtsettelser = grunnlag.perioder\n        .filter(isUtsettelsesperiode)\n        .filter((utsettelse) => dayjs(utsettelse.tidsperiode.fom).isBefore(grunnlag.familiehendelsesdato, 'day'));\n    return {\n        passerer: ugyldigeUtsettelser.length === 0,\n        info: ugyldigeUtsettelser.map((periode) => ({\n            periodeId: periode.id,\n        })),\n    };\n};\n","import {\n    Søknadsinfo,\n    formaterDatoKompakt,\n    getFørsteUttaksdag2UkerFørFødsel,\n    gjelderWLBReglerFarMedmorRundtFødsel,\n    isUttaksperiodeFarMedmorMedValgForUttakRundtFødsel,\n    starterTidsperiodeEtter2UkerFørFødsel,\n} from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../../utils/types/regelTypes';\n\nexport const starterUttaksperiodeRundtFødselEtter2UkerFørFødsel: RegelTest = (\n    grunnlag: Søknadsinfo,\n): RegelTestresultat => {\n    if (\n        !gjelderWLBReglerFarMedmorRundtFødsel(\n            grunnlag.familiehendelsesdato,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.morHarRett,\n            grunnlag.søkersituasjon.situasjon,\n        )\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n\n    const perioderFarMedmorSomStarterFør2UkerFørFødsel = grunnlag.perioder\n        .filter((p) => isUttaksperiodeFarMedmorMedValgForUttakRundtFødsel(p))\n        .filter(\n            (p) =>\n                !starterTidsperiodeEtter2UkerFørFødsel(\n                    p.tidsperiode,\n                    grunnlag.familiehendelsesdato,\n                    grunnlag.termindato,\n                ),\n        );\n\n    const førsteUttaksdagToUkerFørFødsel = formaterDatoKompakt(\n        getFørsteUttaksdag2UkerFørFødsel(grunnlag.familiehendelsesdato, grunnlag.termindato),\n    );\n    return {\n        passerer: perioderFarMedmorSomStarterFør2UkerFørFødsel.length === 0,\n        info: perioderFarMedmorSomStarterFør2UkerFørFødsel.map((periode) => ({\n            intlKey: 'uttaksplan.validering.feil.starterUttaksperiodeRundtFødselEtter2UkerFørFødsel',\n            values: { dato: førsteUttaksdagToUkerFørFødsel },\n            periodeId: periode.id,\n        })),\n    };\n};\n","import {\n    Søknadsinfo,\n    formaterDatoKompakt,\n    getSisteUttaksdag6UkerEtterFødsel,\n    gjelderWLBReglerFarMedmorRundtFødsel,\n    isUttaksperiodeFarMedmorPgaFødsel,\n    slutterTidsperiodeInnen6UkerEtterFødsel,\n} from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../../utils/types/regelTypes';\n\nexport const slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel: RegelTest = (\n    grunnlag: Søknadsinfo,\n): RegelTestresultat => {\n    if (\n        !gjelderWLBReglerFarMedmorRundtFødsel(\n            grunnlag.familiehendelsesdato,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.morHarRett,\n            grunnlag.søkersituasjon.situasjon,\n        )\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n\n    const perioderFarMedmorSomIkkeSlutterFør6UkerEtterFødsel = grunnlag.perioder\n        .filter((p) => isUttaksperiodeFarMedmorPgaFødsel(p, grunnlag.familiehendelsesdato, grunnlag.termindato))\n        .filter((p) => !slutterTidsperiodeInnen6UkerEtterFødsel(p.tidsperiode, grunnlag.familiehendelsesdato));\n\n    const sisteUttaksdagSeksUkerEtterFødsel = formaterDatoKompakt(\n        getSisteUttaksdag6UkerEtterFødsel(grunnlag.familiehendelsesdato),\n    );\n    return {\n        passerer: perioderFarMedmorSomIkkeSlutterFør6UkerEtterFødsel.length === 0,\n        info: perioderFarMedmorSomIkkeSlutterFør6UkerEtterFødsel.map((periode) => ({\n            intlKey: 'uttaksplan.validering.feil.slutterUttaksperiodeRundtFødselEtter6UkerEtterFødsel',\n            values: { dato: sisteUttaksdagSeksUkerEtterFødsel },\n            periodeId: periode.id,\n        })),\n    };\n};\n","import {\n    StønadskontoType,\n    Søknadsinfo,\n    andreAugust2022ReglerGjelder,\n    isUttaksperiode,\n    starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel,\n} from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../../utils/types/regelTypes';\n\nexport const periodeDeFørsteSeksUkeneHarUlovligUttakBFHR: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    if (\n        !andreAugust2022ReglerGjelder(grunnlag.familiehendelsesdato) ||\n        !grunnlag.søkerErFarEllerMedmor ||\n        grunnlag.morHarRett ||\n        grunnlag.søkersituasjon.situasjon !== 'fødsel'\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n\n    const perioderDeFørsteSeksUkeneMedUlovligUttakBFHR = grunnlag.perioder.filter(\n        (periode) =>\n            isUttaksperiode(periode) &&\n            starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel(\n                periode.tidsperiode,\n                grunnlag.familiehendelsesdato,\n                grunnlag.termindato,\n            ) &&\n            periode.konto === StønadskontoType.Foreldrepenger &&\n            periode.erMorForSyk === false,\n    );\n\n    return {\n        passerer: perioderDeFørsteSeksUkeneMedUlovligUttakBFHR.length === 0,\n        info: perioderDeFørsteSeksUkeneMedUlovligUttakBFHR.map((periode) => ({\n            intlKey: 'uttaksplan.validering.feil.perioderDeFørsteSeksUkeneMedUlovligUttakBFHR',\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { Søknadsinfo, isUtsettelsePgaArbeid } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../../utils/types/regelTypes';\n\nexport const harBekreftet100ProsentArbeidIUtsettelsePgaArbeid: RegelTest = (\n    grunnlag: Søknadsinfo,\n): RegelTestresultat => {\n    const utsettelserPgaArbeidUtenBekreftelse = grunnlag.perioder\n        .filter(isUtsettelsePgaArbeid)\n        .filter((periode) => periode.bekrefterArbeidIPerioden === false);\n\n    return {\n        passerer: utsettelserPgaArbeidUtenBekreftelse.length === 0,\n        info: utsettelserPgaArbeidUtenBekreftelse.map((periode) => ({\n            periodeId: periode.id,\n        })),\n    };\n};\n","import dayjs from 'dayjs';\nimport { Periode, Periodetype, Søknadsinfo, Uttaksdagen, formatDate, isUttakAnnenPart } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../../utils/types/regelTypes';\n\nexport const laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn = (\n    periode: Periode,\n    førsteUttaksdagForPåfølgendeBarn: Date | undefined,\n) => {\n    if (\n        førsteUttaksdagForPåfølgendeBarn !== undefined &&\n        (periode.type === Periodetype.Uttak ||\n            periode.type === Periodetype.Overføring ||\n            periode.type === Periodetype.Utsettelse ||\n            periode.type === Periodetype.Opphold ||\n            isUttakAnnenPart(periode))\n    ) {\n        return (\n            dayjs(periode.tidsperiode.fom).isSameOrAfter(førsteUttaksdagForPåfølgendeBarn, 'd') ||\n            dayjs(periode.tidsperiode.tom).isSameOrAfter(førsteUttaksdagForPåfølgendeBarn, 'd')\n        );\n    }\n    return false;\n};\n\nexport const forSenUttakVedPåfølgendeBarn: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    if (\n        grunnlag.familiehendelsesdatoNesteSak === undefined ||\n        grunnlag.førsteUttaksdagNesteBarnsSak === undefined ||\n        (grunnlag.minsterettUkerToTette && grunnlag.minsterettUkerToTette > 0)\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n    const perioderMedUgyldigTidsperiode = grunnlag.perioder.filter((periode) =>\n        laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn(periode, grunnlag.førsteUttaksdagNesteBarnsSak),\n    );\n    const sisteMuligeUttaksdag = Uttaksdagen(grunnlag.førsteUttaksdagNesteBarnsSak).trekkFra(1);\n    return {\n        passerer: perioderMedUgyldigTidsperiode.length === 0,\n        info: perioderMedUgyldigTidsperiode.map((periode) => ({\n            intlKey: 'uttaksplan.validering.info.forSenUttakVedPåfølgendeBarn',\n            values: {\n                fom: formatDate(periode.tidsperiode.fom),\n                tom: formatDate(periode.tidsperiode.tom),\n                sisteMuligeUttaksdag: formatDate(sisteMuligeUttaksdag),\n            },\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { harUttaksperiodeGyldigGradering } from './harUttaksperiodeGyldigGradering';\nimport { harPeriodeGyldigTidsperiode } from './harPeriodeGyldigTidsperiode';\nimport { harUttaksperiodeStønadskonto } from './harUttaksperiodeStønadskonto';\nimport { erSamtidigUttakGyldig } from './erSamtidigUttakGyldig';\nimport { erUtsettelseEtterFamiliehendelsesdato } from './erUtsettelseEtterFamiliehendelsesdato';\nimport { Regel, RegelAlvorlighet } from '../../utils/types/regelTypes';\nimport { starterUttaksperiodeRundtFødselEtter2UkerFørFødsel } from './starterUttaksperiodeRundtFødselEtter2UkerFørFødsel';\nimport { slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel } from './slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel';\nimport { periodeDeFørsteSeksUkeneHarUlovligUttakBFHR } from './periodeDeFørsteSeksUkeneHarUlovligUttakBFHR';\nimport { harBekreftet100ProsentArbeidIUtsettelsePgaArbeid } from './harBekreftet100ProsentArbeidIUtsettelsePgaArbeid';\nimport { forSenUttakVedPåfølgendeBarn } from './forSenUttakVedPåfølgendeBarn';\n\nexport enum PeriodeValiderRegelKey {\n    'uttaksperiodeHarGyldigGradering' = 'uttaksperiodeHarGyldigGradering',\n    'periodeHarGyldigTidsperiode' = 'periodeHarGyldigTidsperiode',\n    'uttaksperiodeHarStønadskonto' = 'uttaksperiodeHarStønadskonto',\n    'erSamtidigUttakGyldig' = 'erSamtidigUttakGyldig',\n    'erUtsettelseEtterFamiliehendelsesdato' = 'erUtsettelseEtterFamiliehendelsesdato',\n    'starterUttaksperiodeRundtFødselEtter2UkerFørFødsel' = 'starterUttaksperiodeRundtFødselEtter2UkerFørFødsel',\n    'slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel' = 'slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel',\n    'periodeDeFørsteSeksUkeneHarUlovligUttakBFHR' = 'periodeDeFørsteSeksUkeneHarUlovligUttakBFHR',\n    'harBekreftet100ProsentArbeidIUtsettelsePgaArbeid' = 'harBekreftet100ProsentArbeidIUtsettelsePgaArbeid',\n    'forSenUttakVedPåfølgendeBarn' = 'forSenUttakVedPåfølgendeBarn',\n}\n\n/** Meldingene skal default kun vises inne i skjema */\n\nconst skjulIOppsummering = true;\n\nconst periodevalideringsregler: Regel[] = [\n    {\n        key: PeriodeValiderRegelKey.uttaksperiodeHarGyldigGradering,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harUttaksperiodeGyldigGradering,\n        skjulesIOppsummering: skjulIOppsummering,\n        avvikType: 'skjema',\n    },\n    {\n        key: PeriodeValiderRegelKey.periodeHarGyldigTidsperiode,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harPeriodeGyldigTidsperiode,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.starterUttaksperiodeRundtFødselEtter2UkerFørFødsel,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: starterUttaksperiodeRundtFødselEtter2UkerFørFødsel,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.uttaksperiodeHarStønadskonto,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harUttaksperiodeStønadskonto,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.periodeDeFørsteSeksUkeneHarUlovligUttakBFHR,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: periodeDeFørsteSeksUkeneHarUlovligUttakBFHR,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.erSamtidigUttakGyldig,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: erSamtidigUttakGyldig,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.erUtsettelseEtterFamiliehendelsesdato,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: erUtsettelseEtterFamiliehendelsesdato,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.harBekreftet100ProsentArbeidIUtsettelsePgaArbeid,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harBekreftet100ProsentArbeidIUtsettelsePgaArbeid,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.forSenUttakVedPåfølgendeBarn,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: forSenUttakVedPåfølgendeBarn,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n];\n\nexport default periodevalideringsregler;\n","import { Søknadsinfo, isUtsettelsePgaFerie } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\n\nexport const harSøktOmFerieUtenArbeidsforhold: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const harArbeidsforhold = grunnlag.arbeidsforhold.length > 0;\n    return {\n        passerer: harArbeidsforhold ? true : grunnlag.perioder.some(isUtsettelsePgaFerie) === false,\n    };\n};\n","import { IntlShape } from 'react-intl';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport {\n    Perioden,\n    Søknadsinfo,\n    UtsettelseÅrsakType,\n    getVarighetString,\n    isUtsettelsesperiode,\n    uttaksConstants,\n} from '@navikt/fp-common';\n\nexport const inneholderForMyeFerie: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const ferieUtsettelser = grunnlag.perioder.filter(\n        (p) => isUtsettelsesperiode(p) && p.årsak === UtsettelseÅrsakType.Ferie,\n    );\n    const ferieDager = ferieUtsettelser.reduce(\n        (sumFerieDager, periode) => sumFerieDager + Perioden(periode).getAntallUttaksdager(),\n        0,\n    );\n\n    return {\n        passerer: ferieDager <= uttaksConstants.MAKS_FERIEDAGER_MED_OVERFØRING,\n        info: ferieUtsettelser.map((periode) => ({\n            periodeId: periode.id,\n            values: {\n                ukerOgDager: (intl: IntlShape) => getVarighetString(ferieDager, intl),\n            },\n        })),\n    };\n};\n","import { RegelTestresultat } from '../utils/types/regelTypes';\nimport { beregnGjenståendeUttaksdager, isUtsettelsesperiode, StønadskontoType, Søknadsinfo } from '@navikt/fp-common';\n\n// Denne regelen sparker inn dersom forelders kvote + fellesperiode er tømt\n// Dersom noe er igjen av andre forelders kvote er det OK\nexport function kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme(grunnlag: Søknadsinfo): RegelTestresultat {\n    const { perioder, søkerErFarEllerMedmor, stønadskontoer } = grunnlag;\n    const gjenståendeDager = beregnGjenståendeUttaksdager(stønadskontoer, perioder, false);\n    const sistePeriodeErIkkeUtsettelse =\n        perioder.length > 0 ? !isUtsettelsesperiode(perioder[perioder.length - 1]) : false;\n\n    const resterendeFellesperiode = gjenståendeDager.find((konto) => konto.konto === StønadskontoType.Fellesperiode);\n    const resterendeMødrekvote = gjenståendeDager.find((konto) => konto.konto === StønadskontoType.Mødrekvote);\n    const resterendeFedrekvote = gjenståendeDager.find((konto) => konto.konto === StønadskontoType.Fedrekvote);\n    const resterendeForeldrepenger = gjenståendeDager.find((konto) => konto.konto === StønadskontoType.Foreldrepenger);\n\n    if (sistePeriodeErIkkeUtsettelse || perioder.length === 0) {\n        return {\n            passerer: true,\n        };\n    }\n\n    if (søkerErFarEllerMedmor) {\n        if (resterendeFedrekvote !== undefined && resterendeFellesperiode !== undefined) {\n            if (resterendeFedrekvote.dager > 0 || resterendeFellesperiode.dager > 0) {\n                return {\n                    passerer: true,\n                };\n            }\n        }\n\n        if (resterendeForeldrepenger !== undefined) {\n            if (resterendeForeldrepenger.dager > 0) {\n                return {\n                    passerer: true,\n                };\n            }\n        }\n\n        return {\n            passerer: false,\n            info: {\n                intlKey: 'uttaksplan.validering.feil.sluttMedUtsettelse',\n            },\n        };\n    } else {\n        if (resterendeMødrekvote !== undefined && resterendeFellesperiode !== undefined) {\n            if (resterendeMødrekvote.dager > 0 || resterendeFellesperiode.dager > 0) {\n                return {\n                    passerer: true,\n                };\n            }\n        }\n\n        if (resterendeForeldrepenger !== undefined) {\n            if (resterendeForeldrepenger.dager > 0) {\n                return {\n                    passerer: true,\n                };\n            }\n        }\n\n        return {\n            passerer: false,\n            info: {\n                intlKey: 'uttaksplan.validering.feil.sluttMedUtsettelse',\n            },\n        };\n    }\n}\n","import { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport {\n    Periode,\n    StønadskontoUttak,\n    Søknadsinfo,\n    TilgjengeligStønadskonto,\n    beregnGjenståendeUttaksdager,\n} from '@navikt/fp-common';\n\nconst erUttaksmengdeForFarMedmorForHøy = (\n    uttaksplan: Periode[],\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    farEllerMedmor: boolean,\n): boolean => {\n    if (farEllerMedmor === true) {\n        const kontoUttak = beregnGjenståendeUttaksdager(tilgjengeligeStønadskontoer, uttaksplan, false);\n        return kontoUttak.some((konto: StønadskontoUttak) => konto.dager < 0);\n    } else {\n        return false;\n    }\n};\n\nexport const erUttaksmengdeForFarMedmorForHøyTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    return {\n        passerer:\n            erUttaksmengdeForFarMedmorForHøy(\n                grunnlag.perioder,\n                grunnlag.stønadskontoer,\n                grunnlag.søkerErFarEllerMedmor,\n            ) === false,\n    };\n};\n","import { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { IntlShape } from 'react-intl';\nimport {\n    Periode,\n    Søknadsinfo,\n    isInfoPeriode,\n    isPeriodeUtenUttak,\n    isUtsettelsePgaArbeid,\n    isUttaksperiode,\n    links,\n} from '@navikt/fp-common';\n\nconst vekslendeArbeidOgUttakTest = (kunSøkersPerioder: Periode[]): boolean => {\n    const firstArbeidsperiodeIndex = kunSøkersPerioder.findIndex((p) => isUtsettelsePgaArbeid(p));\n\n    if (firstArbeidsperiodeIndex > -1) {\n        const antallPerioderEtterFørsteUtsettelseGrunnetArbeid =\n            kunSøkersPerioder.length - 1 - firstArbeidsperiodeIndex;\n\n        if (antallPerioderEtterFørsteUtsettelseGrunnetArbeid >= 5) {\n            // Hvis vi har en serie perioder av formatet:\n            // Arbeid -> Uttak -> Arbeid -> Uttak -> Arbeid -> Uttak => foreslå gradering\n            if (\n                isUtsettelsePgaArbeid(kunSøkersPerioder[firstArbeidsperiodeIndex]) &&\n                isUttaksperiode(kunSøkersPerioder[firstArbeidsperiodeIndex + 1]) &&\n                isUtsettelsePgaArbeid(kunSøkersPerioder[firstArbeidsperiodeIndex + 2]) &&\n                isUttaksperiode(kunSøkersPerioder[firstArbeidsperiodeIndex + 3]) &&\n                isUtsettelsePgaArbeid(kunSøkersPerioder[firstArbeidsperiodeIndex + 4]) &&\n                isUttaksperiode(kunSøkersPerioder[firstArbeidsperiodeIndex + 5])\n            ) {\n                return false;\n            }\n        }\n        if (antallPerioderEtterFørsteUtsettelseGrunnetArbeid === 4 && firstArbeidsperiodeIndex > 0) {\n            // Hvis vi har en serie perioder av formatet:\n            // Uttak -> Arbeid -> Uttak -> Arbeid -> Uttak -> Arbeid => foreslå gradering\n            if (\n                firstArbeidsperiodeIndex > 0 &&\n                isUttaksperiode(kunSøkersPerioder[firstArbeidsperiodeIndex - 1]) &&\n                isUtsettelsePgaArbeid(kunSøkersPerioder[firstArbeidsperiodeIndex]) &&\n                isUttaksperiode(kunSøkersPerioder[firstArbeidsperiodeIndex + 1]) &&\n                isUtsettelsePgaArbeid(kunSøkersPerioder[firstArbeidsperiodeIndex + 2]) &&\n                isUttaksperiode(kunSøkersPerioder[firstArbeidsperiodeIndex + 3]) &&\n                isUtsettelsePgaArbeid(kunSøkersPerioder[firstArbeidsperiodeIndex + 4])\n            ) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n};\n\nconst vekslendePeriodeUtenUttakOgUttakTest = (kunSøkersPerioder: Periode[]): boolean => {\n    const firstPeriodeUtenUttakIndex = kunSøkersPerioder.findIndex((p) => isPeriodeUtenUttak(p));\n\n    if (firstPeriodeUtenUttakIndex > -1) {\n        const antallPerioderEtterFørstePeriodeUtenUttak = kunSøkersPerioder.length - 1 - firstPeriodeUtenUttakIndex;\n\n        if (antallPerioderEtterFørstePeriodeUtenUttak >= 5) {\n            // Hvis vi har en serie perioder av formatet:\n            // Uten Uttak -> Uttak ->  Uten Uttak -> Uttak ->  Uten Uttak -> Uttak => foreslå gradering\n            if (\n                isPeriodeUtenUttak(kunSøkersPerioder[firstPeriodeUtenUttakIndex]) &&\n                isUttaksperiode(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 1]) &&\n                isPeriodeUtenUttak(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 2]) &&\n                isUttaksperiode(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 3]) &&\n                isPeriodeUtenUttak(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 4]) &&\n                isUttaksperiode(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 5])\n            ) {\n                return false;\n            }\n        }\n        if (antallPerioderEtterFørstePeriodeUtenUttak === 4 && firstPeriodeUtenUttakIndex > 0) {\n            // Hvis vi har en serie perioder av formatet:\n            // Uttak ->  Uten Uttak -> Uttak ->  Uten Uttak -> Uttak ->  Uten Uttak => foreslå gradering\n            if (\n                firstPeriodeUtenUttakIndex > 0 &&\n                isUttaksperiode(kunSøkersPerioder[firstPeriodeUtenUttakIndex - 1]) &&\n                isPeriodeUtenUttak(kunSøkersPerioder[firstPeriodeUtenUttakIndex]) &&\n                isUttaksperiode(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 1]) &&\n                isPeriodeUtenUttak(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 2]) &&\n                isUttaksperiode(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 3]) &&\n                isPeriodeUtenUttak(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 4])\n            ) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n};\n\nexport const burdeKanskjeSøkeGraderingTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const { perioder } = grunnlag;\n    const kunSøkersPerioder = perioder.filter((p: Periode) => !isInfoPeriode(p));\n\n    if (kunSøkersPerioder.length >= 6) {\n        const vekslerArbeidOgUttakTest = vekslendeArbeidOgUttakTest(kunSøkersPerioder);\n        const veklserPerioderUtenUttakOgUttaktest = vekslendePeriodeUtenUttakOgUttakTest(kunSøkersPerioder);\n        const passerer = vekslerArbeidOgUttakTest && veklserPerioderUtenUttakOgUttaktest;\n        let infoTekstKey = undefined;\n        if (!vekslerArbeidOgUttakTest) {\n            infoTekstKey =\n                'uttaksplan.validering.info.burdeKanskjeSøkeGradering.PgaVekslendeUtsettelserPgaArbeidOgUttak';\n        }\n\n        if (!veklserPerioderUtenUttakOgUttaktest) {\n            infoTekstKey = 'uttaksplan.validering.info.burdeKanskjeSøkeGradering.PgaVekslendePerioderUtenUttakOgUttak';\n        }\n\n        return {\n            passerer: passerer,\n            info: {\n                intlKey: infoTekstKey,\n                renderAsHtml: true,\n                values: {\n                    a: (_intl: IntlShape) => (msg: any) => (\n                        <a href={links.graderingInfo} className=\"lenke\" rel=\"noreferrer\" target=\"_blank\">\n                            {msg}\n                        </a>\n                    ),\n                },\n            },\n        };\n    }\n\n    return {\n        passerer: true,\n    };\n};\n","import { Søknadsinfo, formatDate, isUfødtBarn } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { getUgyldigUttakMor } from '../utils/uttakValideringUtils';\n\nexport const ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindatoTest: RegelTest = (\n    grunnlag: Søknadsinfo,\n): RegelTestresultat => {\n    const søkerErMor = !grunnlag.søkerErFarEllerMedmor;\n    if (søkerErMor && isUfødtBarn(grunnlag.barn)) {\n        const ugyldigePerioder = getUgyldigUttakMor(\n            grunnlag.perioder,\n            grunnlag.familiehendelsesdato,\n            grunnlag.søkersituasjon.situasjon,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.termindato,\n            grunnlag.erFlerbarnssøknad,\n            'mellomSyvOgÅtteUkerForMor',\n        );\n\n        const passerer = ugyldigePerioder.length === 0;\n        return {\n            passerer,\n            info: ugyldigePerioder.map((periode) => ({\n                intlKey: 'uttaksplan.validering.advarsel.ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindato',\n                values: {\n                    fraDato: formatDate(periode.tidsperiode.fom),\n                    tilDato: formatDate(periode.tidsperiode.tom),\n                },\n                periodeId: periode.id,\n            })),\n        };\n    }\n\n    return { passerer: true };\n};\n","import { farMedmorBrukerForeldrepengerMedAktivitetskravRundtFødselOgMorIkkeErSyk } from '../../utils/uttaksskjema/aktivitetskravMorSkalBesvares';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\nimport { StønadskontoType, Søknadsinfo, hasValue, isUttaksperiode } from '@navikt/fp-common';\n\nexport const inneholderPerioderUtenAktivitetskrav = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const {\n        perioder,\n        søkerErFarEllerMedmor,\n        søkerErAleneOmOmsorg,\n        søkerHarMidlertidigOmsorg,\n        familiehendelsesdato,\n        søkersituasjon,\n    } = grunnlag;\n\n    if (!søkerErFarEllerMedmor || søkerErAleneOmOmsorg || søkerHarMidlertidigOmsorg) {\n        return {\n            passerer: true,\n        };\n    }\n    const perioderUtenAktivitetskrav = perioder.filter(\n        (p) =>\n            isUttaksperiode(p) &&\n            !hasValue(p.morsAktivitetIPerioden) &&\n            !p.erMorForSyk &&\n            !p.ønskerSamtidigUttak &&\n            !p.ønskerFlerbarnsdager &&\n            !farMedmorBrukerForeldrepengerMedAktivitetskravRundtFødselOgMorIkkeErSyk(\n                familiehendelsesdato,\n                søkerErFarEllerMedmor,\n                p.konto,\n                p.erMorForSyk,\n                p.tidsperiode,\n                søkersituasjon.situasjon,\n            ) &&\n            (p.konto === StønadskontoType.Fellesperiode || p.konto === StønadskontoType.Foreldrepenger),\n    );\n\n    return {\n        passerer: perioderUtenAktivitetskrav.length === 0,\n        info: perioderUtenAktivitetskrav.map((p) => ({\n            intlKey: 'uttaksplan.validering.feil.inneholderPerioderUtenAktivitetskrav',\n            periodeId: p.id,\n        })),\n    };\n};\n","import { Søknadsinfo, hasValue, isUtsettelsesperiode } from '@navikt/fp-common';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\n\nexport const inneholderUtsettelserUtenÅrsak = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const utsettelserUtenÅrsak = grunnlag.perioder.filter((p) => isUtsettelsesperiode(p) && !hasValue(p.årsak));\n\n    const passerer = utsettelserUtenÅrsak.length === 0;\n\n    return {\n        passerer,\n        info: utsettelserUtenÅrsak.map((periode) => ({\n            intlKey: 'uttaksplan.validering.feil.inneholderUtsettelserUtenÅrsak',\n            periodeId: periode.id,\n        })),\n    };\n};\n","import {\n    ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL,\n    Periode,\n    Søknadsinfo,\n    formaterDatoKompakt,\n    getFarMedmorUttakRundtFødsel,\n    getFørsteUttaksdag2UkerFørFødsel,\n    getSisteUttaksdag6UkerEtterFødsel,\n    getSumUttaksdagerÅTrekkeIPeriodene,\n    gjelderWLBReglerFarMedmorRundtFødsel,\n    slutterTidsperiodeInnen6UkerEtterFødsel,\n} from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport dayjs from 'dayjs';\n\nconst overskridelseUttakRundtFødselAntallDager = (\n    perioderRundtFødsel: Periode[],\n    familiehendelsesdato: Date,\n): number => {\n    const sisteUttak6UkerEtterFødsel = getSisteUttaksdag6UkerEtterFødsel(familiehendelsesdato);\n    const perioderAvkortetTilÅSlutte6UkerEtterFødsel = perioderRundtFødsel.map((p) =>\n        dayjs(p.tidsperiode.tom).isAfter(dayjs(sisteUttak6UkerEtterFødsel), 'day')\n            ? { ...p, tidsperiode: { fom: p.tidsperiode.fom, tom: sisteUttak6UkerEtterFødsel } }\n            : p,\n    );\n    const antallDager = getSumUttaksdagerÅTrekkeIPeriodene(perioderAvkortetTilÅSlutte6UkerEtterFødsel);\n    return ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL - antallDager;\n};\n\nexport const farMedmorHarSøktUgyldigAntallDagerUttakRundtFødselTest: RegelTest = (\n    grunnlag: Søknadsinfo,\n): RegelTestresultat => {\n    if (\n        gjelderWLBReglerFarMedmorRundtFødsel(\n            grunnlag.familiehendelsesdato,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.morHarRett,\n            grunnlag.søkersituasjon.situasjon,\n        )\n    ) {\n        const perioderUttakRundtFødsel = getFarMedmorUttakRundtFødsel(\n            grunnlag.perioder,\n            grunnlag.familiehendelsesdato,\n            grunnlag.termindato,\n        );\n        const antallDagerForMye = overskridelseUttakRundtFødselAntallDager(\n            perioderUttakRundtFødsel,\n            grunnlag.familiehendelsesdato,\n        );\n\n        const slutterEnAvPeriodeneForSent = perioderUttakRundtFødsel.some(\n            (p) => !slutterTidsperiodeInnen6UkerEtterFødsel(p.tidsperiode, grunnlag.familiehendelsesdato),\n        );\n        let info;\n        const fraDato = formaterDatoKompakt(\n            getFørsteUttaksdag2UkerFørFødsel(grunnlag.familiehendelsesdato, grunnlag.termindato),\n        );\n        const tilDato = formaterDatoKompakt(getSisteUttaksdag6UkerEtterFødsel(grunnlag.familiehendelsesdato));\n        if (slutterEnAvPeriodeneForSent) {\n            info = {\n                intlKey:\n                    'uttaksplan.validering.feil.farMedmorHarSøktUgyldigAntallDagerUttakRundtFødsel.periodeSlutterForSent',\n                values: {\n                    fraDato: fraDato,\n                    tilDato: tilDato,\n                },\n            };\n        } else {\n            info = {\n                intlKey: 'uttaksplan.validering.feil.farMedmorHarSøktUgyldigAntallDagerUttakRundtFødsel',\n                values: {\n                    fraDato: fraDato,\n                    tilDato: tilDato,\n                    dagerForMye: Math.abs(antallDagerForMye),\n                },\n            };\n        }\n        return {\n            passerer: antallDagerForMye >= 0,\n            info: info,\n        };\n    }\n\n    return {\n        passerer: true,\n    };\n};\n","import dayjs from 'dayjs';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo, getSisteUttaksdag6UkerEtterFødsel, isUttaksperiode } from '@navikt/fp-common';\n\nexport const harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUkerTest: RegelTest = (\n    grunnlag: Søknadsinfo,\n): RegelTestresultat => {\n    const søkerErMor = !grunnlag.søkerErFarEllerMedmor;\n    if (søkerErMor && grunnlag.søkersituasjon.situasjon === 'fødsel') {\n        const sisteUttaksdagEtterSeksUker = getSisteUttaksdag6UkerEtterFødsel(grunnlag.familiehendelsesdato);\n        const perioderMedSamtidigUttakUnder100ProsentInnenFørsteSeksUker = grunnlag.perioder.filter(\n            (p) =>\n                isUttaksperiode(p) &&\n                dayjs(p.tidsperiode.fom).isSameOrBefore(sisteUttaksdagEtterSeksUker, 'day') &&\n                p.ønskerSamtidigUttak === true &&\n                p.samtidigUttakProsent !== undefined &&\n                parseInt(p.samtidigUttakProsent, 10) < 100,\n        );\n\n        return {\n            passerer: perioderMedSamtidigUttakUnder100ProsentInnenFørsteSeksUker.length <= 0,\n            info: {\n                intlKey: 'uttaksplan.validering.feil.morHarSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUker',\n            },\n        };\n    }\n    return { passerer: true };\n};\n","import {\n    ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL,\n    Søknadsinfo,\n    formaterDatoKompakt,\n    getFarMedmorUttakRundtFødsel,\n    getFørsteUttaksdag2UkerFørFødsel,\n    getSisteUttaksdag6UkerEtterFødsel,\n    getSumUttaksdagerÅTrekkeIPeriodene,\n    gjelderWLBReglerFarMedmorRundtFødsel,\n} from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { erUttaksmengdeForFarMedmorForHøyTest } from './erUttaksmengdeForFarMedmorForHøyTest';\nimport dayjs from 'dayjs';\n\nexport const farMedMorHarRettPåUttakRundtFødselTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const tattUtForMangeDagerIPlanen = erUttaksmengdeForFarMedmorForHøyTest(grunnlag).passerer === false;\n    if (\n        !gjelderWLBReglerFarMedmorRundtFødsel(\n            grunnlag.familiehendelsesdato,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.morHarRett,\n            grunnlag.søkersituasjon.situasjon,\n        ) ||\n        tattUtForMangeDagerIPlanen\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n    const perioderRundtFødsel = getFarMedmorUttakRundtFødsel(\n        grunnlag.perioder,\n        grunnlag.familiehendelsesdato,\n        grunnlag.termindato,\n    );\n\n    let dagerIgjenRundtFødsel;\n    const førsteUttaksdag2UkerFørFødsel = getFørsteUttaksdag2UkerFørFødsel(\n        grunnlag.familiehendelsesdato,\n        grunnlag.termindato,\n    );\n    const sisteUttak6UkerEtterFødsel = getSisteUttaksdag6UkerEtterFødsel(grunnlag.familiehendelsesdato);\n\n    if (perioderRundtFødsel.length > 0) {\n        const antallUttaksdagerRundtFødsel = getSumUttaksdagerÅTrekkeIPeriodene(perioderRundtFødsel);\n        dagerIgjenRundtFødsel = ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL - antallUttaksdagerRundtFødsel;\n    } else {\n        dagerIgjenRundtFødsel = ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL;\n    }\n    const erMerEnn3månederSidenFamiliehendelse = dayjs(new Date())\n        .subtract(3, 'month')\n        .isSameOrAfter(grunnlag.familiehendelsesdato, 'day');\n\n    return {\n        passerer: dagerIgjenRundtFødsel <= 0 || erMerEnn3månederSidenFamiliehendelse,\n        info: {\n            intlKey: 'uttaksplan.validering.info.rettTilUttakRundtFødsel',\n            values: {\n                fraDato: formaterDatoKompakt(førsteUttaksdag2UkerFørFødsel),\n                tilDato: formaterDatoKompakt(sisteUttak6UkerEtterFødsel),\n                antallDager: Math.round(dagerIgjenRundtFødsel * 10) / 10,\n            },\n        },\n    };\n};\n","import {\n    Søknadsinfo,\n    andreAugust2022ReglerGjelder,\n    getBareFarHarRettAntallUkerPåÅTaUtDagerUtenAktivitetskravFørWLB,\n    getBareFarHarRettKontoUtenAktivitetskravUker,\n    links,\n} from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { erUttaksmengdeForFarMedmorForHøyTest } from './erUttaksmengdeForFarMedmorForHøyTest';\nimport { IntlShape } from 'react-intl';\n\nexport const farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest: RegelTest = (\n    grunnlag: Søknadsinfo,\n): RegelTestresultat => {\n    const tattUtForMangeDagerIPlanen = erUttaksmengdeForFarMedmorForHøyTest(grunnlag).passerer === false;\n    if (\n        !grunnlag.søkerErFarEllerMedmor ||\n        grunnlag.morHarRett ||\n        tattUtForMangeDagerIPlanen ||\n        (grunnlag.søkerErFarEllerMedmor && grunnlag.søkerErAleneOmOmsorg)\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n    const kontoUtenAktivitetskravUker = getBareFarHarRettKontoUtenAktivitetskravUker(\n        grunnlag.antallBarn,\n        grunnlag.morErUfør,\n        grunnlag.familiehendelsesdato,\n        grunnlag.dekningsgrad,\n        !grunnlag.morHarRett,\n    );\n\n    const testPasserer = kontoUtenAktivitetskravUker === 0;\n    const renderAsHtml = true;\n    const link = (_intl: IntlShape) => (msg: any) => (\n        <a href={links.aktivitetsfriUttakInfo} className=\"lenke\" rel=\"noreferrer\" target=\"_blank\">\n            {msg}\n        </a>\n    );\n\n    if (andreAugust2022ReglerGjelder(grunnlag.familiehendelsesdato)) {\n        return {\n            passerer: testPasserer,\n            info: {\n                intlKey: 'uttaksplan.validering.info.rettTilAktivitetsfriUttak.etterWLB',\n                renderAsHtml: renderAsHtml,\n                values: {\n                    antallUker: kontoUtenAktivitetskravUker,\n                    a: link,\n                },\n            },\n        };\n    } else {\n        const bareFarHarRett = grunnlag.søkerErFarEllerMedmor && !grunnlag.morHarRett;\n        const antallUkerPåÅTaUtDager = getBareFarHarRettAntallUkerPåÅTaUtDagerUtenAktivitetskravFørWLB(\n            grunnlag.antallBarn,\n            grunnlag.familiehendelsesdato,\n            grunnlag.dekningsgrad,\n            bareFarHarRett,\n        );\n        return {\n            passerer: testPasserer,\n            info: {\n                intlKey: 'uttaksplan.validering.info.rettTilAktivitetsfriUttak.førWLB',\n                renderAsHtml: renderAsHtml,\n                values: {\n                    antallUker: kontoUtenAktivitetskravUker,\n                    antallUkerÅTaUtDagerUtenAktivitet: antallUkerPåÅTaUtDager,\n                    a: link,\n                },\n            },\n        };\n    }\n};\n","import { RegelTestresultat } from '../utils/types/regelTypes';\nimport dayjs from 'dayjs';\nimport { Periode, Søknadsinfo, Uttaksperiode, isUttaksperiode } from '@navikt/fp-common';\nimport { graderingSkalBesvares } from '../../utils/uttaksskjema/graderingSkalBesvares';\n\nexport const inneholderUttaksperioderMedUbesvartGradering = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const uttaksperioder = grunnlag.perioder.filter((p: Periode) => isUttaksperiode(p)) as Uttaksperiode[];\n    const perioderMedUbesvartGradering = uttaksperioder\n        .filter((p) =>\n            graderingSkalBesvares(\n                p.type,\n                p.konto,\n                grunnlag.familiehendelsesdato,\n                grunnlag.søkerErFarEllerMedmor,\n                p.erMorForSyk,\n                p.tidsperiode,\n            ),\n        )\n        //Feilmeldingen skal ikke komme hvis spm om flerbarnsdager skal besvares først (kun for perioder etter fødsel).\n        .filter((p) =>\n            grunnlag.erFlerbarnssøknad\n                ? (dayjs(p.tidsperiode.fom).isSameOrAfter(grunnlag.familiehendelsesdato, 'd') &&\n                      p.ønskerFlerbarnsdager !== undefined) ||\n                  dayjs(p.tidsperiode.fom).isBefore(grunnlag.familiehendelsesdato, 'd')\n                : p,\n        )\n        .filter((p) => p.gradert === undefined);\n\n    return {\n        passerer: perioderMedUbesvartGradering.length === 0,\n        info: perioderMedUbesvartGradering.map((periode) => ({\n            intlKey: 'uttaksplan.validering.feil.inneholderUttaksperioderMedUbesvartGradering',\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { ønskerFlerbarnsdagerSkalBesvares } from '../../utils/uttaksskjema/ønskerFlerbarnsdagerSkalBesvares';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\nimport {\n    Periode,\n    Søknadsinfo,\n    UttakRundtFødselÅrsak,\n    Uttaksperiode,\n    isAnnenForelderOppgitt,\n    isUttaksperiode,\n} from '@navikt/fp-common';\n\nexport const inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest = (\n    grunnlag: Søknadsinfo,\n): RegelTestresultat => {\n    const uttaksperioder = grunnlag.perioder.filter((p: Periode) => isUttaksperiode(p)) as Uttaksperiode[];\n    const erFlerbarnssøknad = grunnlag.antallBarn > 1;\n    const bareFarMedmorHarRett = grunnlag.søkerErFarEllerMedmor && !grunnlag.erDeltUttak;\n    const erDeltUttakINorge =\n        grunnlag.erDeltUttak &&\n        isAnnenForelderOppgitt(grunnlag.annenForelder) &&\n        grunnlag.annenForelder.harRettPåForeldrepengerINorge;\n    const perioderMedUbesvartSpmOmFlerbarnsdager = uttaksperioder\n        .filter((p) =>\n            ønskerFlerbarnsdagerSkalBesvares(\n                p.type,\n                erFlerbarnssøknad,\n                grunnlag.søkerErFarEllerMedmor,\n                grunnlag.familiehendelsesdato,\n                p.tidsperiode,\n                p.konto,\n                bareFarMedmorHarRett,\n                grunnlag.antallBarn,\n                grunnlag.søkerErAleneOmOmsorg,\n                !!erDeltUttakINorge,\n                p.erMorForSyk ? UttakRundtFødselÅrsak.morErForSyk : undefined,\n            ),\n        )\n        .filter((p) => p.gradert === undefined);\n\n    return {\n        passerer: perioderMedUbesvartSpmOmFlerbarnsdager.length === 0,\n        info: perioderMedUbesvartSpmOmFlerbarnsdager.map((periode) => ({\n            intlKey: 'uttaksplan.validering.feil.inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdager',\n            periodeId: periode.id,\n        })),\n    };\n};\n","import {\n    Søknadsinfo,\n    andreAugust2022ReglerGjelder,\n    getBareFarHarRettAntallUkerPåÅTaUtDagerUtenAktivitetskravFørWLB,\n    getBareFarHarRettFlerbarnsdagerUker,\n    links,\n} from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { erUttaksmengdeForFarMedmorForHøyTest } from './erUttaksmengdeForFarMedmorForHøyTest';\nimport { IntlShape } from 'react-intl';\n\nexport const farMedmorHarRettPåFlerbarnsdagerTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const tattUtForMangeDagerIPlanen = erUttaksmengdeForFarMedmorForHøyTest(grunnlag).passerer === false;\n    if (\n        !grunnlag.søkerErFarEllerMedmor ||\n        grunnlag.morHarRett ||\n        tattUtForMangeDagerIPlanen ||\n        (grunnlag.søkerErFarEllerMedmor && grunnlag.søkerErAleneOmOmsorg) ||\n        andreAugust2022ReglerGjelder(grunnlag.familiehendelsesdato)\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n    const flerbarnsUker = getBareFarHarRettFlerbarnsdagerUker(\n        grunnlag.antallBarn,\n        grunnlag.familiehendelsesdato,\n        grunnlag.dekningsgrad,\n        !grunnlag.morHarRett,\n    );\n    const bareFarHarRett = grunnlag.søkerErFarEllerMedmor && !grunnlag.morHarRett;\n    const antallUkerPåÅTaUtDager = getBareFarHarRettAntallUkerPåÅTaUtDagerUtenAktivitetskravFørWLB(\n        grunnlag.antallBarn,\n        grunnlag.familiehendelsesdato,\n        grunnlag.dekningsgrad,\n        bareFarHarRett,\n    );\n\n    return {\n        passerer: flerbarnsUker === 0,\n        info: {\n            intlKey: 'uttaksplan.validering.info.flerbarnsdagerKanBrukes',\n            renderAsHtml: true,\n            values: {\n                antallUker: flerbarnsUker,\n                antallUkerÅTaUtFlerbarnsdager: antallUkerPåÅTaUtDager,\n                a: (_intl: IntlShape) => (msg: any) => (\n                    <a href={links.aktivitetsfriUttakInfo} className=\"lenke\" rel=\"noreferrer\" target=\"_blank\">\n                        {msg}\n                    </a>\n                ),\n            },\n        },\n    };\n};\n","import { getBrukteDager } from '../../utils/brukteDagerUtils';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\nimport { laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn } from './periodevalideringstester/forSenUttakVedPåfølgendeBarn';\nimport { Søknadsinfo } from '@navikt/fp-common';\n\nexport const overstigerMinsterettVedToTette = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const { familiehendelsesdato, perioder, stønadskontoer, søkerErFarEllerMedmor, minsterettUkerToTette } = grunnlag;\n    const perioderEtterFørsteStønadsperiodeNyttBarn = perioder.filter((periode) =>\n        laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn(periode, grunnlag.førsteUttaksdagNesteBarnsSak),\n    );\n    if (\n        minsterettUkerToTette === undefined ||\n        minsterettUkerToTette === 0 ||\n        perioderEtterFørsteStønadsperiodeNyttBarn.length === 0\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n    const perioderFørFørsteStønadsperiodeNyttBarn = perioder.filter(\n        (periode) => !laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn(periode, grunnlag.førsteUttaksdagNesteBarnsSak),\n    );\n    const minsterettMaxAntallUker = minsterettUkerToTette;\n    const minsterettMaxAntallDager = minsterettMaxAntallUker * 5;\n\n    const brukteDagerPerForelderFørFørsteStønadsdagNyttBarn = getBrukteDager(\n        stønadskontoer,\n        perioderFørFørsteStønadsperiodeNyttBarn,\n        familiehendelsesdato,\n    );\n    const uttaksdagerFremTilNyttBarnStønadsdag = søkerErFarEllerMedmor\n        ? brukteDagerPerForelderFørFørsteStønadsdagNyttBarn.farMedmor.dagerEgneKvoter +\n          brukteDagerPerForelderFørFørsteStønadsdagNyttBarn.farMedmor.dagerFellesperiode\n        : brukteDagerPerForelderFørFørsteStønadsdagNyttBarn.mor.dagerEgneKvoter +\n          brukteDagerPerForelderFørFørsteStønadsdagNyttBarn.mor.dagerFellesperiode;\n\n    const dagerIgjenÅBrukePåMinsteretten = minsterettMaxAntallDager - uttaksdagerFremTilNyttBarnStønadsdag;\n\n    const brukteDagerPerForelderEtterFørsteStønadsdagNyttBarn = getBrukteDager(\n        stønadskontoer,\n        perioderEtterFørsteStønadsperiodeNyttBarn,\n        familiehendelsesdato,\n    );\n    const uttaksdagerEtterNyttBarnStønadsdag = søkerErFarEllerMedmor\n        ? brukteDagerPerForelderEtterFørsteStønadsdagNyttBarn.farMedmor.dagerEgneKvoter +\n          brukteDagerPerForelderEtterFørsteStønadsdagNyttBarn.farMedmor.dagerFellesperiode\n        : brukteDagerPerForelderEtterFørsteStønadsdagNyttBarn.mor.dagerEgneKvoter +\n          brukteDagerPerForelderEtterFørsteStønadsdagNyttBarn.mor.dagerFellesperiode;\n\n    const dagerIgjenAvMinsterett = dagerIgjenÅBrukePåMinsteretten - uttaksdagerEtterNyttBarnStønadsdag;\n\n    return {\n        passerer: dagerIgjenAvMinsterett >= 0,\n        info: {\n            intlKey: 'uttaksplan.validering.info.overstigerMinsterettVedToTette',\n            values: {\n                uker: minsterettMaxAntallUker,\n                forMyeUttak: Math.abs(dagerIgjenAvMinsterett),\n            },\n        },\n    };\n};\n","import { Søknadsinfo } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn } from './periodevalideringstester/forSenUttakVedPåfølgendeBarn';\n\nexport const harPerioderEtterFørsteStønadsdagNesteBarnDerToTette: RegelTest = (\n    grunnlag: Søknadsinfo,\n): RegelTestresultat => {\n    if (grunnlag.minsterettUkerToTette === undefined || grunnlag.minsterettUkerToTette === 0) {\n        return {\n            passerer: true,\n        };\n    }\n    const perioderEtterFørsteStønadsperiodeNyttBarn = grunnlag.perioder.filter((periode) =>\n        laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn(periode, grunnlag.førsteUttaksdagNesteBarnsSak),\n    );\n\n    const tekstKey = grunnlag.søkerErFarEllerMedmor\n        ? 'uttaksplan.validering.info.harPerioderEtterFørsteStønadsdagNesteBarnDerToTette.far'\n        : 'uttaksplan.validering.info.harPerioderEtterFørsteStønadsdagNesteBarnDerToTette.mor';\n    return {\n        passerer: perioderEtterFørsteStønadsperiodeNyttBarn.length === 0,\n        info: {\n            intlKey: tekstKey,\n        },\n    };\n};\n","import { inneholderUttaksplanPerioderTest } from './tester/inneholderUttaksplanPerioderTest';\nimport { harMorSøktUgyldigUttakFørsteSeksUkerTest } from './tester/harMorSøktUgyldigUttakFørsteSeksUkerTest';\nimport { stønadskontoInneholderForMyeUttakKunSøkerTest } from './tester/stønadskontoInneholderForMyeUttakKunSøkerTest';\nimport { harFarMedmorSøktUgyldigUttakEllerUtsettelseFørsteSeksUkerTest } from './tester/harFarMedmorSøktUgyldigUttakEllerUtsettelseFørsteSeksUkerTest';\nimport { erUttaksplanBareOppholdTest } from './tester/erUttaksplanBareOppholdTest';\nimport { slutterUttaksplanMedOppholdTest } from './tester/slutterUttaksplanMedOppholdTest';\nimport { starterUttaksplanMedOppholdTest } from './tester/starterUttaksplanMedOppholdTest';\nimport { erUttaksplanGraderingStørreEnnSamtidigUttakTest } from './tester/erUttaksplanGraderingStørreEnnSamtidigUttakTest';\nimport { erTilleggsopplysningerGyldigTest } from './tester/erTilleggsopplysningerGyldigTest';\nimport { harTilleggsopplysningerGyldigeCharsTest } from './tester/harTilleggsopplysningerGyldigeCharsTest';\nimport { harUttaksplanForMangeFlerbarnsdagerTest } from './tester/harUttaksplanForMangeFlerbarnsdagerTest';\nimport { inneholderUttaksplanDatoSomIkkeErUttaksdag } from './tester/inneholderUttaksplanDatoSomIkkeErUttaksdagTest';\nimport { harPerioderManglendeVedleggTest } from './tester/harPerioderManglendeVedleggTest';\nimport { inneholderSenUtsettelsePgaFerieTest } from './tester/inneholderSenUtsettelsePgaFerieTest';\nimport { inneholderTapteDagerTest } from './tester/inneholderTapteDagerTest';\nimport { inneholderBareUtsettelserTest } from './tester/inneholderBareUtsettelserTest';\nimport { inneholderSenUtsettelsePgaArbeidTest } from './tester/inneholderSenUtsettelsePgaArbeidTest';\nimport { overskriverEndringerAnnenPartsPerioder } from './tester/overskriverEndringerAnnenPartsPerioder';\nimport { overlapperPeriodeAndrePerioder } from './tester/overlapperPeriodeAndrePerioderTest';\nimport periodevalideringsregler, { PeriodeValiderRegelKey } from './tester/periodevalideringstester';\nimport { harSøktOmFerieUtenArbeidsforhold } from './tester/harSøktOmFerieUtenArbeidsforholdTest';\nimport { inneholderForMyeFerie } from './tester/inneholderForMyeFerie';\nimport { kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme } from './tester/kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme';\nimport { erUttaksmengdeForFarMedmorForHøyTest } from './tester/erUttaksmengdeForFarMedmorForHøyTest';\nimport { burdeKanskjeSøkeGraderingTest } from './tester/burdeKanskjeSøkeGraderingTest';\nimport { ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindatoTest } from './tester/ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindatoTest';\nimport { Regel, RegelAlvorlighet } from './utils/types/regelTypes';\nimport { inneholderPerioderUtenAktivitetskrav } from './tester/inneholderPerioderUtenAktivitetskrav';\nimport { inneholderUtsettelserUtenÅrsak } from './tester/inneholderUtsettelserUtenÅrsak';\nimport { farMedmorHarSøktUgyldigAntallDagerUttakRundtFødselTest } from './tester/farMedmorHarSøktUgyldigAntallDagerUttakRundtFødselTest';\nimport { harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUkerTest } from './tester/harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUkerTest';\nimport { farMedMorHarRettPåUttakRundtFødselTest } from './tester/farMedMorHarRettPåUttakRundtFødselTest';\nimport { farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest } from './tester/farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest';\nimport { inneholderUttaksperioderMedUbesvartGradering } from './tester/inneholderUttaksperioderMedUbesvartGradering';\nimport { inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest } from './tester/inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest';\nimport { farMedmorHarRettPåFlerbarnsdagerTest } from './tester/farMedmorHarRettPåFlerbarnsdagerTest';\nimport { overstigerMinsterettVedToTette } from './tester/overstigerMinsterettVedToTette';\nimport { harPerioderEtterFørsteStønadsdagNesteBarnDerToTette } from './tester/harPerioderEtterFørsteStønadsdagNesteBarnDerToTette';\nimport { førsteOktober2021ReglerGjelder } from '@navikt/fp-common';\n\nexport enum UttaksplanRegelKey {\n    'planenInneholderIngenPerioder' = 'planenInneholderIngenPerioder',\n    'morHarSøktUgyldigUttakFørsteSeksUker' = 'morHarSøktUgyldigUttakFørsteSeksUker',\n    'farMedmorHarSøktUgyldigUttakEllerUtsettelseFørsteSeksUker' = 'farMedmorHarSøktUgyldigUttakEllerUtsettelseFørsteSeksUker',\n    'farMedmorHarSøktUgyldigAntallDagerUttakRundtFødsel' = 'farMedmorHarSøktUgyldigAntallDagerUttakRundtFødsel',\n    'harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUker' = 'harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUker',\n    'farMedmorHarSøktUttakRundtFødselUtenforGyldigPeriode' = 'farMedmorHarSøktUttakRundtFødselUtenforGyldigPeriode',\n    'stønadskontoInneholderForMyeUttakKunSøker' = 'stønadskontoInneholderForMyeUttakKunSøker',\n    'uttaksplanErBareOpphold' = 'uttaksplanErBareOpphold',\n    'uttaksplanStarterMedOpphold' = 'uttaksplanStarterMedOpphold',\n    'uttaksplanSlutterMedOpphold' = 'uttaksplanSlutterMedOpphold',\n    'uttaksplanGraderingStørreEnnSamtidigUttak' = 'uttaksplanGraderingStørreEnnSamtidigUttak',\n    'begrunnelseVedForSenEndringErUgyldig' = 'begrunnelseVedForSenEndringErUgyldig',\n    'begrunnelseVedForSenEndringHarUgyldigeChars' = 'begrunnelseVedForSenEndringHarUgyldigeChars',\n    'uttaksplanHarForMangeFlerbarnsdager' = 'uttaksplanHarForMangeFlerbarnsdager',\n    'uttaksplanInneholderDatoSomIkkeErUttaksdag' = 'uttaksplanInneholderDatoSomIkkeErUttaksdag',\n    'perioderManglerVedlegg' = 'manglendeVedlegg',\n    'inneholderSenUtsettelsePgaFerie' = 'inneholderSenUtsettelsePgaFerieTest',\n    'inneholderSenUtsettelsePgaArbeid' = 'inneholderSenUtsettelsePgaArbeidTest',\n    'inneholderTapteDager' = 'inneholderTapteDager',\n    'inneholderBareUtsettelser' = 'inneholderBareUtsettelser',\n    'inneholderForMyeFerie' = 'inneholderForMyeFerie',\n    'endringerOverskriverAnnenPartsPerioder' = 'endringerOverskriverAnnenPartsPerioder',\n    'periodeOverlapperAndrePerioder' = 'periodeOverlapperAndrePerioder',\n    'harSøktOmFerieUtenArbeidsforhold' = 'harSøktOmFerieUtenArbeidsforhold',\n    'kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme' = 'kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme',\n    'uttaksmengdeForFarMedmorErForHøy' = 'uttaksmengdeForFarMedmorErForHøy',\n    'burdeKanskjeSøkeGradering' = 'burdeKanskjeSøkeGradering',\n    'ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindato' = 'ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindato',\n    'inneholderPerioderUtenAktivitetskrav' = 'inneholderPerioderUtenAktivitetskrav',\n    'inneholderUtsettelserUtenÅrsak' = 'inneholderUtsettelserUtenÅrsak',\n    'farMedMorHarRettPåUttakRundtFødsel' = 'farMedMorHarRettPåUttakRundtFødsel',\n    'farMedmorHarRettPåForeldrepengerUtenAktivitetskrav' = 'farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest',\n    'farMedmorHarRettPåFlerbarnsdager' = 'farMedmorHarRettPåFlerbarnsdagerTest',\n    'inneholderUttaksperioderMedUbesvartGradering' = 'inneholderUttaksperioderMedUbesvartGradering',\n    'inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest' = 'inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest',\n    'overstigerMinsterettVedToTette' = 'overstigerMinsterettVedToTette',\n    'harPerioderEtterFørsteStønadsdagNesteBarnDerToTette' = 'harPerioderEtterFørsteStønadsdagNesteBarnDerToTette',\n}\n\nexport type RegelKey = UttaksplanRegelKey | PeriodeValiderRegelKey;\n\nconst uttaksplanValideringRegler = (familiehendelsesdato: Date): Regel[] => [\n    {\n        key: UttaksplanRegelKey.planenInneholderIngenPerioder,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderUttaksplanPerioderTest,\n    },\n    {\n        key: UttaksplanRegelKey.stønadskontoInneholderForMyeUttakKunSøker,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: stønadskontoInneholderForMyeUttakKunSøkerTest,\n    },\n    {\n        key: UttaksplanRegelKey.morHarSøktUgyldigUttakFørsteSeksUker,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harMorSøktUgyldigUttakFørsteSeksUkerTest,\n    },\n    {\n        key: UttaksplanRegelKey.farMedmorHarSøktUgyldigUttakEllerUtsettelseFørsteSeksUker,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harFarMedmorSøktUgyldigUttakEllerUtsettelseFørsteSeksUkerTest,\n    },\n    {\n        key: UttaksplanRegelKey.farMedmorHarSøktUgyldigAntallDagerUttakRundtFødsel,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: farMedmorHarSøktUgyldigAntallDagerUttakRundtFødselTest,\n    },\n    {\n        key: UttaksplanRegelKey.harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUker,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUkerTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksmengdeForFarMedmorErForHøy,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: erUttaksmengdeForFarMedmorForHøyTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksplanErBareOpphold,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: erUttaksplanBareOppholdTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksplanStarterMedOpphold,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: starterUttaksplanMedOppholdTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksplanSlutterMedOpphold,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: slutterUttaksplanMedOppholdTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksplanGraderingStørreEnnSamtidigUttak,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: erUttaksplanGraderingStørreEnnSamtidigUttakTest,\n    },\n    {\n        key: UttaksplanRegelKey.begrunnelseVedForSenEndringErUgyldig,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: erTilleggsopplysningerGyldigTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksplanHarForMangeFlerbarnsdager,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harUttaksplanForMangeFlerbarnsdagerTest,\n    },\n    {\n        key: UttaksplanRegelKey.begrunnelseVedForSenEndringHarUgyldigeChars,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harTilleggsopplysningerGyldigeCharsTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksplanInneholderDatoSomIkkeErUttaksdag,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderUttaksplanDatoSomIkkeErUttaksdag,\n    },\n    {\n        key: UttaksplanRegelKey.perioderManglerVedlegg,\n        alvorlighet: RegelAlvorlighet.ADVARSEL,\n        test: harPerioderManglendeVedleggTest,\n        slåsSammenVedOppsummering: true,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderSenUtsettelsePgaFerie,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: inneholderSenUtsettelsePgaFerieTest,\n        slåsSammenVedOppsummering: true,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderSenUtsettelsePgaArbeid,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: inneholderSenUtsettelsePgaArbeidTest,\n        slåsSammenVedOppsummering: true,\n    },\n    {\n        key: UttaksplanRegelKey.farMedMorHarRettPåUttakRundtFødsel,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: farMedMorHarRettPåUttakRundtFødselTest,\n        skjulesIPeriode: true,\n    },\n    {\n        key: UttaksplanRegelKey.farMedmorHarRettPåForeldrepengerUtenAktivitetskrav,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest,\n        skjulesIPeriode: true,\n    },\n    {\n        key: UttaksplanRegelKey.farMedmorHarRettPåFlerbarnsdager,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: farMedmorHarRettPåFlerbarnsdagerTest,\n        skjulesIPeriode: true,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderTapteDager,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: inneholderTapteDagerTest,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderBareUtsettelser,\n        alvorlighet: førsteOktober2021ReglerGjelder(familiehendelsesdato)\n            ? RegelAlvorlighet.FEIL\n            : RegelAlvorlighet.INFO,\n        test: inneholderBareUtsettelserTest,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderForMyeFerie,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderForMyeFerie,\n    },\n    {\n        key: UttaksplanRegelKey.endringerOverskriverAnnenPartsPerioder,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: overskriverEndringerAnnenPartsPerioder,\n        slåsSammenVedOppsummering: false,\n    },\n    {\n        key: UttaksplanRegelKey.periodeOverlapperAndrePerioder,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: overlapperPeriodeAndrePerioder,\n        slåsSammenVedOppsummering: false,\n        skjulesIOppsummering: true,\n    },\n    {\n        key: UttaksplanRegelKey.harSøktOmFerieUtenArbeidsforhold,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harSøktOmFerieUtenArbeidsforhold,\n    },\n    {\n        key: UttaksplanRegelKey.kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme,\n    },\n    {\n        key: UttaksplanRegelKey.burdeKanskjeSøkeGradering,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: burdeKanskjeSøkeGraderingTest,\n    },\n    {\n        key: UttaksplanRegelKey.ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindato,\n        alvorlighet: RegelAlvorlighet.ADVARSEL,\n        test: ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindatoTest,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderPerioderUtenAktivitetskrav,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderPerioderUtenAktivitetskrav,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderUttaksperioderMedUbesvartGradering,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderUttaksperioderMedUbesvartGradering,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderUtsettelserUtenÅrsak,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderUtsettelserUtenÅrsak,\n    },\n    {\n        key: UttaksplanRegelKey.overstigerMinsterettVedToTette,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: overstigerMinsterettVedToTette,\n    },\n    {\n        key: UttaksplanRegelKey.harPerioderEtterFørsteStønadsdagNesteBarnDerToTette,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: harPerioderEtterFørsteStønadsdagNesteBarnDerToTette,\n    },\n];\n\nconst uttaksplanRegler = (familiehendelsesDato: Date) => [\n    ...uttaksplanValideringRegler(familiehendelsesDato),\n    ...periodevalideringsregler,\n];\n\nexport default uttaksplanRegler;\n","import { groupBy } from 'lodash';\nimport uttaksplanRegler from '.';\nimport { getRegelAvvik, hasRegelFeil, regelHarAvvik, regelPasserer } from './utils/regelUtils';\nimport { RegelStatus, UttaksplanRegelTestresultat } from './utils/types/regelTypes';\nimport { Søknadsinfo } from '@navikt/fp-common';\n\nconst REGEL_INTL_PREFIX = 'uttaksplan.validering';\n\nexport const sjekkUttaksplanOppMotRegler = (valideringsgrunnlag: Søknadsinfo): RegelStatus[] => {\n    return uttaksplanRegler(valideringsgrunnlag.familiehendelsesdato).map((regel) => {\n        const resultat = regel.test(valideringsgrunnlag);\n        return resultat.passerer\n            ? regelPasserer(regel)\n            : regelHarAvvik(regel, REGEL_INTL_PREFIX, resultat.info, resultat.periodeId);\n    });\n};\n\nexport const validerUttaksplan = (søknadsinfo: Søknadsinfo): UttaksplanRegelTestresultat => {\n    const resultat = sjekkUttaksplanOppMotRegler(søknadsinfo);\n\n    const avvik = getRegelAvvik(resultat);\n    const avvikPerPeriode = groupBy(\n        avvik.filter((a) => a.periodeId !== undefined),\n        (r) => r.periodeId,\n    );\n\n    const harFeil = hasRegelFeil(avvik);\n    return {\n        resultat,\n        avvik,\n        avvikPerPeriode,\n        harFeil,\n    };\n};\n","import * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { VeilederMessage } from './types';\nimport VeilederMeldinger from './VeilederMeldinger';\nimport { GuidePanel } from '@navikt/ds-react';\nimport AriaText from '../../components/aria-text/AriaText';\n\ninterface Props {\n    messages: VeilederMessage[];\n    ariaTittel?: string;\n    skjulMeldingIkon?: boolean;\n}\n\nconst VeilederInfo: React.FunctionComponent<Props> = ({ messages, skjulMeldingIkon = false, ariaTittel }) => {\n    return (\n        <GuidePanel poster>\n            {ariaTittel && (\n                <AriaText tag=\"h2\">\n                    <FormattedMessage id=\"uttaksplan.regelAvvik.ariaTittel\" />\n                </AriaText>\n            )}\n            <VeilederMeldinger meldinger={messages} stil=\"transparent\" skjulMeldingIkon={skjulMeldingIkon} />\n        </GuidePanel>\n    );\n};\n\nexport default VeilederInfo;\n","import { VeiledermeldingerPerPeriode, VeilederMessage } from './types';\nimport { IntlShape } from 'react-intl';\nimport { RegelAvvik } from '../utils/types/regelTypes';\nimport { getRegelIntlValues, trimRelaterteRegelAvvik } from '../utils/regelUtils';\nimport { UttaksplanAvvikType } from '../utils/types/UttaksplanAvvikType';\nimport { groupBy } from 'lodash';\nimport { intlHasKey } from '@navikt/fp-common/src/common/utils/intlUtils';\n\nexport const veilederMessageAvsnitt = (\n    førsteTekst: VeilederMessage[],\n    andreTekst: VeilederMessage[],\n    visInfoOmPrematuruker: boolean,\n): VeilederMessage[] => {\n    return visInfoOmPrematuruker === false ? førsteTekst : førsteTekst.concat(andreTekst);\n};\n\nconst mapAvvikTilMessage = (avvik: RegelAvvik, intl: IntlShape): VeilederMessage => {\n    const { info } = avvik;\n    const tittelIntlKey = `${info.intlKey}.tittel`;\n    const harTittel = intlHasKey(intl, tittelIntlKey);\n    return {\n        type: avvik.regel.alvorlighet,\n        contentIntlKey: info.intlKey,\n        titleIntlKey: harTittel ? tittelIntlKey : undefined,\n        formatContentAsHTML: info.renderAsHtml,\n        values: getRegelIntlValues(intl, info),\n        periodeId: avvik.regel.skjulesIPeriode !== true ? avvik.periodeId : undefined,\n        skjulesIOppsummering: avvik.regel.skjulesIOppsummering,\n        avvikType: avvik.regel.avvikType as UttaksplanAvvikType,\n    };\n};\n\nexport const getUttaksplanVeilederinfo = (\n    avvik: RegelAvvik[],\n    intl: IntlShape,\n    grupperAvvik: boolean,\n): VeilederMessage[] => {\n    return trimRelaterteRegelAvvik(avvik, grupperAvvik).map((a) => mapAvvikTilMessage(a, intl));\n};\n\nexport const getPeriodelisteMeldinger = (veilederinfo: VeilederMessage[]): VeiledermeldingerPerPeriode => {\n    const meldinger = veilederinfo.filter((info) => info.periodeId !== undefined);\n    return groupBy(meldinger, (info) => info.periodeId);\n};\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */\nfunction throttle(func, wait, options) {\n  var leading = true,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, {\n    'leading': leading,\n    'maxWait': wait,\n    'trailing': trailing\n  });\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = throttle;\n","import throttle from 'lodash.throttle';\nimport { injectIntl, IntlShape } from 'react-intl';\nimport { Attachment, Block, intlUtils } from '@navikt/fp-common';\nimport { BodyLong, Label, ReadMore, Textarea } from '@navikt/ds-react';\nimport { ChangeEvent, Component } from 'react';\nimport { tilleggsopplysningerMaxLength } from '../../validering/tester/erTilleggsopplysningerGyldigTest';\n\ninterface OwnProps {\n    begrunnelse?: string;\n    vedlegg?: Attachment[];\n    onBegrunnelseTekstChange: (begrunnelse: string) => void;\n    intl: IntlShape;\n}\n\ntype Props = OwnProps;\n\ninterface State {\n    begrunnelse: string;\n}\n\nconst getLabel = (intl: IntlShape) => {\n    return (\n        <>\n            <Label>{intlUtils(intl, 'uttaksplan.tilleggsopplysninger.label')}</Label>\n        </>\n    );\n};\n\nexport type TextareaChangeEvent = ChangeEvent<HTMLTextAreaElement>;\n\nclass OppgiTilleggsopplysninger extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            begrunnelse: this.props.begrunnelse || '',\n        };\n\n        this.throttledOnChange = throttle(this.throttledOnChange, 2000);\n    }\n\n    throttledOnChange = () => {\n        this.props.onBegrunnelseTekstChange(this.state.begrunnelse);\n    };\n\n    handleBegrunnelseChange = (e: TextareaChangeEvent) => {\n        this.setState(\n            {\n                begrunnelse: e.target.value,\n            },\n            this.throttledOnChange,\n        );\n    };\n\n    render() {\n        const { intl } = this.props;\n\n        return (\n            <div className=\"blokk-m\">\n                <Block margin=\"l\" padBottom=\"xl\">\n                    <Textarea\n                        value={this.state.begrunnelse}\n                        maxLength={tilleggsopplysningerMaxLength}\n                        name=\"begrunnelseForSenEndring\"\n                        label={getLabel(intl)}\n                        onChange={this.handleBegrunnelseChange}\n                    />\n                    <ReadMore header={intlUtils(intl, 'uttaksplan.tilleggsopplysninger.apneLabel')}>\n                        <div style={{ backgroundColor: '#e9e7e7', padding: '1.5rem' }}>\n                            <Block margin=\"s\">\n                                <Label>\n                                    {intlUtils(intl, 'uttaksplan.tilleggsopplysninger.sykdomTilbakeITid.overskrift')}\n                                </Label>\n                                <BodyLong>\n                                    {intlUtils(intl, 'uttaksplan.tilleggsopplysninger.sykdomTilbakeITid')}\n                                </BodyLong>\n                            </Block>\n                            <Block margin=\"s\">\n                                <Label>{intlUtils(intl, 'uttaksplan.tilleggsopplysninger.uttak.overskrift')}</Label>\n                                <BodyLong>{intlUtils(intl, 'uttaksplan.tilleggsopplysninger.uttak')}</BodyLong>\n                            </Block>\n                            <Block margin=\"s\">\n                                <Label>\n                                    {intlUtils(\n                                        intl,\n                                        'uttaksplan.tilleggsopplysninger.utsettelsearbeidellergradering.overskrift',\n                                    )}\n                                </Label>\n                                <BodyLong>\n                                    {intlUtils(intl, 'uttaksplan.tilleggsopplysninger.utsettelsearbeidellergradering')}\n                                </BodyLong>\n                            </Block>\n                            <Label>{intlUtils(intl, 'uttaksplan.tilleggsopplysninger.sykdom.overskrift')}</Label>\n                            <BodyLong>{intlUtils(intl, 'uttaksplan.tilleggsopplysninger.sykdom')}</BodyLong>\n                        </div>\n                    </ReadMore>\n                </Block>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(OppgiTilleggsopplysninger);\n","import { FunctionComponent } from 'react';\nimport { bemUtils, Block } from '@navikt/fp-common';\nimport { FormattedMessage } from 'react-intl';\nimport { BodyShort, Button, Heading, Modal } from '@navikt/ds-react';\n\nimport './slettUttaksplanModal.less';\n\ninterface Props {\n    isOpen: boolean;\n    erEndringssøknad: boolean;\n    onClose: () => void;\n    handleSlettUttaksplanModalBekreft: () => void;\n}\n\nconst SlettUttaksplanModal: FunctionComponent<Props> = ({\n    isOpen,\n    erEndringssøknad,\n    onClose,\n    handleSlettUttaksplanModalBekreft,\n}) => {\n    const bem = bemUtils('slettUttaksplanModal');\n\n    let innhold1Id = 'uttaksplan.slettPlan.innhold1.førstegangssøknad';\n    let innhold2Id = 'uttaksplan.slettPlan.innhold2.førstegangssøknad';\n    if (erEndringssøknad) {\n        innhold1Id = 'uttaksplan.slettPlan.innhold1.endringssøknad';\n        innhold2Id = 'uttaksplan.slettPlan.innhold2.endringssøknad';\n    }\n\n    return (\n        <Modal\n            className={bem.block}\n            open={isOpen}\n            closeButton={true}\n            onClose={onClose}\n            aria-label=\"Slett uttaksplanen din\"\n        >\n            <div className={bem.element('content')}>\n                <Block padBottom=\"l\">\n                    <Heading size=\"small\">\n                        <FormattedMessage id=\"uttaksplan.slettPlan.modal.tittel\" />\n                    </Heading>\n                    <BodyShort>\n                        <FormattedMessage id={innhold1Id} />\n                    </BodyShort>\n                    <br />\n                    <BodyShort>\n                        <FormattedMessage id={innhold2Id} />\n                    </BodyShort>\n                </Block>\n                <div className={bem.element('knappWrapper')}>\n                    <Button onClick={handleSlettUttaksplanModalBekreft}>\n                        <FormattedMessage id=\"uttaksplan.slettPlan.slett\" />\n                    </Button>\n                    <Button variant=\"secondary\" onClick={onClose}>\n                        <FormattedMessage id=\"uttaksplan.slettPlan.avbryt\" />\n                    </Button>\n                </div>\n            </div>\n        </Modal>\n    );\n};\n\nexport default SlettUttaksplanModal;\n","import { Periode } from '@navikt/fp-common';\nimport { getPeriodeHullEllerPeriodeUtenUttak } from './uttaksplanbuilderUtils';\n\ninterface SlettPeriodeParams {\n    perioder: Periode[];\n    slettetPeriode: Periode;\n    familiehendelsesdato: Date;\n    harAktivitetskravIPeriodeUtenUttak: boolean;\n    erAdopsjon: boolean;\n    bareFarHarRett: boolean;\n    erFarEllerMedmor: boolean;\n    førsteUttaksdagNesteBarnsSak: Date | undefined;\n}\n\nexport const slettPeriode = ({\n    perioder,\n    slettetPeriode,\n    familiehendelsesdato,\n    harAktivitetskravIPeriodeUtenUttak,\n    erAdopsjon,\n    bareFarHarRett,\n    erFarEllerMedmor,\n    førsteUttaksdagNesteBarnsSak,\n}: SlettPeriodeParams): Periode[] => {\n    const result: Periode[] = perioder.reduce((res, periode, index) => {\n        if (index === 0 && periode.id === slettetPeriode.id) {\n            return res;\n        }\n\n        if (periode.id === slettetPeriode.id) {\n            res.push(\n                ...getPeriodeHullEllerPeriodeUtenUttak(\n                    slettetPeriode.tidsperiode,\n                    harAktivitetskravIPeriodeUtenUttak,\n                    familiehendelsesdato,\n                    erAdopsjon,\n                    bareFarHarRett,\n                    erFarEllerMedmor,\n                    førsteUttaksdagNesteBarnsSak,\n                ),\n            );\n            return res;\n        }\n\n        res.push(periode);\n        return res;\n    }, [] as Periode[]);\n\n    return result;\n};\n","import { Periode } from '@navikt/fp-common';\nimport { leggTilPeriode } from './leggTilPeriode';\nimport { slettPeriode } from './slettPeriode';\nimport { slåSammenLikePerioder } from './uttaksplanbuilderUtils';\n\ninterface OppdaterPeriodeParams {\n    perioder: Periode[];\n    endretPeriode: Periode;\n    originalPeriode: Periode;\n    familiehendelsesdato: Date;\n    harAktivitetskravIPeriodeUtenUttak: boolean;\n    erAdopsjon: boolean;\n    bareFarHarRett: boolean;\n    erFarEllerMedmor: boolean;\n    annenPartsUttak: Periode[] | undefined;\n    førsteUttaksdagNesteBarnsSak: Date | undefined;\n}\n\nexport const oppdaterPeriode = ({\n    perioder,\n    endretPeriode,\n    originalPeriode,\n    familiehendelsesdato,\n    harAktivitetskravIPeriodeUtenUttak,\n    erAdopsjon,\n    bareFarHarRett,\n    erFarEllerMedmor,\n    annenPartsUttak,\n    førsteUttaksdagNesteBarnsSak,\n}: OppdaterPeriodeParams): Periode[] => {\n    const perioderSlettetEndretPeriode = slåSammenLikePerioder(\n        slettPeriode({\n            perioder,\n            slettetPeriode: originalPeriode,\n            familiehendelsesdato,\n            harAktivitetskravIPeriodeUtenUttak,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak,\n        }),\n        familiehendelsesdato,\n        førsteUttaksdagNesteBarnsSak,\n        annenPartsUttak,\n    );\n\n    return slåSammenLikePerioder(\n        leggTilPeriode({\n            perioder: perioderSlettetEndretPeriode,\n            nyPeriode: endretPeriode,\n            familiehendelsesdato,\n            harAktivitetskravIPeriodeUtenUttak,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak,\n        }),\n        familiehendelsesdato,\n        førsteUttaksdagNesteBarnsSak,\n        annenPartsUttak,\n    );\n};\n","import { leggTilPeriode } from './leggTilPeriode';\nimport { oppdaterPeriode } from './oppdaterPeriode';\nimport { slettPeriode } from './slettPeriode';\nimport {\n    finnOgSettInnHull,\n    fjernUnødvendigeHull,\n    settInnAnnenPartsUttak,\n    slåSammenLikePerioder,\n} from './uttaksplanbuilderUtils';\nimport {\n    Periode,\n    isForeldrepengerFørFødselUttaksperiode,\n    isInfoPeriodeAnnenPart,\n    isUtsettelsesperiode,\n    starterUttaksperiodeFørFødsel,\n} from '@navikt/fp-common';\n\nconst leggTilPeriodeOgBuild = (\n    bevegeligePerioder: Periode[],\n    fastePerioder: Periode[],\n    nyPeriode: Periode,\n    familiehendelsesdato: Date,\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    annenPartsUttak: Periode[] | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n) => {\n    let nyePerioder = slåSammenLikePerioder(\n        leggTilPeriode({\n            perioder: bevegeligePerioder,\n            nyPeriode,\n            familiehendelsesdato,\n            harAktivitetskravIPeriodeUtenUttak,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak,\n        }),\n        familiehendelsesdato,\n        førsteUttaksdagNesteBarnsSak,\n    );\n\n    fastePerioder.forEach((fastPeriode) => {\n        nyePerioder = leggTilPeriode({\n            perioder: nyePerioder,\n            nyPeriode: fastPeriode,\n            familiehendelsesdato,\n            harAktivitetskravIPeriodeUtenUttak,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak,\n        });\n    });\n\n    if (annenPartsUttak) {\n        nyePerioder = finnOgSettInnHull(\n            settInnAnnenPartsUttak(nyePerioder, annenPartsUttak, familiehendelsesdato, førsteUttaksdagNesteBarnsSak),\n            harAktivitetskravIPeriodeUtenUttak,\n            familiehendelsesdato,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak,\n        );\n    }\n\n    return nyePerioder;\n};\n\nconst oppdaterPeriodeOgBuild = (\n    endretPeriode: Periode,\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    annenPartsUttak: Periode[] | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n) => {\n    const originalPeriode = perioder.find((p) => p.id === endretPeriode.id)!;\n\n    let oppdatertePerioder = fjernUnødvendigeHull(\n        oppdaterPeriode({\n            perioder,\n            endretPeriode,\n            originalPeriode,\n            familiehendelsesdato,\n            harAktivitetskravIPeriodeUtenUttak,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            annenPartsUttak,\n            førsteUttaksdagNesteBarnsSak,\n        }),\n    );\n\n    if (annenPartsUttak) {\n        oppdatertePerioder = finnOgSettInnHull(\n            oppdatertePerioder,\n            harAktivitetskravIPeriodeUtenUttak,\n            familiehendelsesdato,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak,\n        );\n        oppdatertePerioder = settInnAnnenPartsUttak(\n            oppdatertePerioder,\n            annenPartsUttak,\n            familiehendelsesdato,\n            førsteUttaksdagNesteBarnsSak,\n        );\n    }\n\n    return finnOgSettInnHull(\n        oppdatertePerioder,\n        harAktivitetskravIPeriodeUtenUttak,\n        familiehendelsesdato,\n        erAdopsjon,\n        bareFarHarRett,\n        erFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak,\n    );\n};\n\nconst slettPeriodeOgBuild = (\n    perioder: Periode[],\n    slettetPeriode: Periode,\n    familiehendelsesdato: Date,\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    annenPartsUttak: Periode[] | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n) => {\n    let nyePerioder = fjernUnødvendigeHull(\n        slåSammenLikePerioder(\n            slettPeriode({\n                perioder,\n                slettetPeriode,\n                familiehendelsesdato,\n                harAktivitetskravIPeriodeUtenUttak,\n                erAdopsjon,\n                bareFarHarRett,\n                erFarEllerMedmor,\n                førsteUttaksdagNesteBarnsSak,\n            }),\n            familiehendelsesdato,\n            førsteUttaksdagNesteBarnsSak,\n        ),\n    );\n\n    if (annenPartsUttak) {\n        nyePerioder = finnOgSettInnHull(\n            nyePerioder,\n            harAktivitetskravIPeriodeUtenUttak,\n            familiehendelsesdato,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak,\n        );\n        nyePerioder = settInnAnnenPartsUttak(\n            nyePerioder,\n            annenPartsUttak,\n            familiehendelsesdato,\n            førsteUttaksdagNesteBarnsSak,\n        );\n    }\n\n    return finnOgSettInnHull(\n        nyePerioder,\n        harAktivitetskravIPeriodeUtenUttak,\n        familiehendelsesdato,\n        erAdopsjon,\n        bareFarHarRett,\n        erFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak,\n    );\n};\n\nconst getFastePerioder = (perioder: Periode[], familiehendelsesdato: Date): Periode[] => {\n    return perioder.filter(\n        (p) =>\n            isUtsettelsesperiode(p) ||\n            isForeldrepengerFørFødselUttaksperiode(p) ||\n            starterUttaksperiodeFørFødsel(p, familiehendelsesdato),\n    );\n};\n\nconst getBevegeligePerioder = (\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n): Periode[] => {\n    return finnOgSettInnHull(\n        perioder.filter(\n            (p) =>\n                !isUtsettelsesperiode(p) &&\n                !isForeldrepengerFørFødselUttaksperiode(p) &&\n                !starterUttaksperiodeFørFødsel(p, familiehendelsesdato) &&\n                !isInfoPeriodeAnnenPart(p),\n        ),\n        harAktivitetskravIPeriodeUtenUttak,\n        familiehendelsesdato,\n        erAdopsjon,\n        bareFarHarRett,\n        erFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak,\n    );\n};\n\nconst getAnnenPartsUttak = (perioder: Periode[]): Periode[] => {\n    return perioder.filter((p) => isInfoPeriodeAnnenPart(p));\n};\n\nconst Uttaksplanbuilder = (\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n    opprinneligPlan?: Periode[],\n) => {\n    const perioderUtenAnnenPart = finnOgSettInnHull(\n        perioder.filter((p) => !isInfoPeriodeAnnenPart(p)),\n        harAktivitetskravIPeriodeUtenUttak,\n        familiehendelsesdato,\n        erAdopsjon,\n        bareFarHarRett,\n        erFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak,\n    );\n    const fastePerioder = getFastePerioder(perioderUtenAnnenPart, familiehendelsesdato);\n    const bevegeligePerioder = getBevegeligePerioder(\n        perioderUtenAnnenPart,\n        familiehendelsesdato,\n        harAktivitetskravIPeriodeUtenUttak,\n        erAdopsjon,\n        bareFarHarRett,\n        erFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak,\n    );\n    let annenPartsUttak: Periode[] | undefined = undefined;\n\n    if (opprinneligPlan) {\n        annenPartsUttak = getAnnenPartsUttak(opprinneligPlan);\n    }\n\n    return {\n        leggTilPeriode: (nyPeriode: Periode) =>\n            leggTilPeriodeOgBuild(\n                bevegeligePerioder,\n                fastePerioder,\n                nyPeriode,\n                familiehendelsesdato,\n                harAktivitetskravIPeriodeUtenUttak,\n                erAdopsjon,\n                bareFarHarRett,\n                erFarEllerMedmor,\n                annenPartsUttak,\n                førsteUttaksdagNesteBarnsSak,\n            ),\n        leggTilPerioder: (nyePerioder: Periode[]) => {\n            let resultat: Periode[] = [];\n            nyePerioder.forEach((periode, index) => {\n                if (index === 0) {\n                    resultat = leggTilPeriodeOgBuild(\n                        bevegeligePerioder,\n                        fastePerioder,\n                        periode,\n                        familiehendelsesdato,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        annenPartsUttak,\n                        førsteUttaksdagNesteBarnsSak,\n                    );\n                } else {\n                    const nyAnnenPartsUttak = getAnnenPartsUttak(resultat);\n                    const nyFastePerioder = getFastePerioder(resultat, familiehendelsesdato);\n                    const nyBevegeligePerioder = getBevegeligePerioder(\n                        resultat,\n                        familiehendelsesdato,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        førsteUttaksdagNesteBarnsSak,\n                    );\n                    resultat = leggTilPeriodeOgBuild(\n                        nyBevegeligePerioder,\n                        nyFastePerioder,\n                        periode,\n                        familiehendelsesdato,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        nyAnnenPartsUttak,\n                        førsteUttaksdagNesteBarnsSak,\n                    );\n                }\n            });\n            return resultat;\n        },\n        oppdaterPeriode: (endretPeriode: Periode) =>\n            oppdaterPeriodeOgBuild(\n                endretPeriode,\n                perioderUtenAnnenPart,\n                familiehendelsesdato,\n                harAktivitetskravIPeriodeUtenUttak,\n                erAdopsjon,\n                bareFarHarRett,\n                erFarEllerMedmor,\n                annenPartsUttak,\n                førsteUttaksdagNesteBarnsSak,\n            ),\n        oppdaterPerioder: (oppdatertePerioder: Periode[]) => {\n            let resultat: Periode[] = [];\n            oppdatertePerioder.forEach((endretPeriode, index) => {\n                if (index === 0) {\n                    resultat = oppdaterPeriodeOgBuild(\n                        endretPeriode,\n                        perioderUtenAnnenPart,\n                        familiehendelsesdato,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        annenPartsUttak,\n                        førsteUttaksdagNesteBarnsSak,\n                    );\n                } else {\n                    const nyAnnenPartsUttak = getAnnenPartsUttak(resultat);\n                    const nyFastePerioder = getFastePerioder(resultat, familiehendelsesdato);\n                    const nyBevegeligePerioder = getBevegeligePerioder(\n                        resultat,\n                        familiehendelsesdato,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        førsteUttaksdagNesteBarnsSak,\n                    );\n                    resultat = leggTilPeriodeOgBuild(\n                        nyBevegeligePerioder,\n                        nyFastePerioder,\n                        endretPeriode,\n                        familiehendelsesdato,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        nyAnnenPartsUttak,\n                        førsteUttaksdagNesteBarnsSak,\n                    );\n                }\n            });\n            return resultat;\n        },\n        slettPeriode: (slettetPeriode: Periode) =>\n            slettPeriodeOgBuild(\n                perioderUtenAnnenPart,\n                slettetPeriode,\n                familiehendelsesdato,\n                harAktivitetskravIPeriodeUtenUttak,\n                erAdopsjon,\n                bareFarHarRett,\n                erFarEllerMedmor,\n                annenPartsUttak,\n                førsteUttaksdagNesteBarnsSak,\n            ),\n    };\n};\n\nexport default Uttaksplanbuilder;\n","import { FunctionComponent } from 'react';\nimport { bemUtils, Block } from '@navikt/fp-common';\nimport { FormattedMessage } from 'react-intl';\nimport { BodyShort, Button, Heading, Modal } from '@navikt/ds-react';\n\nimport './resetUttaksplanModal.less';\n\ninterface Props {\n    isOpen: boolean;\n    onClose: () => void;\n    handleResetUttaksplanModalBekreft: () => void;\n}\n\nconst ResetUttaksplanModal: FunctionComponent<Props> = ({ isOpen, onClose, handleResetUttaksplanModalBekreft }) => {\n    const bem = bemUtils('resetUttaksplanModal');\n\n    return (\n        <Modal\n            className={bem.block}\n            open={isOpen}\n            closeButton={true}\n            onClose={onClose}\n            aria-label=\"Tilbakestill uttaksplanen din\"\n        >\n            <div className={bem.element('content')}>\n                <Block padBottom=\"l\">\n                    <Heading size=\"small\">\n                        <FormattedMessage id=\"uttaksplan.resetPlan.innhold1\" />\n                    </Heading>\n                    <BodyShort>\n                        <FormattedMessage id=\"uttaksplan.resetPlan.innhold2\" />\n                    </BodyShort>\n                </Block>\n                <div className={bem.element('knappWrapper')}>\n                    <Button onClick={handleResetUttaksplanModalBekreft}>\n                        <FormattedMessage id=\"uttaksplan.resetPlan.slett\" />\n                    </Button>\n                    <Button variant=\"secondary\" onClick={onClose}>\n                        <FormattedMessage id=\"uttaksplan.resetPlan.avbryt\" />\n                    </Button>\n                </div>\n            </div>\n        </Modal>\n    );\n};\n\nexport default ResetUttaksplanModal;\n","import { Periode, isUttaksperiode } from '@navikt/fp-common';\n\ninterface HarAktivitetskravIPeriodeUtenUttakParams {\n    erDeltUttak: boolean;\n    morHarRett: boolean;\n    søkerErAleneOmOmsorg: boolean;\n}\n\nexport const getHarAktivitetskravIPeriodeUtenUttak = ({\n    erDeltUttak,\n    morHarRett,\n    søkerErAleneOmOmsorg,\n}: HarAktivitetskravIPeriodeUtenUttakParams) => {\n    return !erDeltUttak && !morHarRett && !søkerErAleneOmOmsorg;\n};\n\nexport const uttaksplanInneholderPerioderUtenKonto = (uttaksplan: Periode[]): boolean => {\n    return uttaksplan.find((periode) => isUttaksperiode(periode) && periode.konto === undefined) !== undefined;\n};\n","import { FunctionComponent, useEffect, useState } from 'react';\nimport {\n    AnnenForelder,\n    Arbeidsforhold,\n    Attachment,\n    Barn,\n    BarnFraNesteSak,\n    Block,\n    Dekningsgrad,\n    EksisterendeSak,\n    Forelder,\n    ForeldreparSituasjon,\n    ISOStringToDate,\n    Periode,\n    SenEndringÅrsak,\n    Situasjon,\n    Søkersituasjon,\n    TilgjengeligStønadskonto,\n    Tilleggsopplysninger,\n    Utsettelsesperiode,\n    Uttaksperiode,\n    farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato,\n    getSeneEndringerSomKreverBegrunnelse,\n    getToTetteReglerGjelder,\n    intlUtils,\n    isAnnenForelderOppgitt,\n    isAnnenPartInfoPeriode,\n    isUtsettelsesperiode,\n    tidperiodeOverlapperDato,\n    NavnPåForeldre,\n} from '@navikt/fp-common';\nimport Planlegger from './components/planlegger/Planlegger';\nimport OversiktKvoter from './components/oversikt-kvoter/OversiktKvoter';\nimport { validerUttaksplan } from './validering/validerUttaksplan';\nimport VeilederInfo from './validering/veilederInfo/VeilederInfo';\nimport { useIntl } from 'react-intl';\nimport { getPeriodelisteMeldinger, getUttaksplanVeilederinfo } from './validering/veilederInfo/utils';\nimport OppgiTilleggsopplysninger from './components/oppgi-tilleggsopplysninger/OppgiTilleggsopplysninger';\nimport SlettUttaksplanModal from './components/slett-uttaksplan-modal/SlettUttaksplanModal';\nimport Uttaksplanbuilder from './builder/Uttaksplanbuilder';\nimport ResetUttaksplanModal from './components/reset-uttaksplan-modal/ResetUttaksplanModal';\nimport { splittPeriodePåDato, splittUttaksperiodePåFamiliehendelsesdato } from './builder/leggTilPeriode';\nimport { getHarAktivitetskravIPeriodeUtenUttak } from './utils/uttaksplanUtils';\n\ninterface Props {\n    foreldreSituasjon: ForeldreparSituasjon;\n    forelderVedAleneomsorg: Forelder | undefined;\n    erDeltUttak: boolean;\n    uttaksplan: Periode[];\n    familiehendelsesdato: string;\n    handleOnPlanChange: (nyPlan: Periode[]) => void;\n    stønadskontoer: TilgjengeligStønadskonto[];\n    navnPåForeldre: NavnPåForeldre;\n    annenForelder: AnnenForelder;\n    arbeidsforhold: Arbeidsforhold[];\n    erEndringssøknad: boolean;\n    erFarEllerMedmor: boolean;\n    erFlerbarnssøknad: boolean;\n    erAleneOmOmsorg: boolean;\n    harMidlertidigOmsorg: boolean;\n    situasjon: Situasjon;\n    erMorUfør: boolean;\n    morHarRett: boolean;\n    søkersituasjon: Søkersituasjon;\n    dekningsgrad: Dekningsgrad;\n    antallBarn: number;\n    tilleggsopplysninger: Tilleggsopplysninger;\n    eksisterendeSak: EksisterendeSak | undefined;\n    perioderSomSkalSendesInn: Periode[];\n    morsSisteDag: Date | undefined;\n    harKomplettUttaksplan: boolean;\n    opprinneligPlan: Periode[] | undefined;\n    termindato: Date | undefined;\n    barn: Barn;\n    setUttaksplanErGyldig: (planErGyldig: boolean) => void;\n    handleBegrunnelseChange: (årsak: SenEndringÅrsak, begrunnelse: string) => void;\n    handleSlettUttaksplan: () => void;\n    handleResetUttaksplan: () => void;\n    visAutomatiskJusteringForm: boolean;\n    perioderMedUttakRundtFødsel: Uttaksperiode[];\n    barnFraNesteSak: BarnFraNesteSak | undefined;\n    familiehendelsesdatoNesteSak: Date | undefined;\n    førsteUttaksdagNesteBarnsSak: Date | undefined;\n    minsterettUkerToTette: number | undefined;\n    saveAttachment: (vedlegg: Attachment) => void;\n}\n\nexport interface PeriodeValidState {\n    id: string;\n    isValid: boolean;\n}\n\nconst Uttaksplan: FunctionComponent<Props> = ({\n    foreldreSituasjon,\n    erDeltUttak,\n    uttaksplan,\n    familiehendelsesdato,\n    stønadskontoer,\n    handleOnPlanChange,\n    navnPåForeldre,\n    annenForelder,\n    arbeidsforhold,\n    erEndringssøknad,\n    erFarEllerMedmor,\n    erFlerbarnssøknad,\n    erAleneOmOmsorg,\n    harMidlertidigOmsorg,\n    situasjon,\n    erMorUfør,\n    morHarRett,\n    søkersituasjon,\n    dekningsgrad,\n    antallBarn,\n    tilleggsopplysninger,\n    eksisterendeSak,\n    perioderSomSkalSendesInn,\n    harKomplettUttaksplan,\n    termindato,\n    opprinneligPlan,\n    setUttaksplanErGyldig,\n    handleBegrunnelseChange,\n    handleSlettUttaksplan,\n    handleResetUttaksplan,\n    barn,\n    barnFraNesteSak,\n    familiehendelsesdatoNesteSak,\n    førsteUttaksdagNesteBarnsSak,\n    minsterettUkerToTette,\n    saveAttachment,\n}) => {\n    const familiehendelsesdatoDate = ISOStringToDate(familiehendelsesdato)!;\n    const intl = useIntl();\n    const [perioderErGyldige, setPerioderErGyldige] = useState<PeriodeValidState[]>([]);\n    const [slettUttaksplanModalOpen, setSlettUttaksplanModalOpen] = useState(false);\n    const [resetUttaksplanModalOpen, setResetUttaksplanModalOpen] = useState(false);\n    const harAktivitetskravIPeriodeUtenUttak = getHarAktivitetskravIPeriodeUtenUttak({\n        erDeltUttak,\n        morHarRett,\n        søkerErAleneOmOmsorg: erAleneOmOmsorg,\n    });\n    const uttaksplanUtenAnnenPartsSamtidigUttak = uttaksplan.filter(\n        (p) => !(isAnnenPartInfoPeriode(p) && !p.visPeriodeIPlan),\n    );\n    const bareFarHarRett = !morHarRett;\n    const annenForelderHarRettINorge =\n        isAnnenForelderOppgitt(annenForelder) && annenForelder.harRettPåForeldrepengerINorge!;\n    const toTetteReglerGjelder = getToTetteReglerGjelder(familiehendelsesdatoDate, familiehendelsesdatoNesteSak);\n\n    const builder = Uttaksplanbuilder(\n        uttaksplanUtenAnnenPartsSamtidigUttak,\n        familiehendelsesdatoDate,\n        harAktivitetskravIPeriodeUtenUttak,\n        situasjon === 'adopsjon',\n        bareFarHarRett,\n        erFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak,\n        opprinneligPlan,\n    );\n\n    const handleDeletePeriode = (periodeId: string) => {\n        const slettetPeriode = uttaksplan.find((p) => p.id === periodeId)!;\n        const result = builder.slettPeriode(slettetPeriode);\n\n        handleOnPlanChange(result);\n    };\n\n    const handleUpdatePeriode = (oppdatertPeriode: Periode, familiehendelsesdato: Date) => {\n        let resultat: Periode[] = [];\n        if (\n            farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato(\n                oppdatertPeriode,\n                familiehendelsesdato,\n                morHarRett,\n                termindato,\n            )\n        ) {\n            const perioder = splittUttaksperiodePåFamiliehendelsesdato(\n                oppdatertPeriode as Uttaksperiode,\n                familiehendelsesdato,\n            );\n\n            resultat = builder.oppdaterPerioder(perioder);\n\n            handleOnPlanChange(resultat);\n        } else if (\n            førsteUttaksdagNesteBarnsSak !== undefined &&\n            tidperiodeOverlapperDato(oppdatertPeriode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n        ) {\n            const perioder = splittPeriodePåDato(oppdatertPeriode, førsteUttaksdagNesteBarnsSak);\n            resultat = builder.oppdaterPerioder(perioder);\n            handleOnPlanChange(resultat);\n        } else {\n            const result = builder.oppdaterPeriode(oppdatertPeriode);\n\n            handleOnPlanChange(result);\n        }\n    };\n\n    const handleAddPeriode = (nyPeriode: Periode, familiehendelsesdato: Date) => {\n        let resultat: Periode[] = [];\n        if (\n            farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato(\n                nyPeriode,\n                familiehendelsesdato,\n                morHarRett,\n                termindato,\n            )\n        ) {\n            const perioder = splittUttaksperiodePåFamiliehendelsesdato(\n                nyPeriode as Uttaksperiode,\n                familiehendelsesdato,\n            );\n\n            resultat = builder.leggTilPerioder(perioder);\n\n            handleOnPlanChange(resultat);\n        } else if (\n            førsteUttaksdagNesteBarnsSak !== undefined &&\n            tidperiodeOverlapperDato(nyPeriode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n        ) {\n            const perioder = splittPeriodePåDato(nyPeriode, førsteUttaksdagNesteBarnsSak);\n            resultat = builder.leggTilPerioder(perioder);\n            handleOnPlanChange(resultat);\n        } else {\n            resultat = builder.leggTilPeriode(nyPeriode);\n            handleOnPlanChange(resultat);\n        }\n    };\n\n    const vedleggForSenEndring = []!; //TODO: handleBegrunnelseVedleggChange\n\n    const årsakTilSenEndring = getSeneEndringerSomKreverBegrunnelse(perioderSomSkalSendesInn);\n\n    const handleBegrunnelseTekstChange = (begrunnelse: string) => {\n        handleBegrunnelseChange(årsakTilSenEndring, begrunnelse);\n    };\n\n    const uttaksplanValidering = validerUttaksplan({\n        søkersituasjon: søkersituasjon,\n        arbeidsforhold: arbeidsforhold,\n        dekningsgrad: dekningsgrad,\n        erEndringssøknad: erEndringssøknad,\n        antallBarn: antallBarn,\n        annenForelder: annenForelder,\n        navnPåForeldre: navnPåForeldre,\n        søkerErFarEllerMedmor: erFarEllerMedmor,\n        søkerErAleneOmOmsorg: erAleneOmOmsorg,\n        søkerHarMidlertidigOmsorg: harMidlertidigOmsorg,\n        erDeltUttak: erDeltUttak,\n        morErUfør: erMorUfør,\n        morHarRett: morHarRett,\n        erFlerbarnssøknad: erFlerbarnssøknad,\n        familiehendelsesdato: familiehendelsesdatoDate,\n        termindato: termindato,\n        stønadskontoer: stønadskontoer,\n        perioder: uttaksplan,\n        harKomplettUttaksplan,\n        tilleggsopplysninger: tilleggsopplysninger,\n        eksisterendeSak: eksisterendeSak,\n        perioderSomSkalSendesInn: perioderSomSkalSendesInn,\n        barn: barn,\n        familiehendelsesdatoNesteSak,\n        førsteUttaksdagNesteBarnsSak,\n        minsterettUkerToTette,\n    });\n\n    useEffect(() => {\n        if (perioderErGyldige.some((p) => !p.isValid) || uttaksplanValidering.harFeil) {\n            setUttaksplanErGyldig(false);\n        } else {\n            setUttaksplanErGyldig(true);\n        }\n    });\n\n    const handleSlettUttaksplanModalClose = () => {\n        setSlettUttaksplanModalOpen(false);\n    };\n\n    const handleSlettUttaksplanModalBekreft = () => {\n        setSlettUttaksplanModalOpen(false);\n        handleSlettUttaksplan();\n    };\n\n    const handleResetUttaksplanModalClose = () => {\n        setResetUttaksplanModalOpen(false);\n    };\n\n    const handleResetUttaksplanModalBekreft = () => {\n        setResetUttaksplanModalOpen(false);\n        handleResetUttaksplan();\n    };\n\n    const uttaksplanVeilederInfo = getUttaksplanVeilederinfo(uttaksplanValidering.avvik, intl, false);\n    const meldingerPerPeriode = getPeriodelisteMeldinger(uttaksplanVeilederInfo);\n\n    const utsettelserIPlan = uttaksplan.filter((p) => isUtsettelsesperiode(p)) as Utsettelsesperiode[];\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <Planlegger\n                    uttaksplan={uttaksplan}\n                    familiehendelsesdato={familiehendelsesdatoDate}\n                    handleUpdatePeriode={handleUpdatePeriode}\n                    stønadskontoer={stønadskontoer}\n                    navnPåForeldre={navnPåForeldre}\n                    annenForelder={annenForelder}\n                    arbeidsforhold={arbeidsforhold}\n                    handleDeletePeriode={handleDeletePeriode}\n                    handleAddPeriode={handleAddPeriode}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    erFlerbarnssøknad={erFlerbarnssøknad}\n                    erDeltUttak={erDeltUttak}\n                    erAleneOmOmsorg={erAleneOmOmsorg}\n                    situasjon={situasjon}\n                    meldingerPerPeriode={meldingerPerPeriode}\n                    erMorUfør={erMorUfør}\n                    setPerioderErGyldige={setPerioderErGyldige}\n                    erEndringssøknad={erEndringssøknad}\n                    setSlettUttaksplanModalOpen={setSlettUttaksplanModalOpen}\n                    setResetUttaksplanModalOpen={setResetUttaksplanModalOpen}\n                    termindato={termindato}\n                    barn={barn}\n                    utsettelserIPlan={utsettelserIPlan}\n                    barnFraNesteSak={barnFraNesteSak}\n                    perioderErGyldige={perioderErGyldige}\n                    saveAttachment={saveAttachment}\n                />\n            </Block>\n\n            <Block padBottom=\"xl\">\n                <OversiktKvoter\n                    tilgjengeligeStønadskontoer={stønadskontoer}\n                    uttaksplan={uttaksplan}\n                    erDeltUttak={erDeltUttak}\n                    foreldreparSituasjon={foreldreSituasjon}\n                    familiehendelsesdato={familiehendelsesdatoDate}\n                    annenForelderHarRettINorge={annenForelderHarRettINorge}\n                    toTetteReglerGjelder={toTetteReglerGjelder}\n                    intl={intl}\n                    erAleneOmOmsorg={erAleneOmOmsorg}\n                    erEndringssøknad={erEndringssøknad}\n                    rolle={søkersituasjon.rolle}\n                    situasjon={søkersituasjon.situasjon}\n                    navnPåForeldre={navnPåForeldre}\n                />\n            </Block>\n            <Block visible={uttaksplanVeilederInfo.length > 0} padBottom=\"l\">\n                <VeilederInfo\n                    messages={uttaksplanVeilederInfo}\n                    ariaTittel={intlUtils(intl, 'uttaksplan.regelAvvik.ariaTittel')}\n                />\n            </Block>\n            {årsakTilSenEndring && årsakTilSenEndring !== SenEndringÅrsak.Ingen && (\n                <OppgiTilleggsopplysninger\n                    begrunnelse={\n                        tilleggsopplysninger.begrunnelseForSenEndring\n                            ? tilleggsopplysninger.begrunnelseForSenEndring.tekst\n                            : ''\n                    }\n                    vedlegg={vedleggForSenEndring}\n                    onBegrunnelseTekstChange={handleBegrunnelseTekstChange}\n                    //onVedleggChange={handleBegrunnelseVedleggChange}\n                />\n            )}\n            <SlettUttaksplanModal\n                isOpen={slettUttaksplanModalOpen}\n                erEndringssøknad={erEndringssøknad}\n                onClose={handleSlettUttaksplanModalClose}\n                handleSlettUttaksplanModalBekreft={handleSlettUttaksplanModalBekreft}\n            />\n            <ResetUttaksplanModal\n                isOpen={resetUttaksplanModalOpen}\n                onClose={handleResetUttaksplanModalClose}\n                handleResetUttaksplanModalBekreft={handleResetUttaksplanModalBekreft}\n            />\n        </>\n    );\n};\n\nexport default Uttaksplan;\n"],"names":["UttakRundtFødselÅrsak","getErMorUfør","annenForelder","erFarEllerMedmor","isAnnenForelderOppgitt","harAnnenForelderRettIEØS","aktivitetskravMorUtil","søkerErFarEllerMedmor","reglerFørFørsteOkt2021","dayjs","annenForelderErUfør","annenForelderHarRett","getMorsAktivitetSkjemanummer","morsAktivitet","MorsAktivitet","Skjemanummer","getMorsAktivitet","aktivitetskravMorValue","erMorForSykValue","hasValue","getBareFarHarRettKontoUtenAktivitetskravUker","antallBarn","morErUfør","familiehendelsesdato","dekningsgrad","bareFarHarRett","andreAugust2022ReglerGjelder","morUførUker","flerbarnsukerSomDelAvMinsterett","Dekningsgrad","getBareFarHarRettFlerbarnsdagerUker","flerbarnsUker","uttaksConstants","getBareFarHarRettAntallUkerPåÅTaUtDagerUtenAktivitetskravFørWLB","antallUkerEtterFødselMor","antallUkerForeldrepengerFar","getFlerbarnsuker","uttaksplanHarForMangeFlerbarnsdager","uttaksplan","periode","isUttaksperiode","sum","finnAntallDagerÅTrekke","sisteMuligePermisjonsdag","familiehendelsedato","startDato","Uttaksdagen","konverterMinOgMaxDatoerTilString","minDate","maxDate","dateToISOString","defaultPermisjonsperiodeAvgrensning","minDato","maksDato","startdatoFørTermin","termindato","termindatoMinus12Uker","startdatoFørTerminForeldrepengerFørFødselKonto","ekstrauttakFørFødsel","sisteDagFørFødsel","startdatoPermisjonAleneomsorgFarMedmor","datoForAleneomsorg","startdatoPermisjonAdopsjon","morsSisteUttaksdag","startdatoPermisjonFarMedmor","situasjon","defaultAvgrensning","getFørsteUttaksdag2UkerFørFødsel","uttaksplanDatoavgrensninger","defaultErrorHandler","error","defaultWarnHandler","warning","DEFAULT_INTL_CONFIG","invariantIntlContext","intl","invariant","__assign","CORE_DEFAULT_INTL_CONFIG","React.Fragment","shallowEqual","objA","objB","aKeys","bKeys","len","key","getDisplayName","Component","IntlContext","React.createContext","IntlConsumer","Context","injectIntl","WrappedComponent","options","_a","_b","intlPropName","_c","forwardRef","_d","enforceContext","WithIntl","props","React.createElement","intlProp","hoistNonReactStatics","React.forwardRef","ref","useIntl","React.useContext","DisplayName","DisplayNameParts","createFormattedDateTimePartsComponent","name","ComponentParts","value","children","formatProps","__rest","date","formattedParts","createFormattedComponent","formattedValue","Text","areEqual","prevProps","nextProps","values","otherProps","nextValues","nextOtherProps","FormattedMessage","formatMessage","id","description","defaultMessage","ignoreTag","descriptor","nodes","React.Children","MemoizedFormattedMessage","React.memo","FormattedMessage$1","PeriodeUttakFormField","PeriodeUttakFormComponents","getTypedFormComponents","MorErForSykDokumentasjonOpplastning","navnMor","vedlegg","isOpen","jsxs","Fragment","jsx","Block","GuidePanel","FormikFileUploader","AttachmentType","ErMorForSykSpørsmål","fieldName","erMorForSyk","intlUtils","YesOrNo","FlerbarnsdagerSpørsmål","HvemSkalHaUttakSpørsmål","navnPåForeldre","capitalizeFirstLetter","Forelder","getSpørsmålsTekst","erOppholdsperiode","navnAnnenForelder","HvilkenKontoSpørsmål","velgbareStønadskontoer","erAleneOmOmsorg","legend","radios","konto","getStønadskontoNavn","UttakRundtFødselÅrsakSpørsmål","uttakRundtFødselÅrsak","OverføringsårsakSpørsmål","erEndringssøknad","valgtOverføringsårsak","navn","OverføringÅrsakType","beOmDokumentasjon","getNavnGenitivEierform","prosentValideringSamtidigUttak","samtidigUttakProsent","getFloatFromString","prosentValideringGradering","stillingsprosent","SamtidigUttakSpørsmål","erFlerbarnssøknad","navnPåAnnenForelder","samtidigUttakProsentVisible","samtidigUttakInfoTekst","Link","links","getArbeidsOptions","arbeidsforhold","tidsperiode","aktiveArbeidsforholdIPerioden","getKunArbeidsforholdForValgtTidsperiode","defaultOptions","Arbeidsform","eksisterendeArbeidsforhold","arb","SkalHaGraderingSpørsmål","graderingsprosentVisible","ReadMore","BodyShort","jsonSort","json","isObject","v","sort","o","a","b","k","SubmitListener","cleanup","formik","useFormikContext","isSubmitting","isValidating","submitForm","setValues","cleanedValues","useRef","useEffect","currentValuesJSONString","valuesEqualLastValues","uttaksdatoer","getFørsteUttaksdagForeldrepengerFørFødsel","getFørsteMuligeUttaksdag","getSisteMuligeUttaksdag","getUttaksdatoer","førsteUttaksdag","førsteUttaksdagForeldrepengerFørFødsel","førsteMuligeUttaksdag","sisteUttaksdagFørFødsel","sisteMuligeUttaksdag","sisteUttaksdagInnenforSeksUker","getTidsperiode","getFørsteUttaksdagPåEllerEtterFødsel","erInnenFørsteSeksUkerFødselFarMedmor","førsteUttaksdagEtterSeksUker","isValidTidsperiode","getDatoavgrensningerForFarMedmorPeriodeRundtFødselWLB","ugyldigeTidsperioder","getSisteUttaksdag6UkerEtterFødsel","getDatoavgrensningerForStønadskonto","getDatoavgrensningerForPeriodeUtenKonto","StønadskontoType","getDatoavgrensningerForForeldrepengerFørFødsel","Tidsperioden","getDatoavgrensningerForEkstrauttakFørTermin","standardAvgrensninger","standardAvgrensningerForUttakEtterFødsel","avgrensninger","ISOStringToDate","datoÅRegneFra","getDatoavgrensningerForBareFarMedmorHarRettWLB","Form","getDatoAvgrensninger","fom","tom","morHarRett","erFarMedmorOgHarAleneomsorg","isUtsettelsesperiode","isUttaksperiodeFarMedmorPgaFødsel","isUttaksperiodeBareFarMedmorHarRett","mapTidsperiodeStringToTidsperiode","TidsperiodeForm","utsettelserIPlan","initialMonth","onBekreft","onCancel","datoAvgrensninger","dateRangeValidation","Button","kontoSkalBesvares","periodetype","stønadskontoer","Periodetype","uttakRundtFødselÅrsakSpørsmålSkalBesvares","annenForelderKanIkkeOppgis","søkerHarMidlertidigOmsorg","bareFarMedmorHarRett","erFarMedmorSinWLBTidsperiodeRundtFødsel","farMedmorBrukerForeldrepengerMedAktivitetskravRundtFødselOgMorIkkeErSyk","famDato","sisteUttaksdag6UkerEtterFødsel","aktivitetskravMorSkalBesvares","ønskerFlerbarnsdager","samtidigUttak","kontotype","søkerErMor","erMorForForSykSkalBesvares","årsakTilUttakRundtFødselSkalBesvares","graderingSkalBesvares","erFarMedmor","morErForSyk","farMedmorSøkerDeFørsteSeksUkeneFørWLBOgMorErIkkeSyk","sisteUttaksdagInnenSeksUkerEtterFødsel","bareFarHarRettSøkerAktivitetsKravKontoDeFørsteSeksUkeneOgMorErIkkeSyk","graderingSkalBesvaresPgaWLBUttakRundtFødsel","tidperiode","samtidigUttakSkalBesvares","erUttakInnenFørsteSeksUkerFødselFarMedmor","erUttakFørFødsel","erAleneOmsorg","erDeltUttakINorge","annenforelderKanIkkeOppgis","erUttakEgenKvoteFarMedmorFørsteSeksUkerUtenFlerbarnsdager","ønskerFlerbarnsdagerSkalBesvares","stønadskontoType","hvemSkalTaUttakSkalBesvares","erSamtidigUttakFarMedmorFørFørsteSeksUkerWLB","overføringsårsakSkalBesvares","kontoValue","annenForelderHarRettIEØS","getUttakSkjemaregler","formValues","regelProps","convertYesOrNoOrUndefinedToBoolean","erSamtidigUttakFarMedmorFørFødselWLB","erDeltUttak","skalViseWLBInfoOmSamtidigUttakRundtFødsel","skalViseGradering","regler","skalViseAktivitetskrav","skalViseSamtidigUttak","skalViseFlerbarnsdager","skalViseKonto","PeriodeUttakFormConfig","periodeUttakFormQuestionsConfig","Questions","getVeilederTekst","morsAktivitetIPerioden","listData","listItem","index","renderOptions","aktivitetsid","AktivitetskravSpørsmål","vedleggFieldName","aktivitetskravVedlegg","FormComponents","saveAttachment","msg","getInitialKonto","erMorUfør","periodenStarterFørFamdato","getHvemSkalTaUttak","forelder","getInitialValues","startdatoPeriode","hvemSkalTaUttak","cleanPeriodeUttakFormData","visibility","initialValues","getInitialÅrsakForUttakRundtFødsel","ønskerSamtidigUttak","getPeriodeUttakFormInitialValues","convertBooleanOrUndefinedToYesOrNo","getFrilansSNEllerOrgnr","isOverføringsperiode","isOppholdsperiode","getStønadskontoFromOppholdsårsak","arbeidsformer","orgnumre","getArbeidsform","getOrgnummer","getErArbeidstaker","getSamtidigUttaksProsentWLB","ønskerGradering","trimNumberValue","velgVedleggSomSkalBrukes","aktivitetskravMorDokumentasjon","erMorForSykDokumentasjon","skalVedleggPåkreves","getKontoVerdi","samtidigWLBUttakFørFødselFarMedmor","inputKonto","mapPeriodeUttakFormToPeriode","type","lagSendSenereDokumentNårIngenAndreFinnes","getOppholdsÅrsakFromStønadskonto","samtidigWLBUttakFørFørsteSeksUkerFarMedmor","attachmentType","skjemanummer","relevantVedlegg","erSamtidigUttak","samtidigUttakProsentInputVerdi","samtidigUttakProsentVerdi","forelderVerdi","kontoVerdi","bem","bemUtils","formaterTidsperiodeDato","dato","formatDate","renderTidsperiode","Label","TidsperiodeDisplay","toggleVisTidsperiode","e","RangeIcon","icon","AriaText","tag","tagName","createElement","delay","minZoomTouchDelta","lastTapAt","lastClientX","lastClientY","preventDoubleTapZoom","event","tapAt","timeDiff","clientX","clientY","xDiff","yDiff","Sirkelknapp","onClick","ariaLabel","ikon","toggle","disabled","stil","size","posisjoneringFraHøyre","labelId","guid","classnames","StepperKnapp","direction","label","NumberStepper","min","max","stepSize","legendId","onChange","increaseAriaLabel","decreaseAriaLabel","canDecrease","canIncrease","evt","UkerDagerTeller","ukeStepper","dagStepper","ukeLegend","dagLegend","ukeLegendId","dagLegendId","Fieldset","UttakEndreTidsperiodeSpørsmål","onAvbryt","changeTidsperiode","visible","isForeldrepengerFørFødselUttaksperiode","varighetIDager","uker","dager","getUkerOgDagerFromDager","handleOnSubmit","getDagValue","uker2","dager2","Modal","nyUker","nyDager","periodenGjelderAnnenForelder","erUttakAvAnnenForeldersKvote","getPeriodeType","periodenGjelder","starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel","PeriodeUttakForm","handleUpdatePeriode","toggleIsOpen","handleDeletePeriode","setNyPeriodeFormIsVisible","handleAddPeriode","isNyPeriode","setPerioderErGyldige","tidsperiodeIsOpen","setTidsperiodeIsOpen","useState","periodeIsValid","setPeriodeIsValid","previousState","getIsValidStateForPerioder","handleCleanup","getVelgbareStønadskontotyper","startDatoPeriodeRundtFødselFarMedmor","sluttDatoPeriodeRundtFødselFarMedmor","setFieldValue","isValid","søkerOppgirAnnenForeldersPeriode","values2","formaterDatoKompakt","ActionLink","getSlettPeriodeTekst","PeriodeUtsettelseFormField","PeriodeUtsettelseFormComponents","getFormStateFraVedlegg","gjelderMorsAktivitet","getPeriodeUtsettelseFormInitialValues","isUtsettelsePgaArbeid","getVedleggFraFormState","morsAktivitetIPeriodenDokumentasjon","mapPeriodeUtsettelseFormToPeriode","cleanupPeriodeUtsettelseFormData","UtsettelseÅrsakType","PeriodeUtsettelseFormConfig","søkerErFarEllerMedmorOgKunDeHarRett","periodeUtsettelseFormQuestionsConfig","getUtsettelseÅrsakOptions","periodenErKunHelligdager","skalViseGamleUtsettelseÅrsaker","tidsperiodenErInnenforFørsteSeksUker","option","getUtsettelseårsakSkjemanummer","årsak","showAttachmentUploader","getAttachmentUploaderLabel","getAttachmentUploaderType","UtsettelseÅrsakSpørsmål","utsettelseårsak","årsakOptions","UtsettelseEndreTidsperiodeSpørsmål","PeriodeUtsettelseForm","førsteOktober2021ReglerGjelder","antallHelligdager","antallUttaksdager","NyPeriode","isUtsettelse","nesteLedigeUttaksdato","setPeriode","Heading","IconBox","color","stripes","ArbeidIkon","title","rest","FerieIkon","SykdomIkon","TerminIkon","UttakIkon","UttaksplanIkonKeys","UttaksplanIkonKeys2","UttaksplanIkon","InformationSquareIcon","ExclamationmarkTriangleFillIcon","XMarkOctagonFillIcon","UttaksplanColor","getForelderFarge","getStønadskontoFarge","forIkon","harMidlertidigOmsorg","getUtsettelseFarge","StønadskontoIkon","gradert","getIkonForKonto","UtsettelseIkon","UttaksplanAdvarselIkon","farge","getAlertStripeTypeFromMessageType","message","getIkonForVeilederMelding","melding","renderAlert","skjulMeldingIkon","content","Alert","VeilederMelding","getPeriodeIkon","isUtsettelseAnnenPart","getVarighetString","antallDager","format","dagerStr","ukerStr","renderDagMnd","visÅr","d","måned3bokstaver","måned","år","PeriodelisteItemHeader","annenForelderSamtidigUttakPeriode","varighetString","erFpFørTerminUtenUttak","annenForelderIsMor","annenForelderNavn","beskrivelseSamtidigUttak","isUttakAnnenPart","getForelderNavn","getValidTidsperiode","getPeriodeTittel","classNames","PeriodeHull","kunHelligdager","kunUttaksdager","onLeggInnNyPeriode","leggInnNyUtsettelse","nyeRegler","getUtsettelseTekst","foreldernavn","erMor","PeriodeInfo","getOppholdskontoNavn","PeriodeUtenUttak","onLeggTilNyPeriode","PeriodeFørFødselFormField","PeriodeFørFødselFormComponents","PeriodeFørFødselFormConfig","skalIkkeHaUttakFørTermin","periodeFørFødselFormQuestionsConfig","getPeriodeFørFødselFormInitialValues","sisteUttaksagFørFødsel","førsteUttaksdag3UkerFørFødsel","mapPeriodeFørFødselFormToPeriode","PeriodeFørFødselForm","_visibility","SlettbarAvslåttPeriode","onSlettPeriode","VeilederMeldinger","meldinger","renderPeriodeListeInnhold","isAvslåttPeriode","isSlettbarAvslåttPeriode","PeriodelisteItem","egenPeriode","periodeErGyldig","isInfoPeriode","toggleFocusAndOpen","headerButton","Accordion","m","HjerteIkon","fylt","getTekst","barn","isAdoptertBarn","formaterDatoUtenDag","isFødtBarn","FamiliehendelsedatoDisplay","getIndexOfFørstePeriodeEtterFødsel","p","getIndexOfSistePeriodeFørDato","Periodeliste","meldingerPerPeriode","barnFraNesteSak","perioderErGyldige","openPeriodeId","setOpenPeriodeId","indexOfFørstePeriodeEtterFødsel","erAllePerioderIPlanenFørFødsel","indexOfSistePeriodeFørNyStøndasperiodeNyttBarn","periodeMedValidState","periodeMedState","getAnnenForelderSamtidigUttakPeriode","Planlegger","setSlettUttaksplanModalOpen","setResetUttaksplanModalOpen","nyPeriodeFormIsVisible","setIsUtsettelse","Periodene","annenForelderErOppgitMenHarIkkeRett","InfoBlock","Kontostatus","uttak","kontoErOvertrukket","Kontostatus$1","TilesList","columns","child","isMorsPeriode","isFarsPeriode","isFellesperiodeKvote","isMorsKvote","isFarMedmorsKvote","summerBrukteUttaksdager","u","getBrukteDagerForForelder","tilgjengeligeStønadskontoer","perioder","perioderFørTermin","perioderEtterTermin","førTermin","beregnBrukteUttaksdager","etterTermin","alle","dagerTotalt","isMor","dagerEgneKvoter","dagerOverført","dagerFellesperiode","getBrukteDager","perioderMedUttak","getAllePerioderMedUttaksinfoFraUttaksplan","getUttaksstatus","harKomplettUttaksplan","gjelderDagerBrukt","beregnGjenståendeUttaksdager","kontouttak","filtrerBortAnnenPartsKonto","uttakskontoer","OversiktPerForelder","brukteDagerPerForelder","foreldreparSituasjon","svgInfo","getSituasjonForelderSvg","Personkort","ForelderIkon","OversiktPerKvote","uttaksstatus","uttakÅVise","OversiktKvoter","annenForelderHarRettINorge","rolle","isFarEllerMedmor","inneholderUttaksplanPerioderTest","grunnlag","isPeriodeUtenUttak","isHull","ANTALL_UTTAKSDAGER_SEKS_UKER","getInformasjonOmTaptUttakVedUttakEtterSeksUkerFarMedmor","søkerErFarEllerMedmorOgAnnenForelderKanIkkeOppgis","søkerErFarEllerMedmorOgErAleneOmOmsorgen","førstePeriode","førsteRegistrerteUttaksdag","getUgyldigUttakMor","flerbarnsFødsel","førsteUttaksdagEtterÅtteUker","ugyldigUttakRegelFørsteDato","ugyldigUttakRegelSisteDato","ugyldigPeriode","erPeriodeFørDato","ugyldigeUtsettelser","gradertePerioder","flernbarnsPerioder","fellesPerioder","samtidigUttaksperioder","unntakFarFørsteSeksUker","erFarsUttakFørsteSeksUkerGyldig","unntak","getUgyldigUttakFørsteSeksUkerForFarMedmor","farsPerioderInnenforSeksFørsteUker","ugyldigeUttak","ugyldigeOverføringer","utsettelse","harMorSøktUgyldigUttakFørsteSeksUkerTest","ugyldigePerioder","stønadskontoInneholderForMyeUttakKunSøkerTest","søkerErAleneOmOmsorg","stønadskontoerMedForMyeUttak","harFarMedmorSøktUgyldigUttakEllerUtsettelseFørsteSeksUkerTest","wlbReglerGjelder","erPeriodeInnvilget","erUttaksplanBareOppholdTest","uttaksplanErBareOpphold","slutterUttaksplanMedOppholdTest","uttaksplanSlutterMedOpphold","starterUttaksplanMedOppholdTest","uttaksplanStarterMedOpphold","uttaksplanGraderingStørreEnnSamtidigUttak","erUttaksplanGraderingStørreEnnSamtidigUttakTest","tilleggsopplysningerMaxLength","maxLengthIsGreaterThanOrEqualToStringLength","maxLength","tilleggsopplysningerErGyldig","begrunnelse","erTilleggsopplysningerGyldigTest","begrunnelseForSenEndring","begrunnelseTekst","harTilleggsopplysningerGyldigeCharsTest","tekst","validateTextHasLegalChars","getIllegalChars","harUttaksplanForMangeFlerbarnsdagerTest","inneholderUttaksplanDatoSomIkkeErUttaksdag","erUttaksdag","createMissingAttachment","periodeId","isAttachmentMissing","attachments","shouldPeriodeHaveAttachment","dokumentasjonBehøvesForOverføringsperiode","dokumentasjonBehøvesForUtsettelsesperiode","dokumentasjonBehøvesForUttaksperiode","hasPeriodeMissingAttachment","søknadsinfo","InnsendingsType","findMissingAttachmentsForPerioder","missingAttachments","missingAttachmentForAktivitetskrav","harMorAktivitetskrav","erÅrsakSykdomEllerInstitusjonsopphold","ønskerFlerBarnsdager","harPerioderManglendeVedleggTest","manglendeVedlegg","førsteUttaksEllerUttsettelsesPeriode","sorterPerioder","regelTekst","passerer","inneholderSenUtsettelsePgaFerieTest","seneUtsettelsePgaFerie","erSenUtsettelsePgaFerieEllerArbeid","inneholderTapteDagerTest","infoOmTaptUttakVedUttakEtterSeksUkerFarMedmor","planInneholderTapteDager","planInneholderAnnetEnnAktivitetsfriKvote","inneholderBareUtsettelserTest","isOverskrivbarPeriode","intlKey","formaterDato","inneholderSenUtsettelsePgaArbeidTest","seneUtsettelserPgaArbeid","overskriverEndringerAnnenPartsPerioder","eksisterendeUttaksplan","fornavnAnnenForelder","perioderSomOverlapper","perioderSomOverlapperUtenSamtidigUttak","_intl","overlapperPeriodeAndrePerioder","perioderUtenUttakAnnenPart","perioderSomHarOverlapp","getPeriodeForelderNavn","RegelAlvorlighet","getRegelIntlKey","regel","intlRegelPrefix","alvorlighetSortOrder","sorterAvvik","a1","a2","ensureRegelAvvikIntlKey","info","overstyresAvFilter","avvik","_idx","alleAvvik","b2","overstyrerAndreFilter","rb","rbo","regelHarAvvik","mapInfoToRegelAvvik","i","regelAvvik","isArray","regelPasserer","getRegelAvvik","resultat","flatten","r","isRegelFeil","hasRegelFeil","trimRelaterteRegelAvvik","grupperAvvik","uniqBy","getRegelIntlValues","newValues","valueOrFunc","hasValueRule","failText","getStillingsprosentRegler","stillingsprosentIsMoreThan0","samtidigUttakProsentIsMax100","stillingsprosentIsLessThan100","gradertUttaksperiodeErUgyldig","erGyldig","samtidigUttaksperiodeErUgyldig","harUttaksperiodeGyldigGradering","runValidators","validators","inputName","results","validator","valid","tests","allValidatorsPass","erUtfyltTest","erUttaksdagTest","slutterInnenforGyldigPermisjonsperiode","starterInnenforGyldigAntallUkerFørTermin","getUttakTidsperiodeValidatorer","skalIkkeHaUttak","uttakTidsperiodeErGyldig","uttaksperiode","fraDatoErGyldig","tilDatoErGyldig","getUtsettelseTidsperiodeValidatorer","utsettelseTidsperiodeErGyldig","utsettelesperiode","harPeriodeGyldigTidsperiode","perioderMedUgyldigTidsperiode","harUttaksperiodeStønadskonto","uttaksperioderUtenStønadskonto","erSamtidigUttakGyldig","erUtsettelseEtterFamiliehendelsesdato","starterUttaksperiodeRundtFødselEtter2UkerFørFødsel","gjelderWLBReglerFarMedmorRundtFødsel","perioderFarMedmorSomStarterFør2UkerFørFødsel","isUttaksperiodeFarMedmorMedValgForUttakRundtFødsel","starterTidsperiodeEtter2UkerFørFødsel","førsteUttaksdagToUkerFørFødsel","slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel","perioderFarMedmorSomIkkeSlutterFør6UkerEtterFødsel","slutterTidsperiodeInnen6UkerEtterFødsel","sisteUttaksdagSeksUkerEtterFødsel","periodeDeFørsteSeksUkeneHarUlovligUttakBFHR","perioderDeFørsteSeksUkeneMedUlovligUttakBFHR","harBekreftet100ProsentArbeidIUtsettelsePgaArbeid","utsettelserPgaArbeidUtenBekreftelse","laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn","førsteUttaksdagForPåfølgendeBarn","forSenUttakVedPåfølgendeBarn","skjulIOppsummering","periodevalideringsregler","harSøktOmFerieUtenArbeidsforhold","isUtsettelsePgaFerie","inneholderForMyeFerie","ferieUtsettelser","ferieDager","sumFerieDager","Perioden","kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme","gjenståendeDager","sistePeriodeErIkkeUtsettelse","resterendeFellesperiode","resterendeMødrekvote","resterendeFedrekvote","resterendeForeldrepenger","erUttaksmengdeForFarMedmorForHøy","farEllerMedmor","erUttaksmengdeForFarMedmorForHøyTest","vekslendeArbeidOgUttakTest","kunSøkersPerioder","firstArbeidsperiodeIndex","antallPerioderEtterFørsteUtsettelseGrunnetArbeid","vekslendePeriodeUtenUttakOgUttakTest","firstPeriodeUtenUttakIndex","antallPerioderEtterFørstePeriodeUtenUttak","burdeKanskjeSøkeGraderingTest","vekslerArbeidOgUttakTest","veklserPerioderUtenUttakOgUttaktest","infoTekstKey","ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindatoTest","isUfødtBarn","inneholderPerioderUtenAktivitetskrav","søkersituasjon","perioderUtenAktivitetskrav","inneholderUtsettelserUtenÅrsak","utsettelserUtenÅrsak","overskridelseUttakRundtFødselAntallDager","perioderRundtFødsel","sisteUttak6UkerEtterFødsel","perioderAvkortetTilÅSlutte6UkerEtterFødsel","getSumUttaksdagerÅTrekkeIPeriodene","ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL","farMedmorHarSøktUgyldigAntallDagerUttakRundtFødselTest","perioderUttakRundtFødsel","getFarMedmorUttakRundtFødsel","antallDagerForMye","slutterEnAvPeriodeneForSent","fraDato","tilDato","harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUkerTest","sisteUttaksdagEtterSeksUker","farMedMorHarRettPåUttakRundtFødselTest","tattUtForMangeDagerIPlanen","dagerIgjenRundtFødsel","førsteUttaksdag2UkerFørFødsel","antallUttaksdagerRundtFødsel","erMerEnn3månederSidenFamiliehendelse","farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest","kontoUtenAktivitetskravUker","testPasserer","renderAsHtml","link","antallUkerPåÅTaUtDager","inneholderUttaksperioderMedUbesvartGradering","perioderMedUbesvartGradering","inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest","uttaksperioder","perioderMedUbesvartSpmOmFlerbarnsdager","farMedmorHarRettPåFlerbarnsdagerTest","overstigerMinsterettVedToTette","minsterettUkerToTette","perioderEtterFørsteStønadsperiodeNyttBarn","perioderFørFørsteStønadsperiodeNyttBarn","minsterettMaxAntallUker","minsterettMaxAntallDager","brukteDagerPerForelderFørFørsteStønadsdagNyttBarn","uttaksdagerFremTilNyttBarnStønadsdag","dagerIgjenÅBrukePåMinsteretten","brukteDagerPerForelderEtterFørsteStønadsdagNyttBarn","uttaksdagerEtterNyttBarnStønadsdag","dagerIgjenAvMinsterett","harPerioderEtterFørsteStønadsdagNesteBarnDerToTette","tekstKey","uttaksplanValideringRegler","uttaksplanRegler","familiehendelsesDato","REGEL_INTL_PREFIX","sjekkUttaksplanOppMotRegler","valideringsgrunnlag","validerUttaksplan","avvikPerPeriode","groupBy","harFeil","VeilederInfo","messages","ariaTittel","mapAvvikTilMessage","tittelIntlKey","harTittel","intlHasKey","getUttaksplanVeilederinfo","getPeriodelisteMeldinger","veilederinfo","FUNC_ERROR_TEXT","NAN","symbolTag","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","freeGlobal","global","freeSelf","root","objectProto","objectToString","nativeMax","nativeMin","now","debounce","func","wait","lastArgs","lastThis","maxWait","result","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","toNumber","invokeFunc","time","args","thisArg","leadingEdge","timerExpired","remainingWait","timeSinceLastCall","timeSinceLastInvoke","shouldInvoke","trailingEdge","cancel","flush","debounced","isInvoking","throttle","isObjectLike","isSymbol","other","isBinary","lodash_throttle","getLabel","OppgiTilleggsopplysninger","__publicField","Textarea","BodyLong","OppgiTilleggsopplysninger$1","SlettUttaksplanModal","onClose","handleSlettUttaksplanModalBekreft","innhold1Id","innhold2Id","slettPeriode","slettetPeriode","harAktivitetskravIPeriodeUtenUttak","erAdopsjon","førsteUttaksdagNesteBarnsSak","res","getPeriodeHullEllerPeriodeUtenUttak","oppdaterPeriode","endretPeriode","originalPeriode","annenPartsUttak","perioderSlettetEndretPeriode","slåSammenLikePerioder","leggTilPeriode","leggTilPeriodeOgBuild","bevegeligePerioder","fastePerioder","nyPeriode","nyePerioder","fastPeriode","finnOgSettInnHull","settInnAnnenPartsUttak","oppdaterPeriodeOgBuild","oppdatertePerioder","fjernUnødvendigeHull","slettPeriodeOgBuild","getFastePerioder","starterUttaksperiodeFørFødsel","getBevegeligePerioder","isInfoPeriodeAnnenPart","getAnnenPartsUttak","Uttaksplanbuilder","opprinneligPlan","perioderUtenAnnenPart","nyAnnenPartsUttak","nyFastePerioder","nyBevegeligePerioder","ResetUttaksplanModal","handleResetUttaksplanModalBekreft","getHarAktivitetskravIPeriodeUtenUttak","uttaksplanInneholderPerioderUtenKonto","Uttaksplan","foreldreSituasjon","handleOnPlanChange","tilleggsopplysninger","eksisterendeSak","perioderSomSkalSendesInn","setUttaksplanErGyldig","handleBegrunnelseChange","handleSlettUttaksplan","handleResetUttaksplan","familiehendelsesdatoNesteSak","familiehendelsesdatoDate","slettUttaksplanModalOpen","resetUttaksplanModalOpen","uttaksplanUtenAnnenPartsSamtidigUttak","isAnnenPartInfoPeriode","toTetteReglerGjelder","getToTetteReglerGjelder","builder","oppdatertPeriode","familiehendelsesdato2","farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato","splittUttaksperiodePåFamiliehendelsesdato","tidperiodeOverlapperDato","splittPeriodePåDato","vedleggForSenEndring","årsakTilSenEndring","getSeneEndringerSomKreverBegrunnelse","handleBegrunnelseTekstChange","uttaksplanValidering","handleSlettUttaksplanModalClose","handleResetUttaksplanModalClose","uttaksplanVeilederInfo","SenEndringÅrsak"],"mappings":"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A4B,EACvGF,EACAnjC,EACAojC,EACAljC,EACAtB,EACAykC,CAAA,GAIDc,CACX,EAEMI,GAAyB,CAC3Bd,EACAxZ,EACAjqB,EACAmjC,EACAC,EACAljC,EACAtB,EACA+kC,EACAN,IACC,CACK,MAAAK,EAAkBzZ,EAAS,KAAMtC,GAAMA,EAAE,KAAO8b,EAAc,EAAE,EAEtE,IAAIe,EAAqBC,GACrBjB,GAAgB,CACZ,SAAAvZ,EACA,cAAAwZ,EACA,gBAAAC,EACA,qBAAA1jC,EACA,mCAAAmjC,EACA,WAAAC,EACA,eAAAljC,EACA,iBAAAtB,EACA,gBAAA+kC,EACA,6BAAAN,CAAA,CACH,CAAA,EAGL,OAAIM,IACqBa,EAAAH,GACjBG,EACArB,EACAnjC,EACAojC,EACAljC,EACAtB,EACAykC,CAAA,EAEiBmB,EAAAF,GACjBE,EACAb,EACA3jC,EACAqjC,CAAA,GAIDgB,GACHG,EACArB,EACAnjC,EACAojC,EACAljC,EACAtB,EACAykC,CAAA,CAER,EAEMqB,GAAsB,CACxBza,EACAiZ,EACAljC,EACAmjC,EACAC,EACAljC,EACAtB,EACA+kC,EACAN,IACC,CACD,IAAIc,EAAcM,GACdZ,GACIZ,GAAa,CACT,SAAAhZ,EACA,eAAAiZ,EACA,qBAAAljC,EACA,mCAAAmjC,EACA,WAAAC,EACA,eAAAljC,EACA,iBAAAtB,EACA,6BAAAykC,CAAA,CACH,EACDrjC,EACAqjC,CACJ,CAAA,EAGJ,OAAIM,IACcQ,EAAAE,GACVF,EACAhB,EACAnjC,EACAojC,EACAljC,EACAtB,EACAykC,CAAA,EAEUc,EAAAG,GACVH,EACAR,EACA3jC,EACAqjC,CAAA,GAIDgB,GACHF,EACAhB,EACAnjC,EACAojC,EACAljC,EACAtB,EACAykC,CAAA,CAER,EAEMsB,GAAmB,CAAC1a,EAAqBjqB,IACpCiqB,EAAS,OACXtC,GACGlY,GAAqBkY,CAAC,GACtB9L,GAAuC8L,CAAC,GACxCid,GAA8Bjd,EAAG3nB,CAAoB,CAAA,EAI3D6kC,GAAwB,CAC1B5a,EACAjqB,EACAmjC,EAC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","x_google_ignoreList":[6,7,8,9,10,11,12,151]}