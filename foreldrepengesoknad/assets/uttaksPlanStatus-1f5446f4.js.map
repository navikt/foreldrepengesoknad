{"version":3,"file":"uttaksPlanStatus-1f5446f4.js","sources":["../../../../packages/fp-common/src/common/types/MorsAktivitet.ts","../../../../packages/fp-common/src/common/types/OppholdÅrsakType.ts","../../../../packages/fp-common/src/common/types/OverføringÅrsakType.ts","../../../../packages/fp-common/src/common/utils/numberUtils.ts","../../../../packages/fp-common/src/common/utils/stønadskontoerUtils.ts","../../../../packages/fp-common/src/common/utils/wlbUtils.ts","../../../../packages/fp-common/src/common/utils/periodeUtils.ts","../../../../packages/fp-common/src/common/utils/uttaksPlanStatus.ts"],"sourcesContent":["export enum MorsAktivitet {\n    Arbeid = 'ARBEID',\n    Utdanning = 'UTDANNING',\n    Kvalifiseringsprogrammet = 'KVALPROG',\n    Introduksjonsprogrammet = 'INTROPROG',\n    TrengerHjelp = 'TRENGER_HJELP',\n    Innlagt = 'INNLAGT',\n    ArbeidOgUtdanning = 'ARBEID_OG_UTDANNING',\n    Uføre = 'UFØRE',\n    IkkeOppgitt = 'IKKE_OPPGITT',\n}\n","export enum OppholdÅrsakType {\n    UttakFellesperiodeAnnenForelder = 'UTTAK_FELLESP_ANNEN_FORELDER',\n    UttakFedrekvoteAnnenForelder = 'UTTAK_FEDREKVOTE_ANNEN_FORELDER',\n    UttakMødrekvoteAnnenForelder = 'UTTAK_MØDREKVOTE_ANNEN_FORELDER',\n    UttakForeldrepengerAnnenForelder = 'UTTAK_FORELDREPENGER_ANNEN_FORELDER',\n    ForeldrepengerFørFødsel = 'UTTAK_FORELDREPENGER_FØR_FØDSEL_ANNEN_FORELDER',\n    Ingen = 'INGEN',\n}\n","export enum OverføringÅrsakType {\n    institusjonsoppholdAnnenForelder = 'INSTITUSJONSOPPHOLD_ANNEN_FORELDER',\n    sykdomAnnenForelder = 'SYKDOM_ANNEN_FORELDER',\n    aleneomsorg = 'ALENEOMSORG',\n    ikkeRettAnnenForelder = 'IKKE_RETT_ANNEN_FORELDER',\n}\n","import { hasValue } from './validationUtils';\n\nconst onlyNumbersRegExp = /^[0-9]*$/;\n\nexport const getMod11 = (strValue: string): number => {\n    let checkNbr = 2;\n    let mod = 0;\n\n    for (let i = strValue.length - 2; i >= 0; --i) {\n        mod += parseInt(strValue.charAt(i), 10) * checkNbr;\n        if (++checkNbr > 7) {\n            checkNbr = 2;\n        }\n    }\n    const result = 11 - (mod % 11);\n    return result === 11 ? 0 : result;\n};\n\nconst er9Tall = (orgnr: string): boolean => {\n    return onlyNumbersRegExp.test(orgnr) && orgnr.length === 9;\n};\n\nconst starterPå8Eller9 = (orgnr: string): boolean => {\n    return orgnr.charAt(0) === '8' || orgnr.charAt(0) === '9';\n};\n\nexport const erGyldigNorskOrgnummer = (orgnr: string): boolean => {\n    if (!orgnr || er9Tall(orgnr) === false || starterPå8Eller9(orgnr) === false || orgnr === '999999999') {\n        return false;\n    }\n    return getMod11(orgnr) === parseInt(orgnr.charAt(8), 10);\n};\n\nexport const numberHasValue = (num: string): boolean => {\n    if (!hasValue(num) || num.trim().length === 0) {\n        return false;\n    }\n\n    return true;\n};\n\nconst numberRegExp = RegExp(/^[-]?[0-9,.\\s]*$/);\n\nexport const trimNumberValue = (value: string): string => {\n    return value.replace(/,/g, '.').replace(/\\s/g, '').replace(/%/g, '');\n};\n\nexport const getFloatFromString = (value: string | undefined): number | undefined => {\n    if (value !== undefined && value !== null && value.length > 0 && numberRegExp.test(value)) {\n        const trimmedValue = trimNumberValue(value);\n        const numberOfPoints = (trimmedValue.match(/\\./g) || []).length;\n        if (numberOfPoints > 1) {\n            return undefined;\n        }\n        return parseFloat(trimmedValue);\n    }\n    return undefined;\n};\n","import { IntlShape } from 'react-intl';\nimport { getForelderNavn } from './periodeUtils';\nimport { capitalizeFirstLetter } from './stringUtils';\nimport { Forelder, NavnPåForeldre, StønadskontoType, TilgjengeligStønadskonto } from '../types';\nimport { getNavnGenitivEierform } from './personUtils';\nimport intlUtils from './intlUtils';\n\nexport const getVelgbareStønadskontotyper = (stønadskontoTyper: TilgjengeligStønadskonto[]): StønadskontoType[] =>\n    stønadskontoTyper\n        .filter(\n            (kontoType) =>\n                kontoType.konto === StønadskontoType.Fellesperiode ||\n                kontoType.konto === StønadskontoType.Fedrekvote ||\n                kontoType.konto === StønadskontoType.Mødrekvote ||\n                kontoType.konto === StønadskontoType.Foreldrepenger ||\n                kontoType.konto === StønadskontoType.AktivitetsfriKvote,\n        )\n        .map((kontoType) => kontoType.konto);\n\nexport const getStønadskontoNavn = (\n    intl: IntlShape,\n    konto: StønadskontoType,\n    navnPåForeldre: NavnPåForeldre,\n    erFarEllerMedmor?: boolean,\n    erAleneOmOmsorg?: boolean,\n) => {\n    let navn;\n\n    switch (konto) {\n        case StønadskontoType.Mødrekvote:\n            navn = navnPåForeldre.mor;\n            break;\n        case StønadskontoType.Fedrekvote:\n            navn = navnPåForeldre.farMedmor;\n            break;\n        default:\n            navn = undefined;\n    }\n\n    if (navn) {\n        return intl.formatMessage(\n            { id: 'uttaksplan.stønadskontotype.foreldernavn.kvote' },\n            { navn: getNavnGenitivEierform(capitalizeFirstLetter(navn), intl.locale) },\n        );\n    }\n\n    if (erFarEllerMedmor === true && erAleneOmOmsorg === false) {\n        if (konto === StønadskontoType.AktivitetsfriKvote) {\n            return intl.formatMessage({ id: 'uttaksplan.stønadskontotype.AKTIVITETSFRI_KVOTE_BFHR' });\n        }\n        if (konto === StønadskontoType.Foreldrepenger) {\n            return intl.formatMessage({ id: 'uttaksplan.stønadskontotype.AKTIVITETSKRAV_KVOTE_BFHR' });\n        }\n    }\n    return intl.formatMessage({ id: `uttaksplan.stønadskontotype.${konto}` });\n};\n\nexport const getUttakAnnenPartStønadskontoNavn = (\n    intl: IntlShape,\n    konto: StønadskontoType,\n    periodeForelder: Forelder,\n    navnPåForeldre: NavnPåForeldre,\n    samtidigUttakProsent: string | undefined,\n    erFarEllerMedmor?: boolean,\n    erAleneOmOmsorg?: boolean,\n) => {\n    const forelderNavn = getForelderNavn(periodeForelder, navnPåForeldre);\n    if (samtidigUttakProsent !== undefined) {\n        const navn = getNavnGenitivEierform(forelderNavn, intl.locale);\n        const intlTekst =\n            konto === StønadskontoType.Fellesperiode\n                ? 'uttaksplan.periodeAnnenPart.tittel.gradertEllerSamtidigUttakFellesperiode'\n                : 'uttaksplan.periodeAnnenPart.tittel.gradertEllerSamtidigUttak';\n        return intlUtils(intl, intlTekst, {\n            navn: capitalizeFirstLetter(navn),\n            prosent: samtidigUttakProsent,\n        });\n    }\n    return getStønadskontoNavn(intl, konto, navnPåForeldre, erFarEllerMedmor, erAleneOmOmsorg);\n};\n","import dayjs from 'dayjs';\nimport { andreAugust2022ReglerGjelder, tidperiodeOverlapperDato } from './dateUtils';\nimport { IntlShape } from 'react-intl';\nimport {\n    Forelder,\n    Periode,\n    Periodetype,\n    Situasjon,\n    StønadskontoType,\n    TidsperiodeDate,\n    Uttaksperiode,\n    isOverføringsperiode,\n    isUttaksperiode,\n} from './../types';\nimport { Uttaksdagen } from './Uttaksdagen';\nimport { isValidTidsperiode } from './Tidsperioden';\nimport { finnAntallDagerÅTrekke } from './uttaksPlanStatus';\nimport intlUtils from './intlUtils';\n\nexport const ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL = 10;\nconst ANTALL_DAGER_TO_UKER = 2 * 7;\nconst ANTALL_DAGER_SEKS_UKER = 6 * 7;\n\nexport const gjelderWLBReglerFarMedmorRundtFødsel = (\n    familiehendelsesdato: Date,\n    søkerErFarEllerMedmor: boolean,\n    morHarRett: boolean,\n    situasjon: Situasjon,\n) => {\n    const gjelderWLB = andreAugust2022ReglerGjelder(familiehendelsesdato);\n    return gjelderWLB && søkerErFarEllerMedmor && morHarRett && situasjon === 'fødsel';\n};\n\nexport const isUttaksperiodeFarMedmorMedValgForUttakRundtFødsel = (periode: Periode): boolean => {\n    return (\n        isUttaksperiode(periode) &&\n        periode.forelder === Forelder.farMedmor &&\n        periode.konto === StønadskontoType.Fedrekvote &&\n        !!periode.erMorForSyk === false &&\n        periode.morsAktivitetIPerioden === undefined &&\n        !!periode.ønskerFlerbarnsdager === false &&\n        periode.ønskerSamtidigUttak === true\n    );\n};\n\nexport const isUttaksperiodeFarMedmorPgaFødsel = (\n    periode: Periode,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n): boolean => {\n    return (\n        isUttaksperiodeFarMedmorMedValgForUttakRundtFødsel(periode) &&\n        starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel(\n            periode.tidsperiode,\n            familiehendelsesdato,\n            termindato,\n        )\n    );\n};\n\nexport const isUttaksperiodeBareFarMedmorHarRett = (periode: Periode, morHarRett: boolean): boolean => {\n    return isUttaksperiode(periode) && periode.forelder === Forelder.farMedmor && !morHarRett;\n};\n\nexport const getFørsteUttaksdag2UkerFørFødsel = (familiehendelsesdato: Date, termindato: Date | undefined): Date => {\n    const terminEllerFamHendelsesdatoMinusToUker =\n        termindato !== undefined\n            ? dayjs(termindato).subtract(ANTALL_DAGER_TO_UKER, 'day')\n            : dayjs(familiehendelsesdato).subtract(ANTALL_DAGER_TO_UKER, 'day');\n    const datoÅRegneFra = dayjs.min(terminEllerFamHendelsesdatoMinusToUker, dayjs(familiehendelsesdato))!;\n    return Uttaksdagen(datoÅRegneFra.toDate()).denneEllerNeste();\n};\n\nexport const getSisteUttaksdag6UkerEtterFødsel = (familiehendelsesdato: Date): Date => {\n    const førsteUttaksdagForPeriodeEtterFødsel = Uttaksdagen(familiehendelsesdato).denneEllerNeste();\n    return Uttaksdagen(\n        dayjs(førsteUttaksdagForPeriodeEtterFødsel).add(ANTALL_DAGER_SEKS_UKER, 'day').toDate(),\n    ).forrige();\n};\n\nexport const starterTidsperiodeEtter2UkerFørFødsel = (\n    tidsperiode: any,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n): boolean => {\n    const førsteUttaksdagToUkerFørFødsel = getFørsteUttaksdag2UkerFørFødsel(familiehendelsesdato, termindato);\n    return dayjs(tidsperiode.fom).isSameOrAfter(førsteUttaksdagToUkerFørFødsel, 'day');\n};\n\nexport const starterUttaksperiodeFørFødsel = (periode: Periode, familiehendelsesdato: Date): boolean => {\n    return isUttaksperiode(periode) && dayjs(periode.tidsperiode.fom).isBefore(familiehendelsesdato, 'day');\n};\n\nexport const slutterTidsperiodeInnen6UkerEtterFødsel = (tidsperiode: any, familiehendelsesdato: Date): boolean => {\n    const sisteUttaksdag6UkerEtterFødsel = getSisteUttaksdag6UkerEtterFødsel(familiehendelsesdato);\n    return dayjs(tidsperiode.tom).isSameOrBefore(sisteUttaksdag6UkerEtterFødsel, 'day');\n};\n\nexport const starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel = (\n    tidsperiode: TidsperiodeDate,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n) => {\n    return (\n        starterTidsperiodeEtter2UkerFørFødsel(tidsperiode, familiehendelsesdato, termindato) &&\n        dayjs(tidsperiode.fom).isSameOrBefore(getSisteUttaksdag6UkerEtterFødsel(familiehendelsesdato), 'day')\n    );\n};\n\nexport const getFarMedmorUttakRundtFødsel = (\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n): Periode[] => {\n    return perioder.filter((p) => isUttaksperiodeFarMedmorPgaFødsel(p, familiehendelsesdato, termindato));\n};\n\nexport const erFarMedmorSinWLBTidsperiodeRundtFødsel = (\n    tidsperiode: TidsperiodeDate,\n    familiehendelsesdato: Date,\n    periodetype: Periodetype,\n    konto: StønadskontoType,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n    situasjon: Situasjon,\n): boolean => {\n    return (\n        tidsperiode !== undefined &&\n        isValidTidsperiode(tidsperiode) &&\n        erFarEllerMedmor &&\n        situasjon === 'fødsel' &&\n        andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n        periodetype === Periodetype.Uttak &&\n        (konto === StønadskontoType.Fedrekvote ||\n            konto === StønadskontoType.Foreldrepenger ||\n            konto === StønadskontoType.AktivitetsfriKvote) &&\n        starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel(tidsperiode, familiehendelsesdato, termindato)\n    );\n};\n\nexport const getLengdePåForeslåttWLBUttakFarMedmor = (familiehendelsesdato: Date, startDatoUttak: Date): number => {\n    const sisteUttaksDagFørFødsel = getSisteUttaksdag6UkerEtterFødsel(familiehendelsesdato);\n    const antallUttaksdagerFraStartDato = finnAntallDagerÅTrekke({\n        tidsperiode: { fom: startDatoUttak, tom: sisteUttaksDagFørFødsel },\n    } as Periode);\n    return Math.min(antallUttaksdagerFraStartDato, ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL);\n};\n\nexport const appendPeriodeNavnHvisUttakRundtFødselFarMedmor = (\n    intl: IntlShape,\n    periodeNavn: string,\n    periode: Periode,\n    situasjon: Situasjon,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n): string => {\n    return situasjon === 'fødsel' && isUttaksperiodeFarMedmorPgaFødsel(periode, familiehendelsesdato, termindato)\n        ? periodeNavn + intlUtils(intl, 'rundtFødsel')\n        : periodeNavn;\n};\n\nexport const farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato = (\n    periode: Periode,\n    familiehendelsesdato: Date,\n    morHarRett: boolean,\n    termindato: Date | undefined,\n) => {\n    return (\n        (isUttaksperiodeFarMedmorPgaFødsel(periode, familiehendelsesdato, termindato) ||\n            isUttaksperiodeBareFarMedmorHarRett(periode, morHarRett)) &&\n        tidperiodeOverlapperDato(periode.tidsperiode, familiehendelsesdato)\n    );\n};\n\nexport const getPerioderMedUttakRundtFødsel = (\n    uttaksplan: Periode[],\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n): Uttaksperiode[] => {\n    return uttaksplan.filter(\n        (p) =>\n            (isUttaksperiode(p) || isOverføringsperiode(p)) &&\n            starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel(\n                p.tidsperiode,\n                familiehendelsesdato,\n                termindato,\n            ),\n    ) as [];\n};\n\nexport const uttaksperiodeKanJusteresVedFødsel = (\n    ønskerJustertUttakVedFødsel: boolean | undefined,\n    termindato: Date | undefined,\n    uttaksperiodeFom: Date,\n) => {\n    return !!ønskerJustertUttakVedFødsel && termindato !== undefined && dayjs(uttaksperiodeFom).isSame(termindato, 'd');\n};\n","import { IntlShape } from 'react-intl';\nimport { PeriodeInfoType } from '../types/PeriodeInfoType';\nimport dayjs from 'dayjs';\nimport { dateToISOString } from '@navikt/sif-common-formik-ds/lib';\nimport { getFloatFromString } from './numberUtils';\nimport { capitalizeFirstLetter } from './stringUtils';\nimport { getStønadskontoNavn, getUttakAnnenPartStønadskontoNavn } from './stønadskontoerUtils';\nimport {\n    EksisterendeSak,\n    Forelder,\n    InfoPeriode,\n    MorsAktivitet,\n    NavnPåForeldre,\n    OppholdÅrsakType,\n    OverføringÅrsakType,\n    Periode,\n    PeriodeValidState,\n    Periodetype,\n    Situasjon,\n    StønadskontoType,\n    StønadskontoUttak,\n    Tidsperiode,\n    TidsperiodeDate,\n    Utsettelsesperiode,\n    UtsettelseÅrsakType,\n    UttakAnnenPartInfoPeriode,\n    Uttaksperiode,\n    isAnnenPartInfoPeriode,\n    isHull,\n    isOverføringsperiode,\n    isPeriodeUtenUttak,\n    isUttakAnnenPart,\n    isUttakAvFellesperiode,\n    isUttaksperiode,\n} from '../types';\nimport {\n    ISOStringToDate,\n    convertTidsperiodeToTidsperiodeDate,\n    isDateInTheFuture,\n    isDateTodayOrInTheFuture,\n} from './dateUtils';\nimport intlUtils from './intlUtils';\nimport { appendPeriodeNavnHvisUttakRundtFødselFarMedmor } from './wlbUtils';\nimport { Tidsperioden, erTidsperioderLike } from './Tidsperioden';\nimport { Perioden } from './Perioden';\n\nexport const mapTidsperiodeStringToTidsperiode = (t: Partial<Tidsperiode>): Partial<TidsperiodeDate> => {\n    return {\n        fom: ISOStringToDate(t.fom),\n        tom: ISOStringToDate(t.tom),\n    };\n};\n\nexport const mapTidsperiodeToTidsperiodeString = (t: Partial<TidsperiodeDate>): Partial<Tidsperiode> => {\n    return {\n        fom: dateToISOString(t.fom),\n        tom: dateToISOString(t.tom),\n    };\n};\n\nexport const stillingsprosentIsMoreThan0 = (stillingsprosent: string): boolean => {\n    const pst = getFloatFromString(stillingsprosent);\n    if (pst) {\n        return pst > 0;\n    }\n    return false;\n};\n\nexport const samtidigUttakProsentIsMax100 = (samtidigUttakProsent: string): boolean => {\n    const pst = getFloatFromString(samtidigUttakProsent);\n\n    if (pst) {\n        return pst <= 100;\n    }\n\n    return false;\n};\n\nexport const stillingsprosentIsLessThan100 = (stillingsprosent: string): boolean => {\n    const pst = getFloatFromString(stillingsprosent);\n    if (pst) {\n        return pst < 100;\n    }\n    return false;\n};\n\nconst isValidStillingsprosent = (pst: string | undefined): boolean =>\n    pst !== undefined && isNaN(parseFloat(pst)) === false;\n\nconst prettifyProsent = (pst: string | undefined): number | undefined => {\n    if (pst === undefined) {\n        return undefined;\n    }\n\n    const nbr = parseFloat(pst);\n    if (isNaN(nbr)) {\n        return undefined;\n    }\n    if (Math.round(nbr) === nbr) {\n        return Math.round(nbr);\n    }\n    return nbr;\n};\n\nexport const getUttaksprosentFromStillingsprosent = (\n    stillingsPst: number | undefined,\n    samtidigUttakPst: number | undefined,\n): number | undefined => {\n    if (samtidigUttakPst) {\n        return samtidigUttakPst;\n    }\n    if (stillingsPst) {\n        let prosent = (100 - stillingsPst) * 100;\n        prosent = Math.round(prosent) / 100;\n\n        return prosent;\n    }\n    return undefined;\n};\n\nexport const getOppholdskontoNavn = (\n    intl: IntlShape,\n    årsak: OppholdÅrsakType,\n    foreldernavn: string,\n    erMor: boolean,\n) => {\n    const navn = capitalizeFirstLetter(foreldernavn);\n    return erMor\n        ? intlUtils(intl, `uttaksplan.oppholdsårsaktype.foreldernavn.far.${årsak}`, { foreldernavn: navn })\n        : intlUtils(intl, `uttaksplan.oppholdsårsaktype.foreldernavn.mor.${årsak}`, { foreldernavn: navn });\n};\n\nexport const getStønadskontoFromOppholdsårsak = (årsak: OppholdÅrsakType): StønadskontoType => {\n    if (årsak === OppholdÅrsakType.UttakFedrekvoteAnnenForelder) {\n        return StønadskontoType.Fedrekvote;\n    }\n\n    if (årsak === OppholdÅrsakType.UttakMødrekvoteAnnenForelder) {\n        return StønadskontoType.Mødrekvote;\n    }\n\n    if (årsak === OppholdÅrsakType.UttakFellesperiodeAnnenForelder) {\n        return StønadskontoType.Fellesperiode;\n    }\n\n    if (årsak === OppholdÅrsakType.UttakForeldrepengerAnnenForelder) {\n        return StønadskontoType.Foreldrepenger;\n    }\n\n    return StønadskontoType.ForeldrepengerFørFødsel;\n};\n\nexport const getOppholdsÅrsakFromStønadskonto = (konto: StønadskontoType): OppholdÅrsakType | undefined => {\n    switch (konto) {\n        case StønadskontoType.Fedrekvote:\n            return OppholdÅrsakType.UttakFedrekvoteAnnenForelder;\n        case StønadskontoType.Mødrekvote:\n            return OppholdÅrsakType.UttakMødrekvoteAnnenForelder;\n        case StønadskontoType.Fellesperiode:\n            return OppholdÅrsakType.UttakFellesperiodeAnnenForelder;\n        default:\n            return undefined;\n    }\n};\n\nexport const getForelderFromPeriode = (periode: Periode): Forelder | undefined => {\n    if (!isHull(periode) && !isPeriodeUtenUttak(periode)) {\n        return periode.forelder;\n    }\n\n    return undefined;\n};\n\nexport const getForelderNavn = (forelder: Forelder, navnPåForeldre: NavnPåForeldre): string => {\n    let forelderNavn = '';\n    if (navnPåForeldre.farMedmor) {\n        forelderNavn = forelder === Forelder.mor ? navnPåForeldre.mor : navnPåForeldre.farMedmor;\n    } else {\n        forelderNavn = forelder === Forelder.mor ? navnPåForeldre.mor : forelder;\n    }\n    return capitalizeFirstLetter(forelderNavn);\n};\n\nconst getPeriodeTittelUttaksPeriode = (\n    intl: IntlShape,\n    periode: Uttaksperiode,\n    navnPåForeldre: NavnPåForeldre,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    situasjon: Situasjon,\n    erFarEllerMedmor?: boolean,\n    erAleneOmOmsorg?: boolean,\n) => {\n    const tittelMedNavn = getStønadskontoNavn(intl, periode.konto, navnPåForeldre, erFarEllerMedmor, erAleneOmOmsorg);\n    const tittel = appendPeriodeNavnHvisUttakRundtFødselFarMedmor(\n        intl,\n        tittelMedNavn,\n        periode,\n        situasjon,\n        familiehendelsesdato,\n        termindato,\n    );\n    if (\n        (periode.gradert && isValidStillingsprosent(periode.stillingsprosent)) ||\n        (periode.ønskerSamtidigUttak && isValidStillingsprosent(periode.samtidigUttakProsent))\n    ) {\n        return `${tittel} ${intlUtils(intl, 'gradering.prosent', {\n            stillingsprosent: getUttaksprosentFromStillingsprosent(\n                prettifyProsent(periode.stillingsprosent),\n                periode.samtidigUttakProsent ? prettifyProsent(periode.samtidigUttakProsent) : undefined,\n            ),\n        })}`;\n    }\n    return tittel;\n};\n\nconst getPeriodeTittelInfoPeriode = (\n    intl: IntlShape,\n    periode: InfoPeriode,\n    navnPåForeldre: NavnPåForeldre,\n    erFarEllerMedmor?: boolean,\n) => {\n    switch (periode.infotype) {\n        case PeriodeInfoType.uttakAnnenPart:\n            return getUttakAnnenPartStønadskontoNavn(\n                intl,\n                getStønadskontoFromOppholdsårsak(periode.årsak),\n                periode.forelder,\n                navnPåForeldre,\n                periode.samtidigUttakProsent,\n            );\n        case PeriodeInfoType.utsettelseAnnenPart:\n            return intlUtils(intl, `uttaksplan.periodetype.info.utsettelse.${periode.årsak}`, {\n                navn: getForelderNavn(periode.forelder, navnPåForeldre),\n            });\n        case PeriodeInfoType.avslåttPeriode:\n            if (\n                (periode.forelder === Forelder.mor && erFarEllerMedmor) ||\n                (periode.forelder === Forelder.farMedmor && !erFarEllerMedmor)\n            ) {\n                return intlUtils(intl, 'uttaksplan.periodetype.info.avslåttPeriode.annenPart', {\n                    navn: getForelderNavn(periode.forelder, navnPåForeldre),\n                });\n            }\n            return intlUtils(intl, `uttaksplan.periodetype.info.${periode.infotype}`);\n    }\n};\n\nexport const getPeriodeTittel = (\n    intl: IntlShape,\n    periode: Periode,\n    navnPåForeldre: NavnPåForeldre,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    situasjon: Situasjon,\n    erFarEllerMedmor?: boolean,\n    erAleneOmOmsorg?: boolean,\n): string => {\n    switch (periode.type) {\n        case Periodetype.Uttak: {\n            return getPeriodeTittelUttaksPeriode(\n                intl,\n                periode,\n                navnPåForeldre,\n                familiehendelsesdato,\n                termindato,\n                situasjon,\n                erFarEllerMedmor,\n                erAleneOmOmsorg,\n            );\n        }\n        case Periodetype.PeriodeUtenUttak:\n            return intlUtils(intl, 'uttaksplan.periodetype.periodeUtenUttak.tittel');\n        case Periodetype.Overføring:\n            return getStønadskontoNavn(intl, periode.konto, navnPåForeldre);\n        case Periodetype.Utsettelse:\n            if (periode.årsak) {\n                return intlUtils(intl, 'uttaksplan.periodeliste.utsettelsesårsak', {\n                    årsak: intlUtils(intl, `uttaksplan.utsettelsesårsak.${periode.årsak}`),\n                });\n            }\n            return intlUtils(intl, 'uttaksplan.periodeliste.utsettelsesårsak.ukjent');\n        case Periodetype.Opphold:\n            return getOppholdskontoNavn(\n                intl,\n                periode.årsak,\n                getForelderNavn(periode.forelder, navnPåForeldre),\n                periode.forelder === 'mor',\n            );\n        case Periodetype.Hull:\n            return intlUtils(intl, 'uttaksplan.periodetype.hull.tittel');\n        case Periodetype.Info:\n            return getPeriodeTittelInfoPeriode(intl, periode, navnPåForeldre, erFarEllerMedmor);\n    }\n};\n\nexport const erSentGradertUttak = (periode: Periode) =>\n    periode.type === Periodetype.Uttak &&\n    !isDateTodayOrInTheFuture(dateToISOString(periode.tidsperiode.fom)) &&\n    periode.gradert;\n\nexport const erPeriodeInnvilget = (periode: Periode, eksisterendeSak?: EksisterendeSak): boolean => {\n    if (eksisterendeSak === undefined) {\n        return false;\n    }\n    const saksperiode = getSaksperiode(periode, eksisterendeSak);\n    return saksperiode ? saksperiode.resultat.innvilget : false;\n};\n\nconst getSaksperiode = (periode: Periode, ekisterendeSak: EksisterendeSak) => {\n    return ekisterendeSak.saksperioder.find((saksperiode) =>\n        erTidsperioderLike(convertTidsperiodeToTidsperiodeDate(saksperiode.periode), periode.tidsperiode),\n    );\n};\n\nexport const getPeriodeForelderNavn = (periode: Periode, navnPåForeldre: NavnPåForeldre): string => {\n    if (\n        periode.type === Periodetype.Utsettelse ||\n        periode.type === Periodetype.Uttak ||\n        periode.type === Periodetype.Overføring ||\n        periode.type === Periodetype.Opphold ||\n        periode.type === Periodetype.Info\n    ) {\n        return getForelderNavn(periode.forelder, navnPåForeldre);\n    }\n    return 'Ingen forelder registrert';\n};\n\nexport const getSamtidigUttakEllerGraderingsProsent = (periode: UttakAnnenPartInfoPeriode): number | undefined => {\n    const periodeErGradert = periode.stillingsprosent !== undefined;\n    const periodeErSamtidigUttak = periode.samtidigUttakProsent !== undefined;\n\n    if (periodeErSamtidigUttak) {\n        return (100 - getFloatFromString(periode.samtidigUttakProsent)!) / 100;\n    }\n\n    if (periodeErGradert) {\n        return getFloatFromString(periode.stillingsprosent)! / 100;\n    }\n\n    return undefined;\n};\n\nexport const justerAndrePartsUttakAvFellesperiodeOmMulig = (\n    perioder: Periode[],\n    uttakFellesperiode: StønadskontoUttak | undefined,\n): Periode[] => {\n    if (uttakFellesperiode === undefined || uttakFellesperiode.dager >= 0 || perioder.length === 0) {\n        return perioder;\n    }\n\n    const dagerGjenståendeFellesperiode = uttakFellesperiode.dager;\n\n    const sisteFellesperiodeAnnenPart = [...perioder]\n        .reverse()\n        .find((p) => isAnnenPartInfoPeriode(p) && p.årsak === OppholdÅrsakType.UttakFellesperiodeAnnenForelder);\n\n    if (sisteFellesperiodeAnnenPart !== undefined && isAnnenPartInfoPeriode(sisteFellesperiodeAnnenPart)) {\n        const dagerMedFellesperiodeISistePeriode = Perioden(sisteFellesperiodeAnnenPart).getAntallUttaksdager();\n        const justeringsProsent = getSamtidigUttakEllerGraderingsProsent(sisteFellesperiodeAnnenPart) || 1;\n        const diff = dagerGjenståendeFellesperiode / justeringsProsent + dagerMedFellesperiodeISistePeriode;\n        const indexSistePeriode = perioder.findIndex((p) => p.id === sisteFellesperiodeAnnenPart.id);\n\n        if (dagerGjenståendeFellesperiode < 0 && diff > 0) {\n            perioder[indexSistePeriode] = {\n                ...sisteFellesperiodeAnnenPart,\n                tidsperiode: Tidsperioden(sisteFellesperiodeAnnenPart.tidsperiode).setUttaksdager(diff),\n            };\n            return perioder;\n        }\n\n        if (dagerGjenståendeFellesperiode < 0 && diff === 0) {\n            return perioder.splice(indexSistePeriode, 1);\n        }\n    }\n\n    return perioder;\n};\n\nexport const getSlettPeriodeTekst = (periodetype: Periodetype): string => {\n    switch (periodetype) {\n        case Periodetype.Uttak:\n            return 'uttaksplan.slettPeriode.uttak';\n        case Periodetype.Overføring:\n            return 'uttaksplan.slettPeriode.overføring';\n        case Periodetype.Opphold:\n            return 'uttaksplan.slettPeriode.opphold';\n        case Periodetype.Utsettelse:\n            return 'uttaksplan.slettPeriode.utsettelse';\n        case Periodetype.Info:\n            return 'uttaksplan.slettPeriode.info';\n        default:\n            return '';\n    }\n};\n\nconst erPeriodeFomEllerEtterDato = (periode: Periode, dato: Date): boolean => {\n    return (\n        periode.tidsperiode.fom !== undefined &&\n        periode.tidsperiode.tom !== undefined &&\n        dayjs(periode.tidsperiode.fom).isSameOrAfter(dato, 'day') &&\n        dayjs(periode.tidsperiode.tom).isSameOrAfter(dato, 'day')\n    );\n};\n\nexport const erPeriodeFørDato = (periode: Periode, dato: Date) => {\n    return erPeriodeFomEllerEtterDato(periode, dato) === false;\n};\n\nexport const erGradering = (periode: Periode) => periode.type === Periodetype.Uttak && periode.gradert === true;\n\nexport const erUttakEllerOppholdMerEnnTreMånederSiden = (periode: Periode) =>\n    (periode.type === Periodetype.Uttak || periode.type === Periodetype.Opphold) &&\n    dayjs(periode.tidsperiode.fom).isBefore(dayjs().startOf('day').subtract(3, 'months'), 'day');\n\nexport const erUtsettelsePgaSykdom = (periode: Utsettelsesperiode) =>\n    periode.årsak === UtsettelseÅrsakType.Sykdom ||\n    periode.årsak === UtsettelseÅrsakType.InstitusjonSøker ||\n    periode.årsak === UtsettelseÅrsakType.InstitusjonBarnet;\n\nexport const erUttakGrunnetSykdom = (periode: Periode) => {\n    if (\n        isOverføringsperiode(periode) &&\n        (periode.årsak === OverføringÅrsakType.institusjonsoppholdAnnenForelder ||\n            periode.årsak === OverføringÅrsakType.sykdomAnnenForelder)\n    ) {\n        return true;\n    }\n\n    if (isUttaksperiode(periode)) {\n        if (\n            periode.erMorForSyk === true ||\n            periode.morsAktivitetIPerioden === MorsAktivitet.TrengerHjelp ||\n            periode.morsAktivitetIPerioden === MorsAktivitet.Innlagt\n        ) {\n            return true;\n        }\n    }\n\n    if (\n        isUttakAvFellesperiode(periode) &&\n        (periode.morsAktivitetIPerioden === MorsAktivitet.Innlagt ||\n            periode.morsAktivitetIPerioden === MorsAktivitet.TrengerHjelp)\n    ) {\n        return true;\n    }\n\n    return false;\n};\n\nexport const erUttakTilbakeITid = (periode: Periode) =>\n    isUttaksperiode(periode) && !isDateInTheFuture(dateToISOString(periode.tidsperiode.fom));\n\nexport const erUtsettelseTilbakeITid = (periode: Periode) =>\n    periode.type === Periodetype.Utsettelse && !isDateInTheFuture(dateToISOString(periode.tidsperiode.fom));\n\nexport const erUtsettelseGrunnetPgaArbeid = (periode: Utsettelsesperiode) =>\n    periode.årsak === UtsettelseÅrsakType.Arbeid;\n\nexport const erUtsettelse = (periode: Periode) => periode.type === Periodetype.Utsettelse;\n\nconst erUtsettelsePgaFerieEllerArbeid = (periode: Periode) =>\n    periode.type === Periodetype.Utsettelse &&\n    (periode.årsak === UtsettelseÅrsakType.Ferie || periode.årsak === UtsettelseÅrsakType.Arbeid);\n\nexport const erSenUtsettelsePgaFerieEllerArbeid = (periode: Periode) =>\n    erUtsettelseTilbakeITid(periode) && erUtsettelsePgaFerieEllerArbeid(periode);\n\nexport const erÅrsakSykdomEllerInstitusjonsopphold = (årsak: UtsettelseÅrsakType | OverføringÅrsakType) =>\n    årsak === UtsettelseÅrsakType.Sykdom ||\n    årsak === UtsettelseÅrsakType.InstitusjonBarnet ||\n    årsak === UtsettelseÅrsakType.InstitusjonSøker ||\n    årsak === OverføringÅrsakType.institusjonsoppholdAnnenForelder ||\n    årsak === OverføringÅrsakType.sykdomAnnenForelder;\n\nexport const finnesPeriodeIOpprinneligPlan = (periode: Periode, opprinneligPlan: Periode[]): boolean => {\n    return opprinneligPlan.some((op) => Perioden(periode).erLik(op, true, true));\n};\n\nexport const getAnnenForelderSamtidigUttakPeriode = (periode: Periode, perioder: Periode[]): Periode | undefined => {\n    if (isUttaksperiode(periode)) {\n        const samtidigUttak = perioder\n            .filter((p) => isUttakAnnenPart(p))\n            .find(\n                (p) =>\n                    isUttakAnnenPart(p) &&\n                    dayjs(periode.tidsperiode.fom).isSame(p.tidsperiode.fom) &&\n                    p.ønskerSamtidigUttak === true &&\n                    p.id !== periode.id,\n            );\n\n        return samtidigUttak !== undefined ? samtidigUttak : undefined;\n    }\n\n    return undefined;\n};\n\nexport const getIsValidStateForPerioder = (previousState: PeriodeValidState[], periode: Periode, isValid: boolean) => {\n    const periodeIState = previousState.find((p) => p.id === periode.id);\n    if (periodeIState && periodeIState.isValid !== isValid) {\n        return previousState.map((p) => {\n            if (p.id === periodeIState.id) {\n                return { ...p, isValid };\n            }\n            return p;\n        });\n    }\n    if (!periodeIState) {\n        return [...previousState, { id: periode.id, isValid }];\n    }\n    return previousState;\n};\n","import { Perioden } from './Perioden';\nimport { getStønadskontoFromOppholdsårsak } from './periodeUtils';\nimport { getFloatFromString } from './numberUtils';\nimport {\n    AvslåttPeriode,\n    InfoPeriode,\n    Oppholdsperiode,\n    Overføringsperiode,\n    Periode,\n    PeriodeInfoType,\n    Periodetype,\n    StønadskontoUttak,\n    TilgjengeligStønadskonto,\n    UttakAnnenPartInfoPeriode,\n    Uttaksperiode,\n    isAvslåttPeriode,\n    isInfoPeriode,\n    isOppholdsperiode,\n    isOverføringsperiode,\n    isUttaksperiode,\n} from '../types';\n\nexport const finnAntallDagerÅTrekke = (periode: Periode): number => {\n    const dager = Perioden(periode).getAntallUttaksdager();\n    if (isUttaksperiode(periode)) {\n        const periodeErGradert = periode.stillingsprosent !== undefined;\n        const periodeErSamtidigUttak = periode.samtidigUttakProsent !== undefined;\n\n        if ((periodeErGradert && periodeErSamtidigUttak) || periodeErGradert) {\n            const graderingsProsent = (100 - getFloatFromString(periode.stillingsprosent)!) / 100;\n\n            return dager * graderingsProsent;\n        } else if (periodeErSamtidigUttak) {\n            return dager * (getFloatFromString(periode.samtidigUttakProsent)! / 100);\n        } else {\n            return dager;\n        }\n    }\n    return dager;\n};\n\nexport const getAllePerioderMedUttaksinfoFraUttaksplan = (perioder: Periode[]): Uttaksperiode[] => {\n    return [\n        ...perioder.filter(isUttaksperiode),\n        ...getUttakFraOppholdsperioder(perioder.filter(isOppholdsperiode)),\n        ...getUttakFraOverføringsperioder(perioder.filter(isOverføringsperiode)),\n        ...getUttakFraInfoperioder(perioder.filter(isInfoPeriode)),\n        ...getUttakFraAvslåttePerioder(perioder.filter(isAvslåttPeriode)),\n    ];\n};\n\nexport const beregnGjenståendeUttaksdager = (\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    uttaksplan: Periode[],\n    beregnDagerBrukt: boolean,\n): StønadskontoUttak[] => {\n    const alleUttakIUttaksplan = getAllePerioderMedUttaksinfoFraUttaksplan(uttaksplan);\n    return tilgjengeligeStønadskontoer.map((konto): StønadskontoUttak => {\n        let antallDager = beregnDagerBrukt ? 0 : konto.dager;\n        const uttaksplanPerioder = alleUttakIUttaksplan.filter((p) => p.konto === konto.konto);\n        if (uttaksplanPerioder) {\n            uttaksplanPerioder.forEach((p: Periode) => {\n                if (p.type === Periodetype.Uttak || p.type === Periodetype.Overføring || isAvslåttPeriode(p)) {\n                    antallDager = beregnDagerBrukt\n                        ? antallDager + finnAntallDagerÅTrekke(p)\n                        : antallDager - finnAntallDagerÅTrekke(p);\n                }\n            });\n\n            antallDager = beregnDagerBrukt ? Math.floor(antallDager) : Math.ceil(antallDager);\n        }\n\n        return {\n            konto: konto.konto,\n            dager: antallDager,\n        };\n    });\n};\n\nexport const beregnBrukteUttaksdager = (\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    uttaksplan: Periode[],\n): StønadskontoUttak[] => {\n    return beregnGjenståendeUttaksdager(tilgjengeligeStønadskontoer, uttaksplan, true);\n};\n\nconst getUttakFraOppholdsperioder = (oppholdsperioder: Oppholdsperiode[]): Uttaksperiode[] => {\n    if (oppholdsperioder.length === 0) {\n        return [];\n    }\n    return oppholdsperioder.map(\n        (opphold: Oppholdsperiode): Uttaksperiode => ({\n            id: opphold.id,\n            tidsperiode: opphold.tidsperiode,\n            type: Periodetype.Uttak,\n            konto: getStønadskontoFromOppholdsårsak(opphold.årsak)!,\n            forelder: opphold.forelder,\n        }),\n    );\n};\nconst getUttakFraOverføringsperioder = (overføringer: Overføringsperiode[]): Uttaksperiode[] => {\n    if (overføringer.length === 0) {\n        return [];\n    }\n    return overføringer.map(\n        (overføring): Uttaksperiode => ({\n            id: overføring.id,\n            tidsperiode: overføring.tidsperiode,\n            type: Periodetype.Uttak,\n            konto: overføring.konto,\n            forelder: overføring.forelder,\n        }),\n    );\n};\n\nconst getUttakFraInfoperioder = (perioder: InfoPeriode[]): Uttaksperiode[] => {\n    if (perioder.length === 0) {\n        return [];\n    }\n    const oppholdAnnenPart: UttakAnnenPartInfoPeriode[] = [];\n    perioder\n        .filter((periode) => isAvslåttPeriode(periode) === false)\n        .forEach((periode) => {\n            if (periode.infotype === PeriodeInfoType.uttakAnnenPart) {\n                oppholdAnnenPart.push(periode);\n            }\n        });\n    return oppholdAnnenPart.map((periode): Uttaksperiode => {\n        const { type, årsak, ...rest } = periode;\n        return {\n            type: Periodetype.Uttak,\n            konto: getStønadskontoFromOppholdsårsak(periode.årsak),\n            ...rest,\n        };\n    });\n};\n\nconst getUttakFraAvslåttePerioder = (perioder: AvslåttPeriode[]): Uttaksperiode[] => {\n    if (perioder.length === 0) {\n        return [];\n    }\n\n    return perioder\n        .filter((p) => p.avslåttPeriodeType === Periodetype.Uttak || p.avslåttPeriodeType === Periodetype.Utsettelse)\n        .map(\n            (periode): Uttaksperiode => ({\n                type: Periodetype.Uttak,\n                konto: periode.kontoType!,\n                tidsperiode: periode.tidsperiode,\n                id: periode.id,\n                forelder: periode.forelder,\n            }),\n        );\n};\n"],"names":["MorsAktivitet","OppholdÅrsakType","OverføringÅrsakType","onlyNumbersRegExp","getMod11","strValue","checkNbr","mod","i","result","er9Tall","orgnr","starterPå8Eller9","erGyldigNorskOrgnummer","numberRegExp","trimNumberValue","value","getFloatFromString","trimmedValue","getVelgbareStønadskontotyper","stønadskontoTyper","kontoType","StønadskontoType","getStønadskontoNavn","intl","konto","navnPåForeldre","erFarEllerMedmor","erAleneOmOmsorg","navn","getNavnGenitivEierform","capitalizeFirstLetter","getUttakAnnenPartStønadskontoNavn","periodeForelder","samtidigUttakProsent","forelderNavn","getForelderNavn","intlTekst","intlUtils","ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL","ANTALL_DAGER_TO_UKER","ANTALL_DAGER_SEKS_UKER","gjelderWLBReglerFarMedmorRundtFødsel","familiehendelsesdato","søkerErFarEllerMedmor","morHarRett","situasjon","andreAugust2022ReglerGjelder","isUttaksperiodeFarMedmorMedValgForUttakRundtFødsel","periode","isUttaksperiode","Forelder","isUttaksperiodeFarMedmorPgaFødsel","termindato","starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel","isUttaksperiodeBareFarMedmorHarRett","getFørsteUttaksdag2UkerFørFødsel","terminEllerFamHendelsesdatoMinusToUker","dayjs","datoÅRegneFra","Uttaksdagen","getSisteUttaksdag6UkerEtterFødsel","førsteUttaksdagForPeriodeEtterFødsel","starterTidsperiodeEtter2UkerFørFødsel","tidsperiode","førsteUttaksdagToUkerFørFødsel","starterUttaksperiodeFørFødsel","slutterTidsperiodeInnen6UkerEtterFødsel","sisteUttaksdag6UkerEtterFødsel","getFarMedmorUttakRundtFødsel","perioder","p","erFarMedmorSinWLBTidsperiodeRundtFødsel","periodetype","isValidTidsperiode","Periodetype","getLengdePåForeslåttWLBUttakFarMedmor","startDatoUttak","sisteUttaksDagFørFødsel","antallUttaksdagerFraStartDato","finnAntallDagerÅTrekke","appendPeriodeNavnHvisUttakRundtFødselFarMedmor","periodeNavn","farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato","tidperiodeOverlapperDato","getPerioderMedUttakRundtFødsel","uttaksplan","isOverføringsperiode","uttaksperiodeKanJusteresVedFødsel","ønskerJustertUttakVedFødsel","uttaksperiodeFom","mapTidsperiodeStringToTidsperiode","ISOStringToDate","stillingsprosentIsMoreThan0","stillingsprosent","pst","samtidigUttakProsentIsMax100","stillingsprosentIsLessThan100","isValidStillingsprosent","prettifyProsent","nbr","getUttaksprosentFromStillingsprosent","stillingsPst","samtidigUttakPst","prosent","getOppholdskontoNavn","årsak","foreldernavn","erMor","getStønadskontoFromOppholdsårsak","getOppholdsÅrsakFromStønadskonto","forelder","getPeriodeTittelUttaksPeriode","tittelMedNavn","tittel","getPeriodeTittelInfoPeriode","PeriodeInfoType","getPeriodeTittel","erPeriodeInnvilget","eksisterendeSak","saksperiode","getSaksperiode","ekisterendeSak","erTidsperioderLike","convertTidsperiodeToTidsperiodeDate","getPeriodeForelderNavn","getSlettPeriodeTekst","erPeriodeFomEllerEtterDato","dato","erPeriodeFørDato","erUttakEllerOppholdMerEnnTreMånederSiden","erUtsettelsePgaSykdom","UtsettelseÅrsakType","erUttakGrunnetSykdom","isUttakAvFellesperiode","erUttakTilbakeITid","isDateInTheFuture","dateToISOString","erUtsettelseTilbakeITid","erUtsettelseGrunnetPgaArbeid","erUtsettelse","erUtsettelsePgaFerieEllerArbeid","erSenUtsettelsePgaFerieEllerArbeid","erÅrsakSykdomEllerInstitusjonsopphold","finnesPeriodeIOpprinneligPlan","opprinneligPlan","op","Perioden","getAnnenForelderSamtidigUttakPeriode","samtidigUttak","isUttakAnnenPart","getIsValidStateForPerioder","previousState","isValid","periodeIState","dager","periodeErGradert","periodeErSamtidigUttak","graderingsProsent","getAllePerioderMedUttaksinfoFraUttaksplan","getUttakFraOppholdsperioder","isOppholdsperiode","getUttakFraOverføringsperioder","getUttakFraInfoperioder","isInfoPeriode","getUttakFraAvslåttePerioder","isAvslåttPeriode","beregnGjenståendeUttaksdager","tilgjengeligeStønadskontoer","beregnDagerBrukt","alleUttakIUttaksplan","antallDager","uttaksplanPerioder","beregnBrukteUttaksdager","oppholdsperioder","opphold","overføringer","overføring","oppholdAnnenPart","type","rest"],"mappings":"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"}