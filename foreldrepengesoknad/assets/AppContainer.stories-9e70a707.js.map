{"version":3,"file":"AppContainer.stories-9e70a707.js","sources":["../../../../packages/fp-common/src/common/utils/localeUtils.ts","../../src/app/pages/ikkeMyndig/IkkeMyndig.tsx","../../src/app/utils/hooks/useDebounce.ts","../../src/app/steps/uttaksplan/components/vil-du-gå-tilbake-modal/VilDuGåTilbakeModal.tsx","../../src/app/steps/uttaksplan/UttaksplanFormConfig.ts","../../src/app/steps/uttaksplan/UttaksplanFormUtils.ts","../../src/app/steps/uttaksplan/automatisk-justering-form/automatiskJusteringUtils.ts","../../src/app/steps/uttaksplan/UttaksplanStep.tsx","../../src/app/routes/isAvailable.ts","../../src/app/routes/ForeldrepengesøknadRoutes.tsx","../../src/app/utils/mellomlagringUtils.ts","../../src/app/Foreldrepengesøknad.tsx","../../src/app/errorBoundary/ErrorBoundary.tsx","../../src/app/utils/browserUtils.ts","../../src/app/AppContainer.tsx"],"sourcesContent":["import { Locale } from '../types/Locale';\n\nconst LocaleSessionKey = 'selectedLocale';\n\nexport const getLocaleFromSessionStorage = (): Locale => {\n    return (sessionStorage.getItem(LocaleSessionKey) as Locale) || 'nb';\n};\n\nexport const setLocaleInSessionStorage = (locale: Locale): void => {\n    sessionStorage.setItem(LocaleSessionKey, locale);\n};\n\nexport const getNynorskLocale = () => {\n    if (Intl.NumberFormat.supportedLocalesOf('no-NN').length > 0) {\n        return 'no-NN';\n    }\n    return 'nn';\n};\n\nexport const getBokmålLocale = () => {\n    if (Intl.NumberFormat.supportedLocalesOf('no-NB').length > 0) {\n        return 'no-NB';\n    }\n    return 'nb';\n};\n\nexport const getLocaleForApi = (locale: string): Locale => {\n    switch (locale) {\n        case 'nn':\n        case 'no-NN':\n            return 'nn';\n        default:\n            return 'nb';\n    }\n};\n","import { intlUtils, links } from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport Feilside from '../feilside/Feilside';\n\ninterface Props {\n    fornavn: string;\n}\n\nconst IkkeMyndig: FunctionComponent<Props> = ({ fornavn }) => {\n    const intl = useIntl();\n\n    return (\n        <Feilside\n            dokumenttittel=\"NAV Foreldrepengesøknad\"\n            ingress={intlUtils(intl, 'velkommen.ingress')}\n            tittel={intlUtils(intl, 'velkommen.tittel')}\n            illustrasjon={{\n                tittel: intlUtils(intl, 'velkommen.ikkeMyndig.tittel', {\n                    navn: fornavn.toLowerCase(),\n                }),\n                tekst: intlUtils(intl, 'velkommen.ikkeMyndig.ingress'),\n                lenke: {\n                    tekst: intlUtils(intl, 'velkommen.ikkeMyndig.boblelenketekst'),\n                    url: links.papirsøknad,\n                },\n            }}\n            skalKunneGåTilbakeTilSøknad={false}\n        />\n    );\n};\n\nexport default IkkeMyndig;\n","import { useState, useEffect } from 'react';\n\nconst useDebounce = (value: any, delay: number) => {\n    const [debouncedValue, setDebouncedValue] = useState(value);\n\n    useEffect(() => {\n        const handler = setTimeout(() => {\n            setDebouncedValue(value);\n        }, delay);\n\n        return () => {\n            clearTimeout(handler);\n        };\n    }, [value, delay]);\n\n    return debouncedValue;\n};\n\nexport default useDebounce;\n","import { bemUtils, Block, intlUtils } from '@navikt/fp-common';\nimport SøknadRoutes from 'app/routes/routes';\nimport { Dispatch, FunctionComponent, SetStateAction } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useNavigate } from 'react-router-dom';\nimport { BodyShort, Button, Heading, Modal } from '@navikt/ds-react';\n\nimport './vilDuGåTilbakeModal.less';\n\ninterface Props {\n    isOpen: boolean;\n    setIsOpen: Dispatch<SetStateAction<boolean>>;\n}\n\nconst VilDuGåTilbakeModal: FunctionComponent<Props> = ({ isOpen, setIsOpen }) => {\n    const intl = useIntl();\n    const bem = bemUtils('vilDuGåTilbakeModal');\n    const navigate = useNavigate();\n\n    return (\n        <Modal\n            className={bem.block}\n            aria-label={'Vil du gå tilbake'}\n            closeButton={false}\n            open={isOpen}\n            onClose={() => setIsOpen(false)}\n        >\n            <Block padBottom=\"l\">\n                <Heading size=\"small\" as=\"h1\">\n                    {intlUtils(intl, 'uttaksplan.vilDuGåTilbakeModal.tittel')}\n                </Heading>\n            </Block>\n            <Block padBottom=\"l\">\n                <BodyShort>{intlUtils(intl, 'uttaksplan.vilDuGåTilbakeModal.intro')}</BodyShort>\n            </Block>\n            <Block padBottom=\"l\">\n                <BodyShort>{intlUtils(intl, 'uttaksplan.vilDuGåTilbakeModal.spørsmål')}</BodyShort>\n            </Block>\n            <div className={bem.element('knapperad')}>\n                <Button\n                    onClick={() => {\n                        setIsOpen(false);\n                        navigate(SøknadRoutes.UTTAKSPLAN_INFO);\n                    }}\n                >\n                    <FormattedMessage id=\"uttaksplan.vilDuGåTilbakeModal.okLabel\" />\n                </Button>\n                <Button variant=\"secondary\" onClick={() => setIsOpen(false)}>\n                    <FormattedMessage id=\"uttaksplan.vilDuGåTilbakeModal.avbrytLabel\" />\n                </Button>\n            </div>\n        </Modal>\n    );\n};\n\nexport default VilDuGåTilbakeModal;\n","import { YesOrNo, getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\n\nexport enum UttaksplanFormField {\n    ønskerAutomatiskJustering = 'ønskerAutomatiskJustering',\n}\n\nexport interface UttaksplanFormData {\n    [UttaksplanFormField.ønskerAutomatiskJustering]: YesOrNo;\n}\n\nexport const UttaksplanFormComponents = getTypedFormComponents<UttaksplanFormField, UttaksplanFormData>();\n","import { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { UttaksplanFormData, UttaksplanFormField } from './UttaksplanFormConfig';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\nimport { convertBooleanOrUndefinedToYesOrNo, convertYesOrNoOrUndefinedToBoolean } from '@navikt/fp-common';\n\nexport const cleanUttaksplanFormData = (\n    values: UttaksplanFormData,\n    visibility: QuestionVisibility<UttaksplanFormField, undefined>,\n): UttaksplanFormData => {\n    const cleanedData: UttaksplanFormData = {\n        ønskerAutomatiskJustering: visibility.isVisible(UttaksplanFormField.ønskerAutomatiskJustering)\n            ? values.ønskerAutomatiskJustering\n            : YesOrNo.UNANSWERED,\n    };\n\n    return cleanedData;\n};\n\nexport const mapUttaksplanFormToState = (values: Partial<UttaksplanFormData>): boolean | undefined => {\n    return convertYesOrNoOrUndefinedToBoolean(values.ønskerAutomatiskJustering);\n};\n\nexport const mapUttaksplanFormValueToState = (value: YesOrNo): boolean | undefined => {\n    return convertYesOrNoOrUndefinedToBoolean(value);\n};\n\nexport const getUttaksplanFormInitialValues = (ønskerAutomatiskJustering: boolean | undefined): UttaksplanFormData => {\n    return {\n        ønskerAutomatiskJustering:\n            ønskerAutomatiskJustering !== undefined\n                ? convertBooleanOrUndefinedToYesOrNo(ønskerAutomatiskJustering)\n                : YesOrNo.UNANSWERED,\n    };\n};\n","import {\n    Barn,\n    BarnType,\n    Forelder,\n    Periode,\n    Situasjon,\n    StønadskontoType,\n    Uttaksdagen,\n    andreAugust2022ReglerGjelder,\n    isUfødtBarn,\n    isUttaksperiode,\n} from '@navikt/fp-common';\nimport dayjs from 'dayjs';\n\nexport const getKanPeriodenRundtFødselJusteres = (\n    periodeRundtFødsel: Periode,\n    termindato: Date | undefined,\n): boolean => {\n    return (\n        termindato !== undefined &&\n        isUttaksperiode(periodeRundtFødsel) &&\n        dayjs(periodeRundtFødsel.tidsperiode.fom).isSame(Uttaksdagen(termindato).denneEllerNeste(), 'day') &&\n        periodeRundtFødsel.forelder === Forelder.farMedmor &&\n        periodeRundtFødsel.konto === StønadskontoType.Fedrekvote &&\n        periodeRundtFødsel.ønskerSamtidigUttak === true &&\n        periodeRundtFødsel.ønskerFlerbarnsdager !== true\n    );\n};\n\nexport const getKanJustereAutomatiskVedFødsel = (\n    perioderMedUttakRundtFødsel: Periode[],\n    termindato: Date | undefined,\n    erFarEllerMedmor: boolean,\n    barn: Barn,\n): boolean => {\n    return (\n        barn.type === BarnType.UFØDT &&\n        erFarEllerMedmor &&\n        perioderMedUttakRundtFødsel.length === 1 &&\n        getKanPeriodenRundtFødselJusteres(perioderMedUttakRundtFødsel[0], termindato)\n    );\n};\n\nexport const getVisAutomatiskJusteringForm = (\n    erFarEllerMedmor: boolean,\n    familiehendelsesdato: Date,\n    situasjon: Situasjon,\n    perioderMedUttakRundtFødsel: Periode[],\n    barn: Barn,\n    termindato: Date | undefined,\n    bareFarHarRett: boolean,\n): boolean => {\n    return (\n        erFarEllerMedmor &&\n        andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n        situasjon === 'fødsel' &&\n        perioderMedUttakRundtFødsel.length !== 0 &&\n        isUfødtBarn(barn) &&\n        termindato !== undefined &&\n        !bareFarHarRett\n    );\n};\n","import {\n    Block,\n    Dekningsgrad,\n    Forelder,\n    getAktiveArbeidsforhold,\n    getErMorUfør,\n    getFarMedmorErAleneOmOmsorg,\n    getForeldreparSituasjon,\n    getKjønnFromFnr,\n    getMorErAleneOmOmsorg,\n    getMorHarRettPåForeldrepengerINorgeEllerEØS,\n    getNavnPåForeldre,\n    getPerioderMedUttakRundtFødsel,\n    intlUtils,\n    isAnnenForelderOppgitt,\n    isFarEllerMedmor,\n    ISOStringToDate,\n    isUfødtBarn,\n    isUttakAnnenPart,\n    isUttakAvForeldrepengerFørFødsel,\n    isUttaksperiode,\n    Periode,\n    Periodene,\n    SenEndringÅrsak,\n    Step,\n    StepButtonWrapper,\n} from '@navikt/fp-common';\nimport SøknadRoutes from 'app/routes/routes';\nimport useOnValidSubmit from 'app/utils/hooks/useOnValidSubmit';\nimport useAvbrytSøknad from 'app/utils/hooks/useAvbrytSøknad';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport stepConfig, { getPreviousStepHref } from '../stepsConfig';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport { getFamiliehendelsedato, getTermindato } from 'app/utils/barnUtils';\nimport actionCreator from 'app/context/action/actionCreator';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport Api from 'app/api/api';\nimport getStønadskontoParams, {\n    getAntallBarnSomSkalBrukesFraSaksgrunnlagBeggeParter,\n    getTermindatoSomSkalBrukesFraSaksgrunnlagBeggeParter,\n} from 'app/api/getStønadskontoParams';\nimport { getValgtStønadskontoFor80Og100Prosent } from 'app/utils/stønadskontoUtils';\nimport useDebounce from 'app/utils/hooks/useDebounce';\nimport { getPerioderSomSkalSendesInn, storeAppState } from 'app/utils/submitUtils';\nimport { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport useFortsettSøknadSenere from 'app/utils/hooks/useFortsettSøknadSenere';\nimport { getEndringstidspunkt, getMorsSisteDag } from 'app/utils/dateUtils';\nimport { cleanupInvisibleCharsFromTilleggsopplysninger } from 'app/utils/tilleggsopplysningerUtils';\nimport VilDuGåTilbakeModal from './components/vil-du-gå-tilbake-modal/VilDuGåTilbakeModal';\nimport { UttaksplanFormComponents } from 'app/steps/uttaksplan/UttaksplanFormConfig';\nimport { getUttaksplanFormInitialValues } from './UttaksplanFormUtils';\n\n// import {\n//     getVisAutomatiskJusteringForm,\n//     getKanJustereAutomatiskVedFødsel,\n// } from 'uttaksplan/components/automatisk-justering-form/automatiskJusteringUtils';\nimport { FormikValues } from 'formik';\nimport {\n    getStartdatoFørstePeriodeAnnenPart,\n    mapAnnenPartsEksisterendeSakFromDTO,\n} from 'app/utils/eksisterendeSakUtils';\nimport { RequestStatus } from 'app/types/RequestState';\nimport dayjs from 'dayjs';\nimport { getAntallUkerMinsterett } from '../uttaksplan-info/utils/stønadskontoer';\nimport { sendErrorMessageToSentry } from 'app/api/apiUtils';\nimport useSaveLoadedRoute from 'app/utils/hooks/useSaveLoadedRoute';\nimport { Alert, Button, Loader } from '@navikt/ds-react';\nimport { dateToISOString } from '@navikt/sif-common-formik-ds/lib';\nimport { Link } from 'react-router-dom';\nimport InfoOmSøknaden from 'app/components/info-eksisterende-sak/InfoOmSøknaden';\nimport { getHarAktivitetskravIPeriodeUtenUttak, Uttaksplan } from '@navikt/uttaksplan';\nimport AttachmentApi from '../../api/attachmentApi';\nimport { finnOgSettInnHull, settInnAnnenPartsUttak } from '@navikt/uttaksplan/src/builder/uttaksplanbuilderUtils';\nimport {\n    getKanJustereAutomatiskVedFødsel,\n    getVisAutomatiskJusteringForm,\n} from './automatisk-justering-form/automatiskJusteringUtils';\nimport { getSamtidigUttaksprosent } from '../../utils/uttaksplanInfoUtils';\n\nconst UttaksplanStep = () => {\n    const intl = useIntl();\n    const søkerinfo = useSøkerinfo();\n    const søknad = useSøknad();\n    const [gåTilbakeIsOpen, setGåTilbakeIsOpen] = useState(false);\n    const [uttaksplanErGyldig, setUttaksplanErGyldig] = useState(true);\n    const [submitIsClicked, setSubmitIsClicked] = useState(false);\n    const { dispatch, state } = useForeldrepengesøknadContext();\n    const [endringstidspunkt, setEndringstidspunkt] = useState(state.endringstidspunkt);\n    const [perioderSomSkalSendesInn, setPerioderSomSkalSendesInn] = useState(state.perioderSomSkalSendesInn);\n    const nextRoute = søknad.erEndringssøknad ? SøknadRoutes.OPPSUMMERING : SøknadRoutes.UTENLANDSOPPHOLD;\n    const { uttaksplanInfo, eksisterendeSak, harUttaksplanBlittSlettet, annenPartsUttakErLagtTilIPlan } = state;\n    const { person, arbeidsforhold } = søkerinfo;\n    const { annenForelder, søker, barn, søkersituasjon, dekningsgrad, erEndringssøknad, tilleggsopplysninger } = søknad;\n    const { erAleneOmOmsorg } = søker;\n    const { situasjon } = søkersituasjon;\n    const { rolle } = søkersituasjon;\n    const { barnFraNesteSak } = state;\n    const debouncedState = useDebounce(state, 3000);\n    const annenForelderKjønn = getKjønnFromFnr(annenForelder);\n    const erDeltUttak = isAnnenForelderOppgitt(annenForelder)\n        ? !!annenForelder.harRettPåForeldrepengerINorge || !!annenForelder.harRettPåForeldrepengerIEØS\n        : false;\n    const erFarEllerMedmor = isFarEllerMedmor(søknad.søkersituasjon.rolle);\n    const morErAleneOmOmsorg = getMorErAleneOmOmsorg(!erFarEllerMedmor, erAleneOmOmsorg, annenForelder);\n    const farMedmorErAleneOmOmsorg = getFarMedmorErAleneOmOmsorg(erFarEllerMedmor, erAleneOmOmsorg, annenForelder);\n    const søkerErAleneOmOmsorg = morErAleneOmOmsorg || farMedmorErAleneOmOmsorg;\n    const forelderVedAleneomsorg = erDeltUttak ? undefined : erFarEllerMedmor ? Forelder.farMedmor : Forelder.mor;\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const familiehendelsesdatoDate = ISOStringToDate(familiehendelsesdato);\n    const erMorUfør = getErMorUfør(annenForelder, erFarEllerMedmor);\n    const navnPåForeldre = getNavnPåForeldre(person, annenForelder, erFarEllerMedmor, intl);\n    const antallBarn = barn.antallBarn;\n    const erFlerbarnssøknad = antallBarn > 1;\n    const morHarRett = getMorHarRettPåForeldrepengerINorgeEllerEØS(rolle, erFarEllerMedmor, annenForelder);\n    const opprinneligPlan = eksisterendeSak?.uttaksplan;\n    const harKomplettUttaksplan = eksisterendeSak ? eksisterendeSak.uttaksplan !== undefined : false;\n    const harMidlertidigOmsorg = false; //TODO søkerHarMidlertidigOmsorg\n    const morsSisteDag = getMorsSisteDag(uttaksplanInfo);\n    const termindato = getTermindato(barn);\n    const annenForelderFnr =\n        isAnnenForelderOppgitt(annenForelder) && !!annenForelder.utenlandskFnr === false\n            ? annenForelder.fnr\n            : undefined;\n    const erAdopsjon = situasjon === 'adopsjon';\n    const annenForelderFnrNesteSak = barnFraNesteSak !== undefined ? barnFraNesteSak.annenForelderFnr : undefined;\n    const førsteBarnFraNesteSakFnr =\n        barnFraNesteSak !== undefined && barnFraNesteSak.fnr !== undefined && barnFraNesteSak.fnr.length > 0\n            ? barnFraNesteSak.fnr[0]\n            : undefined;\n    const familieHendelseDatoNesteSak =\n        barnFraNesteSak !== undefined ? barnFraNesteSak.familiehendelsesdato : undefined;\n    const førsteUttaksdagNesteBarnsSak =\n        barnFraNesteSak !== undefined ? barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n\n    const bareFarMedmorHarRett = !getMorHarRettPåForeldrepengerINorgeEllerEØS(\n        søkersituasjon.rolle,\n        erFarEllerMedmor,\n        annenForelder,\n    );\n\n    const barnFnr = !isUfødtBarn(barn) && barn.fnr !== undefined && barn.fnr.length > 0 ? barn.fnr[0] : undefined;\n    const eksisterendeSakAnnenPartRequestIsSuspended =\n        !søkerErAleneOmOmsorg &&\n        annenForelderFnr !== undefined &&\n        annenForelderFnr !== '' &&\n        (barnFnr !== undefined || familiehendelsesdato !== undefined)\n            ? false\n            : true;\n\n    useSaveLoadedRoute(SøknadRoutes.UTTAKSPLAN);\n\n    const { eksisterendeSakAnnenPartData, eksisterendeSakAnnenPartError, eksisterendeSakAnnenPartRequestStatus } =\n        Api.useGetAnnenPartsVedtak(\n            annenForelderFnr,\n            barnFnr,\n            familiehendelsesdato,\n            eksisterendeSakAnnenPartRequestIsSuspended,\n        );\n\n    const eksisterendeVedtakAnnenPart = useMemo(\n        () =>\n            mapAnnenPartsEksisterendeSakFromDTO(\n                eksisterendeSakAnnenPartData,\n                barn,\n                erFarEllerMedmor,\n                familiehendelsesdato,\n                førsteUttaksdagNesteBarnsSak,\n            ),\n        [eksisterendeSakAnnenPartData, barn, erFarEllerMedmor, familiehendelsesdato, førsteUttaksdagNesteBarnsSak],\n    );\n\n    const saksgrunnlagsTermindato = getTermindatoSomSkalBrukesFraSaksgrunnlagBeggeParter(\n        eksisterendeSak?.grunnlag.termindato,\n        eksisterendeVedtakAnnenPart?.grunnlag.termindato,\n    );\n    const saksgrunnlagsAntallBarn = getAntallBarnSomSkalBrukesFraSaksgrunnlagBeggeParter(\n        erFarEllerMedmor,\n        barn.antallBarn,\n        eksisterendeVedtakAnnenPart?.grunnlag.antallBarn,\n    );\n    useEffect(() => {\n        if (erFarEllerMedmor && søknad.barn.antallBarn !== saksgrunnlagsAntallBarn) {\n            const søknadMedOppdatertAntallBarn = {\n                ...søknad,\n                barn: { ...søknad.barn, antallBarn: saksgrunnlagsAntallBarn },\n            };\n            dispatch(actionCreator.setSøknad(søknadMedOppdatertAntallBarn));\n        }\n    }, [erFarEllerMedmor, saksgrunnlagsAntallBarn, dispatch, søknad]);\n\n    const nesteBarnsSakAnnenPartRequestIsSuspended =\n        annenForelderFnrNesteSak !== undefined &&\n        annenForelderFnrNesteSak !== '' &&\n        (førsteBarnFraNesteSakFnr !== undefined || familieHendelseDatoNesteSak !== undefined) &&\n        (eksisterendeSakAnnenPartRequestIsSuspended || eksisterendeSakAnnenPartRequestStatus === RequestStatus.FINISHED)\n            ? false\n            : true;\n\n    const {\n        eksisterendeSakAnnenPartData: nesteSakAnnenPartData,\n        eksisterendeSakAnnenPartError: nesteSakAnnenPartError,\n        eksisterendeSakAnnenPartRequestStatus: nesteSakAnnenPartRequestStatus,\n    } = Api.useGetAnnenPartsVedtak(\n        annenForelderFnrNesteSak,\n        førsteBarnFraNesteSakFnr,\n        dateToISOString(familieHendelseDatoNesteSak),\n        nesteBarnsSakAnnenPartRequestIsSuspended,\n    );\n\n    const førsteUttaksdagAnnenPart = getStartdatoFørstePeriodeAnnenPart(nesteSakAnnenPartData);\n\n    useEffect(() => {\n        if (\n            førsteUttaksdagAnnenPart !== undefined &&\n            state.barnFraNesteSak !== undefined &&\n            (dayjs(førsteUttaksdagAnnenPart).isBefore(state.barnFraNesteSak.startdatoFørsteStønadsperiode, 'd') ||\n                state.barnFraNesteSak.startdatoFørsteStønadsperiode === undefined)\n        ) {\n            const oppdatertBarnNesteSak = {\n                ...state.barnFraNesteSak,\n                startdatoFørsteStønadsperiode: førsteUttaksdagAnnenPart,\n            };\n            dispatch(actionCreator.setBarnFraNesteSak(oppdatertBarnNesteSak));\n        }\n    }, [førsteUttaksdagNesteBarnsSak, førsteUttaksdagAnnenPart, barnFraNesteSak, dispatch, state.barnFraNesteSak]);\n\n    const harAktivitetskravIPeriodeUtenUttak = getHarAktivitetskravIPeriodeUtenUttak({\n        erDeltUttak,\n        morHarRett,\n        søkerErAleneOmOmsorg,\n    });\n\n    //Legg til annen parts perioder i planen til bruker\n    useEffect(() => {\n        if (\n            eksisterendeSak !== undefined &&\n            opprinneligPlan !== undefined &&\n            eksisterendeVedtakAnnenPart !== undefined &&\n            !annenPartsUttakErLagtTilIPlan\n        ) {\n            //Sett samtidigUttak på søkerens perioder hvis de overlapper med annen parts samtidig uttak:\n            opprinneligPlan.forEach((p) => {\n                if (isUttaksperiode(p)) {\n                    const overlappendePerioderAnnenPart = Periodene(\n                        eksisterendeVedtakAnnenPart.uttaksplan,\n                    ).finnOverlappendePerioder(p);\n\n                    if (\n                        overlappendePerioderAnnenPart.length !== 0 &&\n                        overlappendePerioderAnnenPart.find(\n                            (periode) => isUttakAnnenPart(periode) && periode.ønskerSamtidigUttak === true,\n                        )\n                    ) {\n                        if (!p.ønskerSamtidigUttak) {\n                            p.ønskerSamtidigUttak = true;\n                            p.samtidigUttakProsent = getSamtidigUttaksprosent(p.gradert, p.stillingsprosent);\n                        }\n                    }\n                }\n            });\n\n            const uttaksplanMedAnnenPart = finnOgSettInnHull(\n                settInnAnnenPartsUttak(\n                    opprinneligPlan,\n                    eksisterendeVedtakAnnenPart.uttaksplan,\n                    familiehendelsesdatoDate!,\n                    førsteUttaksdagNesteBarnsSak,\n                    true,\n                ),\n                harAktivitetskravIPeriodeUtenUttak,\n                familiehendelsesdatoDate!,\n                erAdopsjon,\n                bareFarMedmorHarRett,\n                erFarEllerMedmor,\n                førsteUttaksdagNesteBarnsSak,\n            );\n            const eksisterendeSakMedAnnenPartsPlan = {\n                ...eksisterendeSak,\n                uttaksplan: uttaksplanMedAnnenPart,\n            };\n            dispatch(actionCreator.setUttaksplan(uttaksplanMedAnnenPart));\n            dispatch(actionCreator.setEksisterendeSak(eksisterendeSakMedAnnenPartsPlan));\n            dispatch(actionCreator.setAnnenPartsUttakErLagtTilIPlan(true));\n        }\n    }, [\n        eksisterendeVedtakAnnenPart,\n        opprinneligPlan,\n        familiehendelsesdatoDate,\n        harAktivitetskravIPeriodeUtenUttak,\n        erAdopsjon,\n        bareFarMedmorHarRett,\n        erFarEllerMedmor,\n        dispatch,\n        førsteUttaksdagNesteBarnsSak,\n        eksisterendeSak,\n        annenPartsUttakErLagtTilIPlan,\n    ]);\n\n    const onValidSubmitHandler = () => {\n        setSubmitIsClicked(true);\n        const cleanedTilleggsopplysninger = cleanupInvisibleCharsFromTilleggsopplysninger(tilleggsopplysninger);\n        return [\n            actionCreator.setTilleggsopplysninger(cleanedTilleggsopplysninger),\n            actionCreator.setEndringstidspunkt(endringstidspunkt),\n            actionCreator.setPerioderSomSkalSendesInn(perioderSomSkalSendesInn),\n        ];\n    };\n\n    const handleBegrunnelseChange = (årsak: SenEndringÅrsak, begrunnelse: string) => {\n        const ekstraInformasjon = årsak !== SenEndringÅrsak.Ingen ? årsak : undefined;\n        const opplysninger = {\n            ...tilleggsopplysninger,\n            begrunnelseForSenEndring: {\n                ...tilleggsopplysninger.begrunnelseForSenEndring,\n                tekst: begrunnelse,\n                ekstraInformasjon: ekstraInformasjon,\n            },\n        };\n        dispatch(actionCreator.setTilleggsopplysninger(opplysninger));\n    };\n    useEffect(() => {\n        const periodeAngittAvAnnenPart = opprinneligPlan?.find((p) => isUttaksperiode(p) && p.angittAvAnnenPart);\n\n        if (periodeAngittAvAnnenPart && endringstidspunkt === undefined) {\n            const tidspunktForEndring = periodeAngittAvAnnenPart.tidsperiode.fom;\n            dispatch(actionCreator.setEndringstidspunkt(tidspunktForEndring));\n\n            const perioderForÅSendeInn = getPerioderSomSkalSendesInn(\n                søknad.uttaksplan,\n                erEndringssøknad,\n                erFarEllerMedmor,\n                opprinneligPlan,\n                tidspunktForEndring,\n            );\n            setPerioderSomSkalSendesInn(perioderForÅSendeInn);\n            dispatch(actionCreator.setPerioderSomSkalSendesInn(perioderForÅSendeInn));\n        }\n    }, [opprinneligPlan, dispatch, endringstidspunkt, erFarEllerMedmor, søknad.uttaksplan, erEndringssøknad]);\n\n    const { handleSubmit, isSubmitting } = useOnValidSubmit(\n        onValidSubmitHandler,\n        nextRoute,\n        (state: ForeldrepengesøknadContextState) => storeAppState(state),\n    );\n\n    const perioderMedUttakRundtFødsel = getPerioderMedUttakRundtFødsel(\n        søknad.uttaksplan,\n        familiehendelsesdatoDate!,\n        termindato,\n    );\n\n    const visAutomatiskJusteringForm = getVisAutomatiskJusteringForm(\n        erFarEllerMedmor,\n        familiehendelsesdatoDate!,\n        situasjon,\n        perioderMedUttakRundtFødsel,\n        barn,\n        termindato,\n        bareFarMedmorHarRett,\n    );\n\n    const kanJustereAutomatiskVedFødsel = getKanJustereAutomatiskVedFødsel(\n        perioderMedUttakRundtFødsel,\n        termindato,\n        erFarEllerMedmor,\n        barn,\n    );\n\n    const setØnskerJustertUttakVedFødselTilUndefinedHvisUgyldig = () => {\n        if ((visAutomatiskJusteringForm || erEndringssøknad) && !kanJustereAutomatiskVedFødsel) {\n            dispatch(actionCreator.setØnskerJustertUttakVedFødsel(undefined));\n        }\n    };\n\n    const ønskerJustertUttakVedFødselErBesvart = (ønskerAutomatiskJusteringSvar: boolean | undefined) => {\n        return (\n            visAutomatiskJusteringForm && kanJustereAutomatiskVedFødsel && ønskerAutomatiskJusteringSvar !== undefined\n        );\n    };\n\n    const ref = useRef<FormikValues>(null);\n    const clickHandler = (values: any) => {\n        setSubmitIsClicked(true);\n        if (uttaksplanErGyldig && !erTomEndringssøknad) {\n            if (ref.current) {\n                ref.current.handleSubmit();\n            }\n\n            setØnskerJustertUttakVedFødselTilUndefinedHvisUgyldig();\n\n            if (ønskerJustertUttakVedFødselErBesvart(values.ønskerAutomatiskJustering)) {\n                handleSubmit(values);\n            }\n        }\n    };\n\n    const onAvbrytSøknad = useAvbrytSøknad();\n    const onFortsettSøknadSenere = useFortsettSøknadSenere();\n\n    useEffect(() => {\n        Api.storeAppState(debouncedState, person.fnr);\n    }, [person.fnr, debouncedState]);\n\n    const foreldreSituasjon = getForeldreparSituasjon(\n        person.kjønn,\n        annenForelderKjønn,\n        erDeltUttak,\n        morErAleneOmOmsorg,\n        farMedmorErAleneOmOmsorg,\n        rolle,\n    );\n    const kontoRequestIsSuspended =\n        (eksisterendeSakAnnenPartRequestIsSuspended\n            ? false\n            : eksisterendeSakAnnenPartRequestStatus !== RequestStatus.FINISHED) ||\n        (nesteBarnsSakAnnenPartRequestIsSuspended ? false : nesteSakAnnenPartRequestStatus !== RequestStatus.FINISHED);\n\n    const { tilgjengeligeStønadskontoerData: stønadskontoer100, tilgjengeligeStønadskontoerError } =\n        Api.useGetUttakskontoer(\n            getStønadskontoParams(\n                Dekningsgrad.HUNDRE_PROSENT,\n                barn,\n                annenForelder,\n                søkersituasjon,\n                farMedmorErAleneOmOmsorg,\n                morErAleneOmOmsorg,\n                dateToISOString(familieHendelseDatoNesteSak),\n                saksgrunnlagsAntallBarn,\n                saksgrunnlagsTermindato,\n            ),\n            kontoRequestIsSuspended,\n        );\n    const { tilgjengeligeStønadskontoerData: stønadskontoer80 } = Api.useGetUttakskontoer(\n        getStønadskontoParams(\n            Dekningsgrad.ÅTTI_PROSENT,\n            barn,\n            annenForelder,\n            søkersituasjon,\n            farMedmorErAleneOmOmsorg,\n            morErAleneOmOmsorg,\n            dateToISOString(familieHendelseDatoNesteSak),\n            saksgrunnlagsAntallBarn,\n            saksgrunnlagsTermindato,\n        ),\n        kontoRequestIsSuspended,\n    );\n\n    const handleOnPlanChange = (nyPlan: Periode[]) => {\n        setSubmitIsClicked(false);\n        dispatch(actionCreator.setUttaksplan(nyPlan));\n        const tidspunktForEndring = getEndringstidspunkt(opprinneligPlan, nyPlan, erEndringssøknad);\n        setEndringstidspunkt(tidspunktForEndring);\n\n        const perioderForÅSendeInn = getPerioderSomSkalSendesInn(\n            nyPlan,\n            erEndringssøknad,\n            erFarEllerMedmor,\n            opprinneligPlan,\n            tidspunktForEndring,\n        );\n        setPerioderSomSkalSendesInn(perioderForÅSendeInn);\n        dispatch(actionCreator.setPerioderSomSkalSendesInn(perioderForÅSendeInn));\n    };\n\n    useEffect(() => {\n        if (tilgjengeligeStønadskontoerError) {\n            sendErrorMessageToSentry(tilgjengeligeStønadskontoerError);\n            throw new Error(\n                `Vi klarte ikke å hente opp stønadskontoer. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`,\n            );\n        }\n        if (eksisterendeSakAnnenPartError) {\n            sendErrorMessageToSentry(eksisterendeSakAnnenPartError);\n            throw new Error(\n                `Vi klarte ikke å hente informasjon om saken til annen forelder. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`,\n            );\n        }\n\n        if (nesteSakAnnenPartError) {\n            sendErrorMessageToSentry(nesteSakAnnenPartError);\n            throw new Error(\n                `Vi klarte ikke å hente informasjon om saken til annen forelder for neste barn. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`,\n            );\n        }\n    }, [tilgjengeligeStønadskontoerError, eksisterendeSakAnnenPartError, nesteSakAnnenPartError]);\n\n    if (\n        !stønadskontoer100 ||\n        !stønadskontoer80 ||\n        (eksisterendeSakAnnenPartRequestStatus !== RequestStatus.FINISHED &&\n            !eksisterendeSakAnnenPartRequestIsSuspended) ||\n        (nesteSakAnnenPartRequestStatus !== RequestStatus.FINISHED && !nesteBarnsSakAnnenPartRequestIsSuspended)\n    ) {\n        return (\n            <div style={{ textAlign: 'center', padding: '12rem 0' }}>\n                <Loader size=\"2xlarge\" />\n            </div>\n        );\n    }\n\n    const stønadskontoer = getValgtStønadskontoFor80Og100Prosent(stønadskontoer80, stønadskontoer100);\n    const minsterettUkerToTette = getAntallUkerMinsterett(stønadskontoer100.minsteretter.toTette);\n\n    const valgteStønadskontoer =\n        dekningsgrad === Dekningsgrad.HUNDRE_PROSENT ? stønadskontoer[100] : stønadskontoer[80];\n\n    const erTomEndringssøknad =\n        erEndringssøknad && (perioderSomSkalSendesInn === undefined || perioderSomSkalSendesInn.length === 0);\n\n    const handleSlettUttaksplan = () => {\n        const slettetPlanUtenomFpFørFødsel = søknad.uttaksplan.filter((periode) =>\n            isUttakAvForeldrepengerFørFødsel(periode),\n        );\n        dispatch(actionCreator.slettUttaksplan(slettetPlanUtenomFpFørFødsel));\n        dispatch(actionCreator.setUttaksplanSlettet(true));\n    };\n\n    const handleResetUttaksplan = () => {\n        if (state.eksisterendeSak) {\n            dispatch(actionCreator.setUttaksplan(state.eksisterendeSak.uttaksplan));\n            dispatch(actionCreator.setPerioderSomSkalSendesInn([]));\n            setPerioderSomSkalSendesInn([]);\n        }\n    };\n\n    return (\n        <UttaksplanFormComponents.FormikWrapper\n            initialValues={getUttaksplanFormInitialValues(state.søknad.ønskerJustertUttakVedFødsel)}\n            onSubmit={handleSubmit}\n            innerRef={ref}\n            renderForm={() => {\n                return (\n                    <Step\n                        bannerTitle={intlUtils(intl, 'søknad.pageheading')}\n                        activeStepId=\"uttaksplan\"\n                        pageTitle={intlUtils(intl, 'søknad.uttaksplan')}\n                        onCancel={onAvbrytSøknad}\n                        onContinueLater={onFortsettSøknadSenere}\n                        steps={stepConfig(intl, erEndringssøknad)}\n                    >\n                        <Block padBottom=\"l\">\n                            <InfoOmSøknaden\n                                eksisterendeSak={eksisterendeSak}\n                                erIUttaksplanenSteg={true}\n                                tilgjengeligeStønadskontoer={valgteStønadskontoer}\n                                minsterettUkerToTette={minsterettUkerToTette}\n                            />\n                        </Block>\n                        <Uttaksplan\n                            foreldreSituasjon={foreldreSituasjon}\n                            forelderVedAleneomsorg={forelderVedAleneomsorg}\n                            erDeltUttak={erDeltUttak}\n                            uttaksplan={søknad.uttaksplan}\n                            familiehendelsesdato={familiehendelsesdato}\n                            handleOnPlanChange={handleOnPlanChange}\n                            stønadskontoer={valgteStønadskontoer}\n                            navnPåForeldre={navnPåForeldre}\n                            annenForelder={annenForelder}\n                            arbeidsforhold={getAktiveArbeidsforhold(\n                                arbeidsforhold,\n                                erAdopsjon,\n                                erFarEllerMedmor,\n                                ISOStringToDate(familiehendelsesdato),\n                            )}\n                            erEndringssøknad={erEndringssøknad}\n                            erFarEllerMedmor={erFarEllerMedmor}\n                            erFlerbarnssøknad={erFlerbarnssøknad}\n                            erAleneOmOmsorg={søkerErAleneOmOmsorg}\n                            harMidlertidigOmsorg={harMidlertidigOmsorg}\n                            situasjon={situasjon}\n                            erMorUfør={erMorUfør}\n                            morHarRett={morHarRett}\n                            søkersituasjon={søkersituasjon}\n                            dekningsgrad={dekningsgrad}\n                            antallBarn={antallBarn}\n                            tilleggsopplysninger={tilleggsopplysninger}\n                            setUttaksplanErGyldig={setUttaksplanErGyldig}\n                            handleBegrunnelseChange={handleBegrunnelseChange}\n                            eksisterendeSak={eksisterendeSak}\n                            perioderSomSkalSendesInn={perioderSomSkalSendesInn}\n                            morsSisteDag={morsSisteDag}\n                            harKomplettUttaksplan={harKomplettUttaksplan}\n                            opprinneligPlan={harUttaksplanBlittSlettet ? undefined : opprinneligPlan}\n                            handleSlettUttaksplan={handleSlettUttaksplan}\n                            handleResetUttaksplan={handleResetUttaksplan}\n                            termindato={termindato}\n                            barn={barn}\n                            saveAttachment={AttachmentApi.saveAttachment}\n                            visAutomatiskJusteringForm={visAutomatiskJusteringForm}\n                            perioderMedUttakRundtFødsel={perioderMedUttakRundtFødsel}\n                            barnFraNesteSak={barnFraNesteSak}\n                            familiehendelsesdatoNesteSak={familieHendelseDatoNesteSak}\n                            førsteUttaksdagNesteBarnsSak={førsteUttaksdagNesteBarnsSak}\n                            minsterettUkerToTette={minsterettUkerToTette}\n                        />\n                        <VilDuGåTilbakeModal isOpen={gåTilbakeIsOpen} setIsOpen={setGåTilbakeIsOpen} />\n                        {!uttaksplanErGyldig && submitIsClicked && (\n                            <Block textAlignCenter={true} padBottom=\"l\">\n                                <Alert variant=\"error\">\n                                    <FormattedMessage id=\"uttaksplan.validering.kanIkkeGåVidere\" />\n                                </Alert>\n                            </Block>\n                        )}\n                        {erTomEndringssøknad && submitIsClicked && (\n                            <Block textAlignCenter={true} padBottom=\"l\">\n                                <Alert variant=\"error\">\n                                    <FormattedMessage id=\"uttaksplan.validering.kanIkkeGåVidereEndringssøknad\" />\n                                </Alert>\n                            </Block>\n                        )}\n                        <Block textAlignCenter={true} padBottom=\"l\">\n                            <StepButtonWrapper>\n                                {!erEndringssøknad && (\n                                    <Button\n                                        variant=\"secondary\"\n                                        as={Link}\n                                        onClick={(event) => {\n                                            event.preventDefault();\n                                            setGåTilbakeIsOpen(true);\n                                        }}\n                                        to={getPreviousStepHref('uttaksplan')}\n                                    >\n                                        <FormattedMessage id=\"backlink.label\" />\n                                    </Button>\n                                )}\n                                <Button\n                                    type=\"submit\"\n                                    onClick={clickHandler}\n                                    disabled={isSubmitting}\n                                    loading={isSubmitting}\n                                >\n                                    {intlUtils(intl, 'søknad.gåVidere')}\n                                </Button>\n                            </StepButtonWrapper>\n                        </Block>\n                    </Step>\n                );\n            }}\n        />\n    );\n};\nexport default UttaksplanStep;\n","import { Søknad } from 'app/context/types/Søknad';\nimport SøknadRoutes from './routes';\nimport { uttaksplanInneholderPerioderUtenKonto } from '@navikt/uttaksplan';\n\nconst isAvailable = (route: SøknadRoutes, søknad: Søknad): boolean => {\n    switch (route) {\n        case SøknadRoutes.SØKERSITUASJON:\n            return søknad.harGodkjentVilkår === true;\n        case SøknadRoutes.OPPSUMMERING:\n            return uttaksplanInneholderPerioderUtenKonto(søknad.uttaksplan) === false && søknad.uttaksplan.length > 0;\n        default:\n            return true;\n    }\n};\n\nexport default isAvailable;\n","import { Locale } from '@navikt/fp-common';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport IkkeMyndig from 'app/pages/ikkeMyndig/IkkeMyndig';\nimport Velkommen from 'app/pages/velkommen/Velkommen';\nimport AnnenForelder from 'app/steps/annen-forelder/AnnenForelder';\nimport Inntektsinformasjon from 'app/steps/inntektsinformasjon/Inntektsinformasjon';\nimport OmBarnet from 'app/steps/om-barnet/OmBarnet';\nimport Oppsummering from 'app/steps/oppsummering/Oppsummering';\nimport Søkersituasjon from 'app/steps/søkersituasjon/Søkersituasjon';\nimport Utenlandsopphold from 'app/steps/utenlandsopphold/Utenlandsopphold';\nimport UttaksplanInfo from 'app/steps/uttaksplan-info/UttaksplanInfo';\nimport UttaksplanStep from 'app/steps/uttaksplan/UttaksplanStep';\nimport { FunctionComponent, useEffect, useState } from 'react';\nimport { Route, useNavigate, Navigate, Routes, useLocation } from 'react-router-dom';\nimport SøknadSendt from '../pages/søknadSendt/SøknadSendt';\nimport isAvailable from './isAvailable';\nimport SøknadRoutes from './routes';\n\ninterface Props {\n    fornavn: string;\n    locale: Locale;\n    onChangeLocale: (locale: Locale) => void;\n    currentRoute: SøknadRoutes;\n}\n\nconst renderSøknadRoutes = (harGodkjentVilkår: boolean, erEndringssøknad: boolean, søkerErMyndig: boolean) => {\n    if (!harGodkjentVilkår) {\n        return <Route path=\"*\" element={<Navigate to={SøknadRoutes.VELKOMMEN} />} />;\n    }\n\n    if (!søkerErMyndig) {\n        return <Route path=\"*\" element={<Navigate to={SøknadRoutes.IKKE_MYNDIG} />} />;\n    }\n\n    if (erEndringssøknad) {\n        return (\n            <>\n                <Route path={SøknadRoutes.UTTAKSPLAN} element={<UttaksplanStep />} />\n                <Route path={SøknadRoutes.OPPSUMMERING} element={<Oppsummering />} />\n                <Route path={SøknadRoutes.SØKNAD_SENDT} element={<SøknadSendt />} />\n            </>\n        );\n    }\n\n    return (\n        <>\n            <Route path={SøknadRoutes.SØKERSITUASJON} element={<Søkersituasjon />} />\n            <Route path={SøknadRoutes.OM_BARNET} element={<OmBarnet />} />\n            <Route path={SøknadRoutes.ANNEN_FORELDER} element={<AnnenForelder />} />\n            <Route path={SøknadRoutes.UTTAKSPLAN_INFO} element={<UttaksplanInfo />} />\n            <Route path={SøknadRoutes.UTTAKSPLAN} element={<UttaksplanStep />} />\n            <Route path={SøknadRoutes.UTENLANDSOPPHOLD} element={<Utenlandsopphold />} />\n            <Route path={SøknadRoutes.INNTEKTSINFORMASJON} element={<Inntektsinformasjon />} />\n            <Route path={SøknadRoutes.OPPSUMMERING} element={<Oppsummering />} />\n            <Route path={SøknadRoutes.SØKNAD_SENDT} element={<SøknadSendt />} />\n        </>\n    );\n};\n\nconst ForeldrepengesøknadRoutes: FunctionComponent<Props> = ({ fornavn, locale, onChangeLocale, currentRoute }) => {\n    const { state } = useForeldrepengesøknadContext();\n    const navigate = useNavigate();\n    const location = useLocation();\n    const harGodkjentVilkår = state.søknad.harGodkjentVilkår;\n    const erMyndig = state.søkerinfo.person.erMyndig;\n    const [isFirstTimeLoadingApp, setIsFirstTimeLoadingApp] = useState(true);\n\n    useEffect(() => {\n        if (currentRoute && erMyndig && harGodkjentVilkår && isFirstTimeLoadingApp) {\n            setIsFirstTimeLoadingApp(false);\n            if (isAvailable(currentRoute, state.søknad)) {\n                navigate(currentRoute);\n            } else {\n                if (location.pathname === SøknadRoutes.OPPSUMMERING) {\n                    navigate(SøknadRoutes.UTTAKSPLAN);\n                }\n            }\n        }\n    }, [currentRoute, erMyndig, harGodkjentVilkår, navigate, isFirstTimeLoadingApp, state.søknad, location.pathname]);\n\n    return (\n        <Routes>\n            <Route\n                path={SøknadRoutes.VELKOMMEN}\n                element={\n                    <Velkommen\n                        fornavn={fornavn}\n                        locale={locale}\n                        saker={state.saker}\n                        onChangeLocale={onChangeLocale}\n                        fnr={state.søkerinfo.person.fnr}\n                    />\n                }\n            />\n            <Route path={SøknadRoutes.IKKE_MYNDIG} element={<IkkeMyndig fornavn={state.søkerinfo.person.fornavn} />} />\n\n            {renderSøknadRoutes(harGodkjentVilkår, state.søknad.erEndringssøknad, erMyndig)}\n        </Routes>\n    );\n};\n\nexport default ForeldrepengesøknadRoutes;\n","import { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport SøknadRoutes from 'app/routes/routes';\n\nconst isEndringssøknadRoute = (route: SøknadRoutes): boolean => {\n    switch (route) {\n        case SøknadRoutes.UTTAKSPLAN:\n        case SøknadRoutes.OPPSUMMERING:\n        case SøknadRoutes.SØKNAD_SENDT:\n            return true;\n        default:\n            return false;\n    }\n};\n\nexport const shouldApplyStorage = (storedState: ForeldrepengesøknadContextState): boolean => {\n    if (storedState.søknad && storedState.søknad.erEndringssøknad) {\n        if (!isEndringssøknadRoute(storedState.currentRoute)) {\n            return false;\n        }\n    }\n\n    return storedState.version === 5;\n};\n","import { Locale } from '@navikt/fp-common';\nimport { useEffect } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport Api from './api/api';\nimport { sendErrorMessageToSentry } from './api/apiUtils';\nimport actionCreator from './context/action/actionCreator';\nimport { useForeldrepengesøknadContext } from './context/hooks/useForeldrepengesøknadContext';\nimport ForeldrepengesøknadRoutes from './routes/ForeldrepengesøknadRoutes';\nimport SøknadRoutes from './routes/routes';\nimport mapSøkerinfoDTOToSøkerinfo from './utils/mapSøkerinfoDTO';\nimport { shouldApplyStorage } from './utils/mellomlagringUtils';\nimport { Loader } from '@navikt/ds-react';\n\ninterface Props {\n    locale: Locale;\n    onChangeLocale: any;\n}\n\nconst renderSpinner = () => (\n    <div style={{ textAlign: 'center', padding: '12rem 0' }}>\n        <Loader size=\"2xlarge\" />\n    </div>\n);\n\nconst Foreldrepengesøknad: React.FunctionComponent<Props> = ({ locale, onChangeLocale }) => {\n    const { søkerinfoData, søkerinfoError } = Api.useSøkerinfo();\n    const { sakerData, sakerError } = Api.useGetSaker();\n    const { storageData } = Api.useStoredAppState();\n    const { dispatch, state } = useForeldrepengesøknadContext();\n\n    useEffect(() => {\n        if (storageData) {\n            if (shouldApplyStorage(storageData)) {\n                dispatch(actionCreator.applyStoredState(storageData));\n            }\n        }\n        if (søkerinfoData) {\n            dispatch(actionCreator.setSøkerinfo(mapSøkerinfoDTOToSøkerinfo(søkerinfoData)));\n        }\n\n        if (sakerData) {\n            dispatch(actionCreator.setSaker(sakerData.foreldrepenger));\n        }\n    }, [dispatch, storageData, søkerinfoData, sakerData]);\n\n    useEffect(() => {\n        if (søkerinfoError) {\n            sendErrorMessageToSentry(søkerinfoError);\n            throw new Error(\n                `Vi klarte ikke å hente informasjon om deg. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`,\n            );\n        }\n        if (sakerError) {\n            sendErrorMessageToSentry(sakerError);\n            throw new Error(\n                `Vi klarte ikke å hente informasjon om sakene dine. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`,\n            );\n        }\n    }, [søkerinfoError, sakerError]);\n\n    if (!state.søkerinfo || !sakerData) {\n        return renderSpinner();\n    }\n\n    return (\n        <BrowserRouter>\n            <ForeldrepengesøknadRoutes\n                fornavn={state.søkerinfo.person.fornavn}\n                locale={locale}\n                onChangeLocale={onChangeLocale}\n                currentRoute={storageData ? storageData.currentRoute : SøknadRoutes.VELKOMMEN}\n            />\n        </BrowserRouter>\n    );\n};\n\nexport default Foreldrepengesøknad;\n","import * as Sentry from '@sentry/browser';\nimport Feilside from 'app/pages/feilside/Feilside';\nimport { FOR_MANGE_VEDLEGG_ERROR } from 'app/api/apiUtils';\nimport { Component } from 'react';\nimport { links } from '@navikt/fp-common';\n\ninterface State {\n    hasError: boolean;\n    error: Error | null;\n}\n\nclass ErrorBoundary extends Component<any, State> {\n    constructor(props: unknown) {\n        super(props);\n        this.state = { hasError: false, error: null };\n    }\n\n    componentDidCatch(error: Error | null, errorInfo: any): void {\n        if (error && error.message !== 'window.hasFocus is not a function') {\n            this.setState({ ...this.state, hasError: true, error });\n\n            Sentry.withScope((scope) => {\n                scope.setExtras(errorInfo);\n                Sentry.captureException(error);\n            });\n        }\n    }\n\n    render() {\n        if (this.state.hasError) {\n            const feilPgaForMangeVedlegg =\n                !!this.state.error &&\n                !!this.state.error.message &&\n                this.state.error.message === FOR_MANGE_VEDLEGG_ERROR;\n            const feilsideTittel = feilPgaForMangeVedlegg ? 'Feil: for mange vedlegg' : 'Informasjon om feilen';\n            return (\n                <Feilside\n                    dokumenttittel=\"NAV Foreldrepengesøknad\"\n                    ingress={`${this.state.error?.message}`}\n                    tittel={feilsideTittel}\n                    illustrasjon={{\n                        tittel: 'Hei!',\n                        tekst: 'Noe har gått galt med søknaden.',\n                        lenke: { tekst: 'Her finner du en lenke til brukerstøtte', url: links.brukerstøtte },\n                    }}\n                    skalKunneGåTilbakeTilSøknad={feilPgaForMangeVedlegg}\n                />\n            );\n        }\n\n        return this.props.children;\n    }\n}\nexport default ErrorBoundary;\n","import { detect } from 'detect-browser';\n\nexport const shouldChangeBrowser = () => {\n    const browserInfo = detect();\n    return browserInfo ? browserInfo.name === 'ie' : false;\n};\n","import { useEffect, useState } from 'react';\nimport dayjs from 'dayjs';\nimport { getLocaleFromSessionStorage, Locale, setLocaleInSessionStorage } from '@navikt/fp-common';\nimport IntlProvider from './intl/IntlProvider';\nimport ForeldrepengesøknadContextProvider from './context/ForeldrepengesøknadContext';\nimport Foreldrepengesøknad from './Foreldrepengesøknad';\nimport ByttBrowserModal from 'app/pages/byttBrowserModal/ByttBrowserModal';\nimport ErrorBoundary from './errorBoundary/ErrorBoundary';\nimport { Modal } from '@navikt/ds-react';\nimport { shouldChangeBrowser } from './utils/browserUtils';\n\nconst localeFromSessionStorage = getLocaleFromSessionStorage();\n\ndayjs.locale(localeFromSessionStorage);\n\nconst AppContainer = () => {\n    const [locale, setLocale] = useState<Locale>(localeFromSessionStorage);\n\n    useEffect(() => {\n        if (Modal.setAppElement) {\n            Modal.setAppElement('#app');\n        }\n    });\n\n    return (\n        <ForeldrepengesøknadContextProvider>\n            <ErrorBoundary>\n                <IntlProvider locale={locale}>\n                    <ByttBrowserModal skalEndreNettleser={shouldChangeBrowser()} />\n                    <Foreldrepengesøknad\n                        locale={locale}\n                        onChangeLocale={(activeLocale: Locale) => {\n                            setLocaleInSessionStorage(activeLocale);\n                            setLocale(activeLocale);\n                        }}\n                    />\n                </IntlProvider>\n            </ErrorBoundary>\n        </ForeldrepengesøknadContextProvider>\n    );\n};\n\nexport default AppContainer;\n"],"names":["LocaleSessionKey","getLocaleFromSessionStorage","setLocaleInSessionStorage","locale","IkkeMyndig","fornavn","intl","useIntl","jsx","Feilside","intlUtils","links","useDebounce","value","delay","debouncedValue","setDebouncedValue","useState","useEffect","handler","VilDuGåTilbakeModal","isOpen","setIsOpen","bem","bemUtils","navigate","useNavigate","jsxs","Modal","Block","Heading","BodyShort","Button","SøknadRoutes","FormattedMessage","UttaksplanFormComponents","getTypedFormComponents","getUttaksplanFormInitialValues","ønskerAutomatiskJustering","convertBooleanOrUndefinedToYesOrNo","YesOrNo","getKanPeriodenRundtFødselJusteres","periodeRundtFødsel","termindato","isUttaksperiode","dayjs","Uttaksdagen","Forelder","StønadskontoType","getKanJustereAutomatiskVedFødsel","perioderMedUttakRundtFødsel","erFarEllerMedmor","barn","BarnType","getVisAutomatiskJusteringForm","familiehendelsesdato","situasjon","bareFarHarRett","andreAugust2022ReglerGjelder","isUfødtBarn","UttaksplanStep","søkerinfo","useSøkerinfo","søknad","useSøknad","gåTilbakeIsOpen","setGåTilbakeIsOpen","uttaksplanErGyldig","setUttaksplanErGyldig","submitIsClicked","setSubmitIsClicked","dispatch","state","useForeldrepengesøknadContext","endringstidspunkt","setEndringstidspunkt","perioderSomSkalSendesInn","setPerioderSomSkalSendesInn","nextRoute","uttaksplanInfo","eksisterendeSak","harUttaksplanBlittSlettet","annenPartsUttakErLagtTilIPlan","person","arbeidsforhold","annenForelder","søker","søkersituasjon","dekningsgrad","erEndringssøknad","tilleggsopplysninger","erAleneOmOmsorg","rolle","barnFraNesteSak","debouncedState","annenForelderKjønn","getKjønnFromFnr","erDeltUttak","isAnnenForelderOppgitt","isFarEllerMedmor","morErAleneOmOmsorg","getMorErAleneOmOmsorg","farMedmorErAleneOmOmsorg","getFarMedmorErAleneOmOmsorg","søkerErAleneOmOmsorg","forelderVedAleneomsorg","getFamiliehendelsedato","familiehendelsesdatoDate","ISOStringToDate","erMorUfør","getErMorUfør","navnPåForeldre","getNavnPåForeldre","antallBarn","erFlerbarnssøknad","morHarRett","getMorHarRettPåForeldrepengerINorgeEllerEØS","opprinneligPlan","harKomplettUttaksplan","harMidlertidigOmsorg","morsSisteDag","getMorsSisteDag","getTermindato","annenForelderFnr","erAdopsjon","annenForelderFnrNesteSak","førsteBarnFraNesteSakFnr","familieHendelseDatoNesteSak","førsteUttaksdagNesteBarnsSak","bareFarMedmorHarRett","barnFnr","eksisterendeSakAnnenPartRequestIsSuspended","useSaveLoadedRoute","eksisterendeSakAnnenPartData","eksisterendeSakAnnenPartError","eksisterendeSakAnnenPartRequestStatus","Api","eksisterendeVedtakAnnenPart","useMemo","mapAnnenPartsEksisterendeSakFromDTO","saksgrunnlagsTermindato","getTermindatoSomSkalBrukesFraSaksgrunnlagBeggeParter","saksgrunnlagsAntallBarn","getAntallBarnSomSkalBrukesFraSaksgrunnlagBeggeParter","søknadMedOppdatertAntallBarn","actionCreator","nesteBarnsSakAnnenPartRequestIsSuspended","RequestStatus","nesteSakAnnenPartData","nesteSakAnnenPartError","nesteSakAnnenPartRequestStatus","dateToISOString","førsteUttaksdagAnnenPart","getStartdatoFørstePeriodeAnnenPart","oppdatertBarnNesteSak","harAktivitetskravIPeriodeUtenUttak","getHarAktivitetskravIPeriodeUtenUttak","p","overlappendePerioderAnnenPart","Periodene","periode","isUttakAnnenPart","getSamtidigUttaksprosent","uttaksplanMedAnnenPart","finnOgSettInnHull","settInnAnnenPartsUttak","eksisterendeSakMedAnnenPartsPlan","onValidSubmitHandler","cleanedTilleggsopplysninger","cleanupInvisibleCharsFromTilleggsopplysninger","handleBegrunnelseChange","årsak","begrunnelse","ekstraInformasjon","SenEndringÅrsak","opplysninger","periodeAngittAvAnnenPart","tidspunktForEndring","perioderForÅSendeInn","getPerioderSomSkalSendesInn","handleSubmit","isSubmitting","useOnValidSubmit","storeAppState","getPerioderMedUttakRundtFødsel","visAutomatiskJusteringForm","kanJustereAutomatiskVedFødsel","setØnskerJustertUttakVedFødselTilUndefinedHvisUgyldig","ønskerJustertUttakVedFødselErBesvart","ønskerAutomatiskJusteringSvar","ref","useRef","clickHandler","values","erTomEndringssøknad","onAvbrytSøknad","useAvbrytSøknad","onFortsettSøknadSenere","useFortsettSøknadSenere","foreldreSituasjon","getForeldreparSituasjon","kontoRequestIsSuspended","stønadskontoer100","tilgjengeligeStønadskontoerError","getStønadskontoParams","Dekningsgrad","stønadskontoer80","handleOnPlanChange","nyPlan","getEndringstidspunkt","sendErrorMessageToSentry","Loader","stønadskontoer","getValgtStønadskontoFor80Og100Prosent","minsterettUkerToTette","getAntallUkerMinsterett","valgteStønadskontoer","handleSlettUttaksplan","slettetPlanUtenomFpFørFødsel","isUttakAvForeldrepengerFørFødsel","handleResetUttaksplan","Step","stepConfig","InfoOmSøknaden","Uttaksplan","getAktiveArbeidsforhold","AttachmentApi","Alert","StepButtonWrapper","Link","event","getPreviousStepHref","isAvailable","route","uttaksplanInneholderPerioderUtenKonto","renderSøknadRoutes","harGodkjentVilkår","søkerErMyndig","Fragment","Route","Oppsummering","SøknadSendt","Søkersituasjon","OmBarnet","AnnenForelder","UttaksplanInfo","Utenlandsopphold","Inntektsinformasjon","Navigate","ForeldrepengesøknadRoutes","onChangeLocale","currentRoute","location","useLocation","erMyndig","isFirstTimeLoadingApp","setIsFirstTimeLoadingApp","Routes","Velkommen","isEndringssøknadRoute","shouldApplyStorage","storedState","renderSpinner","Foreldrepengesøknad","søkerinfoData","søkerinfoError","sakerData","sakerError","storageData","mapSøkerinfoDTOToSøkerinfo","BrowserRouter","ErrorBoundary","Component","props","error","errorInfo","Sentry.withScope","scope","Sentry.captureException","feilPgaForMangeVedlegg","FOR_MANGE_VEDLEGG_ERROR","feilsideTittel","_a","shouldChangeBrowser","browserInfo","detect","localeFromSessionStorage","AppContainer","setLocale","ForeldrepengesøknadContextProvider","IntlProvider","ByttBrowserModal","activeLocale","AppContainer$1"],"mappings":"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"}