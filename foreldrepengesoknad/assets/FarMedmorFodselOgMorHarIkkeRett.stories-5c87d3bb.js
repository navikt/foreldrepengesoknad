import{j as s}from"./jsx-runtime-2c139190.js";import{w as F}from"./withIntl-56d3014e.js";import{w as u}from"./withRouter-f5ce0c47.js";import{w as O,F as S}from"./ForeldrepengerStateMock-6cb8bbe3.js";import{A as R}from"./AxiosMock-1d20c8fe.js";import{F as N,U}from"./UttaksplanInfo-76dfca2e.js";import{R as T}from"./api-b639d329.js";import"./index-b14cf94f.js";import"./IntlProvider-8c9095a4.js";import"./validationUtils-749fcdf4.js";import"./index-4d501b15.js";import"./Link-bafd8a7d.js";import"./clsx.m-266f4de0.js";import"./extends-3f1aa0c7.js";import"./index-99a37931.js";import"./index-7e4e529b.js";import"./Label-3bb7eadc.js";import"./v4-a960c1f4.js";import"./useSøknad-958c5a2a.js";import"./dateUtils-c35f161a.js";import"./getTypedFormComponents-d760cc41.js";import"./mapSøkerinfoDTO-ee5c98c4.js";import"./useFortsettSøknadSenere-3c16dad9.js";import"./amplitude-7714a9b7.js";import"./globalUtil-9d9e0ee4.js";import"./apiInterceptor-53028d2f.js";import"./AnnenForelder-5c5d4f7f.js";import"./personUtils-191596d0.js";import"./Personkort-69f3889e.js";import"./periodeUtils-756f8671.js";import"./Dekningsgrad-fced8842.js";import"./useSøkerinfo-9e58976c.js";import"./index-47edccfa.js";import"./annenForelderUtils-c18807f3.js";import"./constants-c4bc2eb8.js";import"./LenkeKnapp-7af0979d.js";import"./InfoOmSøknaden-ec4c64e6.js";import"./Sirkelmaske-09fcb65b.js";import"./Foreldrepar-ca80670f.js";import"./InnholdMedIllustrasjon-6e07de37.js";import"./links-b36d21ab.js";import"./Periodene-6b5e37b0.js";import"./useOnValidSubmit-c90b0d0a.js";import"./useSaveLoadedRoute-fbce50ec.js";import"./vedleggUtils-40a9f1c3.js";import"./Attachment-a8e5b8d1.js";import"./eksisterendeSakUtils-3c466e70.js";import"./velkommenUtils-95e3f8b5.js";import"./Fieldset-b670cfe0.js";import"./formUtils-7620ebbd.js";const A={søker:{fnr:"1212121313",fornavn:"Espen",etternavn:"Utvikler",kjønn:"M",fødselsdato:"1978-04-12",barn:[{fnr:"19047815714",fødselsdato:"2021-03-15",annenForelder:{fnr:"12038517080",fødselsdato:"1985-03-12",fornavn:"TALENTFULL",etternavn:"MYGG"},fornavn:"KLØKTIG",etternavn:"MIDTPUNKT",kjønn:"M"}]}},I=4,E="/soknad/uttaksplan-info",x={søknad:{type:"foreldrepenger",harGodkjentVilkår:!0,søkersituasjon:{situasjon:"fødsel",rolle:"far"},barn:{type:"født",fødselsdatoer:["2021-07-01"],antallBarn:"1",termindato:"2021-07-01"},annenForelder:{etternavn:"dfg",fornavn:"dsgdfg",fnr:"123123123",utenlandskFnr:!1,erUfør:!1,kanIkkeOppgis:!1,harRettPåForeldrepengerINorge:!1,harRettPåForeldrepengerIEØS:!1},søker:{erAleneOmOmsorg:!1,språkkode:"nb"},informasjonOmUtenlandsopphold:{tidligereOpphold:[],senereOpphold:[]},erEndringssøknad:!1,uttaksplan:[]},version:I,currentRoute:E,søknadGjelderEtNyttBarn:!0},D={FORELDREPENGER:250},L={farRundtFødsel:0,generellMinsterett:0,toTette:0},l={kontoer:D,minsteretter:L},P={FORELDREPENGER:200},_={farRundtFødsel:0,generellMinsterett:0,toTette:0},f={kontoer:P,minsteretter:_},v="/innsyn/v2/annenPartVedtak",a="/uttak-url/konto",o=x,M=A,Pe={title:"steps/uttaksplan-info/FarMedmorFødselOgMorHarIkkeRett",component:N,decorators:[u,F,O]},g=t=>s(R,{mock:n=>{n.onPost(v).replyOnce(200,void 0,T.FINISHED),n.onGet(a).replyOnce(200,t.stønadskonto100),n.onGet(a).replyOnce(200,t.stønadskonto80)},children:s(S,{søknad:t.context,søkerinfo:t.søkerinfo,children:s(U,{})})}),e=g.bind({});e.args={stønadskonto100:f,stønadskonto80:l,context:o,søkerinfo:M};const r=g.bind({});r.args={stønadskonto100:f,stønadskonto80:l,context:{...o,søknad:{...o.søknad,annenForelder:{...o.søknad.annenForelder,erUfør:!0}}},søkerinfo:M};var k,p,i;e.parameters={...e.parameters,docs:{...(k=e.parameters)==null?void 0:k.docs,source:{originalSource:`args => {
  const restMock = (apiMock: MockAdapter) => {
    apiMock.onPost(UTTAKSPLAN_ANNEN_URL).replyOnce(200, undefined, RequestStatus.FINISHED);
    apiMock.onGet(STØNADSKONTO_URL).replyOnce(200, args.stønadskonto100);
    apiMock.onGet(STØNADSKONTO_URL).replyOnce(200, args.stønadskonto80);
  };
  return <AxiosMock mock={restMock}>
            <ForeldrepengerStateMock søknad={(args.context as ForeldrepengesøknadContextState)} søkerinfo={(args.søkerinfo as SøkerinfoDTO)}>
                <UttaksplanInfo />
            </ForeldrepengerStateMock>
        </AxiosMock>;
}`,...(i=(p=e.parameters)==null?void 0:p.docs)==null?void 0:i.source}}};var d,c,m;r.parameters={...r.parameters,docs:{...(d=r.parameters)==null?void 0:d.docs,source:{originalSource:`args => {
  const restMock = (apiMock: MockAdapter) => {
    apiMock.onPost(UTTAKSPLAN_ANNEN_URL).replyOnce(200, undefined, RequestStatus.FINISHED);
    apiMock.onGet(STØNADSKONTO_URL).replyOnce(200, args.stønadskonto100);
    apiMock.onGet(STØNADSKONTO_URL).replyOnce(200, args.stønadskonto80);
  };
  return <AxiosMock mock={restMock}>
            <ForeldrepengerStateMock søknad={(args.context as ForeldrepengesøknadContextState)} søkerinfo={(args.søkerinfo as SøkerinfoDTO)}>
                <UttaksplanInfo />
            </ForeldrepengerStateMock>
        </AxiosMock>;
}`,...(m=(c=r.parameters)==null?void 0:c.docs)==null?void 0:m.source}}};const _e=["UttaksplanDerMorIkkeHarRettPåForeldrepenger","UttaksplanDerMorIkkeHarRettPåForeldrepengerOgMorErUfør"];export{e as UttaksplanDerMorIkkeHarRettPåForeldrepenger,r as UttaksplanDerMorIkkeHarRettPåForeldrepengerOgMorErUfør,_e as __namedExportsOrder,Pe as default};
//# sourceMappingURL=FarMedmorFodselOgMorHarIkkeRett.stories-5c87d3bb.js.map
