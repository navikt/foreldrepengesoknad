{"version":3,"file":"Uttaksplan-0110c369.js","sources":["../../../../packages/fp-common/src/common/types/UttakRundtFødselÅrsak.ts","../../../../packages/fp-common/src/common/utils/annenForelderUtils.ts","../../../../packages/fp-common/src/common/utils/morsAktivitetUtils.ts","../../../../packages/fp-common/src/common/utils/minsterettUtils.ts","../../../../packages/fp-common/src/common/utils/uttaksplanHarForMangeFlerbarnsuker.ts","../../../../packages/fp-common/src/common/utils/uttaksplanDatoavgrensninger.ts","../../../../packages/uttaksplan/src/components/uttaks-forms/periode-uttak-form/periodeUttakFormConfig.ts","../../../../packages/uttaksplan/src/components/uttaks-forms/spørsmål/er-mor-for-syk-dokumentasjon/MorErForSykDokumentasjonOpplastning.tsx","../../../../packages/uttaksplan/src/components/uttaks-forms/spørsmål/er-mor-for-syk/ErMorForSykSpørsmål.tsx","../../../../packages/uttaksplan/src/components/uttaks-forms/spørsmål/flerbarnsdager/FlerbarnsdagerSpørsmål.tsx","../../../../packages/uttaksplan/src/components/uttaks-forms/spørsmål/hvem-skal-ha-uttak/HvemSkalHaUttakSpørsmål.tsx","../../../../packages/uttaksplan/src/components/uttaks-forms/spørsmål/hvilken-konto/HvilkenKontoSpørsmål.tsx","../../../../packages/uttaksplan/src/components/uttaks-forms/spørsmål/uttak-rundt-fødsel-årsak/UttakRundtFødselÅrsakSpørsmål.tsx","../../../../packages/uttaksplan/src/components/uttaks-forms/spørsmål/overføringsårsak/OverføringsårsakSpørsmål.tsx","../../../../packages/uttaksplan/src/utils/prosentValidering.ts","../../../../packages/uttaksplan/src/components/uttaks-forms/spørsmål/samtidig-uttak/SamtidigUttakSpørsmål.tsx","../../../../packages/uttaksplan/src/components/uttaks-forms/spørsmål/skal-ha-gradering/SkalHaGraderingSpørsmål.tsx","../../../../packages/uttaksplan/src/components/uttaks-forms/submit-listener/SubmitListener.tsx","../../../../packages/uttaksplan/src/utils/uttaksdatoerUtils.ts","../../../../packages/uttaksplan/src/utils/datoAvgrensningerUtils.ts","../../../../packages/uttaksplan/src/components/uttaks-forms/tidsperiode-form/TidsperiodeForm.tsx","../../../../packages/uttaksplan/src/utils/uttaksskjema/kontoSkalBesvarer.ts","../../../../packages/uttaksplan/src/utils/uttaksskjema/uttakRundtFødselÅrsakSpørsmålSkalBesvares.ts","../../../../packages/uttaksplan/src/utils/uttaksskjema/aktivitetskravMorSkalBesvares.ts","../../../../packages/uttaksplan/src/utils/uttaksskjema/erMorForSykSkalBesvares.ts","../../../../packages/uttaksplan/src/utils/uttaksskjema/graderingSkalBesvares.ts","../../../../packages/uttaksplan/src/utils/uttaksskjema/graderingSkalBesvaresPgaWLBUttakRundtFødsel.ts","../../../../packages/uttaksplan/src/utils/uttaksskjema/samtidigUttakSkalBesvares.ts","../../../../packages/uttaksplan/src/utils/uttaksskjema/ønskerFlerbarnsdagerSkalBesvares.ts","../../../../packages/uttaksplan/src/utils/uttaksskjema/hvemSkalTaUttakSkalBesvares.ts","../../../../packages/uttaksplan/src/utils/uttaksskjema/overføringsårsakSkalBesvares.ts","../../../../packages/uttaksplan/src/utils/uttaksskjema/uttakSkjemaregler.ts","../../../../packages/uttaksplan/src/components/uttaks-forms/periode-uttak-form/periodeUttakFormQuestionsConfig.ts","../../../../packages/uttaksplan/src/components/uttaks-forms/spørsmål/aktivitetskrav/AktivitetskravSpørsmål.tsx","../../../../packages/uttaksplan/src/components/uttaks-forms/periode-uttak-form/periodeUttakFormUtils.ts","../../../../packages/uttaksplan/src/components/tidsperiode-display/TidsperiodeDisplay.tsx","../../../../packages/uttaksplan/src/assets/RangeIcon.tsx","../../../../packages/uttaksplan/src/components/aria-text/AriaText.tsx","../../../../packages/uttaksplan/src/utils/preventDoubleTapZoom.ts","../../../../packages/uttaksplan/src/components/sirkelknapp/Sirkelknapp.tsx","../../../../packages/uttaksplan/src/components/number-stepper/StepperKnapp.tsx","../../../../packages/uttaksplan/src/components/number-stepper/NumberStepper.tsx","../../../../packages/uttaksplan/src/components/uker-dager-teller/UkerDagerTeller.tsx","../../../../packages/uttaksplan/src/components/uttak-endre-tidsperiode-spørsmål/UttakEndreTidsperiodeSpørsmål.tsx","../../../../packages/uttaksplan/src/components/uttaks-forms/periode-uttak-form/PeriodeUttakForm.tsx","../../../../packages/uttaksplan/src/components/uttaks-forms/periode-utsettelse-form/periodeUtsettelseFormConfig.ts","../../../../packages/uttaksplan/src/components/uttaks-forms/periode-utsettelse-form/periodeUtsettelseFormUtils.ts","../../../../packages/uttaksplan/src/components/uttaks-forms/periode-utsettelse-form/periodeUtsettelseFormQuestionsConfig.ts","../../../../packages/uttaksplan/src/components/uttaks-forms/spørsmål/utsettelse-årsak/UtsettelseÅrsakSpørsmål.tsx","../../../../packages/uttaksplan/src/components/utsettelse-tidsperiode-spørsmål/UtsettelseTidsperiodeSpørsmål.tsx","../../../../packages/uttaksplan/src/components/uttaks-forms/periode-utsettelse-form/PeriodeUtsettelseForm.tsx","../../../../packages/uttaksplan/src/components/uttaks-forms/ny-periode/NyPeriode.tsx","../../../../packages/uttaksplan/src/components/icon-box/IconBox.tsx","../../../../packages/uttaksplan/src/assets/ArbeidIkon.tsx","../../../../packages/uttaksplan/src/assets/FerieIkon.tsx","../../../../packages/uttaksplan/src/assets/SykdomIkon.tsx","../../../../packages/uttaksplan/src/assets/TerminIkon.tsx","../../../../packages/uttaksplan/src/assets/UttakIkon.tsx","../../../../packages/uttaksplan/src/components/uttaksplan-ikon/UttaksplanIkon.tsx","../../../../packages/uttaksplan/src/types/UttaksplanColor.ts","../../../../packages/uttaksplan/src/utils/styleUtils.ts","../../../../packages/uttaksplan/src/components/stønadskonto-ikon/StønadskontoIkon.tsx","../../../../packages/uttaksplan/src/components/utsettelse-ikon/UtsettelseIkon.tsx","../../../../packages/uttaksplan/src/assets/UttaksplanAdvarselIkon.tsx","../../../../packages/uttaksplan/src/validering/veilederInfo/components/VeilederMelding.tsx","../../../../packages/uttaksplan/src/components/periodeliste-item-header/PeriodelisteItemHeader.tsx","../../../../packages/uttaksplan/src/components/perioder/PeriodeHull.tsx","../../../../packages/uttaksplan/src/components/perioder/PeriodeInfo.tsx","../../../../packages/uttaksplan/src/components/perioder/PeriodeUtenUttak.tsx","../../../../packages/uttaksplan/src/components/uttaks-forms/periode-før-fødsel-form/periodeFørFødselFormConfig.ts","../../../../packages/uttaksplan/src/components/uttaks-forms/periode-før-fødsel-form/periodeFørFødselFormQuestionsConfig.ts","../../../../packages/uttaksplan/src/components/uttaks-forms/periode-før-fødsel-form/periodeFørFødselFormUtils.ts","../../../../packages/uttaksplan/src/components/uttaks-forms/periode-før-fødsel-form/PeriodeFørFødselForm.tsx","../../../../packages/uttaksplan/src/components/perioder/SlettbarAvslåttPeriode.tsx","../../../../packages/uttaksplan/src/validering/veilederInfo/VeilederMeldinger.tsx","../../../../packages/uttaksplan/src/components/periodeliste-item/PeriodelisteItem.tsx","../../../../packages/uttaksplan/src/assets/HjerteIkon.tsx","../../../../packages/uttaksplan/src/components/familiehendelsedato-display/FamiliehendelsedatoDisplay.tsx","../../../../packages/uttaksplan/src/components/periodeliste/Periodeliste.tsx","../../../../packages/uttaksplan/src/components/planlegger/Planlegger.tsx","../../../../packages/uttaksplan/src/components/oversikt-kvoter/konto-status/Kontostatus.tsx","../../../../packages/uttaksplan/src/components/oversikt-kvoter/tilesList/TilesList.tsx","../../../../packages/uttaksplan/src/utils/brukteDagerUtils.ts","../../../../packages/uttaksplan/src/utils/uttaksstatus.ts","../../../../packages/uttaksplan/src/components/oversikt-kvoter/OversiktKvoter.tsx","../../../../packages/uttaksplan/src/validering/tester/inneholderUttaksplanPerioderTest.ts","../../../../packages/uttaksplan/src/validering/utils/uttakValideringUtils.ts","../../../../packages/uttaksplan/src/validering/tester/harMorSøktUgyldigUttakFørsteSeksUkerTest.ts","../../../../packages/uttaksplan/src/validering/tester/stønadskontoInneholderForMyeUttakKunSøkerTest.ts","../../../../packages/uttaksplan/src/validering/tester/harFarMedmorSøktUgyldigUttakEllerUtsettelseFørsteSeksUkerTest.ts","../../../../packages/uttaksplan/src/validering/tester/erUttaksplanBareOppholdTest.ts","../../../../packages/uttaksplan/src/validering/tester/slutterUttaksplanMedOppholdTest.ts","../../../../packages/uttaksplan/src/validering/tester/starterUttaksplanMedOppholdTest.ts","../../../../packages/uttaksplan/src/validering/tester/erUttaksplanGraderingStørreEnnSamtidigUttakTest.ts","../../../../packages/uttaksplan/src/validering/tester/erTilleggsopplysningerGyldigTest.ts","../../../../packages/uttaksplan/src/validering/tester/harTilleggsopplysningerGyldigeCharsTest.ts","../../../../packages/uttaksplan/src/validering/tester/harUttaksplanForMangeFlerbarnsdagerTest.ts","../../../../packages/uttaksplan/src/validering/tester/inneholderUttaksplanDatoSomIkkeErUttaksdagTest.ts","../../../../packages/uttaksplan/src/utils/manglendeVedleggUtils.ts","../../../../packages/uttaksplan/src/validering/tester/harPerioderManglendeVedleggTest.ts","../../../../packages/uttaksplan/src/validering/tester/inneholderSenUtsettelsePgaFerieTest.ts","../../../../packages/uttaksplan/src/validering/tester/inneholderTapteDagerTest.ts","../../../../packages/uttaksplan/src/validering/tester/inneholderBareUtsettelserTest.ts","../../../../packages/uttaksplan/src/validering/tester/inneholderSenUtsettelsePgaArbeidTest.ts","../../../../packages/uttaksplan/src/validering/tester/overskriverEndringerAnnenPartsPerioder.ts","../../../../packages/uttaksplan/src/validering/tester/overlapperPeriodeAndrePerioderTest.ts","../../../../packages/uttaksplan/src/validering/utils/types/regelTypes.ts","../../../../packages/uttaksplan/src/validering/utils/regelUtils.ts","../../../../packages/uttaksplan/src/validering/utils/stillingsprosentValideringUtils.ts","../../../../packages/uttaksplan/src/validering/utils/periodeValideringUtils.ts","../../../../packages/uttaksplan/src/validering/tester/periodevalideringstester/harUttaksperiodeGyldigGradering.ts","../../../../packages/uttaksplan/src/validering/utils/validatorUtils.ts","../../../../packages/uttaksplan/src/validering/utils/tidsperiodeValideringUtils.ts","../../../../packages/uttaksplan/src/validering/tester/periodevalideringstester/harPeriodeGyldigTidsperiode.ts","../../../../packages/uttaksplan/src/validering/tester/periodevalideringstester/harUttaksperiodeStønadskonto.ts","../../../../packages/uttaksplan/src/validering/tester/periodevalideringstester/erSamtidigUttakGyldig.ts","../../../../packages/uttaksplan/src/validering/tester/periodevalideringstester/erUtsettelseEtterFamiliehendelsesdato.ts","../../../../packages/uttaksplan/src/validering/tester/periodevalideringstester/starterUttaksperiodeRundtFødselEtter2UkerFørFødsel.ts","../../../../packages/uttaksplan/src/validering/tester/periodevalideringstester/slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel.ts","../../../../packages/uttaksplan/src/validering/tester/periodevalideringstester/periodeDeFørsteSeksUkeneHarUlovligUttakBFHR.ts","../../../../packages/uttaksplan/src/validering/tester/periodevalideringstester/harBekreftet100ProsentArbeidIUtsettelsePgaArbeid.ts","../../../../packages/uttaksplan/src/validering/tester/periodevalideringstester/forSenUttakVedPåfølgendeBarn.ts","../../../../packages/uttaksplan/src/validering/tester/periodevalideringstester/index.ts","../../../../packages/uttaksplan/src/validering/tester/harSøktOmFerieUtenArbeidsforholdTest.ts","../../../../packages/uttaksplan/src/validering/tester/inneholderForMyeFerie.ts","../../../../packages/uttaksplan/src/validering/tester/kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme.ts","../../../../packages/uttaksplan/src/validering/tester/erUttaksmengdeForFarMedmorForHøyTest.ts","../../../../packages/uttaksplan/src/validering/tester/burdeKanskjeSøkeGraderingTest.tsx","../../../../packages/uttaksplan/src/validering/tester/ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindatoTest.ts","../../../../packages/uttaksplan/src/validering/tester/inneholderPerioderUtenAktivitetskrav.ts","../../../../packages/uttaksplan/src/validering/tester/inneholderUtsettelserUtenÅrsak.ts","../../../../packages/uttaksplan/src/validering/tester/farMedmorHarSøktUgyldigAntallDagerUttakRundtFødselTest.ts","../../../../packages/uttaksplan/src/validering/tester/harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUkerTest.ts","../../../../packages/uttaksplan/src/validering/tester/farMedMorHarRettPåUttakRundtFødselTest.ts","../../../../packages/uttaksplan/src/validering/tester/farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest.tsx","../../../../packages/uttaksplan/src/validering/tester/inneholderUttaksperioderMedUbesvartGradering.ts","../../../../packages/uttaksplan/src/validering/tester/inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest.ts","../../../../packages/uttaksplan/src/validering/tester/farMedmorHarRettPåFlerbarnsdagerTest.tsx","../../../../packages/uttaksplan/src/validering/tester/overstigerMinsterettVedToTette.ts","../../../../packages/uttaksplan/src/validering/tester/harPerioderEtterFørsteStønadsdagNesteBarnDerToTette.ts","../../../../packages/uttaksplan/src/validering/index.ts","../../../../packages/uttaksplan/src/validering/validerUttaksplan.ts","../../../../packages/uttaksplan/src/validering/veilederInfo/VeilederInfo.tsx","../../../../packages/uttaksplan/src/validering/veilederInfo/utils.ts","../../../../node_modules/.pnpm/lodash.throttle@4.1.1/node_modules/lodash.throttle/index.js","../../../../packages/uttaksplan/src/components/oppgi-tilleggsopplysninger/OppgiTilleggsopplysninger.tsx","../../../../packages/uttaksplan/src/components/slett-uttaksplan-modal/SlettUttaksplanModal.tsx","../../../../packages/uttaksplan/src/builder/slettPeriode.ts","../../../../packages/uttaksplan/src/builder/oppdaterPeriode.ts","../../../../packages/uttaksplan/src/builder/Uttaksplanbuilder.ts","../../../../packages/uttaksplan/src/components/reset-uttaksplan-modal/ResetUttaksplanModal.tsx","../../../../packages/uttaksplan/src/utils/uttaksplanUtils.ts","../../../../packages/uttaksplan/src/Uttaksplan.tsx"],"sourcesContent":["export enum UttakRundtFødselÅrsak {\n    samtidigUttak = 'Samtidig Uttak',\n    morErForSyk = 'Mor er for syk',\n}\n","import { IntlShape } from 'react-intl';\nimport { AnnenForelder, AnnenForelderOppgitt, Sak, isAnnenForelderOppgitt } from '../types';\nimport intlUtils from './intlUtils';\nimport { RettighetType } from '../types/RettighetType';\n\nexport const getErMorUfør = (annenForelder: AnnenForelder, erFarEllerMedmor: boolean) => {\n    if (isAnnenForelderOppgitt(annenForelder) && erFarEllerMedmor) {\n        return !!annenForelder.erUfør;\n    }\n\n    return false;\n};\n\nexport const harAnnenForelderRettIEØS = (annenForelder: AnnenForelder): boolean => {\n    return isAnnenForelderOppgitt(annenForelder) && !!annenForelder.harRettPåForeldrepengerIEØS;\n};\n\nexport const getMockAnnenForelder = (sak: Sak, intl: IntlShape): AnnenForelderOppgitt => {\n    return {\n        fornavn: intlUtils(intl, 'annen.forelder'),\n        etternavn: '',\n        fnr: '',\n        harRettPåForeldrepengerINorge:\n            sak.rettighetType === RettighetType.BEGGE_RETT && !sak.harAnnenForelderTilsvarendeRettEØS,\n        harRettPåForeldrepengerIEØS: sak.harAnnenForelderTilsvarendeRettEØS,\n        erUfør: (!sak.sakTilhørerMor && sak.morUføretrygd) || undefined,\n        kanIkkeOppgis: false,\n    };\n};\n","import dayjs from 'dayjs';\nimport { hasValue } from './validationUtils';\nimport { isAnnenForelderOppgitt, AnnenForelder, MorsAktivitet, Skjemanummer } from '../types';\n\nexport const aktivitetskravMorUtil = {\n    skalBesvaresVedUtsettelse(søkerErFarEllerMedmor: boolean, annenForelder: AnnenForelder): boolean {\n        const reglerFørFørsteOkt2021 = dayjs(new Date()).isBefore(new Date('2021-10-01'), 'day');\n        const annenForelderErUfør = isAnnenForelderOppgitt(annenForelder) ? annenForelder.erUfør : undefined;\n        const annenForelderHarRett = isAnnenForelderOppgitt(annenForelder)\n            ? annenForelder.harRettPåForeldrepengerINorge || annenForelder.harRettPåForeldrepengerIEØS\n            : undefined;\n\n        return !søkerErFarEllerMedmor ||\n            (annenForelderHarRett === false && annenForelderErUfør === true && !reglerFørFørsteOkt2021)\n            ? false\n            : annenForelderHarRett === false;\n    },\n};\n\nexport const getMorsAktivitetSkjemanummer = (morsAktivitet?: MorsAktivitet): Skjemanummer => {\n    switch (morsAktivitet) {\n        case MorsAktivitet.Innlagt:\n            return Skjemanummer.DOK_INNLEGGELSE;\n        case MorsAktivitet.Kvalifiseringsprogrammet:\n            return Skjemanummer.BEKREFTELSE_DELTAR_KVALIFISERINGSPROGRAM;\n        case MorsAktivitet.Introduksjonsprogrammet:\n            return Skjemanummer.DOK_DELTAKELSE_I_INTRODUKSJONSPROGRAMMET;\n        case MorsAktivitet.ArbeidOgUtdanning:\n        case MorsAktivitet.Arbeid:\n        case MorsAktivitet.TrengerHjelp:\n            return Skjemanummer.DOK_MORS_UTDANNING_ARBEID_SYKDOM;\n        case MorsAktivitet.Utdanning:\n            return Skjemanummer.BEKREFTELSE_FRA_STUDIESTED;\n        default:\n            return Skjemanummer.ANNET;\n    }\n};\n\nexport const getMorsAktivitet = (\n    aktivitetskravMorValue: string | undefined,\n    erMorForSykValue: boolean | undefined,\n): MorsAktivitet | undefined => {\n    if (hasValue(aktivitetskravMorValue)) {\n        return aktivitetskravMorValue as MorsAktivitet;\n    }\n    if (erMorForSykValue) {\n        return MorsAktivitet.TrengerHjelp;\n    }\n    return undefined;\n};\n","import uttaksConstants from '../constants/constants';\nimport { Dekningsgrad } from '../types';\nimport { andreAugust2022ReglerGjelder } from './dateUtils';\n\nexport const getBareFarHarRettKontoUtenAktivitetskravUker = (\n    antallBarn: number,\n    morErUfør: boolean,\n    familiehendelsesdato: Date,\n    dekningsgrad: Dekningsgrad,\n    bareFarHarRett: boolean,\n): number => {\n    if (!bareFarHarRett) {\n        return 0;\n    }\n\n    if (andreAugust2022ReglerGjelder(familiehendelsesdato) && antallBarn === 1 && !morErUfør) {\n        return 8;\n    }\n    let morUførUker = 0;\n    let flerbarnsukerSomDelAvMinsterett = 0;\n\n    if (morErUfør) {\n        morUførUker = dekningsgrad === Dekningsgrad.HUNDRE_PROSENT ? 15 : 19;\n    }\n\n    if (andreAugust2022ReglerGjelder(familiehendelsesdato)) {\n        if (antallBarn === 2) {\n            flerbarnsukerSomDelAvMinsterett = dekningsgrad === Dekningsgrad.HUNDRE_PROSENT ? 17 : 21;\n        } else if (antallBarn > 2) {\n            flerbarnsukerSomDelAvMinsterett = dekningsgrad === Dekningsgrad.HUNDRE_PROSENT ? 46 : 56;\n        }\n    }\n\n    return flerbarnsukerSomDelAvMinsterett + morUførUker;\n};\n\nexport const getBareFarHarRettFlerbarnsdagerUker = (\n    antallBarn: number,\n    familiehendelsesdato: Date,\n    dekningsgrad: Dekningsgrad,\n    bareFarHarRett: boolean,\n): number => {\n    if (!bareFarHarRett || antallBarn === 1) {\n        return 0;\n    }\n\n    //Flerbarnsdager regnes som en del av minsteretten når WLB Regler gjelder, og blir med i kontoen uten aktivitetskrav\n    if (andreAugust2022ReglerGjelder(familiehendelsesdato)) {\n        return 0;\n    }\n\n    let flerbarnsUker = 0;\n\n    if (antallBarn === 2) {\n        flerbarnsUker =\n            dekningsgrad === Dekningsgrad.HUNDRE_PROSENT\n                ? uttaksConstants.ANTALL_UKER_2_BARN_100_PROSENT_UTTAK\n                : uttaksConstants.ANTALL_UKER_2_BARN_80_PROSENT_UTTAK;\n    } else if (antallBarn > 2) {\n        flerbarnsUker =\n            dekningsgrad === Dekningsgrad.HUNDRE_PROSENT\n                ? uttaksConstants.ANTALL_UKER_3_ELLER_FLERE_BARN_100_PROSENT_UTTAK\n                : uttaksConstants.ANTALL_UKER_3_ELLER_FLERE_BARN_80_PROSENT_UTTAK;\n    }\n\n    return flerbarnsUker;\n};\n\nexport const getBareFarHarRettAntallUkerPåÅTaUtDagerUtenAktivitetskravFørWLB = (\n    antallBarn: number,\n    familiehendelsesdato: Date,\n    dekningsgrad: Dekningsgrad,\n    bareFarHarRett: boolean,\n) => {\n    if (!bareFarHarRett) {\n        return 0;\n    }\n    const antallUkerEtterFødselMor = uttaksConstants.ANTALL_UKER_MØDREKVOTE_ETTER_FØDSEL;\n    const antallUkerForeldrepengerFar =\n        dekningsgrad === Dekningsgrad.HUNDRE_PROSENT\n            ? uttaksConstants.ANTALL_UKER_FORELDREPENGER_BARE_FAR_HAR_RETT_100_PROSENT\n            : uttaksConstants.ANTALL_UKER_FORELDREPENGER_BARE_FAR_HAR_RETT_80_PROSENT;\n    const flerbarnsUker = getBareFarHarRettFlerbarnsdagerUker(\n        antallBarn,\n        familiehendelsesdato,\n        dekningsgrad,\n        bareFarHarRett,\n    );\n\n    return antallUkerEtterFødselMor + antallUkerForeldrepengerFar + flerbarnsUker;\n};\n","import { Dekningsgrad, Periode, isUttaksperiode } from '../types';\nimport { finnAntallDagerÅTrekke } from './uttaksPlanStatus';\n\nexport const getFlerbarnsuker = (dekningsgrad: string, antallBarn: number): number => {\n    if (antallBarn === 2) {\n        if (dekningsgrad === Dekningsgrad.HUNDRE_PROSENT) {\n            return 17;\n        } else {\n            return 21;\n        }\n    } else {\n        if (dekningsgrad === Dekningsgrad.HUNDRE_PROSENT) {\n            return 46;\n        } else {\n            return 56;\n        }\n    }\n};\n\nexport const uttaksplanHarForMangeFlerbarnsdager = (\n    uttaksplan: Periode[],\n    dekningsgrad: Dekningsgrad,\n    antallBarn: number,\n) => {\n    const result: number = uttaksplan\n        .slice()\n        .filter((periode) => isUttaksperiode(periode) && periode.ønskerFlerbarnsdager === true)\n        .reduce((sum: number, periode: Periode) => {\n            if (isUttaksperiode(periode)) {\n                return finnAntallDagerÅTrekke(periode) + sum;\n            } else {\n                return sum;\n            }\n        }, 0);\n\n    return result > getFlerbarnsuker(dekningsgrad, antallBarn) * 5;\n};\n","import dayjs from 'dayjs';\nimport { Uttaksdagen } from './Uttaksdagen';\nimport { dateToISOString } from '@navikt/sif-common-formik-ds/lib';\nimport { DatepickerLimitations } from '@navikt/ds-datepicker';\nimport uttaksConstants from '../constants/constants';\nimport { Situasjon } from '../types';\nimport { andreAugust2022ReglerGjelder } from './dateUtils';\nimport { getFørsteUttaksdag2UkerFørFødsel } from './wlbUtils';\n\nfunction sisteMuligePermisjonsdag(familiehendelsedato: Date): Date {\n    const startDato = Uttaksdagen(familiehendelsedato).denneEllerNeste();\n    return Uttaksdagen(\n        dayjs(startDato).add(uttaksConstants.MAKS_PERMISJONSLENGDE_I_ÅR, 'years').toDate(),\n    ).denneEllerNeste();\n}\n\nconst konverterMinOgMaxDatoerTilString = (minDate: Date, maxDate: Date) => ({\n    minDate: dateToISOString(minDate),\n    maxDate: dateToISOString(maxDate),\n});\n\nconst defaultPermisjonsperiodeAvgrensning = (familiehendelsesdato: Date): DatepickerLimitations => {\n    const minDato = Uttaksdagen(familiehendelsesdato).denneEllerNeste();\n    const maksDato = sisteMuligePermisjonsdag(familiehendelsesdato);\n    return {\n        ...konverterMinOgMaxDatoerTilString(minDato, maksDato),\n        weekendsNotSelectable: true,\n    };\n};\n\nconst startdatoFørTermin = (familiehendelsesdato: Date, termindato: Date | undefined): DatepickerLimitations => {\n    const termindatoMinus12Uker =\n        termindato !== undefined\n            ? dayjs(termindato).subtract(uttaksConstants.MAKS_ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5 - 1, 'weeks')\n            : undefined;\n    const erFødselsdatoFørTermindatoMinus12Uker =\n        termindato !== undefined ? dayjs(familiehendelsesdato).isBefore(termindatoMinus12Uker) : false;\n\n    if (erFødselsdatoFørTermindatoMinus12Uker) {\n        const maksDato = Uttaksdagen(dayjs(termindato).toDate()).forrige();\n        const minDato = Uttaksdagen(familiehendelsesdato).denneEllerForrige();\n        return {\n            ...konverterMinOgMaxDatoerTilString(minDato, maksDato),\n            weekendsNotSelectable: true,\n        };\n    } else {\n        const datoÅRegneFra = termindato !== undefined ? termindato : familiehendelsesdato;\n        const maksDato = Uttaksdagen(dayjs(datoÅRegneFra).toDate()).forrige();\n        const minDato = Uttaksdagen(maksDato).trekkFra(\n            uttaksConstants.MAKS_ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5 - 1,\n        );\n        return {\n            ...konverterMinOgMaxDatoerTilString(minDato, maksDato),\n            weekendsNotSelectable: true,\n        };\n    }\n};\n\nconst startdatoFørTerminForeldrepengerFørFødselKonto = (familiehendelsesdato: string): DatepickerLimitations => {\n    const maksDato = Uttaksdagen(dayjs(familiehendelsesdato).toDate()).forrige();\n    const minDato = Uttaksdagen(maksDato).trekkFra(uttaksConstants.ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5 - 1);\n    return {\n        ...konverterMinOgMaxDatoerTilString(minDato, maksDato),\n        weekendsNotSelectable: true,\n    };\n};\n\nconst ekstrauttakFørFødsel = (familiehendelsesdato: string): DatepickerLimitations => {\n    const sisteDagFørFødsel = Uttaksdagen(dayjs(familiehendelsesdato).toDate()).forrige();\n    const minDato = Uttaksdagen(sisteDagFørFødsel).trekkFra(\n        uttaksConstants.MAKS_ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5 - 1,\n    );\n    const maksDato = Uttaksdagen(sisteDagFørFødsel).trekkFra(\n        uttaksConstants.ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5 - 1,\n    );\n    return {\n        ...konverterMinOgMaxDatoerTilString(minDato, maksDato),\n        weekendsNotSelectable: true,\n    };\n};\n\nconst startdatoPermisjonAleneomsorgFarMedmor = (\n    datoForAleneomsorg: string,\n    familiehendelsesdato: string,\n): DatepickerLimitations => {\n    const minDato = Uttaksdagen(dayjs(datoForAleneomsorg).toDate()).denneEllerNeste();\n    const maksDato = sisteMuligePermisjonsdag(dayjs(familiehendelsesdato).toDate());\n    return {\n        ...konverterMinOgMaxDatoerTilString(minDato, maksDato),\n        weekendsNotSelectable: true,\n    };\n};\n\nconst startdatoPermisjonAdopsjon = (familiehendelsesdato: string): DatepickerLimitations => {\n    return defaultPermisjonsperiodeAvgrensning(dayjs(familiehendelsesdato).toDate());\n};\n\nconst morsSisteUttaksdag = (familiehendelsesdato: string): DatepickerLimitations => {\n    return defaultPermisjonsperiodeAvgrensning(dayjs(familiehendelsesdato).toDate());\n};\n\nconst startdatoPermisjonFarMedmor = (\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    situasjon: Situasjon,\n): DatepickerLimitations => {\n    const defaultAvgrensning = defaultPermisjonsperiodeAvgrensning(familiehendelsesdato);\n    if (situasjon === 'fødsel' && andreAugust2022ReglerGjelder(familiehendelsesdato)) {\n        return {\n            ...defaultAvgrensning,\n            minDate: dateToISOString(getFørsteUttaksdag2UkerFørFødsel(familiehendelsesdato, termindato)),\n        };\n    }\n    return defaultAvgrensning;\n};\n\nexport const uttaksplanDatoavgrensninger = {\n    startdatoFørTermin,\n    morsSisteUttaksdag,\n    startdatoPermisjonFarMedmor,\n    startdatoPermisjonAdopsjon,\n    startdatoPermisjonAleneomsorgFarMedmor,\n    startdatoFørTerminForeldrepengerFørFødselKonto,\n    ekstrauttakFørFødsel,\n};\n","import {\n    Attachment,\n    Forelder,\n    MorsAktivitet,\n    StønadskontoType,\n    OverføringÅrsakType,\n    Arbeidsform,\n    UttakRundtFødselÅrsak,\n} from '@navikt/fp-common';\nimport { YesOrNo, getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\n\nexport enum PeriodeUttakFormField {\n    fom = 'fom',\n    tom = 'tom',\n    konto = 'konto',\n    samtidigUttak = 'samtidigUttak',\n    aktivitetskravMor = 'aktivitetskravMor',\n    aktivitetskravMorDokumentasjon = 'aktivitetskravMorDokumentasjon',\n    overføringsårsak = 'overføringsårsak',\n    overføringsdokumentasjon = 'overføringsdokumentasjon',\n    skalHaGradering = 'skalHaGradering',\n    stillingsprosent = 'stillingsprosent',\n    arbeidsformer = 'arbeidsformer',\n    erMorForSyk = 'erMorForSyk',\n    erMorForSykDokumentasjon = 'erMorForSykDokumentasjon',\n    uttakRundtFødselÅrsak = 'uttakRundtFødselÅrsak',\n    samtidigUttakProsent = 'samtidigUttakProsent',\n    hvemSkalTaUttak = 'hvemSkalTaUttak',\n    ønskerFlerbarnsdager = 'ønskerFlerbarnsdager',\n}\n\nexport interface PeriodeUttakFormData {\n    [PeriodeUttakFormField.fom]: Date | undefined;\n    [PeriodeUttakFormField.tom]: Date | undefined;\n    [PeriodeUttakFormField.konto]: StønadskontoType | '';\n    [PeriodeUttakFormField.samtidigUttak]: YesOrNo;\n    [PeriodeUttakFormField.aktivitetskravMor]: MorsAktivitet | '';\n    [PeriodeUttakFormField.aktivitetskravMorDokumentasjon]: Attachment[];\n    [PeriodeUttakFormField.overføringsårsak]: OverføringÅrsakType | '';\n    [PeriodeUttakFormField.overføringsdokumentasjon]: Attachment[];\n    [PeriodeUttakFormField.skalHaGradering]: YesOrNo;\n    [PeriodeUttakFormField.stillingsprosent]: string;\n    [PeriodeUttakFormField.arbeidsformer]: Arbeidsform | '';\n    [PeriodeUttakFormField.erMorForSyk]: YesOrNo;\n    [PeriodeUttakFormField.erMorForSykDokumentasjon]: Attachment[];\n    [PeriodeUttakFormField.uttakRundtFødselÅrsak]: UttakRundtFødselÅrsak | '';\n    [PeriodeUttakFormField.samtidigUttakProsent]: string;\n    [PeriodeUttakFormField.hvemSkalTaUttak]: Forelder | '';\n    [PeriodeUttakFormField.ønskerFlerbarnsdager]: YesOrNo;\n}\n\nexport const PeriodeUttakFormComponents = getTypedFormComponents<PeriodeUttakFormField, PeriodeUttakFormData>();\n","import { Attachment, AttachmentType, Block, Skjemanummer } from '@navikt/fp-common';\nimport FormikFileUploader from 'app/components/formik-file-uploader/FormikFileUploader';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\nimport { GuidePanel } from '@navikt/ds-react';\n\ninterface Props {\n    vedlegg: Attachment[];\n    navnMor: string;\n    isOpen: boolean;\n}\n\nconst MorErForSykDokumentasjonOpplastning: FunctionComponent<Props> = ({ navnMor, vedlegg, isOpen }) => {\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <GuidePanel>\n                    <FormattedMessage id=\"uttaksplan.erMorForSykVeileder\" values={{ navn: navnMor }} />\n                </GuidePanel>\n            </Block>\n            <Block visible={isOpen}>\n                <FormikFileUploader\n                    legend=\"Dokumentasjon for mors sykdom\"\n                    label=\"Last opp dokumentasjon for mors sykdom\"\n                    name={PeriodeUttakFormField.erMorForSykDokumentasjon}\n                    attachmentType={AttachmentType.UTSETTELSE_SYKDOM}\n                    skjemanummer={Skjemanummer.DOK_MORS_UTDANNING_ARBEID_SYKDOM}\n                    attachments={vedlegg}\n                />\n            </Block>\n        </>\n    );\n};\n\nexport default MorErForSykDokumentasjonOpplastning;\n","import { Attachment, Block, intlUtils } from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\nimport MorErForSykDokumentasjonOpplastning from '../er-mor-for-syk-dokumentasjon/MorErForSykDokumentasjonOpplastning';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\n\ninterface Props {\n    fieldName: PeriodeUttakFormField;\n    erMorForSyk: YesOrNo;\n    vedlegg: Attachment[];\n    navnMor: string;\n    isOpen: boolean;\n}\n\nconst ErMorForSykSpørsmål: FunctionComponent<Props> = ({ fieldName, erMorForSyk, navnMor, vedlegg, isOpen }) => {\n    const intl = useIntl();\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <PeriodeUttakFormComponents.YesOrNoQuestion\n                    name={fieldName}\n                    legend={intlUtils(intl, 'uttaksplan.erMorForSyk')}\n                    validate={(value: YesOrNo) => {\n                        if (value === YesOrNo.UNANSWERED) {\n                            return intlUtils(intl, 'uttaksplan.validering.erMorForSyk');\n                        }\n\n                        return undefined;\n                    }}\n                />\n            </Block>\n            <Block padBottom=\"l\" visible={erMorForSyk === YesOrNo.YES}>\n                <MorErForSykDokumentasjonOpplastning navnMor={navnMor} vedlegg={vedlegg} isOpen={isOpen} />\n            </Block>\n        </>\n    );\n};\n\nexport default ErMorForSykSpørsmål;\n","import { intlUtils } from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\n\ninterface Props {\n    fieldName: PeriodeUttakFormField;\n}\n\nconst FlerbarnsdagerSpørsmål: FunctionComponent<Props> = ({ fieldName }) => {\n    const intl = useIntl();\n\n    return (\n        <PeriodeUttakFormComponents.YesOrNoQuestion\n            name={fieldName}\n            legend={intlUtils(intl, 'uttaksplan.flerbarnsdager')}\n            validate={(value: YesOrNo) => {\n                if (value === YesOrNo.UNANSWERED) {\n                    return intlUtils(intl, 'uttaksplan.validering.flerbarnsdager');\n                }\n\n                return undefined;\n            }}\n        />\n    );\n};\n\nexport default FlerbarnsdagerSpørsmål;\n","import { Forelder, NavnPåForeldre, hasValue, intlUtils } from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\nimport { capitalizeFirstLetter } from '@navikt/fp-common/src/common/utils/stringUtils';\n\ninterface Props {\n    fieldName: PeriodeUttakFormField;\n    navnPåForeldre: NavnPåForeldre;\n    erFarEllerMedmor: boolean;\n}\n\nconst HvemSkalHaUttakSpørsmål: FunctionComponent<Props> = ({ fieldName, navnPåForeldre, erFarEllerMedmor }) => {\n    const intl = useIntl();\n\n    return (\n        <PeriodeUttakFormComponents.RadioGroup\n            legend={intlUtils(intl, 'uttaksplan.hvemSkalHaUttak')}\n            name={fieldName}\n            radios={[\n                {\n                    label: erFarEllerMedmor\n                        ? capitalizeFirstLetter(navnPåForeldre.farMedmor)\n                        : capitalizeFirstLetter(navnPåForeldre.mor),\n                    value: erFarEllerMedmor ? Forelder.farMedmor : Forelder.mor,\n                },\n                {\n                    label: erFarEllerMedmor\n                        ? capitalizeFirstLetter(navnPåForeldre.mor)\n                        : capitalizeFirstLetter(navnPåForeldre.farMedmor),\n                    value: erFarEllerMedmor ? Forelder.mor : Forelder.farMedmor,\n                },\n            ]}\n            validate={(value) => {\n                if (!hasValue(value)) {\n                    return intlUtils(intl, 'uttaksplan.validering.hvemSkalHaUttak');\n                }\n\n                return undefined;\n            }}\n        />\n    );\n};\n\nexport default HvemSkalHaUttakSpørsmål;\n","import { NavnPåForeldre, StønadskontoType, getStønadskontoNavn, hasValue, intlUtils } from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\nimport { FormikRadioProp } from '@navikt/sif-common-formik-ds/lib/components/formik-radio-group/FormikRadioGroup';\n\ninterface Props {\n    velgbareStønadskontoer: StønadskontoType[];\n    erOppholdsperiode: boolean;\n    navnPåForeldre: NavnPåForeldre;\n    fieldName: PeriodeUttakFormField;\n    erFarEllerMedmor: boolean;\n    erAleneOmOmsorg: boolean;\n}\n\nconst getSpørsmålsTekst = (\n    erOppholdsperiode: boolean,\n    intl: IntlShape,\n    navnPåForeldre: NavnPåForeldre,\n    erFarEllerMedmor: boolean,\n): string => {\n    if (erOppholdsperiode) {\n        const navnAnnenForelder = erFarEllerMedmor ? navnPåForeldre.mor : navnPåForeldre.farMedmor;\n        return intlUtils(intl, 'uttaksplan.hvilkenKvote.annenForelder', {\n            navnAnnenForelder,\n        });\n    } else {\n        return intlUtils(intl, 'uttaksplan.hvilkenKvote');\n    }\n};\n\nconst HvilkenKontoSpørsmål: FunctionComponent<Props> = ({\n    velgbareStønadskontoer,\n    erOppholdsperiode,\n    navnPåForeldre,\n    fieldName,\n    erFarEllerMedmor,\n    erAleneOmOmsorg,\n}) => {\n    const intl = useIntl();\n    const legend = getSpørsmålsTekst(erOppholdsperiode, intl, navnPåForeldre, erFarEllerMedmor);\n\n    const radios = velgbareStønadskontoer.map(\n        (konto): FormikRadioProp => ({\n            label: getStønadskontoNavn(intl, konto, navnPåForeldre, erFarEllerMedmor, erAleneOmOmsorg),\n            value: `${konto}`,\n        }),\n    );\n\n    return (\n        <PeriodeUttakFormComponents.RadioGroup\n            name={fieldName}\n            radios={radios}\n            legend={legend}\n            validate={(value) => {\n                if (!hasValue(value)) {\n                    return intlUtils(intl, 'uttaksplan.validering.hvilkenKonto');\n                }\n\n                return undefined;\n            }}\n        />\n    );\n};\n\nexport default HvilkenKontoSpørsmål;\n","import { Attachment, Block, UttakRundtFødselÅrsak, hasValue, intlUtils } from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\nimport MorErForSykDokumentasjonOpplastning from '../er-mor-for-syk-dokumentasjon/MorErForSykDokumentasjonOpplastning';\n\ninterface Props {\n    fieldName: PeriodeUttakFormField;\n    uttakRundtFødselÅrsak: UttakRundtFødselÅrsak | '';\n    vedlegg: Attachment[];\n    navnMor: string;\n    isOpen: boolean;\n}\n\nconst UttakRundtFødselÅrsakSpørsmål: FunctionComponent<Props> = ({\n    fieldName,\n    uttakRundtFødselÅrsak,\n    navnMor,\n    vedlegg,\n    isOpen,\n}) => {\n    const intl = useIntl();\n    const radios = [\n        {\n            label: intlUtils(intl, 'ja'),\n            value: UttakRundtFødselÅrsak.samtidigUttak,\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.uttakrundtFødselÅrsak.nei.morErForSyk'),\n            value: UttakRundtFødselÅrsak.morErForSyk,\n        },\n    ];\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <PeriodeUttakFormComponents.RadioGroup\n                    legend={intlUtils(intl, 'uttaksplan.uttakrundtFødselÅrsak.spørsmål')}\n                    name={fieldName}\n                    radios={radios}\n                    validate={(value) => {\n                        if (!hasValue(value)) {\n                            return intlUtils(intl, 'uttaksplan.validering.uttakRundtFødselFarMedmorWLB');\n                        }\n\n                        return undefined;\n                    }}\n                />\n            </Block>\n            <Block padBottom=\"l\" visible={uttakRundtFødselÅrsak === UttakRundtFødselÅrsak.morErForSyk}>\n                <MorErForSykDokumentasjonOpplastning navnMor={navnMor} vedlegg={vedlegg} isOpen={isOpen} />\n            </Block>\n        </>\n    );\n};\n\nexport default UttakRundtFødselÅrsakSpørsmål;\n","import {\n    intlUtils,\n    Block,\n    hasValue,\n    Attachment,\n    OverføringÅrsakType,\n    AttachmentType,\n    Skjemanummer,\n    getNavnGenitivEierform,\n} from '@navikt/fp-common';\nimport FormikFileUploader from 'app/components/formik-file-uploader/FormikFileUploader';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\nimport { GuidePanel } from '@navikt/ds-react';\nimport { capitalizeFirstLetter } from '@navikt/fp-common/src/common/utils/stringUtils';\ninterface Props {\n    vedlegg: Attachment[];\n    navnAnnenForelder: string;\n    erEndringssøknad: boolean;\n    valgtOverføringsårsak: OverføringÅrsakType | '';\n    isOpen: boolean;\n}\n\nconst OverføringsårsakSpørsmål: FunctionComponent<Props> = ({\n    vedlegg,\n    navnAnnenForelder,\n    erEndringssøknad,\n    valgtOverføringsårsak,\n    isOpen,\n}) => {\n    const intl = useIntl();\n    const navn = capitalizeFirstLetter(navnAnnenForelder);\n    const radios = [\n        {\n            label: intlUtils(intl, 'uttaksplan.overføringsårsaktype.INSTITUSJONSOPPHOLD_ANNEN_FORELDER', {\n                navnAnnenForelder: navn,\n            }),\n            value: OverføringÅrsakType.institusjonsoppholdAnnenForelder,\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.overføringsårsaktype.SYKDOM_ANNEN_FORELDER', {\n                navnAnnenForelder: navn,\n            }),\n            value: OverføringÅrsakType.sykdomAnnenForelder,\n        },\n    ];\n\n    if (erEndringssøknad) {\n        radios.push({\n            label: intlUtils(intl, 'uttaksplan.overføringsårsaktype.ALENEOMSORG'),\n            value: OverføringÅrsakType.aleneomsorg,\n        });\n        radios.push({\n            label: intlUtils(intl, 'uttaksplan.overføringsårsaktype.IKKE_RETT_ANNEN_FORELDER', {\n                navnAnnenForelder: navn,\n            }),\n            value: OverføringÅrsakType.ikkeRettAnnenForelder,\n        });\n    }\n\n    const beOmDokumentasjon =\n        valgtOverføringsårsak !== '' &&\n        valgtOverføringsårsak !== OverføringÅrsakType.aleneomsorg &&\n        valgtOverføringsårsak !== OverføringÅrsakType.ikkeRettAnnenForelder;\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <PeriodeUttakFormComponents.RadioGroup\n                    name={PeriodeUttakFormField.overføringsårsak}\n                    legend={intlUtils(intl, 'uttaksplan.overføringsårsak', {\n                        navnAnnenForelder: getNavnGenitivEierform(navnAnnenForelder, intl.locale),\n                    })}\n                    radios={radios}\n                    validate={(value) => {\n                        if (!hasValue(value)) {\n                            return intlUtils(intl, 'uttaksplan.validering.overføringsårsak');\n                        }\n\n                        return undefined;\n                    }}\n                />\n            </Block>\n            {beOmDokumentasjon && (\n                <Block padBottom=\"l\">\n                    <GuidePanel>\n                        <FormattedMessage\n                            id=\"uttaksplan.overføringsårsak.informasjonVedSykdomAnnenForelder\"\n                            values={{ navnAnnenForelder }}\n                        />\n                    </GuidePanel>\n                </Block>\n            )}\n            {beOmDokumentasjon && isOpen && (\n                <Block padBottom=\"l\">\n                    <FormikFileUploader\n                        legend=\"Dokumentasjon for overføringsårsak\"\n                        label={intlUtils(intl, 'uttaksplan.overføringsårsak.dokumentasjon')}\n                        name={PeriodeUttakFormField.overføringsdokumentasjon}\n                        attachments={vedlegg || []}\n                        attachmentType={AttachmentType.OVERFØRING_KVOTE}\n                        skjemanummer={Skjemanummer.DOK_OVERFØRING_FOR_SYK}\n                    />\n                </Block>\n            )}\n        </>\n    );\n};\n\nexport default OverføringsårsakSpørsmål;\n","import { getFloatFromString, hasValue, intlUtils } from '@navikt/fp-common';\nimport { IntlShape } from 'react-intl';\n\nexport const prosentValideringSamtidigUttak = (intl: IntlShape) => (value: string) => {\n    const samtidigUttakProsent = getFloatFromString(value);\n\n    if (!hasValue(value)) {\n        return intlUtils(intl, 'uttaksplan.validering.samtidigUttaksprosent.required');\n    }\n\n    if (samtidigUttakProsent === undefined) {\n        return intlUtils(intl, 'uttaksplan.validering.samtidigUttaksprosent.måVæreEtTall');\n    }\n\n    if (samtidigUttakProsent < 0) {\n        return intlUtils(intl, 'uttaksplan.validering.samtidigUttaksprosent.måVæreStørreEnn0');\n    }\n\n    if (samtidigUttakProsent > 100) {\n        return intlUtils(intl, 'uttaksplan.validering.samtidigUttaksprosent.måVæreMindreEnn100');\n    }\n\n    return undefined;\n};\n\nexport const prosentValideringGradering = (intl: IntlShape) => (value: string) => {\n    const stillingsprosent = getFloatFromString(value);\n\n    if (!hasValue(value) || value.trim() === '') {\n        return intlUtils(intl, 'uttaksplan.validering.stillingsprosent.required');\n    }\n\n    if (stillingsprosent === undefined) {\n        return intlUtils(intl, 'uttaksplan.validering.stillingsprosent.måVæreEtTall');\n    }\n\n    if (stillingsprosent < 0) {\n        return intlUtils(intl, 'uttaksplan.validering.stillingsprosent.måVæreStørreEnn0');\n    }\n\n    if (stillingsprosent > 100) {\n        return intlUtils(intl, 'uttaksplan.validering.stillingsprosent.måVæreMindreEnn100');\n    }\n\n    return undefined;\n};\n","import { FunctionComponent } from 'react';\nimport { Block, NavnPåForeldre, Situasjon, andreAugust2022ReglerGjelder, intlUtils, links } from '@navikt/fp-common';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\nimport { GuidePanel, Link } from '@navikt/ds-react';\nimport { prosentValideringSamtidigUttak } from '../../../../utils/prosentValidering';\n\ninterface Props {\n    erFlerbarnssøknad: boolean;\n    navnPåForeldre: NavnPåForeldre;\n    navnPåAnnenForelder: string | undefined;\n    samtidigUttakProsentVisible: boolean;\n    familiehendelsesdato: Date;\n    situasjon: Situasjon;\n}\n\nconst SamtidigUttakSpørsmål: FunctionComponent<Props> = ({\n    erFlerbarnssøknad,\n    navnPåForeldre,\n    navnPåAnnenForelder,\n    samtidigUttakProsentVisible,\n    familiehendelsesdato,\n    situasjon,\n}) => {\n    const intl = useIntl();\n    let samtidigUttakInfoTekst;\n    if (erFlerbarnssøknad) {\n        samtidigUttakInfoTekst = 'uttaksplan.samtidigUttak.flerBarnsuker.veiledertekst';\n    } else if (andreAugust2022ReglerGjelder(familiehendelsesdato) && situasjon === 'fødsel') {\n        samtidigUttakInfoTekst = 'uttaksplan.samtidigUttak.veiledertekst.etterWLB';\n    } else {\n        samtidigUttakInfoTekst = 'uttaksplan.samtidigUttak.veiledertekst.førWLB';\n    }\n\n    return (\n        <>\n            <Block padBottom={samtidigUttakProsentVisible ? 'l' : 'none'}>\n                <PeriodeUttakFormComponents.YesOrNoQuestion\n                    name={PeriodeUttakFormField.samtidigUttak}\n                    legend={intlUtils(intl, 'uttaksplan.samtidigUttak', { navnAnnenForelder: navnPåAnnenForelder })}\n                    validate={(value: YesOrNo) => {\n                        if (value === YesOrNo.UNANSWERED) {\n                            return intlUtils(intl, 'uttaksplan.validering.samtidigUttak');\n                        }\n\n                        return undefined;\n                    }}\n                />\n            </Block>\n            <Block visible={samtidigUttakProsentVisible} padBottom=\"l\">\n                <GuidePanel>\n                    <FormattedMessage\n                        id={samtidigUttakInfoTekst}\n                        values={{\n                            link: (\n                                <Link href={links.fleksibeltuttak} target=\"_blank\">\n                                    <FormattedMessage id=\"uttaksplan.samtidigUttak.veiledertekst.lenke\" />\n                                </Link>\n                            ),\n                            navnMor: navnPåForeldre.mor,\n                            navnFar: navnPåForeldre.farMedmor,\n                        }}\n                    />\n                </GuidePanel>\n            </Block>\n            <Block visible={samtidigUttakProsentVisible}>\n                <PeriodeUttakFormComponents.NumberInput\n                    name={PeriodeUttakFormField.samtidigUttakProsent}\n                    label={intlUtils(intl, 'uttaksplan.samtidigUttakProsent')}\n                    maxLength={5}\n                    validate={prosentValideringSamtidigUttak(intl)}\n                />\n            </Block>\n        </>\n    );\n};\n\nexport default SamtidigUttakSpørsmål;\n","import {\n    intlUtils,\n    Block,\n    hasValue,\n    TidsperiodeDate,\n    Arbeidsforhold,\n    Arbeidsform,\n    getKunArbeidsforholdForValgtTidsperiode,\n} from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\nimport { BodyShort, ReadMore } from '@navikt/ds-react';\nimport { FormikRadioProp } from '@navikt/sif-common-formik-ds/lib/components/formik-radio-group/FormikRadioGroup';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\nimport { prosentValideringGradering } from '../../../../utils/prosentValidering';\n\ninterface Props {\n    graderingsprosentVisible: boolean;\n    arbeidsforhold: Arbeidsforhold[];\n    tidsperiode: TidsperiodeDate;\n}\n\nexport const getArbeidsOptions = (\n    arbeidsforhold: Arbeidsforhold[],\n    tidsperiode: TidsperiodeDate,\n): FormikRadioProp[] => {\n    const aktiveArbeidsforholdIPerioden = getKunArbeidsforholdForValgtTidsperiode(arbeidsforhold, tidsperiode);\n\n    const defaultOptions: FormikRadioProp[] = [\n        {\n            label: 'Selvstendig næringsdrivende',\n            value: Arbeidsform.selvstendignæringsdrivende,\n        },\n        {\n            label: 'Frilans',\n            value: Arbeidsform.frilans,\n        },\n    ];\n    const eksisterendeArbeidsforhold: FormikRadioProp[] = [];\n\n    if (aktiveArbeidsforholdIPerioden.length > 0) {\n        aktiveArbeidsforholdIPerioden.forEach((arb) =>\n            eksisterendeArbeidsforhold.push({ label: `${arb.arbeidsgiverNavn}`, value: `${arb.arbeidsgiverId}` }),\n        );\n    }\n\n    return [...eksisterendeArbeidsforhold, ...defaultOptions];\n};\n\nconst SkalHaGraderingSpørsmål: FunctionComponent<Props> = ({\n    graderingsprosentVisible,\n    arbeidsforhold,\n    tidsperiode,\n}) => {\n    const intl = useIntl();\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <PeriodeUttakFormComponents.YesOrNoQuestion\n                    name={PeriodeUttakFormField.skalHaGradering}\n                    legend={intlUtils(intl, 'uttaksplan.skalHaGradering')}\n                    validate={(value: YesOrNo) => {\n                        if (value === YesOrNo.UNANSWERED) {\n                            return intlUtils(intl, 'uttaksplan.validering.skalHaGradering');\n                        }\n\n                        return undefined;\n                    }}\n                />\n            </Block>\n            <Block padBottom=\"l\" visible={graderingsprosentVisible}>\n                <Block padBottom=\"s\">\n                    <PeriodeUttakFormComponents.NumberInput\n                        name={PeriodeUttakFormField.stillingsprosent}\n                        label={intlUtils(intl, 'uttaksplan.stillingsprosent')}\n                        maxLength={5}\n                        validate={prosentValideringGradering(intl)}\n                    />\n                </Block>\n                <ReadMore header={intlUtils(intl, 'uttaksplan.stillingsprosent.lesMer.tittel')}>\n                    <BodyShort>\n                        <FormattedMessage id=\"uttaksplan.stillingsprosent.lesMer.innhold\" />\n                    </BodyShort>\n                </ReadMore>\n            </Block>\n            <Block visible={graderingsprosentVisible}>\n                <PeriodeUttakFormComponents.RadioGroup\n                    name={PeriodeUttakFormField.arbeidsformer}\n                    legend={intlUtils(intl, 'uttaksplan.arbeidsformer')}\n                    radios={getArbeidsOptions(arbeidsforhold, tidsperiode)}\n                    validate={(value) => {\n                        if (!hasValue(value)) {\n                            return intlUtils(intl, 'uttaksplan.validering.arbeidsformer');\n                        }\n\n                        return undefined;\n                    }}\n                />\n                <ReadMore header={intlUtils(intl, 'uttaksplan.arbeidsformer.lesMer.tittel')}>\n                    <BodyShort>\n                        <FormattedMessage id=\"uttaksplan.arbeidsformer.lesMer.innhold\" />\n                    </BodyShort>\n                </ReadMore>\n            </Block>\n        </>\n    );\n};\n\nexport default SkalHaGraderingSpørsmål;\n","import { FunctionComponent, useEffect, useRef } from 'react';\nimport { useFormikContext } from 'formik';\nimport { PeriodeUttakFormData } from '../periode-uttak-form/periodeUttakFormConfig';\nimport { PeriodeUtsettelseFormData } from '../periode-utsettelse-form/periodeUtsettelseFormConfig';\nimport { PeriodeFørFødselFormData } from '../periode-før-fødsel-form/periodeFørFødselFormConfig';\n\ninterface Props {\n    cleanup: () => PeriodeUttakFormData | PeriodeUtsettelseFormData | PeriodeFørFødselFormData;\n}\n\nexport const jsonSort = (json: any): string => {\n    function isObject(v: any) {\n        return '[object Object]' === Object.prototype.toString.call(v);\n    }\n\n    const sort = (o: any): any => {\n        if (Array.isArray(o)) {\n            return o.sort().map(sort);\n        } else if (isObject(o)) {\n            return Object.keys(o)\n                .sort((a, b) => a.localeCompare(b))\n                .reduce((a: any, k) => {\n                    a[k] = sort(o[k]);\n                    return a;\n                }, {});\n        }\n\n        return o;\n    };\n    return sort(json);\n};\n\nexport const SubmitListener: FunctionComponent<Props> = ({ cleanup }) => {\n    const formik = useFormikContext<PeriodeUttakFormData | PeriodeUtsettelseFormData | PeriodeFørFødselFormData>();\n    const { isSubmitting, isValidating, submitForm, setValues } = formik;\n    const cleanedValues = cleanup();\n    const ref = useRef(cleanedValues);\n\n    useEffect(() => {\n        if (!isSubmitting && !isValidating) {\n            const currentValuesJSONString = JSON.stringify(jsonSort(ref.current));\n            const previousValuesJSONString = JSON.stringify(jsonSort(cleanedValues));\n            const valuesEqualLastValues = previousValuesJSONString === currentValuesJSONString;\n\n            if (!valuesEqualLastValues) {\n                ref.current = cleanedValues;\n            }\n\n            if (!valuesEqualLastValues) {\n                setValues(cleanedValues);\n                setTimeout(() => submitForm(), 0);\n            }\n        }\n    }, [isSubmitting, isValidating, submitForm, setValues, cleanedValues, cleanup]);\n\n    return null;\n};\n","import {\n    Situasjon,\n    TidsperiodeDate,\n    Uttaksdagen,\n    andreAugust2022ReglerGjelder,\n    getFørsteUttaksdag2UkerFørFødsel,\n    getTidsperiode,\n    isValidTidsperiode,\n    uttaksConstants,\n} from '@navikt/fp-common';\nimport dayjs from 'dayjs';\n\nexport interface Uttaksdatoer {\n    førsteUttaksdag: Date;\n    førFødsel: {\n        førsteMuligeUttaksdag: Date;\n        førsteUttaksdagForeldrepengerFørFødsel: Date;\n        sisteUttaksdagFørFødsel: Date;\n    };\n    etterFødsel: {\n        sisteUttaksdagInnenforSeksUker: Date;\n        førsteUttaksdagEtterSeksUker: Date;\n        sisteMuligeUttaksdag: Date;\n    };\n}\n\nexport const uttaksdatoer = (familiehendelsesdato: Date, erFarEllerMedmor: boolean, termindato: Date | undefined) => ({\n    førsteUttaksdagForeldrepengerFørFødsel: getFørsteUttaksdagForeldrepengerFørFødsel(familiehendelsesdato),\n    førsteUttaksdagPåEllerEtterFødsel: Uttaksdagen(familiehendelsesdato).denneEllerNeste(),\n    førsteMuligeUttaksdagFørTermin: getFørsteMuligeUttaksdag(familiehendelsesdato, erFarEllerMedmor, termindato),\n    sisteMuligeUttaksdagEtterTermin: getSisteMuligeUttaksdag(familiehendelsesdato),\n});\n\nexport const getUttaksdatoer = (\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n): Uttaksdatoer => {\n    const førsteUttaksdag = Uttaksdagen(familiehendelsesdato).denneEllerNeste();\n\n    const førsteUttaksdagForeldrepengerFørFødsel = getFørsteUttaksdagForeldrepengerFørFødsel(familiehendelsesdato);\n    const førsteMuligeUttaksdag = getFørsteMuligeUttaksdag(familiehendelsesdato, erFarEllerMedmor, termindato);\n    const sisteUttaksdagFørFødsel = Uttaksdagen(førsteUttaksdag).forrige();\n    const sisteMuligeUttaksdag = getSisteMuligeUttaksdag(familiehendelsesdato);\n\n    const sisteUttaksdagInnenforSeksUker = getTidsperiode(førsteUttaksdag, 30).tom;\n    return {\n        førsteUttaksdag,\n        førFødsel: {\n            førsteMuligeUttaksdag,\n            sisteUttaksdagFørFødsel,\n            førsteUttaksdagForeldrepengerFørFødsel,\n        },\n        etterFødsel: {\n            sisteUttaksdagInnenforSeksUker,\n            førsteUttaksdagEtterSeksUker: Uttaksdagen(sisteUttaksdagInnenforSeksUker).neste(),\n            sisteMuligeUttaksdag,\n        },\n    };\n};\n\nexport function getFørsteUttaksdagPåEllerEtterFødsel(familiehendelsesdato: Date) {\n    return Uttaksdagen(familiehendelsesdato).denneEllerNeste();\n}\n\nexport function getFørsteUttaksdagForeldrepengerFørFødsel(familiehendelsesdato: Date): Date {\n    return Uttaksdagen(getFørsteUttaksdagPåEllerEtterFødsel(familiehendelsesdato)).trekkFra(\n        uttaksConstants.ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5,\n    );\n}\n\nexport function getFørsteMuligeUttaksdag(\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n): Date {\n    if (erFarEllerMedmor) {\n        if (andreAugust2022ReglerGjelder(familiehendelsesdato)) {\n            return getFørsteUttaksdag2UkerFørFødsel(familiehendelsesdato, termindato);\n        } else {\n            return Uttaksdagen(familiehendelsesdato).denneEllerNeste();\n        }\n    }\n\n    const termindatoMinus12Uker =\n        termindato !== undefined\n            ? dayjs(termindato).subtract(uttaksConstants.MAKS_ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5 - 1, 'weeks')\n            : undefined;\n    const erFødselsdatoFørTermindatoMinus12Uker =\n        termindato !== undefined ? dayjs(familiehendelsesdato).isBefore(termindatoMinus12Uker) : false;\n\n    if (erFødselsdatoFørTermindatoMinus12Uker) {\n        return Uttaksdagen(familiehendelsesdato).denneEllerForrige();\n    }\n\n    const datoÅRegneFra = termindato !== undefined ? termindato : familiehendelsesdato;\n\n    return Uttaksdagen(getFørsteUttaksdagPåEllerEtterFødsel(datoÅRegneFra)).trekkFra(\n        uttaksConstants.MAKS_ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5,\n    );\n}\n\nexport function getSisteMuligeUttaksdag(familiehendelsesdato: Date): Date {\n    return Uttaksdagen(\n        dayjs(getFørsteUttaksdagPåEllerEtterFødsel(familiehendelsesdato))\n            .add(uttaksConstants.MAKS_PERMISJONSLENGDE_I_ÅR, 'year')\n            .subtract(1, 'day')\n            .toDate(),\n    ).denneEllerNeste();\n}\n\nexport const erInnenFørsteSeksUkerFødselFarMedmor = (\n    tidsperiode: TidsperiodeDate,\n    situasjon: Situasjon,\n    søkerErFarEllerMedmor: boolean,\n    førsteUttaksdagEtterSeksUker: Date,\n): boolean => {\n    if (\n        situasjon !== 'fødsel' ||\n        !søkerErFarEllerMedmor ||\n        tidsperiode === undefined ||\n        isValidTidsperiode(tidsperiode) === false\n    ) {\n        return false;\n    }\n    return dayjs(tidsperiode.fom).isBefore(dayjs(førsteUttaksdagEtterSeksUker), 'day');\n};\n","import {\n    ISOStringToDate,\n    StønadskontoType,\n    Tidsperiode,\n    TidsperiodeDate,\n    Tidsperioden,\n    Uttaksdagen,\n    getFørsteUttaksdag2UkerFørFødsel,\n    getSisteUttaksdag6UkerEtterFødsel,\n    isValidTidsperiode,\n    uttaksplanDatoavgrensninger,\n} from '@navikt/fp-common';\nimport { getFørsteMuligeUttaksdag, getSisteMuligeUttaksdag } from './uttaksdatoerUtils';\nimport { DatepickerLimitations } from '@navikt/ds-datepicker';\nimport { dateToISOString } from '@navikt/sif-common-formik-ds/lib';\n\nexport interface DatoAvgrensninger {\n    fra: Avgrensninger;\n    til: Avgrensninger;\n}\n\nexport interface Avgrensninger {\n    minDato: Date;\n    maksDato: Date;\n    ugyldigeTidsperioder?: Tidsperiode[];\n    helgedagerIkkeTillatt: boolean;\n}\n\nexport const getDatoavgrensningerForFarMedmorPeriodeRundtFødselWLB = (\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    ugyldigeTidsperioder: Tidsperiode[] | undefined,\n): DatoAvgrensninger => {\n    const minDato = getFørsteUttaksdag2UkerFørFødsel(familiehendelsesdato, termindato);\n    const maksDato = getSisteUttaksdag6UkerEtterFødsel(familiehendelsesdato);\n    return {\n        fra: {\n            minDato,\n            maksDato,\n            helgedagerIkkeTillatt: true,\n            ugyldigeTidsperioder,\n        },\n        til: {\n            minDato,\n            maksDato,\n            helgedagerIkkeTillatt: true,\n            ugyldigeTidsperioder,\n        },\n    };\n};\n\nexport const getDatoavgrensningerForStønadskonto = (\n    konto: StønadskontoType | undefined,\n    familiehendelsesdato: Date,\n    tidsperiode: Partial<TidsperiodeDate> | undefined,\n    ugyldigeTidsperioder: Tidsperiode[] | undefined,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n): DatoAvgrensninger => {\n    if (konto === undefined) {\n        return getDatoavgrensningerForPeriodeUtenKonto(\n            familiehendelsesdato,\n            ugyldigeTidsperioder,\n            erFarEllerMedmor,\n            termindato,\n        );\n    }\n    if (konto === StønadskontoType.ForeldrepengerFørFødsel) {\n        return getDatoavgrensningerForForeldrepengerFørFødsel(familiehendelsesdato);\n    }\n    if (isValidTidsperiode(tidsperiode) && Tidsperioden(tidsperiode).erFørDato(familiehendelsesdato)) {\n        return getDatoavgrensningerForEkstrauttakFørTermin(familiehendelsesdato, termindato);\n    }\n\n    const standardAvgrensninger = standardAvgrensningerForUttakEtterFødsel(familiehendelsesdato);\n\n    return {\n        fra: {\n            ...standardAvgrensninger,\n            ugyldigeTidsperioder,\n        },\n        til: {\n            ...standardAvgrensninger,\n            ugyldigeTidsperioder,\n        },\n    };\n};\n\nconst getDatoavgrensningerForPeriodeUtenKonto = (\n    familiehendelsesdato: Date,\n    ugyldigeTidsperioder: Tidsperiode[] | undefined,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n) => {\n    const minDato = getFørsteMuligeUttaksdag(familiehendelsesdato, erFarEllerMedmor, termindato);\n\n    return {\n        fra: {\n            minDato,\n            maksDato: getSisteMuligeUttaksdag(familiehendelsesdato),\n            ugyldigeTidsperioder,\n            helgedagerIkkeTillatt: true,\n        },\n        til: {\n            minDato,\n            maksDato: getSisteMuligeUttaksdag(familiehendelsesdato),\n            ugyldigeTidsperioder,\n            helgedagerIkkeTillatt: true,\n        },\n    };\n};\n\nconst standardAvgrensningerForUttakEtterFødsel = (familiehendelsesdato: Date): Avgrensninger => {\n    return {\n        helgedagerIkkeTillatt: true,\n        minDato: Uttaksdagen(familiehendelsesdato).denneEllerNeste(),\n        maksDato: getSisteMuligeUttaksdag(familiehendelsesdato),\n    };\n};\n\nconst getDatoavgrensningerForForeldrepengerFørFødsel = (familiehendelsesdato: Date): DatoAvgrensninger => {\n    const avgrensninger: DatepickerLimitations = {\n        ...standardAvgrensningerForUttakEtterFødsel,\n        ...uttaksplanDatoavgrensninger.startdatoFørTerminForeldrepengerFørFødselKonto(\n            dateToISOString(familiehendelsesdato),\n        ),\n    };\n\n    return {\n        fra: {\n            helgedagerIkkeTillatt: !!avgrensninger.weekendsNotSelectable,\n            minDato: ISOStringToDate(avgrensninger.minDate)!,\n            maksDato: ISOStringToDate(avgrensninger.maxDate)!,\n        },\n        til: {\n            helgedagerIkkeTillatt: !!avgrensninger.weekendsNotSelectable,\n            minDato: ISOStringToDate(avgrensninger.minDate)!,\n            maksDato: ISOStringToDate(avgrensninger.maxDate)!,\n        },\n    };\n};\n\nconst getDatoavgrensningerForEkstrauttakFørTermin = (\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n): DatoAvgrensninger => {\n    const datoÅRegneFra = termindato !== undefined ? termindato : familiehendelsesdato;\n    const avgrensninger: DatepickerLimitations = {\n        ...standardAvgrensningerForUttakEtterFødsel,\n        ...uttaksplanDatoavgrensninger.ekstrauttakFørFødsel(dateToISOString(datoÅRegneFra)),\n    };\n\n    return {\n        fra: {\n            helgedagerIkkeTillatt: !!avgrensninger.weekendsNotSelectable,\n            minDato: ISOStringToDate(avgrensninger.minDate)!,\n            maksDato: ISOStringToDate(avgrensninger.maxDate)!,\n        },\n        til: {\n            helgedagerIkkeTillatt: !!avgrensninger.weekendsNotSelectable,\n            minDato: ISOStringToDate(avgrensninger.minDate)!,\n            maksDato: ISOStringToDate(avgrensninger.maxDate)!,\n        },\n    };\n};\n\nexport const getDatoavgrensningerForBareFarMedmorHarRettWLB = (\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    ugyldigeTidsperioder: Tidsperiode[] | undefined,\n): DatoAvgrensninger => {\n    const minDato = getFørsteUttaksdag2UkerFørFødsel(familiehendelsesdato, termindato);\n    const maksDato = getSisteMuligeUttaksdag(familiehendelsesdato);\n    return {\n        fra: {\n            minDato,\n            maksDato,\n            helgedagerIkkeTillatt: true,\n            ugyldigeTidsperioder,\n        },\n        til: {\n            minDato,\n            maksDato,\n            helgedagerIkkeTillatt: true,\n            ugyldigeTidsperioder,\n        },\n    };\n};\n","import {\n    intlUtils,\n    Tidsperiode,\n    Block,\n    TidsperiodeDate,\n    Situasjon,\n    Periode,\n    Utsettelsesperiode,\n    isUtsettelsesperiode,\n    isUttaksperiodeFarMedmorPgaFødsel,\n    andreAugust2022ReglerGjelder,\n    isUttaksperiodeBareFarMedmorHarRett,\n    isUttaksperiode,\n    mapTidsperiodeStringToTidsperiode,\n    ISOStringToDate,\n    dateRangeValidation,\n    getFørsteUttaksdagPåEllerEtterFødsel,\n} from '@navikt/fp-common';\nimport dayjs from 'dayjs';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { dateToISOString, getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\nimport { Button } from '@navikt/ds-react';\nimport { getFørsteMuligeUttaksdag } from '../../../utils/uttaksdatoerUtils';\nimport {\n    DatoAvgrensninger,\n    getDatoavgrensningerForBareFarMedmorHarRettWLB,\n    getDatoavgrensningerForFarMedmorPeriodeRundtFødselWLB,\n    getDatoavgrensningerForStønadskonto,\n} from '../../../utils/datoAvgrensningerUtils';\n\ninterface Props {\n    periode?: Periode;\n    tidsperiode: TidsperiodeDate;\n    familiehendelsesdato: Date;\n    ugyldigeTidsperioder: Tidsperiode[] | undefined;\n    utsettelserIPlan: Utsettelsesperiode[];\n    erFarEllerMedmor: boolean;\n    morHarRett: boolean;\n    onBekreft: (tidsperiode: Partial<Tidsperiode>) => void;\n    onCancel?: () => void;\n    initialMonth?: Date;\n    termindato?: Date;\n    situasjon: Situasjon;\n    erFarMedmorOgHarAleneomsorg: boolean;\n}\n\nenum TidsperiodeFormFields {\n    fom = 'fom',\n    tom = 'tom',\n}\n\nexport type TidsperiodeFormValues = Partial<Tidsperiode>;\n\nconst Form = getTypedFormComponents<TidsperiodeFormFields, TidsperiodeFormValues>();\n\nconst getDatoAvgrensninger = (\n    periode: Periode | undefined,\n    familiehendelsesdato: Date,\n    fom: string | undefined,\n    tom: string | undefined,\n    tidsperiode: Partial<TidsperiodeDate>,\n    ugyldigeTidsperioder: Tidsperiode[] | undefined,\n    termindato: Date | undefined,\n    erFarEllerMedmor: boolean,\n    morHarRett: boolean,\n    situasjon: Situasjon,\n    erFarMedmorOgHarAleneomsorg: boolean,\n): DatoAvgrensninger => {\n    if (periode && !isUtsettelsesperiode(periode)) {\n        if (\n            isUttaksperiodeFarMedmorPgaFødsel(periode, familiehendelsesdato, termindato) &&\n            andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n            situasjon === 'fødsel'\n        ) {\n            return getDatoavgrensningerForFarMedmorPeriodeRundtFødselWLB(\n                familiehendelsesdato,\n                termindato,\n                ugyldigeTidsperioder,\n            );\n        }\n        if (\n            isUttaksperiodeBareFarMedmorHarRett(periode, morHarRett) &&\n            andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n            situasjon === 'fødsel'\n        ) {\n            return getDatoavgrensningerForBareFarMedmorHarRettWLB(\n                familiehendelsesdato,\n                termindato,\n                ugyldigeTidsperioder,\n            );\n        }\n        return getDatoavgrensningerForStønadskonto(\n            isUttaksperiode(periode) ? periode.konto : undefined,\n            familiehendelsesdato,\n            mapTidsperiodeStringToTidsperiode({ fom, tom }),\n            ugyldigeTidsperioder,\n            erFarEllerMedmor,\n            termindato,\n        );\n    }\n\n    const førsteMuligeUttaksdag = erFarMedmorOgHarAleneomsorg\n        ? getFørsteUttaksdagPåEllerEtterFødsel(familiehendelsesdato)\n        : getFørsteMuligeUttaksdag(familiehendelsesdato, erFarEllerMedmor, termindato);\n\n    return {\n        fra: {\n            minDato: førsteMuligeUttaksdag,\n            maksDato: tidsperiode\n                ? ISOStringToDate(tom)!\n                : dayjs(familiehendelsesdato).add(3, 'years').subtract(1, 'day').toDate(),\n            ugyldigeTidsperioder,\n            helgedagerIkkeTillatt: true,\n        },\n        til: {\n            minDato: tidsperiode ? ISOStringToDate(fom)! : førsteMuligeUttaksdag,\n            maksDato: dayjs(familiehendelsesdato).add(3, 'years').subtract(1, 'day').toDate(),\n            ugyldigeTidsperioder,\n            helgedagerIkkeTillatt: true,\n        },\n    };\n};\n\nconst TidsperiodeForm: React.FunctionComponent<Props> = ({\n    periode,\n    tidsperiode,\n    familiehendelsesdato,\n    ugyldigeTidsperioder,\n    utsettelserIPlan,\n    initialMonth,\n    termindato,\n    erFarEllerMedmor,\n    morHarRett,\n    situasjon,\n    onBekreft,\n    onCancel,\n    erFarMedmorOgHarAleneomsorg,\n}) => {\n    const intl = useIntl();\n\n    return (\n        <Form.FormikWrapper\n            initialValues={{ fom: dateToISOString(tidsperiode.fom), tom: dateToISOString(tidsperiode.tom) }}\n            onSubmit={onBekreft}\n            enableReinitialize={true}\n            renderForm={({ values }) => {\n                const datoAvgrensninger = getDatoAvgrensninger(\n                    periode,\n                    familiehendelsesdato,\n                    values.fom,\n                    values.tom,\n                    tidsperiode,\n                    ugyldigeTidsperioder,\n                    termindato,\n                    erFarEllerMedmor,\n                    morHarRett,\n                    situasjon,\n                    erFarMedmorOgHarAleneomsorg,\n                );\n\n                return (\n                    <Form.Form onCancel={onCancel} includeButtons={false}>\n                        <Block>\n                            <Form.DateIntervalPicker\n                                legend={intlUtils(intl, 'utenlandsopphold.leggTilUtenlandsopphold.tidsrom')}\n                                fromDatepickerProps={{\n                                    name: TidsperiodeFormFields.fom,\n                                    disableWeekend: true,\n                                    label: intlUtils(intl, 'utenlandsopphold.leggTilUtenlandsopphold.fraogmed'),\n                                    fullscreenOverlay: true,\n                                    placeholder: 'dd.mm.åååå',\n                                    minDate: datoAvgrensninger.fra.minDato,\n                                    maxDate: datoAvgrensninger.fra.maksDato,\n                                    validate: (value) =>\n                                        dateRangeValidation.validateFromDateInRange({\n                                            intl,\n                                            date: ISOStringToDate(value),\n                                            minDate: datoAvgrensninger.fra.minDato,\n                                            maxDate: datoAvgrensninger.fra.maksDato,\n                                            errorKey: 'valideringsfeil.fraOgMedDato.førTilDato',\n                                            toDate: ISOStringToDate(values.tom),\n                                            disableWeekend: datoAvgrensninger.fra.helgedagerIkkeTillatt,\n                                            utsettelserIPlan: utsettelserIPlan,\n                                            periodeId: periode !== undefined ? periode.id : undefined,\n                                        }),\n                                    dayPickerProps: {\n                                        defaultMonth: initialMonth || familiehendelsesdato,\n                                    },\n                                }}\n                                toDatepickerProps={{\n                                    name: TidsperiodeFormFields.tom,\n                                    disableWeekend: true,\n                                    label: intlUtils(intl, 'utenlandsopphold.leggTilUtenlandsopphold.tilogmed'),\n                                    fullscreenOverlay: true,\n                                    placeholder: 'dd.mm.åååå',\n                                    minDate: ISOStringToDate(values.fom) || familiehendelsesdato,\n                                    maxDate: datoAvgrensninger.til.maksDato,\n                                    validate: (value) =>\n                                        dateRangeValidation.validateToDateInRange({\n                                            intl,\n                                            date: ISOStringToDate(value),\n                                            minDate: datoAvgrensninger.til.minDato,\n                                            maxDate: datoAvgrensninger.til.maksDato,\n                                            errorKey: 'valideringsfeil.tilOgMedDato.etterFraDato',\n                                            fromDate: ISOStringToDate(values.fom),\n                                            disableWeekend: datoAvgrensninger.til.helgedagerIkkeTillatt,\n                                            utsettelserIPlan: utsettelserIPlan,\n                                            periodeId: periode !== undefined ? periode.id : undefined,\n                                        }),\n                                    dayPickerProps: {\n                                        defaultMonth: ISOStringToDate(values.fom),\n                                    },\n                                }}\n                            />\n                        </Block>\n                        <Button type=\"submit\">\n                            <FormattedMessage id=\"uttaksplan.gåVidere\" />\n                        </Button>\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default TidsperiodeForm;\n","import {\n    Periodetype,\n    StønadskontoUttak,\n    TidsperiodeDate,\n    andreAugust2022ReglerGjelder,\n    isValidTidsperiode,\n} from '@navikt/fp-common';\nimport dayjs from 'dayjs';\n\nconst kontoSkalBesvares = (\n    periodetype: Periodetype,\n    tidsperiode: TidsperiodeDate,\n    stønadskontoer: StønadskontoUttak[],\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n): boolean => {\n    if (\n        !isValidTidsperiode(tidsperiode) ||\n        stønadskontoer.length === 0 ||\n        (andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n            periodetype === Periodetype.Uttak &&\n            erFarEllerMedmor &&\n            dayjs(tidsperiode.fom).isBefore(familiehendelsesdato, 'day'))\n    ) {\n        return false;\n    }\n\n    return true;\n};\n\nexport default kontoSkalBesvares;\n","import {\n    Periodetype,\n    Situasjon,\n    StønadskontoType,\n    TidsperiodeDate,\n    andreAugust2022ReglerGjelder,\n    erFarMedmorSinWLBTidsperiodeRundtFødsel,\n} from '@navikt/fp-common';\nimport dayjs from 'dayjs';\n\nexport const uttakRundtFødselÅrsakSpørsmålSkalBesvares = (\n    periodetype: Periodetype,\n    konto: StønadskontoType,\n    tidsperiode: TidsperiodeDate,\n    søkerErFarEllerMedmor: boolean,\n    erAleneOmOmsorg: boolean,\n    annenForelderKanIkkeOppgis: boolean,\n    søkerHarMidlertidigOmsorg: boolean,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    situasjon: Situasjon,\n    bareFarMedmorHarRett: boolean,\n): boolean => {\n    if (\n        erAleneOmOmsorg ||\n        annenForelderKanIkkeOppgis ||\n        søkerHarMidlertidigOmsorg ||\n        !søkerErFarEllerMedmor ||\n        bareFarMedmorHarRett ||\n        !andreAugust2022ReglerGjelder(familiehendelsesdato) ||\n        situasjon !== 'fødsel' ||\n        dayjs(tidsperiode.fom).isBefore(familiehendelsesdato, 'day')\n    ) {\n        return false;\n    }\n\n    if (periodetype === Periodetype.Uttak) {\n        if (\n            erFarMedmorSinWLBTidsperiodeRundtFødsel(\n                tidsperiode,\n                familiehendelsesdato,\n                periodetype,\n                konto,\n                søkerErFarEllerMedmor,\n                termindato,\n                situasjon,\n            )\n        ) {\n            return true;\n        }\n        return false;\n    }\n    return false;\n};\n\nexport default uttakRundtFødselÅrsakSpørsmålSkalBesvares;\n","import {\n    Periodetype,\n    Situasjon,\n    StønadskontoType,\n    StønadskontoUttak,\n    TidsperiodeDate,\n    getSisteUttaksdag6UkerEtterFødsel,\n} from '@navikt/fp-common';\nimport dayjs from 'dayjs';\nimport kontoSkalBesvares from './kontoSkalBesvarer';\nimport uttakRundtFødselÅrsakSpørsmålSkalBesvares from './uttakRundtFødselÅrsakSpørsmålSkalBesvares';\n\nexport const farMedmorBrukerForeldrepengerMedAktivitetskravRundtFødselOgMorIkkeErSyk = (\n    famDato: Date,\n    erFarEllerMedmor: boolean,\n    konto: StønadskontoType | undefined,\n    erMorForSyk: boolean | undefined,\n    tidsperiode: TidsperiodeDate,\n    situasjon: Situasjon,\n) => {\n    const sisteUttaksdag6UkerEtterFødsel = getSisteUttaksdag6UkerEtterFødsel(famDato);\n    return (\n        erFarEllerMedmor &&\n        konto === StønadskontoType.Foreldrepenger &&\n        erMorForSyk === false &&\n        situasjon === 'fødsel' &&\n        dayjs(tidsperiode.fom).isSameOrBefore(sisteUttaksdag6UkerEtterFødsel, 'day')\n    );\n};\n\nexport const aktivitetskravMorSkalBesvares = (\n    ønskerFlerbarnsdager: boolean | undefined,\n    samtidigUttak: boolean | undefined,\n    erMorForSyk: boolean | undefined,\n    periodetype: Periodetype,\n    kontotype: StønadskontoType | undefined,\n    søkerErMor: boolean,\n    erAleneOmOmsorg: boolean,\n    annenForelderKanIkkeOppgis: boolean,\n    søkerHarMidlertidigOmsorg: boolean,\n    tidsperiode: TidsperiodeDate,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    situasjon: Situasjon,\n    stønadskontoer: StønadskontoUttak[],\n    bareFarMedmorHarRett: boolean,\n): boolean => {\n    if (\n        søkerErMor ||\n        erAleneOmOmsorg ||\n        periodetype !== Periodetype.Uttak ||\n        annenForelderKanIkkeOppgis ||\n        søkerHarMidlertidigOmsorg ||\n        uttakRundtFødselÅrsakSpørsmålSkalBesvares(\n            periodetype,\n            kontotype as StønadskontoType,\n            tidsperiode,\n            !søkerErMor,\n            erAleneOmOmsorg,\n            annenForelderKanIkkeOppgis,\n            søkerHarMidlertidigOmsorg,\n            familiehendelsesdato,\n            termindato,\n            situasjon,\n            bareFarMedmorHarRett,\n        ) ||\n        !kontoSkalBesvares(periodetype, tidsperiode, stønadskontoer, familiehendelsesdato, !søkerErMor) ||\n        farMedmorBrukerForeldrepengerMedAktivitetskravRundtFødselOgMorIkkeErSyk(\n            familiehendelsesdato,\n            !søkerErMor,\n            kontotype,\n            erMorForSyk,\n            tidsperiode,\n            situasjon,\n        )\n    ) {\n        return false;\n    }\n\n    if (\n        !erAleneOmOmsorg &&\n        (kontotype === StønadskontoType.Fellesperiode || kontotype === StønadskontoType.Foreldrepenger)\n    ) {\n        if (ønskerFlerbarnsdager || samtidigUttak || (erMorForSyk && kontotype === StønadskontoType.Fellesperiode)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    return false;\n};\n","import { Periodetype, Situasjon, StønadskontoType, TidsperiodeDate } from '@navikt/fp-common';\nimport dayjs from 'dayjs';\nimport { erInnenFørsteSeksUkerFødselFarMedmor, Uttaksdatoer } from '../uttaksdatoerUtils';\nimport uttakRundtFødselÅrsakSpørsmålSkalBesvares from './uttakRundtFødselÅrsakSpørsmålSkalBesvares';\n\nconst erMorForForSykSkalBesvares = (\n    periodetype: Periodetype,\n    konto: StønadskontoType,\n    tidsperiode: TidsperiodeDate,\n    situasjon: Situasjon,\n    søkerErFarEllerMedmor: boolean,\n    uttaksdatoer: Uttaksdatoer,\n    erFlerbarnssøknad: boolean,\n    erAleneOmOmsorg: boolean,\n    annenForelderKanIkkeOppgis: boolean,\n    ønskerFlerbarnsdager: boolean | undefined,\n    søkerHarMidlertidigOmsorg: boolean,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    bareFarMedmorHarRett: boolean,\n): boolean => {\n    const årsakTilUttakRundtFødselSkalBesvares = uttakRundtFødselÅrsakSpørsmålSkalBesvares(\n        periodetype,\n        konto as StønadskontoType,\n        tidsperiode,\n        søkerErFarEllerMedmor,\n        erAleneOmOmsorg,\n        annenForelderKanIkkeOppgis,\n        søkerHarMidlertidigOmsorg,\n        familiehendelsesdato,\n        termindato,\n        situasjon,\n        bareFarMedmorHarRett,\n    );\n\n    if (\n        erAleneOmOmsorg ||\n        annenForelderKanIkkeOppgis ||\n        søkerHarMidlertidigOmsorg ||\n        årsakTilUttakRundtFødselSkalBesvares ||\n        dayjs(tidsperiode.fom).isBefore(familiehendelsesdato, 'day') ||\n        konto === StønadskontoType.AktivitetsfriKvote\n    ) {\n        return false;\n    }\n\n    if (periodetype === Periodetype.Uttak && søkerErFarEllerMedmor) {\n        if (\n            (konto === StønadskontoType.Fedrekvote || konto === StønadskontoType.Foreldrepenger) &&\n            erInnenFørsteSeksUkerFødselFarMedmor(\n                tidsperiode,\n                situasjon,\n                søkerErFarEllerMedmor,\n                uttaksdatoer.etterFødsel.førsteUttaksdagEtterSeksUker,\n            )\n        ) {\n            if (erFlerbarnssøknad) {\n                return ønskerFlerbarnsdager !== undefined && ønskerFlerbarnsdager === false;\n            }\n\n            return true;\n        }\n        return false;\n    }\n\n    return false;\n};\n\nexport default erMorForForSykSkalBesvares;\n","import {\n    Periodetype,\n    StønadskontoType,\n    TidsperiodeDate,\n    andreAugust2022ReglerGjelder,\n    getSisteUttaksdag6UkerEtterFødsel,\n} from '@navikt/fp-common';\nimport dayjs from 'dayjs';\n\nexport const graderingSkalBesvares = (\n    periodetype: Periodetype,\n    konto: StønadskontoType,\n    familiehendelsesdato: Date,\n    erFarMedmor: boolean,\n    morErForSyk: boolean | undefined,\n    tidsperiode: TidsperiodeDate,\n): boolean => {\n    const farMedmorSøkerDeFørsteSeksUkeneFørWLBOgMorErIkkeSyk =\n        !andreAugust2022ReglerGjelder(familiehendelsesdato) && erFarMedmor && morErForSyk === false;\n    const sisteUttaksdagInnenSeksUkerEtterFødsel = getSisteUttaksdag6UkerEtterFødsel(familiehendelsesdato);\n    const bareFarHarRettSøkerAktivitetsKravKontoDeFørsteSeksUkeneOgMorErIkkeSyk =\n        erFarMedmor &&\n        konto === StønadskontoType.Foreldrepenger &&\n        morErForSyk === false &&\n        dayjs(tidsperiode.fom).isSameOrBefore(sisteUttaksdagInnenSeksUkerEtterFødsel, 'day');\n    if (\n        periodetype === Periodetype.Uttak &&\n        konto !== StønadskontoType.ForeldrepengerFørFødsel &&\n        !farMedmorSøkerDeFørsteSeksUkeneFørWLBOgMorErIkkeSyk &&\n        !bareFarHarRettSøkerAktivitetsKravKontoDeFørsteSeksUkeneOgMorErIkkeSyk\n    ) {\n        return true;\n    }\n    return false;\n};\n","import {\n    Periodetype,\n    Situasjon,\n    StønadskontoType,\n    TidsperiodeDate,\n    erFarMedmorSinWLBTidsperiodeRundtFødsel,\n} from '@navikt/fp-common';\n\nexport const graderingSkalBesvaresPgaWLBUttakRundtFødsel = (\n    tidperiode: TidsperiodeDate,\n    periodetype: Periodetype,\n    konto: StønadskontoType,\n    erFarEllerMedmor: boolean,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    situasjon: Situasjon,\n): boolean => {\n    return erFarMedmorSinWLBTidsperiodeRundtFødsel(\n        tidperiode,\n        familiehendelsesdato,\n        periodetype,\n        konto,\n        erFarEllerMedmor,\n        termindato,\n        situasjon,\n    );\n};\n","import { Periodetype, Situasjon, StønadskontoType, TidsperiodeDate } from '@navikt/fp-common';\nimport dayjs from 'dayjs';\nimport { uttakRundtFødselÅrsakSpørsmålSkalBesvares } from './uttakRundtFødselÅrsakSpørsmålSkalBesvares';\n\nconst samtidigUttakSkalBesvares = (\n    periodetype: Periodetype,\n    konto: StønadskontoType,\n    erUttakInnenFørsteSeksUkerFødselFarMedmor: boolean,\n    erUttakFørFødsel: boolean,\n    erAleneOmsorg: boolean,\n    erDeltUttakINorge: boolean,\n    søkerHarMidlertidigOmsorg: boolean,\n    erMorForSyk: boolean | undefined,\n    ønskerFlerbarnsdager: boolean | undefined,\n    tidsperiode: TidsperiodeDate,\n    søkerErFarEllerMedmor: boolean,\n    annenforelderKanIkkeOppgis: boolean,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    situasjon: Situasjon,\n    bareFarMedmorHarRett: boolean,\n): boolean => {\n    if (erAleneOmsorg || !erDeltUttakINorge || søkerHarMidlertidigOmsorg) {\n        return false;\n    }\n    if (søkerErFarEllerMedmor && dayjs(tidsperiode.fom).isBefore(familiehendelsesdato, 'd')) {\n        return false;\n    }\n    if (\n        uttakRundtFødselÅrsakSpørsmålSkalBesvares(\n            periodetype,\n            konto,\n            tidsperiode,\n            søkerErFarEllerMedmor,\n            erAleneOmsorg,\n            annenforelderKanIkkeOppgis,\n            søkerHarMidlertidigOmsorg,\n            familiehendelsesdato,\n            termindato,\n            situasjon,\n            bareFarMedmorHarRett,\n        )\n    ) {\n        return false;\n    }\n\n    if (periodetype === Periodetype.Uttak) {\n        if (erMorForSyk) {\n            return false;\n        }\n\n        const erUttakEgenKvoteFarMedmorFørsteSeksUkerUtenFlerbarnsdager: boolean =\n            erUttakInnenFørsteSeksUkerFødselFarMedmor &&\n            (konto === StønadskontoType.Fedrekvote || konto === StønadskontoType.Foreldrepenger) &&\n            ønskerFlerbarnsdager !== true;\n\n        return !(erUttakFørFødsel || erUttakEgenKvoteFarMedmorFørsteSeksUkerUtenFlerbarnsdager);\n    }\n\n    return false;\n};\n\nexport default samtidigUttakSkalBesvares;\n","import {\n    Periodetype,\n    StønadskontoType,\n    TidsperiodeDate,\n    UttakRundtFødselÅrsak,\n    andreAugust2022ReglerGjelder,\n} from '@navikt/fp-common';\nimport dayjs from 'dayjs';\n\nexport const ønskerFlerbarnsdagerSkalBesvares = (\n    periodetype: Periodetype,\n    erFlerbarnssøknad: boolean,\n    søkerErFarEllerMedmor: boolean,\n    familiehendelsesdato: Date,\n    tidsperiode: TidsperiodeDate,\n    stønadskontoType: StønadskontoType,\n    bareFarHarRett: boolean,\n    antallBarn: number,\n    erAleneOmOmsorg: boolean,\n    erDeltUttakINorge: boolean,\n    uttakRundtFødselÅrsak: UttakRundtFødselÅrsak | undefined,\n): boolean => {\n    if (dayjs(tidsperiode.fom).isBefore(familiehendelsesdato, 'day')) {\n        return false;\n    }\n\n    if (\n        stønadskontoType === StønadskontoType.AktivitetsfriKvote ||\n        uttakRundtFødselÅrsak === UttakRundtFødselÅrsak.morErForSyk\n    ) {\n        return false;\n    }\n    if (søkerErFarEllerMedmor && (bareFarHarRett || erAleneOmOmsorg) && antallBarn > 1) {\n        if (andreAugust2022ReglerGjelder(familiehendelsesdato)) {\n            return false;\n        }\n        return true;\n    }\n    if (!erDeltUttakINorge && stønadskontoType !== StønadskontoType.Fellesperiode) {\n        return false;\n    }\n    return periodetype === Periodetype.Uttak && erFlerbarnssøknad && søkerErFarEllerMedmor;\n};\n","import { Situasjon, TidsperiodeDate } from '@navikt/fp-common';\nimport { erSamtidigUttakFarMedmorFørFørsteSeksUkerWLB } from '../../components/uttaks-forms/periode-uttak-form/periodeUttakFormQuestionsConfig';\n\nconst hvemSkalTaUttakSkalBesvares = (\n    tidsperiode: TidsperiodeDate,\n    erDeltUttakINorge: boolean,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    situasjon: Situasjon,\n): boolean => {\n    if (erFarEllerMedmor) {\n        if (\n            erSamtidigUttakFarMedmorFørFørsteSeksUkerWLB(\n                { fom: tidsperiode.fom },\n                familiehendelsesdato,\n                erFarEllerMedmor,\n                erDeltUttakINorge,\n                situasjon,\n            )\n        ) {\n            return false;\n        }\n    }\n    return erDeltUttakINorge;\n};\n\nexport default hvemSkalTaUttakSkalBesvares;\n","import { AnnenForelder, Periodetype, StønadskontoType, harAnnenForelderRettIEØS } from '@navikt/fp-common';\n\nconst overføringsårsakSkalBesvares = (\n    periodetype: Periodetype,\n    erFarEllerMedmor: boolean,\n    kontoValue: StønadskontoType,\n    annenForelder: AnnenForelder,\n): boolean => {\n    const annenForelderHarRettIEØS = harAnnenForelderRettIEØS(annenForelder);\n    return (\n        periodetype === Periodetype.Overføring ||\n        (annenForelderHarRettIEØS && erFarEllerMedmor && kontoValue === StønadskontoType.Mødrekvote) ||\n        (annenForelderHarRettIEØS && !erFarEllerMedmor && kontoValue === StønadskontoType.Fedrekvote)\n    );\n};\n\nexport default overføringsårsakSkalBesvares;\n","import {\n    AnnenForelder,\n    Periodetype,\n    Situasjon,\n    StønadskontoType,\n    StønadskontoUttak,\n    TidsperiodeDate,\n    Tidsperioden,\n    convertYesOrNoOrUndefinedToBoolean,\n} from '@navikt/fp-common';\nimport { getUttaksdatoer } from '../uttaksdatoerUtils';\nimport { aktivitetskravMorSkalBesvares } from './aktivitetskravMorSkalBesvares';\nimport erMorForForSykSkalBesvares from './erMorForSykSkalBesvares';\nimport { graderingSkalBesvares } from './graderingSkalBesvares';\nimport { graderingSkalBesvaresPgaWLBUttakRundtFødsel } from './graderingSkalBesvaresPgaWLBUttakRundtFødsel';\nimport samtidigUttakSkalBesvares from './samtidigUttakSkalBesvares';\nimport { ønskerFlerbarnsdagerSkalBesvares } from './ønskerFlerbarnsdagerSkalBesvares';\nimport uttakRundtFødselÅrsakSpørsmålSkalBesvares from './uttakRundtFødselÅrsakSpørsmålSkalBesvares';\nimport kontoSkalBesvares from './kontoSkalBesvarer';\nimport hvemSkalTaUttakSkalBesvares from './hvemSkalTaUttakSkalBesvares';\nimport overføringsårsakSkalBesvares from './overføringsårsakSkalBesvares';\nimport { PeriodeUttakFormData } from '../../components/uttaks-forms/periode-uttak-form/periodeUttakFormConfig';\nexport interface UttakSkjemaregler {\n    aktivitetskravMorSkalBesvares: () => boolean;\n    erMorForSykSkalBesvares: () => boolean;\n    uttakRundtFødselÅrsakSpørsmålSkalBesvares: () => boolean;\n    samtidigUttakSkalBesvares: () => boolean;\n    kontoSkalBesvares: () => boolean;\n    hvemSkalTaUttakSkalBesvares: () => boolean;\n    overføringsårsakSkalBesvares: () => boolean;\n    ønskerFlerbarnsdagerSkalBesvares: () => boolean;\n    graderingSkalBesvares: () => boolean;\n    graderingSkalBesvaresPgaWLBUttakRundtFødsel: () => boolean;\n}\n\nexport interface UttakSkjemaReglerProps {\n    erFarEllerMedmor: boolean;\n    erAleneOmOmsorg: boolean;\n    annenForelder: AnnenForelder;\n    situasjon: Situasjon;\n    erFlerbarnssøknad: boolean;\n    erDeltUttakINorge: boolean;\n    familiehendelsesdato: Date;\n    periodetype: Periodetype;\n    termindato: Date | undefined;\n    morHarRett: boolean;\n    stønadskontoer: StønadskontoUttak[];\n    antallBarn: number;\n}\n\nexport const getUttakSkjemaregler = (\n    formValues: PeriodeUttakFormData,\n    regelProps: UttakSkjemaReglerProps,\n): UttakSkjemaregler => {\n    const {\n        erFarEllerMedmor,\n        erAleneOmOmsorg,\n        annenForelder,\n        situasjon,\n        erFlerbarnssøknad,\n        erDeltUttakINorge,\n        familiehendelsesdato,\n        periodetype,\n        termindato,\n        stønadskontoer,\n        morHarRett,\n        antallBarn,\n    } = regelProps;\n\n    const { konto } = formValues;\n\n    const uttaksdatoer = getUttaksdatoer(familiehendelsesdato, erFarEllerMedmor, termindato);\n    const tidsperiode: TidsperiodeDate = { fom: formValues.fom!, tom: formValues.tom! };\n\n    return {\n        aktivitetskravMorSkalBesvares: () =>\n            aktivitetskravMorSkalBesvares(\n                convertYesOrNoOrUndefinedToBoolean(formValues.ønskerFlerbarnsdager),\n                convertYesOrNoOrUndefinedToBoolean(formValues.samtidigUttak),\n                convertYesOrNoOrUndefinedToBoolean(formValues.erMorForSyk),\n                periodetype,\n                konto as StønadskontoType,\n                !erFarEllerMedmor,\n                erAleneOmOmsorg,\n                annenForelder.kanIkkeOppgis,\n                false, // TODO Midlertidig omsorg,\n                tidsperiode,\n                familiehendelsesdato,\n                termindato,\n                situasjon,\n                stønadskontoer,\n                !morHarRett,\n            ),\n        erMorForSykSkalBesvares: (): boolean =>\n            erMorForForSykSkalBesvares(\n                periodetype,\n                konto as StønadskontoType,\n                tidsperiode,\n                situasjon,\n                erFarEllerMedmor,\n                uttaksdatoer,\n                erFlerbarnssøknad,\n                erAleneOmOmsorg,\n                annenForelder.kanIkkeOppgis,\n                convertYesOrNoOrUndefinedToBoolean(formValues.ønskerFlerbarnsdager),\n                false, // TODO Midlertidig omsorg,\n                familiehendelsesdato,\n                termindato,\n                !morHarRett,\n            ),\n        samtidigUttakSkalBesvares: (): boolean =>\n            samtidigUttakSkalBesvares(\n                periodetype,\n                konto as StønadskontoType,\n                Tidsperioden(tidsperiode).erInnenforFørsteSeksUker(familiehendelsesdato) && situasjon === 'fødsel',\n                periodetype === Periodetype.Uttak && konto === StønadskontoType.ForeldrepengerFørFødsel,\n                erAleneOmOmsorg,\n                erDeltUttakINorge,\n                false, // TODO Midlertidig omsorg,\n                convertYesOrNoOrUndefinedToBoolean(formValues.erMorForSyk),\n                convertYesOrNoOrUndefinedToBoolean(formValues.ønskerFlerbarnsdager),\n                tidsperiode,\n                erFarEllerMedmor,\n                annenForelder.kanIkkeOppgis,\n                familiehendelsesdato,\n                termindato,\n                situasjon,\n                !morHarRett,\n            ),\n        kontoSkalBesvares: (): boolean =>\n            kontoSkalBesvares(periodetype, tidsperiode, stønadskontoer, familiehendelsesdato, erFarEllerMedmor),\n        ønskerFlerbarnsdagerSkalBesvares: (): boolean => {\n            return ønskerFlerbarnsdagerSkalBesvares(\n                periodetype,\n                erFlerbarnssøknad,\n                erFarEllerMedmor,\n                familiehendelsesdato,\n                tidsperiode,\n                konto as StønadskontoType,\n                !morHarRett,\n                antallBarn,\n                erAleneOmOmsorg,\n                erDeltUttakINorge,\n                formValues.uttakRundtFødselÅrsak === '' ? undefined : formValues.uttakRundtFødselÅrsak,\n            );\n        },\n        hvemSkalTaUttakSkalBesvares: (): boolean =>\n            hvemSkalTaUttakSkalBesvares(\n                tidsperiode,\n                erDeltUttakINorge,\n                familiehendelsesdato,\n                erFarEllerMedmor,\n                situasjon,\n            ),\n        graderingSkalBesvares: (): boolean => {\n            return graderingSkalBesvares(\n                periodetype,\n                konto as StønadskontoType,\n                familiehendelsesdato,\n                erFarEllerMedmor,\n                convertYesOrNoOrUndefinedToBoolean(formValues.erMorForSyk),\n                tidsperiode,\n            );\n        },\n        graderingSkalBesvaresPgaWLBUttakRundtFødsel: (): boolean => {\n            return graderingSkalBesvaresPgaWLBUttakRundtFødsel(\n                tidsperiode,\n                periodetype,\n                konto as StønadskontoType,\n                erFarEllerMedmor,\n                familiehendelsesdato,\n                termindato,\n                situasjon,\n            );\n        },\n        overføringsårsakSkalBesvares: (): boolean => {\n            return overføringsårsakSkalBesvares(\n                periodetype,\n                erFarEllerMedmor,\n                konto as StønadskontoType,\n                annenForelder,\n            );\n        },\n        uttakRundtFødselÅrsakSpørsmålSkalBesvares: () => {\n            return uttakRundtFødselÅrsakSpørsmålSkalBesvares(\n                periodetype,\n                konto as StønadskontoType,\n                tidsperiode,\n                erFarEllerMedmor,\n                erAleneOmOmsorg,\n                annenForelder.kanIkkeOppgis,\n                false, //TODO: midlertidig omsorg\n                familiehendelsesdato,\n                termindato,\n                situasjon,\n                !morHarRett,\n            );\n        },\n    };\n};\n\nexport default getUttakSkjemaregler;\n","import {\n    andreAugust2022ReglerGjelder,\n    AnnenForelder,\n    erFarMedmorSinWLBTidsperiodeRundtFødsel,\n    getSisteUttaksdag6UkerEtterFødsel,\n    harAnnenForelderRettIEØS,\n    hasValue,\n    isValidTidsperiode,\n    Periodetype,\n    Situasjon,\n    StønadskontoType,\n    TidsperiodeDate,\n    UttakRundtFødselÅrsak,\n} from '@navikt/fp-common';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport dayjs from 'dayjs';\nimport { PeriodeUttakFormData, PeriodeUttakFormField } from './periodeUttakFormConfig';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\nimport getUttakSkjemaregler, {\n    UttakSkjemaregler,\n    UttakSkjemaReglerProps,\n} from '../../../utils/uttaksskjema/uttakSkjemaregler';\nimport hvemSkalTaUttakSkalBesvares from '../../../utils/uttaksskjema/hvemSkalTaUttakSkalBesvares';\nexport interface PeriodeUttakFormQuestionsPayload {\n    values: PeriodeUttakFormData;\n    regelProps: UttakSkjemaReglerProps;\n    isOpen: boolean;\n}\n\nexport const erSamtidigUttakFarMedmorFørFødselWLB = (\n    values: Partial<PeriodeUttakFormData>,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    erDeltUttak: boolean,\n    situasjon: Situasjon,\n) => {\n    return (\n        andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n        erFarEllerMedmor &&\n        erDeltUttak &&\n        situasjon === 'fødsel' &&\n        hasValue(values.fom) &&\n        dayjs(values.fom).isBefore(familiehendelsesdato, 'day')\n    );\n};\n\nexport const erSamtidigUttakFarMedmorFørFørsteSeksUkerWLB = (\n    values: Partial<PeriodeUttakFormData>,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    erDeltUttak: boolean,\n    situasjon: Situasjon,\n) => {\n    const sisteUttaksdag6UkerEtterFødsel = getSisteUttaksdag6UkerEtterFødsel(familiehendelsesdato);\n\n    return (\n        andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n        erFarEllerMedmor &&\n        erDeltUttak &&\n        situasjon === 'fødsel' &&\n        hasValue(values.fom) &&\n        dayjs(values.fom).isSameOrBefore(sisteUttaksdag6UkerEtterFødsel, 'day')\n    );\n};\n\nexport const skalViseWLBInfoOmSamtidigUttakRundtFødsel = (\n    values: PeriodeUttakFormData,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    erDeltUttak: boolean,\n    situasjon: Situasjon,\n) => {\n    return (\n        values.uttakRundtFødselÅrsak === UttakRundtFødselÅrsak.samtidigUttak ||\n        erSamtidigUttakFarMedmorFørFødselWLB(values, familiehendelsesdato, erFarEllerMedmor, erDeltUttak, situasjon)\n    );\n};\n\nconst skalViseGradering = (\n    regler: UttakSkjemaregler,\n    values: PeriodeUttakFormData,\n    familiehendelsesdato: Date,\n    erDeltUttakINorge: boolean,\n    annenForelder: AnnenForelder,\n): boolean => {\n    if (!isValidTidsperiode({ fom: values.fom, tom: values.tom })) {\n        return false;\n    }\n\n    if (regler.overføringsårsakSkalBesvares() && !hasValue(values.overføringsårsak)) {\n        return false;\n    }\n\n    if (\n        regler.graderingSkalBesvaresPgaWLBUttakRundtFødsel() &&\n        dayjs(values.fom).isSameOrAfter(familiehendelsesdato, 'd') &&\n        (erDeltUttakINorge || harAnnenForelderRettIEØS(annenForelder)) &&\n        !hasValue(values.uttakRundtFødselÅrsak)\n    ) {\n        return false;\n    }\n\n    if (\n        values.konto === '' ||\n        (regler.samtidigUttakSkalBesvares() && values.samtidigUttak === YesOrNo.UNANSWERED) ||\n        (regler.ønskerFlerbarnsdagerSkalBesvares() && values.ønskerFlerbarnsdager === YesOrNo.UNANSWERED) ||\n        (regler.aktivitetskravMorSkalBesvares() &&\n            values.aktivitetskravMor === '' &&\n            values.erMorForSyk !== YesOrNo.YES) ||\n        (regler.erMorForSykSkalBesvares() && values.erMorForSyk !== YesOrNo.YES)\n    ) {\n        return false;\n    }\n\n    return true;\n};\n\nconst skalViseAktivitetskrav = (regler: UttakSkjemaregler, values: PeriodeUttakFormData): boolean => {\n    if (!isValidTidsperiode({ fom: values.fom, tom: values.tom })) {\n        return false;\n    }\n\n    if (regler.erMorForSykSkalBesvares() && values.erMorForSyk !== YesOrNo.NO) {\n        return false;\n    }\n\n    if (regler.ønskerFlerbarnsdagerSkalBesvares() && values.ønskerFlerbarnsdager === YesOrNo.UNANSWERED) {\n        return false;\n    }\n\n    return regler.samtidigUttakSkalBesvares()\n        ? values.samtidigUttak !== YesOrNo.UNANSWERED\n        : values.konto !== undefined;\n};\n\nconst skalViseSamtidigUttak = (regler: UttakSkjemaregler, values: PeriodeUttakFormData): boolean => {\n    if (!isValidTidsperiode({ fom: values.fom, tom: values.tom })) {\n        return false;\n    }\n\n    if (values.konto === StønadskontoType.Foreldrepenger) {\n        return false;\n    }\n\n    if (values.konto === '') {\n        return false;\n    }\n\n    if (regler.ønskerFlerbarnsdagerSkalBesvares() && values.ønskerFlerbarnsdager === YesOrNo.UNANSWERED) {\n        return false;\n    }\n\n    if (regler.erMorForSykSkalBesvares() && values.erMorForSyk === YesOrNo.NO) {\n        return false;\n    }\n\n    return true;\n};\n\nconst skalViseFlerbarnsdager = (\n    values: PeriodeUttakFormData,\n    tidsperiode: TidsperiodeDate,\n    familiehendelsesdato: Date,\n    periodetype: Periodetype,\n    kontoValue: StønadskontoType | '',\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n    situasjon: Situasjon,\n): boolean => {\n    if (!isValidTidsperiode({ fom: values.fom, tom: values.tom })) {\n        return false;\n    }\n    if (\n        kontoValue !== '' &&\n        erFarMedmorSinWLBTidsperiodeRundtFødsel(\n            tidsperiode,\n            familiehendelsesdato,\n            periodetype,\n            kontoValue,\n            erFarEllerMedmor,\n            termindato,\n            situasjon,\n        ) &&\n        values.uttakRundtFødselÅrsak === ''\n    ) {\n        return false;\n    }\n\n    return (\n        values.konto === StønadskontoType.Fellesperiode ||\n        values.konto === StønadskontoType.Fedrekvote ||\n        values.konto === StønadskontoType.Foreldrepenger\n    );\n};\n\nconst skalViseKonto = (\n    values: PeriodeUttakFormData,\n    familiehendelsesdato: Date,\n    erDeltUttakINorge: boolean,\n    erFarEllerMedmor: boolean,\n    situasjon: Situasjon,\n): boolean => {\n    const tidsperiode = { fom: values.fom, tom: values.tom };\n    if (!isValidTidsperiode(tidsperiode)) {\n        return false;\n    }\n    if (\n        hvemSkalTaUttakSkalBesvares(\n            tidsperiode as TidsperiodeDate,\n            erDeltUttakINorge,\n            familiehendelsesdato,\n            erFarEllerMedmor,\n            situasjon,\n        ) &&\n        !hasValue(values.hvemSkalTaUttak)\n    ) {\n        return false;\n    }\n    return true;\n};\n\nconst PeriodeUttakFormConfig: QuestionConfig<PeriodeUttakFormQuestionsPayload, PeriodeUttakFormField> = {\n    [PeriodeUttakFormField.fom]: {\n        isAnswered: ({ values }) => hasValue(values.fom),\n        isIncluded: () => true,\n    },\n    [PeriodeUttakFormField.tom]: {\n        isAnswered: ({ values }) => hasValue(values.tom),\n        isIncluded: () => true,\n    },\n    [PeriodeUttakFormField.hvemSkalTaUttak]: {\n        isAnswered: ({ values }) => hasValue(values.hvemSkalTaUttak),\n        isIncluded: ({ regelProps, values }) => getUttakSkjemaregler(values, regelProps).hvemSkalTaUttakSkalBesvares(),\n        visibilityFilter: ({ values }) => isValidTidsperiode({ fom: values.fom, tom: values.tom }),\n    },\n    [PeriodeUttakFormField.konto]: {\n        isAnswered: ({ values }) => hasValue(values.konto),\n        isIncluded: ({ regelProps, values }) => getUttakSkjemaregler(values, regelProps).kontoSkalBesvares(),\n        visibilityFilter: ({ regelProps, values }) =>\n            skalViseKonto(\n                values,\n                regelProps.familiehendelsesdato,\n                regelProps.erDeltUttakINorge,\n                regelProps.erFarEllerMedmor,\n                regelProps.situasjon,\n            ),\n    },\n    [PeriodeUttakFormField.ønskerFlerbarnsdager]: {\n        isAnswered: ({ values }) => values.ønskerFlerbarnsdager !== YesOrNo.UNANSWERED,\n        isIncluded: ({ values, regelProps }) =>\n            getUttakSkjemaregler(values, regelProps).ønskerFlerbarnsdagerSkalBesvares(),\n        visibilityFilter: ({ values, regelProps }) =>\n            skalViseFlerbarnsdager(\n                values,\n                { fom: values.fom!, tom: values.tom! },\n                regelProps.familiehendelsesdato,\n                regelProps.periodetype,\n                values.konto,\n                regelProps.erFarEllerMedmor,\n                regelProps.termindato,\n                regelProps.situasjon,\n            ),\n    },\n    [PeriodeUttakFormField.erMorForSyk]: {\n        isAnswered: ({ values }) => values.erMorForSyk !== YesOrNo.UNANSWERED,\n        isIncluded: ({ values, regelProps }) => getUttakSkjemaregler(values, regelProps).erMorForSykSkalBesvares(),\n        visibilityFilter: ({ values }) => values.ønskerFlerbarnsdager !== YesOrNo.UNANSWERED || hasValue(values.konto),\n    },\n    [PeriodeUttakFormField.uttakRundtFødselÅrsak]: {\n        isAnswered: ({ values }) => hasValue(values.uttakRundtFødselÅrsak),\n        isIncluded: ({ values, regelProps }) =>\n            getUttakSkjemaregler(values, regelProps).uttakRundtFødselÅrsakSpørsmålSkalBesvares(),\n        visibilityFilter: ({ values }) => values.ønskerFlerbarnsdager !== YesOrNo.UNANSWERED || hasValue(values.konto),\n    },\n    [PeriodeUttakFormField.samtidigUttak]: {\n        isAnswered: ({ values }) => values.samtidigUttak !== YesOrNo.UNANSWERED,\n        isIncluded: ({ values, regelProps }) => getUttakSkjemaregler(values, regelProps).samtidigUttakSkalBesvares(),\n        visibilityFilter: ({ values, regelProps }) =>\n            skalViseSamtidigUttak(getUttakSkjemaregler(values, regelProps), values),\n    },\n    [PeriodeUttakFormField.samtidigUttakProsent]: {\n        isAnswered: ({ values }) => hasValue(values.samtidigUttakProsent),\n        isIncluded: ({ values, regelProps }) => getUttakSkjemaregler(values, regelProps).samtidigUttakSkalBesvares(),\n        visibilityFilter: ({ values }) => values.samtidigUttak === YesOrNo.YES,\n    },\n    [PeriodeUttakFormField.skalHaGradering]: {\n        isAnswered: ({ values }) => values.skalHaGradering !== YesOrNo.UNANSWERED,\n        isIncluded: ({ values, regelProps }) => getUttakSkjemaregler(values, regelProps).graderingSkalBesvares(),\n        visibilityFilter: ({ values, regelProps }) =>\n            skalViseGradering(\n                getUttakSkjemaregler(values, regelProps),\n                values,\n                regelProps.familiehendelsesdato,\n                regelProps.erDeltUttakINorge,\n                regelProps.annenForelder,\n            ),\n    },\n    [PeriodeUttakFormField.stillingsprosent]: {\n        isAnswered: ({ values }) => hasValue(values.stillingsprosent),\n        isIncluded: ({ values, regelProps }) => getUttakSkjemaregler(values, regelProps).graderingSkalBesvares(),\n        visibilityFilter: ({ values }) => values.skalHaGradering === YesOrNo.YES,\n    },\n    [PeriodeUttakFormField.arbeidsformer]: {\n        isAnswered: ({ values }) => values.arbeidsformer.length > 0,\n        isIncluded: ({ values, regelProps }) => getUttakSkjemaregler(values, regelProps).graderingSkalBesvares(),\n        visibilityFilter: ({ values }) => values.skalHaGradering === YesOrNo.YES,\n    },\n    [PeriodeUttakFormField.overføringsårsak]: {\n        isAnswered: ({ values }) => hasValue(values.overføringsårsak),\n        isIncluded: ({ values, regelProps }) => getUttakSkjemaregler(values, regelProps).overføringsårsakSkalBesvares(),\n        visibilityFilter: ({ values }) => hasValue(values.konto),\n    },\n    [PeriodeUttakFormField.overføringsdokumentasjon]: {\n        isAnswered: ({ values }) => values.overføringsdokumentasjon.length >= 0,\n        isIncluded: ({ values, regelProps }) => getUttakSkjemaregler(values, regelProps).overføringsårsakSkalBesvares(),\n        visibilityFilter: ({ values }) => hasValue(values.overføringsårsak),\n    },\n    [PeriodeUttakFormField.aktivitetskravMor]: {\n        isAnswered: ({ values }) => hasValue(values.aktivitetskravMor),\n        isIncluded: ({ values, regelProps }) =>\n            getUttakSkjemaregler(values, regelProps).aktivitetskravMorSkalBesvares(),\n        visibilityFilter: ({ values, regelProps }) =>\n            skalViseAktivitetskrav(getUttakSkjemaregler(values, regelProps), values),\n    },\n    [PeriodeUttakFormField.aktivitetskravMorDokumentasjon]: {\n        isAnswered: ({ values }) => values.aktivitetskravMorDokumentasjon.length >= 0,\n        isIncluded: ({ values, regelProps, isOpen }) =>\n            getUttakSkjemaregler(values, regelProps).aktivitetskravMorSkalBesvares() && isOpen,\n        visibilityFilter: ({ values, regelProps }) =>\n            skalViseAktivitetskrav(getUttakSkjemaregler(values, regelProps), values),\n    },\n};\n\nexport const periodeUttakFormQuestionsConfig = Questions<PeriodeUttakFormQuestionsPayload, PeriodeUttakFormField>(\n    PeriodeUttakFormConfig,\n);\n","import {\n    Attachment,\n    AttachmentType,\n    Block,\n    FormikFileUploader,\n    MorsAktivitet,\n    NavnPåForeldre,\n    Skjemanummer,\n    getNavnGenitivEierform,\n    hasValue,\n    intlUtils,\n    links,\n} from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport { PeriodeUtsettelseFormField } from '../../periode-utsettelse-form/periodeUtsettelseFormConfig';\nimport { PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\nimport { BodyShort, GuidePanel } from '@navikt/ds-react';\n\ninterface Props {\n    fieldName: PeriodeUttakFormField | PeriodeUtsettelseFormField;\n    vedleggFieldName:\n        | PeriodeUttakFormField.aktivitetskravMorDokumentasjon\n        | PeriodeUtsettelseFormField.morsAktivitetIPeriodenDokumentasjon;\n    FormComponents: any;\n    navnPåForeldre: NavnPåForeldre;\n    aktivitetskravMorValue: MorsAktivitet | '';\n    aktivitetskravVedlegg: Attachment[];\n    isOpen: boolean;\n    saveAttachment: (vedlegg: Attachment) => void;\n}\n\nconst getVeilederTekst = (\n    intl: IntlShape,\n    morsAktivitetIPerioden: MorsAktivitet | '',\n    navnPåForeldre: NavnPåForeldre,\n) => {\n    if (morsAktivitetIPerioden === MorsAktivitet.Arbeid) {\n        return (\n            <BodyShort>\n                <FormattedMessage\n                    id=\"uttaksplan.morsAktivitet.veileder.arbeid\"\n                    values={{ navnMor: getNavnGenitivEierform(navnPåForeldre.mor, intl.locale) }}\n                />\n            </BodyShort>\n        );\n    } else if (morsAktivitetIPerioden === MorsAktivitet.ArbeidOgUtdanning) {\n        const listData = [\n            intlUtils(intl, 'uttaksplan.morsAktivitet.veileder.arbeidOgUtdanning.punkt1'),\n            intlUtils(intl, 'uttaksplan.morsAktivitet.veileder.arbeidOgUtdanning.punkt2'),\n            intlUtils(intl, 'uttaksplan.morsAktivitet.veileder.arbeidOgUtdanning.punkt3'),\n            intlUtils(intl, 'uttaksplan.morsAktivitet.veileder.arbeidOgUtdanning.punkt4'),\n        ];\n\n        return (\n            <>\n                <BodyShort>\n                    <FormattedMessage\n                        id=\"uttaksplan.morsAktivitet.veileder.arbeidOgUtdanning\"\n                        values={{ navnMor: navnPåForeldre.mor }}\n                    />\n                </BodyShort>\n                <ul>\n                    {listData.map((listItem, index) => (\n                        <li key={`arbeidOgUtdanning${index}`}>{listItem}</li>\n                    ))}\n                </ul>\n            </>\n        );\n    } else if (\n        morsAktivitetIPerioden === MorsAktivitet.Innlagt ||\n        morsAktivitetIPerioden === MorsAktivitet.TrengerHjelp\n    ) {\n        return (\n            <BodyShort>\n                <FormattedMessage\n                    id=\"uttaksplan.morsAktivitet.veileder.informasjonVedSykdomAnnenForelder\"\n                    values={{ navn: navnPåForeldre.mor }}\n                />\n            </BodyShort>\n        );\n    } else if (morsAktivitetIPerioden === MorsAktivitet.Introduksjonsprogrammet) {\n        return (\n            <BodyShort>\n                <FormattedMessage\n                    id=\"uttaksplan.morsAktivitet.veileder.introduksjonsprogrammet\"\n                    values={{ navnMor: navnPåForeldre.mor }}\n                />\n            </BodyShort>\n        );\n    } else if (morsAktivitetIPerioden === MorsAktivitet.Kvalifiseringsprogrammet) {\n        return (\n            <BodyShort>\n                <FormattedMessage\n                    id=\"uttaksplan.morsAktivitet.veileder.kvalifiseringsprogrammet\"\n                    values={{ navnMor: navnPåForeldre.mor }}\n                />\n            </BodyShort>\n        );\n    } else if (morsAktivitetIPerioden === MorsAktivitet.Utdanning) {\n        const listData = [\n            intlUtils(intl, 'uttaksplan.morsAktivitet.veileder.utdanning.punkt1'),\n            intlUtils(intl, 'uttaksplan.morsAktivitet.veileder.utdanning.punkt2'),\n            intlUtils(intl, 'uttaksplan.morsAktivitet.veileder.utdanning.punkt3'),\n            intlUtils(intl, 'uttaksplan.morsAktivitet.veileder.utdanning.punkt4'),\n        ];\n\n        return (\n            <>\n                <BodyShort>\n                    <FormattedMessage\n                        id=\"uttaksplan.morsAktivitet.veileder.utdanning\"\n                        values={{ navnMor: navnPåForeldre.mor }}\n                    />\n                </BodyShort>\n                <ul>\n                    {listData.map((listItem, index) => (\n                        <li key={`trengerhjelp${index}`}>{listItem}</li>\n                    ))}\n                </ul>\n            </>\n        );\n    } else {\n        return '';\n    }\n};\n\nconst renderOptions = (intl: IntlShape) => {\n    return Object.keys(MorsAktivitet)\n        .filter(\n            (aktivitetsid) =>\n                (MorsAktivitet as any)[aktivitetsid] !== MorsAktivitet.Uføre &&\n                (MorsAktivitet as any)[aktivitetsid] !== MorsAktivitet.IkkeOppgitt,\n        )\n        .map((aktivitetsid) => (\n            <option value={(MorsAktivitet as any)[aktivitetsid]} key={(MorsAktivitet as any)[aktivitetsid]}>\n                {intlUtils(intl, `uttaksplan.morsAktivitet.${aktivitetsid}`)}\n            </option>\n        ));\n};\n\nexport const getMorsAktivitetSkjemanummer = (morsAktivitet?: MorsAktivitet): Skjemanummer => {\n    switch (morsAktivitet) {\n        case MorsAktivitet.Innlagt:\n            return Skjemanummer.DOK_INNLEGGELSE;\n        case MorsAktivitet.Kvalifiseringsprogrammet:\n            return Skjemanummer.BEKREFTELSE_DELTAR_KVALIFISERINGSPROGRAM;\n        case MorsAktivitet.Introduksjonsprogrammet:\n            return Skjemanummer.DOK_DELTAKELSE_I_INTRODUKSJONSPROGRAMMET;\n        case MorsAktivitet.ArbeidOgUtdanning:\n        case MorsAktivitet.Arbeid:\n        case MorsAktivitet.TrengerHjelp:\n            return Skjemanummer.DOK_MORS_UTDANNING_ARBEID_SYKDOM;\n        case MorsAktivitet.Utdanning:\n            return Skjemanummer.BEKREFTELSE_FRA_STUDIESTED;\n        default:\n            return Skjemanummer.ANNET;\n    }\n};\n\nconst AktivitetskravSpørsmål: FunctionComponent<Props> = ({\n    fieldName,\n    vedleggFieldName,\n    navnPåForeldre,\n    aktivitetskravMorValue,\n    aktivitetskravVedlegg,\n    FormComponents,\n    isOpen,\n    saveAttachment,\n}) => {\n    const intl = useIntl();\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <FormComponents.Select\n                    name={fieldName}\n                    label={intlUtils(intl, 'uttaksplan.aktivitetskrav', { navnMor: navnPåForeldre.mor })}\n                    validate={(value: MorsAktivitet | '') => {\n                        if (!hasValue(value)) {\n                            return intlUtils(intl, 'uttaksplan.validering.aktivitetskrav');\n                        }\n\n                        return undefined;\n                    }}\n                >\n                    <option value=\"\" />\n                    {renderOptions(intl)}\n                </FormComponents.Select>\n            </Block>\n            <Block padBottom=\"l\" visible={hasValue(aktivitetskravMorValue)}>\n                <GuidePanel>\n                    {getVeilederTekst(intl, aktivitetskravMorValue, navnPåForeldre)}\n                    <BodyShort>\n                        <FormattedMessage\n                            id=\"uttaksplan.morsAktivitet.lesmer\"\n                            values={{\n                                a: (msg: any) => (\n                                    <a\n                                        href={links.morsAktivitetskrav}\n                                        className=\"lenke\"\n                                        rel=\"noreferrer\"\n                                        target=\"_blank\"\n                                    >\n                                        {msg}\n                                    </a>\n                                ),\n                            }}\n                        />\n                    </BodyShort>\n                </GuidePanel>\n            </Block>\n\n            <Block padBottom=\"l\" visible={hasValue(aktivitetskravMorValue) && isOpen}>\n                <FormikFileUploader\n                    legend=\"Dokumentasjon for mors aktivitet\"\n                    label=\"Last opp dokumentasjon for mors aktivitet\"\n                    name={vedleggFieldName}\n                    attachmentType={AttachmentType.MORS_AKTIVITET_DOKUMENTASJON}\n                    skjemanummer={getMorsAktivitetSkjemanummer(aktivitetskravMorValue as MorsAktivitet)}\n                    attachments={aktivitetskravVedlegg}\n                    saveAttachment={saveAttachment}\n                />\n            </Block>\n        </>\n    );\n};\n\nexport default AktivitetskravSpørsmål;\n","import {\n    Attachment,\n    AttachmentType,\n    Forelder,\n    MorsAktivitet,\n    Situasjon,\n    Skjemanummer,\n    StønadskontoType,\n    OverføringÅrsakType,\n    hasValue,\n    Periode,\n    isUttaksperiode,\n    isOverføringsperiode,\n    isOppholdsperiode,\n    getStønadskontoFromOppholdsårsak,\n    Arbeidsform,\n    trimNumberValue,\n    Periodetype,\n    Overføringsperiode,\n    Oppholdsperiode,\n    getOppholdsÅrsakFromStønadskonto,\n    Uttaksperiode,\n    convertBooleanOrUndefinedToYesOrNo,\n    convertYesOrNoOrUndefinedToBoolean,\n    lagSendSenereDokumentNårIngenAndreFinnes,\n    getMorsAktivitet,\n    UttakRundtFødselÅrsak,\n} from '@navikt/fp-common';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport dayjs from 'dayjs';\nimport { PeriodeUttakFormData, PeriodeUttakFormField } from './periodeUttakFormConfig';\nimport {\n    erSamtidigUttakFarMedmorFørFødselWLB,\n    erSamtidigUttakFarMedmorFørFørsteSeksUkerWLB,\n} from './periodeUttakFormQuestionsConfig';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\nimport { getMorsAktivitetSkjemanummer } from '../spørsmål/aktivitetskrav/AktivitetskravSpørsmål';\n\nconst getInitialKonto = (\n    erDeltUttak: boolean,\n    erMorUfør: boolean,\n    periodenStarterFørFamdato: boolean,\n    erFarEllerMedmor: boolean,\n) => {\n    if (erDeltUttak) {\n        if (periodenStarterFørFamdato && erFarEllerMedmor) {\n            return StønadskontoType.Fedrekvote;\n        }\n\n        return '';\n    }\n\n    if (erFarEllerMedmor && periodenStarterFørFamdato) {\n        return StønadskontoType.AktivitetsfriKvote;\n    }\n\n    if (erMorUfør) {\n        return '';\n    }\n\n    return StønadskontoType.Foreldrepenger;\n};\n\nconst getHvemSkalTaUttak = (\n    erDeltUttak: boolean,\n    forelder: Forelder,\n    periodenStarterFørFamdato: boolean,\n    erFarEllerMedmor: boolean,\n    annenForelderHarRettIEØS: boolean,\n) => {\n    if (erDeltUttak) {\n        if ((periodenStarterFørFamdato || annenForelderHarRettIEØS) && erFarEllerMedmor) {\n            return Forelder.farMedmor;\n        }\n        if (annenForelderHarRettIEØS) {\n            return erFarEllerMedmor ? Forelder.farMedmor : Forelder.mor;\n        }\n\n        return '';\n    }\n\n    return forelder;\n};\n\nconst getInitialValues = (\n    erDeltUttak: boolean,\n    forelder: Forelder,\n    erMorUfør: boolean,\n    familiehendelsesdato: Date,\n    startdatoPeriode: Date | undefined,\n    erFarEllerMedmor: boolean,\n    annenForelderHarRettIEØS: boolean,\n): PeriodeUttakFormData => {\n    const periodenStarterFørFamdato = startdatoPeriode\n        ? dayjs(startdatoPeriode).isBefore(familiehendelsesdato, 'day')\n        : false;\n    const hvemSkalTaUttak = getHvemSkalTaUttak(\n        erDeltUttak,\n        forelder,\n        periodenStarterFørFamdato,\n        erFarEllerMedmor,\n        annenForelderHarRettIEØS,\n    );\n    const konto = getInitialKonto(erDeltUttak, erMorUfør, periodenStarterFørFamdato, erFarEllerMedmor);\n\n    return {\n        [PeriodeUttakFormField.fom]: undefined,\n        [PeriodeUttakFormField.tom]: undefined,\n        [PeriodeUttakFormField.konto]: konto,\n        [PeriodeUttakFormField.samtidigUttak]: YesOrNo.UNANSWERED,\n        [PeriodeUttakFormField.aktivitetskravMor]: '',\n        [PeriodeUttakFormField.aktivitetskravMorDokumentasjon]: [],\n        [PeriodeUttakFormField.overføringsårsak]: '',\n        [PeriodeUttakFormField.overføringsdokumentasjon]: [],\n        [PeriodeUttakFormField.skalHaGradering]: YesOrNo.UNANSWERED,\n        [PeriodeUttakFormField.stillingsprosent]: '',\n        [PeriodeUttakFormField.arbeidsformer]: '',\n        [PeriodeUttakFormField.erMorForSyk]: YesOrNo.UNANSWERED,\n        [PeriodeUttakFormField.erMorForSykDokumentasjon]: [],\n        [PeriodeUttakFormField.uttakRundtFødselÅrsak]: '',\n        [PeriodeUttakFormField.samtidigUttakProsent]: '',\n        [PeriodeUttakFormField.hvemSkalTaUttak]: hvemSkalTaUttak,\n        [PeriodeUttakFormField.ønskerFlerbarnsdager]: YesOrNo.UNANSWERED,\n    };\n};\n\nexport const cleanPeriodeUttakFormData = (\n    values: PeriodeUttakFormData,\n    visibility: QuestionVisibility<PeriodeUttakFormField, undefined>,\n    erDeltUttak: boolean,\n    forelder: Forelder,\n    erMorUfør: boolean,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    annenForelderHarRettIEØS: boolean,\n): PeriodeUttakFormData => {\n    const initialValues = getInitialValues(\n        erDeltUttak,\n        forelder,\n        erMorUfør,\n        familiehendelsesdato,\n        values.fom,\n        erFarEllerMedmor,\n        annenForelderHarRettIEØS,\n    );\n\n    const cleanedData: PeriodeUttakFormData = {\n        fom: values.fom,\n        tom: values.tom,\n        hvemSkalTaUttak: values.hvemSkalTaUttak,\n        aktivitetskravMor: visibility.isVisible(PeriodeUttakFormField.aktivitetskravMor)\n            ? values.aktivitetskravMor\n            : '',\n        aktivitetskravMorDokumentasjon: visibility.isVisible(PeriodeUttakFormField.aktivitetskravMorDokumentasjon)\n            ? values.aktivitetskravMorDokumentasjon\n            : [],\n        erMorForSyk: visibility.isVisible(PeriodeUttakFormField.erMorForSyk)\n            ? values.erMorForSyk\n            : initialValues.erMorForSyk,\n        erMorForSykDokumentasjon:\n            visibility.isVisible(PeriodeUttakFormField.erMorForSyk) ||\n            values.uttakRundtFødselÅrsak === UttakRundtFødselÅrsak.morErForSyk\n                ? values.erMorForSykDokumentasjon\n                : initialValues.erMorForSykDokumentasjon,\n        uttakRundtFødselÅrsak: visibility.isVisible(PeriodeUttakFormField.uttakRundtFødselÅrsak)\n            ? values.uttakRundtFødselÅrsak\n            : initialValues.uttakRundtFødselÅrsak,\n        arbeidsformer: visibility.isVisible(PeriodeUttakFormField.arbeidsformer) ? values.arbeidsformer : '',\n        konto: values.konto,\n        overføringsdokumentasjon: visibility.isVisible(PeriodeUttakFormField.overføringsdokumentasjon)\n            ? values.overføringsdokumentasjon\n            : [],\n        overføringsårsak: visibility.isVisible(PeriodeUttakFormField.overføringsårsak)\n            ? values.overføringsårsak\n            : initialValues.overføringsårsak,\n        samtidigUttak: visibility.isVisible(PeriodeUttakFormField.samtidigUttak)\n            ? values.samtidigUttak\n            : initialValues.samtidigUttak,\n        samtidigUttakProsent: visibility.isVisible(PeriodeUttakFormField.samtidigUttakProsent)\n            ? values.samtidigUttakProsent\n            : initialValues.samtidigUttakProsent,\n        skalHaGradering: visibility.isVisible(PeriodeUttakFormField.skalHaGradering)\n            ? values.skalHaGradering\n            : initialValues.skalHaGradering,\n        stillingsprosent: visibility.isVisible(PeriodeUttakFormField.stillingsprosent)\n            ? values.stillingsprosent\n            : initialValues.stillingsprosent,\n        ønskerFlerbarnsdager: visibility.isVisible(PeriodeUttakFormField.ønskerFlerbarnsdager)\n            ? values.ønskerFlerbarnsdager\n            : initialValues.ønskerFlerbarnsdager,\n    };\n\n    return cleanedData;\n};\n\nconst getInitialÅrsakForUttakRundtFødsel = (\n    erMorForSyk: boolean | undefined,\n    ønskerSamtidigUttak: boolean | undefined,\n    erDeltUttak: boolean,\n): UttakRundtFødselÅrsak | undefined => {\n    if (!erDeltUttak) {\n        return undefined;\n    }\n    if (erMorForSyk) {\n        return UttakRundtFødselÅrsak.morErForSyk;\n    }\n    if (ønskerSamtidigUttak) {\n        return UttakRundtFødselÅrsak.samtidigUttak;\n    }\n    return undefined;\n};\n\nexport const getPeriodeUttakFormInitialValues = (\n    periode: Periode,\n    erDeltUttak: boolean,\n    forelder: Forelder,\n    erMorUfør: boolean,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    annenForelderHarRettIEØS: boolean,\n): PeriodeUttakFormData => {\n    const initialValues = getInitialValues(\n        erDeltUttak,\n        forelder,\n        erMorUfør,\n        familiehendelsesdato,\n        periode.tidsperiode.fom,\n        erFarEllerMedmor,\n        annenForelderHarRettIEØS,\n    );\n\n    if (periode !== undefined) {\n        if (isUttaksperiode(periode)) {\n            return {\n                ...initialValues,\n                fom: periode.tidsperiode.fom,\n                tom: periode.tidsperiode.tom,\n                aktivitetskravMor: periode.morsAktivitetIPerioden || '',\n                aktivitetskravMorDokumentasjon: periode.vedlegg || [],\n                erMorForSyk: convertBooleanOrUndefinedToYesOrNo(periode.erMorForSyk),\n                erMorForSykDokumentasjon: periode.vedlegg || [],\n                hvemSkalTaUttak: periode.forelder || initialValues.hvemSkalTaUttak,\n                arbeidsformer:\n                    periode.arbeidsformer && periode.arbeidsformer.length > 0\n                        ? getFrilansSNEllerOrgnr(periode.arbeidsformer, periode.orgnumre)\n                        : '',\n                konto: periode.konto || initialValues.konto,\n                samtidigUttak: convertBooleanOrUndefinedToYesOrNo(periode.ønskerSamtidigUttak),\n                samtidigUttakProsent: periode.samtidigUttakProsent || '',\n                skalHaGradering: convertBooleanOrUndefinedToYesOrNo(periode.gradert),\n                stillingsprosent: periode.stillingsprosent || '',\n                ønskerFlerbarnsdager: convertBooleanOrUndefinedToYesOrNo(periode.ønskerFlerbarnsdager),\n                uttakRundtFødselÅrsak:\n                    getInitialÅrsakForUttakRundtFødsel(periode.erMorForSyk, periode.ønskerSamtidigUttak, erDeltUttak) ||\n                    initialValues.uttakRundtFødselÅrsak,\n            };\n        }\n\n        if (isOverføringsperiode(periode)) {\n            return {\n                ...initialValues,\n                hvemSkalTaUttak: periode.forelder,\n                konto: periode.konto,\n                fom: periode.tidsperiode.fom,\n                tom: periode.tidsperiode.tom,\n                overføringsårsak: periode.årsak,\n                overføringsdokumentasjon: periode.vedlegg || [],\n            };\n        }\n\n        if (isOppholdsperiode(periode)) {\n            return {\n                ...initialValues,\n                hvemSkalTaUttak: periode.forelder,\n                konto: getStønadskontoFromOppholdsårsak(periode.årsak),\n                fom: periode.tidsperiode.fom,\n                tom: periode.tidsperiode.tom,\n            };\n        }\n\n        return {\n            ...initialValues,\n            fom: periode.tidsperiode.fom,\n            tom: periode.tidsperiode.tom,\n        };\n    }\n\n    return {\n        ...initialValues,\n    };\n};\n\nconst getFrilansSNEllerOrgnr = (arbeidsformer: Arbeidsform[], orgnumre?: string[]): Arbeidsform => {\n    if (arbeidsformer.includes(Arbeidsform.frilans) || arbeidsformer.includes(Arbeidsform.selvstendignæringsdrivende)) {\n        return arbeidsformer[0];\n    }\n\n    return orgnumre![0] as Arbeidsform;\n};\n\nconst getArbeidsform = (arbeidsformer: Arbeidsform[]): Arbeidsform[] => {\n    return arbeidsformer.includes(Arbeidsform.frilans) || arbeidsformer.includes(Arbeidsform.selvstendignæringsdrivende)\n        ? arbeidsformer\n        : [Arbeidsform.arbeidstaker];\n};\n\nconst getOrgnummer = (arbeidsformer: Arbeidsform[]): string[] => {\n    return arbeidsformer.includes(Arbeidsform.frilans) || arbeidsformer.includes(Arbeidsform.selvstendignæringsdrivende)\n        ? []\n        : arbeidsformer;\n};\n\nconst getErArbeidstaker = (arbeidsformer: Arbeidsform[]): boolean => {\n    return (\n        arbeidsformer.includes(Arbeidsform.frilans) || arbeidsformer.includes(Arbeidsform.selvstendignæringsdrivende)\n    );\n};\n\nconst getSamtidigUttaksProsentWLB = (\n    ønskerGradering: boolean | undefined,\n    dekningsgrad: string | undefined,\n): string => {\n    return ønskerGradering && dekningsgrad !== undefined\n        ? (100 - parseFloat(trimNumberValue(dekningsgrad))).toString()\n        : '100';\n};\n\nconst velgVedleggSomSkalBrukes = (\n    aktivitetskravMorDokumentasjon: Attachment[],\n    erMorForSykDokumentasjon: Attachment[],\n): Attachment[] => {\n    if (aktivitetskravMorDokumentasjon.length > 0) {\n        return aktivitetskravMorDokumentasjon;\n    }\n\n    return erMorForSykDokumentasjon;\n};\n\nconst skalVedleggPåkreves = (\n    morsAktivitetIPerioden: '' | MorsAktivitet | undefined,\n    erMorForSyk: boolean,\n    uttakRundtFødselÅrsak: UttakRundtFødselÅrsak | '' | undefined,\n): boolean => {\n    if (\n        hasValue(morsAktivitetIPerioden) ||\n        erMorForSyk ||\n        (uttakRundtFødselÅrsak !== undefined && uttakRundtFødselÅrsak === UttakRundtFødselÅrsak.morErForSyk)\n    ) {\n        return true;\n    }\n\n    return false;\n};\n\nconst getKontoVerdi = (\n    samtidigWLBUttakFørFødselFarMedmor: boolean,\n    erFarEllerMedmor: boolean,\n    erDeltUttak: boolean,\n    startDato: Date,\n    inputKonto: StønadskontoType,\n    familiehendelsesdato: Date,\n): StønadskontoType => {\n    if (samtidigWLBUttakFørFødselFarMedmor) {\n        return StønadskontoType.Fedrekvote;\n    }\n    if (!erDeltUttak && erFarEllerMedmor && dayjs(startDato).isBefore(familiehendelsesdato, 'day')) {\n        return StønadskontoType.AktivitetsfriKvote;\n    }\n\n    return inputKonto;\n};\n\nexport const mapPeriodeUttakFormToPeriode = (\n    values: Partial<PeriodeUttakFormData>,\n    id: string,\n    type: Periodetype,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    erDeltUttak: boolean,\n    situasjon: Situasjon,\n): Periode => {\n    if (type === Periodetype.Overføring) {\n        const overføringTrengerDokumentasjon =\n            values.overføringsårsak !== OverføringÅrsakType.aleneomsorg &&\n            values.overføringsårsak !== OverføringÅrsakType.ikkeRettAnnenForelder;\n        const vedlegg = overføringTrengerDokumentasjon\n            ? lagSendSenereDokumentNårIngenAndreFinnes(\n                  values.overføringsdokumentasjon!,\n                  AttachmentType.OVERFØRING_KVOTE,\n                  Skjemanummer.DOK_OVERFØRING_FOR_SYK,\n              )\n            : undefined;\n        const periode: Overføringsperiode = {\n            id,\n            type,\n            forelder: values.hvemSkalTaUttak as Forelder,\n            konto: values.konto as StønadskontoType,\n            tidsperiode: {\n                fom: values.fom!,\n                tom: values.tom!,\n            },\n            årsak: values.overføringsårsak as OverføringÅrsakType,\n            vedlegg,\n        };\n\n        return periode;\n    }\n\n    if (type === Periodetype.Opphold) {\n        const periode: Oppholdsperiode = {\n            id,\n            type,\n            forelder: values.hvemSkalTaUttak as Forelder,\n            årsak: getOppholdsÅrsakFromStønadskonto(values.konto as StønadskontoType)!,\n            tidsperiode: {\n                fom: values.fom!,\n                tom: values.tom!,\n            },\n        };\n\n        return periode;\n    }\n    const samtidigWLBUttakFørFødselFarMedmor = erSamtidigUttakFarMedmorFørFødselWLB(\n        values,\n        familiehendelsesdato,\n        erFarEllerMedmor,\n        erDeltUttak,\n        situasjon,\n    );\n    const samtidigWLBUttakFørFørsteSeksUkerFarMedmor = erSamtidigUttakFarMedmorFørFørsteSeksUkerWLB(\n        values,\n        familiehendelsesdato,\n        erFarEllerMedmor,\n        erDeltUttak,\n        situasjon,\n    );\n    const attachmentType = hasValue(values.aktivitetskravMor)\n        ? AttachmentType.MORS_AKTIVITET_DOKUMENTASJON\n        : AttachmentType.UTSETTELSE_SYKDOM;\n\n    const skjemanummer = hasValue(values.aktivitetskravMor)\n        ? getMorsAktivitetSkjemanummer(values.aktivitetskravMor as MorsAktivitet)\n        : Skjemanummer.DOK_MORS_UTDANNING_ARBEID_SYKDOM;\n\n    const relevantVedlegg = velgVedleggSomSkalBrukes(\n        values.aktivitetskravMorDokumentasjon!,\n        values.erMorForSykDokumentasjon!,\n    );\n\n    const morErForSyk =\n        hasValue(values.uttakRundtFødselÅrsak) && values.uttakRundtFødselÅrsak === UttakRundtFødselÅrsak.morErForSyk\n            ? true\n            : convertYesOrNoOrUndefinedToBoolean(values.erMorForSyk);\n\n    const erSamtidigUttak =\n        values.uttakRundtFødselÅrsak === UttakRundtFødselÅrsak.samtidigUttak || samtidigWLBUttakFørFødselFarMedmor\n            ? true\n            : convertYesOrNoOrUndefinedToBoolean(values.samtidigUttak);\n\n    const samtidigUttakProsentInputVerdi = hasValue(values.samtidigUttakProsent)\n        ? trimNumberValue(values.samtidigUttakProsent!)\n        : undefined;\n\n    const samtidigUttakProsentVerdi =\n        values.uttakRundtFødselÅrsak === UttakRundtFødselÅrsak.samtidigUttak || samtidigWLBUttakFørFødselFarMedmor\n            ? getSamtidigUttaksProsentWLB(\n                  convertYesOrNoOrUndefinedToBoolean(values.skalHaGradering),\n                  values.stillingsprosent,\n              )\n            : samtidigUttakProsentInputVerdi;\n\n    const forelderVerdi = samtidigWLBUttakFørFørsteSeksUkerFarMedmor\n        ? Forelder.farMedmor\n        : (values.hvemSkalTaUttak as Forelder);\n\n    const kontoVerdi = getKontoVerdi(\n        samtidigWLBUttakFørFødselFarMedmor,\n        erFarEllerMedmor,\n        erDeltUttak,\n        values.fom!,\n        values.konto as StønadskontoType,\n        familiehendelsesdato,\n    );\n\n    const periode: Uttaksperiode = {\n        id,\n        forelder: forelderVerdi,\n        konto: kontoVerdi,\n        tidsperiode: {\n            fom: values.fom!,\n            tom: values.tom!,\n        },\n        type: Periodetype.Uttak,\n        arbeidsformer: hasValue(values.arbeidsformer)\n            ? getArbeidsform([values.arbeidsformer as Arbeidsform])\n            : undefined,\n        morsAktivitetIPerioden: getMorsAktivitet(\n            values.aktivitetskravMor,\n            convertYesOrNoOrUndefinedToBoolean(values.erMorForSyk),\n        ),\n\n        erArbeidstaker: getErArbeidstaker(\n            hasValue(values.arbeidsformer) ? getArbeidsform([values.arbeidsformer as Arbeidsform]) : [],\n        ),\n        erMorForSyk: morErForSyk,\n        gradert: convertYesOrNoOrUndefinedToBoolean(values.skalHaGradering),\n        harIkkeAktivitetskrav: values.konto === StønadskontoType.AktivitetsfriKvote ? true : undefined,\n        orgnumre: getOrgnummer(hasValue(values.arbeidsformer) ? [values.arbeidsformer as Arbeidsform] : []),\n        stillingsprosent: hasValue(values.stillingsprosent) ? trimNumberValue(values.stillingsprosent!) : undefined,\n        ønskerFlerbarnsdager: convertYesOrNoOrUndefinedToBoolean(values.ønskerFlerbarnsdager),\n        ønskerSamtidigUttak: erSamtidigUttak,\n        samtidigUttakProsent: samtidigUttakProsentVerdi,\n        vedlegg: skalVedleggPåkreves(\n            values.aktivitetskravMor,\n            convertYesOrNoOrUndefinedToBoolean(values.erMorForSyk) || false,\n            values.uttakRundtFødselÅrsak,\n        )\n            ? lagSendSenereDokumentNårIngenAndreFinnes(relevantVedlegg, attachmentType, skjemanummer)\n            : [],\n    };\n\n    return periode;\n};\n","import { IntlShape, useIntl } from 'react-intl';\nimport { formatDate, Block, intlUtils, TidsperiodeDate, bemUtils } from '@navikt/fp-common';\nimport { BodyShort, Label, Link } from '@navikt/ds-react';\n\nimport './tidsperiodeDisplay.less';\n\ninterface Props {\n    tidsperiode: Partial<TidsperiodeDate> | undefined;\n    toggleVisTidsperiode: () => void;\n}\n\nconst bem = bemUtils('tidsperiodeDisplay');\n\nconst formaterTidsperiodeDato = (dato: Date | undefined) => {\n    if (dato) {\n        return formatDate(dato);\n    }\n\n    return 'Ingen valgt dato';\n};\n\nconst renderTidsperiode = (tidsperiode: Partial<TidsperiodeDate> | undefined, intl: IntlShape) => {\n    if (tidsperiode) {\n        return (\n            <div className={bem.element('dato-container')}>\n                <div className={bem.element('dato')}>\n                    <Label>{`${intlUtils(intl, 'fraogmed')}:`}</Label>\n                    <BodyShort>{formaterTidsperiodeDato(tidsperiode.fom)}</BodyShort>\n                </div>\n                <div className={bem.element('dato')}>\n                    <Label>{`${intlUtils(intl, 'tilogmed')}:`}</Label>\n                    <BodyShort>{formaterTidsperiodeDato(tidsperiode.tom)}</BodyShort>\n                </div>\n            </div>\n        );\n    }\n\n    return 'Ingen valgt tidsperiode';\n};\n\nconst TidsperiodeDisplay: React.FunctionComponent<Props> = ({ tidsperiode, toggleVisTidsperiode }) => {\n    const intl = useIntl();\n\n    return (\n        <Block padBottom=\"l\">\n            <Label>Tidsrom</Label>\n            <div className={bem.block}>\n                {renderTidsperiode(tidsperiode, intl)}\n                <Link\n                    href=\"#\"\n                    onClick={(e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        toggleVisTidsperiode();\n                    }}\n                >\n                    <BodyShort>Endre tidsrom</BodyShort>\n                </Link>\n            </div>\n        </Block>\n    );\n};\n\nexport default TidsperiodeDisplay;\n","import { Component } from 'react';\n\ninterface RangeIconProps {\n    type: 'plus' | 'minus';\n}\n\nexport default class RangeIcon extends Component<RangeIconProps> {\n    renderPlusIcon() {\n        return (\n            <path\n                d=\"M18.2616283,12.5217391 L12.5222595,12.5217391 L12.5222595,18.2608696 C12.5222595,18.5488696 12.2874672,18.7826087 12.0004988,18.7826087 C11.7124868,18.7826087 11.478738,18.5488696 11.478738,18.2608696 L11.478738,12.5217391 L5.73936926,12.5217391 C5.4513573,12.5206957 5.21656494,12.288 5.21760846,12 C5.21760846,11.7130435 5.4513573,11.4782609 5.73936926,11.4782609 L11.478738,11.4782609 L11.478738,5.73913043 C11.478738,5.45113043 11.7124868,5.2173913 12.0004988,5.2173913 C12.2874672,5.2173913 12.5222595,5.45113043 12.5222595,5.73913043 L12.5222595,11.4782609 L18.2616283,11.4782609 C18.5485967,11.4782609 18.7844326,11.712 18.783389,12 C18.783389,12.288 18.5496402,12.5217391 18.2616283,12.5217391 Z\"\n                id=\"Inner\"\n                fill=\"#FFFFFF\"\n            />\n        );\n    }\n\n    renderMinusIcon() {\n        return (\n            <path\n                d=\"M18.2616283,12.5217391 L5.73936926,12.5217391 C5.4513573,12.5206957 5.21656494,12.288 5.21760846,12 C5.21760846,11.7130435 5.4513573,11.4782609 5.73936926,11.4782609 L18.2616283,11.4782609 C18.5485967,11.4782609 18.7844326,11.712 18.783389,12 C18.783389,12.288 18.5496402,12.5217391 18.2616283,12.5217391 Z\"\n                id=\"Inner\"\n                fill=\"#FFFFFF\"\n            />\n        );\n    }\n\n    render() {\n        const { type } = this.props;\n        const icon = type === 'minus' ? this.renderMinusIcon() : this.renderPlusIcon();\n\n        return (\n            <svg\n                focusable=\"false\"\n                role=\"img\"\n                aria-hidden=\"true\"\n                width=\"24px\"\n                height=\"24px\"\n                viewBox=\"0 0 24 24\"\n                className=\"rangeIcon\"\n            >\n                <g id=\"Icons/subtract/default\" stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\n                    {icon}\n                </g>\n            </svg>\n        );\n    }\n}\n","import { FunctionComponent, ReactNode, createElement } from 'react';\n\n/**\n *  Skjuler tekst slik at den ikke er synlig på skjerm, men leses av skjermleser\n */\nexport interface AriaTextProps {\n    id?: string;\n    children?: ReactNode;\n    tag?: string;\n}\n\nconst AriaText: FunctionComponent<AriaTextProps> = ({ id, children, tag }) => {\n    const tagName = tag || 'span';\n    return createElement(tagName, { id, className: 'sr-only' }, children);\n};\n\nexport default AriaText;\n","// Ensure touches occur rapidly\nconst delay = 500;\n// Sequential touches must be in close vicinity\nconst minZoomTouchDelta = 10;\n\n// Track state of the last touch\nlet lastTapAt = 0;\nlet lastClientX = 0;\nlet lastClientY = 0;\n\nexport default function preventDoubleTapZoom(event: React.TouchEvent<any>) {\n    // Exit early if this involves more than one finger (e.g. pinch to zoom)\n    if (event.touches.length > 1) {\n        return;\n    }\n\n    const tapAt = new Date().getTime();\n    const timeDiff = tapAt - lastTapAt;\n    const { clientX, clientY } = event.touches[0];\n    const xDiff = Math.abs(lastClientX - clientX);\n    const yDiff = Math.abs(lastClientY - clientY);\n    if (xDiff < minZoomTouchDelta && yDiff < minZoomTouchDelta && event.touches.length === 1 && timeDiff < delay) {\n        event.preventDefault();\n        // Trigger a fake click for the tap we just prevented\n        (event.target as any).click();\n    }\n    lastClientX = clientX;\n    lastClientY = clientY;\n    lastTapAt = tapAt;\n}\n","import classnames from 'classnames';\nimport AriaText from '../aria-text/AriaText';\nimport { guid } from '@navikt/fp-common';\n\nimport './sirkelknapp.less';\nimport preventDoubleTapZoom from '../../utils/preventDoubleTapZoom';\n\nexport type Stil = 'hvit' | 'bla' | 'info';\n\nexport interface SirkelknappProps {\n    /** Tekst som blir lest opp og satt som tittel på knappen */\n    ariaLabel: string;\n    /** Ikon som brukes inne i knappen */\n    ikon: React.ReactNode;\n    /** Funksjon som kalles knappen klikkes på */\n    onClick: () => void;\n    /** Om knappen er disabled eller ikke. Default false. */\n    disabled?: boolean;\n    /** Om knappen skal ha tilstanded pressed/valgt. Default false. */\n    toggle?: {\n        pressed: boolean;\n    };\n    /** Layout varianter */\n    stil?: Stil;\n    /** Størrelse - default normal */\n    size?: 'normal' | 'stor';\n    posisjoneringFraHøyre?: number;\n}\n\nconst Sirkelknapp: React.FunctionComponent<SirkelknappProps> = ({\n    onClick,\n    ariaLabel,\n    ikon,\n    toggle,\n    disabled,\n    stil = 'info',\n    size = 'normal',\n    posisjoneringFraHøyre,\n}) => {\n    const labelId = guid();\n    return (\n        <button\n            style={{ left: posisjoneringFraHøyre }}\n            type=\"button\"\n            onClick={() => onClick()}\n            onTouchStart={preventDoubleTapZoom}\n            aria-labelledby={labelId}\n            className={classnames(`sirkelknapp`, `sirkelknapp--${stil}`, `sirkelknapp--${size}`, {\n                'sirkelknapp--pressed': toggle && toggle.pressed,\n                'sirkelknapp--disabled': disabled,\n            })}\n            disabled={disabled}\n            aria-pressed={toggle ? toggle.pressed : undefined}\n        >\n            <span className=\"sirkelknapp__ikon\" role=\"presentation\">\n                {ikon}\n            </span>\n            <AriaText id={labelId}>{ariaLabel}</AriaText>\n        </button>\n    );\n};\n\nexport default Sirkelknapp;\n","import RangeIcon from '../../assets/RangeIcon';\nimport Sirkelknapp from '../sirkelknapp/Sirkelknapp';\n\nexport type Direction = 'next' | 'previous';\n\nexport interface Props {\n    onClick: () => void;\n    direction: Direction;\n    label: string;\n    disabled?: boolean;\n}\n\nconst StepperKnapp: React.FunctionComponent<Props> = ({ direction, onClick, label, disabled }) => (\n    <Sirkelknapp\n        stil=\"hvit\"\n        onClick={() => onClick()}\n        ariaLabel={label}\n        disabled={disabled}\n        ikon={direction === 'previous' ? <RangeIcon type=\"minus\" /> : <RangeIcon type=\"plus\" />}\n    />\n);\n\nexport default StepperKnapp;\n","import StepperKnapp from './StepperKnapp';\nimport { bemUtils } from '@navikt/fp-common';\n\nimport './numberStepper.less';\n\nexport interface Props {\n    value: number;\n    increaseAriaLabel: string;\n    decreaseAriaLabel: string;\n    stepSize?: number;\n    max?: number;\n    min?: number;\n    onChange: (value: number) => void;\n    legendId?: string;\n}\n\nconst bem = bemUtils('numberStepper');\n\nconst NumberStepper: React.FunctionComponent<Props> = ({\n    value,\n    min,\n    max,\n    stepSize = 1,\n    legendId,\n    onChange,\n    increaseAriaLabel,\n    decreaseAriaLabel,\n}) => {\n    const canDecrease = min === undefined || value > min;\n    const canIncrease = max === undefined || value < max;\n    return (\n        <div className={bem.block}>\n            <div className={bem.element('decrease')}>\n                <StepperKnapp\n                    direction=\"previous\"\n                    disabled={canDecrease === false}\n                    onClick={() => onChange(value - stepSize)}\n                    label={decreaseAriaLabel}\n                />\n            </div>\n            <div className={bem.element('input')}>\n                <input\n                    type=\"number\"\n                    value={value}\n                    onChange={(evt) => onChange(parseInt(evt.target.value, 10))}\n                    aria-labelledby={legendId}\n                />\n            </div>\n            <div className={bem.element('increase')}>\n                <StepperKnapp\n                    direction=\"next\"\n                    disabled={canIncrease === false}\n                    onClick={() => onChange(value + stepSize)}\n                    label={increaseAriaLabel}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default NumberStepper;\n","import { Label } from '@navikt/ds-react';\nimport { Block, Fieldset, bemUtils, guid } from '@navikt/fp-common';\nimport NumberStepper, { Props as NumberStepperProps } from './../number-stepper/NumberStepper';\n\nimport './ukerDagerTeller.less';\n\nexport interface Props {\n    ukeLegend: string;\n    dagLegend: string;\n    ukeStepper: NumberStepperProps;\n    dagStepper: NumberStepperProps;\n}\n\nconst UkerDagerTeller: React.FunctionComponent<Props> = ({ ukeStepper, dagStepper, ukeLegend, dagLegend }) => {\n    const bem = bemUtils('ukerDagerTeller');\n    const ukeLegendId = guid();\n    const dagLegendId = guid();\n    return (\n        <>\n            <legend>\n                <Label as=\"span\">Varighet på perioden</Label>\n            </legend>\n            <div className={bem.block}>\n                <div className={bem.element('ukerFelt')}>\n                    <Block padBottom=\"l\">\n                        <Fieldset legend={<span id={ukeLegendId}>{ukeLegend}</span>}>\n                            <NumberStepper {...ukeStepper} legendId={ukeLegendId} />\n                        </Fieldset>\n                    </Block>\n                </div>\n                <Fieldset legend={<span id={dagLegendId}>{dagLegend}</span>}>\n                    <NumberStepper {...dagStepper} legendId={dagLegendId} />\n                </Fieldset>\n            </div>\n        </>\n    );\n};\n\nexport default UkerDagerTeller;\n","import { useIntl } from 'react-intl';\nimport dayjs from 'dayjs';\nimport TidsperiodeForm, { TidsperiodeFormValues } from '../uttaks-forms/tidsperiode-form/TidsperiodeForm';\nimport {\n    Block,\n    getTidsperiode,\n    getUkerOgDagerFromDager,\n    intlUtils,\n    isForeldrepengerFørFødselUttaksperiode,\n    Periode,\n    Situasjon,\n    Tidsperiode,\n    TidsperiodeDate,\n    Tidsperioden,\n    Utsettelsesperiode,\n} from '@navikt/fp-common';\nimport UkerDagerTeller from './../uker-dager-teller/UkerDagerTeller';\nimport { Modal } from '@navikt/ds-react';\n\ninterface Props {\n    periode: Periode;\n    tidsperiode: TidsperiodeDate;\n    familiehendelsesdato: Date;\n    ugyldigeTidsperioder: Tidsperiode[] | undefined;\n    utsettelserIPlan: Utsettelsesperiode[];\n    visible: boolean;\n    onAvbryt: () => void;\n    onBekreft: (tidsperiode: TidsperiodeFormValues) => void;\n    changeTidsperiode: (tidsperiode: Partial<TidsperiodeDate>) => void;\n    erFarEllerMedmor: boolean;\n    morHarRett: boolean;\n    situasjon: Situasjon;\n    erFarMedmorOgHarAleneomsorg: boolean;\n    termindato?: Date;\n}\n\nconst UttakEndreTidsperiodeSpørsmål: React.FunctionComponent<Props> = ({\n    onBekreft,\n    onAvbryt,\n    changeTidsperiode,\n    visible,\n    periode,\n    tidsperiode,\n    familiehendelsesdato,\n    ugyldigeTidsperioder,\n    utsettelserIPlan,\n    termindato,\n    erFarEllerMedmor,\n    morHarRett,\n    situasjon,\n    erFarMedmorOgHarAleneomsorg,\n}) => {\n    const intl = useIntl();\n    const erForeldrepengerFørFødsel = isForeldrepengerFørFødselUttaksperiode(periode);\n    const initialMonth = erForeldrepengerFørFødsel ? familiehendelsesdato : undefined;\n    const varighetIDager = dayjs(tidsperiode.fom).isSameOrBefore(tidsperiode.tom, 'day')\n        ? Tidsperioden({\n              fom: tidsperiode.fom,\n              tom: tidsperiode.tom,\n          }).getAntallUttaksdager()\n        : undefined;\n    const { uker, dager } = varighetIDager ? getUkerOgDagerFromDager(Math.abs(varighetIDager)) : { uker: 0, dager: 0 };\n    const handleOnSubmit = (values: TidsperiodeFormValues) => {\n        onBekreft(values);\n    };\n\n    const getDagValue = (uker: number, dager: number): number => {\n        if (dager >= 5) {\n            return 0;\n        }\n\n        if (uker === 0 && dager === 0) {\n            return 1;\n        }\n\n        return dager;\n    };\n\n    return (\n        <>\n            <Modal open={visible} closeButton={true} onClose={onAvbryt} aria-label=\"Endre tidsperiode\">\n                <Modal.Content>\n                    <TidsperiodeForm\n                        familiehendelsesdato={familiehendelsesdato}\n                        onBekreft={handleOnSubmit}\n                        periode={periode}\n                        tidsperiode={tidsperiode}\n                        ugyldigeTidsperioder={ugyldigeTidsperioder}\n                        utsettelserIPlan={utsettelserIPlan}\n                        initialMonth={initialMonth}\n                        termindato={termindato}\n                        erFarEllerMedmor={erFarEllerMedmor}\n                        morHarRett={morHarRett}\n                        situasjon={situasjon}\n                        erFarMedmorOgHarAleneomsorg={erFarMedmorOgHarAleneomsorg}\n                    />\n                </Modal.Content>\n            </Modal>\n            <Block padBottom=\"m\">\n                <UkerDagerTeller\n                    ukeLegend={intlUtils(intl, 'uker.label')}\n                    dagLegend={intlUtils(intl, 'dager.label')}\n                    ukeStepper={{\n                        value: uker !== undefined ? uker : 0,\n                        min: 0,\n                        max: 100,\n                        onChange: (nyUker: number) => {\n                            const date = tidsperiode.fom;\n                            if (date) {\n                                changeTidsperiode({\n                                    fom: date,\n                                    tom: getTidsperiode(date, Math.min(nyUker, 200) * 5 + getDagValue(nyUker, dager))\n                                        .tom,\n                                });\n                            }\n                        },\n                        increaseAriaLabel: 'Øk antall uker med en uke',\n                        decreaseAriaLabel: 'Mink antall uker med en uke',\n                    }}\n                    dagStepper={{\n                        value: getDagValue(uker, dager),\n                        min: uker === 0 ? 1 : 0,\n                        max: 5,\n                        onChange: (nyDager: number) => {\n                            const date = tidsperiode.fom;\n                            const ekstraUke = nyDager === 5 ? 1 : 0;\n\n                            if (date) {\n                                changeTidsperiode({\n                                    fom: date,\n                                    tom: getTidsperiode(date, (uker + ekstraUke) * 5 + getDagValue(uker, nyDager)).tom,\n                                });\n                            }\n                        },\n                        increaseAriaLabel: 'Øk antall dager med en dag',\n                        decreaseAriaLabel: 'Mink antall dager med en dag',\n                    }}\n                />\n            </Block>\n        </>\n    );\n};\n\nexport default UttakEndreTidsperiodeSpørsmål;\n","import {\n    ActionLink,\n    andreAugust2022ReglerGjelder,\n    AnnenForelder,\n    Arbeidsforhold,\n    Attachment,\n    bemUtils,\n    Block,\n    Forelder,\n    formaterDatoKompakt,\n    getFørsteUttaksdag2UkerFørFødsel,\n    getIsValidStateForPerioder,\n    getSisteUttaksdag6UkerEtterFødsel,\n    getSlettPeriodeTekst,\n    getVelgbareStønadskontotyper,\n    guid,\n    intlUtils,\n    isAnnenForelderOppgitt,\n    ISOStringToDate,\n    isValidTidsperiode,\n    NavnPåForeldre,\n    Periode,\n    Periodetype,\n    PeriodeValidState,\n    Situasjon,\n    starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel,\n    StønadskontoType,\n    TidsperiodeDate,\n    TilgjengeligStønadskonto,\n    Utsettelsesperiode,\n} from '@navikt/fp-common';\nimport { Dispatch, FunctionComponent, SetStateAction, useEffect, useState } from 'react';\nimport ErMorForSykSpørsmål from '../spørsmål/er-mor-for-syk/ErMorForSykSpørsmål';\nimport FlerbarnsdagerSpørsmål from '../spørsmål/flerbarnsdager/FlerbarnsdagerSpørsmål';\nimport HvemSkalHaUttakSpørsmål from '../spørsmål/hvem-skal-ha-uttak/HvemSkalHaUttakSpørsmål';\nimport HvilkenKontoSpørsmål from '../spørsmål/hvilken-konto/HvilkenKontoSpørsmål';\nimport UttakRundtFødselÅrsakSpørsmål from '../spørsmål/uttak-rundt-fødsel-årsak/UttakRundtFødselÅrsakSpørsmål';\nimport OverføringsårsakSpørsmål from '../spørsmål/overføringsårsak/OverføringsårsakSpørsmål';\nimport SamtidigUttakSpørsmål from '../spørsmål/samtidig-uttak/SamtidigUttakSpørsmål';\nimport SkalHaGraderingSpørsmål from '../spørsmål/skal-ha-gradering/SkalHaGraderingSpørsmål';\nimport { SubmitListener } from '../submit-listener/SubmitListener';\nimport TidsperiodeForm from '../tidsperiode-form/TidsperiodeForm';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormData, PeriodeUttakFormField } from './periodeUttakFormConfig';\nimport {\n    periodeUttakFormQuestionsConfig,\n    PeriodeUttakFormQuestionsPayload,\n    skalViseWLBInfoOmSamtidigUttakRundtFødsel,\n} from './periodeUttakFormQuestionsConfig';\nimport {\n    cleanPeriodeUttakFormData,\n    getPeriodeUttakFormInitialValues,\n    mapPeriodeUttakFormToPeriode,\n} from './periodeUttakFormUtils';\nimport { FormattedMessage, IntlShape } from 'react-intl';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport AktivitetskravSpørsmål from '../spørsmål/aktivitetskrav/AktivitetskravSpørsmål';\nimport { Button, GuidePanel } from '@navikt/ds-react';\nimport TidsperiodeDisplay from '../../tidsperiode-display/TidsperiodeDisplay';\nimport UttakEndreTidsperiodeSpørsmål from '../../uttak-endre-tidsperiode-spørsmål/UttakEndreTidsperiodeSpørsmål';\n\nimport './periodeUttakForm.less';\n\ninterface Props {\n    periode: Periode;\n    erEndringssøknad: boolean;\n    familiehendelsesdato: Date;\n    stønadskontoer: TilgjengeligStønadskonto[];\n    navnPåForeldre: NavnPåForeldre;\n    annenForelder: AnnenForelder;\n    arbeidsforhold: Arbeidsforhold[];\n    erFarEllerMedmor: boolean;\n    erFlerbarnssøknad: boolean;\n    erAleneOmOmsorg: boolean;\n    erDeltUttak: boolean;\n    situasjon: Situasjon;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n    handleAddPeriode?: (nyPeriode: Periode, familiehendelsedato: Date) => void;\n    setNyPeriodeFormIsVisible?: Dispatch<SetStateAction<boolean>>;\n    toggleIsOpen?: (id: string) => void;\n    handleDeletePeriode?: (periodeId: string) => void;\n    isNyPeriode?: boolean;\n    erMorUfør: boolean;\n    setPerioderErGyldige: React.Dispatch<React.SetStateAction<PeriodeValidState[]>>;\n    termindato: Date | undefined;\n    morHarRett: boolean;\n    antallBarn: number;\n    utsettelserIPlan: Utsettelsesperiode[];\n    intl: IntlShape;\n    isOpen: boolean;\n    saveAttachment: (vedlegg: Attachment) => void;\n}\n\nconst periodenGjelderAnnenForelder = (erFarEllerMedmor: boolean, forelder: Forelder): boolean => {\n    return (erFarEllerMedmor && forelder === Forelder.farMedmor) || (!erFarEllerMedmor && forelder === Forelder.mor)\n        ? false\n        : true;\n};\n\nconst erUttakAvAnnenForeldersKvote = (konto: StønadskontoType | '', søkerErFarEllerMedmor: boolean): boolean => {\n    return (\n        (konto === StønadskontoType.Mødrekvote && søkerErFarEllerMedmor === true) ||\n        (konto === StønadskontoType.Fedrekvote && søkerErFarEllerMedmor === false)\n    );\n};\n\nconst getPeriodeType = (\n    periodenGjelder: Forelder | '',\n    erFarEllerMedmor: boolean,\n    konto: StønadskontoType | '',\n    familiehendelsedato: Date,\n    termindato: Date | undefined,\n    tidsperiode: TidsperiodeDate,\n): Periodetype => {\n    if (\n        erFarEllerMedmor &&\n        erUttakAvAnnenForeldersKvote(konto, erFarEllerMedmor) &&\n        starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel(tidsperiode, familiehendelsedato, termindato)\n    ) {\n        return Periodetype.Overføring;\n    }\n    if (periodenGjelder === '' || konto === '') {\n        return Periodetype.Uttak;\n    }\n\n    if (periodenGjelderAnnenForelder(erFarEllerMedmor, periodenGjelder)) {\n        return Periodetype.Opphold;\n    }\n\n    if (erUttakAvAnnenForeldersKvote(konto, erFarEllerMedmor)) {\n        return Periodetype.Overføring;\n    }\n\n    return Periodetype.Uttak;\n};\n\nconst PeriodeUttakForm: FunctionComponent<Props> = ({\n    familiehendelsesdato,\n    periode,\n    handleUpdatePeriode,\n    stønadskontoer,\n    navnPåForeldre,\n    annenForelder,\n    toggleIsOpen,\n    arbeidsforhold,\n    handleDeletePeriode,\n    setNyPeriodeFormIsVisible,\n    handleAddPeriode,\n    isNyPeriode = false,\n    erFarEllerMedmor,\n    erFlerbarnssøknad,\n    erAleneOmOmsorg,\n    erDeltUttak,\n    situasjon,\n    erMorUfør,\n    erEndringssøknad,\n    setPerioderErGyldige,\n    termindato,\n    morHarRett,\n    antallBarn,\n    utsettelserIPlan,\n    intl,\n    isOpen,\n    saveAttachment,\n}) => {\n    const [tidsperiodeIsOpen, setTidsperiodeIsOpen] = useState(false);\n    const [periodeIsValid, setPeriodeIsValid] = useState(true);\n    const bem = bemUtils('periodeUttakForm');\n    const toggleVisTidsperiode = () => {\n        setTidsperiodeIsOpen(!tidsperiodeIsOpen);\n    };\n    const forelder = erFarEllerMedmor ? Forelder.farMedmor : Forelder.mor;\n    const annenForelderHarRettIEØS =\n        isAnnenForelderOppgitt(annenForelder) && !!annenForelder.harRettPåForeldrepengerIEØS;\n\n    useEffect(() => {\n        setPerioderErGyldige((previousState: PeriodeValidState[]) => {\n            return getIsValidStateForPerioder(previousState, periode, periodeIsValid);\n        });\n    }, [periodeIsValid, periode, setPerioderErGyldige]);\n\n    const handleCleanup = (\n        values: PeriodeUttakFormData,\n        visibility: QuestionVisibility<PeriodeUttakFormField, undefined>,\n    ): PeriodeUttakFormData => {\n        return cleanPeriodeUttakFormData(\n            values,\n            visibility,\n            erDeltUttak,\n            forelder,\n            erMorUfør,\n            familiehendelsesdato,\n            erFarEllerMedmor,\n            annenForelderHarRettIEØS,\n        );\n    };\n    const erDeltUttakINorge = erDeltUttak && !annenForelderHarRettIEØS;\n    const velgbareStønadskontoer = getVelgbareStønadskontotyper(stønadskontoer);\n    const navnPåAnnenForelder =\n        isAnnenForelderOppgitt(annenForelder) && annenForelder.fornavn !== undefined && annenForelder.fornavn !== ''\n            ? annenForelder.fornavn\n            : intlUtils(intl, 'annen.forelder');\n\n    const startDatoPeriodeRundtFødselFarMedmor =\n        erFarEllerMedmor && andreAugust2022ReglerGjelder(familiehendelsesdato)\n            ? getFørsteUttaksdag2UkerFørFødsel(familiehendelsesdato, termindato)\n            : undefined;\n    const sluttDatoPeriodeRundtFødselFarMedmor =\n        erFarEllerMedmor && andreAugust2022ReglerGjelder(familiehendelsesdato)\n            ? getSisteUttaksdag6UkerEtterFødsel(familiehendelsesdato)\n            : undefined;\n\n    const erFarMedmorOgHarAleneomsorg = erFarEllerMedmor && erAleneOmOmsorg;\n\n    if (!isOpen) {\n        return null;\n    }\n\n    return (\n        <PeriodeUttakFormComponents.FormikWrapper\n            initialValues={getPeriodeUttakFormInitialValues(\n                periode,\n                erDeltUttak,\n                forelder,\n                erMorUfør,\n                familiehendelsesdato,\n                erFarEllerMedmor,\n                annenForelderHarRettIEØS,\n            )}\n            enableReinitialize={false}\n            onSubmit={(values: Partial<PeriodeUttakFormData>) => {\n                if (isNyPeriode) {\n                    const periodetype = getPeriodeType(\n                        values.hvemSkalTaUttak!,\n                        erFarEllerMedmor,\n                        values.konto!,\n                        familiehendelsesdato,\n                        termindato,\n                        { fom: values.fom, tom: values.tom } as TidsperiodeDate,\n                    );\n                    setNyPeriodeFormIsVisible!(false);\n                    handleAddPeriode!(\n                        mapPeriodeUttakFormToPeriode(\n                            values,\n                            guid(),\n                            periodetype,\n                            familiehendelsesdato,\n                            erFarEllerMedmor,\n                            erDeltUttak,\n                            situasjon,\n                        ),\n                        familiehendelsesdato,\n                    );\n                } else {\n                    return handleUpdatePeriode(\n                        mapPeriodeUttakFormToPeriode(\n                            values,\n                            periode.id,\n                            getPeriodeType(\n                                values.hvemSkalTaUttak!,\n                                erFarEllerMedmor,\n                                values.konto!,\n                                familiehendelsesdato,\n                                termindato,\n                                { fom: values.fom, tom: values.tom } as TidsperiodeDate,\n                            ),\n                            familiehendelsesdato,\n                            erFarEllerMedmor,\n                            erDeltUttak,\n                            situasjon,\n                        ),\n                        familiehendelsesdato,\n                    );\n                }\n            }}\n            renderForm={({ setFieldValue, values, isValid }) => {\n                const periodetype = getPeriodeType(\n                    values.hvemSkalTaUttak!,\n                    erFarEllerMedmor,\n                    values.konto!,\n                    familiehendelsesdato,\n                    termindato,\n                    { fom: values.fom, tom: values.tom } as TidsperiodeDate,\n                );\n                const søkerOppgirAnnenForeldersPeriode =\n                    (values.hvemSkalTaUttak === 'mor' && erFarEllerMedmor) ||\n                    (values.hvemSkalTaUttak === 'farMedmor' && !erFarEllerMedmor);\n\n                if (isValid !== periodeIsValid) {\n                    setPeriodeIsValid(isValid);\n                }\n                const visibility = periodeUttakFormQuestionsConfig.getVisbility({\n                    values,\n                    regelProps: {\n                        annenForelder,\n                        erAleneOmOmsorg,\n                        erDeltUttakINorge,\n                        erFarEllerMedmor,\n                        erFlerbarnssøknad,\n                        familiehendelsesdato,\n                        periodetype,\n                        situasjon,\n                        termindato,\n                        morHarRett,\n                        stønadskontoer,\n                        antallBarn,\n                    },\n                } as PeriodeUttakFormQuestionsPayload);\n\n                return (\n                    <>\n                        <Block visible={!isValidTidsperiode({ fom: values.fom!, tom: values.tom! })} padBottom=\"xl\">\n                            <TidsperiodeForm\n                                tidsperiode={{ fom: values.fom!, tom: values.tom! }}\n                                familiehendelsesdato={familiehendelsesdato}\n                                periode={periode}\n                                onBekreft={(values) => {\n                                    setFieldValue(PeriodeUttakFormField.fom, ISOStringToDate(values.fom));\n                                    setFieldValue(PeriodeUttakFormField.tom, ISOStringToDate(values.tom));\n                                }}\n                                ugyldigeTidsperioder={undefined}\n                                utsettelserIPlan={utsettelserIPlan}\n                                termindato={termindato}\n                                erFarEllerMedmor={erFarEllerMedmor}\n                                morHarRett={morHarRett}\n                                situasjon={situasjon}\n                                erFarMedmorOgHarAleneomsorg={erFarMedmorOgHarAleneomsorg}\n                            />\n                        </Block>\n                        <PeriodeUttakFormComponents.Form includeButtons={false}>\n                            {!isNyPeriode && (\n                                <SubmitListener\n                                    cleanup={() => handleCleanup(values as PeriodeUttakFormData, visibility)}\n                                />\n                            )}\n\n                            <Block visible={isValidTidsperiode({ fom: values.fom!, tom: values.tom! })} padBottom=\"xl\">\n                                <TidsperiodeDisplay\n                                    tidsperiode={{ fom: values.fom!, tom: values.tom! }}\n                                    toggleVisTidsperiode={toggleVisTidsperiode}\n                                />\n                                <UttakEndreTidsperiodeSpørsmål\n                                    periode={periode}\n                                    familiehendelsesdato={familiehendelsesdato}\n                                    ugyldigeTidsperioder={undefined}\n                                    utsettelserIPlan={utsettelserIPlan}\n                                    onBekreft={(values) => {\n                                        toggleVisTidsperiode();\n                                        setFieldValue(PeriodeUttakFormField.fom, ISOStringToDate(values.fom));\n                                        setFieldValue(PeriodeUttakFormField.tom, ISOStringToDate(values.tom));\n                                    }}\n                                    changeTidsperiode={(values) => {\n                                        setTimeout(() => {\n                                            setFieldValue(PeriodeUttakFormField.fom, values.fom);\n                                            setFieldValue(PeriodeUttakFormField.tom, values.tom);\n                                        }, 0);\n                                    }}\n                                    tidsperiode={{ fom: values.fom!, tom: values.tom! }}\n                                    onAvbryt={() => toggleVisTidsperiode()}\n                                    visible={tidsperiodeIsOpen}\n                                    termindato={termindato}\n                                    erFarEllerMedmor={erFarEllerMedmor}\n                                    morHarRett={morHarRett}\n                                    situasjon={situasjon}\n                                    erFarMedmorOgHarAleneomsorg={erFarMedmorOgHarAleneomsorg}\n                                />\n                            </Block>\n                            <Block padBottom=\"xl\" visible={visibility.isVisible(PeriodeUttakFormField.hvemSkalTaUttak)}>\n                                <HvemSkalHaUttakSpørsmål\n                                    fieldName={PeriodeUttakFormField.hvemSkalTaUttak}\n                                    erFarEllerMedmor={false}\n                                    navnPåForeldre={navnPåForeldre}\n                                />\n                            </Block>\n                            <Block padBottom=\"xl\" visible={visibility.isVisible(PeriodeUttakFormField.konto)}>\n                                <HvilkenKontoSpørsmål\n                                    fieldName={PeriodeUttakFormField.konto}\n                                    velgbareStønadskontoer={velgbareStønadskontoer}\n                                    erOppholdsperiode={søkerOppgirAnnenForeldersPeriode}\n                                    navnPåForeldre={navnPåForeldre}\n                                    erFarEllerMedmor={erFarEllerMedmor}\n                                    erAleneOmOmsorg={erAleneOmOmsorg}\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"xl\"\n                                visible={visibility.isVisible(PeriodeUttakFormField.overføringsårsak)}\n                            >\n                                <OverføringsårsakSpørsmål\n                                    vedlegg={values.overføringsdokumentasjon!}\n                                    navnAnnenForelder={navnPåAnnenForelder}\n                                    erEndringssøknad={erEndringssøknad}\n                                    valgtOverføringsårsak={values.overføringsårsak!}\n                                    isOpen={isOpen}\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"xl\"\n                                visible={visibility.isVisible(PeriodeUttakFormField.uttakRundtFødselÅrsak)}\n                            >\n                                <UttakRundtFødselÅrsakSpørsmål\n                                    fieldName={PeriodeUttakFormField.uttakRundtFødselÅrsak}\n                                    uttakRundtFødselÅrsak={values.uttakRundtFødselÅrsak!}\n                                    navnMor={navnPåForeldre.mor}\n                                    vedlegg={values.erMorForSykDokumentasjon!}\n                                    isOpen={isOpen}\n                                />\n                            </Block>\n                            {startDatoPeriodeRundtFødselFarMedmor !== undefined &&\n                                sluttDatoPeriodeRundtFødselFarMedmor !== undefined && (\n                                    <Block\n                                        padBottom=\"xl\"\n                                        visible={skalViseWLBInfoOmSamtidigUttakRundtFødsel(\n                                            values as PeriodeUttakFormData,\n                                            familiehendelsesdato,\n                                            erFarEllerMedmor,\n                                            erDeltUttak,\n                                            situasjon,\n                                        )}\n                                    >\n                                        <GuidePanel>\n                                            <FormattedMessage\n                                                id=\"uttaksplan.samtidigUttakVeileder\"\n                                                values={{\n                                                    fomDato: formaterDatoKompakt(startDatoPeriodeRundtFødselFarMedmor),\n                                                    tomDato: formaterDatoKompakt(sluttDatoPeriodeRundtFødselFarMedmor),\n                                                }}\n                                            />\n                                        </GuidePanel>\n                                    </Block>\n                                )}\n                            <Block\n                                padBottom=\"xl\"\n                                visible={visibility.isVisible(PeriodeUttakFormField.ønskerFlerbarnsdager)}\n                            >\n                                <FlerbarnsdagerSpørsmål fieldName={PeriodeUttakFormField.ønskerFlerbarnsdager} />\n                            </Block>\n                            <Block padBottom=\"xl\" visible={visibility.isVisible(PeriodeUttakFormField.erMorForSyk)}>\n                                <ErMorForSykSpørsmål\n                                    fieldName={PeriodeUttakFormField.erMorForSyk}\n                                    erMorForSyk={values.erMorForSyk!}\n                                    navnMor={navnPåForeldre.mor}\n                                    vedlegg={values.erMorForSykDokumentasjon!}\n                                    isOpen={isOpen}\n                                />\n                            </Block>\n                            <Block padBottom=\"xl\" visible={visibility.isVisible(PeriodeUttakFormField.samtidigUttak)}>\n                                <SamtidigUttakSpørsmål\n                                    erFlerbarnssøknad={erFlerbarnssøknad}\n                                    navnPåForeldre={navnPåForeldre}\n                                    navnPåAnnenForelder={navnPåAnnenForelder}\n                                    samtidigUttakProsentVisible={visibility.isVisible(\n                                        PeriodeUttakFormField.samtidigUttakProsent,\n                                    )}\n                                    familiehendelsesdato={familiehendelsesdato}\n                                    situasjon={situasjon}\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"xl\"\n                                visible={visibility.isVisible(PeriodeUttakFormField.aktivitetskravMor)}\n                            >\n                                <AktivitetskravSpørsmål\n                                    fieldName={PeriodeUttakFormField.aktivitetskravMor}\n                                    navnPåForeldre={navnPåForeldre}\n                                    aktivitetskravMorValue={values.aktivitetskravMor!}\n                                    aktivitetskravVedlegg={values.aktivitetskravMorDokumentasjon!}\n                                    FormComponents={PeriodeUttakFormComponents}\n                                    vedleggFieldName={PeriodeUttakFormField.aktivitetskravMorDokumentasjon}\n                                    isOpen={isOpen}\n                                    saveAttachment={saveAttachment}\n                                />\n                            </Block>\n                            <Block padBottom=\"xl\" visible={visibility.isVisible(PeriodeUttakFormField.skalHaGradering)}>\n                                <SkalHaGraderingSpørsmål\n                                    graderingsprosentVisible={visibility.isVisible(\n                                        PeriodeUttakFormField.stillingsprosent,\n                                    )}\n                                    arbeidsforhold={arbeidsforhold}\n                                    tidsperiode={{ fom: values.fom!, tom: values.tom! }}\n                                />\n                            </Block>\n                            <Block\n                                visible={\n                                    !isNyPeriode && handleDeletePeriode !== undefined && toggleIsOpen !== undefined\n                                }\n                            >\n                                <div className={bem.element('knapperad-endre')}>\n                                    <Button type=\"button\" variant=\"secondary\" onClick={() => toggleIsOpen!(periode.id)}>\n                                        <FormattedMessage id=\"uttaksplan.lukk\" />\n                                    </Button>\n                                    <div className={bem.element('slettPeriodeWrapper')}>\n                                        <ActionLink\n                                            onClick={() => handleDeletePeriode!(periode.id)}\n                                            className={bem.element('slettPeriode')}\n                                        >\n                                            <FormattedMessage id={getSlettPeriodeTekst(periode.type)} />\n                                        </ActionLink>\n                                    </div>\n                                </div>\n                            </Block>\n                            <Block\n                                visible={\n                                    isNyPeriode &&\n                                    setNyPeriodeFormIsVisible !== undefined &&\n                                    handleAddPeriode !== undefined\n                                }\n                            >\n                                <div className={bem.element('knapperad-legg-til')}>\n                                    <Button\n                                        type=\"button\"\n                                        variant=\"secondary\"\n                                        onClick={() => setNyPeriodeFormIsVisible!(false)}\n                                    >\n                                        <FormattedMessage id=\"uttaksplan.avbryt\" />\n                                    </Button>\n                                    {visibility.areAllQuestionsAnswered() ? (\n                                        <Button type=\"submit\">\n                                            <FormattedMessage id=\"uttaksplan.leggTil\" />\n                                        </Button>\n                                    ) : null}\n                                </div>\n                            </Block>\n                        </PeriodeUttakFormComponents.Form>\n                    </>\n                );\n            }}\n        />\n    );\n};\n\nexport default PeriodeUttakForm;\n","import { Arbeidsform, Attachment, MorsAktivitet, UtsettelseÅrsakType } from '@navikt/fp-common';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\n\nexport enum PeriodeUtsettelseFormField {\n    fom = 'fom',\n    tom = 'tom',\n    årsak = 'årsak',\n    vedlegg = 'vedlegg',\n    morsAktivitetIPeriodenDokumentasjon = 'morsAktivitetIPeriodenDokumentasjon',\n    morsAktivitetIPerioden = 'morsAktivitetIPerioden',\n    bekrefterArbeidIPerioden = 'bekrefterArbeidIPerioden',\n}\n\nexport type ArbeidUnderUtsettelse = Arbeidsform | string;\n\nexport interface PeriodeUtsettelseFormData {\n    [PeriodeUtsettelseFormField.fom]: Date | undefined;\n    [PeriodeUtsettelseFormField.tom]: Date | undefined;\n    [PeriodeUtsettelseFormField.årsak]: UtsettelseÅrsakType | '';\n    [PeriodeUtsettelseFormField.morsAktivitetIPerioden]: MorsAktivitet | '';\n    [PeriodeUtsettelseFormField.morsAktivitetIPeriodenDokumentasjon]: Attachment[];\n    [PeriodeUtsettelseFormField.vedlegg]: Attachment[];\n    [PeriodeUtsettelseFormField.bekrefterArbeidIPerioden]: boolean | undefined;\n}\n\nexport const PeriodeUtsettelseFormComponents = getTypedFormComponents<\n    PeriodeUtsettelseFormField,\n    PeriodeUtsettelseFormData\n>();\n","import { PeriodeUtsettelseFormData, PeriodeUtsettelseFormField } from './periodeUtsettelseFormConfig';\nimport {\n    Attachment,\n    AttachmentType,\n    Forelder,\n    Periode,\n    Periodetype,\n    UtsettelseÅrsakType,\n    isUtsettelsePgaArbeid,\n    isUtsettelsesperiode,\n} from '@navikt/fp-common';\n\nexport const initialValues: PeriodeUtsettelseFormData = {\n    [PeriodeUtsettelseFormField.fom]: undefined,\n    [PeriodeUtsettelseFormField.tom]: undefined,\n    [PeriodeUtsettelseFormField.årsak]: '',\n    [PeriodeUtsettelseFormField.morsAktivitetIPerioden]: '',\n    [PeriodeUtsettelseFormField.morsAktivitetIPeriodenDokumentasjon]: [],\n    [PeriodeUtsettelseFormField.vedlegg]: [],\n    [PeriodeUtsettelseFormField.bekrefterArbeidIPerioden]: undefined,\n};\n\nconst getFormStateFraVedlegg = (vedlegg: Attachment[], gjelderMorsAktivitet: boolean): Attachment[] => {\n    return gjelderMorsAktivitet\n        ? vedlegg.filter((v) => v.type === AttachmentType.MORS_AKTIVITET_DOKUMENTASJON)\n        : vedlegg.filter((v) => v.type !== AttachmentType.MORS_AKTIVITET_DOKUMENTASJON);\n};\n\nexport const getPeriodeUtsettelseFormInitialValues = (periode: Periode): PeriodeUtsettelseFormData => {\n    if (isUtsettelsesperiode(periode)) {\n        return {\n            ...initialValues,\n            fom: periode.tidsperiode.fom,\n            tom: periode.tidsperiode.tom,\n            årsak: periode.årsak,\n            morsAktivitetIPerioden: periode.morsAktivitetIPerioden ? periode.morsAktivitetIPerioden : '',\n            morsAktivitetIPeriodenDokumentasjon: getFormStateFraVedlegg(periode.vedlegg || [], true),\n            vedlegg: getFormStateFraVedlegg(periode.vedlegg || [], false),\n            bekrefterArbeidIPerioden: isUtsettelsePgaArbeid(periode) ? periode.bekrefterArbeidIPerioden : undefined,\n        };\n    }\n\n    return initialValues;\n};\n\nconst getVedleggFraFormState = (\n    morsAktivitetIPeriodenDokumentasjon: Attachment[],\n    vedlegg: Attachment[],\n): Attachment[] => {\n    return [...morsAktivitetIPeriodenDokumentasjon, ...vedlegg];\n};\n\nexport const mapPeriodeUtsettelseFormToPeriode = (\n    values: Partial<PeriodeUtsettelseFormData>,\n    id: string,\n    erFarEllerMedmor: boolean,\n): Periode => {\n    return {\n        id,\n        type: Periodetype.Utsettelse,\n        årsak: values.årsak as UtsettelseÅrsakType,\n        morsAktivitetIPerioden: values.morsAktivitetIPerioden ? values.morsAktivitetIPerioden : undefined,\n        forelder: erFarEllerMedmor ? Forelder.farMedmor : Forelder.mor,\n        tidsperiode: {\n            fom: values.fom!,\n            tom: values.tom!,\n        },\n        vedlegg: getVedleggFraFormState(values.morsAktivitetIPeriodenDokumentasjon || [], values.vedlegg || []),\n        bekrefterArbeidIPerioden: values.bekrefterArbeidIPerioden,\n        erArbeidstaker: !!values.bekrefterArbeidIPerioden,\n    };\n};\n\nexport const cleanupPeriodeUtsettelseFormData = (values: PeriodeUtsettelseFormData): PeriodeUtsettelseFormData => {\n    if (values.årsak !== UtsettelseÅrsakType.Arbeid) {\n        return {\n            ...values,\n            bekrefterArbeidIPerioden: undefined,\n        };\n    }\n    return values;\n};\n","import { hasValue, isValidTidsperiode, UtsettelseÅrsakType } from '@navikt/fp-common';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport { PeriodeUtsettelseFormData, PeriodeUtsettelseFormField } from './periodeUtsettelseFormConfig';\n\nexport interface PeriodeUtsettelseFormConfigPayload {\n    values: PeriodeUtsettelseFormData;\n    erFarEllerMedmor: boolean;\n    erAleneOmOmsorg: boolean;\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean;\n}\n\nconst PeriodeUtsettelseFormConfig: QuestionConfig<PeriodeUtsettelseFormConfigPayload, PeriodeUtsettelseFormField> = {\n    [PeriodeUtsettelseFormField.fom]: {\n        isAnswered: ({ values }) => hasValue(values.fom),\n        isIncluded: () => true,\n    },\n    [PeriodeUtsettelseFormField.tom]: {\n        isAnswered: ({ values }) => hasValue(values.tom),\n        isIncluded: () => true,\n    },\n    [PeriodeUtsettelseFormField.årsak]: {\n        isAnswered: ({ values }) => hasValue(values.årsak),\n        isIncluded: () => true,\n        visibilityFilter: ({ values }) => isValidTidsperiode({ fom: values.fom, tom: values.tom }),\n    },\n    [PeriodeUtsettelseFormField.bekrefterArbeidIPerioden]: {\n        isAnswered: ({ values }) =>\n            values.årsak !== UtsettelseÅrsakType.Arbeid ||\n            (hasValue(values.bekrefterArbeidIPerioden) && values.bekrefterArbeidIPerioden !== undefined),\n        isIncluded: ({ values }) => hasValue(values.årsak) && values.årsak === UtsettelseÅrsakType.Arbeid,\n        visibilityFilter: ({ values }) => hasValue(values.årsak),\n    },\n    [PeriodeUtsettelseFormField.vedlegg]: {\n        isAnswered: () => true,\n        isIncluded: ({ values }) => hasValue(values.årsak),\n        visibilityFilter: ({ values }) => hasValue(values.årsak),\n    },\n    [PeriodeUtsettelseFormField.morsAktivitetIPerioden]: {\n        isAnswered: ({ values, søkerErFarEllerMedmorOgKunDeHarRett }) =>\n            hasValue(values.morsAktivitetIPerioden) || !søkerErFarEllerMedmorOgKunDeHarRett,\n        isIncluded: ({ søkerErFarEllerMedmorOgKunDeHarRett }) => søkerErFarEllerMedmorOgKunDeHarRett,\n        visibilityFilter: ({ values }) => hasValue(values.årsak),\n    },\n};\n\nexport const periodeUtsettelseFormQuestionsConfig = Questions<\n    PeriodeUtsettelseFormConfigPayload,\n    PeriodeUtsettelseFormField\n>(PeriodeUtsettelseFormConfig);\n","import { Attachment, AttachmentType, Block, intlUtils, Skjemanummer, UtsettelseÅrsakType } from '@navikt/fp-common';\nimport FormikFileUploader from 'app/components/formik-file-uploader/FormikFileUploader';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport {\n    PeriodeUtsettelseFormComponents,\n    PeriodeUtsettelseFormField,\n} from '../../periode-utsettelse-form/periodeUtsettelseFormConfig';\nimport { BodyShort, GuidePanel } from '@navikt/ds-react';\nimport { FormikRadioProp } from '@navikt/sif-common-formik-ds/lib/components/formik-radio-group/FormikRadioGroup';\n\ninterface Props {\n    periodenErKunHelligdager: boolean;\n    skalViseGamleUtsettelseÅrsaker: boolean;\n    erFarEllerMedmor: boolean;\n    tidsperiodenErInnenforFørsteSeksUker: boolean;\n    utsettelseårsak: UtsettelseÅrsakType | '';\n    vedlegg: Attachment[];\n    erMorUfør: boolean;\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean;\n    isOpen: boolean;\n}\n\nconst getUtsettelseÅrsakOptions = (\n    intl: IntlShape,\n    periodenErKunHelligdager: boolean,\n    skalViseGamleUtsettelseÅrsaker: boolean,\n    erFarEllerMedmor: boolean,\n    tidsperiodenErInnenforFørsteSeksUker: boolean,\n    erMorUfør: boolean,\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean,\n) => {\n    const allRadios: FormikRadioProp[] = [\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.jegskalhaferie'),\n            value: UtsettelseÅrsakType.Ferie,\n            disabled: periodenErKunHelligdager === true,\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.jegskaljobbeheltid'),\n            value: UtsettelseÅrsakType.Arbeid,\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.pgasykdom'),\n            value: UtsettelseÅrsakType.Sykdom,\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.institusjonBarn'),\n            value: UtsettelseÅrsakType.InstitusjonBarnet,\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.institusjonSøker'),\n            value: UtsettelseÅrsakType.InstitusjonSøker,\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.hv_øvelse'),\n            value: UtsettelseÅrsakType.HvØvelse,\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.navtiltak'),\n            value: UtsettelseÅrsakType.NavTiltak,\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.fri'),\n            value: UtsettelseÅrsakType.Fri,\n        },\n    ];\n\n    const defaultRadios = allRadios.filter((option) => {\n        if (skalViseGamleUtsettelseÅrsaker) {\n            if (option.value === UtsettelseÅrsakType.Fri) {\n                return false;\n            }\n\n            return true;\n        }\n\n        if (!skalViseGamleUtsettelseÅrsaker && !erFarEllerMedmor) {\n            if (tidsperiodenErInnenforFørsteSeksUker) {\n                return (\n                    option.value === UtsettelseÅrsakType.Sykdom ||\n                    option.value === UtsettelseÅrsakType.InstitusjonBarnet ||\n                    option.value === UtsettelseÅrsakType.InstitusjonSøker\n                );\n            }\n\n            return false;\n        }\n\n        if (!skalViseGamleUtsettelseÅrsaker && erFarEllerMedmor) {\n            if (!erMorUfør) {\n                if (option.value === UtsettelseÅrsakType.Fri && søkerErFarEllerMedmorOgKunDeHarRett) {\n                    return true;\n                }\n\n                return false;\n            }\n\n            if (tidsperiodenErInnenforFørsteSeksUker) {\n                return (\n                    option.value === UtsettelseÅrsakType.Sykdom ||\n                    option.value === UtsettelseÅrsakType.InstitusjonBarnet ||\n                    option.value === UtsettelseÅrsakType.InstitusjonSøker\n                );\n            }\n\n            return option.value === UtsettelseÅrsakType.Fri;\n        }\n\n        return option.value === UtsettelseÅrsakType.Sykdom || option.value === UtsettelseÅrsakType.Fri;\n    });\n\n    return defaultRadios;\n};\n\nconst getUtsettelseårsakSkjemanummer = (årsak: UtsettelseÅrsakType | '') => {\n    switch (årsak) {\n        case UtsettelseÅrsakType.Sykdom:\n            return Skjemanummer.DOK_OVERFØRING_FOR_SYK;\n        case UtsettelseÅrsakType.InstitusjonSøker:\n        case UtsettelseÅrsakType.InstitusjonBarnet:\n            return Skjemanummer.DOK_INNLEGGELSE;\n        case UtsettelseÅrsakType.HvØvelse:\n            return Skjemanummer.HV_ØVELSE;\n        case UtsettelseÅrsakType.NavTiltak:\n            return Skjemanummer.NAV_TILTAK;\n        default:\n            return Skjemanummer.ANNET;\n    }\n};\n\nconst showAttachmentUploader = (årsak: UtsettelseÅrsakType | ''): boolean => {\n    switch (årsak) {\n        case UtsettelseÅrsakType.Sykdom:\n        case UtsettelseÅrsakType.InstitusjonSøker:\n        case UtsettelseÅrsakType.InstitusjonBarnet:\n        case UtsettelseÅrsakType.HvØvelse:\n        case UtsettelseÅrsakType.NavTiltak:\n            return true;\n        default:\n            return false;\n    }\n};\n\nconst getAttachmentUploaderLabel = (årsak: UtsettelseÅrsakType | ''): string => {\n    switch (årsak) {\n        case UtsettelseÅrsakType.Sykdom:\n        case UtsettelseÅrsakType.InstitusjonSøker:\n        case UtsettelseÅrsakType.InstitusjonBarnet:\n            return 'Last opp dokumentasjon for sykdom';\n        case UtsettelseÅrsakType.HvØvelse:\n            return 'Last opp dokumentasjon for HV-øvelse';\n        case UtsettelseÅrsakType.NavTiltak:\n            return 'Last opp dokumentasjon for NAV tiltak';\n        default:\n            return '';\n    }\n};\n\nconst getAttachmentUploaderType = (årsak: UtsettelseÅrsakType | ''): AttachmentType => {\n    switch (årsak) {\n        case UtsettelseÅrsakType.Sykdom:\n        case UtsettelseÅrsakType.InstitusjonSøker:\n        case UtsettelseÅrsakType.InstitusjonBarnet:\n            return AttachmentType.UTSETTELSE_SYKDOM;\n        case UtsettelseÅrsakType.HvØvelse:\n            return AttachmentType.HV_ØVELSE;\n        case UtsettelseÅrsakType.NavTiltak:\n            return AttachmentType.NAV_TILTAK;\n        default:\n            return AttachmentType.UTSETTELSE_SYKDOM; // Should never happen\n    }\n};\n\nconst getVeilederTekst = (årsak: UtsettelseÅrsakType | ''): React.ReactElement => {\n    switch (årsak) {\n        case UtsettelseÅrsakType.Sykdom:\n        case UtsettelseÅrsakType.InstitusjonSøker:\n        case UtsettelseÅrsakType.InstitusjonBarnet:\n            return <FormattedMessage id=\"uttaksplan.veileder.sykdom\" />;\n        case UtsettelseÅrsakType.HvØvelse:\n            return <FormattedMessage id=\"uttaksplan.veileder.hvØvelse\" />;\n        case UtsettelseÅrsakType.NavTiltak:\n            return <FormattedMessage id=\"uttaksplan.veileder.navTiltak\" />;\n        default:\n            return <FormattedMessage id=\"uttaksplan.veileder.sykdom\" />; // Should never happen\n    }\n};\n\nconst UtsettelseÅrsakSpørsmål: FunctionComponent<Props> = ({\n    periodenErKunHelligdager,\n    skalViseGamleUtsettelseÅrsaker,\n    erFarEllerMedmor,\n    tidsperiodenErInnenforFørsteSeksUker,\n    utsettelseårsak,\n    vedlegg,\n    erMorUfør,\n    søkerErFarEllerMedmorOgKunDeHarRett,\n    isOpen,\n}) => {\n    const intl = useIntl();\n    const årsakOptions = getUtsettelseÅrsakOptions(\n        intl,\n        periodenErKunHelligdager,\n        skalViseGamleUtsettelseÅrsaker,\n        erFarEllerMedmor,\n        tidsperiodenErInnenforFørsteSeksUker,\n        erMorUfør,\n        søkerErFarEllerMedmorOgKunDeHarRett,\n    );\n\n    if (årsakOptions.length === 0) {\n        return (\n            <GuidePanel>\n                <Block padBottom=\"l\">\n                    <BodyShort>\n                        <b>\n                            <FormattedMessage id=\"uttaksplan.veileder.trengerIkkeUtsettelse.del1\" />\n                        </b>\n                    </BodyShort>\n                </Block>\n                <Block padBottom=\"l\">\n                    <BodyShort>\n                        <FormattedMessage id=\"uttaksplan.veileder.trengerIkkeUtsettelse.del2\" />\n                    </BodyShort>\n                </Block>\n                <Block padBottom=\"l\">\n                    <BodyShort>\n                        <FormattedMessage id=\"uttaksplan.veileder.trengerIkkeUtsettelse.del3\" />\n                    </BodyShort>\n                </Block>\n            </GuidePanel>\n        );\n    }\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <PeriodeUtsettelseFormComponents.RadioGroup\n                    legend=\"Velg årsak for utsettelse\"\n                    name={PeriodeUtsettelseFormField.årsak}\n                    radios={årsakOptions}\n                    validate={(value) => {\n                        if (value === '') {\n                            return 'Årsak må fylles ut';\n                        }\n                        return undefined;\n                    }}\n                />\n            </Block>\n            <Block padBottom=\"l\" visible={showAttachmentUploader(utsettelseårsak)}>\n                <GuidePanel>{getVeilederTekst(utsettelseårsak)}</GuidePanel>\n            </Block>\n            <Block padBottom=\"l\" visible={showAttachmentUploader(utsettelseårsak) && isOpen}>\n                <FormikFileUploader\n                    legend=\"Dokumentasjon for utsettelsesårsak\"\n                    label={getAttachmentUploaderLabel(utsettelseårsak)}\n                    name={PeriodeUtsettelseFormField.vedlegg}\n                    attachments={vedlegg || []}\n                    attachmentType={getAttachmentUploaderType(utsettelseårsak)}\n                    skjemanummer={getUtsettelseårsakSkjemanummer(utsettelseårsak)}\n                />\n            </Block>\n        </>\n    );\n};\n\nexport default UtsettelseÅrsakSpørsmål;\n","import {\n    getTidsperiode,\n    getUkerOgDagerFromDager,\n    intlUtils,\n    isForeldrepengerFørFødselUttaksperiode,\n    Periode,\n    Situasjon,\n    Tidsperiode,\n    TidsperiodeDate,\n    Tidsperioden,\n    Utsettelsesperiode,\n} from '@navikt/fp-common';\nimport UkerDagerTeller from './../uker-dager-teller/UkerDagerTeller';\nimport dayjs from 'dayjs';\n\nimport { useIntl } from 'react-intl';\nimport TidsperiodeForm, { TidsperiodeFormValues } from '../uttaks-forms/tidsperiode-form/TidsperiodeForm';\nimport { Modal } from '@navikt/ds-react';\n\ninterface Props {\n    periode: Periode;\n    tidsperiode: TidsperiodeDate;\n    familiehendelsesdato: Date;\n    ugyldigeTidsperioder: Tidsperiode[] | undefined;\n    utsettelserIPlan: Utsettelsesperiode[];\n    visible: boolean;\n    erFarEllerMedmor: boolean;\n    morHarRett: boolean;\n    situasjon: Situasjon;\n    erFarMedmorOgHarAleneomsorg: boolean;\n    onAvbryt: () => void;\n    onBekreft: (tidsperiode: TidsperiodeFormValues) => void;\n    changeTidsperiode: (tidsperiode: Partial<TidsperiodeDate>) => void;\n}\n\nconst UtsettelseEndreTidsperiodeSpørsmål: React.FunctionComponent<Props> = ({\n    onBekreft,\n    onAvbryt,\n    changeTidsperiode,\n    visible,\n    periode,\n    tidsperiode,\n    familiehendelsesdato,\n    ugyldigeTidsperioder,\n    utsettelserIPlan,\n    erFarEllerMedmor,\n    morHarRett,\n    situasjon,\n    erFarMedmorOgHarAleneomsorg,\n}) => {\n    const intl = useIntl();\n    const erForeldrepengerFørFødsel = isForeldrepengerFørFødselUttaksperiode(periode);\n    const initialMonth = erForeldrepengerFørFødsel ? familiehendelsesdato : undefined;\n    const varighetIDager =\n        tidsperiode &&\n        tidsperiode.fom &&\n        tidsperiode.tom &&\n        dayjs(tidsperiode.fom).isSameOrBefore(tidsperiode.tom, 'day')\n            ? Tidsperioden({\n                  fom: tidsperiode.fom,\n                  tom: tidsperiode.tom,\n              }).getAntallUttaksdager()\n            : undefined;\n    const { uker, dager } = varighetIDager ? getUkerOgDagerFromDager(Math.abs(varighetIDager)) : { uker: 0, dager: 0 };\n    const handleOnSubmit = (values: TidsperiodeFormValues) => {\n        onBekreft(values);\n    };\n\n    const getDagValue = (uker: number, dager: number): number => {\n        if (dager >= 5) {\n            return 0;\n        }\n\n        if (uker === 0 && dager === 0) {\n            return 1;\n        }\n\n        return dager;\n    };\n\n    return (\n        <>\n            <Modal open={visible} closeButton={true} onClose={onAvbryt} aria-label=\"Endre tidsperiode\">\n                <Modal.Content>\n                    <TidsperiodeForm\n                        familiehendelsesdato={familiehendelsesdato}\n                        onBekreft={handleOnSubmit}\n                        periode={periode}\n                        tidsperiode={tidsperiode}\n                        ugyldigeTidsperioder={ugyldigeTidsperioder}\n                        utsettelserIPlan={utsettelserIPlan}\n                        initialMonth={initialMonth}\n                        erFarEllerMedmor={erFarEllerMedmor}\n                        morHarRett={morHarRett}\n                        situasjon={situasjon}\n                        erFarMedmorOgHarAleneomsorg={erFarMedmorOgHarAleneomsorg}\n                    />\n                </Modal.Content>\n            </Modal>\n            <UkerDagerTeller\n                ukeLegend={intlUtils(intl, 'uker.label')}\n                dagLegend={intlUtils(intl, 'dager.label')}\n                ukeStepper={{\n                    value: uker !== undefined ? uker : 0,\n                    min: 0,\n                    max: 100,\n                    onChange: (nyUker: number) => {\n                        const date = tidsperiode.fom;\n                        if (date) {\n                            changeTidsperiode({\n                                fom: date,\n                                tom: getTidsperiode(date, Math.min(nyUker, 200) * 5 + getDagValue(nyUker, dager)).tom,\n                            });\n                        }\n                    },\n                    increaseAriaLabel: 'Øk antall uker med en uke',\n                    decreaseAriaLabel: 'Mink antall uker med en uke',\n                }}\n                dagStepper={{\n                    value: getDagValue(uker, dager),\n                    min: uker === 0 ? 1 : 0,\n                    max: 5,\n                    onChange: (nyDager: number) => {\n                        const date = tidsperiode.fom;\n                        const ekstraUke = nyDager === 5 ? 1 : 0;\n\n                        if (date) {\n                            changeTidsperiode({\n                                fom: date,\n                                tom: getTidsperiode(date, (uker + ekstraUke) * 5 + getDagValue(uker, nyDager)).tom,\n                            });\n                        }\n                    },\n                    increaseAriaLabel: 'Øk antall dager med en dag',\n                    decreaseAriaLabel: 'Mink antall dager med en dag',\n                }}\n            />\n        </>\n    );\n};\n\nexport default UtsettelseEndreTidsperiodeSpørsmål;\n","import {\n    bemUtils,\n    Block,\n    guid,\n    hasValue,\n    intlUtils,\n    ActionLink,\n    NavnPåForeldre,\n    Situasjon,\n    Arbeidsforhold,\n    Periode,\n    Utsettelsesperiode,\n    førsteOktober2021ReglerGjelder,\n    getIsValidStateForPerioder,\n    Tidsperioden,\n    isValidTidsperiode,\n    ISOStringToDate,\n    getSlettPeriodeTekst,\n    Attachment,\n    PeriodeValidState,\n} from '@navikt/fp-common';\nimport { Dispatch, FunctionComponent, useEffect, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { SubmitListener } from '../submit-listener/SubmitListener';\nimport TidsperiodeForm from '../tidsperiode-form/TidsperiodeForm';\nimport {\n    PeriodeUtsettelseFormComponents,\n    PeriodeUtsettelseFormData,\n    PeriodeUtsettelseFormField,\n} from './periodeUtsettelseFormConfig';\nimport {\n    cleanupPeriodeUtsettelseFormData,\n    getPeriodeUtsettelseFormInitialValues,\n    mapPeriodeUtsettelseFormToPeriode,\n} from './periodeUtsettelseFormUtils';\n\nimport {\n    PeriodeUtsettelseFormConfigPayload,\n    periodeUtsettelseFormQuestionsConfig,\n} from './periodeUtsettelseFormQuestionsConfig';\nimport UtsettelseÅrsakSpørsmål from '../spørsmål/utsettelse-årsak/UtsettelseÅrsakSpørsmål';\nimport AktivitetskravSpørsmål from '../spørsmål/aktivitetskrav/AktivitetskravSpørsmål';\nimport { Button } from '@navikt/ds-react';\nimport TidsperiodeDisplay from '../../tidsperiode-display/TidsperiodeDisplay';\nimport UtsettelseEndreTidsperiodeSpørsmål from '../../utsettelse-tidsperiode-spørsmål/UtsettelseTidsperiodeSpørsmål';\n\nimport './periodeUtsettelseForm.less';\n\ninterface Props {\n    periode: Periode;\n    familiehendelsesdato: Date;\n    erFarEllerMedmor: boolean;\n    erAleneOmOmsorg: boolean;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n    handleAddPeriode?: (nyPeriode: Periode, familiehendelsedato: Date) => void;\n    setNyPeriodeFormIsVisible?: Dispatch<React.SetStateAction<boolean>>;\n    toggleIsOpen?: (id: string) => void;\n    handleDeletePeriode?: (periodeId: string) => void;\n    isNyPeriode?: boolean;\n    navnPåForeldre: NavnPåForeldre;\n    erMorUfør: boolean;\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean;\n    arbeidsforhold: Arbeidsforhold[];\n    situasjon: Situasjon;\n    utsettelserIPlan: Utsettelsesperiode[];\n    setPerioderErGyldige: React.Dispatch<React.SetStateAction<PeriodeValidState[]>>;\n    isOpen: boolean;\n    saveAttachment: (vedlegg: Attachment) => void;\n}\n\nconst PeriodeUtsettelseForm: FunctionComponent<Props> = ({\n    periode,\n    familiehendelsesdato,\n    handleUpdatePeriode,\n    erFarEllerMedmor,\n    erAleneOmOmsorg,\n    handleAddPeriode,\n    handleDeletePeriode,\n    toggleIsOpen,\n    isNyPeriode = false,\n    setNyPeriodeFormIsVisible,\n    navnPåForeldre,\n    erMorUfør,\n    søkerErFarEllerMedmorOgKunDeHarRett,\n    situasjon,\n    utsettelserIPlan,\n    setPerioderErGyldige,\n    isOpen,\n    saveAttachment,\n}) => {\n    const intl = useIntl();\n    const [periodeIsValid, setPeriodeIsValid] = useState(true);\n    const { id } = periode;\n    const [tidsperiodeIsOpen, setTidsperiodeIsOpen] = useState(false);\n    const bem = bemUtils('periodeUtsettelseForm');\n    const skalViseGamleUtsettelseÅrsaker = førsteOktober2021ReglerGjelder(familiehendelsesdato) === false; // Utsettelseårsaker som gjelder for søknader sendt før 1. oktober 2021\n    const erFarMedmorOgHarAleneomsorg = erFarEllerMedmor && erAleneOmOmsorg;\n\n    const toggleVisTidsperiode = () => {\n        setTidsperiodeIsOpen(!tidsperiodeIsOpen);\n    };\n\n    useEffect(() => {\n        setPerioderErGyldige((previousState: PeriodeValidState[]) => {\n            return getIsValidStateForPerioder(previousState, periode, periodeIsValid);\n        });\n    }, [periodeIsValid, periode, setPerioderErGyldige]);\n\n    return (\n        <PeriodeUtsettelseFormComponents.FormikWrapper\n            initialValues={getPeriodeUtsettelseFormInitialValues(periode)}\n            onSubmit={(values) => {\n                if (!isNyPeriode) {\n                    handleUpdatePeriode(\n                        mapPeriodeUtsettelseFormToPeriode(values, id, erFarEllerMedmor),\n                        familiehendelsesdato,\n                    );\n                } else {\n                    setNyPeriodeFormIsVisible!(false);\n                    handleAddPeriode!(\n                        mapPeriodeUtsettelseFormToPeriode(values, guid(), erFarEllerMedmor),\n                        familiehendelsesdato,\n                    );\n                }\n            }}\n            renderForm={({ setFieldValue, values, isValid }) => {\n                const visibility = periodeUtsettelseFormQuestionsConfig.getVisbility({\n                    values,\n                    erFarEllerMedmor,\n                    erAleneOmOmsorg,\n                    søkerErFarEllerMedmorOgKunDeHarRett,\n                } as PeriodeUtsettelseFormConfigPayload);\n                if (isValid !== periodeIsValid) {\n                    setPeriodeIsValid(isValid);\n                }\n                const antallHelligdager = Tidsperioden({ fom: values.fom!, tom: values.tom! }).getAntallFridager();\n                const antallUttaksdager = Tidsperioden({ fom: values.fom!, tom: values.tom! }).getAntallUttaksdager();\n                const periodenErKunHelligdager = antallHelligdager === antallUttaksdager;\n                return (\n                    <>\n                        <Block visible={!isValidTidsperiode({ fom: values.fom!, tom: values.tom! })} padBottom=\"xl\">\n                            <TidsperiodeForm\n                                tidsperiode={{ fom: values.fom!, tom: values.tom! }}\n                                familiehendelsesdato={familiehendelsesdato}\n                                onBekreft={(values) => {\n                                    setFieldValue(PeriodeUtsettelseFormField.fom, ISOStringToDate(values.fom));\n                                    setFieldValue(PeriodeUtsettelseFormField.tom, ISOStringToDate(values.tom));\n                                }}\n                                ugyldigeTidsperioder={undefined}\n                                utsettelserIPlan={utsettelserIPlan}\n                                erFarEllerMedmor={erFarEllerMedmor}\n                                morHarRett={!søkerErFarEllerMedmorOgKunDeHarRett}\n                                situasjon={situasjon}\n                                erFarMedmorOgHarAleneomsorg={erFarMedmorOgHarAleneomsorg}\n                            />\n                        </Block>\n                        <PeriodeUtsettelseFormComponents.Form includeButtons={false}>\n                            {!isNyPeriode && (\n                                <SubmitListener\n                                    cleanup={() =>\n                                        cleanupPeriodeUtsettelseFormData(values as PeriodeUtsettelseFormData)\n                                    }\n                                />\n                            )}\n\n                            <Block visible={isValidTidsperiode({ fom: values.fom!, tom: values.tom! })} padBottom=\"xl\">\n                                <TidsperiodeDisplay\n                                    tidsperiode={{ fom: values.fom!, tom: values.tom! }}\n                                    toggleVisTidsperiode={toggleVisTidsperiode}\n                                />\n                                <UtsettelseEndreTidsperiodeSpørsmål\n                                    periode={periode}\n                                    familiehendelsesdato={familiehendelsesdato}\n                                    ugyldigeTidsperioder={undefined}\n                                    utsettelserIPlan={utsettelserIPlan}\n                                    onBekreft={(values) => {\n                                        toggleVisTidsperiode();\n                                        setFieldValue(PeriodeUtsettelseFormField.fom, ISOStringToDate(values.fom));\n                                        setFieldValue(PeriodeUtsettelseFormField.tom, ISOStringToDate(values.tom));\n                                    }}\n                                    changeTidsperiode={(values) => {\n                                        setTimeout(() => {\n                                            setFieldValue(PeriodeUtsettelseFormField.fom, values.fom);\n                                            setFieldValue(PeriodeUtsettelseFormField.tom, values.tom);\n                                        }, 0);\n                                    }}\n                                    tidsperiode={{ fom: values.fom!, tom: values.tom! }}\n                                    onAvbryt={() => toggleVisTidsperiode()}\n                                    visible={tidsperiodeIsOpen}\n                                    erFarEllerMedmor={erFarEllerMedmor}\n                                    morHarRett={!søkerErFarEllerMedmorOgKunDeHarRett}\n                                    situasjon={situasjon}\n                                    erFarMedmorOgHarAleneomsorg={erFarMedmorOgHarAleneomsorg}\n                                />\n                            </Block>\n                            <Block visible={visibility.isVisible(PeriodeUtsettelseFormField.årsak)} padBottom=\"xl\">\n                                <UtsettelseÅrsakSpørsmål\n                                    periodenErKunHelligdager={periodenErKunHelligdager}\n                                    skalViseGamleUtsettelseÅrsaker={skalViseGamleUtsettelseÅrsaker}\n                                    erFarEllerMedmor={erFarEllerMedmor}\n                                    tidsperiodenErInnenforFørsteSeksUker={Tidsperioden({\n                                        fom: values.fom!,\n                                        tom: values.tom!,\n                                    }).erInnenforFørsteSeksUker(familiehendelsesdato)}\n                                    utsettelseårsak={values.årsak!}\n                                    vedlegg={values.vedlegg!}\n                                    erMorUfør={erMorUfør}\n                                    søkerErFarEllerMedmorOgKunDeHarRett={søkerErFarEllerMedmorOgKunDeHarRett}\n                                    isOpen={isOpen}\n                                />\n                            </Block>\n                            <Block\n                                visible={visibility.isVisible(PeriodeUtsettelseFormField.bekrefterArbeidIPerioden)}\n                                padBottom=\"xl\"\n                            >\n                                <PeriodeUtsettelseFormComponents.Checkbox\n                                    name={PeriodeUtsettelseFormField.bekrefterArbeidIPerioden}\n                                    label={intlUtils(intl, 'uttaksplan.bekrefterArbeidIPerioden')}\n                                    validate={(value) => {\n                                        if (!hasValue(value) || value === undefined || value === false) {\n                                            return intlUtils(intl, 'uttaksplan.validering.bekrefterArbeidIPerioden');\n                                        }\n\n                                        return undefined;\n                                    }}\n                                />\n                            </Block>\n                            <Block\n                                visible={visibility.isVisible(PeriodeUtsettelseFormField.morsAktivitetIPerioden)}\n                                padBottom=\"xl\"\n                            >\n                                <AktivitetskravSpørsmål\n                                    aktivitetskravMorValue={values.morsAktivitetIPerioden!}\n                                    aktivitetskravVedlegg={values.morsAktivitetIPeriodenDokumentasjon!}\n                                    fieldName={PeriodeUtsettelseFormField.morsAktivitetIPerioden}\n                                    navnPåForeldre={navnPåForeldre}\n                                    FormComponents={PeriodeUtsettelseFormComponents}\n                                    vedleggFieldName={PeriodeUtsettelseFormField.morsAktivitetIPeriodenDokumentasjon}\n                                    isOpen={isOpen}\n                                    saveAttachment={saveAttachment}\n                                />\n                            </Block>\n                            <Block\n                                visible={\n                                    !isNyPeriode && handleDeletePeriode !== undefined && toggleIsOpen !== undefined\n                                }\n                            >\n                                <div style={{ textAlign: 'center', position: 'relative' }}>\n                                    <Button variant=\"secondary\" onClick={() => toggleIsOpen!(periode.id)}>\n                                        <FormattedMessage id=\"uttaksplan.lukk\" />\n                                    </Button>\n                                    <div className={bem.element('slettPeriodeWrapper')}>\n                                        <ActionLink\n                                            onClick={() => handleDeletePeriode!(periode.id)}\n                                            className={bem.element('slettPeriode')}\n                                        >\n                                            <FormattedMessage id={getSlettPeriodeTekst(periode.type)} />\n                                        </ActionLink>\n                                    </div>\n                                </div>\n                            </Block>\n                            <Block\n                                visible={\n                                    isNyPeriode &&\n                                    setNyPeriodeFormIsVisible !== undefined &&\n                                    handleAddPeriode !== undefined\n                                }\n                            >\n                                <div className={bem.element('knapperad')}>\n                                    <Button variant=\"secondary\" onClick={() => setNyPeriodeFormIsVisible!(false)}>\n                                        <FormattedMessage id=\"uttaksplan.avbryt\" />\n                                    </Button>\n                                    {visibility.areAllQuestionsAnswered() ? (\n                                        <Button type=\"submit\">\n                                            <FormattedMessage id=\"uttaksplan.leggTil\" />\n                                        </Button>\n                                    ) : null}\n                                </div>\n                            </Block>\n                        </PeriodeUtsettelseFormComponents.Form>\n                    </>\n                );\n            }}\n        />\n    );\n};\n\nexport default PeriodeUtsettelseForm;\n","import {\n    AnnenForelder,\n    Arbeidsforhold,\n    Attachment,\n    Block,\n    NavnPåForeldre,\n    Periode,\n    PeriodeValidState,\n    Periodetype,\n    Situasjon,\n    TilgjengeligStønadskonto,\n    Utsettelsesperiode,\n} from '@navikt/fp-common';\nimport { Dispatch, FunctionComponent, SetStateAction, useState } from 'react';\nimport PeriodeUttakForm from '../periode-uttak-form/PeriodeUttakForm';\nimport PeriodeUtsettelseForm from '../periode-utsettelse-form/PeriodeUtsettelseForm';\nimport { FormattedMessage, IntlShape } from 'react-intl';\nimport { Heading } from '@navikt/ds-react';\n\ninterface Props {\n    familiehendelsesdato: Date;\n    stønadskontoer: TilgjengeligStønadskonto[];\n    navnPåForeldre: NavnPåForeldre;\n    annenForelder: AnnenForelder;\n    setNyPeriodeFormIsVisible: Dispatch<SetStateAction<boolean>>;\n    arbeidsforhold: Arbeidsforhold[];\n    isUtsettelse: boolean;\n    handleAddPeriode: (nyPeriode: Periode, familiehendelsedato: Date) => void;\n    erFarEllerMedmor: boolean;\n    erFlerbarnssøknad: boolean;\n    erAleneOmOmsorg: boolean;\n    erDeltUttak: boolean;\n    situasjon: Situasjon;\n    erMorUfør: boolean;\n    setPerioderErGyldige: React.Dispatch<React.SetStateAction<PeriodeValidState[]>>;\n    nesteLedigeUttaksdato: Date | undefined;\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean;\n    erEndringssøknad: boolean;\n    termindato: Date | undefined;\n    antallBarn: number;\n    utsettelserIPlan: Utsettelsesperiode[];\n    intl: IntlShape;\n    saveAttachment: (vedlegg: Attachment) => void;\n}\n\nconst NyPeriode: FunctionComponent<Props> = ({\n    setNyPeriodeFormIsVisible,\n    isUtsettelse,\n    annenForelder,\n    arbeidsforhold,\n    navnPåForeldre,\n    stønadskontoer,\n    familiehendelsesdato,\n    handleAddPeriode,\n    erFarEllerMedmor,\n    erFlerbarnssøknad,\n    erAleneOmOmsorg,\n    erDeltUttak,\n    situasjon,\n    erMorUfør,\n    setPerioderErGyldige,\n    nesteLedigeUttaksdato,\n    søkerErFarEllerMedmorOgKunDeHarRett,\n    erEndringssøknad,\n    termindato,\n    antallBarn,\n    utsettelserIPlan,\n    intl,\n    saveAttachment,\n}) => {\n    const [periode, setPeriode] = useState<Periode>({\n        type: isUtsettelse ? Periodetype.Utsettelse : Periodetype.Uttak,\n        tidsperiode: { fom: isUtsettelse ? undefined : nesteLedigeUttaksdato },\n    } as Periode);\n\n    return !isUtsettelse ? (\n        <>\n            <Block padBottom=\"xl\">\n                <Heading size=\"small\">\n                    <FormattedMessage id=\"uttaksplan.nyPeriode.tittel\" />\n                </Heading>\n            </Block>\n            <PeriodeUttakForm\n                periode={periode}\n                handleUpdatePeriode={setPeriode}\n                handleAddPeriode={handleAddPeriode}\n                annenForelder={annenForelder}\n                arbeidsforhold={arbeidsforhold}\n                familiehendelsesdato={familiehendelsesdato}\n                navnPåForeldre={navnPåForeldre}\n                stønadskontoer={stønadskontoer}\n                setNyPeriodeFormIsVisible={setNyPeriodeFormIsVisible}\n                isNyPeriode={true}\n                erFarEllerMedmor={erFarEllerMedmor}\n                erFlerbarnssøknad={erFlerbarnssøknad}\n                erAleneOmOmsorg={erAleneOmOmsorg}\n                erDeltUttak={erDeltUttak}\n                situasjon={situasjon}\n                erMorUfør={erMorUfør}\n                setPerioderErGyldige={setPerioderErGyldige}\n                erEndringssøknad={erEndringssøknad}\n                termindato={termindato}\n                morHarRett={!søkerErFarEllerMedmorOgKunDeHarRett}\n                antallBarn={antallBarn}\n                utsettelserIPlan={utsettelserIPlan}\n                intl={intl}\n                isOpen={true}\n                saveAttachment={saveAttachment}\n            />\n        </>\n    ) : (\n        <PeriodeUtsettelseForm\n            periode={periode}\n            familiehendelsesdato={familiehendelsesdato}\n            handleUpdatePeriode={setPeriode}\n            erFarEllerMedmor={erFarEllerMedmor}\n            erAleneOmOmsorg={erAleneOmOmsorg}\n            handleAddPeriode={handleAddPeriode}\n            setNyPeriodeFormIsVisible={setNyPeriodeFormIsVisible}\n            isNyPeriode={true}\n            navnPåForeldre={navnPåForeldre}\n            erMorUfør={erMorUfør}\n            søkerErFarEllerMedmorOgKunDeHarRett={søkerErFarEllerMedmorOgKunDeHarRett}\n            arbeidsforhold={arbeidsforhold}\n            situasjon={situasjon}\n            utsettelserIPlan={utsettelserIPlan}\n            setPerioderErGyldige={setPerioderErGyldige}\n            isOpen={true}\n            saveAttachment={saveAttachment}\n        />\n    );\n};\n\nexport default NyPeriode;\n","import classnames from 'classnames';\nimport { bemUtils } from '@navikt/fp-common';\nimport { UttaksplanColor } from '../../types/UttaksplanColor';\n\nimport './iconBox.less';\n\nexport interface Props {\n    color: UttaksplanColor;\n    stripes?: boolean;\n    children?: React.ReactNode;\n}\n\nconst IconBox: React.FunctionComponent<Props> = ({ children, color, stripes }) => {\n    const bem = bemUtils('iconBox');\n\n    return (\n        <div className={classnames(bem.block, bem.modifier(`${color}${stripes ? '--striped' : ''}`))}>{children}</div>\n    );\n};\n\nexport default IconBox;\n","import { UttaksplanIkonProps } from '../components/uttaksplan-ikon/UttaksplanIkon';\n\nconst ArbeidIkon = (props: UttaksplanIkonProps) => {\n    const { title, ...rest } = props;\n    return (\n        <svg\n            focusable=\"false\"\n            role=\"img\"\n            aria-hidden=\"true\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            width={32}\n            height={32}\n            {...rest}\n        >\n            <title>{props.title}</title>\n            <defs>\n                <rect id=\"a\" width={32} height={32} rx={10} />\n            </defs>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <path\n                    fill=\"#FFF\"\n                    fillRule=\"nonzero\"\n                    d=\"M23.378 7.79l-.001-.002-1.666-1.665A.413.413 0 0 0 21.417 6H10.583a.417.417 0 0 0-.295.123L8.622 7.788l-.002.002a.463.463 0 0 0-.12.293v17.5c0 .23.187.417.417.417h5.416v-3.75c0-.23.187-.417.417-.417h2.5c.23 0 .417.187.417.417V26h5.416c.23 0 .417-.187.417-.417v-17.5a.46.46 0 0 0-.122-.293zM12.667 20.167h-2.5v-2.5h2.5v2.5zm0-4.167h-2.5v-2.5h2.5V16zm0-4.167h-2.5v-2.5h2.5v2.5zm5 8.334h-3.334v-2.5h3.334v2.5zm0-4.167h-3.334v-2.5h3.334V16zm0-4.167h-3.334v-2.5h3.334v2.5zm4.166 8.334h-2.5v-2.5h2.5v2.5zm0-4.167h-2.5v-2.5h2.5V16zm0-4.167h-2.5v-2.5h2.5v2.5zM9.923 7.667l.833-.834h10.488l.834.834H9.923z\"\n                />\n            </g>\n        </svg>\n    );\n};\n\nexport default ArbeidIkon;\n","import { UttaksplanIkonProps } from '../components/uttaksplan-ikon/UttaksplanIkon';\n\nconst FerieIkon = (props: UttaksplanIkonProps) => {\n    const { title, ...rest } = props;\n    return (\n        <svg\n            focusable=\"false\"\n            role=\"img\"\n            aria-hidden=\"true\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            width={32}\n            height={32}\n            {...rest}\n        >\n            <title>{props.title}</title>\n            <defs>\n                <rect id=\"a\" width={32} height={32} rx={10} />\n            </defs>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <g stroke=\"#FFF\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                    <path d=\"M25.583 19.737h-5c-2.042 0-3.85.657-4.991 1.667m4.991-1.654l-2.763-6.973m-2.149-5.423l-.307-.774\" />\n                    <path\n                        fill=\"#FFF\"\n                        d=\"M15.671 7.354c-4.065 1.61-6.704 4.571-5.517 7.566l.306.775 1.937-.769.468-1.081 1.082.468 7.747-3.07.467-1.082 1.082.467 1.937-.768-.307-.775c-1.188-2.995-5.138-3.342-9.202-1.731z\"\n                    />\n                    <path d=\"M25.583 24.75c-.833 0-1.666-.747-1.666-1.667 0 .92-.834 1.667-1.667 1.667-.833 0-1.667-.747-1.667-1.667 0 .92-.833 1.667-1.666 1.667-.834 0-1.667-.747-1.667-1.667 0 .92-.833 1.667-1.667 1.667-.833 0-1.666-.747-1.666-1.667 0 .92-.834 1.667-1.667 1.667-.833 0-1.667-.747-1.667-1.667 0 .92-.833 1.667-1.666 1.667-.834 0-1.667-.747-1.667-1.667 0 .575-.386 1.083-.833 1.383\" />\n                </g>\n            </g>\n        </svg>\n    );\n};\n\nexport default FerieIkon;\n","import { UttaksplanIkonProps } from '../components/uttaksplan-ikon/UttaksplanIkon';\n\nconst SykdomIkon = (props: UttaksplanIkonProps) => {\n    const { title, ...rest } = props;\n    return (\n        <svg\n            focusable=\"false\"\n            role=\"img\"\n            aria-hidden=\"true\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            width={32}\n            height={32}\n            {...rest}\n        >\n            <title>{props.title}</title>\n            <defs>\n                <rect id=\"a\" width={32} height={32} rx={10} />\n                <path\n                    id=\"c\"\n                    d=\"M8.294 1.518l10.19 10.19c1.823 1.822 1.785 4.82-.086 6.69s-4.867 1.91-6.69.086L1.518 8.294c-1.823-1.822-1.786-4.818.086-6.69 1.872-1.871 4.867-1.91 6.69-.086zm6.27 7.4l-3.473-3.476-5.648 5.647 3.475 3.476 5.646-5.648zM3.258 6.65a.472.472 0 0 0-.138.339.499.499 0 0 0 .49.489A.472.472 0 0 0 4.085 7a.497.497 0 0 0-.489-.489.472.472 0 0 0-.34.138zM4.96 4.963a.47.47 0 0 0-.137.34.498.498 0 0 0 .488.488.47.47 0 0 0 .476-.476.496.496 0 0 0-.488-.488.466.466 0 0 0-.34.136zm-2.005-.31a.468.468 0 0 0-.138.338.499.499 0 0 0 .49.49.47.47 0 0 0 .476-.478.497.497 0 0 0-.489-.489.468.468 0 0 0-.34.138zm1.694-1.694a.472.472 0 0 0-.138.34.496.496 0 0 0 .488.487.467.467 0 0 0 .477-.477.496.496 0 0 0-.488-.488.472.472 0 0 0-.34.138zm.622 4.009a.47.47 0 0 0-.136.34.496.496 0 0 0 .489.488.466.466 0 0 0 .476-.476.498.498 0 0 0-.488-.489.474.474 0 0 0-.341.137zm1.694-1.693a.472.472 0 0 0-.138.34.496.496 0 0 0 .488.487.467.467 0 0 0 .477-.477.495.495 0 0 0-.488-.487.472.472 0 0 0-.34.137zM6.654 3.27a.472.472 0 0 0-.138.339.5.5 0 0 0 .49.49.47.47 0 0 0 .477-.477.5.5 0 0 0-.49-.49.472.472 0 0 0-.34.138zm5.993 12.771a.468.468 0 0 0-.138.34.498.498 0 0 0 .49.488.47.47 0 0 0 .337-.139.47.47 0 0 0 .14-.337.499.499 0 0 0-.49-.49.468.468 0 0 0-.34.138zm1.694-1.696a.473.473 0 0 0-.137.339c.002.268.22.486.489.489a.466.466 0 0 0 .476-.476.499.499 0 0 0-.49-.49.476.476 0 0 0-.338.138zm.31 2.006a.472.472 0 0 0-.137.339.499.499 0 0 0 .49.489.472.472 0 0 0 .476-.477.497.497 0 0 0-.489-.489.472.472 0 0 0-.34.138zm1.696-1.693a.469.469 0 0 0-.137.338c.002.267.22.485.489.49a.469.469 0 0 0 .476-.477.499.499 0 0 0-.49-.489.472.472 0 0 0-.338.138zm-4.011-.623a.469.469 0 0 0-.137.338.497.497 0 0 0 .489.49.469.469 0 0 0 .476-.477.499.499 0 0 0-.489-.489.472.472 0 0 0-.34.138zm1.694-1.694a.472.472 0 0 0-.138.339.499.499 0 0 0 .489.489.472.472 0 0 0 .476-.476.495.495 0 0 0-.489-.49.469.469 0 0 0-.338.138zm2.005.31a.472.472 0 0 0-.137.34.499.499 0 0 0 .489.489.466.466 0 0 0 .475-.476.495.495 0 0 0-.489-.488.466.466 0 0 0-.338.136z\"\n                />\n            </defs>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <g transform=\"translate(6 6)\">\n                    <mask id=\"d\" fill=\"#fff\">\n                        <use xlinkHref=\"#c\" />\n                    </mask>\n                    <g fill=\"#FFF\" mask=\"url(#d)\">\n                        <path d=\"M0 20h20V0H0z\" />\n                    </g>\n                </g>\n            </g>\n        </svg>\n    );\n};\n\nexport default SykdomIkon;\n","import { UttaksplanIkonProps } from '../components/uttaksplan-ikon/UttaksplanIkon';\n\nconst TerminIkon = (props: UttaksplanIkonProps) => {\n    const { title, ...rest } = props;\n    return (\n        <svg focusable=\"false\" role=\"img\" aria-hidden=\"true\" width={24} height={24} viewBox=\"0 0 24 24\" {...rest}>\n            <title>{props.title}</title>\n            <path\n                fill=\"none\"\n                fillRule=\"evenodd\"\n                stroke=\"#3E3832\"\n                strokeLinejoin=\"round\"\n                d=\"M12 22.993s10.5-8.128 10.5-15.82-9.316-8.284-10.5-.59C10.816-1.112 1.5-.52 1.5 7.764S12 22.993 12 22.993z\"\n            />\n        </svg>\n    );\n};\n\nexport default TerminIkon;\n","import { UttaksplanIkonProps } from '../components/uttaksplan-ikon/UttaksplanIkon';\n\nconst UttakIkon = (props: UttaksplanIkonProps) => {\n    const { title, ...rest } = props;\n    return (\n        <svg\n            focusable=\"false\"\n            role=\"img\"\n            aria-hidden=\"true\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            width={32}\n            height={32}\n            {...rest}\n        >\n            <title>{props.title}</title>\n            <defs>\n                <rect id=\"a\" width={32} height={32} rx={10} />\n            </defs>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <g transform=\"translate(6 6)\">\n                    <circle cx={14.583} cy={17.083} r={1.083} stroke=\"#FFF\" strokeWidth={2} />\n                    <circle cx={7.083} cy={17.083} r={1.083} stroke=\"#FFF\" strokeWidth={2} />\n                    <path\n                        fill=\"#FFF\"\n                        d=\"M19.928 8.718c0 3.453-1.997 6.282-5.586 6.282H7.106c-2.586 0-4.682-2.21-4.682-4.936 0-.467.062-.918.176-1.346 3.038 0 14.084-.004 17.328 0zM13.886 2.5c3.734 0 6.042 2.836 6.042 5.385-1.835 0-4.85-.005-8.841-.005l2.8-5.38z\"\n                    />\n                    <path\n                        stroke=\"#FFF\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        d=\"M3.107 9.612c0-2.314-1.218-3.962-2.678-3.962\"\n                    />\n                </g>\n            </g>\n        </svg>\n    );\n};\n\nexport default UttakIkon;\n","import { SVGProps } from 'react';\nimport { XMarkOctagonFillIcon, ExclamationmarkTriangleFillIcon, InformationSquareIcon } from '@navikt/aksel-icons';\nimport ArbeidIkon from '../../assets/ArbeidIkon';\nimport FerieIkon from '../../assets/FerieIkon';\nimport SykdomIkon from '../../assets/SykdomIkon';\nimport TerminIkon from '../../assets/TerminIkon';\nimport UttakIkon from '../../assets/UttakIkon';\n\nexport interface UttaksplanIkonProps extends SVGProps<any> {\n    title: string;\n}\n\nexport enum UttaksplanIkonKeys {\n    'arbeid' = 'arbeid',\n    'ferie' = 'ferie',\n    'sykdom' = 'sykdom',\n    'termin' = 'termin',\n    'uttak' = 'uttak',\n    'info' = 'info',\n    'advarsel' = 'advarsel',\n    'feil' = 'feil',\n}\n\nexport interface Props {\n    ikon: UttaksplanIkonKeys;\n    title: string;\n}\n\nconst UttaksplanIkon: React.FunctionComponent<Props> = ({ ikon, title }) => {\n    switch (ikon) {\n        case 'arbeid':\n            return <ArbeidIkon title={title} />;\n        case 'ferie':\n            return <FerieIkon title={title} />;\n        case 'sykdom':\n            return <SykdomIkon title={title} />;\n        case 'termin':\n            return <TerminIkon title={title} />;\n        case 'info':\n            return <InformationSquareIcon />;\n        case 'advarsel':\n            return <ExclamationmarkTriangleFillIcon />;\n        case 'feil':\n            return <XMarkOctagonFillIcon />;\n        default:\n            return <UttakIkon title={title} />;\n    }\n};\n\nexport default UttaksplanIkon;\n","export enum UttaksplanColor {\n    'purple' = 'purple',\n    'blue' = 'blue',\n    'green' = 'green',\n    'purpleBlue' = 'purpleBlue',\n    'yellow' = 'yellow',\n    'white' = 'white',\n    'transparent' = 'transparent',\n    'infoBlue' = 'infoBlue',\n}\n","import { Forelder, Oppholdsperiode, Periode, Periodetype, StønadskontoType } from '@navikt/fp-common';\nimport { UttaksplanColor } from '../types/UttaksplanColor';\n\nexport const getForelderFarge = (forelder: Forelder) => {\n    return forelder === Forelder.mor ? UttaksplanColor.purple : UttaksplanColor.blue;\n};\n\nexport const getStønadskontoFarge = (\n    konto: StønadskontoType,\n    forelder: Forelder | undefined,\n    forIkon?: boolean,\n    harMidlertidigOmsorg?: boolean,\n): UttaksplanColor => {\n    if (forIkon && konto === StønadskontoType.Fellesperiode) {\n        return UttaksplanColor.purpleBlue;\n    }\n\n    if (harMidlertidigOmsorg) {\n        return UttaksplanColor.purple;\n    }\n\n    if (forelder === undefined) {\n        switch (konto) {\n            case StønadskontoType.Fedrekvote:\n            case StønadskontoType.AktivitetsfriKvote:\n                return UttaksplanColor.blue;\n            case StønadskontoType.Mødrekvote:\n            case StønadskontoType.Foreldrepenger:\n            case StønadskontoType.ForeldrepengerFørFødsel:\n                return UttaksplanColor.purple;\n            case StønadskontoType.Fellesperiode:\n                return UttaksplanColor.purpleBlue;\n            default:\n                return UttaksplanColor.transparent;\n        }\n    }\n    return getForelderFarge(forelder);\n};\n\nexport const getUtsettelseFarge = (): UttaksplanColor => {\n    return UttaksplanColor.green;\n};\n\nexport const getOppholdFarge = (periode: Oppholdsperiode): UttaksplanColor => {\n    return getForelderFarge(periode.forelder);\n};\n\nexport const getPeriodeFarge = (\n    periode: Periode,\n    forelder?: Forelder,\n    harMidlertidligOmsorg?: boolean,\n): UttaksplanColor | undefined => {\n    if (harMidlertidligOmsorg) {\n        return UttaksplanColor.purple;\n    }\n\n    if (periode.type === Periodetype.Uttak || periode.type === Periodetype.Overføring) {\n        return getStønadskontoFarge(periode.konto, periode.forelder || forelder);\n    }\n    if (periode.type === Periodetype.Utsettelse) {\n        return getUtsettelseFarge();\n    }\n    if (periode.type === Periodetype.Opphold) {\n        return getOppholdFarge(periode);\n    }\n    return undefined;\n};\n","import { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport IconBox from '../icon-box/IconBox';\nimport UttaksplanIkon, { UttaksplanIkonKeys } from '../uttaksplan-ikon/UttaksplanIkon';\nimport { Forelder, NavnPåForeldre, Situasjon, StønadskontoType, getStønadskontoNavn } from '@navikt/fp-common';\nimport { getStønadskontoFarge } from '../../utils/styleUtils';\n\nexport interface Props {\n    konto: StønadskontoType;\n    forelder?: Forelder;\n    gradert?: boolean;\n    navnPåForeldre: NavnPåForeldre;\n    erFarEllerMedmor?: boolean;\n    situasjon?: Situasjon;\n    erAleneOmOmsorg?: boolean;\n    harMidlertidigOmsorg?: boolean;\n}\n\nconst StønadskontoIkon: FunctionComponent<Props> = ({\n    konto,\n    forelder,\n    gradert,\n    navnPåForeldre,\n    harMidlertidigOmsorg,\n    erFarEllerMedmor,\n    erAleneOmOmsorg,\n}) => {\n    const intl = useIntl();\n\n    return (\n        <IconBox color={getStønadskontoFarge(konto, forelder, true, harMidlertidigOmsorg)} stripes={gradert}>\n            <UttaksplanIkon\n                ikon={UttaksplanIkonKeys.uttak}\n                title={getStønadskontoNavn(intl, konto, navnPåForeldre, erFarEllerMedmor, erAleneOmOmsorg)}\n            />\n        </IconBox>\n    );\n};\n\nexport default StønadskontoIkon;\n","import { intlUtils, UtsettelseÅrsakType } from '@navikt/fp-common';\n\nimport { useIntl } from 'react-intl';\nimport IconBox from '../icon-box/IconBox';\nimport UttaksplanIkon, { UttaksplanIkonKeys } from '../uttaksplan-ikon/UttaksplanIkon';\nimport { getUtsettelseFarge } from '../../utils/styleUtils';\n\nexport interface Props {\n    årsak: UtsettelseÅrsakType;\n    gradert?: boolean;\n}\n\nconst getIkonForKonto = (årsak: UtsettelseÅrsakType): UttaksplanIkonKeys => {\n    switch (årsak) {\n        case UtsettelseÅrsakType.Ferie:\n            return UttaksplanIkonKeys.ferie;\n        case UtsettelseÅrsakType.Arbeid:\n        case UtsettelseÅrsakType.HvØvelse:\n        case UtsettelseÅrsakType.NavTiltak:\n        case UtsettelseÅrsakType.Fri:\n            return UttaksplanIkonKeys.arbeid;\n        case UtsettelseÅrsakType.InstitusjonBarnet:\n        case UtsettelseÅrsakType.InstitusjonSøker:\n        case UtsettelseÅrsakType.Sykdom:\n            return UttaksplanIkonKeys.sykdom;\n    }\n};\n\nconst UtsettelseIkon: React.FunctionComponent<Props> = ({ årsak, gradert }) => {\n    const intl = useIntl();\n\n    return (\n        <IconBox color={getUtsettelseFarge()} stripes={gradert}>\n            <UttaksplanIkon\n                ikon={getIkonForKonto(årsak)}\n                title={intlUtils(intl, `uttaksplan.utsettelsesårsak.${årsak || 'ukjent'}`)}\n            />\n        </IconBox>\n    );\n};\n\nexport default UtsettelseIkon;\n","import { SVGProps } from 'react';\n\nexport interface OwnProps {\n    type?: 'advarsel' | 'feil';\n    title?: string;\n}\n\ntype Props = OwnProps & SVGProps<any>;\n\nconst UttaksplanAdvarselIkon = (props: Props) => {\n    const farge = props.type === 'feil' ? '#ba3a26' : '#ff9100';\n    const { title, ...rest } = props;\n\n    return (\n        <svg\n            focusable=\"false\"\n            role=\"img\"\n            aria-hidden=\"true\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            width={24}\n            height={24}\n            viewBox=\"0 0 24 24\"\n            {...rest}\n        >\n            <title>{props.title}</title>\n            <defs>\n                <path\n                    id=\"advarsel-a\"\n                    d=\"M23.892 22.23L12.462 1.243c-.178-.324-.758-.324-.934 0L.055 22.307a.445.445 0 0 0 .022.465c.094.14.264.228.446.228h22.955c.287 0 .522-.214.522-.479 0-.109-.04-.21-.108-.29zM11.474 8.784c0-.264.233-.479.521-.479.287 0 .522.215.522.48v7.326c0 .264-.235.479-.522.479-.288 0-.521-.215-.521-.479V8.784zm.521 11.447c-.551 0-.998-.41-.998-.915 0-.505.447-.916.998-.916.55 0 .997.411.997.916 0 .506-.447.915-.997.915z\"\n                />\n            </defs>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <mask id=\"advarsel-b\" fill=\"#fff\">\n                    <use xlinkHref=\"#advarsel-a\" />\n                </mask>\n                <g fill={farge} mask=\"url(#advarsel-b)\">\n                    <path d=\"M0 24h24V0H0z\" />\n                </g>\n            </g>\n        </svg>\n    );\n};\n\nexport default UttaksplanAdvarselIkon;\n","import { VeilederMessage } from '../types';\nimport { FormattedMessage } from 'react-intl';\nimport { bemUtils } from '@navikt/fp-common';\nimport { Alert, Label } from '@navikt/ds-react';\nimport { UttaksplanIkonKeys } from '../../../components/uttaksplan-ikon/UttaksplanIkon';\n\nimport './veilederMelding.less';\n\nexport type VeilederMeldingStil = 'transparent' | 'default';\n\ninterface VeilederpanelInnholdContentProps {\n    message: VeilederMessage;\n    stil?: VeilederMeldingStil;\n    skjulMeldingIkon?: boolean;\n}\n\ntype AlertType = 'error' | 'warning' | 'info' | 'success';\n\nconst getAlertStripeTypeFromMessageType = (message: VeilederMessage): AlertType => {\n    switch (message.type) {\n        case 'normal':\n        case 'info':\n            return 'info';\n        case 'advarsel':\n            return 'warning';\n        case 'feil':\n            return 'error';\n    }\n};\n\nexport const getIkonForVeilederMelding = (melding: VeilederMessage): UttaksplanIkonKeys => {\n    switch (melding.type) {\n        case 'feil':\n            return UttaksplanIkonKeys.feil;\n        case 'advarsel':\n            return UttaksplanIkonKeys.advarsel;\n        default:\n            return UttaksplanIkonKeys.info;\n    }\n};\n\nconst renderAlert = (message: VeilederMessage, skjulMeldingIkon: boolean, stil: VeilederMeldingStil) => {\n    const content = (\n        <>\n            {message.titleIntlKey !== undefined && (\n                <Label as=\"div\">\n                    <FormattedMessage id={message.titleIntlKey} />\n                </Label>\n            )}\n            <FormattedMessage id={message.contentIntlKey} values={message.values} />\n        </>\n    );\n    return skjulMeldingIkon ? (\n        <div>{content}</div>\n    ) : (\n        <Alert variant={getAlertStripeTypeFromMessageType(message)} inline={stil === 'transparent'}>\n            {content}\n        </Alert>\n    );\n};\n\nconst VeilederMelding: React.FunctionComponent<VeilederpanelInnholdContentProps> = ({\n    message,\n    stil = 'default',\n    skjulMeldingIkon = false,\n}) => {\n    const bem = bemUtils('veilederMelding');\n    return (\n        <div className={bem.classNames(bem.block, bem.modifier(stil))}>\n            {message.type !== 'normal' ? (\n                renderAlert(message, skjulMeldingIkon, stil)\n            ) : (\n                <div className=\"veilederMelding__padding\">\n                    <FormattedMessage id={message.contentIntlKey} values={message.values} />\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default VeilederMelding;\n","import {\n    Forelder,\n    NavnPåForeldre,\n    Periode,\n    Periodetype,\n    Situasjon,\n    StønadskontoType,\n    Tidsperioden,\n    bemUtils,\n    getUkerOgDagerFromDager,\n    getValidTidsperiode,\n    intlUtils,\n    isForeldrepengerFørFødselUttaksperiode,\n    isUtsettelseAnnenPart,\n    isUttakAnnenPart,\n    måned,\n    måned3bokstaver,\n    år,\n} from '@navikt/fp-common';\nimport classNames from 'classnames';\nimport dayjs from 'dayjs';\nimport { FunctionComponent } from 'react';\nimport StønadskontoIkon from '../stønadskonto-ikon/StønadskontoIkon';\nimport UtsettelseIkon from '../utsettelse-ikon/UtsettelseIkon';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport UttaksplanIkon from '../uttaksplan-ikon/UttaksplanIkon';\nimport { BodyShort, Label } from '@navikt/ds-react';\n\nimport './periodelisteItemHeader.less';\nimport { getForelderNavn, getPeriodeTittel } from '@navikt/fp-common/src/common/utils/periodeUtils';\nimport { VeilederMessage } from '../../validering/veilederInfo/types';\nimport UttaksplanAdvarselIkon from '../../assets/UttaksplanAdvarselIkon';\nimport { getIkonForVeilederMelding } from '../../validering/veilederInfo/components/VeilederMelding';\n\ninterface Props {\n    egenPeriode: boolean;\n    periode: Periode;\n    navnPåForeldre: NavnPåForeldre;\n    melding: VeilederMessage | undefined;\n    annenForelderSamtidigUttakPeriode?: Periode;\n    familiehendelsesdato: Date;\n    termindato: Date | undefined;\n    situasjon: Situasjon;\n    erFarEllerMedmor: boolean;\n    erAleneOmOmsorg: boolean;\n}\n\nconst bem = bemUtils('periodelisteItemHeader');\n\nexport const getPeriodeIkon = (\n    periode: Periode,\n    navnPåForeldre: NavnPåForeldre,\n    harMidlertidigOmsorg?: boolean,\n    erFarEllerMedmor?: boolean,\n    situasjon?: Situasjon,\n    erAleneOmOmsorg?: boolean,\n): React.ReactNode | undefined => {\n    switch (periode.type) {\n        case Periodetype.Uttak:\n            return (\n                <StønadskontoIkon\n                    konto={periode.konto}\n                    forelder={periode.forelder}\n                    gradert={periode.gradert}\n                    navnPåForeldre={navnPåForeldre}\n                    harMidlertidigOmsorg={harMidlertidigOmsorg}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    situasjon={situasjon}\n                    erAleneOmOmsorg={erAleneOmOmsorg}\n                />\n            );\n        case Periodetype.Overføring:\n            return (\n                <StønadskontoIkon konto={periode.konto} forelder={periode.forelder} navnPåForeldre={navnPåForeldre} />\n            );\n        case Periodetype.Utsettelse:\n            return <UtsettelseIkon årsak={periode.årsak} />;\n        case Periodetype.Opphold:\n            return (\n                <StønadskontoIkon\n                    konto={StønadskontoType.Foreldrepenger}\n                    forelder={periode.forelder}\n                    navnPåForeldre={navnPåForeldre}\n                />\n            );\n        case Periodetype.Info:\n            if (isUtsettelseAnnenPart(periode)) {\n                return <UtsettelseIkon årsak={periode.årsak} />;\n            } else {\n                return (\n                    <StønadskontoIkon\n                        konto={StønadskontoType.Foreldrepenger}\n                        forelder={periode.forelder}\n                        navnPåForeldre={navnPåForeldre}\n                    />\n                );\n            }\n        case Periodetype.Hull:\n            return <UttaksplanAdvarselIkon />;\n    }\n    return undefined;\n};\n\ntype VarighetFormat = 'full' | 'normal';\n\nexport const getVarighetString = (antallDager: number, intl: IntlShape, format: VarighetFormat = 'full'): string => {\n    const { uker, dager } = getUkerOgDagerFromDager(Math.abs(antallDager));\n    const dagerStr = intl.formatMessage(\n        { id: 'common.varighet.dager' },\n        {\n            dager,\n        },\n    );\n    if (uker === 0) {\n        return dagerStr;\n    }\n    const ukerStr = intl.formatMessage({ id: 'common.varighet.uker' }, { uker });\n    if (dager > 0) {\n        return `${ukerStr}${intl.formatMessage({\n            id: `common.varighet.separator--${format}`,\n        })}${dagerStr}`;\n    }\n    return ukerStr;\n};\n\nconst renderDagMnd = (dato: Date, visÅr = true): JSX.Element => {\n    const d = dayjs(dato);\n\n    return (\n        <div className={bem.element('dagmnd')}>\n            <span className={bem.element('dagmnd__dato')}>\n                <BodyShort>\n                    {d.get('date')}. {måned3bokstaver(d)}.\n                </BodyShort>\n            </span>\n            {visÅr && (\n                <BodyShort as=\"span\" className={bem.element('dagmnd__mnd')}>\n                    <abbr title={`${måned(d)} ${år(d)}`}>{år(d)}</abbr>\n                </BodyShort>\n            )}\n        </div>\n    );\n};\n\nconst PeriodelisteItemHeader: FunctionComponent<Props> = ({\n    periode,\n    navnPåForeldre,\n    melding,\n    annenForelderSamtidigUttakPeriode,\n    familiehendelsesdato,\n    termindato,\n    situasjon,\n    erFarEllerMedmor,\n    erAleneOmOmsorg,\n}) => {\n    const intl = useIntl();\n\n    let varighetString;\n    const erFpFørTerminUtenUttak =\n        isForeldrepengerFørFødselUttaksperiode(periode) && periode.skalIkkeHaUttakFørTermin === true;\n    if (erFpFørTerminUtenUttak) {\n        varighetString = intlUtils(intl, 'uttaksplan.periodeliste.header.skalIkkeHaUttakFørTermin');\n    } else {\n        varighetString = getVarighetString(Tidsperioden(periode.tidsperiode).getAntallUttaksdager(), intl);\n    }\n\n    let annenForelderIsMor;\n    let annenForelderNavn;\n    let beskrivelseSamtidigUttak;\n    if (annenForelderSamtidigUttakPeriode && isUttakAnnenPart(annenForelderSamtidigUttakPeriode)) {\n        annenForelderIsMor = annenForelderSamtidigUttakPeriode.forelder === Forelder.mor;\n        annenForelderNavn = getForelderNavn(annenForelderSamtidigUttakPeriode.forelder, navnPåForeldre);\n        beskrivelseSamtidigUttak = getVarighetString(\n            getValidTidsperiode(annenForelderSamtidigUttakPeriode.tidsperiode)\n                ? Tidsperioden(annenForelderSamtidigUttakPeriode.tidsperiode).getAntallUttaksdager()\n                : 0,\n            intl,\n        );\n    }\n\n    return (\n        <div>\n            <div className={bem.block}>\n                <div className={bem.element('content')}>\n                    <div className={bem.element('ikon')}>{getPeriodeIkon(periode, navnPåForeldre)}</div>\n                    <div className={bem.element('tittel')}>\n                        <Label as=\"h3\">\n                            {getPeriodeTittel(\n                                intl,\n                                periode,\n                                navnPåForeldre,\n                                familiehendelsesdato,\n                                termindato,\n                                situasjon,\n                                erFarEllerMedmor,\n                                erAleneOmOmsorg,\n                            )}\n                        </Label>\n                        <BodyShort>{varighetString}</BodyShort>\n                    </div>\n                    <div className={bem.element('advarsel')}>\n                        {melding && (\n                            <span\n                                role=\"presentation\"\n                                className={bem.modifier(`color-${getIkonForVeilederMelding(melding)}`)}\n                            >\n                                <UttaksplanIkon\n                                    ikon={getIkonForVeilederMelding(melding)}\n                                    title={melding.contentIntlKey}\n                                />\n                            </span>\n                        )}\n                    </div>\n                    {!erFpFørTerminUtenUttak && (\n                        <div className={bem.element('dato-container')}>\n                            {renderDagMnd(periode.tidsperiode.fom)}\n                            {renderDagMnd(periode.tidsperiode.tom)}\n                        </div>\n                    )}\n                </div>\n            </div>\n\n            {annenForelderSamtidigUttakPeriode && (\n                <div\n                    className={classNames(bem.element('samtidig-uttak'), {\n                        [bem.element('samtidig-uttak-mor')]: annenForelderIsMor,\n                        [bem.element('samtidig-uttak-far')]: !annenForelderIsMor,\n                    })}\n                >\n                    <div>\n                        <Label>\n                            <FormattedMessage id=\"oppsummering.morsAktivitet.SamtidigUttak\" />\n                        </Label>\n                    </div>\n                    <div className={bem.element('beskrivelse')}>\n                        <em className={bem.element('beskrivelse__tekst')}>\n                            {beskrivelseSamtidigUttak}\n                            <em className={bem.element('hvem')}> - {annenForelderNavn}</em>\n                        </em>\n                    </div>\n                    {annenForelderSamtidigUttakPeriode.tidsperiode && (\n                        <div className={bem.element('tidsrom')}>\n                            {renderDagMnd(annenForelderSamtidigUttakPeriode.tidsperiode.fom, false)}\n                            {renderDagMnd(annenForelderSamtidigUttakPeriode.tidsperiode.tom, false)}\n                        </div>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default PeriodelisteItemHeader;\n","import {\n    ActionLink,\n    bemUtils,\n    Block,\n    førsteOktober2021ReglerGjelder,\n    intlUtils,\n    Periode,\n    Periodetype,\n    Tidsperioden,\n} from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { BodyShort } from '@navikt/ds-react';\n\nimport './periodeHull.less';\n\ninterface Props {\n    periode: Periode;\n    navnAnnenForelder: string;\n    erDeltUttak: boolean;\n    familiehendelsesdato: Date;\n    erFarEllerMedmor: boolean;\n    erAleneOmOmsorg: boolean;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n}\n\nconst PeriodeHull: FunctionComponent<Props> = ({\n    periode,\n    navnAnnenForelder,\n    erDeltUttak,\n    familiehendelsesdato,\n    erFarEllerMedmor,\n    erAleneOmOmsorg,\n    handleUpdatePeriode,\n}) => {\n    const intl = useIntl();\n    const bem = bemUtils('periodeHull');\n\n    const antallDager = Tidsperioden(periode.tidsperiode).getAntallUttaksdager();\n    const antallHelligdager = Tidsperioden(periode.tidsperiode).getAntallFridager();\n    const antallUttaksdager = Tidsperioden(periode.tidsperiode).getAntallUttaksdager();\n    const kunHelligdager = antallHelligdager === antallUttaksdager;\n    const kunUttaksdager = antallHelligdager === 0;\n\n    const onLeggInnNyPeriode = () => {\n        const { id, tidsperiode } = periode;\n\n        handleUpdatePeriode({ id, type: Periodetype.Uttak, tidsperiode } as Periode, familiehendelsesdato);\n    };\n\n    const leggInnNyUtsettelse = () => {\n        const { id, tidsperiode } = periode;\n\n        handleUpdatePeriode({ id, type: Periodetype.Utsettelse, tidsperiode } as Periode, familiehendelsesdato);\n    };\n\n    const nyeRegler = førsteOktober2021ReglerGjelder(familiehendelsesdato);\n\n    return (\n        <div className={bem.block}>\n            <Block padBottom=\"l\" visible={kunHelligdager}>\n                <BodyShort>\n                    <FormattedMessage id=\"uttaksplan.hull.helligdager\" />\n                </BodyShort>\n            </Block>\n            <Block padBottom=\"l\" visible={kunUttaksdager || (kunUttaksdager === false && kunHelligdager === false)}>\n                <BodyShort>\n                    {erDeltUttak ? (\n                        <FormattedMessage\n                            id=\"uttaksplan.hull.uttaksdager.deltUttak\"\n                            values={{\n                                navn: navnAnnenForelder,\n                                dager: antallDager,\n                            }}\n                        />\n                    ) : (\n                        <FormattedMessage\n                            id={\n                                nyeRegler && erFarEllerMedmor && !erAleneOmOmsorg\n                                    ? 'uttaksplan.hull.uttaksdager.ikkeDeltUttak.nyeRegler'\n                                    : 'uttaksplan.hull.uttaksdager.ikkeDeltUttak'\n                            }\n                            values={{\n                                dager: antallDager,\n                            }}\n                        />\n                    )}\n                </BodyShort>\n            </Block>\n            <div className={bem.element('lenker')}>\n                <ActionLink onClick={onLeggInnNyPeriode}>{intlUtils(intl, 'uttaksplan.leggInnNyPeriode')}</ActionLink>\n                <ActionLink onClick={leggInnNyUtsettelse}>\n                    {intlUtils(intl, 'uttaksplan.leggInnNyUtsettelse')}\n                </ActionLink>\n            </div>\n        </div>\n    );\n};\n\nexport default PeriodeHull;\n","import { BodyShort } from '@navikt/ds-react';\nimport {\n    NavnPåForeldre,\n    intlUtils,\n    UtsettelseÅrsakType,\n    UttakAnnenPartInfoPeriode,\n    UtsettelseAnnenPartInfoPeriode,\n    formaterDatoKompakt,\n    isUttakAnnenPart,\n    getOppholdskontoNavn,\n    getForelderNavn,\n    Forelder,\n} from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\n\nexport interface Props {\n    periode: UttakAnnenPartInfoPeriode | UtsettelseAnnenPartInfoPeriode;\n    navnPåForeldre: NavnPåForeldre;\n}\n\nconst getUtsettelseTekst = (intl: IntlShape, årsak: UtsettelseÅrsakType, foreldernavn: string, erMor: boolean) => {\n    return erMor\n        ? intlUtils(intl, `uttaksplan.utsettelseårsaktype.foreldernavn.far.${årsak}`, { foreldernavn })\n        : intlUtils(intl, `uttaksplan.utsettelseårsaktype.foreldernavn.mor.${årsak}`, { foreldernavn });\n};\n\nconst PeriodeInfo: FunctionComponent<Props> = ({ periode, navnPåForeldre }) => {\n    const intl = useIntl();\n\n    return (\n        <BodyShort>\n            <strong>\n                <span>{formaterDatoKompakt(periode.tidsperiode.fom)}</span>\n                <span>&mdash;</span>\n                <span>{formaterDatoKompakt(periode.tidsperiode.tom)}:</span>\n            </strong>{' '}\n            {isUttakAnnenPart(periode)\n                ? getOppholdskontoNavn(\n                      intl,\n                      periode.årsak,\n                      getForelderNavn(periode.forelder, navnPåForeldre),\n                      periode.forelder === Forelder.mor,\n                  )\n                : getUtsettelseTekst(\n                      intl,\n                      periode.årsak,\n                      getForelderNavn(periode.forelder, navnPåForeldre),\n                      periode.forelder === Forelder.mor,\n                  )}\n        </BodyShort>\n    );\n};\n\nexport default PeriodeInfo;\n","import { BodyShort } from '@navikt/ds-react';\nimport { ActionLink, Block, Periode, Periodetype, intlUtils } from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\ninterface Props {\n    periode: Periode;\n    handleUpdatePeriode: (periode: Periode, familiehendelsesdato: Date) => void;\n    familiehendelsesdato: Date;\n}\n\nconst PeriodeUtenUttak: FunctionComponent<Props> = ({ periode, handleUpdatePeriode, familiehendelsesdato }) => {\n    const intl = useIntl();\n\n    const onLeggTilNyPeriode = () => {\n        const { id, tidsperiode } = periode;\n\n        handleUpdatePeriode({ id, type: Periodetype.Uttak, tidsperiode } as Periode, familiehendelsesdato);\n    };\n\n    return (\n        <div>\n            <Block padBottom=\"l\">\n                <BodyShort>\n                    <FormattedMessage id=\"uttaksplan.periodeUtenUttak.info.del1\" />\n                </BodyShort>\n            </Block>\n            <Block padBottom=\"l\">\n                <BodyShort>\n                    <FormattedMessage id=\"uttaksplan.periodeUtenUttak.info.del2\" />\n                </BodyShort>\n            </Block>\n            <ActionLink onClick={onLeggTilNyPeriode}>{intlUtils(intl, 'uttaksplan.leggInnNyPeriode')}</ActionLink>\n        </div>\n    );\n};\n\nexport default PeriodeUtenUttak;\n","import { getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\n\nexport enum PeriodeFørFødselFormField {\n    fom = 'fom',\n    tom = 'tom',\n    skalIkkeHaUttakFørTermin = 'skalIkkeHaUttakFørTermin',\n}\n\nexport interface PeriodeFørFødselFormData {\n    [PeriodeFørFødselFormField.fom]: Date | undefined;\n    [PeriodeFørFødselFormField.tom]: Date | undefined;\n    [PeriodeFørFødselFormField.skalIkkeHaUttakFørTermin]: boolean;\n}\n\nexport const PeriodeFørFødselFormComponents = getTypedFormComponents<\n    PeriodeFørFødselFormField,\n    PeriodeFørFødselFormData\n>();\n","import { hasValue, isValidTidsperiode } from '@navikt/fp-common';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport { PeriodeFørFødselFormData, PeriodeFørFødselFormField } from './periodeFørFødselFormConfig';\n\nconst PeriodeFørFødselFormConfig: QuestionConfig<PeriodeFørFødselFormData, PeriodeFørFødselFormField> = {\n    [PeriodeFørFødselFormField.fom]: {\n        isAnswered: ({ fom }) => hasValue(fom),\n        isIncluded: ({ skalIkkeHaUttakFørTermin }) => !skalIkkeHaUttakFørTermin,\n    },\n    [PeriodeFørFødselFormField.tom]: {\n        isAnswered: ({ tom }) => hasValue(tom),\n        isIncluded: ({ skalIkkeHaUttakFørTermin }) => !skalIkkeHaUttakFørTermin,\n    },\n    [PeriodeFørFødselFormField.skalIkkeHaUttakFørTermin]: {\n        isAnswered: () => true,\n        isIncluded: () => true,\n        visibilityFilter: ({ fom, tom, skalIkkeHaUttakFørTermin }) =>\n            skalIkkeHaUttakFørTermin ? true : isValidTidsperiode({ fom, tom }),\n    },\n};\n\nexport const periodeFørFødselFormQuestionsConfig = Questions<PeriodeFørFødselFormData, PeriodeFørFødselFormField>(\n    PeriodeFørFødselFormConfig,\n);\n","import dayjs from 'dayjs';\nimport { PeriodeFørFødselFormData, PeriodeFørFødselFormField } from './periodeFørFødselFormConfig';\nimport {\n    ForeldrepengerFørFødselUttaksperiode,\n    Periode,\n    Periodetype,\n    StønadskontoType,\n    Uttaksdagen,\n    uttaksConstants,\n} from '@navikt/fp-common';\n\nexport const initialValues: PeriodeFørFødselFormData = {\n    [PeriodeFørFødselFormField.fom]: undefined,\n    [PeriodeFørFødselFormField.tom]: undefined,\n    [PeriodeFørFødselFormField.skalIkkeHaUttakFørTermin]: false,\n};\n\nexport const getPeriodeFørFødselFormInitialValues = (\n    periode: ForeldrepengerFørFødselUttaksperiode,\n    familiehendelsesdato: Date,\n): PeriodeFørFødselFormData => {\n    const sisteUttaksagFørFødsel = Uttaksdagen(dayjs(familiehendelsesdato).toDate()).forrige();\n    const førsteUttaksdag3UkerFørFødsel = Uttaksdagen(sisteUttaksagFørFødsel).trekkFra(\n        uttaksConstants.ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5 - 1,\n    );\n    const fom = periode.tidsperiode.fom !== undefined ? periode.tidsperiode.fom : førsteUttaksdag3UkerFørFødsel;\n    const tom = periode.tidsperiode.tom !== undefined ? periode.tidsperiode.tom : sisteUttaksagFørFødsel;\n    return {\n        ...initialValues,\n        fom,\n        tom,\n        skalIkkeHaUttakFørTermin: periode.skalIkkeHaUttakFørTermin,\n    };\n};\n\nexport const mapPeriodeFørFødselFormToPeriode = (\n    values: Partial<PeriodeFørFødselFormData>,\n    periode: ForeldrepengerFørFødselUttaksperiode,\n): Periode => {\n    return {\n        type: Periodetype.Uttak,\n        id: periode.id,\n        forelder: periode.forelder,\n        konto: StønadskontoType.ForeldrepengerFørFødsel,\n        tidsperiode: {\n            fom: values.fom!,\n            tom: values.tom!,\n        },\n        skalIkkeHaUttakFørTermin: !!values.skalIkkeHaUttakFørTermin,\n    };\n};\n","import {\n    Block,\n    ForeldrepengerFørFødselUttaksperiode,\n    ISOStringToDate,\n    Periode,\n    Situasjon,\n    Utsettelsesperiode,\n    intlUtils,\n    isValidTidsperiode,\n} from '@navikt/fp-common';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { FunctionComponent, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { SubmitListener } from '../submit-listener/SubmitListener';\nimport TidsperiodeForm from '../tidsperiode-form/TidsperiodeForm';\nimport {\n    PeriodeFørFødselFormComponents,\n    PeriodeFørFødselFormData,\n    PeriodeFørFødselFormField,\n} from './periodeFørFødselFormConfig';\nimport { periodeFørFødselFormQuestionsConfig } from './periodeFørFødselFormQuestionsConfig';\nimport { getPeriodeFørFødselFormInitialValues, mapPeriodeFørFødselFormToPeriode } from './periodeFørFødselFormUtils';\nimport TidsperiodeDisplay from '../../tidsperiode-display/TidsperiodeDisplay';\nimport UttakEndreTidsperiodeSpørsmål from '../../uttak-endre-tidsperiode-spørsmål/UttakEndreTidsperiodeSpørsmål';\n\ninterface Props {\n    periode: ForeldrepengerFørFødselUttaksperiode;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n    familiehendelsesdato: Date;\n    erFarEllerMedmor: boolean;\n    morHarRett: boolean;\n    situasjon: Situasjon;\n    utsettelserIPlan: Utsettelsesperiode[];\n}\n\nconst PeriodeFørFødselForm: FunctionComponent<Props> = ({\n    periode,\n    familiehendelsesdato,\n    handleUpdatePeriode,\n    erFarEllerMedmor,\n    morHarRett,\n    situasjon,\n    utsettelserIPlan,\n}) => {\n    const { tidsperiode } = periode;\n    const [tidsperiodeIsOpen, setTidsperiodeIsOpen] = useState(false);\n    const intl = useIntl();\n\n    const toggleVisTidsperiode = () => {\n        setTidsperiodeIsOpen(!tidsperiodeIsOpen);\n    };\n\n    const handleCleanup = (\n        values: PeriodeFørFødselFormData,\n        _visibility: QuestionVisibility<PeriodeFørFødselFormField, undefined>,\n    ): PeriodeFørFødselFormData => {\n        return values;\n    };\n\n    return (\n        <PeriodeFørFødselFormComponents.FormikWrapper\n            initialValues={getPeriodeFørFødselFormInitialValues(periode, familiehendelsesdato)}\n            onSubmit={(values) =>\n                handleUpdatePeriode(mapPeriodeFørFødselFormToPeriode(values, periode), familiehendelsesdato)\n            }\n            renderForm={({ setFieldValue, values }) => {\n                const visibility = periodeFørFødselFormQuestionsConfig.getVisbility(values as PeriodeFørFødselFormData);\n\n                return (\n                    <>\n                        <Block\n                            visible={\n                                !isValidTidsperiode(tidsperiode) && visibility.isVisible(PeriodeFørFødselFormField.fom)\n                            }\n                            padBottom=\"l\"\n                        >\n                            <TidsperiodeForm\n                                tidsperiode={tidsperiode}\n                                familiehendelsesdato={familiehendelsesdato}\n                                onBekreft={(values) => {\n                                    setFieldValue(PeriodeFørFødselFormField.fom, ISOStringToDate(values.fom));\n                                    setFieldValue(PeriodeFørFødselFormField.tom, ISOStringToDate(values.tom));\n                                }}\n                                ugyldigeTidsperioder={undefined}\n                                utsettelserIPlan={utsettelserIPlan}\n                                erFarEllerMedmor={erFarEllerMedmor}\n                                morHarRett={morHarRett}\n                                situasjon={situasjon}\n                                erFarMedmorOgHarAleneomsorg={false}\n                            />\n                        </Block>\n                        <PeriodeFørFødselFormComponents.Form includeButtons={false}>\n                            <SubmitListener\n                                cleanup={() => handleCleanup(values as PeriodeFørFødselFormData, visibility)}\n                            />\n\n                            <Block\n                                visible={\n                                    isValidTidsperiode(tidsperiode) &&\n                                    visibility.isVisible(PeriodeFørFødselFormField.fom)\n                                }\n                                padBottom=\"l\"\n                            >\n                                <TidsperiodeDisplay\n                                    tidsperiode={tidsperiode}\n                                    toggleVisTidsperiode={toggleVisTidsperiode}\n                                />\n                                <UttakEndreTidsperiodeSpørsmål\n                                    periode={periode}\n                                    familiehendelsesdato={familiehendelsesdato}\n                                    ugyldigeTidsperioder={undefined}\n                                    utsettelserIPlan={utsettelserIPlan}\n                                    onBekreft={(values) => {\n                                        toggleVisTidsperiode();\n                                        setFieldValue(PeriodeFørFødselFormField.fom, values.fom);\n                                        setFieldValue(PeriodeFørFødselFormField.tom, values.tom);\n                                    }}\n                                    changeTidsperiode={(values) => {\n                                        setFieldValue(PeriodeFørFødselFormField.fom, values.fom);\n                                        setFieldValue(PeriodeFørFødselFormField.tom, values.tom);\n                                    }}\n                                    tidsperiode={tidsperiode}\n                                    onAvbryt={() => toggleVisTidsperiode()}\n                                    visible={tidsperiodeIsOpen}\n                                    erFarEllerMedmor={erFarEllerMedmor}\n                                    morHarRett={morHarRett}\n                                    situasjon={situasjon}\n                                    erFarMedmorOgHarAleneomsorg={false}\n                                />\n                            </Block>\n\n                            <Block\n                                visible={visibility.isVisible(PeriodeFørFødselFormField.skalIkkeHaUttakFørTermin)}\n                                padBottom=\"l\"\n                            >\n                                <PeriodeFørFødselFormComponents.Checkbox\n                                    name={PeriodeFørFødselFormField.skalIkkeHaUttakFørTermin}\n                                    label={intlUtils(intl, 'uttaksplan.periodeFørFødselForm.skalIkkeHaUttakFørTermin')}\n                                />\n                            </Block>\n                        </PeriodeFørFødselFormComponents.Form>\n                    </>\n                );\n            }}\n        />\n    );\n};\n\nexport default PeriodeFørFødselForm;\n","import { ActionLink, InfoPeriode, bemUtils, getSlettPeriodeTekst } from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport './slettbarAvslåttPeriode.less';\n\ninterface Props {\n    periode: InfoPeriode;\n    handleDeletePeriode: (periodeId: string) => void;\n}\n\nconst SlettbarAvslåttPeriode: FunctionComponent<Props> = ({ periode, handleDeletePeriode }) => {\n    const bem = bemUtils('slettbarAvslåttPeriode');\n    const onSlettPeriode = () => {\n        handleDeletePeriode(periode.id);\n    };\n    return (\n        <div className={bem.element('wrapper')}>\n            <ActionLink onClick={onSlettPeriode}>\n                <FormattedMessage id={getSlettPeriodeTekst(periode.type)} />\n            </ActionLink>\n        </div>\n    );\n};\n\nexport default SlettbarAvslåttPeriode;\n","import * as React from 'react';\nimport { VeilederMessage } from './types';\nimport VeilederMelding, { VeilederMeldingStil } from './components/VeilederMelding';\nimport { Block } from '@navikt/fp-common';\n\ninterface Props {\n    meldinger: VeilederMessage[];\n    stil?: VeilederMeldingStil;\n    skjulMeldingIkon?: boolean;\n}\n\nconst VeilederMeldinger: React.FunctionComponent<Props> = ({ meldinger, stil, skjulMeldingIkon }) => {\n    return (\n        <div>\n            {meldinger.map((melding: VeilederMessage) => (\n                <Block padBottom=\"xl\" key={melding.contentIntlKey + melding.periodeId}>\n                    <VeilederMelding message={melding} stil={stil} skjulMeldingIkon={skjulMeldingIkon} />\n                </Block>\n            ))}\n        </div>\n    );\n};\n\nexport default VeilederMeldinger;\n","import { IntlShape } from 'react-intl';\nimport {\n    AnnenForelder,\n    Arbeidsforhold,\n    Attachment,\n    bemUtils,\n    Block,\n    isAvslåttPeriode,\n    isForeldrepengerFørFødselUttaksperiode,\n    isInfoPeriode,\n    isSlettbarAvslåttPeriode,\n    NavnPåForeldre,\n    Periode,\n    Periodetype,\n    PeriodeValidState,\n    Situasjon,\n    TilgjengeligStønadskonto,\n    Utsettelsesperiode,\n} from '@navikt/fp-common';\nimport classNames from 'classnames';\nimport { FunctionComponent } from 'react';\nimport PeriodelisteItemHeader from '../periodeliste-item-header/PeriodelisteItemHeader';\nimport PeriodeHull from '../perioder/PeriodeHull';\nimport PeriodeInfo from '../perioder/PeriodeInfo';\nimport PeriodeUtenUttak from '../perioder/PeriodeUtenUttak';\nimport PeriodeFørFødselForm from '../uttaks-forms/periode-før-fødsel-form/PeriodeFørFødselForm';\nimport PeriodeUtsettelseForm from '../uttaks-forms/periode-utsettelse-form/PeriodeUtsettelseForm';\nimport PeriodeUttakForm from '../uttaks-forms/periode-uttak-form/PeriodeUttakForm';\nimport { Accordion } from '@navikt/ds-react';\nimport SlettbarAvslåttPeriode from '../perioder/SlettbarAvslåttPeriode';\n\nimport './periodelisteItem.less';\nimport { VeilederMessage } from '../../validering/veilederInfo/types';\nimport VeilederMeldinger from '../../validering/veilederInfo/VeilederMeldinger';\n\ninterface Props {\n    egenPeriode: boolean;\n    periode: Periode;\n    isOpen: boolean;\n    toggleIsOpen: (id: string) => void;\n    familiehendelsesdato: Date;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n    stønadskontoer: TilgjengeligStønadskonto[];\n    navnPåForeldre: NavnPåForeldre;\n    annenForelder: AnnenForelder;\n    arbeidsforhold: Arbeidsforhold[];\n    handleDeletePeriode: (periodeId: string) => void;\n    erFarEllerMedmor: boolean;\n    erFlerbarnssøknad: boolean;\n    erAleneOmOmsorg: boolean;\n    erDeltUttak: boolean;\n    situasjon: Situasjon;\n    meldinger?: VeilederMessage[];\n    erMorUfør: boolean;\n    annenForelderSamtidigUttakPeriode: Periode | undefined;\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean;\n    setPerioderErGyldige: React.Dispatch<React.SetStateAction<PeriodeValidState[]>>;\n    erEndringssøknad: boolean;\n    termindato: Date | undefined;\n    antallBarn: number;\n    utsettelserIPlan: Utsettelsesperiode[];\n    intl: IntlShape;\n    periodeErGyldig: boolean;\n    saveAttachment: (vedlegg: Attachment) => void;\n}\n\nconst renderPeriodeListeInnhold = (\n    periode: Periode,\n    familiehendelsesdato: Date,\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void,\n    stønadskontoer: TilgjengeligStønadskonto[],\n    navnPåForeldre: NavnPåForeldre,\n    annenForelder: AnnenForelder,\n    toggleIsOpen: (id: string) => void,\n    arbeidsforhold: Arbeidsforhold[],\n    handleDeletePeriode: (periodeId: string) => void,\n    erFarEllerMedmor: boolean,\n    erFlerbarnssøknad: boolean,\n    erAleneOmOmsorg: boolean,\n    erDeltUttak: boolean,\n    situasjon: Situasjon,\n    erMorUfør: boolean,\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean,\n    setPerioderErGyldige: React.Dispatch<React.SetStateAction<PeriodeValidState[]>>,\n    erEndringssøknad: boolean,\n    termindato: Date | undefined,\n    antallBarn: number,\n    utsettelserIPlan: Utsettelsesperiode[],\n    intl: IntlShape,\n    isOpen: boolean,\n    saveAttachment: (vedlegg: Attachment) => void,\n) => {\n    switch (periode.type) {\n        case Periodetype.Uttak:\n        case Periodetype.Overføring:\n        case Periodetype.Opphold:\n            if (isForeldrepengerFørFødselUttaksperiode(periode)) {\n                return (\n                    <PeriodeFørFødselForm\n                        periode={periode}\n                        familiehendelsesdato={familiehendelsesdato}\n                        handleUpdatePeriode={handleUpdatePeriode}\n                        erFarEllerMedmor={erFarEllerMedmor}\n                        morHarRett={!søkerErFarEllerMedmorOgKunDeHarRett}\n                        situasjon={situasjon}\n                        utsettelserIPlan={utsettelserIPlan}\n                    />\n                );\n            }\n\n            return (\n                <PeriodeUttakForm\n                    periode={periode}\n                    familiehendelsesdato={familiehendelsesdato}\n                    handleUpdatePeriode={handleUpdatePeriode}\n                    stønadskontoer={stønadskontoer}\n                    navnPåForeldre={navnPåForeldre}\n                    annenForelder={annenForelder}\n                    toggleIsOpen={toggleIsOpen}\n                    arbeidsforhold={arbeidsforhold}\n                    handleDeletePeriode={handleDeletePeriode}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    erFlerbarnssøknad={erFlerbarnssøknad}\n                    erAleneOmOmsorg={erAleneOmOmsorg}\n                    erDeltUttak={erDeltUttak}\n                    situasjon={situasjon}\n                    erMorUfør={erMorUfør}\n                    erEndringssøknad={erEndringssøknad}\n                    setPerioderErGyldige={setPerioderErGyldige}\n                    termindato={termindato}\n                    morHarRett={!søkerErFarEllerMedmorOgKunDeHarRett}\n                    antallBarn={antallBarn}\n                    utsettelserIPlan={utsettelserIPlan}\n                    intl={intl}\n                    isOpen={isOpen}\n                    saveAttachment={saveAttachment}\n                />\n            );\n        case Periodetype.Utsettelse:\n            return (\n                <PeriodeUtsettelseForm\n                    periode={periode}\n                    familiehendelsesdato={familiehendelsesdato}\n                    handleUpdatePeriode={handleUpdatePeriode}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    erAleneOmOmsorg={erAleneOmOmsorg}\n                    handleDeletePeriode={handleDeletePeriode}\n                    toggleIsOpen={toggleIsOpen}\n                    navnPåForeldre={navnPåForeldre}\n                    erMorUfør={erMorUfør}\n                    søkerErFarEllerMedmorOgKunDeHarRett={søkerErFarEllerMedmorOgKunDeHarRett}\n                    arbeidsforhold={arbeidsforhold}\n                    situasjon={situasjon}\n                    utsettelserIPlan={utsettelserIPlan}\n                    setPerioderErGyldige={setPerioderErGyldige}\n                    isOpen={isOpen}\n                    saveAttachment={saveAttachment}\n                />\n            );\n        case Periodetype.Hull:\n            return (\n                <PeriodeHull\n                    erAleneOmOmsorg={erAleneOmOmsorg}\n                    erDeltUttak={erDeltUttak}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    periode={periode}\n                    familiehendelsesdato={familiehendelsesdato}\n                    navnAnnenForelder={erFarEllerMedmor ? navnPåForeldre.mor : navnPåForeldre.farMedmor}\n                    handleUpdatePeriode={handleUpdatePeriode}\n                />\n            );\n        case Periodetype.PeriodeUtenUttak:\n            return (\n                <PeriodeUtenUttak\n                    periode={periode}\n                    handleUpdatePeriode={handleUpdatePeriode}\n                    familiehendelsesdato={familiehendelsesdato}\n                />\n            );\n        case Periodetype.Info:\n            return (\n                <>\n                    {periode.visPeriodeIPlan && !isAvslåttPeriode(periode) && (\n                        <PeriodeInfo periode={periode} navnPåForeldre={navnPåForeldre} />\n                    )}\n                    {isSlettbarAvslåttPeriode(periode) && (\n                        <SlettbarAvslåttPeriode periode={periode} handleDeletePeriode={handleDeletePeriode} />\n                    )}\n                </>\n            );\n        default:\n            return <div>Ingen visning</div>;\n    }\n};\n\nconst PeriodelisteItem: FunctionComponent<Props> = ({\n    egenPeriode,\n    periode,\n    isOpen,\n    toggleIsOpen,\n    familiehendelsesdato,\n    handleUpdatePeriode,\n    stønadskontoer,\n    navnPåForeldre,\n    annenForelder,\n    arbeidsforhold,\n    handleDeletePeriode,\n    erFarEllerMedmor,\n    erFlerbarnssøknad,\n    erAleneOmOmsorg,\n    erDeltUttak,\n    situasjon,\n    meldinger = [],\n    erMorUfør,\n    annenForelderSamtidigUttakPeriode,\n    søkerErFarEllerMedmorOgKunDeHarRett,\n    erEndringssøknad,\n    setPerioderErGyldige,\n    termindato,\n    antallBarn,\n    utsettelserIPlan,\n    intl,\n    periodeErGyldig,\n    saveAttachment,\n}) => {\n    const bem = bemUtils('periodelisteItem');\n    let melding = meldinger.length > 0 ? meldinger[0] : undefined;\n\n    if (!periodeErGyldig) {\n        melding = {\n            type: 'feil',\n            contentIntlKey: 'uttaksplan.validering.feil.erAllePeriodeSkjemaspørsmålBesvart',\n        };\n    }\n\n    if (isInfoPeriode(periode) && !periode.visPeriodeIPlan) {\n        return null;\n    }\n\n    const toggleFocusAndOpen = () => {\n        const headerButton = window.document.getElementById(periode.id);\n\n        if (headerButton) {\n            setTimeout(() => {\n                headerButton.focus();\n            }, 150);\n        }\n\n        toggleIsOpen(periode.id);\n    };\n\n    return (\n        <article\n            className={classNames(bem.block, egenPeriode ? bem.modifier('egenPeriode') : bem.modifier('transparent'))}\n        >\n            <Accordion>\n                <Accordion.Item open={isOpen}>\n                    <Accordion.Header onClick={() => toggleIsOpen(periode.id)} className={bem.element('header')}>\n                        <PeriodelisteItemHeader\n                            egenPeriode={egenPeriode}\n                            periode={periode}\n                            navnPåForeldre={navnPåForeldre}\n                            melding={melding}\n                            annenForelderSamtidigUttakPeriode={annenForelderSamtidigUttakPeriode}\n                            familiehendelsesdato={familiehendelsesdato}\n                            termindato={termindato}\n                            situasjon={situasjon}\n                            erFarEllerMedmor={erFarEllerMedmor}\n                            erAleneOmOmsorg={erAleneOmOmsorg}\n                        />\n                    </Accordion.Header>\n                    <Accordion.Content>\n                        <Block visible={meldinger.length > 0}>\n                            <VeilederMeldinger\n                                stil=\"default\"\n                                meldinger={meldinger.filter((m) => m.avvikType !== 'skjema')}\n                            />\n                        </Block>\n                        {renderPeriodeListeInnhold(\n                            periode,\n                            familiehendelsesdato,\n                            handleUpdatePeriode,\n                            stønadskontoer,\n                            navnPåForeldre,\n                            annenForelder,\n                            toggleFocusAndOpen,\n                            arbeidsforhold,\n                            handleDeletePeriode,\n                            erFarEllerMedmor,\n                            erFlerbarnssøknad,\n                            erAleneOmOmsorg,\n                            erDeltUttak,\n                            situasjon,\n                            erMorUfør,\n                            søkerErFarEllerMedmorOgKunDeHarRett,\n                            setPerioderErGyldige,\n                            erEndringssøknad,\n                            termindato,\n                            antallBarn,\n                            utsettelserIPlan,\n                            intl,\n                            isOpen,\n                            saveAttachment,\n                        )}\n                    </Accordion.Content>\n                </Accordion.Item>\n            </Accordion>\n        </article>\n    );\n};\n\nexport default PeriodelisteItem;\n","import { UttaksplanIkonProps } from '../components/uttaksplan-ikon/UttaksplanIkon';\n\ninterface OwnProps {\n    fylt?: boolean;\n}\n\nconst HjerteIkon = (props: UttaksplanIkonProps & OwnProps) => {\n    const { title, fylt, ...rest } = props;\n    return fylt ? (\n        <svg focusable=\"false\" role=\"img\" aria-hidden=\"true\" width={24} height={24} {...rest}>\n            <title>{title}</title>\n            <path\n                fill=\"#ba3a26\"\n                fillRule=\"evenodd\"\n                d=\"M23 7.173c0 .41-.028.823-.083 1.243-.418 3.173-2.345 6.521-5.291 9.882a43.405 43.405 0 0 1-4.856 4.717c-.22.181-.378.307-.464.374a.5.5 0 0 1-.582.021 16.293 16.293 0 0 1-.467-.325 35.073 35.073 0 0 1-4.87-4.255C3.027 15.28 1 11.544 1 7.765 1-.286 9.586-1.719 12.003 4.612 14.42-1.616 23-.464 23 7.173z\"\n            />\n        </svg>\n    ) : (\n        <svg focusable=\"false\" role=\"img\" aria-hidden=\"true\" width={24} height={24} viewBox=\"0 0 24 24\" {...rest}>\n            <title>{title}</title>\n            <path\n                fill=\"none\"\n                fillRule=\"evenodd\"\n                stroke=\"#3E3832\"\n                strokeLinejoin=\"round\"\n                d=\"M12 22.993s10.5-8.128 10.5-15.82-9.316-8.284-10.5-.59C10.816-1.112 1.5-.52 1.5 7.764S12 22.993 12 22.993z\"\n            />\n        </svg>\n    );\n};\nexport default HjerteIkon;\n","import { Barn, bemUtils, formaterDatoUtenDag, isAdoptertBarn, isFødtBarn } from '@navikt/fp-common';\nimport { FunctionComponent, ReactNode } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { BodyShort } from '@navikt/ds-react';\nimport HjerteIkon from '../../assets/HjerteIkon';\n\nimport './familiehendelsesdatoDisplay.less';\n\ninterface Props {\n    familiehendelsedato: Date;\n    barn: Barn;\n}\n\nconst getTekst = (barn: Barn, familiehendelsedato: Date, antallBarn: number): ReactNode => {\n    if (!isAdoptertBarn(barn)) {\n        if (isFødtBarn(barn)) {\n            return (\n                <FormattedMessage\n                    id=\"uttaksplan.familiehendelsesdato.født\"\n                    values={{ antallBarn, dato: formaterDatoUtenDag(familiehendelsedato) }}\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id=\"uttaksplan.familiehendelsesdato.termin\"\n                values={{ dato: formaterDatoUtenDag(familiehendelsedato) }}\n            />\n        );\n    }\n\n    return (\n        <FormattedMessage\n            id=\"uttaksplan.familiehendelsesdato.adopsjon\"\n            values={{ antallBarn, dato: formaterDatoUtenDag(familiehendelsedato) }}\n        />\n    );\n};\n\nconst FamiliehendelsedatoDisplay: FunctionComponent<Props> = ({ familiehendelsedato, barn }) => {\n    const bem = bemUtils('familiehendelsesdatoDisplay');\n\n    return (\n        <div className={bem.block}>\n            <div className={bem.element('hjerte')}>\n                <HjerteIkon fylt={true} title=\"Hjerte\" />\n            </div>\n            <BodyShort>{getTekst(barn, familiehendelsedato, barn.antallBarn)}</BodyShort>\n        </div>\n    );\n};\n\nexport default FamiliehendelsedatoDisplay;\n","import { FunctionComponent, useState } from 'react';\nimport {\n    AnnenForelder,\n    Arbeidsforhold,\n    Attachment,\n    Barn,\n    BarnFraNesteSak,\n    bemUtils,\n    Block,\n    formatDate,\n    isInfoPeriode,\n    isValidTidsperiode,\n    NavnPåForeldre,\n    Periode,\n    PeriodeValidState,\n    Situasjon,\n    TilgjengeligStønadskonto,\n    Utsettelsesperiode,\n} from '@navikt/fp-common';\nimport PeriodelisteItem from './../periodeliste-item/PeriodelisteItem';\n\nimport dayjs from 'dayjs';\nimport FamiliehendelsedatoDisplay from '../familiehendelsedato-display/FamiliehendelsedatoDisplay';\nimport { FormattedMessage, IntlShape } from 'react-intl';\nimport { Alert } from '@navikt/ds-react';\nimport { getAnnenForelderSamtidigUttakPeriode } from '@navikt/fp-common/src/common/utils/periodeUtils';\nimport { VeiledermeldingerPerPeriode } from '../../validering/veilederInfo/types';\n\nimport './periodeliste.less';\n\ninterface Props {\n    uttaksplan: Periode[];\n    familiehendelsesdato: Date;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n    stønadskontoer: TilgjengeligStønadskonto[];\n    navnPåForeldre: NavnPåForeldre;\n    annenForelder: AnnenForelder;\n    arbeidsforhold: Arbeidsforhold[];\n    handleDeletePeriode: (periodeId: string) => void;\n    erFarEllerMedmor: boolean;\n    erFlerbarnssøknad: boolean;\n    erAleneOmOmsorg: boolean;\n    erDeltUttak: boolean;\n    situasjon: Situasjon;\n    meldingerPerPeriode: VeiledermeldingerPerPeriode;\n    erMorUfør: boolean;\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean;\n    setPerioderErGyldige: React.Dispatch<React.SetStateAction<PeriodeValidState[]>>;\n    erEndringssøknad: boolean;\n    termindato: Date | undefined;\n    antallBarn: number;\n    utsettelserIPlan: Utsettelsesperiode[];\n    barn: Barn;\n    barnFraNesteSak: BarnFraNesteSak | undefined;\n    intl: IntlShape;\n    perioderErGyldige: PeriodeValidState[];\n    saveAttachment: (vedlegg: Attachment) => void;\n}\n\nconst getIndexOfFørstePeriodeEtterFødsel = (uttaksplan: Periode[], familiehendelsesdato: Date) => {\n    return uttaksplan.findIndex(\n        (p) => isValidTidsperiode(p.tidsperiode) && dayjs(p.tidsperiode.fom).isSameOrAfter(familiehendelsesdato),\n    );\n};\n\nconst getIndexOfSistePeriodeFørDato = (uttaksplan: Periode[], dato: Date | undefined) => {\n    if (dato !== undefined) {\n        return Math.max(0, uttaksplan.filter((p) => dayjs(p.tidsperiode.tom).isBefore(dato, 'day')).length);\n    }\n    return undefined;\n};\n\nconst Periodeliste: FunctionComponent<Props> = ({\n    uttaksplan,\n    familiehendelsesdato,\n    handleUpdatePeriode,\n    stønadskontoer,\n    navnPåForeldre,\n    annenForelder,\n    arbeidsforhold,\n    handleDeletePeriode,\n    erFarEllerMedmor,\n    erFlerbarnssøknad,\n    erAleneOmOmsorg,\n    erDeltUttak,\n    situasjon,\n    meldingerPerPeriode,\n    erMorUfør,\n    søkerErFarEllerMedmorOgKunDeHarRett,\n    setPerioderErGyldige,\n    erEndringssøknad,\n    termindato,\n    antallBarn,\n    utsettelserIPlan,\n    barn,\n    barnFraNesteSak,\n    intl,\n    perioderErGyldige,\n    saveAttachment,\n}) => {\n    const [openPeriodeId, setOpenPeriodeId] = useState<string>(null!);\n    const bem = bemUtils('periodeliste');\n\n    const toggleIsOpen = (id: string) => {\n        if (openPeriodeId === id) {\n            setOpenPeriodeId(null!);\n        } else {\n            setOpenPeriodeId(id);\n        }\n    };\n\n    const indexOfFørstePeriodeEtterFødsel = getIndexOfFørstePeriodeEtterFødsel(uttaksplan, familiehendelsesdato);\n    const erAllePerioderIPlanenFørFødsel = indexOfFørstePeriodeEtterFødsel === -1;\n    const indexOfSistePeriodeFørNyStøndasperiodeNyttBarn =\n        barnFraNesteSak !== undefined\n            ? getIndexOfSistePeriodeFørDato(uttaksplan, barnFraNesteSak.startdatoFørsteStønadsperiode)\n            : undefined;\n    return (\n        <div className={bem.block}>\n            {uttaksplan.map((p, index) => {\n                const periodeMedValidState = perioderErGyldige.find((periodeMedState) => periodeMedState.id === p.id);\n                const periodeErGyldig = periodeMedValidState ? periodeMedValidState.isValid : true;\n                return (\n                    <div key={p.id}>\n                        {indexOfFørstePeriodeEtterFødsel === index ? (\n                            <FamiliehendelsedatoDisplay barn={barn} familiehendelsedato={familiehendelsesdato} />\n                        ) : null}\n                        {barnFraNesteSak !== undefined &&\n                        indexOfSistePeriodeFørNyStøndasperiodeNyttBarn !== undefined &&\n                        indexOfSistePeriodeFørNyStøndasperiodeNyttBarn === index ? (\n                            <Block padBottom=\"s\">\n                                <Alert className=\"nyStønadsperiodeNesteSak\" variant=\"info\">\n                                    <FormattedMessage\n                                        id=\"uttaksplan.periodeliste.info.nyStønadsperiodeNesteSak\"\n                                        values={{\n                                            datoStønadsperiodeNyttBarn: formatDate(\n                                                barnFraNesteSak.startdatoFørsteStønadsperiode,\n                                            ),\n                                        }}\n                                    />\n                                </Alert>\n                            </Block>\n                        ) : null}\n                        <PeriodelisteItem\n                            key={p.id}\n                            egenPeriode={!isInfoPeriode(p)}\n                            periode={p}\n                            isOpen={openPeriodeId === p.id}\n                            toggleIsOpen={toggleIsOpen}\n                            familiehendelsesdato={familiehendelsesdato}\n                            handleUpdatePeriode={handleUpdatePeriode}\n                            stønadskontoer={stønadskontoer}\n                            navnPåForeldre={navnPåForeldre}\n                            annenForelder={annenForelder}\n                            arbeidsforhold={arbeidsforhold}\n                            handleDeletePeriode={handleDeletePeriode}\n                            erFarEllerMedmor={erFarEllerMedmor}\n                            erFlerbarnssøknad={erFlerbarnssøknad}\n                            erAleneOmOmsorg={erAleneOmOmsorg}\n                            erDeltUttak={erDeltUttak}\n                            situasjon={situasjon}\n                            meldinger={meldingerPerPeriode[p.id]}\n                            erMorUfør={erMorUfør}\n                            annenForelderSamtidigUttakPeriode={getAnnenForelderSamtidigUttakPeriode(p, uttaksplan)}\n                            søkerErFarEllerMedmorOgKunDeHarRett={søkerErFarEllerMedmorOgKunDeHarRett}\n                            setPerioderErGyldige={setPerioderErGyldige}\n                            erEndringssøknad={erEndringssøknad}\n                            termindato={termindato}\n                            antallBarn={antallBarn}\n                            utsettelserIPlan={utsettelserIPlan}\n                            intl={intl}\n                            periodeErGyldig={periodeErGyldig}\n                            saveAttachment={saveAttachment}\n                        />\n                        {erAllePerioderIPlanenFørFødsel && index === uttaksplan.length - 1 ? (\n                            <FamiliehendelsedatoDisplay barn={barn} familiehendelsedato={familiehendelsesdato} />\n                        ) : null}\n                        {barnFraNesteSak !== undefined &&\n                        index === uttaksplan.length - 1 &&\n                        indexOfSistePeriodeFørNyStøndasperiodeNyttBarn === uttaksplan.length ? (\n                            <Block padBottom=\"s\">\n                                <Alert className=\"nyStønadsperiodeNesteSak\" variant=\"info\">\n                                    <FormattedMessage\n                                        id=\"uttaksplan.periodeliste.info.nyStønadsperiodeNesteSak\"\n                                        values={{\n                                            datoStønadsperiodeNyttBarn: formatDate(\n                                                barnFraNesteSak.startdatoFørsteStønadsperiode,\n                                            ),\n                                        }}\n                                    />\n                                </Alert>\n                            </Block>\n                        ) : null}\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n\nexport default Periodeliste;\n","import {\n    bemUtils,\n    InfoBlock,\n    intlUtils,\n    Block,\n    ActionLink,\n    NavnPåForeldre,\n    Situasjon,\n    TilgjengeligStønadskonto,\n    Arbeidsforhold,\n    Barn,\n    BarnFraNesteSak,\n    AnnenForelder,\n    isAnnenForelderOppgitt,\n    Periode,\n    Periodene,\n    Utsettelsesperiode,\n    Attachment,\n    PeriodeValidState,\n} from '@navikt/fp-common';\nimport { FunctionComponent, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport NyPeriode from '../uttaks-forms/ny-periode/NyPeriode';\nimport Periodeliste from './../periodeliste/Periodeliste';\nimport { Button, Heading } from '@navikt/ds-react';\n\nimport './planlegger.less';\nimport { VeiledermeldingerPerPeriode } from '../../validering/veilederInfo/types';\n\ninterface Props {\n    uttaksplan: Periode[];\n    familiehendelsesdato: Date;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n    stønadskontoer: TilgjengeligStønadskonto[];\n    navnPåForeldre: NavnPåForeldre;\n    annenForelder: AnnenForelder;\n    arbeidsforhold: Arbeidsforhold[];\n    handleDeletePeriode: (periodeId: string) => void;\n    handleAddPeriode: (nyPeriode: Periode, familiehendelsedato: Date) => void;\n    erFarEllerMedmor: boolean;\n    erFlerbarnssøknad: boolean;\n    erAleneOmOmsorg: boolean;\n    erDeltUttak: boolean;\n    situasjon: Situasjon;\n    meldingerPerPeriode: VeiledermeldingerPerPeriode;\n    erMorUfør: boolean;\n    setPerioderErGyldige: React.Dispatch<React.SetStateAction<PeriodeValidState[]>>;\n    erEndringssøknad: boolean;\n    setSlettUttaksplanModalOpen: (isOpen: boolean) => void;\n    setResetUttaksplanModalOpen: (isOpen: boolean) => void;\n    termindato: Date | undefined;\n    barn: Barn;\n    utsettelserIPlan: Utsettelsesperiode[];\n    barnFraNesteSak: BarnFraNesteSak | undefined;\n    perioderErGyldige: PeriodeValidState[];\n    saveAttachment: (vedlegg: Attachment) => void;\n}\n\nconst Planlegger: FunctionComponent<Props> = ({\n    uttaksplan,\n    familiehendelsesdato,\n    handleUpdatePeriode,\n    stønadskontoer,\n    navnPåForeldre,\n    annenForelder,\n    arbeidsforhold,\n    handleDeletePeriode,\n    handleAddPeriode,\n    erFarEllerMedmor,\n    erFlerbarnssøknad,\n    erAleneOmOmsorg,\n    erDeltUttak,\n    situasjon,\n    meldingerPerPeriode,\n    erMorUfør,\n    setPerioderErGyldige,\n    erEndringssøknad,\n    setSlettUttaksplanModalOpen,\n    setResetUttaksplanModalOpen,\n    termindato,\n    barn,\n    utsettelserIPlan,\n    barnFraNesteSak,\n    perioderErGyldige,\n    saveAttachment,\n}) => {\n    const intl = useIntl();\n    const bem = bemUtils('planlegger');\n    const [nyPeriodeFormIsVisible, setNyPeriodeFormIsVisible] = useState(false);\n    const [isUtsettelse, setIsUtsettelse] = useState(false);\n    const nesteLedigeUttaksdato = Periodene(uttaksplan).getFørsteUttaksdagEtterSistePeriode();\n    const annenForelderErOppgitMenHarIkkeRett =\n        isAnnenForelderOppgitt(annenForelder) &&\n        !annenForelder.harRettPåForeldrepengerINorge &&\n        !annenForelder.harRettPåForeldrepengerIEØS;\n    const søkerErFarEllerMedmorOgKunDeHarRett =\n        erFarEllerMedmor && !erAleneOmOmsorg && annenForelderErOppgitMenHarIkkeRett;\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <InfoBlock>\n                    <Block padBottom=\"xl\">\n                        <section>\n                            <div className={bem.element('tittel')}>\n                                <div className={bem.element('tittelLinkWrapper')}>\n                                    <Heading size=\"medium\">{intlUtils(intl, 'uttaksplan.dinPlan')}</Heading>\n                                    {erEndringssøknad && (\n                                        <ActionLink\n                                            onClick={() => setResetUttaksplanModalOpen(true)}\n                                            className={bem.element('resetPlan')}\n                                        >\n                                            <FormattedMessage id=\"uttaksplan.resetPlan.tittel\" />\n                                        </ActionLink>\n                                    )}\n                                    <ActionLink\n                                        onClick={() => setSlettUttaksplanModalOpen(true)}\n                                        className={bem.element('slettPlan')}\n                                    >\n                                        <FormattedMessage id=\"uttaksplan.slettPlan.tittel\" />\n                                    </ActionLink>\n                                </div>\n                            </div>\n\n                            <Periodeliste\n                                uttaksplan={uttaksplan}\n                                familiehendelsesdato={familiehendelsesdato}\n                                handleUpdatePeriode={handleUpdatePeriode}\n                                stønadskontoer={stønadskontoer}\n                                navnPåForeldre={navnPåForeldre}\n                                annenForelder={annenForelder}\n                                arbeidsforhold={arbeidsforhold}\n                                handleDeletePeriode={handleDeletePeriode}\n                                erFarEllerMedmor={erFarEllerMedmor}\n                                erFlerbarnssøknad={erFlerbarnssøknad}\n                                erAleneOmOmsorg={erAleneOmOmsorg}\n                                erDeltUttak={erDeltUttak}\n                                situasjon={situasjon}\n                                meldingerPerPeriode={meldingerPerPeriode}\n                                erMorUfør={erMorUfør}\n                                søkerErFarEllerMedmorOgKunDeHarRett={søkerErFarEllerMedmorOgKunDeHarRett}\n                                setPerioderErGyldige={setPerioderErGyldige}\n                                erEndringssøknad={erEndringssøknad}\n                                termindato={termindato}\n                                antallBarn={barn.antallBarn}\n                                utsettelserIPlan={utsettelserIPlan}\n                                barn={barn}\n                                barnFraNesteSak={barnFraNesteSak}\n                                intl={intl}\n                                perioderErGyldige={perioderErGyldige}\n                                saveAttachment={saveAttachment}\n                            />\n                        </section>\n                    </Block>\n                    {nyPeriodeFormIsVisible && (\n                        <div style={{ backgroundColor: 'white', padding: '1rem' }}>\n                            <NyPeriode\n                                setNyPeriodeFormIsVisible={setNyPeriodeFormIsVisible}\n                                annenForelder={annenForelder}\n                                arbeidsforhold={arbeidsforhold}\n                                familiehendelsesdato={familiehendelsesdato}\n                                isUtsettelse={isUtsettelse}\n                                navnPåForeldre={navnPåForeldre}\n                                stønadskontoer={stønadskontoer}\n                                handleAddPeriode={handleAddPeriode}\n                                erFarEllerMedmor={erFarEllerMedmor}\n                                erFlerbarnssøknad={erFlerbarnssøknad}\n                                erAleneOmOmsorg={erAleneOmOmsorg}\n                                erDeltUttak={erDeltUttak}\n                                situasjon={situasjon}\n                                erMorUfør={erMorUfør}\n                                setPerioderErGyldige={setPerioderErGyldige}\n                                nesteLedigeUttaksdato={nesteLedigeUttaksdato}\n                                søkerErFarEllerMedmorOgKunDeHarRett={søkerErFarEllerMedmorOgKunDeHarRett}\n                                erEndringssøknad={erEndringssøknad}\n                                termindato={termindato}\n                                antallBarn={barn.antallBarn}\n                                utsettelserIPlan={utsettelserIPlan}\n                                intl={intl}\n                                saveAttachment={saveAttachment}\n                            />\n                        </div>\n                    )}\n                </InfoBlock>\n            </Block>\n            {!nyPeriodeFormIsVisible && (\n                <Block padBottom=\"l\">\n                    <div className={bem.element('knapperad')}>\n                        <Button\n                            type=\"button\"\n                            variant=\"secondary\"\n                            onClick={() => {\n                                setNyPeriodeFormIsVisible(true);\n                                setIsUtsettelse(false);\n                            }}\n                        >\n                            Legg til ny periode\n                        </Button>\n                        <Button\n                            type=\"button\"\n                            variant=\"secondary\"\n                            onClick={() => {\n                                setNyPeriodeFormIsVisible(true);\n                                setIsUtsettelse(true);\n                            }}\n                        >\n                            Legg til utsettelse\n                        </Button>\n                    </div>\n                </Block>\n            )}\n        </>\n    );\n};\n\nexport default Planlegger;\n","import { FunctionComponent } from 'react';\nimport { injectIntl, IntlShape } from 'react-intl';\nimport {\n    bemUtils,\n    getVarighetString,\n    NavnPåForeldre,\n    Situasjon,\n    StønadskontoType,\n    StønadskontoUttak,\n} from '@navikt/fp-common';\nimport { BodyShort } from '@navikt/ds-react';\nimport { getStønadskontoNavn } from '@navikt/fp-common/src/common/utils/stønadskontoerUtils';\nimport './kontostatus.less';\nimport StønadskontoIkon from '../../stønadskonto-ikon/StønadskontoIkon';\n\nexport interface Props {\n    uttak: StønadskontoUttak;\n    navnPåForeldre: NavnPåForeldre;\n    erEndringssøknad: boolean;\n    intl: IntlShape;\n    erFarEllerMedmor: boolean;\n    situasjon: Situasjon;\n    erAleneOmOmsorg: boolean;\n}\n\nconst bem = bemUtils('kontostatus');\n\nconst Kontostatus: FunctionComponent<Props> = ({\n    uttak,\n    navnPåForeldre,\n    erEndringssøknad,\n    intl,\n    erFarEllerMedmor,\n    situasjon,\n    erAleneOmOmsorg,\n}) => {\n    if (erEndringssøknad && uttak.konto === StønadskontoType.ForeldrepengerFørFødsel) {\n        uttak.dager = 0;\n    }\n\n    const varighetString = getVarighetString(uttak.dager, intl);\n    const kontoErOvertrukket = uttak.dager < 0;\n\n    return (\n        <BodyShort className={bem.block} as=\"div\">\n            <div className={bem.element('ikon')} aria-hidden={true} role=\"presentation\">\n                <StønadskontoIkon\n                    konto={uttak.konto}\n                    navnPåForeldre={navnPåForeldre}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    situasjon={situasjon}\n                    erAleneOmOmsorg={erAleneOmOmsorg}\n                />\n            </div>\n            <div className={bem.element('content')}>\n                <div className={kontoErOvertrukket ? bem.element('kontoOvertrukket') : bem.element('konto')}>\n                    {getStønadskontoNavn(intl, uttak.konto, navnPåForeldre, erFarEllerMedmor, erAleneOmOmsorg)}\n                </div>\n                <strong\n                    className={kontoErOvertrukket ? bem.element('dagerOvertrukket') : bem.element('dager')}\n                    data-name={uttak.konto}\n                >\n                    {kontoErOvertrukket ? `- ${varighetString}` : varighetString}\n                </strong>\n            </div>\n        </BodyShort>\n    );\n};\n\nexport default injectIntl(Kontostatus);\n","import * as React from 'react';\nimport { bemUtils } from '@navikt/fp-common';\nimport './tilesList.less';\n\nconst bem = bemUtils('tilesList');\n\nconst TilesList: React.FunctionComponent<{ columns?: 1 | 2 | 3 | 'flex'; children?: React.ReactNode }> = ({\n    columns = 3,\n    children,\n}) => (\n    <ol className={bem.classNames(bem.block, bem.modifier(`columns-${columns}`))}>\n        {React.Children.map(children, (child) => (\n            <li className={bem.element('tile')}>{child}</li>\n        ))}\n    </ol>\n);\n\nexport default TilesList;\n","import {\n    Forelder,\n    Periode,\n    Periodene,\n    StønadskontoType,\n    StønadskontoUttak,\n    TilgjengeligStønadskonto,\n    Uttaksperiode,\n    beregnBrukteUttaksdager,\n    getAllePerioderMedUttaksinfoFraUttaksplan,\n    isUttaksperiode,\n} from '@navikt/fp-common';\n\ninterface ForeldersBrukteDager {\n    førTermin: StønadskontoUttak[];\n    etterTermin: StønadskontoUttak[];\n    alle: StønadskontoUttak[];\n    dagerTotalt: number;\n    dagerEgneKvoter: number;\n    dagerAnnenForeldersKvote: number;\n    dagerFellesperiode: number;\n}\n\nexport interface BrukteDager {\n    mor: ForeldersBrukteDager;\n    farMedmor: ForeldersBrukteDager;\n    alle: StønadskontoUttak[];\n}\n\nconst isMorsPeriode = (periode: Uttaksperiode): boolean => {\n    return periode.forelder === Forelder.mor;\n};\nconst isFarsPeriode = (periode: Uttaksperiode): boolean => {\n    return periode.forelder === Forelder.farMedmor;\n};\nconst isFellesperiodeKvote = (uttak: StønadskontoUttak): boolean => uttak.konto === StønadskontoType.Fellesperiode;\n\nconst isMorsKvote = (uttak: StønadskontoUttak): boolean => {\n    switch (uttak.konto) {\n        case StønadskontoType.ForeldrepengerFørFødsel:\n        case StønadskontoType.Mødrekvote:\n            return true;\n        default:\n            return false;\n    }\n};\n\nconst isFarMedmorsKvote = (uttak: StønadskontoUttak): boolean => {\n    return uttak.konto === StønadskontoType.Fedrekvote;\n};\n\nconst summerBrukteUttaksdager = (uttak: StønadskontoUttak[]) => {\n    return uttak.reduce((dager, u) => dager + u.dager, 0);\n};\n\nconst getBrukteDagerForForelder = (\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    perioder: Uttaksperiode[],\n    familiehendelsesdato: Date,\n    forelder: Forelder,\n): ForeldersBrukteDager => {\n    const perioderFørTermin = Periodene(perioder)\n        .getPerioderFørFamiliehendelsesdato(familiehendelsesdato)\n        .filter(isUttaksperiode);\n    const perioderEtterTermin = Periodene(perioder)\n        .getPerioderEtterFamiliehendelsesdato(familiehendelsesdato)\n        .filter(isUttaksperiode);\n    const førTermin = beregnBrukteUttaksdager(tilgjengeligeStønadskontoer, perioderFørTermin);\n    const etterTermin = beregnBrukteUttaksdager(tilgjengeligeStønadskontoer, perioderEtterTermin);\n    const alle = beregnBrukteUttaksdager(tilgjengeligeStønadskontoer, perioder);\n    const dagerTotalt = summerBrukteUttaksdager(alle);\n\n    const isMor = forelder === Forelder.mor;\n    const dagerEgneKvoter = summerBrukteUttaksdager(alle.filter(isMor ? isMorsKvote : isFarMedmorsKvote));\n    const dagerOverført = summerBrukteUttaksdager(alle.filter(isMor ? isFarMedmorsKvote : isMorsKvote));\n    const dagerFellesperiode = summerBrukteUttaksdager(alle.filter(isFellesperiodeKvote));\n\n    return {\n        førTermin,\n        etterTermin,\n        alle,\n        dagerTotalt,\n        dagerEgneKvoter,\n        dagerFellesperiode,\n        dagerAnnenForeldersKvote: dagerOverført,\n    };\n};\n\nexport const getBrukteDager = (\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n): BrukteDager => {\n    const perioderMedUttak = getAllePerioderMedUttaksinfoFraUttaksplan(perioder);\n    return {\n        mor: getBrukteDagerForForelder(\n            tilgjengeligeStønadskontoer,\n            perioderMedUttak.filter(isMorsPeriode),\n            familiehendelsesdato,\n            Forelder.mor,\n        ),\n        farMedmor: getBrukteDagerForForelder(\n            tilgjengeligeStønadskontoer,\n            perioderMedUttak.filter(isFarsPeriode),\n            familiehendelsesdato,\n            Forelder.farMedmor,\n        ),\n        alle: beregnBrukteUttaksdager(tilgjengeligeStønadskontoer, perioder),\n    };\n};\n","import {\n    Periode,\n    StønadskontoType,\n    StønadskontoUttak,\n    TilgjengeligStønadskonto,\n    beregnGjenståendeUttaksdager,\n} from '@navikt/fp-common';\n\nexport interface Uttaksstatus {\n    gjelderDagerBrukt: boolean;\n    uttak: StønadskontoUttak[];\n}\n\nexport const getUttaksstatus = ({\n    erDeltUttak,\n    erEndringssøknad,\n    harKomplettUttaksplan,\n    erFarEllerMedmor,\n    tilgjengeligeStønadskontoer,\n    uttaksplan,\n}: UttaksstatusFuncParams): Uttaksstatus => {\n    const gjelderDagerBrukt =\n        (erEndringssøknad && harKomplettUttaksplan !== true) ||\n        (erDeltUttak && erFarEllerMedmor && harKomplettUttaksplan !== true);\n\n    const uttak: StønadskontoUttak[] = beregnGjenståendeUttaksdager(\n        tilgjengeligeStønadskontoer,\n        uttaksplan,\n        gjelderDagerBrukt,\n    );\n    return {\n        gjelderDagerBrukt,\n        uttak: erFarEllerMedmor\n            ? uttak.filter((kontouttak) => kontouttak.konto !== StønadskontoType.ForeldrepengerFørFødsel)\n            : uttak,\n    };\n};\n\nexport interface UttaksstatusFuncParams {\n    erDeltUttak: boolean;\n    erEndringssøknad: boolean;\n    harKomplettUttaksplan: boolean;\n    erFarEllerMedmor: boolean;\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[];\n    uttaksplan: Periode[];\n}\n\nexport const getUttaksstatusFunc = ({\n    erDeltUttak,\n    erEndringssøknad,\n    harKomplettUttaksplan,\n    erFarEllerMedmor,\n    tilgjengeligeStønadskontoer,\n    uttaksplan,\n}: UttaksstatusFuncParams): (() => Uttaksstatus) => {\n    return () =>\n        getUttaksstatus({\n            erDeltUttak,\n            erEndringssøknad,\n            harKomplettUttaksplan,\n            erFarEllerMedmor,\n            tilgjengeligeStønadskontoer,\n            uttaksplan,\n        });\n};\n","import { FunctionComponent } from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport {\n    ForelderIkon,\n    ForeldreparSituasjon,\n    NavnPåForeldre,\n    Periode,\n    Personkort,\n    Situasjon,\n    StønadskontoType,\n    StønadskontoUttak,\n    Søkerrolle,\n    TilgjengeligStønadskonto,\n    bemUtils,\n    getSituasjonForelderSvg,\n    getVarighetString,\n    guid,\n    intlUtils,\n    isFarEllerMedmor,\n} from '@navikt/fp-common';\nimport Kontostatus from './konto-status/Kontostatus';\nimport TilesList from './tilesList/TilesList';\nimport './oversiktKvoter.less';\nimport { Heading } from '@navikt/ds-react';\nimport { capitalizeFirstLetter } from '@navikt/fp-common/src/common/utils/stringUtils';\nimport { BrukteDager, getBrukteDager } from '../../utils/brukteDagerUtils';\nimport { Uttaksstatus, getUttaksstatus } from '../../utils/uttaksstatus';\n\nconst bem = bemUtils('oversiktKvoter');\n\nconst filtrerBortAnnenPartsKonto = (\n    uttakskontoer: StønadskontoUttak[],\n    erFarEllerMedmor: boolean,\n): StønadskontoUttak[] => {\n    return erFarEllerMedmor\n        ? uttakskontoer.filter((uttak) => uttak.konto !== StønadskontoType.Mødrekvote)\n        : uttakskontoer.filter((uttak) => uttak.konto !== StønadskontoType.Fedrekvote);\n};\ninterface PropsPerForelder {\n    brukteDagerPerForelder: BrukteDager;\n    erDeltUttakINorge: boolean;\n    foreldreparSituasjon: ForeldreparSituasjon;\n    navnPåForeldre: NavnPåForeldre;\n    søkerErFarEllerMedmor: boolean;\n}\n\nconst OversiktPerForelder: FunctionComponent<PropsPerForelder> = ({\n    brukteDagerPerForelder,\n    erDeltUttakINorge,\n    foreldreparSituasjon,\n    navnPåForeldre,\n    søkerErFarEllerMedmor,\n}) => {\n    const intl = useIntl();\n    const søkerErMor = !søkerErFarEllerMedmor;\n    const svgInfo = getSituasjonForelderSvg(foreldreparSituasjon);\n\n    return (\n        <div className={bem.block}>\n            <div className={bem.element('perForelder')}>\n                <Heading size=\"small\" as=\"h2\" className=\"blokk-xs\">\n                    {intlUtils(intl, 'uttaksplan.oversiktKvoter.tittel.foreldre')}\n                </Heading>\n                <TilesList columns={'flex'}>\n                    {(erDeltUttakINorge || søkerErMor) && (\n                        <Personkort\n                            ikon={<ForelderIkon forelder={svgInfo.mor} />}\n                            tittel={capitalizeFirstLetter(navnPåForeldre.mor)}\n                        >\n                            <strong>{getVarighetString(brukteDagerPerForelder.mor.dagerTotalt, intl)}</strong>\n                        </Personkort>\n                    )}\n                    {(erDeltUttakINorge || søkerErFarEllerMedmor) && (\n                        <Personkort\n                            ikon={<ForelderIkon forelder={svgInfo.farMedmor} />}\n                            tittel={capitalizeFirstLetter(navnPåForeldre.farMedmor)}\n                        >\n                            <strong>{getVarighetString(brukteDagerPerForelder.farMedmor.dagerTotalt, intl)}</strong>\n                        </Personkort>\n                    )}\n                </TilesList>\n            </div>\n        </div>\n    );\n};\n\ninterface PropsPerKvote {\n    erDeltUttakINorge: boolean;\n    navnPåForeldre: NavnPåForeldre;\n    erEndringssøknad: boolean;\n    uttaksstatus: Uttaksstatus;\n    erFarEllerMedmor: boolean;\n    situasjon: Situasjon;\n    erAleneOmOmsorg: boolean;\n}\n\nconst OversiktPerKvote: FunctionComponent<PropsPerKvote> = ({\n    erDeltUttakINorge,\n    navnPåForeldre,\n    erEndringssøknad,\n    uttaksstatus,\n    erFarEllerMedmor,\n    situasjon,\n    erAleneOmOmsorg,\n}) => {\n    const uttakÅVise = erDeltUttakINorge\n        ? uttaksstatus.uttak\n        : filtrerBortAnnenPartsKonto(uttaksstatus.uttak, erFarEllerMedmor);\n    return (\n        <div className={bem.element('perKvote')}>\n            <Heading size=\"small\" as=\"h2\" className=\"blokk-xs\">\n                <FormattedMessage\n                    id={\n                        uttaksstatus.gjelderDagerBrukt\n                            ? 'uttaksplan.oversiktKvoter.tittel.kontoer.brukteDager'\n                            : 'uttaksplan.oversiktKvoter.tittel.kontoer.ikkeBrukteDager'\n                    }\n                    values={{ antall: erDeltUttakINorge ? 2 : 1 }}\n                />\n            </Heading>\n            <TilesList columns={2}>\n                {uttakÅVise.map((uttak) => (\n                    <Kontostatus\n                        key={guid()}\n                        uttak={uttak}\n                        navnPåForeldre={navnPåForeldre}\n                        erEndringssøknad={erEndringssøknad}\n                        erFarEllerMedmor={erFarEllerMedmor}\n                        situasjon={situasjon}\n                        erAleneOmOmsorg={erAleneOmOmsorg}\n                    />\n                ))}\n            </TilesList>\n        </div>\n    );\n};\n\ninterface Props {\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[];\n    uttaksplan: Periode[];\n    erDeltUttak: boolean;\n    foreldreparSituasjon: ForeldreparSituasjon;\n    familiehendelsesdato: Date;\n    annenForelderHarRettINorge: boolean;\n    toTetteReglerGjelder: boolean;\n    intl: IntlShape;\n    rolle: Søkerrolle;\n    erEndringssøknad: boolean;\n    situasjon: Situasjon;\n    erAleneOmOmsorg: boolean;\n    navnPåForeldre: NavnPåForeldre;\n}\n\nconst OversiktKvoter: FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer,\n    uttaksplan,\n    erDeltUttak,\n    foreldreparSituasjon,\n    familiehendelsesdato,\n    annenForelderHarRettINorge,\n    rolle,\n    erEndringssøknad,\n    situasjon,\n    erAleneOmOmsorg,\n    navnPåForeldre,\n}) => {\n    const søkerErFarEllerMedmor = isFarEllerMedmor(rolle);\n    const uttaksstatus = getUttaksstatus({\n        erDeltUttak: erDeltUttak,\n        erEndringssøknad: erEndringssøknad,\n        harKomplettUttaksplan: true,\n        erFarEllerMedmor: søkerErFarEllerMedmor,\n        tilgjengeligeStønadskontoer: tilgjengeligeStønadskontoer,\n        uttaksplan,\n    });\n    const brukteDagerPerForelder = getBrukteDager(tilgjengeligeStønadskontoer, uttaksplan, familiehendelsesdato);\n    const erDeltUttakINorge = erDeltUttak && annenForelderHarRettINorge;\n    return (\n        <div className={bem.block}>\n            <OversiktPerForelder\n                brukteDagerPerForelder={brukteDagerPerForelder}\n                erDeltUttakINorge={erDeltUttakINorge}\n                foreldreparSituasjon={foreldreparSituasjon}\n                navnPåForeldre={navnPåForeldre}\n                søkerErFarEllerMedmor={søkerErFarEllerMedmor}\n            />\n            <OversiktPerKvote\n                erDeltUttakINorge={erDeltUttakINorge}\n                navnPåForeldre={navnPåForeldre}\n                erEndringssøknad={erEndringssøknad}\n                uttaksstatus={uttaksstatus}\n                erFarEllerMedmor={søkerErFarEllerMedmor}\n                situasjon={situasjon}\n                erAleneOmOmsorg={erAleneOmOmsorg}\n            />\n        </div>\n    );\n};\n\nexport default OversiktKvoter;\n","import { Søknadsinfo, isHull, isInfoPeriode, isPeriodeUtenUttak, isValidTidsperiode } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\n\nexport const inneholderUttaksplanPerioderTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    return {\n        passerer:\n            grunnlag.perioder\n                .filter((p) => !isInfoPeriode(p) && !isPeriodeUtenUttak(p) && !isHull(p))\n                .filter((periode) => isValidTidsperiode(periode.tidsperiode)).length > 0,\n    };\n};\n","import {\n    AnnenForelder,\n    Forelder,\n    MorsAktivitet,\n    Situasjon,\n    StønadskontoType,\n    UtsettelseÅrsakType,\n    OverføringÅrsakType,\n    Periode,\n    Periodene,\n    Uttaksdagen,\n    getTidsperiode,\n    Tidsperioden,\n    erPeriodeFørDato,\n    Utsettelsesperiode,\n    Uttaksperiode,\n    andreAugust2022ReglerGjelder,\n    Periodetype,\n    isPeriodeUtenUttak,\n} from '@navikt/fp-common';\nimport { uttaksdatoer } from '../../utils/uttaksdatoerUtils';\n\nconst ANTALL_UTTAKSDAGER_SEKS_UKER = 30;\n\nexport interface InformasjonOmTaptUttakVedUttakEtterSeksUkerFarMedmor {\n    antallUttaksdagerTapt: number;\n    førsteRegistrerteUttaksdag: Date;\n    sisteUttaksdagInnenforSeksUker: Date;\n}\n\nexport const getInformasjonOmTaptUttakVedUttakEtterSeksUkerFarMedmor = (\n    uttaksplan: Periode[],\n    familiehendelsesdato: Date,\n    søkerErFarEllerMedmor: boolean,\n    bareFarMedmorHarRett: boolean,\n    morErUfør: boolean,\n    søkerErFarEllerMedmorOgAnnenForelderKanIkkeOppgis: boolean,\n    søkerErFarEllerMedmorOgErAleneOmOmsorgen: boolean,\n): InformasjonOmTaptUttakVedUttakEtterSeksUkerFarMedmor | undefined => {\n    if (søkerErFarEllerMedmor === false || bareFarMedmorHarRett === false || morErUfør === true) {\n        return undefined;\n    }\n\n    if (søkerErFarEllerMedmorOgAnnenForelderKanIkkeOppgis || søkerErFarEllerMedmorOgErAleneOmOmsorgen) {\n        return undefined;\n    }\n\n    const førstePeriode = Periodene(uttaksplan).getFørstePerioderEtterFamiliehendelsesdato(familiehendelsesdato);\n    if (førstePeriode === undefined) {\n        return undefined;\n    }\n\n    const førsteUttaksdag = Uttaksdagen(familiehendelsesdato).denneEllerNeste();\n    const førsteRegistrerteUttaksdag = førstePeriode.tidsperiode.fom;\n    const sisteUttaksdagInnenforSeksUker = getTidsperiode(førsteUttaksdag, 30).tom;\n    const antallUttaksdager =\n        Tidsperioden({\n            fom: førsteUttaksdag,\n            tom: førsteRegistrerteUttaksdag,\n        }).getAntallUttaksdager() - 1;\n\n    if (antallUttaksdager === undefined || antallUttaksdager <= ANTALL_UTTAKSDAGER_SEKS_UKER) {\n        return undefined;\n    }\n\n    return {\n        antallUttaksdagerTapt: antallUttaksdager - ANTALL_UTTAKSDAGER_SEKS_UKER,\n        førsteRegistrerteUttaksdag,\n        sisteUttaksdagInnenforSeksUker,\n    };\n};\n\nexport const getUgyldigUttakMor = (\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    situasjon: Situasjon,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n    flerbarnsFødsel?: boolean,\n    value?: string,\n): Periode[] => {\n    if (situasjon == 'adopsjon') {\n        return [];\n    }\n\n    const førsteUttaksdag = uttaksdatoer(\n        familiehendelsesdato,\n        erFarEllerMedmor,\n        termindato,\n    ).førsteUttaksdagPåEllerEtterFødsel;\n    const førsteUttaksdagEtterSeksUker = Uttaksdagen(førsteUttaksdag).leggTil(30);\n    const førsteUttaksdagEtterÅtteUker = Uttaksdagen(førsteUttaksdag).leggTil(40);\n\n    let ugyldigUttakRegelFørsteDato: Date;\n    let ugyldigUttakRegelSisteDato: Date;\n\n    if (value === 'førsteSeksUkerForMor') {\n        ugyldigUttakRegelFørsteDato = førsteUttaksdag;\n        ugyldigUttakRegelSisteDato = førsteUttaksdagEtterSeksUker;\n    } else if (value === 'mellomSyvOgÅtteUkerForMor') {\n        ugyldigUttakRegelFørsteDato = førsteUttaksdagEtterSeksUker;\n        ugyldigUttakRegelSisteDato = førsteUttaksdagEtterÅtteUker;\n    }\n\n    const ugyldigPeriode = Periodene(perioder)\n        .getPerioderEtterFamiliehendelsesdato(ugyldigUttakRegelFørsteDato!)\n        .filter((p) => erPeriodeFørDato(p, ugyldigUttakRegelSisteDato));\n\n    let ugyldigeUtsettelser: Utsettelsesperiode[] = [];\n\n    if (value === 'mellomSyvOgÅtteUkerForMor') {\n        ugyldigeUtsettelser = Periodene(ugyldigPeriode)\n            .getUtsettelser()\n            .filter(\n                (p) =>\n                    p.forelder === Forelder.mor &&\n                    (p.årsak === UtsettelseÅrsakType.Ferie || p.årsak === UtsettelseÅrsakType.Arbeid),\n            );\n    } else if (value === 'førsteSeksUkerForMor') {\n        ugyldigeUtsettelser = Periodene(ugyldigPeriode)\n            .getUtsettelser()\n            .filter(\n                (p) =>\n                    p.forelder === Forelder.mor &&\n                    p.årsak !== UtsettelseÅrsakType.InstitusjonSøker &&\n                    p.årsak !== UtsettelseÅrsakType.InstitusjonBarnet &&\n                    p.årsak !== UtsettelseÅrsakType.Sykdom,\n            );\n    }\n    const gradertePerioder = Periodene(ugyldigPeriode)\n        .getUttak()\n        .filter((p) => p.forelder === Forelder.mor && p.gradert === true);\n\n    const flernbarnsPerioder = Periodene(ugyldigPeriode)\n        .getUttak()\n        .filter((p) => p.forelder === Forelder.mor && p.ønskerFlerbarnsdager === true);\n\n    const fellesPerioder = Periodene(ugyldigPeriode)\n        .getUttak()\n        .filter((p) => p.forelder === Forelder.mor && p.konto === StønadskontoType.Fellesperiode);\n\n    let samtidigUttaksperioder: Uttaksperiode[] = [];\n\n    if (!flerbarnsFødsel && flerbarnsFødsel !== undefined && !andreAugust2022ReglerGjelder(familiehendelsesdato)) {\n        samtidigUttaksperioder = Periodene(ugyldigPeriode)\n            .getUttak()\n            .filter((p) => p.forelder === Forelder.mor && p.ønskerSamtidigUttak);\n    }\n\n    return [\n        ...flernbarnsPerioder,\n        ...gradertePerioder,\n        ...ugyldigeUtsettelser,\n        ...fellesPerioder,\n        ...samtidigUttaksperioder,\n    ];\n};\n\nexport const unntakFarFørsteSeksUker = (periode: Uttaksperiode, harMidlertidigOmsorg: boolean) => ({\n    erMorForSykDeFørsteSeksUker: (): boolean => {\n        if (harMidlertidigOmsorg) {\n            return true;\n        }\n\n        if (periode.konto === StønadskontoType.Fellesperiode || periode.konto === StønadskontoType.Foreldrepenger) {\n            return (\n                periode.morsAktivitetIPerioden === MorsAktivitet.Innlagt ||\n                periode.morsAktivitetIPerioden === MorsAktivitet.TrengerHjelp ||\n                periode.erMorForSyk === true\n            );\n        }\n\n        if (periode.konto === StønadskontoType.Fedrekvote || periode.konto === StønadskontoType.AktivitetsfriKvote) {\n            return periode.erMorForSyk === true;\n        }\n\n        return false;\n    },\n    erFlerbarnsukerOgUttakAvFlerbarnsdagerEllerFedrekvote: (antallBarn: number): boolean => {\n        return antallBarn > 1 && periode.ønskerFlerbarnsdager === true;\n    },\n});\n\nconst erFarsUttakFørsteSeksUkerGyldig = (\n    periode: Uttaksperiode,\n    antallBarn: number,\n    harMidlertidigOmsorg: boolean,\n): boolean => {\n    const unntak = unntakFarFørsteSeksUker(periode, harMidlertidigOmsorg);\n    return (\n        unntak.erMorForSykDeFørsteSeksUker() || unntak.erFlerbarnsukerOgUttakAvFlerbarnsdagerEllerFedrekvote(antallBarn)\n    );\n};\n\nexport const getUgyldigUttakFørsteSeksUkerForFarMedmor = (\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    antallBarn: number,\n    situasjon: Situasjon,\n    annenForelder: AnnenForelder,\n    erAleneOmOmsorg: boolean,\n    harMidlertidigOmsorg: boolean,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n): Periode[] => {\n    if (situasjon === 'adopsjon' || annenForelder.kanIkkeOppgis || erAleneOmOmsorg) {\n        return [];\n    }\n\n    const førsteUttaksdag = uttaksdatoer(\n        familiehendelsesdato,\n        erFarEllerMedmor,\n        termindato,\n    ).førsteUttaksdagPåEllerEtterFødsel;\n    const førsteUttaksdagEtterSeksUker = Uttaksdagen(førsteUttaksdag).leggTil(30);\n\n    const farsPerioderInnenforSeksFørsteUker = Periodene(perioder)\n        .getPerioderEtterFamiliehendelsesdato(familiehendelsesdato)\n        .filter((p) => erPeriodeFørDato(p, førsteUttaksdagEtterSeksUker))\n        .filter((p) => p.type !== Periodetype.Hull && !isPeriodeUtenUttak(p) && p.forelder === Forelder.farMedmor);\n\n    const ugyldigeUttak = Periodene(farsPerioderInnenforSeksFørsteUker)\n        .getUttak()\n        .filter((p) => erFarsUttakFørsteSeksUkerGyldig(p, antallBarn, harMidlertidigOmsorg) === false);\n\n    const ugyldigeOverføringer = Periodene(farsPerioderInnenforSeksFørsteUker)\n        .getOverføringer()\n        .filter(\n            (p) =>\n                p.årsak !== OverføringÅrsakType.institusjonsoppholdAnnenForelder &&\n                p.årsak !== OverføringÅrsakType.sykdomAnnenForelder,\n        );\n\n    const ugyldigeUtsettelser = Periodene(farsPerioderInnenforSeksFørsteUker)\n        .getUtsettelser()\n        .filter((utsettelse) => utsettelse.årsak !== UtsettelseÅrsakType.InstitusjonBarnet);\n\n    return [...ugyldigeUttak, ...ugyldigeOverføringer, ...ugyldigeUtsettelser];\n};\n","import { Søknadsinfo, andreAugust2022ReglerGjelder } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { getUgyldigUttakMor } from '../utils/uttakValideringUtils';\n\nexport const harMorSøktUgyldigUttakFørsteSeksUkerTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const søkerErMor = !grunnlag.søkerErFarEllerMedmor;\n    if (søkerErMor) {\n        const ugyldigePerioder = getUgyldigUttakMor(\n            grunnlag.perioder,\n            grunnlag.familiehendelsesdato,\n            grunnlag.søkersituasjon.situasjon,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.termindato,\n            grunnlag.erFlerbarnssøknad,\n            'førsteSeksUkerForMor',\n        );\n        const passerer = ugyldigePerioder.length === 0;\n        return {\n            passerer,\n            info: ugyldigePerioder.map((periode) => ({\n                intlKey: andreAugust2022ReglerGjelder(grunnlag.familiehendelsesdato)\n                    ? 'uttaksplan.validering.feil.morHarSøktUgyldigUttakFørsteSeksUker.etterWLB'\n                    : 'uttaksplan.validering.feil.morHarSøktUgyldigUttakFørsteSeksUker.førWLB',\n                periodeId: periode.id,\n            })),\n        };\n    }\n\n    return { passerer: true };\n};\n","import { IntlShape } from 'react-intl';\nimport { getUttaksstatus } from '../../utils/uttaksstatus';\nimport { RegelTest, RegelTestresultat, RegelTestresultatInfo } from '../utils/types/regelTypes';\nimport { Søknadsinfo, getStønadskontoNavn, getVarighetString } from '@navikt/fp-common';\n\nexport const stønadskontoInneholderForMyeUttakKunSøkerTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const {\n        navnPåForeldre,\n        perioder,\n        stønadskontoer,\n        erDeltUttak,\n        erEndringssøknad,\n        harKomplettUttaksplan,\n        søkerErFarEllerMedmor,\n        søkerErAleneOmOmsorg,\n    } = grunnlag;\n    const stønadskontoerMedForMyeUttak = getUttaksstatus({\n        erDeltUttak,\n        erEndringssøknad,\n        harKomplettUttaksplan,\n        erFarEllerMedmor: søkerErFarEllerMedmor,\n        tilgjengeligeStønadskontoer: stønadskontoer,\n        uttaksplan: perioder,\n    }).uttak.filter((u) => u.dager < 0);\n    return {\n        passerer: stønadskontoerMedForMyeUttak.length === 0,\n        info: stønadskontoerMedForMyeUttak.map(\n            (uttak): RegelTestresultatInfo => ({\n                intlKey: 'uttaksplan.validering.feil.forMyeUttak',\n                values: {\n                    dager: (intl: IntlShape) => getVarighetString(Math.abs(uttak.dager), intl),\n                    konto: (intl: IntlShape) =>\n                        getStønadskontoNavn(\n                            intl,\n                            uttak.konto,\n                            navnPåForeldre,\n                            søkerErFarEllerMedmor,\n                            søkerErAleneOmOmsorg,\n                        ),\n                },\n            }),\n        ),\n    };\n};\n","import { Søknadsinfo, andreAugust2022ReglerGjelder, erPeriodeInnvilget } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { getUgyldigUttakFørsteSeksUkerForFarMedmor } from '../utils/uttakValideringUtils';\n\nexport const harFarMedmorSøktUgyldigUttakEllerUtsettelseFørsteSeksUkerTest: RegelTest = (\n    grunnlag: Søknadsinfo,\n): RegelTestresultat => {\n    const wlbReglerGjelder = andreAugust2022ReglerGjelder(grunnlag.familiehendelsesdato);\n    if (grunnlag.søkerErFarEllerMedmor && !wlbReglerGjelder) {\n        const ugyldigePerioder = getUgyldigUttakFørsteSeksUkerForFarMedmor(\n            grunnlag.perioder.filter((p) => !erPeriodeInnvilget(p)),\n            grunnlag.familiehendelsesdato,\n            grunnlag.antallBarn,\n            grunnlag.søkersituasjon.situasjon,\n            grunnlag.annenForelder,\n            grunnlag.søkerErAleneOmOmsorg,\n            grunnlag.søkerHarMidlertidigOmsorg,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.termindato,\n        );\n        const passerer = ugyldigePerioder.length === 0;\n        return {\n            passerer,\n            info: ugyldigePerioder.map((periode) => ({\n                periodeId: periode.id,\n            })),\n        };\n    }\n\n    return { passerer: true };\n};\n","import { Søknadsinfo, uttaksplanErBareOpphold } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\n\nexport const erUttaksplanBareOppholdTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    return { passerer: uttaksplanErBareOpphold(grunnlag.perioder) === false };\n};\n","import { Søknadsinfo, uttaksplanSlutterMedOpphold } from '@navikt/fp-common';\nimport { RegelTestresultat, RegelTest } from '../utils/types/regelTypes';\n\nexport const slutterUttaksplanMedOppholdTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    return { passerer: uttaksplanSlutterMedOpphold(grunnlag.perioder) === false };\n};\n","import { Søknadsinfo, uttaksplanStarterMedOpphold } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\n\nexport const starterUttaksplanMedOppholdTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    if (grunnlag.erEndringssøknad) {\n        return { passerer: true };\n    }\n\n    return { passerer: uttaksplanStarterMedOpphold(grunnlag.perioder) === false };\n};\n","import { Periode, Søknadsinfo, getFloatFromString, isUttaksperiode } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\n\nconst uttaksplanGraderingStørreEnnSamtidigUttak = (uttaksplan: Periode[]) => {\n    const result = uttaksplan\n        .slice()\n        .filter(\n            (periode) => isUttaksperiode(periode) && periode.ønskerSamtidigUttak === true && periode.gradert === true,\n        )\n        .filter(\n            (periode) =>\n                isUttaksperiode(periode) &&\n                getFloatFromString(periode.stillingsprosent)! + getFloatFromString(periode.samtidigUttakProsent)! >\n                    100.0,\n        );\n\n    return result.length > 0;\n};\n\nexport const erUttaksplanGraderingStørreEnnSamtidigUttakTest: RegelTest = (\n    grunnlag: Søknadsinfo,\n): RegelTestresultat => {\n    return { passerer: uttaksplanGraderingStørreEnnSamtidigUttak(grunnlag.perioder) === false };\n};\n","import { Søknadsinfo } from '@navikt/fp-common';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\n\nexport const tilleggsopplysningerMaxLength = 1000;\n\nexport const maxLengthIsGreaterThanOrEqualToStringLength = (maxLength: number, value: string) => {\n    return value.length <= maxLength;\n};\n\nexport const tilleggsopplysningerErGyldig = (begrunnelse?: string) =>\n    maxLengthIsGreaterThanOrEqualToStringLength(tilleggsopplysningerMaxLength, begrunnelse || '');\n\nexport function erTilleggsopplysningerGyldigTest(grunnlag: Søknadsinfo): RegelTestresultat {\n    const { begrunnelseForSenEndring } = grunnlag.tilleggsopplysninger;\n    const begrunnelseTekst = begrunnelseForSenEndring ? begrunnelseForSenEndring.tekst : '';\n    return tilleggsopplysningerErGyldig(begrunnelseTekst)\n        ? { passerer: true }\n        : {\n              passerer: false,\n              info: {\n                  intlKey: 'uttaksplan.veileder.fritekst.kanIkkeVæreLengreEnn',\n                  values: { maxLength: tilleggsopplysningerMaxLength },\n              },\n          };\n}\n","import { Søknadsinfo, getIllegalChars, validateTextHasLegalChars } from '@navikt/fp-common';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\n\nexport function harTilleggsopplysningerGyldigeCharsTest(grunnlag: Søknadsinfo): RegelTestresultat {\n    const { begrunnelseForSenEndring } = grunnlag.tilleggsopplysninger;\n    const tekst = begrunnelseForSenEndring ? begrunnelseForSenEndring.tekst : '';\n    return validateTextHasLegalChars(tekst)\n        ? { passerer: true }\n        : {\n              passerer: false,\n              info: {\n                  intlKey: 'valideringsfeil.begrunnelseForSenEnding.kanIkkeInneholdeTegn',\n                  values: {\n                      ugyldigeTegn: getIllegalChars(tekst),\n                  },\n              },\n          };\n}\n","import { Søknadsinfo, uttaksplanHarForMangeFlerbarnsdager } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\n\nexport const harUttaksplanForMangeFlerbarnsdagerTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const { perioder, dekningsgrad, antallBarn } = grunnlag;\n    return {\n        passerer:\n            dekningsgrad !== undefined &&\n            uttaksplanHarForMangeFlerbarnsdager(perioder, dekningsgrad, antallBarn) === false,\n    };\n};\n","import { Søknadsinfo, erUttaksdag, isInfoPeriode } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat, RegelTestresultatInfo } from '../utils/types/regelTypes';\n\nexport const inneholderUttaksplanDatoSomIkkeErUttaksdag: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const ugyldigePerioder = grunnlag.perioder\n        .filter((p) => !isInfoPeriode(p))\n        .filter(({ tidsperiode: { fom, tom } }) => erUttaksdag(fom) === false || erUttaksdag(tom) === false);\n\n    return {\n        passerer: ugyldigePerioder.length === 0,\n        info: ugyldigePerioder.map((periode): RegelTestresultatInfo => {\n            return {\n                intlKey: `uttaksplan.validering.feil.${\n                    erUttaksdag(periode.tidsperiode.fom)\n                        ? 'periodeSlutterPåDatoSomIkkeErUttaksdag'\n                        : 'periodeStarterPåDatoSomIkkeErUttaksdag'\n                }`,\n                periodeId: periode.id,\n            };\n        }),\n    };\n};\n","import {\n    AnnenForelder,\n    Attachment,\n    AttachmentType,\n    InnsendingsType,\n    MissingAttachment,\n    MorsAktivitet,\n    Overføringsperiode,\n    OverføringÅrsakType,\n    Periode,\n    PeriodeUtenUttakUtsettelse,\n    Periodetype,\n    Skjemanummer,\n    StønadskontoType,\n    Søknadsinfo,\n    Utsettelsesperiode,\n    UtsettelseÅrsakType,\n    Uttaksperiode,\n    aktivitetskravMorUtil,\n    erÅrsakSykdomEllerInstitusjonsopphold,\n    getMorsAktivitetSkjemanummer,\n    isOverføringsperiode,\n    isUtsettelsesperiode,\n    isUttaksperiode,\n} from '@navikt/fp-common';\nimport { aktivitetskravMorSkalBesvares } from './uttaksskjema/aktivitetskravMorSkalBesvares';\n\nconst createMissingAttachment = (\n    index: number,\n    skjemanummer: Skjemanummer,\n    type: AttachmentType,\n    periodeId?: string,\n): MissingAttachment => {\n    return {\n        index,\n        skjemanummer,\n        type,\n        periodeId,\n    };\n};\n\nconst isAttachmentMissing = (attachments?: Attachment[], type?: AttachmentType): boolean =>\n    attachments === undefined ||\n    attachments.length === 0 ||\n    (type !== undefined && attachments.find((a) => a.type === type) === undefined);\n\nexport const shouldPeriodeHaveAttachment = (\n    periode: Periode,\n    søkerErFarEllerMedmor: boolean,\n    annenForelder: AnnenForelder,\n): boolean => {\n    switch (periode.type) {\n        case Periodetype.Overføring:\n            return dokumentasjonBehøvesForOverføringsperiode(søkerErFarEllerMedmor, periode);\n        case Periodetype.Utsettelse:\n            return dokumentasjonBehøvesForUtsettelsesperiode(\n                periode,\n                aktivitetskravMorUtil.skalBesvaresVedUtsettelse(søkerErFarEllerMedmor, annenForelder),\n            );\n        case Periodetype.Uttak:\n            return dokumentasjonBehøvesForUttaksperiode(periode);\n        default:\n            return false;\n    }\n};\n\nexport const hasPeriodeMissingAttachment = (periode: Periode, søknadsinfo: Søknadsinfo): boolean => {\n    const shouldHave = shouldPeriodeHaveAttachment(\n        periode,\n        søknadsinfo.søkerErFarEllerMedmor,\n        søknadsinfo.annenForelder,\n    );\n\n    return (\n        shouldHave &&\n        isAttachmentMissing(periode.vedlegg?.filter((p) => p.innsendingsType !== InnsendingsType.SEND_SENERE))\n    );\n};\n\nexport const findMissingAttachmentsForPerioder = (søknadsinfo: Søknadsinfo): MissingAttachment[] => {\n    const perioder = søknadsinfo.perioderSomSkalSendesInn;\n    if (!perioder) {\n        return [];\n    }\n    const missingAttachments: MissingAttachment[] = [];\n    for (const periode of perioder) {\n        if (hasPeriodeMissingAttachment(periode, søknadsinfo)) {\n            const index = perioder.indexOf(periode);\n            if (\n                (isUtsettelsesperiode(periode) || isUttaksperiode(periode)) &&\n                missingAttachmentForAktivitetskrav(periode, søknadsinfo)\n            ) {\n                missingAttachments.push(\n                    createMissingAttachment(\n                        index,\n                        getMorsAktivitetSkjemanummer(periode.morsAktivitetIPerioden),\n                        AttachmentType.MORS_AKTIVITET_DOKUMENTASJON,\n                        periode.id,\n                    ),\n                );\n            } else {\n                if (isUtsettelsesperiode(periode)) {\n                    if (periode.årsak === UtsettelseÅrsakType.HvØvelse) {\n                        missingAttachments.push(\n                            createMissingAttachment(\n                                index,\n                                Skjemanummer.HV_ØVELSE,\n                                AttachmentType.HV_ØVELSE,\n                                periode.id,\n                            ),\n                        );\n                    }\n\n                    if (\n                        periode.årsak === UtsettelseÅrsakType.Fri &&\n                        søknadsinfo.søkerErFarEllerMedmor &&\n                        !søknadsinfo.morErUfør &&\n                        !søknadsinfo.morHarRett\n                    ) {\n                        missingAttachments.push(\n                            createMissingAttachment(\n                                index,\n                                Skjemanummer.DOK_MORS_UTDANNING_ARBEID_SYKDOM,\n                                AttachmentType.MORS_AKTIVITET_DOKUMENTASJON,\n                                periode.id,\n                            ),\n                        );\n                    }\n\n                    if (periode.årsak === UtsettelseÅrsakType.NavTiltak) {\n                        missingAttachments.push(\n                            createMissingAttachment(\n                                index,\n                                Skjemanummer.NAV_TILTAK,\n                                AttachmentType.NAV_TILTAK,\n                                periode.id,\n                            ),\n                        );\n                    }\n\n                    if (\n                        periode.årsak === UtsettelseÅrsakType.InstitusjonSøker ||\n                        periode.årsak === UtsettelseÅrsakType.InstitusjonBarnet\n                    ) {\n                        missingAttachments.push(\n                            createMissingAttachment(\n                                index,\n                                Skjemanummer.DOK_INNLEGGELSE,\n                                AttachmentType.UTSETTELSE_SYKDOM,\n                                periode.id,\n                            ),\n                        );\n                    }\n\n                    if (periode.årsak === UtsettelseÅrsakType.Sykdom) {\n                        missingAttachments.push(\n                            createMissingAttachment(\n                                index,\n                                Skjemanummer.DOK_OVERFØRING_FOR_SYK,\n                                AttachmentType.UTSETTELSE_SYKDOM,\n                                periode.id,\n                            ),\n                        );\n                    }\n                }\n\n                if (isOverføringsperiode(periode)) {\n                    if (\n                        periode.årsak === OverføringÅrsakType.institusjonsoppholdAnnenForelder ||\n                        periode.årsak === OverføringÅrsakType.sykdomAnnenForelder\n                    ) {\n                        missingAttachments.push(\n                            createMissingAttachment(\n                                index,\n                                Skjemanummer.DOK_OVERFØRING_FOR_SYK,\n                                AttachmentType.OVERFØRING_KVOTE,\n                                periode.id,\n                            ),\n                        );\n                    }\n                }\n\n                if (isUttaksperiode(periode)) {\n                    if (periode.konto === StønadskontoType.Fedrekvote && periode.erMorForSyk === true) {\n                        missingAttachments.push(\n                            createMissingAttachment(\n                                index,\n                                Skjemanummer.DOK_MORS_UTDANNING_ARBEID_SYKDOM,\n                                AttachmentType.UTSETTELSE_SYKDOM,\n                                periode.id,\n                            ),\n                        );\n                    }\n                }\n            }\n        }\n    }\n    return missingAttachments;\n};\n\nconst dokumentasjonBehøvesForUttaksperiode = (periode: Uttaksperiode): boolean => {\n    if (periode.harIkkeAktivitetskrav) {\n        return false;\n    }\n\n    return (\n        (periode.morsAktivitetIPerioden !== undefined && periode.morsAktivitetIPerioden !== MorsAktivitet.Uføre) ||\n        (periode.konto === StønadskontoType.Fedrekvote && periode.erMorForSyk === true)\n    );\n};\n\nconst dokumentasjonBehøvesForUtsettelsesperiode = (\n    { årsak }: Utsettelsesperiode | PeriodeUtenUttakUtsettelse,\n    harMorAktivitetskrav: boolean,\n): boolean => {\n    return (\n        harMorAktivitetskrav ||\n        erÅrsakSykdomEllerInstitusjonsopphold(årsak) ||\n        årsak === UtsettelseÅrsakType.HvØvelse ||\n        årsak === UtsettelseÅrsakType.NavTiltak\n    );\n};\n\nexport const dokumentasjonBehøvesForOverføringsperiode = (\n    erFarEllerMedmor: boolean,\n    periode: Overføringsperiode,\n): boolean =>\n    (erFarEllerMedmor || periode.årsak !== OverføringÅrsakType.aleneomsorg) &&\n    periode.årsak !== OverføringÅrsakType.ikkeRettAnnenForelder;\n\nconst missingAttachmentForAktivitetskrav = (\n    periode: Utsettelsesperiode | Uttaksperiode,\n    søknadsinfo: Søknadsinfo,\n): boolean => {\n    const søkerErMor = !søknadsinfo.søkerErFarEllerMedmor;\n    const ønskerFlerBarnsdager = isUttaksperiode(periode) ? periode.ønskerFlerbarnsdager : undefined;\n    const erSamtidigUttak = isUttaksperiode(periode) ? periode.ønskerSamtidigUttak : undefined;\n    const morErForSyk = isUttaksperiode(periode) ? periode.erMorForSyk : undefined;\n    const konto = isUttaksperiode(periode) ? periode.konto : undefined;\n    return (\n        aktivitetskravMorSkalBesvares(\n            ønskerFlerBarnsdager,\n            erSamtidigUttak,\n            morErForSyk,\n            periode.type,\n            konto,\n            søkerErMor,\n            søknadsinfo.søkerErAleneOmOmsorg,\n            søknadsinfo.annenForelder.kanIkkeOppgis,\n            søknadsinfo.søkerHarMidlertidigOmsorg,\n            periode.tidsperiode,\n            søknadsinfo.familiehendelsesdato,\n            søknadsinfo.termindato,\n            søknadsinfo.søkersituasjon.situasjon,\n            søknadsinfo.stønadskontoer,\n            !søknadsinfo.morHarRett,\n        ) &&\n        isAttachmentMissing(\n            periode.vedlegg?.filter((p) => p.innsendingsType !== InnsendingsType.SEND_SENERE),\n            AttachmentType.MORS_AKTIVITET_DOKUMENTASJON,\n        )\n    );\n};\n","import dayjs from 'dayjs';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { MissingAttachment, Søknadsinfo, isInfoPeriode, sorterPerioder } from '@navikt/fp-common';\nimport { findMissingAttachmentsForPerioder } from '../../utils/manglendeVedleggUtils';\n\nexport const harPerioderManglendeVedleggTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const manglendeVedlegg: MissingAttachment[] = findMissingAttachmentsForPerioder(grunnlag);\n\n    const førsteUttaksEllerUttsettelsesPeriode = grunnlag.perioder\n        .filter((p) => p.tidsperiode.fom !== undefined && !isInfoPeriode(p))\n        .sort(sorterPerioder)\n        .shift();\n    const erLikEllerMindreEnnFireUkerTilUttaketStarter =\n        førsteUttaksEllerUttsettelsesPeriode !== undefined &&\n        dayjs(førsteUttaksEllerUttsettelsesPeriode.tidsperiode.fom).isSameOrBefore(dayjs().add(4, 'weeks'), 'day');\n    const regelTekst = erLikEllerMindreEnnFireUkerTilUttaketStarter\n        ? 'uttaksplan.validering.info.manglendeVedlegg'\n        : 'uttaksplan.validering.advarsel.forTidligUtenDokumentasjon';\n\n    const passerer = manglendeVedlegg.length === 0;\n    const x: RegelTestresultat = {\n        passerer,\n        info: passerer\n            ? undefined\n            : manglendeVedlegg\n                  .filter((vedlegg) => !!vedlegg.periodeId)\n                  .map((vedlegg) => ({\n                      periodeId: vedlegg.periodeId,\n                      intlKey: regelTekst,\n                  })),\n    };\n    return x;\n};\n","import { RegelTestresultat } from '../utils/types/regelTypes';\nimport {\n    erPeriodeInnvilget,\n    erSenUtsettelsePgaFerieEllerArbeid,\n    Periodetype,\n    Søknadsinfo,\n    UtsettelseÅrsakType,\n} from '@navikt/fp-common';\n\nexport function inneholderSenUtsettelsePgaFerieTest(grunnlag: Søknadsinfo): RegelTestresultat {\n    const seneUtsettelsePgaFerie = grunnlag.perioder\n        .filter((p) => !erPeriodeInnvilget(p, grunnlag.eksisterendeSak))\n        .filter(erSenUtsettelsePgaFerieEllerArbeid)\n        .filter((p) => p.type === Periodetype.Utsettelse && p.årsak === UtsettelseÅrsakType.Ferie);\n\n    const passerer = seneUtsettelsePgaFerie.length === 0;\n    return {\n        passerer,\n        info: seneUtsettelsePgaFerie.map((periode) => ({\n            intlKey: 'uttaksplan.validering.advarsel.planenAdvarerOmUtsettelser.ferie',\n            periodeId: periode.id,\n        })),\n    };\n}\n","import { RegelTestresultat } from '../utils/types/regelTypes';\nimport { getInformasjonOmTaptUttakVedUttakEtterSeksUkerFarMedmor } from '../utils/uttakValideringUtils';\nimport { isUttaksperiode, Periodene, Periodetype, StønadskontoType, Søknadsinfo } from '@navikt/fp-common';\n\nexport function inneholderTapteDagerTest(grunnlag: Søknadsinfo): RegelTestresultat {\n    const { perioder, søkerErFarEllerMedmor } = grunnlag;\n    const infoOmTaptUttakVedUttakEtterSeksUkerFarMedmor = getInformasjonOmTaptUttakVedUttakEtterSeksUkerFarMedmor(\n        perioder,\n        grunnlag.familiehendelsesdato,\n        søkerErFarEllerMedmor,\n        grunnlag.morHarRett === false,\n        grunnlag.morErUfør,\n        !!(søkerErFarEllerMedmor && grunnlag.annenForelder.kanIkkeOppgis),\n        !!(søkerErFarEllerMedmor && grunnlag.søkerErAleneOmOmsorg),\n    );\n\n    const planInneholderTapteDager =\n        Periodene(perioder).getHull().length > 0 || infoOmTaptUttakVedUttakEtterSeksUkerFarMedmor !== undefined;\n\n    const planInneholderAnnetEnnAktivitetsfriKvote = perioder\n        .filter((p) => p.type !== Periodetype.Hull)\n        .some((p) => (isUttaksperiode(p) && p.konto !== StønadskontoType.AktivitetsfriKvote) || !isUttaksperiode(p));\n\n    const passerer = (planInneholderTapteDager && planInneholderAnnetEnnAktivitetsfriKvote) === false;\n\n    return {\n        passerer,\n        info: {\n            intlKey: 'uttaksplan.validering.info.planenInneholderHull',\n        },\n    };\n}\n","import {\n    Periodene,\n    Søknadsinfo,\n    Uttaksdagen,\n    formaterDato,\n    isOverskrivbarPeriode,\n    isUtsettelsesperiode,\n} from '@navikt/fp-common';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\n\nexport function inneholderBareUtsettelserTest(grunnlag: Søknadsinfo): RegelTestresultat {\n    const ikkeOverskrivbarePerioder = grunnlag.perioder.filter((p) => !isOverskrivbarPeriode(p));\n    const inneholderAndrePerioderEnnUtsettelser = ikkeOverskrivbarePerioder.some((p) => !isUtsettelsesperiode(p));\n    const bareUtsettelser = !inneholderAndrePerioderEnnUtsettelser;\n    const passerer = bareUtsettelser === false;\n    const intlKey = grunnlag.erEndringssøknad\n        ? 'uttaksplan.veileder.planenInneholderKunUtsettelser.endringssøknad'\n        : 'uttaksplan.veileder.planenInneholderKunUtsettelser';\n\n    return {\n        passerer,\n        info: {\n            intlKey,\n            values: {\n                sisteDag: formaterDato(\n                    Uttaksdagen(Periodene(grunnlag.perioder).getFørsteUttaksdagEtterSistePeriode()!).forrige(),\n                    'D. MMMM YYYY',\n                ),\n            },\n        },\n    };\n}\n","import { RegelTestresultat } from '../utils/types/regelTypes';\nimport {\n    erPeriodeInnvilget,\n    erSenUtsettelsePgaFerieEllerArbeid,\n    Periodetype,\n    Søknadsinfo,\n    UtsettelseÅrsakType,\n} from '@navikt/fp-common';\n\nexport function inneholderSenUtsettelsePgaArbeidTest(grunnlag: Søknadsinfo): RegelTestresultat {\n    const seneUtsettelserPgaArbeid = grunnlag.perioder\n        .filter((p) => !erPeriodeInnvilget(p, grunnlag.eksisterendeSak))\n        .filter(erSenUtsettelsePgaFerieEllerArbeid)\n        .filter((p) => p.type === Periodetype.Utsettelse && p.årsak === UtsettelseÅrsakType.Arbeid);\n\n    const passerer = seneUtsettelserPgaArbeid.length === 0;\n    return {\n        passerer,\n        info: seneUtsettelserPgaArbeid.map((periode) => ({\n            intlKey: 'uttaksplan.validering.advarsel.planenAdvarerOmUtsettelser.arbeid',\n            periodeId: periode.id,\n        })),\n    };\n}\n","import { IntlShape } from 'react-intl';\nimport { RegelTest, RegelTestresultat, RegelTestresultatInfo } from '../utils/types/regelTypes';\nimport {\n    Periode,\n    Periodene,\n    Søknadsinfo,\n    Tidsperioden,\n    getNavnGenitivEierform,\n    getPeriodeTittel,\n    isAvslåttPeriode,\n    isInfoPeriode,\n    isUttaksperiode,\n} from '@navikt/fp-common';\n\nexport const overskriverEndringerAnnenPartsPerioder: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const eksisterendeUttaksplan =\n        grunnlag.eksisterendeSak !== undefined\n            ? grunnlag.eksisterendeSak.uttaksplan.filter((p) => !isAvslåttPeriode(p))\n            : undefined;\n    const fornavnAnnenForelder = grunnlag.søkerErFarEllerMedmor\n        ? grunnlag.navnPåForeldre.mor\n        : grunnlag.navnPåForeldre.farMedmor;\n    if (eksisterendeUttaksplan) {\n        const perioderSomOverlapper: Periode[] = [];\n        const perioderForSjekk = grunnlag.erEndringssøknad\n            ? grunnlag.perioderSomSkalSendesInn\n            : grunnlag.perioder.filter((p) => !isInfoPeriode(p));\n\n        perioderForSjekk.forEach((periode) => {\n            const overlapp = Periodene(eksisterendeUttaksplan.filter(isInfoPeriode)).finnOverlappendePerioder(periode);\n            if (overlapp.length > 0) {\n                perioderSomOverlapper.push(periode);\n            }\n        });\n\n        const perioderSomOverlapperUtenSamtidigUttak = perioderSomOverlapper.filter(\n            (p) => !(isUttaksperiode(p) && p.ønskerSamtidigUttak),\n        );\n\n        const passerer = perioderSomOverlapperUtenSamtidigUttak.length === 0;\n        return {\n            passerer,\n            info: perioderSomOverlapperUtenSamtidigUttak.map((periode) => {\n                const regelInfo: RegelTestresultatInfo = {\n                    periodeId: periode.id,\n                    intlKey: 'uttaksplan.validering.advarsel.periodeOverskriverAnnenPartsPeriode',\n                    renderAsHtml: true,\n                    values: {\n                        periode: (intl: IntlShape) =>\n                            getPeriodeTittel(\n                                intl,\n                                periode,\n                                grunnlag.navnPåForeldre,\n                                grunnlag.familiehendelsesdato,\n                                grunnlag.termindato,\n                                grunnlag.søkersituasjon.situasjon,\n                            ),\n                        tidsperiode: (intl: IntlShape) => Tidsperioden(periode.tidsperiode).formaterStringKort(intl),\n                        forelder: fornavnAnnenForelder,\n                        forelders: (intl: IntlShape) => getNavnGenitivEierform(fornavnAnnenForelder, intl.locale),\n                        //strong: (_intl: IntlShape) => (msg: any) => <strong>{msg}</strong>, //TODO: strong does not work.\n                        strong: (_intl: IntlShape) => (msg: any) => msg,\n                    },\n                };\n                return regelInfo;\n            }),\n        };\n    }\n\n    return { passerer: true };\n};\n","import { IntlShape } from 'react-intl';\nimport { RegelTest, RegelTestresultat, RegelTestresultatInfo } from '../utils/types/regelTypes';\nimport {\n    Periodene,\n    Søknadsinfo,\n    Tidsperioden,\n    getNavnGenitivEierform,\n    getPeriodeForelderNavn,\n    getPeriodeTittel,\n    isUttakAnnenPart,\n} from '@navikt/fp-common';\n\nexport const overlapperPeriodeAndrePerioder: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const { perioder, navnPåForeldre } = grunnlag;\n    const perioderUtenUttakAnnenPart = perioder.filter((p) => !isUttakAnnenPart(p));\n    const perioderSomHarOverlapp = perioderUtenUttakAnnenPart.filter(\n        (periode) => Periodene(perioderUtenUttakAnnenPart).finnOverlappendePerioder(periode).length > 0,\n    );\n\n    const passerer = perioderSomHarOverlapp.length === 0;\n    return {\n        passerer,\n        info: perioderSomHarOverlapp.map((periode) => {\n            const info: RegelTestresultatInfo = {\n                periodeId: periode.id,\n                intlKey: 'uttaksplan.validering.feil.periodeoverlapp.oppsummering',\n                renderAsHtml: true,\n                values: {\n                    periode: (intl: IntlShape) =>\n                        getPeriodeTittel(\n                            intl,\n                            periode,\n                            navnPåForeldre,\n                            grunnlag.familiehendelsesdato,\n                            grunnlag.termindato,\n                            grunnlag.søkersituasjon.situasjon,\n                        ),\n                    tidsperiode: (intl: IntlShape) => Tidsperioden(periode.tidsperiode).formaterStringKort(intl),\n                    forelder: (intl: IntlShape) =>\n                        getNavnGenitivEierform(getPeriodeForelderNavn(periode, navnPåForeldre), intl.locale),\n                },\n            };\n            return info;\n        }),\n    };\n};\n","import { Dictionary } from 'lodash';\nimport { IntlShape } from 'react-intl';\n\ntype FeilIntlMessage = (intl: IntlShape) => string;\n\nexport enum RegelAlvorlighet {\n    FEIL = 'feil',\n    ADVARSEL = 'advarsel',\n    INFO = 'info',\n}\n\nexport interface UttaksplanRegelTestresultat {\n    resultat: RegelStatus[];\n    avvikPerPeriode: Dictionary<RegelAvvik[]>;\n    avvik: RegelAvvik[];\n    harFeil: boolean;\n}\n\nexport type RegelKategori = 'fordeling' | undefined;\n\nexport interface Regel {\n    key: string;\n    test: RegelTest;\n    alvorlighet: RegelAlvorlighet;\n    overstyresAvRegel?: string;\n    overstyrerRegler?: string[];\n    slåsSammenVedOppsummering?: boolean;\n    skjulesIOppsummering?: boolean;\n    skjulesIPeriode?: boolean;\n    avvikType?: AvvikType;\n    kategori?: RegelKategori;\n}\n\nexport type RegelTest = (grunnlag: any) => RegelTestresultat;\n\nexport interface RegelTestresultat {\n    passerer: boolean;\n    info?: RegelTestresultatInfoObject;\n    periodeId?: string;\n}\n\nexport type RegelTestresultatInfoObject = RegelTestresultatInfo | RegelTestresultatInfo[];\n\nexport interface RegelStatus {\n    key: string;\n    passerer: boolean;\n    regelAvvik?: RegelAvvik[];\n}\n\nexport type AvvikType = 'forretning' | 'skjema';\n\nexport interface RegelAvvik {\n    id: string;\n    regel: Regel;\n    periodeId?: string;\n    info: RegelAvvikInfo;\n}\n\ntype avikValueFunk = (intl: IntlShape) => string;\ntype intlHTMLFragmentFunc = (msg: any) => any;\n\ninterface AvvikInfo {\n    periodeId?: string;\n    values?: {\n        [key: string]: string | number | Date | FeilIntlMessage | avikValueFunk | undefined | intlHTMLFragmentFunc;\n    };\n    renderAsHtml?: boolean;\n}\n\nexport interface RegelAvvikInfo extends AvvikInfo {\n    intlKey: string;\n}\n\nexport interface RegelTestresultatInfo extends AvvikInfo {\n    intlKey?: string;\n}\n","import { IntlShape } from 'react-intl';\nimport { flatten, isArray, uniqBy } from 'lodash';\nimport {\n    UttaksplanRegelTestresultat,\n    RegelAvvik,\n    Regel,\n    RegelTestresultatInfo,\n    RegelStatus,\n    RegelTestresultatInfoObject,\n    RegelAvvikInfo,\n    RegelAlvorlighet,\n} from './types/regelTypes';\nimport { Validator } from './types/validatorTypes';\nimport { guid } from '@navikt/fp-common';\n\nconst getRegelIntlKey = (regel: Regel, intlRegelPrefix: string): string =>\n    `${intlRegelPrefix}.${regel.alvorlighet}.${regel.key}`;\n\nconst alvorlighetSortOrder = {\n    [RegelAlvorlighet.FEIL]: 0,\n    [RegelAlvorlighet.ADVARSEL]: 1,\n    [RegelAlvorlighet.INFO]: 2,\n};\n\nconst sorterAvvik = (a1: RegelAvvik, a2: RegelAvvik): number => {\n    if (a1.regel.alvorlighet === a2.regel.alvorlighet) {\n        return 0;\n    }\n    return alvorlighetSortOrder[a1.regel.alvorlighet] < alvorlighetSortOrder[a2.regel.alvorlighet] ? -1 : 1;\n};\n\nconst ensureRegelAvvikIntlKey = (\n    regel: Regel,\n    intlRegelPrefix: string,\n    info?: Partial<RegelTestresultatInfo>,\n): RegelAvvikInfo => ({\n    ...info,\n    intlKey: info ? info.intlKey || getRegelIntlKey(regel, intlRegelPrefix) : getRegelIntlKey(regel, intlRegelPrefix),\n});\n\nconst overstyresAvFilter = (avvik: RegelAvvik, _idx: number, alleAvvik: RegelAvvik[]): boolean => {\n    return (\n        avvik.regel.overstyresAvRegel === undefined &&\n        alleAvvik.some((b2) => b2.regel.key === avvik.regel.overstyresAvRegel) === false\n    );\n};\n\nconst overstyrerAndreFilter = (avvik: RegelAvvik, _idx: number, alleAvvik: RegelAvvik[]): boolean => {\n    const overstyresAvAndre = alleAvvik.some((rb) =>\n        rb.regel.overstyrerRegler\n            ? rb.regel.overstyrerRegler.some((rbo) => {\n                  return rbo === avvik.regel.key;\n              })\n            : false,\n    );\n    return overstyresAvAndre === false;\n};\n\nexport const regelHarAvvik = (\n    regel: Regel,\n    intlRegelPrefix: string,\n    info?: RegelTestresultatInfoObject,\n    periodeId?: string,\n): RegelStatus => {\n    const mapInfoToRegelAvvik = (i?: Partial<RegelTestresultatInfo>): RegelAvvik => ({\n        id: guid(),\n        regel,\n        info: ensureRegelAvvikIntlKey(regel, intlRegelPrefix, i),\n        periodeId: i ? i.periodeId : periodeId,\n    });\n    const regelAvvik: RegelAvvik[] = [];\n    if (isArray(info)) {\n        info.forEach((i) => regelAvvik.push(mapInfoToRegelAvvik(i)));\n    } else {\n        regelAvvik.push(mapInfoToRegelAvvik(info));\n    }\n    return {\n        key: regel.key,\n        passerer: false,\n        regelAvvik,\n    };\n};\n\nexport const regelPasserer = (regel: Regel): RegelStatus => ({\n    key: regel.key,\n    passerer: true,\n});\n\nexport const getRegelAvvikForPeriode = (resultat: UttaksplanRegelTestresultat, periodeId: string): RegelAvvik[] => {\n    return resultat && resultat.avvikPerPeriode[periodeId] ? resultat.avvikPerPeriode[periodeId] : [];\n};\n\nexport const getRegelAvvik = (resultat: RegelStatus[]): RegelAvvik[] => {\n    if (resultat) {\n        return flatten(\n            resultat.filter((r) => r.passerer === false && r.regelAvvik !== undefined).map((r) => r.regelAvvik!),\n        ).sort(sorterAvvik);\n    }\n    return [];\n};\n\nexport const isRegelFeil = (regelAvvik: RegelAvvik): boolean => regelAvvik.regel.alvorlighet === RegelAlvorlighet.FEIL;\n\nexport const hasRegelFeil = (avvik: RegelAvvik[] = []) => avvik.some((a) => isRegelFeil(a));\n\nexport const trimRelaterteRegelAvvik = (avvik: RegelAvvik[], grupperAvvik: boolean): RegelAvvik[] => {\n    return grupperAvvik\n        ? uniqBy(avvik.filter(overstyresAvFilter).filter(overstyrerAndreFilter), (a) => {\n              return a.regel.slåsSammenVedOppsummering ? a.regel.key : guid();\n          })\n        : avvik.filter(overstyresAvFilter).filter(overstyrerAndreFilter);\n};\n\nexport const getRegelIntlValues = (\n    intl: IntlShape,\n    info: RegelTestresultatInfo,\n): { [key: string]: string } | undefined => {\n    const { values } = info;\n    if (values === undefined) {\n        return undefined;\n    }\n    const newValues: { [key: string]: string } = {};\n    Object.keys(values).forEach((key) => {\n        const valueOrFunc = values[key];\n        if (valueOrFunc) {\n            newValues[key] = typeof valueOrFunc === 'function' ? valueOrFunc(intl) : `${valueOrFunc}`;\n        }\n    });\n    return newValues;\n};\n\nexport const hasValueRule = (v: any, failText: string): Validator => ({\n    test: () => v !== undefined && v !== '',\n    failText,\n});\n","import {\n    getFloatFromString,\n    intlUtils,\n    samtidigUttakProsentIsMax100,\n    stillingsprosentIsLessThan100,\n    stillingsprosentIsMoreThan0,\n} from '@navikt/fp-common';\nimport { IntlShape } from 'react-intl';\nimport { hasValueRule } from './regelUtils';\nimport { Validator } from './types/validatorTypes';\n\nexport const getStillingsprosentRegler = (\n    erSamtidigUttak: boolean,\n    stillingsprosent: string,\n    intl?: IntlShape,\n): Validator[] => {\n    const intlKey = 'valideringsfeil.stillingsprosent';\n    return [\n        hasValueRule(stillingsprosent, intl ? intlUtils(intl, `${intlKey}.required`) : ''),\n        {\n            test: () => getFloatFromString(stillingsprosent) !== undefined,\n            failText: intl ? intlUtils(intl, `${intlKey}.ugyldigTall`) : '',\n        },\n        {\n            test: () => stillingsprosentIsMoreThan0(stillingsprosent),\n            failText: intl ? intlUtils(intl, `${intlKey}.under1`) : '',\n        },\n        {\n            test: () =>\n                erSamtidigUttak\n                    ? samtidigUttakProsentIsMax100(stillingsprosent)\n                    : stillingsprosentIsLessThan100(stillingsprosent),\n            failText: intl ? intlUtils(intl, `${intlKey}.over100prosent`) : '',\n        },\n    ];\n};\n","import { Periode, Periodetype } from '@navikt/fp-common';\nimport { getStillingsprosentRegler } from './stillingsprosentValideringUtils';\n\nexport const gradertUttaksperiodeErUgyldig = (periode: Periode) => {\n    if (periode.type === Periodetype.Uttak) {\n        const { gradert, stillingsprosent } = periode;\n        if (gradert === true) {\n            const regler = getStillingsprosentRegler(false, stillingsprosent || '');\n            const results = regler.map((regel) => regel.test() === true);\n            return results.some((erGyldig) => erGyldig === false);\n        }\n    }\n    return false;\n};\n\nexport const samtidigUttaksperiodeErUgyldig = (periode: Periode, søkerErFarEllerMedmor: boolean) => {\n    if (periode.type === Periodetype.Uttak) {\n        const { ønskerSamtidigUttak, samtidigUttakProsent } = periode;\n        if (ønskerSamtidigUttak === true && søkerErFarEllerMedmor) {\n            const regler = getStillingsprosentRegler(true, samtidigUttakProsent || '');\n            const results = regler.map((regel) => regel.test() === true);\n            return results.some((erGyldig) => erGyldig === false);\n        }\n    }\n    return false;\n};\n","import { gradertUttaksperiodeErUgyldig } from '../../utils/periodeValideringUtils';\nimport { Søknadsinfo } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../../utils/types/regelTypes';\n\nexport const harUttaksperiodeGyldigGradering: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const ugyldigePerioder = grunnlag.perioder.filter(gradertUttaksperiodeErUgyldig);\n    return {\n        passerer: ugyldigePerioder.length === 0,\n        info: ugyldigePerioder.map((periode) => ({\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { ValidationResult, ValidationTestVerdict, Validator } from './types/validatorTypes';\n\nexport const runValidators = (validators: Validator[] | undefined, inputName: string): ValidationResult => {\n    if (validators === undefined) {\n        return {\n            name: inputName,\n            tests: [],\n            valid: true,\n        };\n    }\n    const results: Validator[] = validators.filter((validator) => {\n        return validator.test() === false;\n    });\n\n    const valid = results.length === 0;\n    const tests: ValidationTestVerdict[] = valid === false ? [{ verdict: false, failText: results[0].failText }] : [];\n\n    return {\n        name: inputName,\n        tests,\n        valid,\n    };\n};\n\nexport const allValidatorsPass = (validators: Validator[] | undefined): boolean =>\n    validators === undefined ? true : runValidators(validators, 'group').valid;\n","import {\n    Periode,\n    TidsperiodeDate,\n    UtsettelseFormPeriodeType,\n    Uttaksdagen,\n    isForeldrepengerFørFødselUttaksperiode,\n    isValidTidsperiode,\n} from '@navikt/fp-common';\nimport dayjs from 'dayjs';\nimport { DatoValidatorer, Validator } from './types/validatorTypes';\nimport { allValidatorsPass } from './validatorUtils';\nimport { uttaksdatoer } from '../../utils/uttaksdatoerUtils';\n\ntype DateValue = Date | undefined;\n\nconst erUtfyltTest = (dato: DateValue): Validator => ({\n    test: () => dato !== undefined,\n    failText: { intlKey: `uttaksplan.validering.feil.påkrevd` },\n});\n\nconst erUttaksdagTest = (dato: DateValue) => ({\n    test: () => dato !== undefined && Uttaksdagen(dato).erUttaksdag(),\n    failText: { intlKey: `uttaksplan.validering.feil.datoErIkkeUttaksdag` },\n});\n\nconst slutterInnenforGyldigPermisjonsperiode = (\n    dato: DateValue,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n) => ({\n    test: () =>\n        dato !== undefined &&\n        dayjs(dato).isSameOrBefore(\n            uttaksdatoer(familiehendelsesdato, erFarEllerMedmor, termindato).sisteMuligeUttaksdagEtterTermin,\n            'day',\n        ),\n    failText: { intlKey: 'uttaksplan.validering.feil.etterSistePermisjonsdag' },\n});\n\nconst starterInnenforGyldigAntallUkerFørTermin = (\n    dato: DateValue,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n) => ({\n    test: () =>\n        dato !== undefined &&\n        dayjs(dato).isSameOrAfter(\n            uttaksdatoer(familiehendelsesdato, erFarEllerMedmor, termindato).førsteMuligeUttaksdagFørTermin,\n            'day',\n        ),\n    failText: { intlKey: 'uttaksplan.validering.feil.før12UkerFørTermin' },\n});\n\nexport const getUttakTidsperiodeValidatorer = (\n    skalIkkeHaUttak: boolean,\n    tidsperiode: Partial<TidsperiodeDate>,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n): DatoValidatorer | undefined => {\n    if (skalIkkeHaUttak) {\n        return undefined;\n    }\n\n    const { fom, tom } = tidsperiode;\n\n    return {\n        fra: [\n            erUtfyltTest(fom),\n            erUttaksdagTest(fom),\n            starterInnenforGyldigAntallUkerFørTermin(fom, familiehendelsesdato, erFarEllerMedmor, termindato),\n        ],\n        til: [\n            erUtfyltTest(tom),\n            erUttaksdagTest(tom),\n            slutterInnenforGyldigPermisjonsperiode(tom, familiehendelsesdato, erFarEllerMedmor, termindato),\n        ],\n    };\n};\n\nexport const uttakTidsperiodeErGyldig = (\n    uttaksperiode: Periode,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n): boolean => {\n    const { tidsperiode } = uttaksperiode;\n    if (!tidsperiode) {\n        return false;\n    }\n    const skalIkkeHaUttak = isForeldrepengerFørFødselUttaksperiode(uttaksperiode)\n        ? uttaksperiode.skalIkkeHaUttakFørTermin\n        : false;\n\n    if (isValidTidsperiode(tidsperiode) === false && !skalIkkeHaUttak) {\n        return false;\n    }\n    const validators = getUttakTidsperiodeValidatorer(\n        skalIkkeHaUttak,\n        tidsperiode,\n        familiehendelsesdato,\n        erFarEllerMedmor,\n        termindato,\n    );\n    if (validators === undefined) {\n        return true;\n    }\n    const fraDatoErGyldig = allValidatorsPass(validators.fra);\n    const tilDatoErGyldig = allValidatorsPass(validators.til);\n\n    return fraDatoErGyldig && tilDatoErGyldig;\n};\n\nconst getUtsettelseTidsperiodeValidatorer = (\n    tidsperiode: Partial<TidsperiodeDate>,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n): DatoValidatorer | undefined => {\n    return {\n        fra: [erUtfyltTest(tidsperiode.fom), erUttaksdagTest(tidsperiode.fom)],\n        til: [\n            erUtfyltTest(tidsperiode.tom),\n            erUttaksdagTest(tidsperiode.tom),\n            slutterInnenforGyldigPermisjonsperiode(tidsperiode.tom, familiehendelsesdato, erFarEllerMedmor, termindato),\n        ],\n    };\n};\n\nexport const utsettelseTidsperiodeErGyldig = (\n    utsettelesperiode: UtsettelseFormPeriodeType,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n): boolean => {\n    const { tidsperiode } = utsettelesperiode;\n\n    if (isValidTidsperiode(tidsperiode) === false) {\n        return false;\n    }\n    const validators = getUtsettelseTidsperiodeValidatorer(\n        tidsperiode,\n        familiehendelsesdato,\n        erFarEllerMedmor,\n        termindato,\n    );\n    if (validators === undefined) {\n        return true;\n    }\n    const fraDatoErGyldig = allValidatorsPass(validators.fra);\n    const tilDatoErGyldig = allValidatorsPass(validators.til);\n\n    return fraDatoErGyldig && tilDatoErGyldig;\n};\n","import { utsettelseTidsperiodeErGyldig, uttakTidsperiodeErGyldig } from '../../utils/tidsperiodeValideringUtils';\nimport { Periodetype, Søknadsinfo } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../../utils/types/regelTypes';\n\nexport const harPeriodeGyldigTidsperiode: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const perioderMedUgyldigTidsperiode = grunnlag.perioder.filter((periode) => {\n        switch (periode.type) {\n            case Periodetype.Overføring:\n            case Periodetype.Uttak:\n            case Periodetype.Opphold:\n                return (\n                    uttakTidsperiodeErGyldig(\n                        periode,\n                        grunnlag.familiehendelsesdato,\n                        grunnlag.søkerErFarEllerMedmor,\n                        grunnlag.termindato,\n                    ) === false\n                );\n            case Periodetype.Utsettelse:\n                return (\n                    utsettelseTidsperiodeErGyldig(\n                        periode,\n                        grunnlag.familiehendelsesdato,\n                        grunnlag.søkerErFarEllerMedmor,\n                        grunnlag.termindato,\n                    ) === false\n                );\n        }\n        return false;\n    });\n    return {\n        passerer: perioderMedUgyldigTidsperiode.length === 0,\n        info: perioderMedUgyldigTidsperiode.map((periode) => ({\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { Søknadsinfo, isUttaksperiode } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../../utils/types/regelTypes';\n\nexport const harUttaksperiodeStønadskonto: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const uttaksperioderUtenStønadskonto = grunnlag.perioder.filter(\n        (periode) => isUttaksperiode(periode) && periode.konto === undefined,\n    );\n    return {\n        passerer: uttaksperioderUtenStønadskonto.length === 0,\n        info: uttaksperioderUtenStønadskonto.map((periode) => ({\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { Søknadsinfo } from '@navikt/fp-common';\nimport { samtidigUttaksperiodeErUgyldig } from '../../utils/periodeValideringUtils';\nimport { RegelTest, RegelTestresultat } from '../../utils/types/regelTypes';\n\nexport const erSamtidigUttakGyldig: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const perioderMedUgyldigTidsperiode = grunnlag.perioder.filter((periode) =>\n        samtidigUttaksperiodeErUgyldig(periode, grunnlag.søkerErFarEllerMedmor),\n    );\n    return {\n        passerer: perioderMedUgyldigTidsperiode.length === 0,\n        info: perioderMedUgyldigTidsperiode.map((periode) => ({\n            periodeId: periode.id,\n        })),\n    };\n};\n","import dayjs from 'dayjs';\nimport { Søknadsinfo, isUtsettelsesperiode } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../../utils/types/regelTypes';\n\nexport const erUtsettelseEtterFamiliehendelsesdato: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const ugyldigeUtsettelser = grunnlag.perioder\n        .filter(isUtsettelsesperiode)\n        .filter((utsettelse) => dayjs(utsettelse.tidsperiode.fom).isBefore(grunnlag.familiehendelsesdato, 'day'));\n    return {\n        passerer: ugyldigeUtsettelser.length === 0,\n        info: ugyldigeUtsettelser.map((periode) => ({\n            periodeId: periode.id,\n        })),\n    };\n};\n","import {\n    Søknadsinfo,\n    formaterDatoKompakt,\n    getFørsteUttaksdag2UkerFørFødsel,\n    gjelderWLBReglerFarMedmorRundtFødsel,\n    isUttaksperiodeFarMedmorMedValgForUttakRundtFødsel,\n    starterTidsperiodeEtter2UkerFørFødsel,\n} from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../../utils/types/regelTypes';\n\nexport const starterUttaksperiodeRundtFødselEtter2UkerFørFødsel: RegelTest = (\n    grunnlag: Søknadsinfo,\n): RegelTestresultat => {\n    if (\n        !gjelderWLBReglerFarMedmorRundtFødsel(\n            grunnlag.familiehendelsesdato,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.morHarRett,\n            grunnlag.søkersituasjon.situasjon,\n        )\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n\n    const perioderFarMedmorSomStarterFør2UkerFørFødsel = grunnlag.perioder\n        .filter((p) => isUttaksperiodeFarMedmorMedValgForUttakRundtFødsel(p))\n        .filter(\n            (p) =>\n                !starterTidsperiodeEtter2UkerFørFødsel(\n                    p.tidsperiode,\n                    grunnlag.familiehendelsesdato,\n                    grunnlag.termindato,\n                ),\n        );\n\n    const førsteUttaksdagToUkerFørFødsel = formaterDatoKompakt(\n        getFørsteUttaksdag2UkerFørFødsel(grunnlag.familiehendelsesdato, grunnlag.termindato),\n    );\n    return {\n        passerer: perioderFarMedmorSomStarterFør2UkerFørFødsel.length === 0,\n        info: perioderFarMedmorSomStarterFør2UkerFørFødsel.map((periode) => ({\n            intlKey: 'uttaksplan.validering.feil.starterUttaksperiodeRundtFødselEtter2UkerFørFødsel',\n            values: { dato: førsteUttaksdagToUkerFørFødsel },\n            periodeId: periode.id,\n        })),\n    };\n};\n","import {\n    Søknadsinfo,\n    formaterDatoKompakt,\n    getSisteUttaksdag6UkerEtterFødsel,\n    gjelderWLBReglerFarMedmorRundtFødsel,\n    isUttaksperiodeFarMedmorPgaFødsel,\n    slutterTidsperiodeInnen6UkerEtterFødsel,\n} from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../../utils/types/regelTypes';\n\nexport const slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel: RegelTest = (\n    grunnlag: Søknadsinfo,\n): RegelTestresultat => {\n    if (\n        !gjelderWLBReglerFarMedmorRundtFødsel(\n            grunnlag.familiehendelsesdato,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.morHarRett,\n            grunnlag.søkersituasjon.situasjon,\n        )\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n\n    const perioderFarMedmorSomIkkeSlutterFør6UkerEtterFødsel = grunnlag.perioder\n        .filter((p) => isUttaksperiodeFarMedmorPgaFødsel(p, grunnlag.familiehendelsesdato, grunnlag.termindato))\n        .filter((p) => !slutterTidsperiodeInnen6UkerEtterFødsel(p.tidsperiode, grunnlag.familiehendelsesdato));\n\n    const sisteUttaksdagSeksUkerEtterFødsel = formaterDatoKompakt(\n        getSisteUttaksdag6UkerEtterFødsel(grunnlag.familiehendelsesdato),\n    );\n    return {\n        passerer: perioderFarMedmorSomIkkeSlutterFør6UkerEtterFødsel.length === 0,\n        info: perioderFarMedmorSomIkkeSlutterFør6UkerEtterFødsel.map((periode) => ({\n            intlKey: 'uttaksplan.validering.feil.slutterUttaksperiodeRundtFødselEtter6UkerEtterFødsel',\n            values: { dato: sisteUttaksdagSeksUkerEtterFødsel },\n            periodeId: periode.id,\n        })),\n    };\n};\n","import {\n    StønadskontoType,\n    Søknadsinfo,\n    andreAugust2022ReglerGjelder,\n    isUttaksperiode,\n    starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel,\n} from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../../utils/types/regelTypes';\n\nexport const periodeDeFørsteSeksUkeneHarUlovligUttakBFHR: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    if (\n        !andreAugust2022ReglerGjelder(grunnlag.familiehendelsesdato) ||\n        !grunnlag.søkerErFarEllerMedmor ||\n        grunnlag.morHarRett ||\n        grunnlag.søkersituasjon.situasjon !== 'fødsel'\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n\n    const perioderDeFørsteSeksUkeneMedUlovligUttakBFHR = grunnlag.perioder.filter(\n        (periode) =>\n            isUttaksperiode(periode) &&\n            starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel(\n                periode.tidsperiode,\n                grunnlag.familiehendelsesdato,\n                grunnlag.termindato,\n            ) &&\n            periode.konto === StønadskontoType.Foreldrepenger &&\n            periode.erMorForSyk === false,\n    );\n\n    return {\n        passerer: perioderDeFørsteSeksUkeneMedUlovligUttakBFHR.length === 0,\n        info: perioderDeFørsteSeksUkeneMedUlovligUttakBFHR.map((periode) => ({\n            intlKey: 'uttaksplan.validering.feil.perioderDeFørsteSeksUkeneMedUlovligUttakBFHR',\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { Søknadsinfo, isUtsettelsePgaArbeid } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../../utils/types/regelTypes';\n\nexport const harBekreftet100ProsentArbeidIUtsettelsePgaArbeid: RegelTest = (\n    grunnlag: Søknadsinfo,\n): RegelTestresultat => {\n    const utsettelserPgaArbeidUtenBekreftelse = grunnlag.perioder\n        .filter(isUtsettelsePgaArbeid)\n        .filter((periode) => periode.bekrefterArbeidIPerioden === false);\n\n    return {\n        passerer: utsettelserPgaArbeidUtenBekreftelse.length === 0,\n        info: utsettelserPgaArbeidUtenBekreftelse.map((periode) => ({\n            periodeId: periode.id,\n        })),\n    };\n};\n","import dayjs from 'dayjs';\nimport { Periode, Periodetype, Søknadsinfo, Uttaksdagen, formatDate, isUttakAnnenPart } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../../utils/types/regelTypes';\n\nexport const laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn = (\n    periode: Periode,\n    førsteUttaksdagForPåfølgendeBarn: Date | undefined,\n) => {\n    if (\n        førsteUttaksdagForPåfølgendeBarn !== undefined &&\n        (periode.type === Periodetype.Uttak ||\n            periode.type === Periodetype.Overføring ||\n            periode.type === Periodetype.Utsettelse ||\n            periode.type === Periodetype.Opphold ||\n            isUttakAnnenPart(periode))\n    ) {\n        return (\n            dayjs(periode.tidsperiode.fom).isSameOrAfter(førsteUttaksdagForPåfølgendeBarn, 'd') ||\n            dayjs(periode.tidsperiode.tom).isSameOrAfter(førsteUttaksdagForPåfølgendeBarn, 'd')\n        );\n    }\n    return false;\n};\n\nexport const forSenUttakVedPåfølgendeBarn: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    if (\n        grunnlag.familiehendelsesdatoNesteSak === undefined ||\n        grunnlag.førsteUttaksdagNesteBarnsSak === undefined ||\n        (grunnlag.minsterettUkerToTette && grunnlag.minsterettUkerToTette > 0)\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n    const perioderMedUgyldigTidsperiode = grunnlag.perioder.filter((periode) =>\n        laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn(periode, grunnlag.førsteUttaksdagNesteBarnsSak),\n    );\n    const sisteMuligeUttaksdag = Uttaksdagen(grunnlag.førsteUttaksdagNesteBarnsSak).trekkFra(1);\n    return {\n        passerer: perioderMedUgyldigTidsperiode.length === 0,\n        info: perioderMedUgyldigTidsperiode.map((periode) => ({\n            intlKey: 'uttaksplan.validering.info.forSenUttakVedPåfølgendeBarn',\n            values: {\n                fom: formatDate(periode.tidsperiode.fom),\n                tom: formatDate(periode.tidsperiode.tom),\n                sisteMuligeUttaksdag: formatDate(sisteMuligeUttaksdag),\n            },\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { harUttaksperiodeGyldigGradering } from './harUttaksperiodeGyldigGradering';\nimport { harPeriodeGyldigTidsperiode } from './harPeriodeGyldigTidsperiode';\nimport { harUttaksperiodeStønadskonto } from './harUttaksperiodeStønadskonto';\nimport { erSamtidigUttakGyldig } from './erSamtidigUttakGyldig';\nimport { erUtsettelseEtterFamiliehendelsesdato } from './erUtsettelseEtterFamiliehendelsesdato';\nimport { Regel, RegelAlvorlighet } from '../../utils/types/regelTypes';\nimport { starterUttaksperiodeRundtFødselEtter2UkerFørFødsel } from './starterUttaksperiodeRundtFødselEtter2UkerFørFødsel';\nimport { slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel } from './slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel';\nimport { periodeDeFørsteSeksUkeneHarUlovligUttakBFHR } from './periodeDeFørsteSeksUkeneHarUlovligUttakBFHR';\nimport { harBekreftet100ProsentArbeidIUtsettelsePgaArbeid } from './harBekreftet100ProsentArbeidIUtsettelsePgaArbeid';\nimport { forSenUttakVedPåfølgendeBarn } from './forSenUttakVedPåfølgendeBarn';\n\nexport enum PeriodeValiderRegelKey {\n    'uttaksperiodeHarGyldigGradering' = 'uttaksperiodeHarGyldigGradering',\n    'periodeHarGyldigTidsperiode' = 'periodeHarGyldigTidsperiode',\n    'uttaksperiodeHarStønadskonto' = 'uttaksperiodeHarStønadskonto',\n    'erSamtidigUttakGyldig' = 'erSamtidigUttakGyldig',\n    'erUtsettelseEtterFamiliehendelsesdato' = 'erUtsettelseEtterFamiliehendelsesdato',\n    'starterUttaksperiodeRundtFødselEtter2UkerFørFødsel' = 'starterUttaksperiodeRundtFødselEtter2UkerFørFødsel',\n    'slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel' = 'slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel',\n    'periodeDeFørsteSeksUkeneHarUlovligUttakBFHR' = 'periodeDeFørsteSeksUkeneHarUlovligUttakBFHR',\n    'harBekreftet100ProsentArbeidIUtsettelsePgaArbeid' = 'harBekreftet100ProsentArbeidIUtsettelsePgaArbeid',\n    'forSenUttakVedPåfølgendeBarn' = 'forSenUttakVedPåfølgendeBarn',\n}\n\n/** Meldingene skal default kun vises inne i skjema */\n\nconst skjulIOppsummering = true;\n\nconst periodevalideringsregler: Regel[] = [\n    {\n        key: PeriodeValiderRegelKey.uttaksperiodeHarGyldigGradering,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harUttaksperiodeGyldigGradering,\n        skjulesIOppsummering: skjulIOppsummering,\n        avvikType: 'skjema',\n    },\n    {\n        key: PeriodeValiderRegelKey.periodeHarGyldigTidsperiode,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harPeriodeGyldigTidsperiode,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.starterUttaksperiodeRundtFødselEtter2UkerFørFødsel,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: starterUttaksperiodeRundtFødselEtter2UkerFørFødsel,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.uttaksperiodeHarStønadskonto,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harUttaksperiodeStønadskonto,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.periodeDeFørsteSeksUkeneHarUlovligUttakBFHR,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: periodeDeFørsteSeksUkeneHarUlovligUttakBFHR,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.erSamtidigUttakGyldig,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: erSamtidigUttakGyldig,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.erUtsettelseEtterFamiliehendelsesdato,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: erUtsettelseEtterFamiliehendelsesdato,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.harBekreftet100ProsentArbeidIUtsettelsePgaArbeid,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harBekreftet100ProsentArbeidIUtsettelsePgaArbeid,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.forSenUttakVedPåfølgendeBarn,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: forSenUttakVedPåfølgendeBarn,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n];\n\nexport default periodevalideringsregler;\n","import { Søknadsinfo, isUtsettelsePgaFerie } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\n\nexport const harSøktOmFerieUtenArbeidsforhold: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const harArbeidsforhold = grunnlag.arbeidsforhold.length > 0;\n    return {\n        passerer: harArbeidsforhold ? true : grunnlag.perioder.some(isUtsettelsePgaFerie) === false,\n    };\n};\n","import { IntlShape } from 'react-intl';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport {\n    Perioden,\n    Søknadsinfo,\n    UtsettelseÅrsakType,\n    getVarighetString,\n    isUtsettelsesperiode,\n    uttaksConstants,\n} from '@navikt/fp-common';\n\nexport const inneholderForMyeFerie: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const ferieUtsettelser = grunnlag.perioder.filter(\n        (p) => isUtsettelsesperiode(p) && p.årsak === UtsettelseÅrsakType.Ferie,\n    );\n    const ferieDager = ferieUtsettelser.reduce(\n        (sumFerieDager, periode) => sumFerieDager + Perioden(periode).getAntallUttaksdager(),\n        0,\n    );\n\n    return {\n        passerer: ferieDager <= uttaksConstants.MAKS_FERIEDAGER_MED_OVERFØRING,\n        info: ferieUtsettelser.map((periode) => ({\n            periodeId: periode.id,\n            values: {\n                ukerOgDager: (intl: IntlShape) => getVarighetString(ferieDager, intl),\n            },\n        })),\n    };\n};\n","import { RegelTestresultat } from '../utils/types/regelTypes';\nimport { beregnGjenståendeUttaksdager, isUtsettelsesperiode, StønadskontoType, Søknadsinfo } from '@navikt/fp-common';\n\n// Denne regelen sparker inn dersom forelders kvote + fellesperiode er tømt\n// Dersom noe er igjen av andre forelders kvote er det OK\nexport function kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme(grunnlag: Søknadsinfo): RegelTestresultat {\n    const { perioder, søkerErFarEllerMedmor, stønadskontoer } = grunnlag;\n    const gjenståendeDager = beregnGjenståendeUttaksdager(stønadskontoer, perioder, false);\n    const sistePeriodeErIkkeUtsettelse =\n        perioder.length > 0 ? !isUtsettelsesperiode(perioder[perioder.length - 1]) : false;\n\n    const resterendeFellesperiode = gjenståendeDager.find((konto) => konto.konto === StønadskontoType.Fellesperiode);\n    const resterendeMødrekvote = gjenståendeDager.find((konto) => konto.konto === StønadskontoType.Mødrekvote);\n    const resterendeFedrekvote = gjenståendeDager.find((konto) => konto.konto === StønadskontoType.Fedrekvote);\n    const resterendeForeldrepenger = gjenståendeDager.find((konto) => konto.konto === StønadskontoType.Foreldrepenger);\n\n    if (sistePeriodeErIkkeUtsettelse || perioder.length === 0) {\n        return {\n            passerer: true,\n        };\n    }\n\n    if (søkerErFarEllerMedmor) {\n        if (resterendeFedrekvote !== undefined && resterendeFellesperiode !== undefined) {\n            if (resterendeFedrekvote.dager > 0 || resterendeFellesperiode.dager > 0) {\n                return {\n                    passerer: true,\n                };\n            }\n        }\n\n        if (resterendeForeldrepenger !== undefined) {\n            if (resterendeForeldrepenger.dager > 0) {\n                return {\n                    passerer: true,\n                };\n            }\n        }\n\n        return {\n            passerer: false,\n            info: {\n                intlKey: 'uttaksplan.validering.feil.sluttMedUtsettelse',\n            },\n        };\n    } else {\n        if (resterendeMødrekvote !== undefined && resterendeFellesperiode !== undefined) {\n            if (resterendeMødrekvote.dager > 0 || resterendeFellesperiode.dager > 0) {\n                return {\n                    passerer: true,\n                };\n            }\n        }\n\n        if (resterendeForeldrepenger !== undefined) {\n            if (resterendeForeldrepenger.dager > 0) {\n                return {\n                    passerer: true,\n                };\n            }\n        }\n\n        return {\n            passerer: false,\n            info: {\n                intlKey: 'uttaksplan.validering.feil.sluttMedUtsettelse',\n            },\n        };\n    }\n}\n","import { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport {\n    Periode,\n    StønadskontoUttak,\n    Søknadsinfo,\n    TilgjengeligStønadskonto,\n    beregnGjenståendeUttaksdager,\n} from '@navikt/fp-common';\n\nconst erUttaksmengdeForFarMedmorForHøy = (\n    uttaksplan: Periode[],\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    farEllerMedmor: boolean,\n): boolean => {\n    if (farEllerMedmor === true) {\n        const kontoUttak = beregnGjenståendeUttaksdager(tilgjengeligeStønadskontoer, uttaksplan, false);\n        return kontoUttak.some((konto: StønadskontoUttak) => konto.dager < 0);\n    } else {\n        return false;\n    }\n};\n\nexport const erUttaksmengdeForFarMedmorForHøyTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    return {\n        passerer:\n            erUttaksmengdeForFarMedmorForHøy(\n                grunnlag.perioder,\n                grunnlag.stønadskontoer,\n                grunnlag.søkerErFarEllerMedmor,\n            ) === false,\n    };\n};\n","import { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { IntlShape } from 'react-intl';\nimport {\n    Periode,\n    Søknadsinfo,\n    isInfoPeriode,\n    isPeriodeUtenUttak,\n    isUtsettelsePgaArbeid,\n    isUttaksperiode,\n    links,\n} from '@navikt/fp-common';\n\nconst vekslendeArbeidOgUttakTest = (kunSøkersPerioder: Periode[]): boolean => {\n    const firstArbeidsperiodeIndex = kunSøkersPerioder.findIndex((p) => isUtsettelsePgaArbeid(p));\n\n    if (firstArbeidsperiodeIndex > -1) {\n        const antallPerioderEtterFørsteUtsettelseGrunnetArbeid =\n            kunSøkersPerioder.length - 1 - firstArbeidsperiodeIndex;\n\n        if (antallPerioderEtterFørsteUtsettelseGrunnetArbeid >= 5) {\n            // Hvis vi har en serie perioder av formatet:\n            // Arbeid -> Uttak -> Arbeid -> Uttak -> Arbeid -> Uttak => foreslå gradering\n            if (\n                isUtsettelsePgaArbeid(kunSøkersPerioder[firstArbeidsperiodeIndex]) &&\n                isUttaksperiode(kunSøkersPerioder[firstArbeidsperiodeIndex + 1]) &&\n                isUtsettelsePgaArbeid(kunSøkersPerioder[firstArbeidsperiodeIndex + 2]) &&\n                isUttaksperiode(kunSøkersPerioder[firstArbeidsperiodeIndex + 3]) &&\n                isUtsettelsePgaArbeid(kunSøkersPerioder[firstArbeidsperiodeIndex + 4]) &&\n                isUttaksperiode(kunSøkersPerioder[firstArbeidsperiodeIndex + 5])\n            ) {\n                return false;\n            }\n        }\n        if (antallPerioderEtterFørsteUtsettelseGrunnetArbeid === 4 && firstArbeidsperiodeIndex > 0) {\n            // Hvis vi har en serie perioder av formatet:\n            // Uttak -> Arbeid -> Uttak -> Arbeid -> Uttak -> Arbeid => foreslå gradering\n            if (\n                firstArbeidsperiodeIndex > 0 &&\n                isUttaksperiode(kunSøkersPerioder[firstArbeidsperiodeIndex - 1]) &&\n                isUtsettelsePgaArbeid(kunSøkersPerioder[firstArbeidsperiodeIndex]) &&\n                isUttaksperiode(kunSøkersPerioder[firstArbeidsperiodeIndex + 1]) &&\n                isUtsettelsePgaArbeid(kunSøkersPerioder[firstArbeidsperiodeIndex + 2]) &&\n                isUttaksperiode(kunSøkersPerioder[firstArbeidsperiodeIndex + 3]) &&\n                isUtsettelsePgaArbeid(kunSøkersPerioder[firstArbeidsperiodeIndex + 4])\n            ) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n};\n\nconst vekslendePeriodeUtenUttakOgUttakTest = (kunSøkersPerioder: Periode[]): boolean => {\n    const firstPeriodeUtenUttakIndex = kunSøkersPerioder.findIndex((p) => isPeriodeUtenUttak(p));\n\n    if (firstPeriodeUtenUttakIndex > -1) {\n        const antallPerioderEtterFørstePeriodeUtenUttak = kunSøkersPerioder.length - 1 - firstPeriodeUtenUttakIndex;\n\n        if (antallPerioderEtterFørstePeriodeUtenUttak >= 5) {\n            // Hvis vi har en serie perioder av formatet:\n            // Uten Uttak -> Uttak ->  Uten Uttak -> Uttak ->  Uten Uttak -> Uttak => foreslå gradering\n            if (\n                isPeriodeUtenUttak(kunSøkersPerioder[firstPeriodeUtenUttakIndex]) &&\n                isUttaksperiode(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 1]) &&\n                isPeriodeUtenUttak(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 2]) &&\n                isUttaksperiode(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 3]) &&\n                isPeriodeUtenUttak(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 4]) &&\n                isUttaksperiode(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 5])\n            ) {\n                return false;\n            }\n        }\n        if (antallPerioderEtterFørstePeriodeUtenUttak === 4 && firstPeriodeUtenUttakIndex > 0) {\n            // Hvis vi har en serie perioder av formatet:\n            // Uttak ->  Uten Uttak -> Uttak ->  Uten Uttak -> Uttak ->  Uten Uttak => foreslå gradering\n            if (\n                firstPeriodeUtenUttakIndex > 0 &&\n                isUttaksperiode(kunSøkersPerioder[firstPeriodeUtenUttakIndex - 1]) &&\n                isPeriodeUtenUttak(kunSøkersPerioder[firstPeriodeUtenUttakIndex]) &&\n                isUttaksperiode(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 1]) &&\n                isPeriodeUtenUttak(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 2]) &&\n                isUttaksperiode(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 3]) &&\n                isPeriodeUtenUttak(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 4])\n            ) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n};\n\nexport const burdeKanskjeSøkeGraderingTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const { perioder } = grunnlag;\n    const kunSøkersPerioder = perioder.filter((p: Periode) => !isInfoPeriode(p));\n\n    if (kunSøkersPerioder.length >= 6) {\n        const vekslerArbeidOgUttakTest = vekslendeArbeidOgUttakTest(kunSøkersPerioder);\n        const veklserPerioderUtenUttakOgUttaktest = vekslendePeriodeUtenUttakOgUttakTest(kunSøkersPerioder);\n        const passerer = vekslerArbeidOgUttakTest && veklserPerioderUtenUttakOgUttaktest;\n        let infoTekstKey = undefined;\n        if (!vekslerArbeidOgUttakTest) {\n            infoTekstKey =\n                'uttaksplan.validering.info.burdeKanskjeSøkeGradering.PgaVekslendeUtsettelserPgaArbeidOgUttak';\n        }\n\n        if (!veklserPerioderUtenUttakOgUttaktest) {\n            infoTekstKey = 'uttaksplan.validering.info.burdeKanskjeSøkeGradering.PgaVekslendePerioderUtenUttakOgUttak';\n        }\n\n        return {\n            passerer: passerer,\n            info: {\n                intlKey: infoTekstKey,\n                renderAsHtml: true,\n                values: {\n                    a: (_intl: IntlShape) => (msg: any) => (\n                        <a href={links.graderingInfo} className=\"lenke\" rel=\"noreferrer\" target=\"_blank\">\n                            {msg}\n                        </a>\n                    ),\n                },\n            },\n        };\n    }\n\n    return {\n        passerer: true,\n    };\n};\n","import { Søknadsinfo, formatDate, isUfødtBarn } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { getUgyldigUttakMor } from '../utils/uttakValideringUtils';\n\nexport const ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindatoTest: RegelTest = (\n    grunnlag: Søknadsinfo,\n): RegelTestresultat => {\n    const søkerErMor = !grunnlag.søkerErFarEllerMedmor;\n    if (søkerErMor && isUfødtBarn(grunnlag.barn)) {\n        const ugyldigePerioder = getUgyldigUttakMor(\n            grunnlag.perioder,\n            grunnlag.familiehendelsesdato,\n            grunnlag.søkersituasjon.situasjon,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.termindato,\n            grunnlag.erFlerbarnssøknad,\n            'mellomSyvOgÅtteUkerForMor',\n        );\n\n        const passerer = ugyldigePerioder.length === 0;\n        return {\n            passerer,\n            info: ugyldigePerioder.map((periode) => ({\n                intlKey: 'uttaksplan.validering.advarsel.ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindato',\n                values: {\n                    fraDato: formatDate(periode.tidsperiode.fom),\n                    tilDato: formatDate(periode.tidsperiode.tom),\n                },\n                periodeId: periode.id,\n            })),\n        };\n    }\n\n    return { passerer: true };\n};\n","import { farMedmorBrukerForeldrepengerMedAktivitetskravRundtFødselOgMorIkkeErSyk } from '../../utils/uttaksskjema/aktivitetskravMorSkalBesvares';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\nimport { StønadskontoType, Søknadsinfo, hasValue, isUttaksperiode } from '@navikt/fp-common';\n\nexport const inneholderPerioderUtenAktivitetskrav = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const {\n        perioder,\n        søkerErFarEllerMedmor,\n        søkerErAleneOmOmsorg,\n        søkerHarMidlertidigOmsorg,\n        familiehendelsesdato,\n        søkersituasjon,\n    } = grunnlag;\n\n    if (!søkerErFarEllerMedmor || søkerErAleneOmOmsorg || søkerHarMidlertidigOmsorg) {\n        return {\n            passerer: true,\n        };\n    }\n    const perioderUtenAktivitetskrav = perioder.filter(\n        (p) =>\n            isUttaksperiode(p) &&\n            !hasValue(p.morsAktivitetIPerioden) &&\n            !p.erMorForSyk &&\n            !p.ønskerSamtidigUttak &&\n            !p.ønskerFlerbarnsdager &&\n            !farMedmorBrukerForeldrepengerMedAktivitetskravRundtFødselOgMorIkkeErSyk(\n                familiehendelsesdato,\n                søkerErFarEllerMedmor,\n                p.konto,\n                p.erMorForSyk,\n                p.tidsperiode,\n                søkersituasjon.situasjon,\n            ) &&\n            (p.konto === StønadskontoType.Fellesperiode || p.konto === StønadskontoType.Foreldrepenger),\n    );\n\n    return {\n        passerer: perioderUtenAktivitetskrav.length === 0,\n        info: perioderUtenAktivitetskrav.map((p) => ({\n            intlKey: 'uttaksplan.validering.feil.inneholderPerioderUtenAktivitetskrav',\n            periodeId: p.id,\n        })),\n    };\n};\n","import { Søknadsinfo, hasValue, isUtsettelsesperiode } from '@navikt/fp-common';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\n\nexport const inneholderUtsettelserUtenÅrsak = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const utsettelserUtenÅrsak = grunnlag.perioder.filter((p) => isUtsettelsesperiode(p) && !hasValue(p.årsak));\n\n    const passerer = utsettelserUtenÅrsak.length === 0;\n\n    return {\n        passerer,\n        info: utsettelserUtenÅrsak.map((periode) => ({\n            intlKey: 'uttaksplan.validering.feil.inneholderUtsettelserUtenÅrsak',\n            periodeId: periode.id,\n        })),\n    };\n};\n","import {\n    ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL,\n    Periode,\n    Søknadsinfo,\n    formaterDatoKompakt,\n    getFarMedmorUttakRundtFødsel,\n    getFørsteUttaksdag2UkerFørFødsel,\n    getSisteUttaksdag6UkerEtterFødsel,\n    getSumUttaksdagerÅTrekkeIPeriodene,\n    gjelderWLBReglerFarMedmorRundtFødsel,\n    slutterTidsperiodeInnen6UkerEtterFødsel,\n} from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport dayjs from 'dayjs';\n\nconst overskridelseUttakRundtFødselAntallDager = (\n    perioderRundtFødsel: Periode[],\n    familiehendelsesdato: Date,\n): number => {\n    const sisteUttak6UkerEtterFødsel = getSisteUttaksdag6UkerEtterFødsel(familiehendelsesdato);\n    const perioderAvkortetTilÅSlutte6UkerEtterFødsel = perioderRundtFødsel.map((p) =>\n        dayjs(p.tidsperiode.tom).isAfter(dayjs(sisteUttak6UkerEtterFødsel), 'day')\n            ? { ...p, tidsperiode: { fom: p.tidsperiode.fom, tom: sisteUttak6UkerEtterFødsel } }\n            : p,\n    );\n    const antallDager = getSumUttaksdagerÅTrekkeIPeriodene(perioderAvkortetTilÅSlutte6UkerEtterFødsel);\n    return ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL - antallDager;\n};\n\nexport const farMedmorHarSøktUgyldigAntallDagerUttakRundtFødselTest: RegelTest = (\n    grunnlag: Søknadsinfo,\n): RegelTestresultat => {\n    if (\n        gjelderWLBReglerFarMedmorRundtFødsel(\n            grunnlag.familiehendelsesdato,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.morHarRett,\n            grunnlag.søkersituasjon.situasjon,\n        )\n    ) {\n        const perioderUttakRundtFødsel = getFarMedmorUttakRundtFødsel(\n            grunnlag.perioder,\n            grunnlag.familiehendelsesdato,\n            grunnlag.termindato,\n        );\n        const antallDagerForMye = overskridelseUttakRundtFødselAntallDager(\n            perioderUttakRundtFødsel,\n            grunnlag.familiehendelsesdato,\n        );\n\n        const slutterEnAvPeriodeneForSent = perioderUttakRundtFødsel.some(\n            (p) => !slutterTidsperiodeInnen6UkerEtterFødsel(p.tidsperiode, grunnlag.familiehendelsesdato),\n        );\n        let info;\n        const fraDato = formaterDatoKompakt(\n            getFørsteUttaksdag2UkerFørFødsel(grunnlag.familiehendelsesdato, grunnlag.termindato),\n        );\n        const tilDato = formaterDatoKompakt(getSisteUttaksdag6UkerEtterFødsel(grunnlag.familiehendelsesdato));\n        if (slutterEnAvPeriodeneForSent) {\n            info = {\n                intlKey:\n                    'uttaksplan.validering.feil.farMedmorHarSøktUgyldigAntallDagerUttakRundtFødsel.periodeSlutterForSent',\n                values: {\n                    fraDato: fraDato,\n                    tilDato: tilDato,\n                },\n            };\n        } else {\n            info = {\n                intlKey: 'uttaksplan.validering.feil.farMedmorHarSøktUgyldigAntallDagerUttakRundtFødsel',\n                values: {\n                    fraDato: fraDato,\n                    tilDato: tilDato,\n                    dagerForMye: Math.abs(antallDagerForMye),\n                },\n            };\n        }\n        return {\n            passerer: antallDagerForMye >= 0,\n            info: info,\n        };\n    }\n\n    return {\n        passerer: true,\n    };\n};\n","import dayjs from 'dayjs';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo, getSisteUttaksdag6UkerEtterFødsel, isUttaksperiode } from '@navikt/fp-common';\n\nexport const harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUkerTest: RegelTest = (\n    grunnlag: Søknadsinfo,\n): RegelTestresultat => {\n    const søkerErMor = !grunnlag.søkerErFarEllerMedmor;\n    if (søkerErMor && grunnlag.søkersituasjon.situasjon === 'fødsel') {\n        const sisteUttaksdagEtterSeksUker = getSisteUttaksdag6UkerEtterFødsel(grunnlag.familiehendelsesdato);\n        const perioderMedSamtidigUttakUnder100ProsentInnenFørsteSeksUker = grunnlag.perioder.filter(\n            (p) =>\n                isUttaksperiode(p) &&\n                dayjs(p.tidsperiode.fom).isSameOrBefore(sisteUttaksdagEtterSeksUker, 'day') &&\n                p.ønskerSamtidigUttak === true &&\n                p.samtidigUttakProsent !== undefined &&\n                parseInt(p.samtidigUttakProsent, 10) < 100,\n        );\n\n        return {\n            passerer: perioderMedSamtidigUttakUnder100ProsentInnenFørsteSeksUker.length <= 0,\n            info: {\n                intlKey: 'uttaksplan.validering.feil.morHarSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUker',\n            },\n        };\n    }\n    return { passerer: true };\n};\n","import {\n    ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL,\n    Søknadsinfo,\n    formaterDatoKompakt,\n    getFarMedmorUttakRundtFødsel,\n    getFørsteUttaksdag2UkerFørFødsel,\n    getSisteUttaksdag6UkerEtterFødsel,\n    getSumUttaksdagerÅTrekkeIPeriodene,\n    gjelderWLBReglerFarMedmorRundtFødsel,\n} from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { erUttaksmengdeForFarMedmorForHøyTest } from './erUttaksmengdeForFarMedmorForHøyTest';\nimport dayjs from 'dayjs';\n\nexport const farMedMorHarRettPåUttakRundtFødselTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const tattUtForMangeDagerIPlanen = erUttaksmengdeForFarMedmorForHøyTest(grunnlag).passerer === false;\n    if (\n        !gjelderWLBReglerFarMedmorRundtFødsel(\n            grunnlag.familiehendelsesdato,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.morHarRett,\n            grunnlag.søkersituasjon.situasjon,\n        ) ||\n        tattUtForMangeDagerIPlanen\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n    const perioderRundtFødsel = getFarMedmorUttakRundtFødsel(\n        grunnlag.perioder,\n        grunnlag.familiehendelsesdato,\n        grunnlag.termindato,\n    );\n\n    let dagerIgjenRundtFødsel;\n    const førsteUttaksdag2UkerFørFødsel = getFørsteUttaksdag2UkerFørFødsel(\n        grunnlag.familiehendelsesdato,\n        grunnlag.termindato,\n    );\n    const sisteUttak6UkerEtterFødsel = getSisteUttaksdag6UkerEtterFødsel(grunnlag.familiehendelsesdato);\n\n    if (perioderRundtFødsel.length > 0) {\n        const antallUttaksdagerRundtFødsel = getSumUttaksdagerÅTrekkeIPeriodene(perioderRundtFødsel);\n        dagerIgjenRundtFødsel = ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL - antallUttaksdagerRundtFødsel;\n    } else {\n        dagerIgjenRundtFødsel = ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL;\n    }\n    const erMerEnn3månederSidenFamiliehendelse = dayjs(new Date())\n        .subtract(3, 'month')\n        .isSameOrAfter(grunnlag.familiehendelsesdato, 'day');\n\n    return {\n        passerer: dagerIgjenRundtFødsel <= 0 || erMerEnn3månederSidenFamiliehendelse,\n        info: {\n            intlKey: 'uttaksplan.validering.info.rettTilUttakRundtFødsel',\n            values: {\n                fraDato: formaterDatoKompakt(førsteUttaksdag2UkerFørFødsel),\n                tilDato: formaterDatoKompakt(sisteUttak6UkerEtterFødsel),\n                antallDager: Math.round(dagerIgjenRundtFødsel * 10) / 10,\n            },\n        },\n    };\n};\n","import {\n    Søknadsinfo,\n    andreAugust2022ReglerGjelder,\n    getBareFarHarRettAntallUkerPåÅTaUtDagerUtenAktivitetskravFørWLB,\n    getBareFarHarRettKontoUtenAktivitetskravUker,\n    links,\n} from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { erUttaksmengdeForFarMedmorForHøyTest } from './erUttaksmengdeForFarMedmorForHøyTest';\nimport { IntlShape } from 'react-intl';\n\nexport const farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest: RegelTest = (\n    grunnlag: Søknadsinfo,\n): RegelTestresultat => {\n    const tattUtForMangeDagerIPlanen = erUttaksmengdeForFarMedmorForHøyTest(grunnlag).passerer === false;\n    if (\n        !grunnlag.søkerErFarEllerMedmor ||\n        grunnlag.morHarRett ||\n        tattUtForMangeDagerIPlanen ||\n        (grunnlag.søkerErFarEllerMedmor && grunnlag.søkerErAleneOmOmsorg)\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n    const kontoUtenAktivitetskravUker = getBareFarHarRettKontoUtenAktivitetskravUker(\n        grunnlag.antallBarn,\n        grunnlag.morErUfør,\n        grunnlag.familiehendelsesdato,\n        grunnlag.dekningsgrad,\n        !grunnlag.morHarRett,\n    );\n\n    const testPasserer = kontoUtenAktivitetskravUker === 0;\n    const renderAsHtml = true;\n    const link = (_intl: IntlShape) => (msg: any) => (\n        <a href={links.aktivitetsfriUttakInfo} className=\"lenke\" rel=\"noreferrer\" target=\"_blank\">\n            {msg}\n        </a>\n    );\n\n    if (andreAugust2022ReglerGjelder(grunnlag.familiehendelsesdato)) {\n        return {\n            passerer: testPasserer,\n            info: {\n                intlKey: 'uttaksplan.validering.info.rettTilAktivitetsfriUttak.etterWLB',\n                renderAsHtml: renderAsHtml,\n                values: {\n                    antallUker: kontoUtenAktivitetskravUker,\n                    a: link,\n                },\n            },\n        };\n    } else {\n        const bareFarHarRett = grunnlag.søkerErFarEllerMedmor && !grunnlag.morHarRett;\n        const antallUkerPåÅTaUtDager = getBareFarHarRettAntallUkerPåÅTaUtDagerUtenAktivitetskravFørWLB(\n            grunnlag.antallBarn,\n            grunnlag.familiehendelsesdato,\n            grunnlag.dekningsgrad,\n            bareFarHarRett,\n        );\n        return {\n            passerer: testPasserer,\n            info: {\n                intlKey: 'uttaksplan.validering.info.rettTilAktivitetsfriUttak.førWLB',\n                renderAsHtml: renderAsHtml,\n                values: {\n                    antallUker: kontoUtenAktivitetskravUker,\n                    antallUkerÅTaUtDagerUtenAktivitet: antallUkerPåÅTaUtDager,\n                    a: link,\n                },\n            },\n        };\n    }\n};\n","import { RegelTestresultat } from '../utils/types/regelTypes';\nimport dayjs from 'dayjs';\nimport { Periode, Søknadsinfo, Uttaksperiode, isUttaksperiode } from '@navikt/fp-common';\nimport { graderingSkalBesvares } from '../../utils/uttaksskjema/graderingSkalBesvares';\n\nexport const inneholderUttaksperioderMedUbesvartGradering = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const uttaksperioder = grunnlag.perioder.filter((p: Periode) => isUttaksperiode(p)) as Uttaksperiode[];\n    const perioderMedUbesvartGradering = uttaksperioder\n        .filter((p) =>\n            graderingSkalBesvares(\n                p.type,\n                p.konto,\n                grunnlag.familiehendelsesdato,\n                grunnlag.søkerErFarEllerMedmor,\n                p.erMorForSyk,\n                p.tidsperiode,\n            ),\n        )\n        //Feilmeldingen skal ikke komme hvis spm om flerbarnsdager skal besvares først (kun for perioder etter fødsel).\n        .filter((p) =>\n            grunnlag.erFlerbarnssøknad\n                ? (dayjs(p.tidsperiode.fom).isSameOrAfter(grunnlag.familiehendelsesdato, 'd') &&\n                      p.ønskerFlerbarnsdager !== undefined) ||\n                  dayjs(p.tidsperiode.fom).isBefore(grunnlag.familiehendelsesdato, 'd')\n                : p,\n        )\n        .filter((p) => p.gradert === undefined);\n\n    return {\n        passerer: perioderMedUbesvartGradering.length === 0,\n        info: perioderMedUbesvartGradering.map((periode) => ({\n            intlKey: 'uttaksplan.validering.feil.inneholderUttaksperioderMedUbesvartGradering',\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { ønskerFlerbarnsdagerSkalBesvares } from '../../utils/uttaksskjema/ønskerFlerbarnsdagerSkalBesvares';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\nimport {\n    Periode,\n    Søknadsinfo,\n    UttakRundtFødselÅrsak,\n    Uttaksperiode,\n    isAnnenForelderOppgitt,\n    isUttaksperiode,\n} from '@navikt/fp-common';\n\nexport const inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest = (\n    grunnlag: Søknadsinfo,\n): RegelTestresultat => {\n    const uttaksperioder = grunnlag.perioder.filter((p: Periode) => isUttaksperiode(p)) as Uttaksperiode[];\n    const erFlerbarnssøknad = grunnlag.antallBarn > 1;\n    const bareFarMedmorHarRett = grunnlag.søkerErFarEllerMedmor && !grunnlag.erDeltUttak;\n    const erDeltUttakINorge =\n        grunnlag.erDeltUttak &&\n        isAnnenForelderOppgitt(grunnlag.annenForelder) &&\n        grunnlag.annenForelder.harRettPåForeldrepengerINorge;\n    const perioderMedUbesvartSpmOmFlerbarnsdager = uttaksperioder\n        .filter((p) =>\n            ønskerFlerbarnsdagerSkalBesvares(\n                p.type,\n                erFlerbarnssøknad,\n                grunnlag.søkerErFarEllerMedmor,\n                grunnlag.familiehendelsesdato,\n                p.tidsperiode,\n                p.konto,\n                bareFarMedmorHarRett,\n                grunnlag.antallBarn,\n                grunnlag.søkerErAleneOmOmsorg,\n                !!erDeltUttakINorge,\n                p.erMorForSyk ? UttakRundtFødselÅrsak.morErForSyk : undefined,\n            ),\n        )\n        .filter((p) => p.gradert === undefined);\n\n    return {\n        passerer: perioderMedUbesvartSpmOmFlerbarnsdager.length === 0,\n        info: perioderMedUbesvartSpmOmFlerbarnsdager.map((periode) => ({\n            intlKey: 'uttaksplan.validering.feil.inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdager',\n            periodeId: periode.id,\n        })),\n    };\n};\n","import {\n    Søknadsinfo,\n    andreAugust2022ReglerGjelder,\n    getBareFarHarRettAntallUkerPåÅTaUtDagerUtenAktivitetskravFørWLB,\n    getBareFarHarRettFlerbarnsdagerUker,\n    links,\n} from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { erUttaksmengdeForFarMedmorForHøyTest } from './erUttaksmengdeForFarMedmorForHøyTest';\nimport { IntlShape } from 'react-intl';\n\nexport const farMedmorHarRettPåFlerbarnsdagerTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const tattUtForMangeDagerIPlanen = erUttaksmengdeForFarMedmorForHøyTest(grunnlag).passerer === false;\n    if (\n        !grunnlag.søkerErFarEllerMedmor ||\n        grunnlag.morHarRett ||\n        tattUtForMangeDagerIPlanen ||\n        (grunnlag.søkerErFarEllerMedmor && grunnlag.søkerErAleneOmOmsorg) ||\n        andreAugust2022ReglerGjelder(grunnlag.familiehendelsesdato)\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n    const flerbarnsUker = getBareFarHarRettFlerbarnsdagerUker(\n        grunnlag.antallBarn,\n        grunnlag.familiehendelsesdato,\n        grunnlag.dekningsgrad,\n        !grunnlag.morHarRett,\n    );\n    const bareFarHarRett = grunnlag.søkerErFarEllerMedmor && !grunnlag.morHarRett;\n    const antallUkerPåÅTaUtDager = getBareFarHarRettAntallUkerPåÅTaUtDagerUtenAktivitetskravFørWLB(\n        grunnlag.antallBarn,\n        grunnlag.familiehendelsesdato,\n        grunnlag.dekningsgrad,\n        bareFarHarRett,\n    );\n\n    return {\n        passerer: flerbarnsUker === 0,\n        info: {\n            intlKey: 'uttaksplan.validering.info.flerbarnsdagerKanBrukes',\n            renderAsHtml: true,\n            values: {\n                antallUker: flerbarnsUker,\n                antallUkerÅTaUtFlerbarnsdager: antallUkerPåÅTaUtDager,\n                a: (_intl: IntlShape) => (msg: any) => (\n                    <a href={links.aktivitetsfriUttakInfo} className=\"lenke\" rel=\"noreferrer\" target=\"_blank\">\n                        {msg}\n                    </a>\n                ),\n            },\n        },\n    };\n};\n","import { getBrukteDager } from '../../utils/brukteDagerUtils';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\nimport { laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn } from './periodevalideringstester/forSenUttakVedPåfølgendeBarn';\nimport { Søknadsinfo } from '@navikt/fp-common';\n\nexport const overstigerMinsterettVedToTette = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const { familiehendelsesdato, perioder, stønadskontoer, søkerErFarEllerMedmor, minsterettUkerToTette } = grunnlag;\n    const perioderEtterFørsteStønadsperiodeNyttBarn = perioder.filter((periode) =>\n        laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn(periode, grunnlag.førsteUttaksdagNesteBarnsSak),\n    );\n    if (\n        minsterettUkerToTette === undefined ||\n        minsterettUkerToTette === 0 ||\n        perioderEtterFørsteStønadsperiodeNyttBarn.length === 0\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n    const perioderFørFørsteStønadsperiodeNyttBarn = perioder.filter(\n        (periode) => !laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn(periode, grunnlag.førsteUttaksdagNesteBarnsSak),\n    );\n    const minsterettMaxAntallUker = minsterettUkerToTette;\n    const minsterettMaxAntallDager = minsterettMaxAntallUker * 5;\n\n    const brukteDagerPerForelderFørFørsteStønadsdagNyttBarn = getBrukteDager(\n        stønadskontoer,\n        perioderFørFørsteStønadsperiodeNyttBarn,\n        familiehendelsesdato,\n    );\n    const uttaksdagerFremTilNyttBarnStønadsdag = søkerErFarEllerMedmor\n        ? brukteDagerPerForelderFørFørsteStønadsdagNyttBarn.farMedmor.dagerEgneKvoter +\n          brukteDagerPerForelderFørFørsteStønadsdagNyttBarn.farMedmor.dagerFellesperiode\n        : brukteDagerPerForelderFørFørsteStønadsdagNyttBarn.mor.dagerEgneKvoter +\n          brukteDagerPerForelderFørFørsteStønadsdagNyttBarn.mor.dagerFellesperiode;\n\n    const dagerIgjenÅBrukePåMinsteretten = minsterettMaxAntallDager - uttaksdagerFremTilNyttBarnStønadsdag;\n\n    const brukteDagerPerForelderEtterFørsteStønadsdagNyttBarn = getBrukteDager(\n        stønadskontoer,\n        perioderEtterFørsteStønadsperiodeNyttBarn,\n        familiehendelsesdato,\n    );\n    const uttaksdagerEtterNyttBarnStønadsdag = søkerErFarEllerMedmor\n        ? brukteDagerPerForelderEtterFørsteStønadsdagNyttBarn.farMedmor.dagerEgneKvoter +\n          brukteDagerPerForelderEtterFørsteStønadsdagNyttBarn.farMedmor.dagerFellesperiode\n        : brukteDagerPerForelderEtterFørsteStønadsdagNyttBarn.mor.dagerEgneKvoter +\n          brukteDagerPerForelderEtterFørsteStønadsdagNyttBarn.mor.dagerFellesperiode;\n\n    const dagerIgjenAvMinsterett = dagerIgjenÅBrukePåMinsteretten - uttaksdagerEtterNyttBarnStønadsdag;\n\n    return {\n        passerer: dagerIgjenAvMinsterett >= 0,\n        info: {\n            intlKey: 'uttaksplan.validering.info.overstigerMinsterettVedToTette',\n            values: {\n                uker: minsterettMaxAntallUker,\n                forMyeUttak: Math.abs(dagerIgjenAvMinsterett),\n            },\n        },\n    };\n};\n","import { Søknadsinfo } from '@navikt/fp-common';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn } from './periodevalideringstester/forSenUttakVedPåfølgendeBarn';\n\nexport const harPerioderEtterFørsteStønadsdagNesteBarnDerToTette: RegelTest = (\n    grunnlag: Søknadsinfo,\n): RegelTestresultat => {\n    if (grunnlag.minsterettUkerToTette === undefined || grunnlag.minsterettUkerToTette === 0) {\n        return {\n            passerer: true,\n        };\n    }\n    const perioderEtterFørsteStønadsperiodeNyttBarn = grunnlag.perioder.filter((periode) =>\n        laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn(periode, grunnlag.førsteUttaksdagNesteBarnsSak),\n    );\n\n    const tekstKey = grunnlag.søkerErFarEllerMedmor\n        ? 'uttaksplan.validering.info.harPerioderEtterFørsteStønadsdagNesteBarnDerToTette.far'\n        : 'uttaksplan.validering.info.harPerioderEtterFørsteStønadsdagNesteBarnDerToTette.mor';\n    return {\n        passerer: perioderEtterFørsteStønadsperiodeNyttBarn.length === 0,\n        info: {\n            intlKey: tekstKey,\n        },\n    };\n};\n","import { inneholderUttaksplanPerioderTest } from './tester/inneholderUttaksplanPerioderTest';\nimport { harMorSøktUgyldigUttakFørsteSeksUkerTest } from './tester/harMorSøktUgyldigUttakFørsteSeksUkerTest';\nimport { stønadskontoInneholderForMyeUttakKunSøkerTest } from './tester/stønadskontoInneholderForMyeUttakKunSøkerTest';\nimport { harFarMedmorSøktUgyldigUttakEllerUtsettelseFørsteSeksUkerTest } from './tester/harFarMedmorSøktUgyldigUttakEllerUtsettelseFørsteSeksUkerTest';\nimport { erUttaksplanBareOppholdTest } from './tester/erUttaksplanBareOppholdTest';\nimport { slutterUttaksplanMedOppholdTest } from './tester/slutterUttaksplanMedOppholdTest';\nimport { starterUttaksplanMedOppholdTest } from './tester/starterUttaksplanMedOppholdTest';\nimport { erUttaksplanGraderingStørreEnnSamtidigUttakTest } from './tester/erUttaksplanGraderingStørreEnnSamtidigUttakTest';\nimport { erTilleggsopplysningerGyldigTest } from './tester/erTilleggsopplysningerGyldigTest';\nimport { harTilleggsopplysningerGyldigeCharsTest } from './tester/harTilleggsopplysningerGyldigeCharsTest';\nimport { harUttaksplanForMangeFlerbarnsdagerTest } from './tester/harUttaksplanForMangeFlerbarnsdagerTest';\nimport { inneholderUttaksplanDatoSomIkkeErUttaksdag } from './tester/inneholderUttaksplanDatoSomIkkeErUttaksdagTest';\nimport { harPerioderManglendeVedleggTest } from './tester/harPerioderManglendeVedleggTest';\nimport { inneholderSenUtsettelsePgaFerieTest } from './tester/inneholderSenUtsettelsePgaFerieTest';\nimport { inneholderTapteDagerTest } from './tester/inneholderTapteDagerTest';\nimport { inneholderBareUtsettelserTest } from './tester/inneholderBareUtsettelserTest';\nimport { inneholderSenUtsettelsePgaArbeidTest } from './tester/inneholderSenUtsettelsePgaArbeidTest';\nimport { overskriverEndringerAnnenPartsPerioder } from './tester/overskriverEndringerAnnenPartsPerioder';\nimport { overlapperPeriodeAndrePerioder } from './tester/overlapperPeriodeAndrePerioderTest';\nimport periodevalideringsregler, { PeriodeValiderRegelKey } from './tester/periodevalideringstester';\nimport { harSøktOmFerieUtenArbeidsforhold } from './tester/harSøktOmFerieUtenArbeidsforholdTest';\nimport { inneholderForMyeFerie } from './tester/inneholderForMyeFerie';\nimport { kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme } from './tester/kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme';\nimport { erUttaksmengdeForFarMedmorForHøyTest } from './tester/erUttaksmengdeForFarMedmorForHøyTest';\nimport { burdeKanskjeSøkeGraderingTest } from './tester/burdeKanskjeSøkeGraderingTest';\nimport { ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindatoTest } from './tester/ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindatoTest';\nimport { Regel, RegelAlvorlighet } from './utils/types/regelTypes';\nimport { inneholderPerioderUtenAktivitetskrav } from './tester/inneholderPerioderUtenAktivitetskrav';\nimport { inneholderUtsettelserUtenÅrsak } from './tester/inneholderUtsettelserUtenÅrsak';\nimport { farMedmorHarSøktUgyldigAntallDagerUttakRundtFødselTest } from './tester/farMedmorHarSøktUgyldigAntallDagerUttakRundtFødselTest';\nimport { harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUkerTest } from './tester/harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUkerTest';\nimport { farMedMorHarRettPåUttakRundtFødselTest } from './tester/farMedMorHarRettPåUttakRundtFødselTest';\nimport { farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest } from './tester/farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest';\nimport { inneholderUttaksperioderMedUbesvartGradering } from './tester/inneholderUttaksperioderMedUbesvartGradering';\nimport { inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest } from './tester/inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest';\nimport { farMedmorHarRettPåFlerbarnsdagerTest } from './tester/farMedmorHarRettPåFlerbarnsdagerTest';\nimport { overstigerMinsterettVedToTette } from './tester/overstigerMinsterettVedToTette';\nimport { harPerioderEtterFørsteStønadsdagNesteBarnDerToTette } from './tester/harPerioderEtterFørsteStønadsdagNesteBarnDerToTette';\nimport { førsteOktober2021ReglerGjelder } from '@navikt/fp-common';\n\nexport enum UttaksplanRegelKey {\n    'planenInneholderIngenPerioder' = 'planenInneholderIngenPerioder',\n    'morHarSøktUgyldigUttakFørsteSeksUker' = 'morHarSøktUgyldigUttakFørsteSeksUker',\n    'farMedmorHarSøktUgyldigUttakEllerUtsettelseFørsteSeksUker' = 'farMedmorHarSøktUgyldigUttakEllerUtsettelseFørsteSeksUker',\n    'farMedmorHarSøktUgyldigAntallDagerUttakRundtFødsel' = 'farMedmorHarSøktUgyldigAntallDagerUttakRundtFødsel',\n    'harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUker' = 'harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUker',\n    'farMedmorHarSøktUttakRundtFødselUtenforGyldigPeriode' = 'farMedmorHarSøktUttakRundtFødselUtenforGyldigPeriode',\n    'stønadskontoInneholderForMyeUttakKunSøker' = 'stønadskontoInneholderForMyeUttakKunSøker',\n    'uttaksplanErBareOpphold' = 'uttaksplanErBareOpphold',\n    'uttaksplanStarterMedOpphold' = 'uttaksplanStarterMedOpphold',\n    'uttaksplanSlutterMedOpphold' = 'uttaksplanSlutterMedOpphold',\n    'uttaksplanGraderingStørreEnnSamtidigUttak' = 'uttaksplanGraderingStørreEnnSamtidigUttak',\n    'begrunnelseVedForSenEndringErUgyldig' = 'begrunnelseVedForSenEndringErUgyldig',\n    'begrunnelseVedForSenEndringHarUgyldigeChars' = 'begrunnelseVedForSenEndringHarUgyldigeChars',\n    'uttaksplanHarForMangeFlerbarnsdager' = 'uttaksplanHarForMangeFlerbarnsdager',\n    'uttaksplanInneholderDatoSomIkkeErUttaksdag' = 'uttaksplanInneholderDatoSomIkkeErUttaksdag',\n    'perioderManglerVedlegg' = 'manglendeVedlegg',\n    'inneholderSenUtsettelsePgaFerie' = 'inneholderSenUtsettelsePgaFerieTest',\n    'inneholderSenUtsettelsePgaArbeid' = 'inneholderSenUtsettelsePgaArbeidTest',\n    'inneholderTapteDager' = 'inneholderTapteDager',\n    'inneholderBareUtsettelser' = 'inneholderBareUtsettelser',\n    'inneholderForMyeFerie' = 'inneholderForMyeFerie',\n    'endringerOverskriverAnnenPartsPerioder' = 'endringerOverskriverAnnenPartsPerioder',\n    'periodeOverlapperAndrePerioder' = 'periodeOverlapperAndrePerioder',\n    'harSøktOmFerieUtenArbeidsforhold' = 'harSøktOmFerieUtenArbeidsforhold',\n    'kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme' = 'kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme',\n    'uttaksmengdeForFarMedmorErForHøy' = 'uttaksmengdeForFarMedmorErForHøy',\n    'burdeKanskjeSøkeGradering' = 'burdeKanskjeSøkeGradering',\n    'ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindato' = 'ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindato',\n    'inneholderPerioderUtenAktivitetskrav' = 'inneholderPerioderUtenAktivitetskrav',\n    'inneholderUtsettelserUtenÅrsak' = 'inneholderUtsettelserUtenÅrsak',\n    'farMedMorHarRettPåUttakRundtFødsel' = 'farMedMorHarRettPåUttakRundtFødsel',\n    'farMedmorHarRettPåForeldrepengerUtenAktivitetskrav' = 'farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest',\n    'farMedmorHarRettPåFlerbarnsdager' = 'farMedmorHarRettPåFlerbarnsdagerTest',\n    'inneholderUttaksperioderMedUbesvartGradering' = 'inneholderUttaksperioderMedUbesvartGradering',\n    'inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest' = 'inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest',\n    'overstigerMinsterettVedToTette' = 'overstigerMinsterettVedToTette',\n    'harPerioderEtterFørsteStønadsdagNesteBarnDerToTette' = 'harPerioderEtterFørsteStønadsdagNesteBarnDerToTette',\n}\n\nexport type RegelKey = UttaksplanRegelKey | PeriodeValiderRegelKey;\n\nconst uttaksplanValideringRegler = (familiehendelsesdato: Date): Regel[] => [\n    {\n        key: UttaksplanRegelKey.planenInneholderIngenPerioder,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderUttaksplanPerioderTest,\n    },\n    {\n        key: UttaksplanRegelKey.stønadskontoInneholderForMyeUttakKunSøker,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: stønadskontoInneholderForMyeUttakKunSøkerTest,\n    },\n    {\n        key: UttaksplanRegelKey.morHarSøktUgyldigUttakFørsteSeksUker,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harMorSøktUgyldigUttakFørsteSeksUkerTest,\n    },\n    {\n        key: UttaksplanRegelKey.farMedmorHarSøktUgyldigUttakEllerUtsettelseFørsteSeksUker,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harFarMedmorSøktUgyldigUttakEllerUtsettelseFørsteSeksUkerTest,\n    },\n    {\n        key: UttaksplanRegelKey.farMedmorHarSøktUgyldigAntallDagerUttakRundtFødsel,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: farMedmorHarSøktUgyldigAntallDagerUttakRundtFødselTest,\n    },\n    {\n        key: UttaksplanRegelKey.harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUker,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUkerTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksmengdeForFarMedmorErForHøy,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: erUttaksmengdeForFarMedmorForHøyTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksplanErBareOpphold,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: erUttaksplanBareOppholdTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksplanStarterMedOpphold,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: starterUttaksplanMedOppholdTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksplanSlutterMedOpphold,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: slutterUttaksplanMedOppholdTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksplanGraderingStørreEnnSamtidigUttak,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: erUttaksplanGraderingStørreEnnSamtidigUttakTest,\n    },\n    {\n        key: UttaksplanRegelKey.begrunnelseVedForSenEndringErUgyldig,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: erTilleggsopplysningerGyldigTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksplanHarForMangeFlerbarnsdager,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harUttaksplanForMangeFlerbarnsdagerTest,\n    },\n    {\n        key: UttaksplanRegelKey.begrunnelseVedForSenEndringHarUgyldigeChars,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harTilleggsopplysningerGyldigeCharsTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksplanInneholderDatoSomIkkeErUttaksdag,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderUttaksplanDatoSomIkkeErUttaksdag,\n    },\n    {\n        key: UttaksplanRegelKey.perioderManglerVedlegg,\n        alvorlighet: RegelAlvorlighet.ADVARSEL,\n        test: harPerioderManglendeVedleggTest,\n        slåsSammenVedOppsummering: true,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderSenUtsettelsePgaFerie,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: inneholderSenUtsettelsePgaFerieTest,\n        slåsSammenVedOppsummering: true,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderSenUtsettelsePgaArbeid,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: inneholderSenUtsettelsePgaArbeidTest,\n        slåsSammenVedOppsummering: true,\n    },\n    {\n        key: UttaksplanRegelKey.farMedMorHarRettPåUttakRundtFødsel,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: farMedMorHarRettPåUttakRundtFødselTest,\n        skjulesIPeriode: true,\n    },\n    {\n        key: UttaksplanRegelKey.farMedmorHarRettPåForeldrepengerUtenAktivitetskrav,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest,\n        skjulesIPeriode: true,\n    },\n    {\n        key: UttaksplanRegelKey.farMedmorHarRettPåFlerbarnsdager,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: farMedmorHarRettPåFlerbarnsdagerTest,\n        skjulesIPeriode: true,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderTapteDager,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: inneholderTapteDagerTest,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderBareUtsettelser,\n        alvorlighet: førsteOktober2021ReglerGjelder(familiehendelsesdato)\n            ? RegelAlvorlighet.FEIL\n            : RegelAlvorlighet.INFO,\n        test: inneholderBareUtsettelserTest,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderForMyeFerie,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderForMyeFerie,\n    },\n    {\n        key: UttaksplanRegelKey.endringerOverskriverAnnenPartsPerioder,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: overskriverEndringerAnnenPartsPerioder,\n        slåsSammenVedOppsummering: false,\n    },\n    {\n        key: UttaksplanRegelKey.periodeOverlapperAndrePerioder,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: overlapperPeriodeAndrePerioder,\n        slåsSammenVedOppsummering: false,\n        skjulesIOppsummering: true,\n    },\n    {\n        key: UttaksplanRegelKey.harSøktOmFerieUtenArbeidsforhold,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harSøktOmFerieUtenArbeidsforhold,\n    },\n    {\n        key: UttaksplanRegelKey.kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme,\n    },\n    {\n        key: UttaksplanRegelKey.burdeKanskjeSøkeGradering,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: burdeKanskjeSøkeGraderingTest,\n    },\n    {\n        key: UttaksplanRegelKey.ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindato,\n        alvorlighet: RegelAlvorlighet.ADVARSEL,\n        test: ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindatoTest,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderPerioderUtenAktivitetskrav,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderPerioderUtenAktivitetskrav,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderUttaksperioderMedUbesvartGradering,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderUttaksperioderMedUbesvartGradering,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderUtsettelserUtenÅrsak,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderUtsettelserUtenÅrsak,\n    },\n    {\n        key: UttaksplanRegelKey.overstigerMinsterettVedToTette,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: overstigerMinsterettVedToTette,\n    },\n    {\n        key: UttaksplanRegelKey.harPerioderEtterFørsteStønadsdagNesteBarnDerToTette,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: harPerioderEtterFørsteStønadsdagNesteBarnDerToTette,\n    },\n];\n\nconst uttaksplanRegler = (familiehendelsesDato: Date) => [\n    ...uttaksplanValideringRegler(familiehendelsesDato),\n    ...periodevalideringsregler,\n];\n\nexport default uttaksplanRegler;\n","import { groupBy } from 'lodash';\nimport uttaksplanRegler from '.';\nimport { getRegelAvvik, hasRegelFeil, regelHarAvvik, regelPasserer } from './utils/regelUtils';\nimport { RegelStatus, UttaksplanRegelTestresultat } from './utils/types/regelTypes';\nimport { Søknadsinfo } from '@navikt/fp-common';\n\nconst REGEL_INTL_PREFIX = 'uttaksplan.validering';\n\nexport const sjekkUttaksplanOppMotRegler = (valideringsgrunnlag: Søknadsinfo): RegelStatus[] => {\n    return uttaksplanRegler(valideringsgrunnlag.familiehendelsesdato).map((regel) => {\n        const resultat = regel.test(valideringsgrunnlag);\n        return resultat.passerer\n            ? regelPasserer(regel)\n            : regelHarAvvik(regel, REGEL_INTL_PREFIX, resultat.info, resultat.periodeId);\n    });\n};\n\nexport const validerUttaksplan = (søknadsinfo: Søknadsinfo): UttaksplanRegelTestresultat => {\n    const resultat = sjekkUttaksplanOppMotRegler(søknadsinfo);\n\n    const avvik = getRegelAvvik(resultat);\n    const avvikPerPeriode = groupBy(\n        avvik.filter((a) => a.periodeId !== undefined),\n        (r) => r.periodeId,\n    );\n\n    const harFeil = hasRegelFeil(avvik);\n    return {\n        resultat,\n        avvik,\n        avvikPerPeriode,\n        harFeil,\n    };\n};\n","import * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { VeilederMessage } from './types';\nimport VeilederMeldinger from './VeilederMeldinger';\nimport { GuidePanel } from '@navikt/ds-react';\nimport AriaText from '../../components/aria-text/AriaText';\n\ninterface Props {\n    messages: VeilederMessage[];\n    ariaTittel?: string;\n    skjulMeldingIkon?: boolean;\n}\n\nconst VeilederInfo: React.FunctionComponent<Props> = ({ messages, skjulMeldingIkon = false, ariaTittel }) => {\n    return (\n        <GuidePanel poster>\n            {ariaTittel && (\n                <AriaText tag=\"h2\">\n                    <FormattedMessage id=\"uttaksplan.regelAvvik.ariaTittel\" />\n                </AriaText>\n            )}\n            <VeilederMeldinger meldinger={messages} stil=\"transparent\" skjulMeldingIkon={skjulMeldingIkon} />\n        </GuidePanel>\n    );\n};\n\nexport default VeilederInfo;\n","import { VeiledermeldingerPerPeriode, VeilederMessage } from './types';\nimport { IntlShape } from 'react-intl';\nimport { RegelAvvik } from '../utils/types/regelTypes';\nimport { getRegelIntlValues, trimRelaterteRegelAvvik } from '../utils/regelUtils';\nimport { UttaksplanAvvikType } from '../utils/types/UttaksplanAvvikType';\nimport { groupBy } from 'lodash';\nimport { intlHasKey } from '@navikt/fp-common/src/common/utils/intlUtils';\n\nexport const veilederMessageAvsnitt = (\n    førsteTekst: VeilederMessage[],\n    andreTekst: VeilederMessage[],\n    visInfoOmPrematuruker: boolean,\n): VeilederMessage[] => {\n    return visInfoOmPrematuruker === false ? førsteTekst : førsteTekst.concat(andreTekst);\n};\n\nconst mapAvvikTilMessage = (avvik: RegelAvvik, intl: IntlShape): VeilederMessage => {\n    const { info } = avvik;\n    const tittelIntlKey = `${info.intlKey}.tittel`;\n    const harTittel = intlHasKey(intl, tittelIntlKey);\n    return {\n        type: avvik.regel.alvorlighet,\n        contentIntlKey: info.intlKey,\n        titleIntlKey: harTittel ? tittelIntlKey : undefined,\n        formatContentAsHTML: info.renderAsHtml,\n        values: getRegelIntlValues(intl, info),\n        periodeId: avvik.regel.skjulesIPeriode !== true ? avvik.periodeId : undefined,\n        skjulesIOppsummering: avvik.regel.skjulesIOppsummering,\n        avvikType: avvik.regel.avvikType as UttaksplanAvvikType,\n    };\n};\n\nexport const getUttaksplanVeilederinfo = (\n    avvik: RegelAvvik[],\n    intl: IntlShape,\n    grupperAvvik: boolean,\n): VeilederMessage[] => {\n    return trimRelaterteRegelAvvik(avvik, grupperAvvik).map((a) => mapAvvikTilMessage(a, intl));\n};\n\nexport const getPeriodelisteMeldinger = (veilederinfo: VeilederMessage[]): VeiledermeldingerPerPeriode => {\n    const meldinger = veilederinfo.filter((info) => info.periodeId !== undefined);\n    return groupBy(meldinger, (info) => info.periodeId);\n};\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */\nfunction throttle(func, wait, options) {\n  var leading = true,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, {\n    'leading': leading,\n    'maxWait': wait,\n    'trailing': trailing\n  });\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = throttle;\n","import throttle from 'lodash.throttle';\nimport { injectIntl, IntlShape } from 'react-intl';\nimport { Attachment, Block, intlUtils } from '@navikt/fp-common';\nimport { BodyLong, Label, ReadMore, Textarea } from '@navikt/ds-react';\nimport { ChangeEvent, Component } from 'react';\nimport { tilleggsopplysningerMaxLength } from '../../validering/tester/erTilleggsopplysningerGyldigTest';\n\ninterface OwnProps {\n    begrunnelse?: string;\n    vedlegg?: Attachment[];\n    onBegrunnelseTekstChange: (begrunnelse: string) => void;\n    intl: IntlShape;\n}\n\ntype Props = OwnProps;\n\ninterface State {\n    begrunnelse: string;\n}\n\nconst getLabel = (intl: IntlShape) => {\n    return (\n        <>\n            <Label>{intlUtils(intl, 'uttaksplan.tilleggsopplysninger.label')}</Label>\n        </>\n    );\n};\n\nexport type TextareaChangeEvent = ChangeEvent<HTMLTextAreaElement>;\n\nclass OppgiTilleggsopplysninger extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            begrunnelse: this.props.begrunnelse || '',\n        };\n\n        this.throttledOnChange = throttle(this.throttledOnChange, 2000);\n    }\n\n    throttledOnChange = () => {\n        this.props.onBegrunnelseTekstChange(this.state.begrunnelse);\n    };\n\n    handleBegrunnelseChange = (e: TextareaChangeEvent) => {\n        this.setState(\n            {\n                begrunnelse: e.target.value,\n            },\n            this.throttledOnChange,\n        );\n    };\n\n    render() {\n        const { intl } = this.props;\n\n        return (\n            <div className=\"blokk-m\">\n                <Block margin=\"l\" padBottom=\"xl\">\n                    <Textarea\n                        value={this.state.begrunnelse}\n                        maxLength={tilleggsopplysningerMaxLength}\n                        name=\"begrunnelseForSenEndring\"\n                        label={getLabel(intl)}\n                        onChange={this.handleBegrunnelseChange}\n                    />\n                    <ReadMore header={intlUtils(intl, 'uttaksplan.tilleggsopplysninger.apneLabel')}>\n                        <div style={{ backgroundColor: '#e9e7e7', padding: '1.5rem' }}>\n                            <Block margin=\"s\">\n                                <Label>\n                                    {intlUtils(intl, 'uttaksplan.tilleggsopplysninger.sykdomTilbakeITid.overskrift')}\n                                </Label>\n                                <BodyLong>\n                                    {intlUtils(intl, 'uttaksplan.tilleggsopplysninger.sykdomTilbakeITid')}\n                                </BodyLong>\n                            </Block>\n                            <Block margin=\"s\">\n                                <Label>{intlUtils(intl, 'uttaksplan.tilleggsopplysninger.uttak.overskrift')}</Label>\n                                <BodyLong>{intlUtils(intl, 'uttaksplan.tilleggsopplysninger.uttak')}</BodyLong>\n                            </Block>\n                            <Block margin=\"s\">\n                                <Label>\n                                    {intlUtils(\n                                        intl,\n                                        'uttaksplan.tilleggsopplysninger.utsettelsearbeidellergradering.overskrift',\n                                    )}\n                                </Label>\n                                <BodyLong>\n                                    {intlUtils(intl, 'uttaksplan.tilleggsopplysninger.utsettelsearbeidellergradering')}\n                                </BodyLong>\n                            </Block>\n                            <Label>{intlUtils(intl, 'uttaksplan.tilleggsopplysninger.sykdom.overskrift')}</Label>\n                            <BodyLong>{intlUtils(intl, 'uttaksplan.tilleggsopplysninger.sykdom')}</BodyLong>\n                        </div>\n                    </ReadMore>\n                </Block>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(OppgiTilleggsopplysninger);\n","import { FunctionComponent } from 'react';\nimport { bemUtils, Block } from '@navikt/fp-common';\nimport { FormattedMessage } from 'react-intl';\nimport { BodyShort, Button, Heading, Modal } from '@navikt/ds-react';\n\nimport './slettUttaksplanModal.less';\n\ninterface Props {\n    isOpen: boolean;\n    erEndringssøknad: boolean;\n    onClose: () => void;\n    handleSlettUttaksplanModalBekreft: () => void;\n}\n\nconst SlettUttaksplanModal: FunctionComponent<Props> = ({\n    isOpen,\n    erEndringssøknad,\n    onClose,\n    handleSlettUttaksplanModalBekreft,\n}) => {\n    const bem = bemUtils('slettUttaksplanModal');\n\n    let innhold1Id = 'uttaksplan.slettPlan.innhold1.førstegangssøknad';\n    let innhold2Id = 'uttaksplan.slettPlan.innhold2.førstegangssøknad';\n    if (erEndringssøknad) {\n        innhold1Id = 'uttaksplan.slettPlan.innhold1.endringssøknad';\n        innhold2Id = 'uttaksplan.slettPlan.innhold2.endringssøknad';\n    }\n\n    return (\n        <Modal\n            className={bem.block}\n            open={isOpen}\n            closeButton={true}\n            onClose={onClose}\n            aria-label=\"Slett uttaksplanen din\"\n        >\n            <div className={bem.element('content')}>\n                <Block padBottom=\"l\">\n                    <Heading size=\"small\">\n                        <FormattedMessage id=\"uttaksplan.slettPlan.modal.tittel\" />\n                    </Heading>\n                    <BodyShort>\n                        <FormattedMessage id={innhold1Id} />\n                    </BodyShort>\n                    <br />\n                    <BodyShort>\n                        <FormattedMessage id={innhold2Id} />\n                    </BodyShort>\n                </Block>\n                <div className={bem.element('knappWrapper')}>\n                    <Button onClick={handleSlettUttaksplanModalBekreft}>\n                        <FormattedMessage id=\"uttaksplan.slettPlan.slett\" />\n                    </Button>\n                    <Button variant=\"secondary\" onClick={onClose}>\n                        <FormattedMessage id=\"uttaksplan.slettPlan.avbryt\" />\n                    </Button>\n                </div>\n            </div>\n        </Modal>\n    );\n};\n\nexport default SlettUttaksplanModal;\n","import { Periode } from '@navikt/fp-common';\nimport { getPeriodeHullEllerPeriodeUtenUttak } from './uttaksplanbuilderUtils';\n\ninterface SlettPeriodeParams {\n    perioder: Periode[];\n    slettetPeriode: Periode;\n    familiehendelsesdato: Date;\n    harAktivitetskravIPeriodeUtenUttak: boolean;\n    erAdopsjon: boolean;\n    bareFarHarRett: boolean;\n    erFarEllerMedmor: boolean;\n    førsteUttaksdagNesteBarnsSak: Date | undefined;\n}\n\nexport const slettPeriode = ({\n    perioder,\n    slettetPeriode,\n    familiehendelsesdato,\n    harAktivitetskravIPeriodeUtenUttak,\n    erAdopsjon,\n    bareFarHarRett,\n    erFarEllerMedmor,\n    førsteUttaksdagNesteBarnsSak,\n}: SlettPeriodeParams): Periode[] => {\n    const result: Periode[] = perioder.reduce((res, periode, index) => {\n        if (index === 0 && periode.id === slettetPeriode.id) {\n            return res;\n        }\n\n        if (periode.id === slettetPeriode.id) {\n            res.push(\n                ...getPeriodeHullEllerPeriodeUtenUttak(\n                    slettetPeriode.tidsperiode,\n                    harAktivitetskravIPeriodeUtenUttak,\n                    familiehendelsesdato,\n                    erAdopsjon,\n                    bareFarHarRett,\n                    erFarEllerMedmor,\n                    førsteUttaksdagNesteBarnsSak,\n                ),\n            );\n            return res;\n        }\n\n        res.push(periode);\n        return res;\n    }, [] as Periode[]);\n\n    return result;\n};\n","import { Periode } from '@navikt/fp-common';\nimport { leggTilPeriode } from './leggTilPeriode';\nimport { slettPeriode } from './slettPeriode';\nimport { slåSammenLikePerioder } from './uttaksplanbuilderUtils';\n\ninterface OppdaterPeriodeParams {\n    perioder: Periode[];\n    endretPeriode: Periode;\n    originalPeriode: Periode;\n    familiehendelsesdato: Date;\n    harAktivitetskravIPeriodeUtenUttak: boolean;\n    erAdopsjon: boolean;\n    bareFarHarRett: boolean;\n    erFarEllerMedmor: boolean;\n    annenPartsUttak: Periode[] | undefined;\n    førsteUttaksdagNesteBarnsSak: Date | undefined;\n}\n\nexport const oppdaterPeriode = ({\n    perioder,\n    endretPeriode,\n    originalPeriode,\n    familiehendelsesdato,\n    harAktivitetskravIPeriodeUtenUttak,\n    erAdopsjon,\n    bareFarHarRett,\n    erFarEllerMedmor,\n    annenPartsUttak,\n    førsteUttaksdagNesteBarnsSak,\n}: OppdaterPeriodeParams): Periode[] => {\n    const perioderSlettetEndretPeriode = slåSammenLikePerioder(\n        slettPeriode({\n            perioder,\n            slettetPeriode: originalPeriode,\n            familiehendelsesdato,\n            harAktivitetskravIPeriodeUtenUttak,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak,\n        }),\n        familiehendelsesdato,\n        førsteUttaksdagNesteBarnsSak,\n        annenPartsUttak,\n    );\n\n    return slåSammenLikePerioder(\n        leggTilPeriode({\n            perioder: perioderSlettetEndretPeriode,\n            nyPeriode: endretPeriode,\n            familiehendelsesdato,\n            harAktivitetskravIPeriodeUtenUttak,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak,\n        }),\n        familiehendelsesdato,\n        førsteUttaksdagNesteBarnsSak,\n        annenPartsUttak,\n    );\n};\n","import { leggTilPeriode } from './leggTilPeriode';\nimport { oppdaterPeriode } from './oppdaterPeriode';\nimport { slettPeriode } from './slettPeriode';\nimport {\n    finnOgSettInnHull,\n    fjernUnødvendigeHull,\n    settInnAnnenPartsUttak,\n    slåSammenLikePerioder,\n} from './uttaksplanbuilderUtils';\nimport {\n    Periode,\n    isForeldrepengerFørFødselUttaksperiode,\n    isInfoPeriodeAnnenPart,\n    isUtsettelsesperiode,\n    starterUttaksperiodeFørFødsel,\n} from '@navikt/fp-common';\n\nconst leggTilPeriodeOgBuild = (\n    bevegeligePerioder: Periode[],\n    fastePerioder: Periode[],\n    nyPeriode: Periode,\n    familiehendelsesdato: Date,\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    annenPartsUttak: Periode[] | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n) => {\n    let nyePerioder = slåSammenLikePerioder(\n        leggTilPeriode({\n            perioder: bevegeligePerioder,\n            nyPeriode,\n            familiehendelsesdato,\n            harAktivitetskravIPeriodeUtenUttak,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak,\n        }),\n        familiehendelsesdato,\n        førsteUttaksdagNesteBarnsSak,\n    );\n\n    fastePerioder.forEach((fastPeriode) => {\n        nyePerioder = leggTilPeriode({\n            perioder: nyePerioder,\n            nyPeriode: fastPeriode,\n            familiehendelsesdato,\n            harAktivitetskravIPeriodeUtenUttak,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak,\n        });\n    });\n\n    if (annenPartsUttak) {\n        nyePerioder = finnOgSettInnHull(\n            settInnAnnenPartsUttak(nyePerioder, annenPartsUttak, familiehendelsesdato, førsteUttaksdagNesteBarnsSak),\n            harAktivitetskravIPeriodeUtenUttak,\n            familiehendelsesdato,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak,\n        );\n    }\n\n    return nyePerioder;\n};\n\nconst oppdaterPeriodeOgBuild = (\n    endretPeriode: Periode,\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    annenPartsUttak: Periode[] | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n) => {\n    const originalPeriode = perioder.find((p) => p.id === endretPeriode.id)!;\n\n    let oppdatertePerioder = fjernUnødvendigeHull(\n        oppdaterPeriode({\n            perioder,\n            endretPeriode,\n            originalPeriode,\n            familiehendelsesdato,\n            harAktivitetskravIPeriodeUtenUttak,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            annenPartsUttak,\n            førsteUttaksdagNesteBarnsSak,\n        }),\n    );\n\n    if (annenPartsUttak) {\n        oppdatertePerioder = finnOgSettInnHull(\n            oppdatertePerioder,\n            harAktivitetskravIPeriodeUtenUttak,\n            familiehendelsesdato,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak,\n        );\n        oppdatertePerioder = settInnAnnenPartsUttak(\n            oppdatertePerioder,\n            annenPartsUttak,\n            familiehendelsesdato,\n            førsteUttaksdagNesteBarnsSak,\n        );\n    }\n\n    return finnOgSettInnHull(\n        oppdatertePerioder,\n        harAktivitetskravIPeriodeUtenUttak,\n        familiehendelsesdato,\n        erAdopsjon,\n        bareFarHarRett,\n        erFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak,\n    );\n};\n\nconst slettPeriodeOgBuild = (\n    perioder: Periode[],\n    slettetPeriode: Periode,\n    familiehendelsesdato: Date,\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    annenPartsUttak: Periode[] | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n) => {\n    let nyePerioder = fjernUnødvendigeHull(\n        slåSammenLikePerioder(\n            slettPeriode({\n                perioder,\n                slettetPeriode,\n                familiehendelsesdato,\n                harAktivitetskravIPeriodeUtenUttak,\n                erAdopsjon,\n                bareFarHarRett,\n                erFarEllerMedmor,\n                førsteUttaksdagNesteBarnsSak,\n            }),\n            familiehendelsesdato,\n            førsteUttaksdagNesteBarnsSak,\n        ),\n    );\n\n    if (annenPartsUttak) {\n        nyePerioder = finnOgSettInnHull(\n            nyePerioder,\n            harAktivitetskravIPeriodeUtenUttak,\n            familiehendelsesdato,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak,\n        );\n        nyePerioder = settInnAnnenPartsUttak(\n            nyePerioder,\n            annenPartsUttak,\n            familiehendelsesdato,\n            førsteUttaksdagNesteBarnsSak,\n        );\n    }\n\n    return finnOgSettInnHull(\n        nyePerioder,\n        harAktivitetskravIPeriodeUtenUttak,\n        familiehendelsesdato,\n        erAdopsjon,\n        bareFarHarRett,\n        erFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak,\n    );\n};\n\nconst getFastePerioder = (perioder: Periode[], familiehendelsesdato: Date): Periode[] => {\n    return perioder.filter(\n        (p) =>\n            isUtsettelsesperiode(p) ||\n            isForeldrepengerFørFødselUttaksperiode(p) ||\n            starterUttaksperiodeFørFødsel(p, familiehendelsesdato),\n    );\n};\n\nconst getBevegeligePerioder = (\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n): Periode[] => {\n    return finnOgSettInnHull(\n        perioder.filter(\n            (p) =>\n                !isUtsettelsesperiode(p) &&\n                !isForeldrepengerFørFødselUttaksperiode(p) &&\n                !starterUttaksperiodeFørFødsel(p, familiehendelsesdato) &&\n                !isInfoPeriodeAnnenPart(p),\n        ),\n        harAktivitetskravIPeriodeUtenUttak,\n        familiehendelsesdato,\n        erAdopsjon,\n        bareFarHarRett,\n        erFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak,\n    );\n};\n\nconst getAnnenPartsUttak = (perioder: Periode[]): Periode[] => {\n    return perioder.filter((p) => isInfoPeriodeAnnenPart(p));\n};\n\nconst Uttaksplanbuilder = (\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n    opprinneligPlan?: Periode[],\n) => {\n    const perioderUtenAnnenPart = finnOgSettInnHull(\n        perioder.filter((p) => !isInfoPeriodeAnnenPart(p)),\n        harAktivitetskravIPeriodeUtenUttak,\n        familiehendelsesdato,\n        erAdopsjon,\n        bareFarHarRett,\n        erFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak,\n    );\n    const fastePerioder = getFastePerioder(perioderUtenAnnenPart, familiehendelsesdato);\n    const bevegeligePerioder = getBevegeligePerioder(\n        perioderUtenAnnenPart,\n        familiehendelsesdato,\n        harAktivitetskravIPeriodeUtenUttak,\n        erAdopsjon,\n        bareFarHarRett,\n        erFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak,\n    );\n    let annenPartsUttak: Periode[] | undefined = undefined;\n\n    if (opprinneligPlan) {\n        annenPartsUttak = getAnnenPartsUttak(opprinneligPlan);\n    }\n\n    return {\n        leggTilPeriode: (nyPeriode: Periode) =>\n            leggTilPeriodeOgBuild(\n                bevegeligePerioder,\n                fastePerioder,\n                nyPeriode,\n                familiehendelsesdato,\n                harAktivitetskravIPeriodeUtenUttak,\n                erAdopsjon,\n                bareFarHarRett,\n                erFarEllerMedmor,\n                annenPartsUttak,\n                førsteUttaksdagNesteBarnsSak,\n            ),\n        leggTilPerioder: (nyePerioder: Periode[]) => {\n            let resultat: Periode[] = [];\n            nyePerioder.forEach((periode, index) => {\n                if (index === 0) {\n                    resultat = leggTilPeriodeOgBuild(\n                        bevegeligePerioder,\n                        fastePerioder,\n                        periode,\n                        familiehendelsesdato,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        annenPartsUttak,\n                        førsteUttaksdagNesteBarnsSak,\n                    );\n                } else {\n                    const nyAnnenPartsUttak = getAnnenPartsUttak(resultat);\n                    const nyFastePerioder = getFastePerioder(resultat, familiehendelsesdato);\n                    const nyBevegeligePerioder = getBevegeligePerioder(\n                        resultat,\n                        familiehendelsesdato,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        førsteUttaksdagNesteBarnsSak,\n                    );\n                    resultat = leggTilPeriodeOgBuild(\n                        nyBevegeligePerioder,\n                        nyFastePerioder,\n                        periode,\n                        familiehendelsesdato,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        nyAnnenPartsUttak,\n                        førsteUttaksdagNesteBarnsSak,\n                    );\n                }\n            });\n            return resultat;\n        },\n        oppdaterPeriode: (endretPeriode: Periode) =>\n            oppdaterPeriodeOgBuild(\n                endretPeriode,\n                perioderUtenAnnenPart,\n                familiehendelsesdato,\n                harAktivitetskravIPeriodeUtenUttak,\n                erAdopsjon,\n                bareFarHarRett,\n                erFarEllerMedmor,\n                annenPartsUttak,\n                førsteUttaksdagNesteBarnsSak,\n            ),\n        oppdaterPerioder: (oppdatertePerioder: Periode[]) => {\n            let resultat: Periode[] = [];\n            oppdatertePerioder.forEach((endretPeriode, index) => {\n                if (index === 0) {\n                    resultat = oppdaterPeriodeOgBuild(\n                        endretPeriode,\n                        perioderUtenAnnenPart,\n                        familiehendelsesdato,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        annenPartsUttak,\n                        førsteUttaksdagNesteBarnsSak,\n                    );\n                } else {\n                    const nyAnnenPartsUttak = getAnnenPartsUttak(resultat);\n                    const nyFastePerioder = getFastePerioder(resultat, familiehendelsesdato);\n                    const nyBevegeligePerioder = getBevegeligePerioder(\n                        resultat,\n                        familiehendelsesdato,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        førsteUttaksdagNesteBarnsSak,\n                    );\n                    resultat = leggTilPeriodeOgBuild(\n                        nyBevegeligePerioder,\n                        nyFastePerioder,\n                        endretPeriode,\n                        familiehendelsesdato,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        nyAnnenPartsUttak,\n                        førsteUttaksdagNesteBarnsSak,\n                    );\n                }\n            });\n            return resultat;\n        },\n        slettPeriode: (slettetPeriode: Periode) =>\n            slettPeriodeOgBuild(\n                perioderUtenAnnenPart,\n                slettetPeriode,\n                familiehendelsesdato,\n                harAktivitetskravIPeriodeUtenUttak,\n                erAdopsjon,\n                bareFarHarRett,\n                erFarEllerMedmor,\n                annenPartsUttak,\n                førsteUttaksdagNesteBarnsSak,\n            ),\n    };\n};\n\nexport default Uttaksplanbuilder;\n","import { FunctionComponent } from 'react';\nimport { bemUtils, Block } from '@navikt/fp-common';\nimport { FormattedMessage } from 'react-intl';\nimport { BodyShort, Button, Heading, Modal } from '@navikt/ds-react';\n\nimport './resetUttaksplanModal.less';\n\ninterface Props {\n    isOpen: boolean;\n    onClose: () => void;\n    handleResetUttaksplanModalBekreft: () => void;\n}\n\nconst ResetUttaksplanModal: FunctionComponent<Props> = ({ isOpen, onClose, handleResetUttaksplanModalBekreft }) => {\n    const bem = bemUtils('resetUttaksplanModal');\n\n    return (\n        <Modal\n            className={bem.block}\n            open={isOpen}\n            closeButton={true}\n            onClose={onClose}\n            aria-label=\"Tilbakestill uttaksplanen din\"\n        >\n            <div className={bem.element('content')}>\n                <Block padBottom=\"l\">\n                    <Heading size=\"small\">\n                        <FormattedMessage id=\"uttaksplan.resetPlan.innhold1\" />\n                    </Heading>\n                    <BodyShort>\n                        <FormattedMessage id=\"uttaksplan.resetPlan.innhold2\" />\n                    </BodyShort>\n                </Block>\n                <div className={bem.element('knappWrapper')}>\n                    <Button onClick={handleResetUttaksplanModalBekreft}>\n                        <FormattedMessage id=\"uttaksplan.resetPlan.slett\" />\n                    </Button>\n                    <Button variant=\"secondary\" onClick={onClose}>\n                        <FormattedMessage id=\"uttaksplan.resetPlan.avbryt\" />\n                    </Button>\n                </div>\n            </div>\n        </Modal>\n    );\n};\n\nexport default ResetUttaksplanModal;\n","import { Periode, isUttaksperiode } from '@navikt/fp-common';\n\ninterface HarAktivitetskravIPeriodeUtenUttakParams {\n    erDeltUttak: boolean;\n    morHarRett: boolean;\n    søkerErAleneOmOmsorg: boolean;\n}\n\nexport const getHarAktivitetskravIPeriodeUtenUttak = ({\n    erDeltUttak,\n    morHarRett,\n    søkerErAleneOmOmsorg,\n}: HarAktivitetskravIPeriodeUtenUttakParams) => {\n    return !erDeltUttak && !morHarRett && !søkerErAleneOmOmsorg;\n};\n\nexport const uttaksplanInneholderPerioderUtenKonto = (uttaksplan: Periode[]): boolean => {\n    return uttaksplan.find((periode) => isUttaksperiode(periode) && periode.konto === undefined) !== undefined;\n};\n","import { FunctionComponent, useEffect, useState } from 'react';\nimport {\n    AnnenForelder,\n    Arbeidsforhold,\n    Attachment,\n    Barn,\n    BarnFraNesteSak,\n    Block,\n    Dekningsgrad,\n    EksisterendeSak,\n    Forelder,\n    ForeldreparSituasjon,\n    ISOStringToDate,\n    Periode,\n    SenEndringÅrsak,\n    Situasjon,\n    Søkersituasjon,\n    TilgjengeligStønadskonto,\n    Tilleggsopplysninger,\n    Utsettelsesperiode,\n    Uttaksperiode,\n    farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato,\n    getSeneEndringerSomKreverBegrunnelse,\n    getToTetteReglerGjelder,\n    intlUtils,\n    isAnnenForelderOppgitt,\n    isAnnenPartInfoPeriode,\n    isUtsettelsesperiode,\n    tidperiodeOverlapperDato,\n    NavnPåForeldre,\n} from '@navikt/fp-common';\nimport Planlegger from './components/planlegger/Planlegger';\nimport OversiktKvoter from './components/oversikt-kvoter/OversiktKvoter';\nimport { validerUttaksplan } from './validering/validerUttaksplan';\nimport VeilederInfo from './validering/veilederInfo/VeilederInfo';\nimport { useIntl } from 'react-intl';\nimport { getPeriodelisteMeldinger, getUttaksplanVeilederinfo } from './validering/veilederInfo/utils';\nimport OppgiTilleggsopplysninger from './components/oppgi-tilleggsopplysninger/OppgiTilleggsopplysninger';\nimport SlettUttaksplanModal from './components/slett-uttaksplan-modal/SlettUttaksplanModal';\nimport Uttaksplanbuilder from './builder/Uttaksplanbuilder';\nimport ResetUttaksplanModal from './components/reset-uttaksplan-modal/ResetUttaksplanModal';\nimport { splittPeriodePåDato, splittUttaksperiodePåFamiliehendelsesdato } from './builder/leggTilPeriode';\nimport { getHarAktivitetskravIPeriodeUtenUttak } from './utils/uttaksplanUtils';\n\ninterface Props {\n    foreldreSituasjon: ForeldreparSituasjon;\n    forelderVedAleneomsorg: Forelder | undefined;\n    erDeltUttak: boolean;\n    uttaksplan: Periode[];\n    familiehendelsesdato: string;\n    handleOnPlanChange: (nyPlan: Periode[]) => void;\n    stønadskontoer: TilgjengeligStønadskonto[];\n    navnPåForeldre: NavnPåForeldre;\n    annenForelder: AnnenForelder;\n    arbeidsforhold: Arbeidsforhold[];\n    erEndringssøknad: boolean;\n    erFarEllerMedmor: boolean;\n    erFlerbarnssøknad: boolean;\n    erAleneOmOmsorg: boolean;\n    harMidlertidigOmsorg: boolean;\n    situasjon: Situasjon;\n    erMorUfør: boolean;\n    morHarRett: boolean;\n    søkersituasjon: Søkersituasjon;\n    dekningsgrad: Dekningsgrad;\n    antallBarn: number;\n    tilleggsopplysninger: Tilleggsopplysninger;\n    eksisterendeSak: EksisterendeSak | undefined;\n    perioderSomSkalSendesInn: Periode[];\n    morsSisteDag: Date | undefined;\n    harKomplettUttaksplan: boolean;\n    opprinneligPlan: Periode[] | undefined;\n    termindato: Date | undefined;\n    barn: Barn;\n    setUttaksplanErGyldig: (planErGyldig: boolean) => void;\n    handleBegrunnelseChange: (årsak: SenEndringÅrsak, begrunnelse: string) => void;\n    handleSlettUttaksplan: () => void;\n    handleResetUttaksplan: () => void;\n    visAutomatiskJusteringForm: boolean;\n    perioderMedUttakRundtFødsel: Uttaksperiode[];\n    barnFraNesteSak: BarnFraNesteSak | undefined;\n    familiehendelsesdatoNesteSak: Date | undefined;\n    førsteUttaksdagNesteBarnsSak: Date | undefined;\n    minsterettUkerToTette: number | undefined;\n    saveAttachment: (vedlegg: Attachment) => void;\n}\n\nexport interface PeriodeValidState {\n    id: string;\n    isValid: boolean;\n}\n\nconst Uttaksplan: FunctionComponent<Props> = ({\n    foreldreSituasjon,\n    erDeltUttak,\n    uttaksplan,\n    familiehendelsesdato,\n    stønadskontoer,\n    handleOnPlanChange,\n    navnPåForeldre,\n    annenForelder,\n    arbeidsforhold,\n    erEndringssøknad,\n    erFarEllerMedmor,\n    erFlerbarnssøknad,\n    erAleneOmOmsorg,\n    harMidlertidigOmsorg,\n    situasjon,\n    erMorUfør,\n    morHarRett,\n    søkersituasjon,\n    dekningsgrad,\n    antallBarn,\n    tilleggsopplysninger,\n    eksisterendeSak,\n    perioderSomSkalSendesInn,\n    harKomplettUttaksplan,\n    termindato,\n    opprinneligPlan,\n    setUttaksplanErGyldig,\n    handleBegrunnelseChange,\n    handleSlettUttaksplan,\n    handleResetUttaksplan,\n    barn,\n    barnFraNesteSak,\n    familiehendelsesdatoNesteSak,\n    førsteUttaksdagNesteBarnsSak,\n    minsterettUkerToTette,\n    saveAttachment,\n}) => {\n    const familiehendelsesdatoDate = ISOStringToDate(familiehendelsesdato)!;\n    const intl = useIntl();\n    const [perioderErGyldige, setPerioderErGyldige] = useState<PeriodeValidState[]>([]);\n    const [slettUttaksplanModalOpen, setSlettUttaksplanModalOpen] = useState(false);\n    const [resetUttaksplanModalOpen, setResetUttaksplanModalOpen] = useState(false);\n    const harAktivitetskravIPeriodeUtenUttak = getHarAktivitetskravIPeriodeUtenUttak({\n        erDeltUttak,\n        morHarRett,\n        søkerErAleneOmOmsorg: erAleneOmOmsorg,\n    });\n    const uttaksplanUtenAnnenPartsSamtidigUttak = uttaksplan.filter(\n        (p) => !(isAnnenPartInfoPeriode(p) && !p.visPeriodeIPlan),\n    );\n    const bareFarHarRett = !morHarRett;\n    const annenForelderHarRettINorge =\n        isAnnenForelderOppgitt(annenForelder) && annenForelder.harRettPåForeldrepengerINorge!;\n    const toTetteReglerGjelder = getToTetteReglerGjelder(familiehendelsesdatoDate, familiehendelsesdatoNesteSak);\n\n    const builder = Uttaksplanbuilder(\n        uttaksplanUtenAnnenPartsSamtidigUttak,\n        familiehendelsesdatoDate,\n        harAktivitetskravIPeriodeUtenUttak,\n        situasjon === 'adopsjon',\n        bareFarHarRett,\n        erFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak,\n        opprinneligPlan,\n    );\n\n    const handleDeletePeriode = (periodeId: string) => {\n        const slettetPeriode = uttaksplan.find((p) => p.id === periodeId)!;\n        const result = builder.slettPeriode(slettetPeriode);\n\n        handleOnPlanChange(result);\n    };\n\n    const handleUpdatePeriode = (oppdatertPeriode: Periode, familiehendelsesdato: Date) => {\n        let resultat: Periode[] = [];\n        if (\n            farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato(\n                oppdatertPeriode,\n                familiehendelsesdato,\n                morHarRett,\n                termindato,\n            )\n        ) {\n            const perioder = splittUttaksperiodePåFamiliehendelsesdato(\n                oppdatertPeriode as Uttaksperiode,\n                familiehendelsesdato,\n            );\n\n            resultat = builder.oppdaterPerioder(perioder);\n\n            handleOnPlanChange(resultat);\n        } else if (\n            førsteUttaksdagNesteBarnsSak !== undefined &&\n            tidperiodeOverlapperDato(oppdatertPeriode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n        ) {\n            const perioder = splittPeriodePåDato(oppdatertPeriode, førsteUttaksdagNesteBarnsSak);\n            resultat = builder.oppdaterPerioder(perioder);\n            handleOnPlanChange(resultat);\n        } else {\n            const result = builder.oppdaterPeriode(oppdatertPeriode);\n\n            handleOnPlanChange(result);\n        }\n    };\n\n    const handleAddPeriode = (nyPeriode: Periode, familiehendelsesdato: Date) => {\n        let resultat: Periode[] = [];\n        if (\n            farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato(\n                nyPeriode,\n                familiehendelsesdato,\n                morHarRett,\n                termindato,\n            )\n        ) {\n            const perioder = splittUttaksperiodePåFamiliehendelsesdato(\n                nyPeriode as Uttaksperiode,\n                familiehendelsesdato,\n            );\n\n            resultat = builder.leggTilPerioder(perioder);\n\n            handleOnPlanChange(resultat);\n        } else if (\n            førsteUttaksdagNesteBarnsSak !== undefined &&\n            tidperiodeOverlapperDato(nyPeriode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n        ) {\n            const perioder = splittPeriodePåDato(nyPeriode, førsteUttaksdagNesteBarnsSak);\n            resultat = builder.leggTilPerioder(perioder);\n            handleOnPlanChange(resultat);\n        } else {\n            resultat = builder.leggTilPeriode(nyPeriode);\n            handleOnPlanChange(resultat);\n        }\n    };\n\n    const vedleggForSenEndring = []!; //TODO: handleBegrunnelseVedleggChange\n\n    const årsakTilSenEndring = getSeneEndringerSomKreverBegrunnelse(perioderSomSkalSendesInn);\n\n    const handleBegrunnelseTekstChange = (begrunnelse: string) => {\n        handleBegrunnelseChange(årsakTilSenEndring, begrunnelse);\n    };\n\n    const uttaksplanValidering = validerUttaksplan({\n        søkersituasjon: søkersituasjon,\n        arbeidsforhold: arbeidsforhold,\n        dekningsgrad: dekningsgrad,\n        erEndringssøknad: erEndringssøknad,\n        antallBarn: antallBarn,\n        annenForelder: annenForelder,\n        navnPåForeldre: navnPåForeldre,\n        søkerErFarEllerMedmor: erFarEllerMedmor,\n        søkerErAleneOmOmsorg: erAleneOmOmsorg,\n        søkerHarMidlertidigOmsorg: harMidlertidigOmsorg,\n        erDeltUttak: erDeltUttak,\n        morErUfør: erMorUfør,\n        morHarRett: morHarRett,\n        erFlerbarnssøknad: erFlerbarnssøknad,\n        familiehendelsesdato: familiehendelsesdatoDate,\n        termindato: termindato,\n        stønadskontoer: stønadskontoer,\n        perioder: uttaksplan,\n        harKomplettUttaksplan,\n        tilleggsopplysninger: tilleggsopplysninger,\n        eksisterendeSak: eksisterendeSak,\n        perioderSomSkalSendesInn: perioderSomSkalSendesInn,\n        barn: barn,\n        familiehendelsesdatoNesteSak,\n        førsteUttaksdagNesteBarnsSak,\n        minsterettUkerToTette,\n    });\n\n    useEffect(() => {\n        if (perioderErGyldige.some((p) => !p.isValid) || uttaksplanValidering.harFeil) {\n            setUttaksplanErGyldig(false);\n        } else {\n            setUttaksplanErGyldig(true);\n        }\n    });\n\n    const handleSlettUttaksplanModalClose = () => {\n        setSlettUttaksplanModalOpen(false);\n    };\n\n    const handleSlettUttaksplanModalBekreft = () => {\n        setSlettUttaksplanModalOpen(false);\n        handleSlettUttaksplan();\n    };\n\n    const handleResetUttaksplanModalClose = () => {\n        setResetUttaksplanModalOpen(false);\n    };\n\n    const handleResetUttaksplanModalBekreft = () => {\n        setResetUttaksplanModalOpen(false);\n        handleResetUttaksplan();\n    };\n\n    const uttaksplanVeilederInfo = getUttaksplanVeilederinfo(uttaksplanValidering.avvik, intl, false);\n    const meldingerPerPeriode = getPeriodelisteMeldinger(uttaksplanVeilederInfo);\n\n    const utsettelserIPlan = uttaksplan.filter((p) => isUtsettelsesperiode(p)) as Utsettelsesperiode[];\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <Planlegger\n                    uttaksplan={uttaksplan}\n                    familiehendelsesdato={familiehendelsesdatoDate}\n                    handleUpdatePeriode={handleUpdatePeriode}\n                    stønadskontoer={stønadskontoer}\n                    navnPåForeldre={navnPåForeldre}\n                    annenForelder={annenForelder}\n                    arbeidsforhold={arbeidsforhold}\n                    handleDeletePeriode={handleDeletePeriode}\n                    handleAddPeriode={handleAddPeriode}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    erFlerbarnssøknad={erFlerbarnssøknad}\n                    erDeltUttak={erDeltUttak}\n                    erAleneOmOmsorg={erAleneOmOmsorg}\n                    situasjon={situasjon}\n                    meldingerPerPeriode={meldingerPerPeriode}\n                    erMorUfør={erMorUfør}\n                    setPerioderErGyldige={setPerioderErGyldige}\n                    erEndringssøknad={erEndringssøknad}\n                    setSlettUttaksplanModalOpen={setSlettUttaksplanModalOpen}\n                    setResetUttaksplanModalOpen={setResetUttaksplanModalOpen}\n                    termindato={termindato}\n                    barn={barn}\n                    utsettelserIPlan={utsettelserIPlan}\n                    barnFraNesteSak={barnFraNesteSak}\n                    perioderErGyldige={perioderErGyldige}\n                    saveAttachment={saveAttachment}\n                />\n            </Block>\n\n            <Block padBottom=\"xl\">\n                <OversiktKvoter\n                    tilgjengeligeStønadskontoer={stønadskontoer}\n                    uttaksplan={uttaksplan}\n                    erDeltUttak={erDeltUttak}\n                    foreldreparSituasjon={foreldreSituasjon}\n                    familiehendelsesdato={familiehendelsesdatoDate}\n                    annenForelderHarRettINorge={annenForelderHarRettINorge}\n                    toTetteReglerGjelder={toTetteReglerGjelder}\n                    intl={intl}\n                    erAleneOmOmsorg={erAleneOmOmsorg}\n                    erEndringssøknad={erEndringssøknad}\n                    rolle={søkersituasjon.rolle}\n                    situasjon={søkersituasjon.situasjon}\n                    navnPåForeldre={navnPåForeldre}\n                />\n            </Block>\n            <Block visible={uttaksplanVeilederInfo.length > 0} padBottom=\"l\">\n                <VeilederInfo\n                    messages={uttaksplanVeilederInfo}\n                    ariaTittel={intlUtils(intl, 'uttaksplan.regelAvvik.ariaTittel')}\n                />\n            </Block>\n            {årsakTilSenEndring && årsakTilSenEndring !== SenEndringÅrsak.Ingen && (\n                <OppgiTilleggsopplysninger\n                    begrunnelse={\n                        tilleggsopplysninger.begrunnelseForSenEndring\n                            ? tilleggsopplysninger.begrunnelseForSenEndring.tekst\n                            : ''\n                    }\n                    vedlegg={vedleggForSenEndring}\n                    onBegrunnelseTekstChange={handleBegrunnelseTekstChange}\n                    //onVedleggChange={handleBegrunnelseVedleggChange}\n                />\n            )}\n            <SlettUttaksplanModal\n                isOpen={slettUttaksplanModalOpen}\n                erEndringssøknad={erEndringssøknad}\n                onClose={handleSlettUttaksplanModalClose}\n                handleSlettUttaksplanModalBekreft={handleSlettUttaksplanModalBekreft}\n            />\n            <ResetUttaksplanModal\n                isOpen={resetUttaksplanModalOpen}\n                onClose={handleResetUttaksplanModalClose}\n                handleResetUttaksplanModalBekreft={handleResetUttaksplanModalBekreft}\n            />\n        </>\n    );\n};\n\nexport default Uttaksplan;\n"],"names":["UttakRundtFødselÅrsak","getErMorUfør","annenForelder","erFarEllerMedmor","isAnnenForelderOppgitt","harAnnenForelderRettIEØS","aktivitetskravMorUtil","søkerErFarEllerMedmor","reglerFørFørsteOkt2021","dayjs","annenForelderErUfør","annenForelderHarRett","getMorsAktivitetSkjemanummer","morsAktivitet","MorsAktivitet","Skjemanummer","getMorsAktivitet","aktivitetskravMorValue","erMorForSykValue","hasValue","getBareFarHarRettKontoUtenAktivitetskravUker","antallBarn","morErUfør","familiehendelsesdato","dekningsgrad","bareFarHarRett","andreAugust2022ReglerGjelder","morUførUker","flerbarnsukerSomDelAvMinsterett","Dekningsgrad","getBareFarHarRettFlerbarnsdagerUker","flerbarnsUker","uttaksConstants","getBareFarHarRettAntallUkerPåÅTaUtDagerUtenAktivitetskravFørWLB","antallUkerEtterFødselMor","antallUkerForeldrepengerFar","getFlerbarnsuker","uttaksplanHarForMangeFlerbarnsdager","uttaksplan","periode","isUttaksperiode","sum","finnAntallDagerÅTrekke","sisteMuligePermisjonsdag","familiehendelsedato","startDato","Uttaksdagen","konverterMinOgMaxDatoerTilString","minDate","maxDate","dateToISOString","defaultPermisjonsperiodeAvgrensning","minDato","maksDato","startdatoFørTermin","termindato","termindatoMinus12Uker","startdatoFørTerminForeldrepengerFørFødselKonto","ekstrauttakFørFødsel","sisteDagFørFødsel","startdatoPermisjonAleneomsorgFarMedmor","datoForAleneomsorg","startdatoPermisjonAdopsjon","morsSisteUttaksdag","startdatoPermisjonFarMedmor","situasjon","defaultAvgrensning","getFørsteUttaksdag2UkerFørFødsel","uttaksplanDatoavgrensninger","PeriodeUttakFormField","PeriodeUttakFormComponents","getTypedFormComponents","MorErForSykDokumentasjonOpplastning","navnMor","vedlegg","isOpen","jsxs","Fragment","jsx","Block","GuidePanel","FormattedMessage","FormikFileUploader","AttachmentType","ErMorForSykSpørsmål","fieldName","erMorForSyk","intl","useIntl","intlUtils","value","YesOrNo","FlerbarnsdagerSpørsmål","HvemSkalHaUttakSpørsmål","navnPåForeldre","capitalizeFirstLetter","Forelder","getSpørsmålsTekst","erOppholdsperiode","navnAnnenForelder","HvilkenKontoSpørsmål","velgbareStønadskontoer","erAleneOmOmsorg","legend","radios","konto","getStønadskontoNavn","UttakRundtFødselÅrsakSpørsmål","uttakRundtFødselÅrsak","OverføringsårsakSpørsmål","erEndringssøknad","valgtOverføringsårsak","navn","OverføringÅrsakType","beOmDokumentasjon","getNavnGenitivEierform","prosentValideringSamtidigUttak","samtidigUttakProsent","getFloatFromString","prosentValideringGradering","stillingsprosent","SamtidigUttakSpørsmål","erFlerbarnssøknad","navnPåAnnenForelder","samtidigUttakProsentVisible","samtidigUttakInfoTekst","Link","links","getArbeidsOptions","arbeidsforhold","tidsperiode","aktiveArbeidsforholdIPerioden","getKunArbeidsforholdForValgtTidsperiode","defaultOptions","Arbeidsform","eksisterendeArbeidsforhold","arb","SkalHaGraderingSpørsmål","graderingsprosentVisible","ReadMore","BodyShort","jsonSort","json","isObject","v","sort","o","a","b","k","SubmitListener","cleanup","formik","useFormikContext","isSubmitting","isValidating","submitForm","setValues","cleanedValues","ref","useRef","useEffect","currentValuesJSONString","valuesEqualLastValues","uttaksdatoer","getFørsteUttaksdagForeldrepengerFørFødsel","getFørsteMuligeUttaksdag","getSisteMuligeUttaksdag","getUttaksdatoer","førsteUttaksdag","førsteUttaksdagForeldrepengerFørFødsel","førsteMuligeUttaksdag","sisteUttaksdagFørFødsel","sisteMuligeUttaksdag","sisteUttaksdagInnenforSeksUker","getTidsperiode","getFørsteUttaksdagPåEllerEtterFødsel","erInnenFørsteSeksUkerFødselFarMedmor","førsteUttaksdagEtterSeksUker","isValidTidsperiode","getDatoavgrensningerForFarMedmorPeriodeRundtFødselWLB","ugyldigeTidsperioder","getSisteUttaksdag6UkerEtterFødsel","getDatoavgrensningerForStønadskonto","getDatoavgrensningerForPeriodeUtenKonto","StønadskontoType","getDatoavgrensningerForForeldrepengerFørFødsel","Tidsperioden","getDatoavgrensningerForEkstrauttakFørTermin","standardAvgrensninger","standardAvgrensningerForUttakEtterFødsel","avgrensninger","ISOStringToDate","datoÅRegneFra","getDatoavgrensningerForBareFarMedmorHarRettWLB","Form","getDatoAvgrensninger","fom","tom","morHarRett","erFarMedmorOgHarAleneomsorg","isUtsettelsesperiode","isUttaksperiodeFarMedmorPgaFødsel","isUttaksperiodeBareFarMedmorHarRett","mapTidsperiodeStringToTidsperiode","TidsperiodeForm","utsettelserIPlan","initialMonth","onBekreft","onCancel","values","datoAvgrensninger","dateRangeValidation","Button","kontoSkalBesvares","periodetype","stønadskontoer","Periodetype","uttakRundtFødselÅrsakSpørsmålSkalBesvares","annenForelderKanIkkeOppgis","søkerHarMidlertidigOmsorg","bareFarMedmorHarRett","erFarMedmorSinWLBTidsperiodeRundtFødsel","farMedmorBrukerForeldrepengerMedAktivitetskravRundtFødselOgMorIkkeErSyk","famDato","sisteUttaksdag6UkerEtterFødsel","aktivitetskravMorSkalBesvares","ønskerFlerbarnsdager","samtidigUttak","kontotype","søkerErMor","erMorForForSykSkalBesvares","årsakTilUttakRundtFødselSkalBesvares","graderingSkalBesvares","erFarMedmor","morErForSyk","farMedmorSøkerDeFørsteSeksUkeneFørWLBOgMorErIkkeSyk","sisteUttaksdagInnenSeksUkerEtterFødsel","bareFarHarRettSøkerAktivitetsKravKontoDeFørsteSeksUkeneOgMorErIkkeSyk","graderingSkalBesvaresPgaWLBUttakRundtFødsel","tidperiode","samtidigUttakSkalBesvares","erUttakInnenFørsteSeksUkerFødselFarMedmor","erUttakFørFødsel","erAleneOmsorg","erDeltUttakINorge","annenforelderKanIkkeOppgis","erUttakEgenKvoteFarMedmorFørsteSeksUkerUtenFlerbarnsdager","ønskerFlerbarnsdagerSkalBesvares","stønadskontoType","hvemSkalTaUttakSkalBesvares","erSamtidigUttakFarMedmorFørFørsteSeksUkerWLB","overføringsårsakSkalBesvares","kontoValue","annenForelderHarRettIEØS","getUttakSkjemaregler","formValues","regelProps","convertYesOrNoOrUndefinedToBoolean","erSamtidigUttakFarMedmorFørFødselWLB","erDeltUttak","skalViseWLBInfoOmSamtidigUttakRundtFødsel","skalViseGradering","regler","skalViseAktivitetskrav","skalViseSamtidigUttak","skalViseFlerbarnsdager","skalViseKonto","PeriodeUttakFormConfig","periodeUttakFormQuestionsConfig","Questions","getVeilederTekst","morsAktivitetIPerioden","listData","listItem","index","renderOptions","aktivitetsid","AktivitetskravSpørsmål","vedleggFieldName","aktivitetskravVedlegg","FormComponents","saveAttachment","msg","getInitialKonto","erMorUfør","periodenStarterFørFamdato","getHvemSkalTaUttak","forelder","getInitialValues","startdatoPeriode","hvemSkalTaUttak","cleanPeriodeUttakFormData","visibility","initialValues","getInitialÅrsakForUttakRundtFødsel","ønskerSamtidigUttak","getPeriodeUttakFormInitialValues","convertBooleanOrUndefinedToYesOrNo","getFrilansSNEllerOrgnr","isOverføringsperiode","isOppholdsperiode","getStønadskontoFromOppholdsårsak","arbeidsformer","orgnumre","getArbeidsform","getOrgnummer","getErArbeidstaker","getSamtidigUttaksProsentWLB","ønskerGradering","trimNumberValue","velgVedleggSomSkalBrukes","aktivitetskravMorDokumentasjon","erMorForSykDokumentasjon","skalVedleggPåkreves","getKontoVerdi","samtidigWLBUttakFørFødselFarMedmor","inputKonto","mapPeriodeUttakFormToPeriode","id","type","lagSendSenereDokumentNårIngenAndreFinnes","getOppholdsÅrsakFromStønadskonto","samtidigWLBUttakFørFørsteSeksUkerFarMedmor","attachmentType","skjemanummer","relevantVedlegg","erSamtidigUttak","samtidigUttakProsentInputVerdi","samtidigUttakProsentVerdi","forelderVerdi","kontoVerdi","bem","bemUtils","formaterTidsperiodeDato","dato","formatDate","renderTidsperiode","Label","TidsperiodeDisplay","toggleVisTidsperiode","e","RangeIcon","Component","icon","AriaText","children","tag","tagName","createElement","delay","minZoomTouchDelta","lastTapAt","lastClientX","lastClientY","preventDoubleTapZoom","event","tapAt","timeDiff","clientX","clientY","xDiff","yDiff","Sirkelknapp","onClick","ariaLabel","ikon","toggle","disabled","stil","size","posisjoneringFraHøyre","labelId","guid","classnames","StepperKnapp","direction","label","NumberStepper","min","max","stepSize","legendId","onChange","increaseAriaLabel","decreaseAriaLabel","canDecrease","canIncrease","evt","UkerDagerTeller","ukeStepper","dagStepper","ukeLegend","dagLegend","ukeLegendId","dagLegendId","Fieldset","UttakEndreTidsperiodeSpørsmål","onAvbryt","changeTidsperiode","visible","isForeldrepengerFørFødselUttaksperiode","varighetIDager","uker","dager","getUkerOgDagerFromDager","handleOnSubmit","getDagValue","uker2","dager2","Modal","nyUker","date","nyDager","periodenGjelderAnnenForelder","erUttakAvAnnenForeldersKvote","getPeriodeType","periodenGjelder","starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel","PeriodeUttakForm","handleUpdatePeriode","toggleIsOpen","handleDeletePeriode","setNyPeriodeFormIsVisible","handleAddPeriode","isNyPeriode","setPerioderErGyldige","tidsperiodeIsOpen","setTidsperiodeIsOpen","useState","periodeIsValid","setPeriodeIsValid","previousState","getIsValidStateForPerioder","handleCleanup","getVelgbareStønadskontotyper","startDatoPeriodeRundtFødselFarMedmor","sluttDatoPeriodeRundtFødselFarMedmor","setFieldValue","isValid","søkerOppgirAnnenForeldersPeriode","values2","formaterDatoKompakt","ActionLink","getSlettPeriodeTekst","PeriodeUtsettelseFormField","PeriodeUtsettelseFormComponents","getFormStateFraVedlegg","gjelderMorsAktivitet","getPeriodeUtsettelseFormInitialValues","isUtsettelsePgaArbeid","getVedleggFraFormState","morsAktivitetIPeriodenDokumentasjon","mapPeriodeUtsettelseFormToPeriode","cleanupPeriodeUtsettelseFormData","UtsettelseÅrsakType","PeriodeUtsettelseFormConfig","søkerErFarEllerMedmorOgKunDeHarRett","periodeUtsettelseFormQuestionsConfig","getUtsettelseÅrsakOptions","periodenErKunHelligdager","skalViseGamleUtsettelseÅrsaker","tidsperiodenErInnenforFørsteSeksUker","option","getUtsettelseårsakSkjemanummer","årsak","showAttachmentUploader","getAttachmentUploaderLabel","getAttachmentUploaderType","UtsettelseÅrsakSpørsmål","utsettelseårsak","årsakOptions","UtsettelseEndreTidsperiodeSpørsmål","PeriodeUtsettelseForm","førsteOktober2021ReglerGjelder","antallHelligdager","antallUttaksdager","NyPeriode","isUtsettelse","nesteLedigeUttaksdato","setPeriode","Heading","IconBox","color","stripes","ArbeidIkon","props","title","rest","FerieIkon","SykdomIkon","TerminIkon","UttakIkon","UttaksplanIkonKeys","UttaksplanIkonKeys2","UttaksplanIkon","InformationSquareIcon","ExclamationmarkTriangleFillIcon","XMarkOctagonFillIcon","UttaksplanColor","getForelderFarge","getStønadskontoFarge","forIkon","harMidlertidigOmsorg","getUtsettelseFarge","StønadskontoIkon","gradert","getIkonForKonto","UtsettelseIkon","UttaksplanAdvarselIkon","farge","getAlertStripeTypeFromMessageType","message","getIkonForVeilederMelding","melding","renderAlert","skjulMeldingIkon","content","Alert","VeilederMelding","getPeriodeIkon","isUtsettelseAnnenPart","getVarighetString","antallDager","format","dagerStr","ukerStr","renderDagMnd","visÅr","d","måned3bokstaver","måned","år","PeriodelisteItemHeader","annenForelderSamtidigUttakPeriode","varighetString","erFpFørTerminUtenUttak","annenForelderIsMor","annenForelderNavn","beskrivelseSamtidigUttak","isUttakAnnenPart","getForelderNavn","getValidTidsperiode","getPeriodeTittel","classNames","PeriodeHull","kunHelligdager","kunUttaksdager","onLeggInnNyPeriode","leggInnNyUtsettelse","nyeRegler","getUtsettelseTekst","foreldernavn","erMor","PeriodeInfo","getOppholdskontoNavn","PeriodeUtenUttak","onLeggTilNyPeriode","PeriodeFørFødselFormField","PeriodeFørFødselFormComponents","PeriodeFørFødselFormConfig","skalIkkeHaUttakFørTermin","periodeFørFødselFormQuestionsConfig","getPeriodeFørFødselFormInitialValues","sisteUttaksagFørFødsel","førsteUttaksdag3UkerFørFødsel","mapPeriodeFørFødselFormToPeriode","PeriodeFørFødselForm","_visibility","SlettbarAvslåttPeriode","onSlettPeriode","VeilederMeldinger","meldinger","renderPeriodeListeInnhold","isAvslåttPeriode","isSlettbarAvslåttPeriode","PeriodelisteItem","egenPeriode","periodeErGyldig","isInfoPeriode","toggleFocusAndOpen","headerButton","Accordion","m","HjerteIkon","fylt","getTekst","barn","isAdoptertBarn","formaterDatoUtenDag","isFødtBarn","FamiliehendelsedatoDisplay","getIndexOfFørstePeriodeEtterFødsel","p","getIndexOfSistePeriodeFørDato","Periodeliste","meldingerPerPeriode","barnFraNesteSak","perioderErGyldige","openPeriodeId","setOpenPeriodeId","indexOfFørstePeriodeEtterFødsel","erAllePerioderIPlanenFørFødsel","indexOfSistePeriodeFørNyStøndasperiodeNyttBarn","periodeMedValidState","periodeMedState","getAnnenForelderSamtidigUttakPeriode","Planlegger","setSlettUttaksplanModalOpen","setResetUttaksplanModalOpen","nyPeriodeFormIsVisible","setIsUtsettelse","Periodene","annenForelderErOppgitMenHarIkkeRett","InfoBlock","Kontostatus","uttak","kontoErOvertrukket","Kontostatus$1","injectIntl","TilesList","columns","React.Children","child","isMorsPeriode","isFarsPeriode","isFellesperiodeKvote","isMorsKvote","isFarMedmorsKvote","summerBrukteUttaksdager","u","getBrukteDagerForForelder","tilgjengeligeStønadskontoer","perioder","perioderFørTermin","perioderEtterTermin","førTermin","beregnBrukteUttaksdager","etterTermin","alle","dagerTotalt","isMor","dagerEgneKvoter","dagerOverført","dagerFellesperiode","getBrukteDager","perioderMedUttak","getAllePerioderMedUttaksinfoFraUttaksplan","getUttaksstatus","harKomplettUttaksplan","gjelderDagerBrukt","beregnGjenståendeUttaksdager","kontouttak","filtrerBortAnnenPartsKonto","uttakskontoer","OversiktPerForelder","brukteDagerPerForelder","foreldreparSituasjon","svgInfo","getSituasjonForelderSvg","Personkort","ForelderIkon","OversiktPerKvote","uttaksstatus","uttakÅVise","OversiktKvoter","annenForelderHarRettINorge","rolle","isFarEllerMedmor","inneholderUttaksplanPerioderTest","grunnlag","isPeriodeUtenUttak","isHull","ANTALL_UTTAKSDAGER_SEKS_UKER","getInformasjonOmTaptUttakVedUttakEtterSeksUkerFarMedmor","søkerErFarEllerMedmorOgAnnenForelderKanIkkeOppgis","søkerErFarEllerMedmorOgErAleneOmOmsorgen","førstePeriode","førsteRegistrerteUttaksdag","getUgyldigUttakMor","flerbarnsFødsel","førsteUttaksdagEtterÅtteUker","ugyldigUttakRegelFørsteDato","ugyldigUttakRegelSisteDato","ugyldigPeriode","erPeriodeFørDato","ugyldigeUtsettelser","gradertePerioder","flernbarnsPerioder","fellesPerioder","samtidigUttaksperioder","unntakFarFørsteSeksUker","erFarsUttakFørsteSeksUkerGyldig","unntak","getUgyldigUttakFørsteSeksUkerForFarMedmor","farsPerioderInnenforSeksFørsteUker","ugyldigeUttak","ugyldigeOverføringer","utsettelse","harMorSøktUgyldigUttakFørsteSeksUkerTest","ugyldigePerioder","stønadskontoInneholderForMyeUttakKunSøkerTest","søkerErAleneOmOmsorg","stønadskontoerMedForMyeUttak","harFarMedmorSøktUgyldigUttakEllerUtsettelseFørsteSeksUkerTest","wlbReglerGjelder","erPeriodeInnvilget","erUttaksplanBareOppholdTest","uttaksplanErBareOpphold","slutterUttaksplanMedOppholdTest","uttaksplanSlutterMedOpphold","starterUttaksplanMedOppholdTest","uttaksplanStarterMedOpphold","uttaksplanGraderingStørreEnnSamtidigUttak","erUttaksplanGraderingStørreEnnSamtidigUttakTest","tilleggsopplysningerMaxLength","maxLengthIsGreaterThanOrEqualToStringLength","maxLength","tilleggsopplysningerErGyldig","begrunnelse","erTilleggsopplysningerGyldigTest","begrunnelseForSenEndring","begrunnelseTekst","harTilleggsopplysningerGyldigeCharsTest","tekst","validateTextHasLegalChars","getIllegalChars","harUttaksplanForMangeFlerbarnsdagerTest","inneholderUttaksplanDatoSomIkkeErUttaksdag","erUttaksdag","createMissingAttachment","periodeId","isAttachmentMissing","attachments","shouldPeriodeHaveAttachment","dokumentasjonBehøvesForOverføringsperiode","dokumentasjonBehøvesForUtsettelsesperiode","dokumentasjonBehøvesForUttaksperiode","hasPeriodeMissingAttachment","søknadsinfo","_a","InnsendingsType","findMissingAttachmentsForPerioder","missingAttachments","missingAttachmentForAktivitetskrav","harMorAktivitetskrav","erÅrsakSykdomEllerInstitusjonsopphold","ønskerFlerBarnsdager","harPerioderManglendeVedleggTest","manglendeVedlegg","førsteUttaksEllerUttsettelsesPeriode","sorterPerioder","regelTekst","passerer","inneholderSenUtsettelsePgaFerieTest","seneUtsettelsePgaFerie","erSenUtsettelsePgaFerieEllerArbeid","inneholderTapteDagerTest","infoOmTaptUttakVedUttakEtterSeksUkerFarMedmor","planInneholderTapteDager","planInneholderAnnetEnnAktivitetsfriKvote","inneholderBareUtsettelserTest","isOverskrivbarPeriode","intlKey","formaterDato","inneholderSenUtsettelsePgaArbeidTest","seneUtsettelserPgaArbeid","overskriverEndringerAnnenPartsPerioder","eksisterendeUttaksplan","fornavnAnnenForelder","perioderSomOverlapper","perioderSomOverlapperUtenSamtidigUttak","_intl","overlapperPeriodeAndrePerioder","perioderUtenUttakAnnenPart","perioderSomHarOverlapp","getPeriodeForelderNavn","RegelAlvorlighet","getRegelIntlKey","regel","intlRegelPrefix","alvorlighetSortOrder","sorterAvvik","a1","a2","ensureRegelAvvikIntlKey","info","overstyresAvFilter","avvik","_idx","alleAvvik","b2","overstyrerAndreFilter","rb","rbo","regelHarAvvik","mapInfoToRegelAvvik","i","regelAvvik","isArray","regelPasserer","getRegelAvvik","resultat","flatten","r","isRegelFeil","hasRegelFeil","trimRelaterteRegelAvvik","grupperAvvik","uniqBy","getRegelIntlValues","newValues","key","valueOrFunc","hasValueRule","failText","getStillingsprosentRegler","stillingsprosentIsMoreThan0","samtidigUttakProsentIsMax100","stillingsprosentIsLessThan100","gradertUttaksperiodeErUgyldig","erGyldig","samtidigUttaksperiodeErUgyldig","harUttaksperiodeGyldigGradering","runValidators","validators","inputName","results","validator","valid","tests","allValidatorsPass","erUtfyltTest","erUttaksdagTest","slutterInnenforGyldigPermisjonsperiode","starterInnenforGyldigAntallUkerFørTermin","getUttakTidsperiodeValidatorer","skalIkkeHaUttak","uttakTidsperiodeErGyldig","uttaksperiode","fraDatoErGyldig","tilDatoErGyldig","getUtsettelseTidsperiodeValidatorer","utsettelseTidsperiodeErGyldig","utsettelesperiode","harPeriodeGyldigTidsperiode","perioderMedUgyldigTidsperiode","harUttaksperiodeStønadskonto","uttaksperioderUtenStønadskonto","erSamtidigUttakGyldig","erUtsettelseEtterFamiliehendelsesdato","starterUttaksperiodeRundtFødselEtter2UkerFørFødsel","gjelderWLBReglerFarMedmorRundtFødsel","perioderFarMedmorSomStarterFør2UkerFørFødsel","isUttaksperiodeFarMedmorMedValgForUttakRundtFødsel","starterTidsperiodeEtter2UkerFørFødsel","førsteUttaksdagToUkerFørFødsel","slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel","perioderFarMedmorSomIkkeSlutterFør6UkerEtterFødsel","slutterTidsperiodeInnen6UkerEtterFødsel","sisteUttaksdagSeksUkerEtterFødsel","periodeDeFørsteSeksUkeneHarUlovligUttakBFHR","perioderDeFørsteSeksUkeneMedUlovligUttakBFHR","harBekreftet100ProsentArbeidIUtsettelsePgaArbeid","utsettelserPgaArbeidUtenBekreftelse","laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn","førsteUttaksdagForPåfølgendeBarn","forSenUttakVedPåfølgendeBarn","skjulIOppsummering","periodevalideringsregler","harSøktOmFerieUtenArbeidsforhold","isUtsettelsePgaFerie","inneholderForMyeFerie","ferieUtsettelser","ferieDager","sumFerieDager","Perioden","kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme","gjenståendeDager","sistePeriodeErIkkeUtsettelse","resterendeFellesperiode","resterendeMødrekvote","resterendeFedrekvote","resterendeForeldrepenger","erUttaksmengdeForFarMedmorForHøy","farEllerMedmor","erUttaksmengdeForFarMedmorForHøyTest","vekslendeArbeidOgUttakTest","kunSøkersPerioder","firstArbeidsperiodeIndex","antallPerioderEtterFørsteUtsettelseGrunnetArbeid","vekslendePeriodeUtenUttakOgUttakTest","firstPeriodeUtenUttakIndex","antallPerioderEtterFørstePeriodeUtenUttak","burdeKanskjeSøkeGraderingTest","vekslerArbeidOgUttakTest","veklserPerioderUtenUttakOgUttaktest","infoTekstKey","ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindatoTest","isUfødtBarn","inneholderPerioderUtenAktivitetskrav","søkersituasjon","perioderUtenAktivitetskrav","inneholderUtsettelserUtenÅrsak","utsettelserUtenÅrsak","overskridelseUttakRundtFødselAntallDager","perioderRundtFødsel","sisteUttak6UkerEtterFødsel","perioderAvkortetTilÅSlutte6UkerEtterFødsel","getSumUttaksdagerÅTrekkeIPeriodene","ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL","farMedmorHarSøktUgyldigAntallDagerUttakRundtFødselTest","perioderUttakRundtFødsel","getFarMedmorUttakRundtFødsel","antallDagerForMye","slutterEnAvPeriodeneForSent","fraDato","tilDato","harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUkerTest","sisteUttaksdagEtterSeksUker","farMedMorHarRettPåUttakRundtFødselTest","tattUtForMangeDagerIPlanen","dagerIgjenRundtFødsel","førsteUttaksdag2UkerFørFødsel","antallUttaksdagerRundtFødsel","erMerEnn3månederSidenFamiliehendelse","farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest","kontoUtenAktivitetskravUker","testPasserer","renderAsHtml","link","antallUkerPåÅTaUtDager","inneholderUttaksperioderMedUbesvartGradering","perioderMedUbesvartGradering","inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest","uttaksperioder","perioderMedUbesvartSpmOmFlerbarnsdager","farMedmorHarRettPåFlerbarnsdagerTest","overstigerMinsterettVedToTette","minsterettUkerToTette","perioderEtterFørsteStønadsperiodeNyttBarn","perioderFørFørsteStønadsperiodeNyttBarn","minsterettMaxAntallUker","minsterettMaxAntallDager","brukteDagerPerForelderFørFørsteStønadsdagNyttBarn","uttaksdagerFremTilNyttBarnStønadsdag","dagerIgjenÅBrukePåMinsteretten","brukteDagerPerForelderEtterFørsteStønadsdagNyttBarn","uttaksdagerEtterNyttBarnStønadsdag","dagerIgjenAvMinsterett","harPerioderEtterFørsteStønadsdagNesteBarnDerToTette","tekstKey","uttaksplanValideringRegler","uttaksplanRegler","familiehendelsesDato","REGEL_INTL_PREFIX","sjekkUttaksplanOppMotRegler","valideringsgrunnlag","validerUttaksplan","avvikPerPeriode","groupBy","harFeil","VeilederInfo","messages","ariaTittel","mapAvvikTilMessage","tittelIntlKey","harTittel","intlHasKey","getUttaksplanVeilederinfo","getPeriodelisteMeldinger","veilederinfo","FUNC_ERROR_TEXT","NAN","symbolTag","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","freeGlobal","global","freeSelf","root","objectProto","objectToString","nativeMax","nativeMin","now","debounce","func","wait","options","lastArgs","lastThis","maxWait","result","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","toNumber","invokeFunc","time","args","thisArg","leadingEdge","timerExpired","remainingWait","timeSinceLastCall","timeSinceLastInvoke","shouldInvoke","trailingEdge","cancel","flush","debounced","isInvoking","throttle","isObjectLike","isSymbol","other","isBinary","lodash_throttle","getLabel","OppgiTilleggsopplysninger","__publicField","Textarea","BodyLong","OppgiTilleggsopplysninger$1","SlettUttaksplanModal","onClose","handleSlettUttaksplanModalBekreft","innhold1Id","innhold2Id","slettPeriode","slettetPeriode","harAktivitetskravIPeriodeUtenUttak","erAdopsjon","førsteUttaksdagNesteBarnsSak","res","getPeriodeHullEllerPeriodeUtenUttak","oppdaterPeriode","endretPeriode","originalPeriode","annenPartsUttak","perioderSlettetEndretPeriode","slåSammenLikePerioder","leggTilPeriode","leggTilPeriodeOgBuild","bevegeligePerioder","fastePerioder","nyPeriode","nyePerioder","fastPeriode","finnOgSettInnHull","settInnAnnenPartsUttak","oppdaterPeriodeOgBuild","oppdatertePerioder","fjernUnødvendigeHull","slettPeriodeOgBuild","getFastePerioder","starterUttaksperiodeFørFødsel","getBevegeligePerioder","isInfoPeriodeAnnenPart","getAnnenPartsUttak","Uttaksplanbuilder","opprinneligPlan","perioderUtenAnnenPart","nyAnnenPartsUttak","nyFastePerioder","nyBevegeligePerioder","ResetUttaksplanModal","handleResetUttaksplanModalBekreft","getHarAktivitetskravIPeriodeUtenUttak","uttaksplanInneholderPerioderUtenKonto","Uttaksplan","foreldreSituasjon","handleOnPlanChange","tilleggsopplysninger","eksisterendeSak","perioderSomSkalSendesInn","setUttaksplanErGyldig","handleBegrunnelseChange","handleSlettUttaksplan","handleResetUttaksplan","familiehendelsesdatoNesteSak","familiehendelsesdatoDate","slettUttaksplanModalOpen","resetUttaksplanModalOpen","uttaksplanUtenAnnenPartsSamtidigUttak","isAnnenPartInfoPeriode","toTetteReglerGjelder","getToTetteReglerGjelder","builder","oppdatertPeriode","familiehendelsesdato2","farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato","splittUttaksperiodePåFamiliehendelsesdato","tidperiodeOverlapperDato","splittPeriodePåDato","vedleggForSenEndring","årsakTilSenEndring","getSeneEndringerSomKreverBegrunnelse","handleBegrunnelseTekstChange","uttaksplanValidering","handleSlettUttaksplanModalClose","handleResetUttaksplanModalClose","uttaksplanVeilederInfo","SenEndringÅrsak"],"mappings":"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","x_google_ignoreList":[144]}