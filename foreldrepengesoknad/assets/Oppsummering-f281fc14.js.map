{"version":3,"file":"Oppsummering-f281fc14.js","sources":["../../../../node_modules/.pnpm/@navikt+aksel-icons@2.8.14/node_modules/@navikt/aksel-icons/dist/react/esm/Paperplane.js","../../src/app/steps/oppsummering/components/OppsummeringsPunkt.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/InnholdMedLedetekst.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/kompleks-feltoppsummering/KompleksFeltoppsummering.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/oppsummering-av-dokumentasjon/OppsummeringAvDokumentasjon.tsx","../../src/app/steps/oppsummering/components/annen-forelder-oppsummering/AnnenForelderOppsummering.tsx","../../src/app/steps/oppsummering/components/barn-oppsummering/BarnAdoptertIUtlandetDetaljer.tsx","../../src/app/steps/oppsummering/components/barn-oppsummering/BarnOppsummering.tsx","../../src/app/steps/oppsummering/components/OppsummeringsPanel.tsx","../../src/app/steps/oppsummering/components/Personalia.tsx","../../src/app/steps/oppsummering/components/utenlandsopphold-oppsummering/UtenlandsoppholdOppsummeringListe.tsx","../../src/app/steps/oppsummering/components/utenlandsopphold-oppsummering/UtenlandsoppholdOppsummering.tsx","../../src/app/steps/oppsummering/oppsummeringFormConfig.ts","../../src/app/steps/oppsummering/validation/oppsummeringValidation.ts","../../src/app/steps/oppsummering/components/andre-inntekter-oppsummering/AnnenInntektDetaljer.tsx","../../src/app/steps/oppsummering/components/andre-inntekter-oppsummering/InntekterTabell.tsx","../../src/app/steps/oppsummering/components/andre-inntekter-oppsummering/AndreInntekterOppsummering.tsx","../../src/app/steps/oppsummering/components/andre-inntekter-oppsummering/FrilansOppsummering.tsx","../../src/app/steps/oppsummering/components/andre-inntekter-oppsummering/Næringsdetaljer.tsx","../../src/app/steps/oppsummering/components/andre-inntekter-oppsummering/SelvstendigNæringsdrivendeOppsummering.tsx","../../src/app/steps/oppsummering/components/andre-inntekter-oppsummering/ArbeidsforholdOgAndreInntekterOppsummering.tsx","../../src/app/utils/tilleggsopplysningerUtils.ts","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/feltoppsummering/Feltoppsummering.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/oppsummeringsliste/list/List.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/oppsummeringsliste/Oppsummeringsliste.tsx","../../src/app/utils/manglendeVedleggUtils.ts","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/OppsummeringUtils.ts","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/detaljer/Overføringsperiodedetaljer.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/detaljer/MorsaktiviteterDetaljer.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/detaljer/Uttaksperiodedetaljer.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/detaljer/Uttsettelsesperiodedetaljer.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/UttaksplanOppsummeringsliste.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/UttaksplanOppsummering.tsx","../../src/app/utils/hooks/useAbortSignal.ts","../../src/app/steps/oppsummering/Oppsummering.tsx"],"sourcesContent":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from \"react\";\nimport { forwardRef } from \"react\";\nimport { useId } from \"./util/useId\";\nconst SvgPaperplane = forwardRef((_a, ref) => {\n    var { title, titleId: _titleId } = _a, props = __rest(_a, [\"title\", \"titleId\"]);\n    let titleId = useId();\n    titleId = title ? (_titleId ? _titleId : \"title-\" + titleId) : undefined;\n    return (React.createElement(\"svg\", Object.assign({ width: \"1em\", height: \"1em\", viewBox: \"0 0 24 24\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", focusable: false, role: \"img\", ref: ref, \"aria-labelledby\": titleId }, props),\n        title ? React.createElement(\"title\", { id: titleId }, title) : null,\n        React.createElement(\"path\", { fillRule: \"evenodd\", clipRule: \"evenodd\", d: \"M5.317 4.32a.75.75 0 0 0-1.023.932L6.704 12l-2.41 6.748a.75.75 0 0 0 1.023.932l15-7a.75.75 0 0 0 0-1.36l-15-7Zm2.712 6.93L6.31 6.44 18.227 12 6.31 17.56l1.719-4.81H11.5a.75.75 0 0 0 0-1.5H8.029Z\", fill: \"currentColor\" })));\n});\nexport default SvgPaperplane;\n","import { Label } from '@navikt/ds-react';\nimport { Block } from '@navikt/fp-common';\nimport { FunctionComponent, ReactNode } from 'react';\n\ninterface Props {\n    title: string;\n    visible?: boolean;\n    children?: ReactNode;\n}\n\nconst OppsummeringsPunkt: FunctionComponent<Props> = ({ title, visible, children }) => {\n    return (\n        <Block padBottom=\"l\" visible={visible}>\n            <Label>{title}</Label>\n            {children}\n        </Block>\n    );\n};\n\nexport default OppsummeringsPunkt;\n","import * as React from 'react';\nimport { BodyShort, Label } from '@navikt/ds-react';\nimport { guid } from '@navikt/fp-common';\n\ninterface InnholdMedLedetekstProps {\n    ledetekst: string;\n    children: JSX.Element | JSX.Element[];\n    className?: string;\n}\n\nconst hasListOfChildren = (children: string | string[]): boolean => Array.isArray(children);\n\nconst InnholdMedLedetekst: React.FunctionComponent<InnholdMedLedetekstProps> = ({ ledetekst, children, className }) => {\n    return (\n        <div className={className}>\n            <Label>{ledetekst}</Label>\n            {!Array.isArray(children) && hasListOfChildren((children as JSX.Element).props.children)\n                ? (children as JSX.Element).props.children.map((child: string) => (\n                      <BodyShort className=\"feltoppsummering__verdi\" key={guid()}>\n                          {child}\n                      </BodyShort>\n                  ))\n                : children}\n        </div>\n    );\n};\n\nexport default InnholdMedLedetekst;\n","import * as React from 'react';\nimport InnholdMedLedetekst from '../InnholdMedLedetekst';\n\ninterface Props {\n    className?: string;\n    ledetekst: string;\n    children: JSX.Element | JSX.Element[];\n}\n\nconst KompleksFeltoppsummering: React.FunctionComponent<Props> = ({ ledetekst, children, className }) => (\n    <InnholdMedLedetekst className={`feltoppsummering ${className}`} ledetekst={ledetekst}>\n        {children}\n    </InnholdMedLedetekst>\n);\n\nexport default KompleksFeltoppsummering;\n","import { intlUtils } from '@navikt/fp-common';\nimport { Attachment } from 'app/types/Attachment';\nimport { isAttachmentWithError } from 'app/utils/vedleggUtils';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport KompleksFeltoppsummering from '../kompleks-feltoppsummering/KompleksFeltoppsummering';\nimport { Link, Tag } from '@navikt/ds-react';\n\nimport './oppsummeringAvDokumentasjon.less';\n\ninterface OppsummeringAvDokumentasjonProps {\n    ledetekst?: string;\n    vedlegg: Attachment[];\n}\n\ntype Props = OppsummeringAvDokumentasjonProps;\n\nconst OppsummeringAvDokumentasjon: React.FunctionComponent<Props> = (props) => {\n    const { ledetekst, vedlegg } = props;\n    const intl = useIntl();\n\n    const renderListOfAttachmentPreviewLinks = () => {\n        return vedlegg\n            .filter((a: Attachment) => !isAttachmentWithError(a))\n            .map(({ url, id, filename }) => (\n                <Link href={url!} key={id} target=\"_blank\">\n                    {filename}\n                </Link>\n            ));\n    };\n\n    return (\n        <KompleksFeltoppsummering\n            className=\"oppsummeringAvDokumentasjon\"\n            ledetekst={ledetekst || intlUtils(intl, 'vedlagtdokumentasjon')}\n        >\n            {vedlegg && vedlegg.filter((a: Attachment) => !isAttachmentWithError(a)).length > 0 ? (\n                <div>{renderListOfAttachmentPreviewLinks()}</div>\n            ) : (\n                <div>\n                    <Tag variant=\"warning\">{intlUtils(intl, 'oppsummering.andreInntekter.dokumentasjon.mangler')}</Tag>\n                </div>\n            )}\n        </KompleksFeltoppsummering>\n    );\n};\n\nexport default OppsummeringAvDokumentasjon;\n","import { intlUtils } from '@navikt/fp-common';\nimport AnnenForelder, { isAnnenForelderIkkeOppgitt, isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport Barn from 'app/context/types/Barn';\nimport Søker from 'app/context/types/Søker';\nimport { Søkerrolle } from 'app/types/Søkerrolle';\nimport isFarEllerMedmor from 'app/utils/isFarEllerMedmor';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport OppsummeringAvDokumentasjon from '../uttaksplan-oppsummering/oppsummering-av-dokumentasjon/OppsummeringAvDokumentasjon';\nimport { BodyShort } from '@navikt/ds-react';\n\ninterface Props {\n    annenForelder: AnnenForelder;\n    søker: Søker;\n    søkerrolle: Søkerrolle;\n    barn: Barn;\n    farMedmorErAleneOmOmsorg: boolean;\n}\n\nconst AnnenForelderOppsummering: FunctionComponent<Props> = ({\n    annenForelder,\n    søker,\n    søkerrolle,\n    barn,\n    farMedmorErAleneOmOmsorg,\n}) => {\n    const intl = useIntl();\n    const erFarEllerMedmor = isFarEllerMedmor(søkerrolle);\n    const { dokumentasjonAvAleneomsorg } = barn;\n\n    return (\n        <>\n            {isAnnenForelderIkkeOppgitt(annenForelder) && (\n                <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.annenForelder.ikkeOppgitt')} />\n            )}\n            {isAnnenForelderOppgitt(annenForelder) && (\n                <>\n                    <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.annenForelder.navn')}>\n                        <BodyShort>{`${annenForelder.fornavn} ${annenForelder.etternavn}`}</BodyShort>\n                    </OppsummeringsPunkt>\n                    <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.annenForelder.fnr')}>\n                        <BodyShort>{annenForelder.fnr}</BodyShort>\n                    </OppsummeringsPunkt>\n                    <OppsummeringsPunkt\n                        title={\n                            !søker.erAleneOmOmsorg\n                                ? intlUtils(intl, 'oppsummering.annenForelder.fellesOmsorg.tittel')\n                                : intlUtils(intl, 'oppsummering.annenForelder.aleneOmOmsorg.tittel')\n                        }\n                    >\n                        <BodyShort>\n                            <FormattedMessage\n                                id={\n                                    !søker.erAleneOmOmsorg\n                                        ? 'oppsummering.annenForelder.fellesOmsorg.tekst'\n                                        : 'oppsummering.annenForelder.aleneOmOmsorg.tekst'\n                                }\n                            />\n                        </BodyShort>\n                    </OppsummeringsPunkt>\n                    {!søker.erAleneOmOmsorg && (\n                        <OppsummeringsPunkt\n                            title={intlUtils(intl, 'oppsummering.annenForelder.rettPåForeldrepengerINorge', {\n                                navn: annenForelder.fornavn,\n                            })}\n                        >\n                            <BodyShort>\n                                <FormattedMessage id={annenForelder.harRettPåForeldrepengerINorge ? 'ja' : 'nei'} />\n                            </BodyShort>\n                        </OppsummeringsPunkt>\n                    )}\n                    {!søker.erAleneOmOmsorg && !annenForelder.harRettPåForeldrepengerINorge && (\n                        <OppsummeringsPunkt\n                            title={intlUtils(intl, 'oppsummering.annenForelder.harOppholdtSegIEØS', {\n                                navn: annenForelder.fornavn,\n                            })}\n                        >\n                            <BodyShort>\n                                <FormattedMessage id={annenForelder.harOppholdtSegIEØS ? 'ja' : 'nei'} />\n                            </BodyShort>\n                        </OppsummeringsPunkt>\n                    )}\n                    {!søker.erAleneOmOmsorg && annenForelder.harOppholdtSegIEØS === true && (\n                        <OppsummeringsPunkt\n                            title={intlUtils(intl, 'oppsummering.annenForelder.rettPåForeldrepengerIEØS', {\n                                navn: annenForelder.fornavn,\n                            })}\n                        >\n                            <BodyShort>\n                                <FormattedMessage id={annenForelder.harRettPåForeldrepengerIEØS ? 'ja' : 'nei'} />\n                            </BodyShort>\n                        </OppsummeringsPunkt>\n                    )}\n                    {erFarEllerMedmor &&\n                        !søker.erAleneOmOmsorg &&\n                        !annenForelder.harRettPåForeldrepengerINorge &&\n                        !annenForelder.harRettPåForeldrepengerIEØS && (\n                            <OppsummeringsPunkt\n                                title={intlUtils(intl, 'annenForelder.erMorUfør', {\n                                    navn: annenForelder.fornavn,\n                                })}\n                            >\n                                <BodyShort>\n                                    <FormattedMessage id={annenForelder.erUfør ? 'ja' : 'nei'} />\n                                </BodyShort>\n                            </OppsummeringsPunkt>\n                        )}\n                </>\n            )}\n            {farMedmorErAleneOmOmsorg && erFarEllerMedmor && (\n                <OppsummeringAvDokumentasjon\n                    vedlegg={dokumentasjonAvAleneomsorg || []}\n                    ledetekst={intlUtils(intl, 'oppsummering.annenForelder.dokumentasjonAvAleneomsorg')}\n                />\n            )}\n        </>\n    );\n};\n\nexport default AnnenForelderOppsummering;\n","import { formatDate, hasValue, intlUtils } from '@navikt/fp-common';\nimport { AdoptertAnnetBarn, AdoptertStebarn, isAdoptertStebarn } from 'app/context/types/Barn';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport { BodyShort } from '@navikt/ds-react';\nimport { førsteOktober2021ReglerGjelder } from 'app/utils/dateUtils';\n\ninterface Props {\n    barn: AdoptertAnnetBarn | AdoptertStebarn;\n    familiehendelsesdato: Date;\n}\n\nconst BarnAdoptertIUtlandetDetaljer: FunctionComponent<Props> = ({ barn, familiehendelsesdato }) => {\n    const intl = useIntl();\n\n    if (isAdoptertStebarn(barn) || førsteOktober2021ReglerGjelder(familiehendelsesdato)) {\n        return null;\n    }\n\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.barn.adoptertIUtlandet')}>\n                <BodyShort>\n                    <FormattedMessage id={barn.adoptertIUtlandet ? 'ja' : 'nei'} />\n                </BodyShort>\n            </OppsummeringsPunkt>\n            <OppsummeringsPunkt\n                title={intlUtils(intl, 'oppsummering.barn.ankomstdato')}\n                visible={hasValue(barn.ankomstdato)}\n            >\n                <BodyShort>{formatDate(barn.ankomstdato!)}</BodyShort>\n            </OppsummeringsPunkt>\n        </>\n    );\n};\n\nexport default BarnAdoptertIUtlandetDetaljer;\n","import { formatDate, intlUtils } from '@navikt/fp-common';\nimport Barn, { BarnType, isAdoptertAnnetBarn, isAdoptertStebarn, isUfødtBarn } from 'app/context/types/Barn';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport BarnAdoptertIUtlandetDetaljer from './BarnAdoptertIUtlandetDetaljer';\nimport { BodyShort } from '@navikt/ds-react';\n\ninterface Props {\n    barn: Barn;\n    familiehendelsesdato: Date;\n}\n\nconst getAntallBarnTekst = (antallBarn: number, intl: IntlShape): string => {\n    if (antallBarn === 1) {\n        return intlUtils(intl, 'oppsummering.barn.antallBarn.ettBarn');\n    }\n\n    if (antallBarn === 2) {\n        return intlUtils(intl, 'oppsummering.barn.antallBarn.toBarn');\n    }\n\n    return intlUtils(intl, 'oppsummering.barn.antallBarn.flere', { antallBarn });\n};\n\nconst getTerminEllerFødselTittel = (type: BarnType) => {\n    if (type === BarnType.UFØDT) {\n        return 'Termin';\n    }\n\n    return 'Fødselsdato';\n};\n\nconst getTerminEllerFødselsdato = (barn: Barn) => {\n    if (isUfødtBarn(barn)) {\n        return formatDate(barn.termindato);\n    }\n\n    return formatDate(barn.fødselsdatoer[0]);\n};\n\nconst BarnOppsummering: FunctionComponent<Props> = ({ barn, familiehendelsesdato }) => {\n    const intl = useIntl();\n\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.barn.søknadenGjelder')}>\n                <BodyShort>{getAntallBarnTekst(barn.antallBarn, intl)}</BodyShort>\n            </OppsummeringsPunkt>\n            <OppsummeringsPunkt title={getTerminEllerFødselTittel(barn.type)}>\n                <BodyShort>{getTerminEllerFødselsdato(barn)}</BodyShort>\n            </OppsummeringsPunkt>\n            {(isAdoptertAnnetBarn(barn) || isAdoptertStebarn(barn)) && (\n                <>\n                    <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.barn.gjelderSøknadenStebarnsadopsjon')}>\n                        <BodyShort>\n                            <FormattedMessage id={barn.type === BarnType.ADOPTERT_STEBARN ? 'ja' : 'nei'} />\n                        </BodyShort>\n                    </OppsummeringsPunkt>\n                    <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.barn.adopsjonsdato')}>\n                        <BodyShort>{formatDate(barn.adopsjonsdato)}</BodyShort>\n                    </OppsummeringsPunkt>\n                    <BarnAdoptertIUtlandetDetaljer barn={barn} familiehendelsesdato={familiehendelsesdato} />\n                </>\n            )}\n        </>\n    );\n};\n\nexport default BarnOppsummering;\n","import { FunctionComponent, ReactNode } from 'react';\nimport { bemUtils } from '@navikt/fp-common';\nimport { Accordion } from '@navikt/ds-react';\n\nimport './oppsummeringsPanel.less';\n\ninterface Props {\n    title: string;\n    children: ReactNode;\n}\n\nconst OppsummeringsPanel: FunctionComponent<Props> = ({ title, children }) => {\n    const bem = bemUtils('oppsummeringsPanel');\n\n    return (\n        <Accordion className={bem.block}>\n            <Accordion.Item>\n                <Accordion.Header>{title}</Accordion.Header>\n                <Accordion.Content>{children}</Accordion.Content>\n            </Accordion.Item>\n        </Accordion>\n    );\n};\n\nexport default OppsummeringsPanel;\n","import { Søkerinfo } from 'app/types/Søkerinfo';\nimport { FunctionComponent } from 'react';\n\nimport './personalia.less';\nimport { BodyShort } from '@navikt/ds-react';\nimport OppsummeringsPunkt from './OppsummeringsPunkt';\n\ninterface Props {\n    søkerinfo: Søkerinfo;\n}\n\nconst Personalia: FunctionComponent<Props> = ({ søkerinfo }) => {\n    return (\n        <OppsummeringsPunkt title={`${søkerinfo.person.fornavn} ${søkerinfo.person.etternavn}`}>\n            <BodyShort>{søkerinfo.person.fnr}</BodyShort>\n        </OppsummeringsPunkt>\n    );\n};\n\nexport default Personalia;\n","import { bemUtils, formatDate, intlUtils } from '@navikt/fp-common';\nimport { Utenlandsopphold } from 'app/context/types/InformasjonOmUtenlandsopphold';\nimport countries from 'i18n-iso-countries';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport './utenlandsoppholdOppsummeringListe.less';\nimport { BodyShort } from '@navikt/ds-react';\n\ninterface Props {\n    utenlandsopphold: Utenlandsopphold[];\n    tidligereOpphold: boolean;\n}\n\nconst UtenlandsoppholdOppsummeringListe: FunctionComponent<Props> = ({ utenlandsopphold, tidligereOpphold }) => {\n    const intl = useIntl();\n    const bem = bemUtils('utenlandsoppholdOppsummeringListe');\n\n    return (\n        <ul className={bem.block}>\n            {utenlandsopphold.map((opphold) => {\n                return (\n                    <li\n                        className={bem.element('listElement')}\n                        key={`${opphold.land}${opphold.tidsperiode.fom}${opphold.tidsperiode.tom}`}\n                    >\n                        <BodyShort>\n                            {tidligereOpphold\n                                ? intlUtils(intl, 'oppsummering.utenlandsopphold.harBoddINorge.utenlands', {\n                                      land: countries.getName(opphold.land, 'nb'),\n                                  })\n                                : intlUtils(intl, 'oppsummering.utenlandsopphold.skalBoINorge.utenlands', {\n                                      land: countries.getName(opphold.land, 'nb'),\n                                  })}\n                        </BodyShort>\n                        <BodyShort>\n                            {formatDate(opphold.tidsperiode.fom)} - {formatDate(opphold.tidsperiode.tom)}\n                        </BodyShort>\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n\nexport default UtenlandsoppholdOppsummeringListe;\n","import { doesTidsperiodeContainDate, intlUtils } from '@navikt/fp-common';\nimport Barn, { isAdoptertAnnetBarn, isAdoptertStebarn } from 'app/context/types/Barn';\nimport InformasjonOmUtenlandsopphold, { Utenlandsopphold } from 'app/context/types/InformasjonOmUtenlandsopphold';\nimport { getFamiliehendelsedato } from 'app/utils/barnUtils';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport UtenlandsoppholdListe from './UtenlandsoppholdOppsummeringListe';\nimport { BodyShort } from '@navikt/ds-react';\n\ninterface Props {\n    informasjonOmUtenlandsopphold: InformasjonOmUtenlandsopphold;\n    barn: Barn;\n}\n\nconst getErINorgePåFamiliehendelsedato = (\n    familiehendelsedato: string,\n    tidligereOpphold: Utenlandsopphold[],\n    senereOpphold: Utenlandsopphold[]\n): boolean => {\n    let erINorge = true;\n\n    tidligereOpphold.forEach((tidOpphold) => {\n        if (doesTidsperiodeContainDate(tidOpphold.tidsperiode, familiehendelsedato)) {\n            erINorge = false;\n        }\n    });\n\n    senereOpphold.forEach((senOpphold) => {\n        if (doesTidsperiodeContainDate(senOpphold.tidsperiode, familiehendelsedato)) {\n            erINorge = false;\n        }\n    });\n\n    return erINorge;\n};\n\nconst erAdoptertBarn = (barn: Barn): boolean => {\n    return isAdoptertAnnetBarn(barn) || isAdoptertStebarn(barn);\n};\n\nconst UtenlandsoppholdOppsummering: FunctionComponent<Props> = ({ informasjonOmUtenlandsopphold, barn }) => {\n    const intl = useIntl();\n    const { senereOpphold, tidligereOpphold } = informasjonOmUtenlandsopphold;\n    const familiehendelsedato = getFamiliehendelsedato(barn);\n    const erINorgePåFamiliehendelsedato = getErINorgePåFamiliehendelsedato(\n        familiehendelsedato,\n        tidligereOpphold,\n        senereOpphold\n    );\n\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.utenlandsopphold.harBoddINorge')}>\n                {informasjonOmUtenlandsopphold.iNorgeSiste12Mnd ? (\n                    <BodyShort>{intlUtils(intl, 'oppsummering.utenlandsopphold.harBoddINorge.norge')}</BodyShort>\n                ) : null}\n\n                <UtenlandsoppholdListe\n                    utenlandsopphold={informasjonOmUtenlandsopphold.tidligereOpphold}\n                    tidligereOpphold={true}\n                />\n            </OppsummeringsPunkt>\n\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.utenlandsopphold.skalBoINorge')}>\n                {informasjonOmUtenlandsopphold.iNorgeNeste12Mnd ? (\n                    <BodyShort>{intlUtils(intl, 'oppsummering.utenlandsopphold.skalBoINorge.norge')}</BodyShort>\n                ) : null}\n\n                <UtenlandsoppholdListe\n                    utenlandsopphold={informasjonOmUtenlandsopphold.senereOpphold}\n                    tidligereOpphold={false}\n                />\n            </OppsummeringsPunkt>\n\n            <OppsummeringsPunkt\n                title={\n                    erAdoptertBarn(barn)\n                        ? intlUtils(intl, 'oppsummering.utenlandsopphold.erINorgeOmsorgsovertakelsesdato')\n                        : intlUtils(intl, 'oppsummering.utenlandsopphold.erINorgePåFødselstidspunkt')\n                }\n            >\n                <BodyShort>\n                    <FormattedMessage id={erINorgePåFamiliehendelsedato ? 'ja' : 'nei'} />\n                </BodyShort>\n            </OppsummeringsPunkt>\n        </>\n    );\n};\n\nexport default UtenlandsoppholdOppsummering;\n","import { getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\n\nexport enum OppsummeringFormField {\n    harGodkjentOppsummering = 'harGodkjentOppsummering',\n}\n\nexport interface OppsummeringFormData {\n    [OppsummeringFormField.harGodkjentOppsummering]: boolean;\n}\n\nconst initialOppsummeringValues: OppsummeringFormData = {\n    [OppsummeringFormField.harGodkjentOppsummering]: false,\n};\n\nexport const getInitialOppsummeringValues = (): OppsummeringFormData => {\n    return initialOppsummeringValues;\n};\n\nexport const OppsummeringFormComponents = getTypedFormComponents<OppsummeringFormField, OppsummeringFormData>();\n","import { intlUtils } from '@navikt/fp-common';\nimport { IntlShape } from 'react-intl';\n\nexport const validateHarGodkjentOppsummering = (intl: IntlShape) => (value: boolean) => {\n    if (value !== true) {\n        return intlUtils(intl, 'valideringsfeil.oppsummering.harGodkjentOppsummering.påkrevd');\n    }\n\n    return undefined;\n};\n","import { FunctionComponent } from 'react';\nimport * as countries from 'i18n-iso-countries';\nimport { AnnenInntekt, AnnenInntektType, JobbIUtlandetInntekt } from 'app/context/types/AnnenInntekt';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport { useIntl } from 'react-intl';\nimport { intlUtils } from '@navikt/fp-common';\nimport { Attachment } from 'app/types/Attachment';\nimport { isAttachmentWithError } from 'app/utils/vedleggUtils';\nimport { BodyShort, Link, Tag } from '@navikt/ds-react';\n\ninterface Props {\n    annenInntekt: AnnenInntekt;\n}\n\nconst AnnenInntektDetaljer: FunctionComponent<Props> = ({ annenInntekt }) => {\n    const intl = useIntl();\n    const { type, vedlegg } = annenInntekt;\n    if (type === AnnenInntektType.JOBB_I_UTLANDET) {\n        const jobbIUtlandetInntekt = annenInntekt as JobbIUtlandetInntekt;\n        return (\n            <>\n                <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.andreInntekter.arbeidsgiverNavn')}>\n                    <BodyShort>{jobbIUtlandetInntekt.arbeidsgiverNavn}</BodyShort>\n                </OppsummeringsPunkt>\n                <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.andreInntekter.arbeidsgiverLand')}>\n                    <BodyShort>{countries.getName(jobbIUtlandetInntekt.land, 'nb')}</BodyShort>\n                </OppsummeringsPunkt>\n            </>\n        );\n    }\n    if (\n        type === AnnenInntektType.VENTELØNN ||\n        type === AnnenInntektType.SLUTTPAKKE ||\n        type === AnnenInntektType.MILITÆRTJENESTE\n    ) {\n        const renderListOfAttachmentPreviewLinks = () => {\n            return vedlegg\n                .filter((a: Attachment) => !isAttachmentWithError(a))\n                .map(({ url, id, filename }) => (\n                    <Link href={url!} key={id} target=\"_blank\">\n                        {filename}\n                    </Link>\n                ));\n        };\n        return (\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.andreInntekter.vedlagtdokumentasjon')}>\n                {(vedlegg || []).filter((a: Attachment) => !isAttachmentWithError(a)).length > 0 ? (\n                    renderListOfAttachmentPreviewLinks()\n                ) : (\n                    <Tag variant=\"warning\">{intlUtils(intl, 'oppsummering.andreInntekter.dokumentasjon.mangler')}</Tag>\n                )}\n            </OppsummeringsPunkt>\n        );\n    }\n    return null;\n};\n\nexport default AnnenInntektDetaljer;\n","import { FunctionComponent, ReactElement } from 'react';\nimport { BodyShort, Label } from '@navikt/ds-react';\n\nimport './inntekterTabell.less';\n\ninterface Props {\n    list: Array<{\n        key: string;\n        headerVenstre: string;\n        headerHøyre: string;\n        content?: ReactElement;\n    }>;\n}\n\nconst InntekterTabell: FunctionComponent<Props> = ({ list }) => {\n    return (\n        <ul className=\"oppsummeringsliste\">\n            {list.map((l) => (\n                <li key={l.key} className=\"oppsummeringsliste__element\">\n                    <div className=\"oppsummeringsliste__element__heading\">\n                        <Label>{l.headerVenstre}</Label>\n                        <div className=\"høyrestiltTekst\">\n                            <BodyShort>{l.headerHøyre}</BodyShort>\n                        </div>\n                    </div>\n                    {l.content && <div className=\"oppsummeringsliste__element__content\">{l.content}</div>}\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nexport default InntekterTabell;\n","import { formatDate, intlUtils } from '@navikt/fp-common';\nimport { ISOStringToDate } from 'app/utils/dateUtils';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\n\nimport AnnenInntektDetaljer from './AnnenInntektDetaljer';\nimport InntekterTabell from './InntekterTabell';\nimport { BodyShort } from '@navikt/ds-react';\n\nconst AndreInntekterOppsummering: FunctionComponent = () => {\n    const intl = useIntl();\n    const {\n        søker: { harHattAnnenInntektSiste10Mnd, andreInntekterSiste10Mnd },\n    } = useSøknad();\n\n    if (!harHattAnnenInntektSiste10Mnd || !andreInntekterSiste10Mnd) {\n        return (\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.andreInntekter.tittel')}>\n                <BodyShort>{intlUtils(intl, 'oppsummering.andreInntekter.ikkeHattAndreInntekter')}</BodyShort>\n            </OppsummeringsPunkt>\n        );\n    }\n\n    return (\n        <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.andreInntekter.tittel')}>\n            <InntekterTabell\n                list={andreInntekterSiste10Mnd.map((annenInntekt) => ({\n                    key: annenInntekt.type + annenInntekt.tidsperiode,\n                    headerVenstre: intlUtils(intl, `inntektstype.${annenInntekt.type.toLowerCase()}`),\n                    headerHøyre: intlUtils(intl, 'tidsintervall', {\n                        fom: formatDate(ISOStringToDate(annenInntekt.tidsperiode.fom)!),\n                        tom: annenInntekt.pågående\n                            ? 'pågående'\n                            : formatDate(ISOStringToDate(annenInntekt.tidsperiode.tom)!),\n                    }),\n                    content: <AnnenInntektDetaljer annenInntekt={annenInntekt} />,\n                }))}\n            />\n        </OppsummeringsPunkt>\n    );\n};\n\nexport default AndreInntekterOppsummering;\n","import { Block, formatDate, intlUtils } from '@navikt/fp-common';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport InntekterTabell from './InntekterTabell';\nimport { BodyShort } from '@navikt/ds-react';\n\nconst FrilansOppsummering: FunctionComponent = () => {\n    const intl = useIntl();\n    const {\n        søker: { frilansInformasjon, harJobbetSomFrilansSiste10Mnd },\n    } = useSøknad();\n\n    if (!frilansInformasjon || !harJobbetSomFrilansSiste10Mnd) {\n        return (\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.frilans.tittel')}>\n                <BodyShort>{intlUtils(intl, 'oppsummering.frilans.ikkeFrilans')}</BodyShort>\n            </OppsummeringsPunkt>\n        );\n    }\n    const {\n        oppstart,\n        jobberFremdelesSomFrilans,\n        driverFosterhjem,\n        harJobbetForNærVennEllerFamilieSiste10Mnd,\n        oppdragForNæreVennerEllerFamilieSiste10Mnd,\n    } = frilansInformasjon;\n\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.frilans.tittel')} />\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.frilans.oppstartsdato')}>\n                <BodyShort>{formatDate(oppstart)}</BodyShort>\n            </OppsummeringsPunkt>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.frilans.fremdelesFrilans')}>\n                <BodyShort>{jobberFremdelesSomFrilans ? intlUtils(intl, 'ja') : intlUtils(intl, 'nei')}</BodyShort>\n            </OppsummeringsPunkt>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.frilans.driverFosterhjem')}>\n                <BodyShort>{driverFosterhjem ? intlUtils(intl, 'ja') : intlUtils(intl, 'nei')}</BodyShort>\n            </OppsummeringsPunkt>\n            <OppsummeringsPunkt\n                title={intlUtils(intl, 'oppsummering.frilans.frilansArbeidForNæreVennerEllerFamilieSiste10Mnd')}\n            >\n                <Block visible={!harJobbetForNærVennEllerFamilieSiste10Mnd} margin=\"none\">\n                    <BodyShort>\n                        {intlUtils(\n                            intl,\n                            'oppsummering.frilans.harIkkeUtførtFrilansArbeidForNæreVennerEllerFamilieSiste10Mnd'\n                        )}\n                    </BodyShort>\n                </Block>\n                <Block visible={harJobbetForNærVennEllerFamilieSiste10Mnd} margin=\"none\">\n                    <InntekterTabell\n                        list={oppdragForNæreVennerEllerFamilieSiste10Mnd.map(\n                            ({ navnPåArbeidsgiver, tidsperiode, pågående }) => ({\n                                key: navnPåArbeidsgiver + tidsperiode,\n                                headerVenstre: navnPåArbeidsgiver,\n                                headerHøyre: intlUtils(intl, 'tidsintervall', {\n                                    fom: formatDate(tidsperiode.fom!),\n                                    tom: pågående ? 'pågående' : formatDate(tidsperiode.tom!),\n                                }),\n                            })\n                        )}\n                    />\n                </Block>\n            </OppsummeringsPunkt>\n        </>\n    );\n};\n\nexport default FrilansOppsummering;\n","import { formatDate, intlUtils } from '@navikt/fp-common';\nimport { Næring } from 'app/context/types/Næring';\nimport * as countries from 'i18n-iso-countries';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport { BodyShort } from '@navikt/ds-react';\n\ninterface Props {\n    næring: Næring;\n}\n\nconst Næringsdetaljer: FunctionComponent<Props> = ({ næring }) => {\n    const intl = useIntl();\n    const {\n        næringstyper,\n        organisasjonsnummer,\n        næringsinntekt,\n        registrertINorge,\n        registrertILand,\n        harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene,\n        hattVarigEndringAvNæringsinntektSiste4Kalenderår,\n        endringAvNæringsinntektInformasjon,\n        harRegnskapsfører,\n        regnskapsfører,\n    } = næring;\n\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.næringstype')}>\n                <BodyShort>{intlUtils(intl, `næringstype.${næringstyper[0].toLowerCase()}`)}</BodyShort>\n            </OppsummeringsPunkt>\n            {organisasjonsnummer && (\n                <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.orgnr')}>\n                    <BodyShort>{organisasjonsnummer}</BodyShort>\n                </OppsummeringsPunkt>\n            )}\n            {næringsinntekt && (\n                <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.næringsinntekt')}>\n                    <BodyShort>{næringsinntekt}</BodyShort>\n                </OppsummeringsPunkt>\n            )}\n            {registrertINorge ||\n                (registrertILand && (\n                    <OppsummeringsPunkt\n                        title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.registrertLand')}\n                    >\n                        <BodyShort>{registrertINorge ? 'Norge' : countries.getName(registrertILand, 'nb')}</BodyShort>\n                    </OppsummeringsPunkt>\n                ))}\n            {harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene && (\n                <OppsummeringsPunkt\n                    title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.blittYrkesaktivSiste3År')}\n                >\n                    <BodyShort>\n                        {harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene\n                            ? intlUtils(intl, 'ja')\n                            : intlUtils(intl, 'nei')}\n                    </BodyShort>\n                </OppsummeringsPunkt>\n            )}\n            {hattVarigEndringAvNæringsinntektSiste4Kalenderår === true && (\n                <>\n                    <OppsummeringsPunkt\n                        title={intlUtils(\n                            intl,\n                            'oppsummering.selvstendigNæringsdrivende.datoForEndringAvNæringsinntekt'\n                        )}\n                    >\n                        <BodyShort>{formatDate(endringAvNæringsinntektInformasjon!.dato)}</BodyShort>\n                    </OppsummeringsPunkt>\n                    <OppsummeringsPunkt\n                        title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.næringsinntektEtterEndring')}\n                    >\n                        <BodyShort>{endringAvNæringsinntektInformasjon!.næringsinntektEtterEndring}</BodyShort>\n                    </OppsummeringsPunkt>\n                    <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.forklaring')}>\n                        <BodyShort>{endringAvNæringsinntektInformasjon!.forklaring}</BodyShort>\n                    </OppsummeringsPunkt>\n                </>\n            )}\n            {harRegnskapsfører === true && regnskapsfører && (\n                <>\n                    <OppsummeringsPunkt\n                        title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.regnskapsførerNavn')}\n                    >\n                        <BodyShort>{regnskapsfører.navn}</BodyShort>\n                    </OppsummeringsPunkt>\n                    <OppsummeringsPunkt\n                        title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.regnskapsførerTlf')}\n                    >\n                        <BodyShort>{regnskapsfører.telefonnummer}</BodyShort>\n                    </OppsummeringsPunkt>\n                    <OppsummeringsPunkt\n                        title={intlUtils(\n                            intl,\n                            'oppsummering.selvstendigNæringsdrivende.regnskapsførerNærVennEllerFamilie'\n                        )}\n                    >\n                        <BodyShort>\n                            {regnskapsfører.erNærVennEllerFamilie ? intlUtils(intl, 'ja') : intlUtils(intl, 'nei')}\n                        </BodyShort>\n                    </OppsummeringsPunkt>\n                </>\n            )}\n            {harRegnskapsfører === false && (\n                <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.regnskapsfører')}>\n                    <BodyShort>\n                        {intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.harIkkeRegnskapsfører')}\n                    </BodyShort>\n                </OppsummeringsPunkt>\n            )}\n        </>\n    );\n};\n\nexport default Næringsdetaljer;\n","import { formatDate, intlUtils } from '@navikt/fp-common';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport InntekterTabell from './InntekterTabell';\nimport Næringsdetaljer from './Næringsdetaljer';\nimport { BodyShort } from '@navikt/ds-react';\n\nconst SelvstendigNæringsdrivendeOppsummering: FunctionComponent = () => {\n    const intl = useIntl();\n    const {\n        søker: { selvstendigNæringsdrivendeInformasjon, harJobbetSomSelvstendigNæringsdrivendeSiste10Mnd },\n    } = useSøknad();\n\n    if (!selvstendigNæringsdrivendeInformasjon || !harJobbetSomSelvstendigNæringsdrivendeSiste10Mnd) {\n        return (\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.tittel')}>\n                <BodyShort>\n                    {intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.ikkeSelvstendigNæringsdrivende')}\n                </BodyShort>\n            </OppsummeringsPunkt>\n        );\n    }\n\n    return (\n        <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.tittel')}>\n            <InntekterTabell\n                list={selvstendigNæringsdrivendeInformasjon.map((næring) => ({\n                    key: næring.navnPåNæringen + næring.tidsperiode,\n                    headerVenstre: næring.navnPåNæringen,\n                    headerHøyre: intlUtils(intl, 'tidsintervall', {\n                        fom: formatDate(næring.tidsperiode.fom)!,\n                        tom: næring.pågående ? 'pågående' : formatDate(næring.tidsperiode.tom!),\n                    }),\n                    content: <Næringsdetaljer næring={næring} />,\n                }))}\n            />\n        </OppsummeringsPunkt>\n    );\n};\n\nexport default SelvstendigNæringsdrivendeOppsummering;\n","import { intlUtils } from '@navikt/fp-common';\nimport HarArbeidsforhold from 'app/steps/inntektsinformasjon/components/arbeidsforhold-informasjon/HarArbeidsforhold';\nimport HarIkkeArbeidsforhold from 'app/steps/inntektsinformasjon/components/arbeidsforhold-informasjon/HarIkkeArbeidsforhold';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport AndreInntekterOppsummering from './AndreInntekterOppsummering';\nimport FrilansOppsummering from './FrilansOppsummering';\nimport SelvstendigNæringsdrivendeOppsummering from './SelvstendigNæringsdrivendeOppsummering';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport { getFamiliehendelsedato } from 'app/utils/barnUtils';\nimport { getAktiveArbeidsforhold } from 'app/utils/arbeidsforholdUtils';\nimport { ISOStringToDate } from 'app/utils/dateUtils';\nimport isFarEllerMedmor from 'app/utils/isFarEllerMedmor';\n\nconst ArbeidsforholdOgAndreInntekterOppsummering: FunctionComponent = () => {\n    const intl = useIntl();\n    const { arbeidsforhold } = useSøkerinfo();\n    const { barn, søkersituasjon } = useSøknad();\n    const erAdopsjon = søkersituasjon.situasjon === 'adopsjon';\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const aktiveArbeidsForhold = getAktiveArbeidsforhold(\n        arbeidsforhold,\n        erAdopsjon,\n        erFarEllerMedmor,\n        ISOStringToDate(familiehendelsesdato)\n    );\n    const harArbeidsforhold = aktiveArbeidsForhold !== undefined && aktiveArbeidsForhold.length > 0;\n\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.inntekt.registrerteArbeidsforhold')}>\n                <HarIkkeArbeidsforhold harArbeidsforhold={harArbeidsforhold} />\n                <HarArbeidsforhold harArbeidsforhold={harArbeidsforhold} arbeidsforhold={aktiveArbeidsForhold} />\n            </OppsummeringsPunkt>\n            <FrilansOppsummering />\n            <SelvstendigNæringsdrivendeOppsummering />\n            <AndreInntekterOppsummering />\n        </>\n    );\n};\n\nexport default ArbeidsforholdOgAndreInntekterOppsummering;\n","import { Tilleggsopplysning, Tilleggsopplysninger } from 'app/context/types/Tilleggsopplysninger';\nimport { replaceInvisibleCharsWithSpace } from './stringUtils';\n\nconst TIL_SAKSBEHANDLER = {\n    'tilleggsopplysning.begrunnelseForSenEndring': 'Begrunnelse for å søke om utsettelse',\n    'tilleggsopplysning.begrunnelseForSenEndring.SYKDOM': 'på grunn av sykdom tilbake i tid',\n    'tilleggsopplysning.begrunnelseForSenEndring.UTTAK': 'på grunn av uttak mer enn tre måneder tilbake i tid',\n    'tilleggsopplysning.begrunnelseForSenEndring.SYKDOM_OG_UTTAK':\n        'på grunn av sykdom tilbake i tid og uttak mer enn tre måneder tilbake i tid',\n};\n\nexport interface TilleggsopplysningMedBeskrivelse {\n    beskrivelse: string;\n    tekst: string;\n    ekstraInformasjon?: string;\n}\n\nexport const beskrivTilleggsopplysning = (tilleggsopplysning: Tilleggsopplysning): TilleggsopplysningMedBeskrivelse => {\n    const { tekst, ekstraInformasjon } = tilleggsopplysning;\n    const beskrivelseMessageId = `tilleggsopplysning.begrunnelseForSenEndring`;\n    const beskrivelseAvOpplysning = TIL_SAKSBEHANDLER[beskrivelseMessageId];\n    const ekstraMessageId = `tilleggsopplysning.begrunnelseForSenEndring.${ekstraInformasjon}`;\n    const ekstraInfoTilSaksbehandling = (TIL_SAKSBEHANDLER as any)[ekstraMessageId];\n\n    return {\n        beskrivelse: beskrivelseAvOpplysning,\n        ekstraInformasjon: ekstraInfoTilSaksbehandling,\n        tekst,\n    };\n};\n\nexport const cleanupInvisibleCharsFromTilleggsopplysninger = (\n    tilleggsopplysninger: Tilleggsopplysninger\n): Tilleggsopplysninger => {\n    return tilleggsopplysninger.begrunnelseForSenEndring\n        ? {\n              ...tilleggsopplysninger,\n              begrunnelseForSenEndring: {\n                  ...tilleggsopplysninger.begrunnelseForSenEndring,\n                  tekst: replaceInvisibleCharsWithSpace(tilleggsopplysninger.begrunnelseForSenEndring.tekst),\n              },\n          }\n        : tilleggsopplysninger;\n};\n","import * as React from 'react';\nimport './feltoppsummering.less';\nimport InnholdMedLedetekst from '../InnholdMedLedetekst';\n\ninterface Props {\n    feltnavn: string;\n    verdi: string | string[];\n}\n\nconst Feltoppsummering: React.FunctionComponent<Props> = ({ feltnavn, verdi }) => (\n    <InnholdMedLedetekst className=\"feltoppsummering\" ledetekst={feltnavn}>\n        <div className=\"feltoppsummering__verdi\">{verdi}</div>\n    </InnholdMedLedetekst>\n);\n\nexport default Feltoppsummering;\n","import * as React from 'react';\nimport './list.less';\nimport { bemUtils } from '@navikt/fp-common';\n\ninterface ListProps {\n    data: any[];\n    renderElement: (data: any, index: number) => JSX.Element;\n    className?: string;\n}\n\nconst bem = bemUtils('list');\nconst List: React.FunctionComponent<ListProps> = (props: ListProps) => {\n    const { data, renderElement, className } = props;\n    return (\n        <ul className={`${bem.block} ${className}`}>\n            {data.map((dataObject: any, i: number) => renderElement(dataObject, i))}\n        </ul>\n    );\n};\n\nexport default List;\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport List from './list/List';\nimport { BodyShort, Label } from '@navikt/ds-react';\nimport { guid } from '@navikt/fp-common';\nimport './oppsummeringsliste.less';\n\nexport interface OppsummeringslisteelementProps {\n    venstrestiltTekst: string;\n    høyrestiltTekst: string;\n    content?: React.ReactNode;\n    kompakt?: boolean;\n}\n\ninterface OppsummeringslisteProps {\n    data: OppsummeringslisteelementProps[];\n    kompakt?: boolean;\n}\n\nconst Oppsummeringsliste: React.FunctionComponent<OppsummeringslisteProps> = (props: OppsummeringslisteProps) => {\n    const { data, kompakt } = props;\n    return (\n        <List\n            className=\"oppsummeringsliste\"\n            data={data}\n            renderElement={(elementProps: OppsummeringslisteelementProps) => (\n                <Oppsummeringslisteelement {...elementProps} kompakt={kompakt} key={guid()} />\n            )}\n        />\n    );\n};\n\nconst Oppsummeringslisteelement: React.FunctionComponent<OppsummeringslisteelementProps> = ({\n    venstrestiltTekst,\n    høyrestiltTekst,\n    content,\n    kompakt,\n}: OppsummeringslisteelementProps) => (\n    <li\n        className={classNames('oppsummeringsliste__element', {\n            'oppsummeringsliste__element--kompakt': kompakt === true,\n        })}\n    >\n        <div className=\"oppsummeringsliste__element__heading\">\n            <Label as=\"h4\">{venstrestiltTekst}</Label>\n            <div className=\"høyrestiltTekst\">\n                <BodyShort>{høyrestiltTekst}</BodyShort>\n            </div>\n        </div>\n        {content && <div className=\"oppsummeringsliste__element__content\">{content}</div>}\n    </li>\n);\n\nexport default Oppsummeringsliste;\n","import AnnenForelder from 'app/context/types/AnnenForelder';\nimport { Attachment, InnsendingsType } from 'app/types/Attachment';\nimport { AttachmentType } from 'app/types/AttachmentType';\nimport { MissingAttachment } from 'app/types/MissingAttachment';\nimport { Skjemanummer } from 'app/types/Skjemanummer';\nimport { MorsAktivitet } from 'uttaksplan/types/MorsAktivitet';\nimport { OverføringÅrsakType } from 'uttaksplan/types/OverføringÅrsakType';\nimport {\n    isOverføringsperiode,\n    isUtsettelsesperiode,\n    isUttaksperiode,\n    Overføringsperiode,\n    Periode,\n    Periodetype,\n    PeriodeUtenUttakUtsettelse,\n    Utsettelsesperiode,\n    Uttaksperiode,\n} from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\nimport { erÅrsakSykdomEllerInstitusjonsopphold } from 'uttaksplan/utils/periodeUtils';\nimport { aktivitetskravMorSkalBesvares } from 'uttaksplan/utils/uttaksskjema/aktivitetskravMorSkalBesvares';\nimport { Søknadsinfo } from 'uttaksplan/validering/utils/types/Søknadsinfo';\nimport { aktivitetskravMorUtil, getMorsAktivitetSkjemanummer } from './morsAktivitetUtils';\n\nconst createMissingAttachment = (\n    index: number,\n    skjemanummer: Skjemanummer,\n    type: AttachmentType,\n    periodeId?: string\n): MissingAttachment => {\n    return {\n        index,\n        skjemanummer,\n        type,\n        periodeId,\n    };\n};\n\nconst isAttachmentMissing = (attachments?: Attachment[], type?: AttachmentType): boolean =>\n    attachments === undefined ||\n    attachments.length === 0 ||\n    (type !== undefined && attachments.find((a) => a.type === type) === undefined);\n\nexport const shouldPeriodeHaveAttachment = (\n    periode: Periode,\n    søkerErFarEllerMedmor: boolean,\n    annenForelder: AnnenForelder\n): boolean => {\n    switch (periode.type) {\n        case Periodetype.Overføring:\n            return dokumentasjonBehøvesForOverføringsperiode(søkerErFarEllerMedmor, periode);\n        case Periodetype.Utsettelse:\n            return dokumentasjonBehøvesForUtsettelsesperiode(\n                periode,\n                aktivitetskravMorUtil.skalBesvaresVedUtsettelse(søkerErFarEllerMedmor, annenForelder)\n            );\n        case Periodetype.Uttak:\n            return dokumentasjonBehøvesForUttaksperiode(periode);\n        default:\n            return false;\n    }\n};\n\nexport const hasPeriodeMissingAttachment = (periode: Periode, søknadsinfo: Søknadsinfo): boolean => {\n    const shouldHave = shouldPeriodeHaveAttachment(\n        periode,\n        søknadsinfo.søkerErFarEllerMedmor,\n        søknadsinfo.annenForelder\n    );\n\n    return (\n        shouldHave &&\n        isAttachmentMissing(periode.vedlegg?.filter((p) => p.innsendingsType !== InnsendingsType.SEND_SENERE))\n    );\n};\n\nexport const findMissingAttachmentsForPerioder = (søknadsinfo: Søknadsinfo): MissingAttachment[] => {\n    const perioder = søknadsinfo.perioderSomSkalSendesInn;\n    if (!perioder) {\n        return [];\n    }\n    const missingAttachments: MissingAttachment[] = [];\n    for (const periode of perioder) {\n        if (hasPeriodeMissingAttachment(periode, søknadsinfo)) {\n            const index = perioder.indexOf(periode);\n            if (\n                (isUtsettelsesperiode(periode) || isUttaksperiode(periode)) &&\n                missingAttachmentForAktivitetskrav(periode, søknadsinfo)\n            ) {\n                missingAttachments.push(\n                    createMissingAttachment(\n                        index,\n                        getMorsAktivitetSkjemanummer(periode.morsAktivitetIPerioden),\n                        AttachmentType.MORS_AKTIVITET_DOKUMENTASJON,\n                        periode.id\n                    )\n                );\n            } else {\n                if (isUtsettelsesperiode(periode)) {\n                    if (periode.årsak === UtsettelseÅrsakType.HvØvelse) {\n                        missingAttachments.push(\n                            createMissingAttachment(index, Skjemanummer.HV_ØVELSE, AttachmentType.HV_ØVELSE, periode.id)\n                        );\n                    }\n\n                    if (\n                        periode.årsak === UtsettelseÅrsakType.Fri &&\n                        søknadsinfo.søkerErFarEllerMedmor &&\n                        !søknadsinfo.morErUfør &&\n                        !søknadsinfo.morHarRett\n                    ) {\n                        missingAttachments.push(\n                            createMissingAttachment(\n                                index,\n                                Skjemanummer.DOK_MORS_UTDANNING_ARBEID_SYKDOM,\n                                AttachmentType.MORS_AKTIVITET_DOKUMENTASJON,\n                                periode.id\n                            )\n                        );\n                    }\n\n                    if (periode.årsak === UtsettelseÅrsakType.NavTiltak) {\n                        missingAttachments.push(\n                            createMissingAttachment(\n                                index,\n                                Skjemanummer.NAV_TILTAK,\n                                AttachmentType.NAV_TILTAK,\n                                periode.id\n                            )\n                        );\n                    }\n\n                    if (\n                        periode.årsak === UtsettelseÅrsakType.InstitusjonSøker ||\n                        periode.årsak === UtsettelseÅrsakType.InstitusjonBarnet\n                    ) {\n                        missingAttachments.push(\n                            createMissingAttachment(\n                                index,\n                                Skjemanummer.DOK_INNLEGGELSE,\n                                AttachmentType.UTSETTELSE_SYKDOM,\n                                periode.id\n                            )\n                        );\n                    }\n\n                    if (periode.årsak === UtsettelseÅrsakType.Sykdom) {\n                        missingAttachments.push(\n                            createMissingAttachment(\n                                index,\n                                Skjemanummer.DOK_OVERFØRING_FOR_SYK,\n                                AttachmentType.UTSETTELSE_SYKDOM,\n                                periode.id\n                            )\n                        );\n                    }\n                }\n\n                if (isOverføringsperiode(periode)) {\n                    if (\n                        periode.årsak === OverføringÅrsakType.institusjonsoppholdAnnenForelder ||\n                        periode.årsak === OverføringÅrsakType.sykdomAnnenForelder\n                    ) {\n                        missingAttachments.push(\n                            createMissingAttachment(\n                                index,\n                                Skjemanummer.DOK_OVERFØRING_FOR_SYK,\n                                AttachmentType.OVERFØRING_KVOTE,\n                                periode.id\n                            )\n                        );\n                    }\n                }\n\n                if (isUttaksperiode(periode)) {\n                    if (periode.konto === StønadskontoType.Fedrekvote && periode.erMorForSyk === true) {\n                        missingAttachments.push(\n                            createMissingAttachment(\n                                index,\n                                Skjemanummer.DOK_MORS_UTDANNING_ARBEID_SYKDOM,\n                                AttachmentType.UTSETTELSE_SYKDOM,\n                                periode.id\n                            )\n                        );\n                    }\n                }\n            }\n        }\n    }\n    return missingAttachments;\n};\n\nconst dokumentasjonBehøvesForUttaksperiode = (periode: Uttaksperiode): boolean => {\n    if (periode.harIkkeAktivitetskrav) {\n        return false;\n    }\n\n    return (\n        (periode.morsAktivitetIPerioden !== undefined && periode.morsAktivitetIPerioden !== MorsAktivitet.Uføre) ||\n        (periode.konto === StønadskontoType.Fedrekvote && periode.erMorForSyk === true)\n    );\n};\n\nconst dokumentasjonBehøvesForUtsettelsesperiode = (\n    { årsak }: Utsettelsesperiode | PeriodeUtenUttakUtsettelse,\n    harMorAktivitetskrav: boolean\n): boolean => {\n    return (\n        harMorAktivitetskrav ||\n        erÅrsakSykdomEllerInstitusjonsopphold(årsak) ||\n        årsak === UtsettelseÅrsakType.HvØvelse ||\n        årsak === UtsettelseÅrsakType.NavTiltak\n    );\n};\n\nexport const dokumentasjonBehøvesForOverføringsperiode = (\n    erFarEllerMedmor: boolean,\n    periode: Overføringsperiode\n): boolean =>\n    (erFarEllerMedmor || periode.årsak !== OverføringÅrsakType.aleneomsorg) &&\n    periode.årsak !== OverføringÅrsakType.ikkeRettAnnenForelder;\n\nconst missingAttachmentForAktivitetskrav = (\n    periode: Utsettelsesperiode | Uttaksperiode,\n    søknadsinfo: Søknadsinfo\n): boolean => {\n    const søkerErMor = !søknadsinfo.søkerErFarEllerMedmor;\n    const ønskerFlerBarnsdager = isUttaksperiode(periode) ? periode.ønskerFlerbarnsdager : undefined;\n    const erSamtidigUttak = isUttaksperiode(periode) ? periode.ønskerSamtidigUttak : undefined;\n    const morErForSyk = isUttaksperiode(periode) ? periode.erMorForSyk : undefined;\n    const konto = isUttaksperiode(periode) ? periode.konto : undefined;\n    return (\n        aktivitetskravMorSkalBesvares(\n            ønskerFlerBarnsdager,\n            erSamtidigUttak,\n            morErForSyk,\n            periode.type,\n            konto,\n            søkerErMor,\n            søknadsinfo.søkerErAleneOmOmsorg,\n            søknadsinfo.annenForelder.kanIkkeOppgis,\n            søknadsinfo.søkerHarMidlertidigOmsorg,\n            periode.tidsperiode,\n            søknadsinfo.familiehendelsesdato,\n            søknadsinfo.termindato,\n            søknadsinfo.søkersituasjon.situasjon,\n            søknadsinfo.stønadskontoer,\n            !søknadsinfo.morHarRett\n        ) &&\n        isAttachmentMissing(\n            periode.vedlegg?.filter((p) => p.innsendingsType !== InnsendingsType.SEND_SENERE),\n            AttachmentType.MORS_AKTIVITET_DOKUMENTASJON\n        )\n    );\n};\n","import { intlUtils } from '@navikt/fp-common';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { IntlShape } from 'react-intl';\nimport {\n    Arbeidsform,\n    Overføringsperiode,\n    Periodetype,\n    PeriodeUtenUttakUtsettelse,\n    Utsettelsesperiode,\n} from 'uttaksplan/types/Periode';\n\ntype MessageValue = string | number | boolean | Date | null | undefined;\n\nconst getValgtArbeidsgiverNavn = (arbeidsforhold: Arbeidsforhold[], orgnr?: string) => {\n    if (orgnr) {\n        const valgtArbeidsgiver = arbeidsforhold.find(\n            ({ arbeidsgiverId, arbeidsgiverIdType }) => arbeidsgiverIdType === 'orgnr' && arbeidsgiverId === orgnr\n        );\n        if (valgtArbeidsgiver) {\n            return valgtArbeidsgiver.arbeidsgiverNavn;\n        }\n    }\n    return '';\n};\n\nexport const getArbeidsformTekst = (\n    intl: IntlShape,\n    arbeidsformer: Arbeidsform[],\n    orgnumre?: string[],\n    arbeidsforhold?: Arbeidsforhold[]\n) => {\n    let arbeidstakerTekster: string[] = [];\n    let arbeidsformerTekster: string[] = [];\n\n    if (orgnumre !== undefined && orgnumre.length > 0 && arbeidsforhold && arbeidsforhold.length > 0) {\n        arbeidstakerTekster = orgnumre.map((orgnr) => {\n            const arbeidsgiverNavn = getValgtArbeidsgiverNavn(arbeidsforhold, orgnr);\n            return intlUtils(intl, `oppsummering.uttak.arbeidstaker`, { orgnr, arbeidsgiverNavn });\n        });\n    }\n\n    if (arbeidsformer !== undefined && arbeidsformer.length > 0) {\n        arbeidsformerTekster = arbeidsformer\n            .filter((arbeidsform) => arbeidsform !== Arbeidsform.arbeidstaker)\n            .map((arbeidsform) => {\n                return intlUtils(intl, `oppsummering.uttak.${arbeidsform.toLowerCase()}`);\n            });\n    }\n\n    return arbeidstakerTekster.concat(arbeidsformerTekster);\n};\n\nexport const getÅrsakTekst = (\n    intl: IntlShape,\n    { type, årsak }: Utsettelsesperiode | Overføringsperiode | PeriodeUtenUttakUtsettelse,\n    messageValues?: { [key: string]: MessageValue }\n) => {\n    const intlKeyPrefix = type === Periodetype.Utsettelse ? 'utsettelsesårsak.' : 'overføringsårsaktype.';\n    return intlUtils(intl, `uttaksplan.${intlKeyPrefix + årsak}`, messageValues);\n};\n","import * as React from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\nimport { Overføringsperiode } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport Feltoppsummering from '../feltoppsummering/Feltoppsummering';\nimport { intlUtils } from '@navikt/fp-common';\nimport OppsummeringAvDokumentasjon from '../oppsummering-av-dokumentasjon/OppsummeringAvDokumentasjon';\nimport { dokumentasjonBehøvesForOverføringsperiode } from 'app/utils/manglendeVedleggUtils';\nimport { getÅrsakTekst } from '../OppsummeringUtils';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\n\ninterface OverføringsperiodedetaljerProps {\n    periode: Overføringsperiode;\n    navnPåForeldre: NavnPåForeldre;\n    erFarEllerMedmor: boolean;\n    periodeErNyEllerEndret: boolean;\n}\n\ntype Props = OverføringsperiodedetaljerProps;\n\nconst getNavnPåAnnenForelder = (navnPåForeldre: NavnPåForeldre, konto: StønadskontoType, intl: IntlShape) => {\n    if (konto === StønadskontoType.Fedrekvote) {\n        return navnPåForeldre.farMedmor;\n    } else if (konto === StønadskontoType.Mødrekvote) {\n        return navnPåForeldre.mor;\n    }\n    return intlUtils(intl, 'annen.forelder');\n};\n\nconst Overføringsperiodedetaljer: React.FunctionComponent<Props> = ({\n    periode,\n    navnPåForeldre,\n    erFarEllerMedmor,\n    periodeErNyEllerEndret,\n}) => {\n    const { vedlegg } = periode;\n    const intl = useIntl();\n    const navnAnnenForelder = getNavnPåAnnenForelder(navnPåForeldre, periode.konto, intl);\n    return (\n        <>\n            <Feltoppsummering\n                feltnavn={intlUtils(intl, 'oppsummering.uttak.årsak')}\n                verdi={getÅrsakTekst(intl, periode, { navnAnnenForelder })}\n            />\n\n            {dokumentasjonBehøvesForOverføringsperiode(erFarEllerMedmor, periode) && periodeErNyEllerEndret && (\n                <OppsummeringAvDokumentasjon vedlegg={vedlegg || []} />\n            )}\n        </>\n    );\n};\n\nexport default Overføringsperiodedetaljer;\n","import * as React from 'react';\nimport { MorsAktivitet } from 'uttaksplan/types/MorsAktivitet';\nimport { Attachment } from 'app/types/Attachment';\nimport { IntlShape, useIntl } from 'react-intl';\nimport OppsummeringAvDokumentasjon from '../oppsummering-av-dokumentasjon/OppsummeringAvDokumentasjon';\nimport Feltoppsummering from '../feltoppsummering/Feltoppsummering';\nimport { intlUtils } from '@navikt/fp-common';\nimport { assertUnreachable } from 'app/utils/globalUtil';\n\ninterface MorsAktivitetDetaljerProps {\n    morsAktivitet: MorsAktivitet;\n    dokumentasjonAvMorsAktivitet: Attachment[];\n    visOppsummeringAvDokumentasjon: boolean;\n}\n\ntype Props = MorsAktivitetDetaljerProps;\n\nconst getMorsAktivitetTekst = (intl: IntlShape, aktivitet: MorsAktivitet): string => {\n    switch (aktivitet) {\n        case MorsAktivitet.Arbeid:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.Arbeid');\n        case MorsAktivitet.ArbeidOgUtdanning:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.ArbeidOgUtdanning');\n        case MorsAktivitet.Innlagt:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.Innlagt');\n        case MorsAktivitet.Introduksjonsprogrammet:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.Introduksjonsprogrammet');\n        case MorsAktivitet.Kvalifiseringsprogrammet:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.Kvalifiseringsprogrammet');\n        case MorsAktivitet.TrengerHjelp:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.TrengerHjelp');\n        case MorsAktivitet.Uføre:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.Uføre');\n        case MorsAktivitet.Utdanning:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.Utdanning');\n        case MorsAktivitet.IkkeOppgitt:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.UtenAktivitetsKrav');\n        default:\n            return assertUnreachable(aktivitet, 'Mor har ingen aktivitet');\n    }\n};\n\nconst MorsAktivitetDetaljer: React.FunctionComponent<Props> = ({\n    morsAktivitet,\n    dokumentasjonAvMorsAktivitet,\n    visOppsummeringAvDokumentasjon,\n}) => {\n    const intl = useIntl();\n\n    return (\n        <>\n            <Feltoppsummering\n                feltnavn={intlUtils(intl, 'oppsummering.morsAktivitet')}\n                verdi={getMorsAktivitetTekst(intl, morsAktivitet)}\n            />\n            {visOppsummeringAvDokumentasjon && (\n                <OppsummeringAvDokumentasjon\n                    ledetekst={intlUtils(intl, 'oppsummering.morsAktivitet.dokumentasjon')}\n                    vedlegg={dokumentasjonAvMorsAktivitet}\n                />\n            )}\n        </>\n    );\n};\n\nexport default MorsAktivitetDetaljer;\n","import { intlUtils } from '@navikt/fp-common';\nimport AnnenForelder, { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { shouldPeriodeHaveAttachment } from 'app/utils/manglendeVedleggUtils';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { UttaksperiodeBase } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport Feltoppsummering from '../feltoppsummering/Feltoppsummering';\nimport MorsAktivitetDetaljer from './MorsaktiviteterDetaljer';\nimport { getArbeidsformTekst } from '../OppsummeringUtils';\n\ninterface UttaksperiodedetaljerProps {\n    periode: UttaksperiodeBase;\n    registrerteArbeidsforhold: Arbeidsforhold[] | undefined;\n    periodeErNyEllerEndret: boolean;\n    søkerErFarEllerMedmor: boolean;\n    annenForelder: AnnenForelder;\n}\n\ntype Props = UttaksperiodedetaljerProps;\n\nconst Uttaksperiodedetaljer: React.FunctionComponent<Props> = ({\n    periode,\n    registrerteArbeidsforhold,\n    periodeErNyEllerEndret,\n    søkerErFarEllerMedmor,\n    annenForelder,\n}) => {\n    const {\n        konto,\n        morsAktivitetIPerioden,\n        ønskerSamtidigUttak,\n        gradert,\n        stillingsprosent,\n        orgnumre,\n        arbeidsformer,\n        vedlegg,\n        ønskerFlerbarnsdager,\n    } = periode;\n    const intl = useIntl();\n\n    let arbeidsformTekst = '';\n    if (arbeidsformer) {\n        arbeidsformTekst = getArbeidsformTekst(intl, arbeidsformer, orgnumre, registrerteArbeidsforhold).join('\\r\\n');\n    }\n\n    const erDeltUttakINorge = isAnnenForelderOppgitt(annenForelder) && annenForelder.harRettPåForeldrepengerINorge;\n\n    return (\n        <>\n            {ønskerFlerbarnsdager !== undefined && erDeltUttakINorge && (\n                <Feltoppsummering\n                    feltnavn={intlUtils(intl, 'oppsummering.uttak.ønskerFlerbarnsdager')}\n                    verdi={ønskerFlerbarnsdager ? intlUtils(intl, 'ja') : intlUtils(intl, 'nei')}\n                />\n            )}\n            {ønskerSamtidigUttak !== undefined && erDeltUttakINorge && (\n                <Feltoppsummering\n                    feltnavn={intlUtils(intl, 'oppsummering.uttak.samtidigUttak')}\n                    verdi={ønskerSamtidigUttak ? intlUtils(intl, 'ja') : intlUtils(intl, 'nei')}\n                />\n            )}\n            {konto !== StønadskontoType.ForeldrepengerFørFødsel && ønskerSamtidigUttak !== true && (\n                <Feltoppsummering\n                    feltnavn={intlUtils(intl, 'oppsummering.uttak.kombineresMedarbeid')}\n                    verdi={gradert ? intlUtils(intl, 'ja') : intlUtils(intl, 'nei')}\n                />\n            )}\n\n            {gradert === true && stillingsprosent && (\n                <Feltoppsummering\n                    feltnavn={intlUtils(intl, 'oppsummering.uttak.stillingsprosent')}\n                    verdi={stillingsprosent}\n                />\n            )}\n\n            {arbeidsformer && (\n                <Feltoppsummering\n                    feltnavn={intlUtils(intl, 'oppsummering.uttak.arbeidstaker.label')}\n                    verdi={arbeidsformTekst}\n                />\n            )}\n            {shouldPeriodeHaveAttachment(periode, søkerErFarEllerMedmor, annenForelder) && morsAktivitetIPerioden && (\n                <MorsAktivitetDetaljer\n                    morsAktivitet={morsAktivitetIPerioden}\n                    dokumentasjonAvMorsAktivitet={vedlegg || []}\n                    visOppsummeringAvDokumentasjon={periodeErNyEllerEndret}\n                />\n            )}\n        </>\n    );\n};\n\nexport default Uttaksperiodedetaljer;\n","import { intlUtils } from '@navikt/fp-common';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { AttachmentType } from 'app/types/AttachmentType';\nimport { shouldPeriodeHaveAttachment } from 'app/utils/manglendeVedleggUtils';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { PeriodeUtenUttakUtsettelse, Utsettelsesperiode } from 'uttaksplan/types/Periode';\nimport Feltoppsummering from '../feltoppsummering/Feltoppsummering';\nimport OppsummeringAvDokumentasjon from '../oppsummering-av-dokumentasjon/OppsummeringAvDokumentasjon';\nimport { getÅrsakTekst } from '../OppsummeringUtils';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\nimport MorsAktivitetDetaljer from './MorsaktiviteterDetaljer';\nimport AnnenForelder from 'app/context/types/AnnenForelder';\n\ninterface UtsettelsesperiodedetaljerProps {\n    periode: Utsettelsesperiode | PeriodeUtenUttakUtsettelse;\n    registrerteArbeidsforhold: Arbeidsforhold[];\n    søkerErFarEllerMedmor: boolean;\n    annenForelder: AnnenForelder;\n    periodeErNyEllerEndret: boolean;\n}\n\nconst Utsettelsesperiodedetaljer: React.FunctionComponent<UtsettelsesperiodedetaljerProps> = ({\n    periode,\n    søkerErFarEllerMedmor,\n    annenForelder,\n    periodeErNyEllerEndret,\n}) => {\n    const { årsak, morsAktivitetIPerioden, vedlegg, bekrefterArbeidIPerioden } = periode;\n    const intl = useIntl();\n    const bekreftErIArbeidSvar = bekrefterArbeidIPerioden === true ? intlUtils(intl, 'ja') : intlUtils(intl, 'nei');\n\n    return (\n        <>\n            <Feltoppsummering\n                feltnavn={intlUtils(intl, 'oppsummering.uttak.årsak')}\n                verdi={getÅrsakTekst(intl, periode)}\n            />\n            {shouldPeriodeHaveAttachment(periode, søkerErFarEllerMedmor, annenForelder) &&\n                periodeErNyEllerEndret &&\n                periode.årsak !== UtsettelseÅrsakType.Fri && (\n                    <OppsummeringAvDokumentasjon\n                        vedlegg={(vedlegg || []).filter(\n                            (currentVedlegg) => currentVedlegg.type !== AttachmentType.MORS_AKTIVITET_DOKUMENTASJON\n                        )}\n                    />\n                )}\n            {årsak === UtsettelseÅrsakType.Arbeid && (\n                <Feltoppsummering\n                    feltnavn={intlUtils(intl, 'oppsummering.uttak.bekreft100ProsentIArbeid.label')}\n                    verdi={bekreftErIArbeidSvar}\n                />\n            )}\n            {shouldPeriodeHaveAttachment(periode, søkerErFarEllerMedmor, annenForelder) && morsAktivitetIPerioden && (\n                <MorsAktivitetDetaljer\n                    morsAktivitet={morsAktivitetIPerioden}\n                    dokumentasjonAvMorsAktivitet={(vedlegg || []).filter(\n                        (currentVedlegg) => currentVedlegg.type === AttachmentType.MORS_AKTIVITET_DOKUMENTASJON\n                    )}\n                    visOppsummeringAvDokumentasjon={periodeErNyEllerEndret}\n                />\n            )}\n        </>\n    );\n};\n\nexport default Utsettelsesperiodedetaljer;\n","import { FunctionComponent } from 'react';\nimport { formatDate, intlUtils, TidsperiodeDate } from '@navikt/fp-common';\nimport AnnenForelder from 'app/context/types/AnnenForelder';\nimport { Tilleggsopplysning } from 'app/context/types/Tilleggsopplysninger';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { beskrivTilleggsopplysning, TilleggsopplysningMedBeskrivelse } from 'app/utils/tilleggsopplysningerUtils';\nimport { useIntl } from 'react-intl';\nimport {\n    Oppholdsperiode,\n    Overføringsperiode,\n    Periode,\n    Periodetype,\n    PeriodeUtenUttakUtsettelse,\n    Utsettelsesperiode,\n    Uttaksperiode,\n} from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { finnesPeriodeIOpprinneligPlan, getPeriodeTittel } from 'uttaksplan/utils/periodeUtils';\nimport { getStønadskontoNavn } from 'uttaksplan/utils/stønadskontoerUtils';\nimport Feltoppsummering from './feltoppsummering/Feltoppsummering';\nimport Oppsummeringsliste, { OppsummeringslisteelementProps } from './oppsummeringsliste/Oppsummeringsliste';\nimport Overføringsperiodedetaljer from './detaljer/Overføringsperiodedetaljer';\nimport Uttaksperiodedetaljer from './detaljer/Uttaksperiodedetaljer';\nimport Utsettelsesperiodedetaljer from './detaljer/Uttsettelsesperiodedetaljer';\nimport { appendPeriodeNavnHvisUttakRundtFødselFarMedmor, uttaksperiodeKanJusteresVedFødsel } from 'app/utils/wlbUtils';\nimport { Situasjon } from 'app/types/Situasjon';\n\ninterface UttaksplanOppsummeringslisteProps {\n    perioder: Periode[];\n    navnPåForeldre: NavnPåForeldre;\n    erFarEllerMedmor: boolean;\n    registrerteArbeidsforhold: Arbeidsforhold[];\n    annenForelder: AnnenForelder;\n    begrunnelseForSenEndring?: Tilleggsopplysning;\n    eksisterendeUttaksplan?: Periode[];\n    familiehendelsesdato: Date;\n    termindato: Date | undefined;\n    situasjon: Situasjon;\n    erAleneOmOmsorg: boolean;\n    ønskerJustertUttakVedFødsel: boolean | undefined;\n}\n\nconst UttaksplanOppsummeringsliste: FunctionComponent<UttaksplanOppsummeringslisteProps> = ({\n    perioder,\n    navnPåForeldre,\n    erFarEllerMedmor,\n    registrerteArbeidsforhold,\n    annenForelder,\n    begrunnelseForSenEndring,\n    eksisterendeUttaksplan,\n    familiehendelsesdato,\n    termindato,\n    situasjon,\n    erAleneOmOmsorg,\n    ønskerJustertUttakVedFødsel,\n}) => {\n    const intl = useIntl();\n\n    const getStønadskontoNavnFromKonto = (konto: StønadskontoType) => {\n        return getStønadskontoNavn(intl, konto, navnPåForeldre, erFarEllerMedmor, erAleneOmOmsorg);\n    };\n\n    const getUttaksperiodeNavn = (periode: Uttaksperiode) => {\n        const tittel = getStønadskontoNavnFromKonto(periode.konto);\n        return appendPeriodeNavnHvisUttakRundtFødselFarMedmor(\n            intl,\n            tittel,\n            periode,\n            situasjon,\n            familiehendelsesdato,\n            termindato\n        );\n    };\n\n    const formatTidsperiode = (tidsperiode: TidsperiodeDate): string => {\n        const formatertTidsperiode = intlUtils(intl, 'tidsintervall', {\n            fom: formatDate(tidsperiode.fom),\n            tom: formatDate(tidsperiode.tom),\n        });\n        if (uttaksperiodeKanJusteresVedFødsel(ønskerJustertUttakVedFødsel, termindato, tidsperiode.fom)) {\n            const justeringTekst = intlUtils(intl, 'oppsummering.uttak.periodenBlirAutomatiskJustert');\n            return justeringTekst.concat(formatertTidsperiode);\n        }\n        return formatertTidsperiode;\n    };\n    const createOppsummeringslisteelementPropsForUttaksperiode = (\n        periode: Uttaksperiode,\n        periodeErNyEllerEndret = true\n    ): OppsummeringslisteelementProps => {\n        return {\n            venstrestiltTekst: getUttaksperiodeNavn(periode),\n            høyrestiltTekst: formatTidsperiode(periode.tidsperiode),\n            content: (\n                <Uttaksperiodedetaljer\n                    periode={periode}\n                    registrerteArbeidsforhold={registrerteArbeidsforhold}\n                    periodeErNyEllerEndret={periodeErNyEllerEndret}\n                    søkerErFarEllerMedmor={erFarEllerMedmor}\n                    annenForelder={annenForelder}\n                />\n            ),\n        };\n    };\n\n    const createOppsummeringslisteelementPropsForOppholdsperiode = (\n        periode: Oppholdsperiode\n    ): OppsummeringslisteelementProps => {\n        return {\n            venstrestiltTekst: getPeriodeTittel(\n                intl,\n                periode,\n                navnPåForeldre,\n                familiehendelsesdato,\n                termindato,\n                situasjon\n            ),\n            høyrestiltTekst: formatTidsperiode(periode.tidsperiode),\n        };\n    };\n\n    const createOppsummeringslisteelementPropsForUtsettelsesperiode = (\n        periode: Utsettelsesperiode | PeriodeUtenUttakUtsettelse,\n        periodeErNyEllerEndret: boolean\n    ): OppsummeringslisteelementProps => {\n        return {\n            venstrestiltTekst: intlUtils(intl, 'oppsummering.utsettelse.pga'),\n            høyrestiltTekst: formatTidsperiode(periode.tidsperiode),\n            content: (\n                <Utsettelsesperiodedetaljer\n                    periode={periode}\n                    registrerteArbeidsforhold={registrerteArbeidsforhold}\n                    søkerErFarEllerMedmor={erFarEllerMedmor}\n                    annenForelder={annenForelder}\n                    periodeErNyEllerEndret={periodeErNyEllerEndret}\n                />\n            ),\n        };\n    };\n\n    const createOppsummeringslisteelementPropsForOverføringsperiode = (\n        periode: Overføringsperiode,\n        periodeErNyEllerEndret: boolean\n    ): OppsummeringslisteelementProps => {\n        const kontonavn = getStønadskontoNavnFromKonto(periode.konto);\n        return {\n            venstrestiltTekst: intlUtils(intl, 'oppsummering.overtakelse.pga', {\n                konto: kontonavn,\n            }),\n            høyrestiltTekst: formatTidsperiode(periode.tidsperiode),\n            content: (\n                <Overføringsperiodedetaljer\n                    periode={periode}\n                    navnPåForeldre={navnPåForeldre}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    periodeErNyEllerEndret={periodeErNyEllerEndret}\n                />\n            ),\n        };\n    };\n\n    const createOppsummeringslisteelementPropsForBegrunnelseForSenEndring = (\n        begrunnelse: TilleggsopplysningMedBeskrivelse\n    ): OppsummeringslisteelementProps => {\n        return {\n            venstrestiltTekst: begrunnelse.beskrivelse,\n            høyrestiltTekst: '',\n            content: (\n                <>\n                    <Feltoppsummering feltnavn={begrunnelse.ekstraInformasjon || ''} verdi={begrunnelse.tekst} />\n                </>\n            ),\n        };\n    };\n\n    const createOppsummeringslisteelementProps = (periode: Periode) => {\n        const periodeErNyEllerEndret = eksisterendeUttaksplan\n            ? finnesPeriodeIOpprinneligPlan(periode, eksisterendeUttaksplan) === false\n            : true;\n        switch (periode.type) {\n            case Periodetype.Uttak:\n                return createOppsummeringslisteelementPropsForUttaksperiode(periode, periodeErNyEllerEndret);\n            case Periodetype.Utsettelse:\n                return createOppsummeringslisteelementPropsForUtsettelsesperiode(periode, periodeErNyEllerEndret);\n            case Periodetype.Overføring:\n                return createOppsummeringslisteelementPropsForOverføringsperiode(periode, periodeErNyEllerEndret);\n            case Periodetype.Opphold:\n                return createOppsummeringslisteelementPropsForOppholdsperiode(periode);\n            default:\n                return null;\n        }\n    };\n\n    const oppsummeringslisteData = (): OppsummeringslisteelementProps[] => {\n        const periodeliste = perioder\n            .map((periode) => createOppsummeringslisteelementProps(periode))\n            .filter((v) => v !== null) as OppsummeringslisteelementProps[];\n        if (begrunnelseForSenEndring) {\n            const begrunnelse = beskrivTilleggsopplysning(begrunnelseForSenEndring);\n            const begrunnelseForSenEndringList =\n                createOppsummeringslisteelementPropsForBegrunnelseForSenEndring(begrunnelse);\n            return periodeliste.concat(begrunnelseForSenEndringList);\n        }\n\n        return periodeliste;\n    };\n\n    return <Oppsummeringsliste data={oppsummeringslisteData()} />;\n};\n\nexport default UttaksplanOppsummeringsliste;\n","import { intlUtils } from '@navikt/fp-common';\nimport { Dekningsgrad } from 'app/types/Dekningsgrad';\n\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport UttaksplanOppsummeringsliste from './UttaksplanOppsummeringsliste';\nimport { Periode } from 'uttaksplan/types/Periode';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport AnnenForelder from 'app/context/types/AnnenForelder';\nimport { Tilleggsopplysning } from 'app/context/types/Tilleggsopplysninger';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { BodyShort } from '@navikt/ds-react';\n\ninterface Props {\n    perioder: Periode[];\n    navnPåForeldre: NavnPåForeldre;\n    erFarEllerMedmor: boolean;\n    registrerteArbeidsforhold: Arbeidsforhold[];\n    dekningsgrad: Dekningsgrad;\n    antallUkerUttaksplan: number;\n    annenForelder: AnnenForelder;\n    familiehendelsesdato: Date;\n    termindato: Date | undefined;\n    situasjon: Situasjon;\n    erAleneOmOmsorg: boolean;\n    antallBarn: number;\n    ønskerJustertUttakVedFødsel: boolean | undefined;\n    begrunnelseForSenEndring?: Tilleggsopplysning;\n    eksisterendeUttaksplan?: Periode[];\n}\n\nconst UttaksplanOppsummering: React.FunctionComponent<Props> = ({\n    dekningsgrad,\n    antallUkerUttaksplan,\n    ønskerJustertUttakVedFødsel,\n    antallBarn,\n    ...rest\n}) => {\n    const intl = useIntl();\n\n    const dekningsgradTekst =\n        dekningsgrad === Dekningsgrad.HUNDRE_PROSENT\n            ? intlUtils(intl, 'oppsummering.uttak.dekningsgrad.verdi100', { antallUker: antallUkerUttaksplan })\n            : intlUtils(intl, 'oppsummering.uttak.dekningsgrad.verdi80', { antallUker: antallUkerUttaksplan });\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.uttak.dekningsgrad.label')}>\n                <BodyShort>{dekningsgradTekst}</BodyShort>\n            </OppsummeringsPunkt>\n            <UttaksplanOppsummeringsliste\n                ønskerJustertUttakVedFødsel={ønskerJustertUttakVedFødsel}\n                {...rest}\n            ></UttaksplanOppsummeringsliste>\n            {ønskerJustertUttakVedFødsel !== undefined && (\n                <OppsummeringsPunkt\n                    title={intlUtils(intl, 'oppsummering.uttak.ønskerAutomatiskJustering.label', {\n                        antallBarn,\n                    })}\n                >\n                    <BodyShort>\n                        <FormattedMessage id={ønskerJustertUttakVedFødsel ? 'ja' : 'nei'} />\n                    </BodyShort>\n                </OppsummeringsPunkt>\n            )}\n        </>\n    );\n};\n\nexport default UttaksplanOppsummering;\n","import { useEffect, useRef } from 'react';\n\nconst useAbortSignal = () => {\n    const controller = useRef<AbortController>(new AbortController());\n\n    useEffect(() => {\n        return () => {\n            controller.current.abort();\n        };\n    }, []);\n\n    return controller.current.signal;\n};\n\nexport default useAbortSignal;\n","import { bemUtils, Block, intlUtils, Step, StepButtonWrapper } from '@navikt/fp-common';\nimport { useEffect, useMemo, useState } from 'react';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport useAvbrytSøknad from 'app/utils/hooks/useAvbrytSøknad';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport stepConfig, { getPreviousStepHref, getPreviousStepHrefEndringssøknad } from '../stepsConfig';\nimport AnnenForelderOppsummering from './components/annen-forelder-oppsummering/AnnenForelderOppsummering';\nimport BarnOppsummering from './components/barn-oppsummering/BarnOppsummering';\nimport OppsummeringsPanel from './components/OppsummeringsPanel';\nimport Personalia from './components/Personalia';\nimport UtenlandsoppholdOppsummering from './components/utenlandsopphold-oppsummering/UtenlandsoppholdOppsummering';\nimport {\n    getInitialOppsummeringValues,\n    OppsummeringFormComponents,\n    OppsummeringFormData,\n    OppsummeringFormField,\n} from './oppsummeringFormConfig';\nimport { validateHarGodkjentOppsummering } from './validation/oppsummeringValidation';\nimport ArbeidsforholdOgAndreInntekterOppsummering from './components/andre-inntekter-oppsummering/ArbeidsforholdOgAndreInntekterOppsummering';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport Api from 'app/api/api';\nimport actionCreator from 'app/context/action/actionCreator';\nimport {\n    FEIL_VED_INNSENDING,\n    FOR_MANGE_VEDLEGG_ERROR,\n    getErrorCallId,\n    getSøknadsdataForInnsending,\n    UKJENT_UUID,\n} from 'app/api/apiUtils';\nimport { Link, useNavigate } from 'react-router-dom';\n\nimport SøknadRoutes from 'app/routes/routes';\nimport UttaksplanOppsummering from './components/uttaksplan-oppsummering/UttaksplanOppsummering';\nimport { getErSøkerFarEllerMedmor, getFarMedmorErAleneOmOmsorg, getNavnPåForeldre } from 'app/utils/personUtils';\nimport { beskrivTilleggsopplysning } from 'app/utils/tilleggsopplysningerUtils';\nimport { getFamiliehendelsedato, getTermindato } from 'app/utils/barnUtils';\nimport { ISOStringToDate } from 'app/utils/dateUtils';\nimport { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport { redirectToLogin } from 'app/utils/redirectToLogin';\nimport useFortsettSøknadSenere from 'app/utils/hooks/useFortsettSøknadSenere';\nimport { sendErrorMessageToSentry } from '../../api/apiUtils';\nimport useSaveLoadedRoute from 'app/utils/hooks/useSaveLoadedRoute';\nimport { Button } from '@navikt/ds-react';\nimport useAbortSignal from 'app/utils/hooks/useAbortSignal';\nimport { PaperplaneIcon } from '@navikt/aksel-icons';\n\nimport './oppsummering.less';\n\nconst Oppsummering = () => {\n    const intl = useIntl();\n    const { dispatch, state } = useForeldrepengesøknadContext();\n    const navigate = useNavigate();\n    const { kvittering, eksisterendeSak } = state;\n    const bem = bemUtils('oppsummering');\n\n    const [submitError, setSubmitError] = useState<any>(undefined);\n    const [formSubmitted, setFormSubmitted] = useState(false);\n    const [isSendingSøknad, setIsSendingSøknad] = useState(false);\n    const {\n        barn,\n        annenForelder,\n        søker,\n        informasjonOmUtenlandsopphold,\n        søkersituasjon,\n        dekningsgrad,\n        uttaksplan,\n        tilleggsopplysninger,\n        erEndringssøknad,\n    } = useSøknad();\n    const abortSignal = useAbortSignal();\n\n    const onFortsettSøknadSenere = useFortsettSøknadSenere();\n    const søkerinfo = useSøkerinfo();\n    const { person, arbeidsforhold } = søkerinfo;\n    const { erAleneOmOmsorg } = søker;\n    const søknad = useSøknad();\n    const onAvbrytSøknad = useAvbrytSøknad();\n    const søkerErFarEllerMedmor = getErSøkerFarEllerMedmor(søkersituasjon.rolle);\n    const navnPåForeldre = getNavnPåForeldre(person, annenForelder, søkerErFarEllerMedmor, intl);\n    const antallUkerUttaksplan = state.antallUkerIUttaksplan;\n    const begrunnelseForSenEndring = tilleggsopplysninger.begrunnelseForSenEndring\n        ? beskrivTilleggsopplysning(tilleggsopplysninger.begrunnelseForSenEndring)\n        : undefined;\n    const farMedmorErAleneOmOmsorg = getFarMedmorErAleneOmOmsorg(søkerErFarEllerMedmor, erAleneOmOmsorg, annenForelder);\n    const familiehendelsesdato = ISOStringToDate(getFamiliehendelsedato(søknad.barn));\n    const termindato = getTermindato(søknad.barn);\n    const erEndringssøknadOgAnnenForelderHarRett =\n        erEndringssøknad && isAnnenForelderOppgitt(annenForelder) && annenForelder.harRettPåForeldrepengerINorge;\n    const erklæringOmAnnenForelderInformert = erEndringssøknadOgAnnenForelderHarRett\n        ? intlUtils(intl, 'oppsummering.harGodkjentOppsummering.endringssøknadMedAnnenForelder', {\n              navnAnnenForelder: annenForelder.fornavn,\n          })\n        : '';\n    const egenerklæringTekst = intlUtils(intl, 'oppsummering.harGodkjentOppsummering').concat(\n        erklæringOmAnnenForelderInformert\n    );\n    const cleanedSøknad = useMemo(\n        () =>\n            getSøknadsdataForInnsending(\n                søknad,\n                state.perioderSomSkalSendesInn,\n                familiehendelsesdato!,\n                state.endringstidspunkt\n            ),\n        [søknad, state.perioderSomSkalSendesInn, familiehendelsesdato, state.endringstidspunkt]\n    );\n    useSaveLoadedRoute(SøknadRoutes.OPPSUMMERING);\n\n    useEffect(() => {\n        if (formSubmitted && !isSendingSøknad) {\n            setIsSendingSøknad(true);\n            if (cleanedSøknad.uttaksplan.length === 0 && cleanedSøknad.erEndringssøknad) {\n                throw new Error('Søknaden din inneholder ingen nye perioder.');\n            }\n            Api.sendSøknad(cleanedSøknad, søkerinfo.person.fnr, abortSignal)\n                .then((response) => {\n                    dispatch(actionCreator.setKvittering(response.data));\n                })\n                .catch((error) => {\n                    if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n                        redirectToLogin();\n                    } else {\n                        setSubmitError(error);\n                    }\n                });\n        }\n    }, [dispatch, søkerinfo.person.fnr, formSubmitted, cleanedSøknad, isSendingSøknad]);\n\n    useEffect(() => {\n        if (kvittering !== undefined) {\n            setFormSubmitted(false);\n            navigate(SøknadRoutes.SØKNAD_SENDT);\n        }\n    }, [kvittering, navigate]);\n\n    useEffect(() => {\n        if (submitError !== undefined) {\n            sendErrorMessageToSentry(submitError);\n            if (\n                submitError.response &&\n                submitError.response.status === 400 &&\n                submitError.response.data &&\n                submitError.response.data.messages &&\n                submitError.response.data.messages.includes(\n                    'Vedleggslisten kan ikke inneholde flere enn 40 opplastede vedlegg'\n                )\n            ) {\n                throw new Error(FOR_MANGE_VEDLEGG_ERROR);\n            }\n            sendErrorMessageToSentry(submitError);\n            const submitErrorCallId = getErrorCallId(submitError);\n            const callIdForBruker =\n                submitErrorCallId !== UKJENT_UUID ? submitErrorCallId.slice(0, 8) : submitErrorCallId;\n            throw new Error(FEIL_VED_INNSENDING + callIdForBruker);\n        }\n    }, [submitError]);\n\n    const handleSubmit = (values: Partial<OppsummeringFormData>) => {\n        dispatch(actionCreator.setGodkjentOppsummering(values.harGodkjentOppsummering!));\n        setFormSubmitted(true);\n    };\n\n    const submitKnappTekst = formSubmitted\n        ? intlUtils(intl, 'oppsummering.senderInnSøknad')\n        : intlUtils(intl, 'oppsummering.sendInnSøknad');\n\n    return (\n        <OppsummeringFormComponents.FormikWrapper\n            initialValues={getInitialOppsummeringValues()}\n            onSubmit={handleSubmit}\n            renderForm={() => {\n                return (\n                    <OppsummeringFormComponents.Form includeButtons={false}>\n                        <Step\n                            bannerTitle={intlUtils(intl, 'søknad.pageheading')}\n                            activeStepId=\"oppsummering\"\n                            pageTitle={intlUtils(intl, 'søknad.oppsummering')}\n                            onCancel={onAvbrytSøknad}\n                            onContinueLater={onFortsettSøknadSenere}\n                            steps={stepConfig(intl, erEndringssøknad)}\n                        >\n                            <Block padBottom=\"l\">\n                                <div className={bem.block}>\n                                    <OppsummeringsPanel title=\"Deg\">\n                                        <Personalia søkerinfo={søkerinfo} />\n                                    </OppsummeringsPanel>\n                                    {!erEndringssøknad && (\n                                        <OppsummeringsPanel title=\"Barnet\">\n                                            <BarnOppsummering\n                                                barn={barn}\n                                                familiehendelsesdato={familiehendelsesdato!}\n                                            />\n                                        </OppsummeringsPanel>\n                                    )}\n                                    {!erEndringssøknad && (\n                                        <OppsummeringsPanel title=\"Den andre forelderen\">\n                                            <AnnenForelderOppsummering\n                                                annenForelder={annenForelder}\n                                                søker={søker}\n                                                søkerrolle={søkersituasjon.rolle}\n                                                barn={barn}\n                                                farMedmorErAleneOmOmsorg={farMedmorErAleneOmOmsorg}\n                                            />\n                                        </OppsummeringsPanel>\n                                    )}\n                                    {!erEndringssøknad && (\n                                        <OppsummeringsPanel title=\"Utenlandsopphold\">\n                                            <UtenlandsoppholdOppsummering\n                                                informasjonOmUtenlandsopphold={informasjonOmUtenlandsopphold}\n                                                barn={barn}\n                                            />\n                                        </OppsummeringsPanel>\n                                    )}\n                                    {!erEndringssøknad && (\n                                        <OppsummeringsPanel title=\"Arbeidsforhold og andre inntektskilder\">\n                                            <ArbeidsforholdOgAndreInntekterOppsummering />\n                                        </OppsummeringsPanel>\n                                    )}\n                                    <OppsummeringsPanel title={intlUtils(intl, 'oppsummering.uttak')}>\n                                        <UttaksplanOppsummering\n                                            perioder={uttaksplan}\n                                            navnPåForeldre={navnPåForeldre}\n                                            annenForelder={annenForelder}\n                                            erFarEllerMedmor={søkerErFarEllerMedmor}\n                                            registrerteArbeidsforhold={arbeidsforhold}\n                                            dekningsgrad={dekningsgrad}\n                                            antallUkerUttaksplan={antallUkerUttaksplan}\n                                            begrunnelseForSenEndring={begrunnelseForSenEndring}\n                                            //begrunnelseForSenEndringVedlegg={søknad.vedleggForSenEndring}\n                                            eksisterendeUttaksplan={\n                                                eksisterendeSak ? eksisterendeSak.uttaksplan : undefined\n                                            }\n                                            familiehendelsesdato={familiehendelsesdato!}\n                                            termindato={termindato}\n                                            situasjon={søkersituasjon.situasjon}\n                                            erAleneOmOmsorg={erAleneOmOmsorg}\n                                            antallBarn={søknad.barn.antallBarn}\n                                            ønskerJustertUttakVedFødsel={søknad.ønskerJustertUttakVedFødsel}\n                                        />\n                                    </OppsummeringsPanel>\n                                </div>\n                            </Block>\n                            <Block padBottom=\"l\">\n                                <OppsummeringFormComponents.ConfirmationCheckbox\n                                    name={OppsummeringFormField.harGodkjentOppsummering}\n                                    label={egenerklæringTekst}\n                                    validate={validateHarGodkjentOppsummering(intl)}\n                                />\n                            </Block>\n                            <Block margin=\"l\" padBottom=\"l\">\n                                <StepButtonWrapper lastStep={true}>\n                                    <Button\n                                        variant=\"secondary\"\n                                        as={Link}\n                                        to={\n                                            søknad.erEndringssøknad\n                                                ? getPreviousStepHrefEndringssøknad('oppsummering')\n                                                : getPreviousStepHref('oppsummering')\n                                        }\n                                    >\n                                        <FormattedMessage id=\"backlink.label\" />\n                                    </Button>\n                                    <Button\n                                        icon={<PaperplaneIcon />}\n                                        iconPosition=\"right\"\n                                        type=\"submit\"\n                                        disabled={formSubmitted}\n                                        loading={formSubmitted}\n                                    >\n                                        {submitKnappTekst}\n                                    </Button>\n                                </StepButtonWrapper>\n                            </Block>\n                        </Step>\n                    </OppsummeringFormComponents.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default Oppsummering;\n"],"names":["__rest","this","s","e","t","p","i","SvgPaperplane","forwardRef","_a","ref","title","_titleId","props","titleId","useId","React.createElement","PaperplaneIcon","OppsummeringsPunkt","visible","children","jsxs","Block","jsx","Label","hasListOfChildren","InnholdMedLedetekst","ledetekst","className","child","BodyShort","guid","KompleksFeltoppsummering","OppsummeringAvDokumentasjon","vedlegg","intl","useIntl","renderListOfAttachmentPreviewLinks","a","isAttachmentWithError","url","id","filename","Link","intlUtils","Tag","AnnenForelderOppsummering","annenForelder","søker","søkerrolle","barn","farMedmorErAleneOmOmsorg","erFarEllerMedmor","isFarEllerMedmor","dokumentasjonAvAleneomsorg","Fragment","isAnnenForelderIkkeOppgitt","isAnnenForelderOppgitt","FormattedMessage","BarnAdoptertIUtlandetDetaljer","familiehendelsesdato","isAdoptertStebarn","førsteOktober2021ReglerGjelder","hasValue","formatDate","getAntallBarnTekst","antallBarn","getTerminEllerFødselTittel","type","BarnType","getTerminEllerFødselsdato","isUfødtBarn","BarnOppsummering","isAdoptertAnnetBarn","OppsummeringsPanel","bem","bemUtils","Accordion","Personalia","søkerinfo","UtenlandsoppholdOppsummeringListe","utenlandsopphold","tidligereOpphold","opphold","countries","getErINorgePåFamiliehendelsedato","familiehendelsedato","senereOpphold","erINorge","tidOpphold","doesTidsperiodeContainDate","senOpphold","erAdoptertBarn","UtenlandsoppholdOppsummering","informasjonOmUtenlandsopphold","getFamiliehendelsedato","erINorgePåFamiliehendelsedato","UtenlandsoppholdListe","OppsummeringFormField","initialOppsummeringValues","getInitialOppsummeringValues","OppsummeringFormComponents","getTypedFormComponents","validateHarGodkjentOppsummering","value","AnnenInntektDetaljer","annenInntekt","AnnenInntektType","jobbIUtlandetInntekt","countries.getName","InntekterTabell","list","l","AndreInntekterOppsummering","harHattAnnenInntektSiste10Mnd","andreInntekterSiste10Mnd","useSøknad","ISOStringToDate","FrilansOppsummering","frilansInformasjon","harJobbetSomFrilansSiste10Mnd","oppstart","jobberFremdelesSomFrilans","driverFosterhjem","harJobbetForNærVennEllerFamilieSiste10Mnd","oppdragForNæreVennerEllerFamilieSiste10Mnd","navnPåArbeidsgiver","tidsperiode","pågående","Næringsdetaljer","næring","næringstyper","organisasjonsnummer","næringsinntekt","registrertINorge","registrertILand","harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene","hattVarigEndringAvNæringsinntektSiste4Kalenderår","endringAvNæringsinntektInformasjon","harRegnskapsfører","regnskapsfører","SelvstendigNæringsdrivendeOppsummering","selvstendigNæringsdrivendeInformasjon","harJobbetSomSelvstendigNæringsdrivendeSiste10Mnd","ArbeidsforholdOgAndreInntekterOppsummering","arbeidsforhold","useSøkerinfo","søkersituasjon","erAdopsjon","aktiveArbeidsForhold","getAktiveArbeidsforhold","harArbeidsforhold","HarIkkeArbeidsforhold","HarArbeidsforhold","TIL_SAKSBEHANDLER","beskrivTilleggsopplysning","tilleggsopplysning","tekst","ekstraInformasjon","beskrivelseAvOpplysning","ekstraMessageId","ekstraInfoTilSaksbehandling","cleanupInvisibleCharsFromTilleggsopplysninger","tilleggsopplysninger","replaceInvisibleCharsWithSpace","Feltoppsummering","feltnavn","verdi","List","data","renderElement","dataObject","Oppsummeringsliste","kompakt","elementProps","createElement","Oppsummeringslisteelement","venstrestiltTekst","høyrestiltTekst","content","classNames","createMissingAttachment","index","skjemanummer","periodeId","isAttachmentMissing","attachments","shouldPeriodeHaveAttachment","periode","søkerErFarEllerMedmor","Periodetype","dokumentasjonBehøvesForOverføringsperiode","dokumentasjonBehøvesForUtsettelsesperiode","aktivitetskravMorUtil","dokumentasjonBehøvesForUttaksperiode","hasPeriodeMissingAttachment","søknadsinfo","InnsendingsType","findMissingAttachmentsForPerioder","perioder","missingAttachments","isUtsettelsesperiode","isUttaksperiode","missingAttachmentForAktivitetskrav","getMorsAktivitetSkjemanummer","AttachmentType","UtsettelseÅrsakType","Skjemanummer","isOverføringsperiode","OverføringÅrsakType","StønadskontoType","MorsAktivitet","årsak","harMorAktivitetskrav","erÅrsakSykdomEllerInstitusjonsopphold","søkerErMor","ønskerFlerBarnsdager","erSamtidigUttak","morErForSyk","konto","aktivitetskravMorSkalBesvares","getValgtArbeidsgiverNavn","orgnr","valgtArbeidsgiver","arbeidsgiverId","arbeidsgiverIdType","getArbeidsformTekst","arbeidsformer","orgnumre","arbeidstakerTekster","arbeidsformerTekster","arbeidsgiverNavn","arbeidsform","Arbeidsform","getÅrsakTekst","messageValues","intlKeyPrefix","getNavnPåAnnenForelder","navnPåForeldre","Overføringsperiodedetaljer","periodeErNyEllerEndret","navnAnnenForelder","getMorsAktivitetTekst","aktivitet","assertUnreachable","MorsAktivitetDetaljer","morsAktivitet","dokumentasjonAvMorsAktivitet","visOppsummeringAvDokumentasjon","Uttaksperiodedetaljer","registrerteArbeidsforhold","morsAktivitetIPerioden","ønskerSamtidigUttak","gradert","stillingsprosent","ønskerFlerbarnsdager","arbeidsformTekst","erDeltUttakINorge","Utsettelsesperiodedetaljer","bekrefterArbeidIPerioden","bekreftErIArbeidSvar","currentVedlegg","UttaksplanOppsummeringsliste","begrunnelseForSenEndring","eksisterendeUttaksplan","termindato","situasjon","erAleneOmOmsorg","ønskerJustertUttakVedFødsel","getStønadskontoNavnFromKonto","getStønadskontoNavn","getUttaksperiodeNavn","tittel","appendPeriodeNavnHvisUttakRundtFødselFarMedmor","formatTidsperiode","formatertTidsperiode","uttaksperiodeKanJusteresVedFødsel","createOppsummeringslisteelementPropsForUttaksperiode","createOppsummeringslisteelementPropsForOppholdsperiode","getPeriodeTittel","createOppsummeringslisteelementPropsForUtsettelsesperiode","createOppsummeringslisteelementPropsForOverføringsperiode","kontonavn","createOppsummeringslisteelementPropsForBegrunnelseForSenEndring","begrunnelse","createOppsummeringslisteelementProps","finnesPeriodeIOpprinneligPlan","periodeliste","v","begrunnelseForSenEndringList","UttaksplanOppsummering","dekningsgrad","antallUkerUttaksplan","rest","dekningsgradTekst","Dekningsgrad","useAbortSignal","controller","useRef","useEffect","Oppsummering","dispatch","state","useForeldrepengesøknadContext","navigate","useNavigate","kvittering","eksisterendeSak","submitError","setSubmitError","useState","formSubmitted","setFormSubmitted","isSendingSøknad","setIsSendingSøknad","uttaksplan","erEndringssøknad","abortSignal","onFortsettSøknadSenere","useFortsettSøknadSenere","person","søknad","onAvbrytSøknad","useAvbrytSøknad","getErSøkerFarEllerMedmor","getNavnPåForeldre","getFarMedmorErAleneOmOmsorg","getTermindato","erklæringOmAnnenForelderInformert","egenerklæringTekst","cleanedSøknad","useMemo","getSøknadsdataForInnsending","useSaveLoadedRoute","SøknadRoutes","Api","response","actionCreator","error","redirectToLogin","sendErrorMessageToSentry","FOR_MANGE_VEDLEGG_ERROR","submitErrorCallId","getErrorCallId","callIdForBruker","UKJENT_UUID","FEIL_VED_INNSENDING","handleSubmit","values","submitKnappTekst","Step","stepConfig","StepButtonWrapper","Button","getPreviousStepHrefEndringssøknad","getPreviousStepHref","Oppsummering$1"],"mappings":"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","x_google_ignoreList":[0]}