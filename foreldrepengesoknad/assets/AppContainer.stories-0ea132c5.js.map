{"version":3,"file":"AppContainer.stories-0ea132c5.js","sources":["../../../../packages/fp-common/src/common/utils/localeUtils.ts","../../src/app/pages/ikkeMyndig/IkkeMyndig.tsx","../../src/uttaksplan/components/utsettelse-tidsperiode-spørsmål/UtsettelseTidsperiodeSpørsmål.tsx","../../src/uttaksplan/components/uttaks-forms/periode-utsettelse-form/periodeUtsettelseFormConfig.ts","../../src/uttaksplan/components/uttaks-forms/periode-utsettelse-form/periodeUtsettelseFormUtils.ts","../../src/uttaksplan/components/uttaks-forms/periode-utsettelse-form/periodeUtsettelseFormQuestionsConfig.ts","../../src/uttaksplan/components/uttaks-forms/spørsmål/utsettelse-årsak/UtsettelseÅrsakSpørsmål.tsx","../../src/uttaksplan/components/uttaks-forms/periode-utsettelse-form/PeriodeUtsettelseForm.tsx","../../src/uttaksplan/components/uttaks-forms/ny-periode/NyPeriode.tsx","../../src/uttaksplan/assets/ArbeidIkon.tsx","../../src/uttaksplan/assets/FerieIkon.tsx","../../src/uttaksplan/assets/SykdomIkon.tsx","../../src/uttaksplan/assets/TerminIkon.tsx","../../src/uttaksplan/assets/UttakIkon.tsx","../../src/uttaksplan/components/uttaksplan-ikon/UttaksplanIkon.tsx","../../src/uttaksplan/validering/veilederInfo/components/VeilederMelding.tsx","../../src/uttaksplan/validering/veilederInfo/VeilederMeldinger.tsx","../../src/uttaksplan/types/UttaksplanColor.ts","../../src/uttaksplan/utils/styleUtils.ts","../../src/uttaksplan/components/icon-box/IconBox.tsx","../../src/uttaksplan/components/stønadskonto-ikon/StønadskontoIkon.tsx","../../src/uttaksplan/components/utsettelse-ikon/UtsettelseIkon.tsx","../../src/uttaksplan/assets/UttaksplanAdvarselIkon.tsx","../../src/uttaksplan/components/periodeliste-item-header/PeriodelisteItemHeader.tsx","../../src/uttaksplan/components/perioder/PeriodeHull.tsx","../../src/uttaksplan/components/perioder/PeriodeInfo.tsx","../../src/uttaksplan/components/perioder/PeriodeUtenUttak.tsx","../../src/uttaksplan/components/uttaks-forms/periode-før-fødsel-form/periodeFørFødselFormConfig.ts","../../src/uttaksplan/components/uttaks-forms/periode-før-fødsel-form/periodeFørFødselFormQuestionsConfig.ts","../../src/uttaksplan/components/uttaks-forms/periode-før-fødsel-form/periodeFørFødselFormUtils.ts","../../src/uttaksplan/components/uttaks-forms/periode-før-fødsel-form/PeriodeFørFødselForm.tsx","../../src/uttaksplan/components/perioder/SlettbarAvslåttPeriode.tsx","../../src/uttaksplan/components/periodeliste-item/PeriodelisteItem.tsx","../../src/uttaksplan/assets/HjerteIkon.tsx","../../src/uttaksplan/components/familiehendelsedato-display/FamiliehendelsedatoDisplay.tsx","../../src/uttaksplan/components/periodeliste/Periodeliste.tsx","../../src/uttaksplan/components/planlegger/Planlegger.tsx","../../src/app/components/foreldrepar/ForelderIkon.tsx","../../src/uttaksplan/utils/uttaksPlanStatus.ts","../../src/uttaksplan/utils/brukteDagerUtils.ts","../../src/uttaksplan/utils/uttaksstatus.ts","../../src/uttaksplan/components/oversikt-kvoter/konto-status/Kontostatus.tsx","../../src/uttaksplan/components/oversikt-kvoter/tilesList/TilesList.tsx","../../src/uttaksplan/components/oversikt-kvoter/OversiktKvoter.tsx","../../src/uttaksplan/validering/tester/inneholderUttaksplanPerioderTest.ts","../../src/uttaksplan/validering/utils/uttakValideringUtils.ts","../../src/uttaksplan/validering/tester/harMorSøktUgyldigUttakFørsteSeksUkerTest.ts","../../src/uttaksplan/validering/tester/stønadskontoInneholderForMyeUttakKunSøkerTest.ts","../../src/uttaksplan/validering/tester/harFarMedmorSøktUgyldigUttakEllerUtsettelseFørsteSeksUkerTest.ts","../../src/uttaksplan/validering/tester/erUttaksplanBareOppholdTest.ts","../../src/uttaksplan/validering/tester/slutterUttaksplanMedOppholdTest.ts","../../src/uttaksplan/validering/tester/starterUttaksplanMedOppholdTest.ts","../../src/uttaksplan/validering/tester/erUttaksplanGraderingStørreEnnSamtidigUttakTest.ts","../../src/uttaksplan/validering/tester/erTilleggsopplysningerGyldigTest.ts","../../src/uttaksplan/validering/tester/harTilleggsopplysningerGyldigeCharsTest.ts","../../src/uttaksplan/validering/tester/harUttaksplanForMangeFlerbarnsdagerTest.ts","../../src/uttaksplan/validering/tester/inneholderUttaksplanDatoSomIkkeErUttaksdagTest.ts","../../src/uttaksplan/validering/tester/harPerioderManglendeVedleggTest.ts","../../src/uttaksplan/validering/tester/inneholderSenUtsettelsePgaFerieTest.ts","../../src/uttaksplan/validering/tester/inneholderTapteDagerTest.ts","../../src/uttaksplan/validering/tester/inneholderBareUtsettelserTest.ts","../../src/uttaksplan/validering/tester/inneholderSenUtsettelsePgaArbeidTest.ts","../../src/uttaksplan/validering/tester/overskriverEndringerAnnenPartsPerioder.ts","../../src/uttaksplan/validering/tester/overlapperPeriodeAndrePerioderTest.ts","../../src/uttaksplan/validering/utils/types/regelTypes.ts","../../src/uttaksplan/validering/utils/regelUtils.ts","../../src/uttaksplan/validering/utils/stillingsprosentValideringUtils.ts","../../src/uttaksplan/validering/utils/periodeValideringUtils.ts","../../src/uttaksplan/validering/tester/periodevalideringstester/harUttaksperiodeGyldigGradering.ts","../../src/uttaksplan/validering/utils/validatorUtils.ts","../../src/uttaksplan/validering/utils/tidsperiodeValideringUtils.ts","../../src/uttaksplan/validering/tester/periodevalideringstester/harPeriodeGyldigTidsperiode.ts","../../src/uttaksplan/validering/tester/periodevalideringstester/harUttaksperiodeStønadskonto.ts","../../src/uttaksplan/validering/tester/periodevalideringstester/erSamtidigUttakGyldig.ts","../../src/uttaksplan/validering/tester/periodevalideringstester/erUtsettelseEtterFamiliehendelsesdato.ts","../../src/uttaksplan/validering/tester/periodevalideringstester/starterUttaksperiodeRundtFødselEtter2UkerFørFødsel.ts","../../src/uttaksplan/validering/tester/periodevalideringstester/slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel.ts","../../src/uttaksplan/validering/tester/periodevalideringstester/periodeDeFørsteSeksUkeneHarUlovligUttakBFHR.ts","../../src/uttaksplan/validering/tester/periodevalideringstester/harBekreftet100ProsentArbeidIUtsettelsePgaArbeid.ts","../../src/uttaksplan/validering/tester/periodevalideringstester/forSenUttakVedPåfølgendeBarn.ts","../../src/uttaksplan/validering/tester/periodevalideringstester/index.ts","../../src/uttaksplan/validering/tester/harSøktOmFerieUtenArbeidsforholdTest.ts","../../src/uttaksplan/validering/tester/inneholderForMyeFerie.ts","../../src/uttaksplan/validering/tester/kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme.ts","../../src/uttaksplan/validering/tester/erUttaksmengdeForFarMedmorForHøyTest.ts","../../src/uttaksplan/validering/tester/burdeKanskjeSøkeGraderingTest.tsx","../../src/uttaksplan/validering/tester/ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindatoTest.ts","../../src/uttaksplan/validering/tester/inneholderPerioderUtenAktivitetskrav.ts","../../src/uttaksplan/validering/tester/inneholderUtsettelserUtenÅrsak.ts","../../src/uttaksplan/validering/tester/farMedmorHarSøktUgyldigAntallDagerUttakRundtFødselTest.ts","../../src/uttaksplan/validering/tester/harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUkerTest.ts","../../src/uttaksplan/validering/tester/farMedMorHarRettPåUttakRundtFødselTest.ts","../../src/app/utils/minsterettUtils.ts","../../src/uttaksplan/validering/tester/farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest.tsx","../../src/uttaksplan/validering/tester/inneholderUttaksperioderMedUbesvartGradering.ts","../../src/uttaksplan/validering/tester/inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest.ts","../../src/uttaksplan/validering/tester/farMedmorHarRettPåFlerbarnsdagerTest.tsx","../../src/uttaksplan/validering/tester/overstigerMinsterettVedToTette.ts","../../src/uttaksplan/validering/tester/harPerioderEtterFørsteStønadsdagNesteBarnDerToTette.ts","../../src/uttaksplan/validering/index.ts","../../src/uttaksplan/validering/validerUttaksplan.ts","../../src/uttaksplan/validering/veilederInfo/VeilederInfo.tsx","../../src/app/intl/utils.tsx","../../src/uttaksplan/validering/veilederInfo/utils.ts","../../../../node_modules/.pnpm/lodash.throttle@4.1.1/node_modules/lodash.throttle/index.js","../../src/uttaksplan/components/oppgi-tilleggsopplysninger/OppgiTilleggsopplysninger.tsx","../../src/uttaksplan/components/slett-uttaksplan-modal/SlettUttaksplanModal.tsx","../../src/uttaksplan/builder/slettPeriode.ts","../../src/uttaksplan/builder/oppdaterPeriode.ts","../../src/uttaksplan/builder/Uttaksplanbuilder.ts","../../src/app/steps/uttaksplan/UttaksplanFormConfig.ts","../../src/app/steps/uttaksplan/UttaksplanFormUtils.ts","../../src/uttaksplan/components/automatisk-justering-form/AutomatiskJusteringForm.tsx","../../src/uttaksplan/components/reset-uttaksplan-modal/ResetUttaksplanModal.tsx","../../src/uttaksplan/Uttaksplan.tsx","../../src/app/utils/hooks/useDebounce.ts","../../src/app/steps/uttaksplan/components/vil-du-gå-tilbake-modal/VilDuGåTilbakeModal.tsx","../../src/uttaksplan/components/automatisk-justering-form/automatiskJusteringUtils.ts","../../src/app/steps/uttaksplan/uttaksplanQuestionConfig.ts","../../src/app/steps/uttaksplan/UttaksplanStep.tsx","../../src/app/routes/isAvailable.ts","../../src/app/routes/ForeldrepengesøknadRoutes.tsx","../../src/app/utils/mellomlagringUtils.ts","../../src/app/Foreldrepengesøknad.tsx","../../src/app/errorBoundary/ErrorBoundary.tsx","../../src/app/utils/browserUtils.ts","../../src/app/AppContainer.tsx"],"sourcesContent":["import { Locale } from '../types/Locale';\n\nconst LocaleSessionKey = 'selectedLocale';\n\nexport const getLocaleFromSessionStorage = (): Locale => {\n    return (sessionStorage.getItem(LocaleSessionKey) as Locale) || 'nb';\n};\n\nexport const setLocaleInSessionStorage = (locale: Locale): void => {\n    sessionStorage.setItem(LocaleSessionKey, locale);\n};\n\nexport const getNynorskLocale = () => {\n    if (Intl.NumberFormat.supportedLocalesOf('no-NN').length > 0) {\n        return 'no-NN';\n    }\n    return 'nn';\n};\n\nexport const getBokmålLocale = () => {\n    if (Intl.NumberFormat.supportedLocalesOf('no-NB').length > 0) {\n        return 'no-NB';\n    }\n    return 'nb';\n};\n\nexport const getLocaleForApi = (locale: string): Locale => {\n    switch (locale) {\n        case 'nn':\n        case 'no-NN':\n            return 'nn';\n        default:\n            return 'nb';\n    }\n};\n","import { intlUtils } from '@navikt/fp-common';\nimport links from 'app/links/links';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport Feilside from '../feilside/Feilside';\n\ninterface Props {\n    fornavn: string;\n}\n\nconst IkkeMyndig: FunctionComponent<Props> = ({ fornavn }) => {\n    const intl = useIntl();\n\n    return (\n        <Feilside\n            dokumenttittel=\"NAV Foreldrepengesøknad\"\n            ingress={intlUtils(intl, 'velkommen.ingress')}\n            tittel={intlUtils(intl, 'velkommen.tittel')}\n            illustrasjon={{\n                tittel: intlUtils(intl, 'velkommen.ikkeMyndig.tittel', {\n                    navn: fornavn.toLowerCase(),\n                }),\n                tekst: intlUtils(intl, 'velkommen.ikkeMyndig.ingress'),\n                lenke: {\n                    tekst: intlUtils(intl, 'velkommen.ikkeMyndig.boblelenketekst'),\n                    url: links.papirsøknad,\n                },\n            }}\n            skalKunneGåTilbakeTilSøknad={false}\n        />\n    );\n};\n\nexport default IkkeMyndig;\n","import { intlUtils, Tidsperiode, TidsperiodeDate } from '@navikt/fp-common';\nimport { getTidsperiode, Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { getUkerOgDagerFromDager } from 'app/utils/dateUtils';\nimport UkerDagerTeller from './../uker-dager-teller/UkerDagerTeller';\nimport dayjs from 'dayjs';\n\nimport { useIntl } from 'react-intl';\nimport { isForeldrepengerFørFødselUttaksperiode, Periode, Utsettelsesperiode } from 'uttaksplan/types/Periode';\nimport TidsperiodeForm, { TidsperiodeFormValues } from '../uttaks-forms/tidsperiode-form/TidsperiodeForm';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { Modal } from '@navikt/ds-react';\n\ninterface Props {\n    periode: Periode;\n    tidsperiode: TidsperiodeDate;\n    familiehendelsesdato: Date;\n    ugyldigeTidsperioder: Tidsperiode[] | undefined;\n    utsettelserIPlan: Utsettelsesperiode[];\n    visible: boolean;\n    erFarEllerMedmor: boolean;\n    morHarRett: boolean;\n    situasjon: Situasjon;\n    erFarMedmorOgHarAleneomsorg: boolean;\n    onAvbryt: () => void;\n    onBekreft: (tidsperiode: TidsperiodeFormValues) => void;\n    changeTidsperiode: (tidsperiode: Partial<TidsperiodeDate>) => void;\n}\n\nconst UtsettelseEndreTidsperiodeSpørsmål: React.FunctionComponent<Props> = ({\n    onBekreft,\n    onAvbryt,\n    changeTidsperiode,\n    visible,\n    periode,\n    tidsperiode,\n    familiehendelsesdato,\n    ugyldigeTidsperioder,\n    utsettelserIPlan,\n    erFarEllerMedmor,\n    morHarRett,\n    situasjon,\n    erFarMedmorOgHarAleneomsorg,\n}) => {\n    const intl = useIntl();\n    const erForeldrepengerFørFødsel = isForeldrepengerFørFødselUttaksperiode(periode);\n    const initialMonth = erForeldrepengerFørFødsel ? familiehendelsesdato : undefined;\n    const varighetIDager =\n        tidsperiode &&\n        tidsperiode.fom &&\n        tidsperiode.tom &&\n        dayjs(tidsperiode.fom).isSameOrBefore(tidsperiode.tom, 'day')\n            ? Tidsperioden({\n                  fom: tidsperiode.fom,\n                  tom: tidsperiode.tom,\n              }).getAntallUttaksdager()\n            : undefined;\n    const { uker, dager } = varighetIDager ? getUkerOgDagerFromDager(Math.abs(varighetIDager)) : { uker: 0, dager: 0 };\n    const handleOnSubmit = (values: TidsperiodeFormValues) => {\n        onBekreft(values);\n    };\n\n    const getDagValue = (uker: number, dager: number): number => {\n        if (dager >= 5) {\n            return 0;\n        }\n\n        if (uker === 0 && dager === 0) {\n            return 1;\n        }\n\n        return dager;\n    };\n\n    return (\n        <>\n            <Modal open={visible} closeButton={true} onClose={onAvbryt} aria-label=\"Endre tidsperiode\">\n                <Modal.Content>\n                    <TidsperiodeForm\n                        familiehendelsesdato={familiehendelsesdato}\n                        onBekreft={handleOnSubmit}\n                        periode={periode}\n                        tidsperiode={tidsperiode}\n                        ugyldigeTidsperioder={ugyldigeTidsperioder}\n                        utsettelserIPlan={utsettelserIPlan}\n                        initialMonth={initialMonth}\n                        erFarEllerMedmor={erFarEllerMedmor}\n                        morHarRett={morHarRett}\n                        situasjon={situasjon}\n                        erFarMedmorOgHarAleneomsorg={erFarMedmorOgHarAleneomsorg}\n                    />\n                </Modal.Content>\n            </Modal>\n            <UkerDagerTeller\n                ukeLegend={intlUtils(intl, 'uker.label')}\n                dagLegend={intlUtils(intl, 'dager.label')}\n                ukeStepper={{\n                    value: uker !== undefined ? uker : 0,\n                    min: 0,\n                    max: 100,\n                    onChange: (nyUker: number) => {\n                        const date = tidsperiode.fom;\n                        if (date) {\n                            changeTidsperiode({\n                                fom: date,\n                                tom: getTidsperiode(date, Math.min(nyUker, 200) * 5 + getDagValue(nyUker, dager)).tom,\n                            });\n                        }\n                    },\n                    increaseAriaLabel: 'Øk antall uker med en uke',\n                    decreaseAriaLabel: 'Mink antall uker med en uke',\n                }}\n                dagStepper={{\n                    value: getDagValue(uker, dager),\n                    min: uker === 0 ? 1 : 0,\n                    max: 5,\n                    onChange: (nyDager: number) => {\n                        const date = tidsperiode.fom;\n                        const ekstraUke = nyDager === 5 ? 1 : 0;\n\n                        if (date) {\n                            changeTidsperiode({\n                                fom: date,\n                                tom: getTidsperiode(date, (uker + ekstraUke) * 5 + getDagValue(uker, nyDager)).tom,\n                            });\n                        }\n                    },\n                    increaseAriaLabel: 'Øk antall dager med en dag',\n                    decreaseAriaLabel: 'Mink antall dager med en dag',\n                }}\n            />\n        </>\n    );\n};\n\nexport default UtsettelseEndreTidsperiodeSpørsmål;\n","import { getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\nimport { Attachment } from 'app/types/Attachment';\nimport { MorsAktivitet } from 'uttaksplan/types/MorsAktivitet';\nimport { Arbeidsform } from 'uttaksplan/types/Periode';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\n\nexport enum PeriodeUtsettelseFormField {\n    fom = 'fom',\n    tom = 'tom',\n    årsak = 'årsak',\n    vedlegg = 'vedlegg',\n    morsAktivitetIPeriodenDokumentasjon = 'morsAktivitetIPeriodenDokumentasjon',\n    morsAktivitetIPerioden = 'morsAktivitetIPerioden',\n    bekrefterArbeidIPerioden = 'bekrefterArbeidIPerioden',\n}\n\nexport type ArbeidUnderUtsettelse = Arbeidsform | string;\n\nexport interface PeriodeUtsettelseFormData {\n    [PeriodeUtsettelseFormField.fom]: Date | undefined;\n    [PeriodeUtsettelseFormField.tom]: Date | undefined;\n    [PeriodeUtsettelseFormField.årsak]: UtsettelseÅrsakType | '';\n    [PeriodeUtsettelseFormField.morsAktivitetIPerioden]: MorsAktivitet | '';\n    [PeriodeUtsettelseFormField.morsAktivitetIPeriodenDokumentasjon]: Attachment[];\n    [PeriodeUtsettelseFormField.vedlegg]: Attachment[];\n    [PeriodeUtsettelseFormField.bekrefterArbeidIPerioden]: boolean | undefined;\n}\n\nexport const PeriodeUtsettelseFormComponents = getTypedFormComponents<\n    PeriodeUtsettelseFormField,\n    PeriodeUtsettelseFormData\n>();\n","import { Attachment } from 'app/types/Attachment';\nimport { AttachmentType } from 'app/types/AttachmentType';\nimport { Forelder } from 'app/types/Forelder';\nimport { isUtsettelsePgaArbeid, isUtsettelsesperiode, Periode, Periodetype } from 'uttaksplan/types/Periode';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\nimport { PeriodeUtsettelseFormData, PeriodeUtsettelseFormField } from './periodeUtsettelseFormConfig';\n\nexport const initialValues: PeriodeUtsettelseFormData = {\n    [PeriodeUtsettelseFormField.fom]: undefined,\n    [PeriodeUtsettelseFormField.tom]: undefined,\n    [PeriodeUtsettelseFormField.årsak]: '',\n    [PeriodeUtsettelseFormField.morsAktivitetIPerioden]: '',\n    [PeriodeUtsettelseFormField.morsAktivitetIPeriodenDokumentasjon]: [],\n    [PeriodeUtsettelseFormField.vedlegg]: [],\n    [PeriodeUtsettelseFormField.bekrefterArbeidIPerioden]: undefined,\n};\n\nconst getFormStateFraVedlegg = (vedlegg: Attachment[], gjelderMorsAktivitet: boolean): Attachment[] => {\n    return gjelderMorsAktivitet\n        ? vedlegg.filter((v) => v.type === AttachmentType.MORS_AKTIVITET_DOKUMENTASJON)\n        : vedlegg.filter((v) => v.type !== AttachmentType.MORS_AKTIVITET_DOKUMENTASJON);\n};\n\nexport const getPeriodeUtsettelseFormInitialValues = (periode: Periode): PeriodeUtsettelseFormData => {\n    if (isUtsettelsesperiode(periode)) {\n        return {\n            ...initialValues,\n            fom: periode.tidsperiode.fom,\n            tom: periode.tidsperiode.tom,\n            årsak: periode.årsak,\n            morsAktivitetIPerioden: periode.morsAktivitetIPerioden ? periode.morsAktivitetIPerioden : '',\n            morsAktivitetIPeriodenDokumentasjon: getFormStateFraVedlegg(periode.vedlegg || [], true),\n            vedlegg: getFormStateFraVedlegg(periode.vedlegg || [], false),\n            bekrefterArbeidIPerioden: isUtsettelsePgaArbeid(periode) ? periode.bekrefterArbeidIPerioden : undefined,\n        };\n    }\n\n    return initialValues;\n};\n\nconst getVedleggFraFormState = (\n    morsAktivitetIPeriodenDokumentasjon: Attachment[],\n    vedlegg: Attachment[]\n): Attachment[] => {\n    return [...morsAktivitetIPeriodenDokumentasjon, ...vedlegg];\n};\n\nexport const mapPeriodeUtsettelseFormToPeriode = (\n    values: Partial<PeriodeUtsettelseFormData>,\n    id: string,\n    erFarEllerMedmor: boolean\n): Periode => {\n    return {\n        id,\n        type: Periodetype.Utsettelse,\n        årsak: values.årsak as UtsettelseÅrsakType,\n        morsAktivitetIPerioden: values.morsAktivitetIPerioden ? values.morsAktivitetIPerioden : undefined,\n        forelder: erFarEllerMedmor ? Forelder.farMedmor : Forelder.mor,\n        tidsperiode: {\n            fom: values.fom!,\n            tom: values.tom!,\n        },\n        vedlegg: getVedleggFraFormState(values.morsAktivitetIPeriodenDokumentasjon || [], values.vedlegg || []),\n        bekrefterArbeidIPerioden: values.bekrefterArbeidIPerioden,\n        erArbeidstaker: !!values.bekrefterArbeidIPerioden,\n    };\n};\n\nexport const cleanupPeriodeUtsettelseFormData = (values: PeriodeUtsettelseFormData): PeriodeUtsettelseFormData => {\n    if (values.årsak !== UtsettelseÅrsakType.Arbeid) {\n        return {\n            ...values,\n            bekrefterArbeidIPerioden: undefined,\n        };\n    }\n    return values;\n};\n","import { hasValue } from '@navikt/fp-common';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport { isValidTidsperiode } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { PeriodeUtsettelseFormData, PeriodeUtsettelseFormField } from './periodeUtsettelseFormConfig';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\n\nexport interface PeriodeUtsettelseFormConfigPayload {\n    values: PeriodeUtsettelseFormData;\n    erFarEllerMedmor: boolean;\n    erAleneOmOmsorg: boolean;\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean;\n}\n\nconst PeriodeUtsettelseFormConfig: QuestionConfig<PeriodeUtsettelseFormConfigPayload, PeriodeUtsettelseFormField> = {\n    [PeriodeUtsettelseFormField.fom]: {\n        isAnswered: ({ values }) => hasValue(values.fom),\n        isIncluded: () => true,\n    },\n    [PeriodeUtsettelseFormField.tom]: {\n        isAnswered: ({ values }) => hasValue(values.tom),\n        isIncluded: () => true,\n    },\n    [PeriodeUtsettelseFormField.årsak]: {\n        isAnswered: ({ values }) => hasValue(values.årsak),\n        isIncluded: () => true,\n        visibilityFilter: ({ values }) => isValidTidsperiode({ fom: values.fom, tom: values.tom }),\n    },\n    [PeriodeUtsettelseFormField.bekrefterArbeidIPerioden]: {\n        isAnswered: ({ values }) =>\n            values.årsak !== UtsettelseÅrsakType.Arbeid ||\n            (hasValue(values.bekrefterArbeidIPerioden) && values.bekrefterArbeidIPerioden !== undefined),\n        isIncluded: ({ values }) => hasValue(values.årsak) && values.årsak === UtsettelseÅrsakType.Arbeid,\n        visibilityFilter: ({ values }) => hasValue(values.årsak),\n    },\n    [PeriodeUtsettelseFormField.vedlegg]: {\n        isAnswered: () => true,\n        isIncluded: ({ values }) => hasValue(values.årsak),\n        visibilityFilter: ({ values }) => hasValue(values.årsak),\n    },\n    [PeriodeUtsettelseFormField.morsAktivitetIPerioden]: {\n        isAnswered: ({ values, søkerErFarEllerMedmorOgKunDeHarRett }) =>\n            hasValue(values.morsAktivitetIPerioden) || !søkerErFarEllerMedmorOgKunDeHarRett,\n        isIncluded: ({ søkerErFarEllerMedmorOgKunDeHarRett }) => søkerErFarEllerMedmorOgKunDeHarRett,\n        visibilityFilter: ({ values }) => hasValue(values.årsak),\n    },\n};\n\nexport const periodeUtsettelseFormQuestionsConfig = Questions<\n    PeriodeUtsettelseFormConfigPayload,\n    PeriodeUtsettelseFormField\n>(PeriodeUtsettelseFormConfig);\n","import { Block, intlUtils } from '@navikt/fp-common';\nimport FormikFileUploader from 'app/components/formik-file-uploader/FormikFileUploader';\nimport { Attachment } from 'app/types/Attachment';\nimport { AttachmentType } from 'app/types/AttachmentType';\nimport { Skjemanummer } from 'app/types/Skjemanummer';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\nimport {\n    PeriodeUtsettelseFormComponents,\n    PeriodeUtsettelseFormField,\n} from '../../periode-utsettelse-form/periodeUtsettelseFormConfig';\nimport { BodyShort, GuidePanel } from '@navikt/ds-react';\nimport { FormikRadioProp } from '@navikt/sif-common-formik-ds/lib/components/formik-radio-group/FormikRadioGroup';\n\ninterface Props {\n    periodenErKunHelligdager: boolean;\n    skalViseGamleUtsettelseÅrsaker: boolean;\n    erFarEllerMedmor: boolean;\n    tidsperiodenErInnenforFørsteSeksUker: boolean;\n    utsettelseårsak: UtsettelseÅrsakType | '';\n    vedlegg: Attachment[];\n    erMorUfør: boolean;\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean;\n    isOpen: boolean;\n}\n\nconst getUtsettelseÅrsakOptions = (\n    intl: IntlShape,\n    periodenErKunHelligdager: boolean,\n    skalViseGamleUtsettelseÅrsaker: boolean,\n    erFarEllerMedmor: boolean,\n    tidsperiodenErInnenforFørsteSeksUker: boolean,\n    erMorUfør: boolean,\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean,\n) => {\n    const allRadios: FormikRadioProp[] = [\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.jegskalhaferie'),\n            value: UtsettelseÅrsakType.Ferie,\n            disabled: periodenErKunHelligdager === true,\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.jegskaljobbeheltid'),\n            value: UtsettelseÅrsakType.Arbeid,\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.pgasykdom'),\n            value: UtsettelseÅrsakType.Sykdom,\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.institusjonBarn'),\n            value: UtsettelseÅrsakType.InstitusjonBarnet,\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.institusjonSøker'),\n            value: UtsettelseÅrsakType.InstitusjonSøker,\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.hv_øvelse'),\n            value: UtsettelseÅrsakType.HvØvelse,\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.navtiltak'),\n            value: UtsettelseÅrsakType.NavTiltak,\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.fri'),\n            value: UtsettelseÅrsakType.Fri,\n        },\n    ];\n\n    const defaultRadios = allRadios.filter((option) => {\n        if (skalViseGamleUtsettelseÅrsaker) {\n            if (option.value === UtsettelseÅrsakType.Fri) {\n                return false;\n            }\n\n            return true;\n        }\n\n        if (!skalViseGamleUtsettelseÅrsaker && !erFarEllerMedmor) {\n            if (tidsperiodenErInnenforFørsteSeksUker) {\n                return (\n                    option.value === UtsettelseÅrsakType.Sykdom ||\n                    option.value === UtsettelseÅrsakType.InstitusjonBarnet ||\n                    option.value === UtsettelseÅrsakType.InstitusjonSøker\n                );\n            }\n\n            return false;\n        }\n\n        if (!skalViseGamleUtsettelseÅrsaker && erFarEllerMedmor) {\n            if (!erMorUfør) {\n                if (option.value === UtsettelseÅrsakType.Fri && søkerErFarEllerMedmorOgKunDeHarRett) {\n                    return true;\n                }\n\n                return false;\n            }\n\n            if (tidsperiodenErInnenforFørsteSeksUker) {\n                return (\n                    option.value === UtsettelseÅrsakType.Sykdom ||\n                    option.value === UtsettelseÅrsakType.InstitusjonBarnet ||\n                    option.value === UtsettelseÅrsakType.InstitusjonSøker\n                );\n            }\n\n            return option.value === UtsettelseÅrsakType.Fri;\n        }\n\n        return option.value === UtsettelseÅrsakType.Sykdom || option.value === UtsettelseÅrsakType.Fri;\n    });\n\n    return defaultRadios;\n};\n\nconst getUtsettelseårsakSkjemanummer = (årsak: UtsettelseÅrsakType | '') => {\n    switch (årsak) {\n        case UtsettelseÅrsakType.Sykdom:\n            return Skjemanummer.DOK_OVERFØRING_FOR_SYK;\n        case UtsettelseÅrsakType.InstitusjonSøker:\n        case UtsettelseÅrsakType.InstitusjonBarnet:\n            return Skjemanummer.DOK_INNLEGGELSE;\n        case UtsettelseÅrsakType.HvØvelse:\n            return Skjemanummer.HV_ØVELSE;\n        case UtsettelseÅrsakType.NavTiltak:\n            return Skjemanummer.NAV_TILTAK;\n        default:\n            return Skjemanummer.ANNET;\n    }\n};\n\nconst showAttachmentUploader = (årsak: UtsettelseÅrsakType | ''): boolean => {\n    switch (årsak) {\n        case UtsettelseÅrsakType.Sykdom:\n        case UtsettelseÅrsakType.InstitusjonSøker:\n        case UtsettelseÅrsakType.InstitusjonBarnet:\n        case UtsettelseÅrsakType.HvØvelse:\n        case UtsettelseÅrsakType.NavTiltak:\n            return true;\n        default:\n            return false;\n    }\n};\n\nconst getAttachmentUploaderLabel = (årsak: UtsettelseÅrsakType | ''): string => {\n    switch (årsak) {\n        case UtsettelseÅrsakType.Sykdom:\n        case UtsettelseÅrsakType.InstitusjonSøker:\n        case UtsettelseÅrsakType.InstitusjonBarnet:\n            return 'Last opp dokumentasjon for sykdom';\n        case UtsettelseÅrsakType.HvØvelse:\n            return 'Last opp dokumentasjon for HV-øvelse';\n        case UtsettelseÅrsakType.NavTiltak:\n            return 'Last opp dokumentasjon for NAV tiltak';\n        default:\n            return '';\n    }\n};\n\nconst getAttachmentUploaderType = (årsak: UtsettelseÅrsakType | ''): AttachmentType => {\n    switch (årsak) {\n        case UtsettelseÅrsakType.Sykdom:\n        case UtsettelseÅrsakType.InstitusjonSøker:\n        case UtsettelseÅrsakType.InstitusjonBarnet:\n            return AttachmentType.UTSETTELSE_SYKDOM;\n        case UtsettelseÅrsakType.HvØvelse:\n            return AttachmentType.HV_ØVELSE;\n        case UtsettelseÅrsakType.NavTiltak:\n            return AttachmentType.NAV_TILTAK;\n        default:\n            return AttachmentType.UTSETTELSE_SYKDOM; // Should never happen\n    }\n};\n\nconst getVeilederTekst = (årsak: UtsettelseÅrsakType | ''): React.ReactElement => {\n    switch (årsak) {\n        case UtsettelseÅrsakType.Sykdom:\n        case UtsettelseÅrsakType.InstitusjonSøker:\n        case UtsettelseÅrsakType.InstitusjonBarnet:\n            return <FormattedMessage id=\"uttaksplan.veileder.sykdom\" />;\n        case UtsettelseÅrsakType.HvØvelse:\n            return <FormattedMessage id=\"uttaksplan.veileder.hvØvelse\" />;\n        case UtsettelseÅrsakType.NavTiltak:\n            return <FormattedMessage id=\"uttaksplan.veileder.navTiltak\" />;\n        default:\n            return <FormattedMessage id=\"uttaksplan.veileder.sykdom\" />; // Should never happen\n    }\n};\n\nconst UtsettelseÅrsakSpørsmål: FunctionComponent<Props> = ({\n    periodenErKunHelligdager,\n    skalViseGamleUtsettelseÅrsaker,\n    erFarEllerMedmor,\n    tidsperiodenErInnenforFørsteSeksUker,\n    utsettelseårsak,\n    vedlegg,\n    erMorUfør,\n    søkerErFarEllerMedmorOgKunDeHarRett,\n    isOpen,\n}) => {\n    const intl = useIntl();\n    const årsakOptions = getUtsettelseÅrsakOptions(\n        intl,\n        periodenErKunHelligdager,\n        skalViseGamleUtsettelseÅrsaker,\n        erFarEllerMedmor,\n        tidsperiodenErInnenforFørsteSeksUker,\n        erMorUfør,\n        søkerErFarEllerMedmorOgKunDeHarRett,\n    );\n\n    if (årsakOptions.length === 0) {\n        return (\n            <GuidePanel>\n                <Block padBottom=\"l\">\n                    <BodyShort>\n                        <b>\n                            <FormattedMessage id=\"uttaksplan.veileder.trengerIkkeUtsettelse.del1\" />\n                        </b>\n                    </BodyShort>\n                </Block>\n                <Block padBottom=\"l\">\n                    <BodyShort>\n                        <FormattedMessage id=\"uttaksplan.veileder.trengerIkkeUtsettelse.del2\" />\n                    </BodyShort>\n                </Block>\n                <Block padBottom=\"l\">\n                    <BodyShort>\n                        <FormattedMessage id=\"uttaksplan.veileder.trengerIkkeUtsettelse.del3\" />\n                    </BodyShort>\n                </Block>\n            </GuidePanel>\n        );\n    }\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <PeriodeUtsettelseFormComponents.RadioGroup\n                    legend=\"Velg årsak for utsettelse\"\n                    name={PeriodeUtsettelseFormField.årsak}\n                    radios={årsakOptions}\n                    validate={(value) => {\n                        if (value === '') {\n                            return 'Årsak må fylles ut';\n                        }\n                        return undefined;\n                    }}\n                />\n            </Block>\n            <Block padBottom=\"l\" visible={showAttachmentUploader(utsettelseårsak)}>\n                <GuidePanel>{getVeilederTekst(utsettelseårsak)}</GuidePanel>\n            </Block>\n            <Block padBottom=\"l\" visible={showAttachmentUploader(utsettelseårsak) && isOpen}>\n                <FormikFileUploader\n                    legend=\"Dokumentasjon for utsettelsesårsak\"\n                    label={getAttachmentUploaderLabel(utsettelseårsak)}\n                    name={PeriodeUtsettelseFormField.vedlegg}\n                    attachments={vedlegg || []}\n                    attachmentType={getAttachmentUploaderType(utsettelseårsak)}\n                    skjemanummer={getUtsettelseårsakSkjemanummer(utsettelseårsak)}\n                />\n            </Block>\n        </>\n    );\n};\n\nexport default UtsettelseÅrsakSpørsmål;\n","import { bemUtils, Block, guid, hasValue, intlUtils, ActionLink } from '@navikt/fp-common';\nimport { isValidTidsperiode, Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { Dispatch, FunctionComponent, useEffect, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport TidsperiodeDisplay from 'uttaksplan/components/tidsperiode-display/TidsperiodeDisplay';\nimport UtsettelseEndreTidsperiodeSpørsmål from 'uttaksplan/components/utsettelse-tidsperiode-spørsmål/UtsettelseTidsperiodeSpørsmål';\nimport { Periode, Utsettelsesperiode } from 'uttaksplan/types/Periode';\nimport { getIsValidStateForPerioder, getSlettPeriodeTekst } from 'uttaksplan/utils/periodeUtils';\nimport { SubmitListener } from '../submit-listener/SubmitListener';\nimport TidsperiodeForm from '../tidsperiode-form/TidsperiodeForm';\nimport {\n    PeriodeUtsettelseFormComponents,\n    PeriodeUtsettelseFormData,\n    PeriodeUtsettelseFormField,\n} from './periodeUtsettelseFormConfig';\nimport {\n    cleanupPeriodeUtsettelseFormData,\n    getPeriodeUtsettelseFormInitialValues,\n    mapPeriodeUtsettelseFormToPeriode,\n} from './periodeUtsettelseFormUtils';\n\nimport {\n    PeriodeUtsettelseFormConfigPayload,\n    periodeUtsettelseFormQuestionsConfig,\n} from './periodeUtsettelseFormQuestionsConfig';\nimport UtsettelseÅrsakSpørsmål from '../spørsmål/utsettelse-årsak/UtsettelseÅrsakSpørsmål';\nimport { førsteOktober2021ReglerGjelder, ISOStringToDate } from 'app/utils/dateUtils';\nimport AktivitetskravSpørsmål from '../spørsmål/aktivitetskrav/AktivitetskravSpørsmål';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { Situasjon } from 'app/types/Situasjon';\nimport './periodeUtsettelseForm.less';\nimport { Button } from '@navikt/ds-react';\nimport { PeriodeValidState } from 'uttaksplan/Uttaksplan';\n\ninterface Props {\n    periode: Periode;\n    familiehendelsesdato: Date;\n    erFarEllerMedmor: boolean;\n    erAleneOmOmsorg: boolean;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n    handleAddPeriode?: (nyPeriode: Periode, familiehendelsedato: Date) => void;\n    setNyPeriodeFormIsVisible?: Dispatch<React.SetStateAction<boolean>>;\n    toggleIsOpen?: (id: string) => void;\n    handleDeletePeriode?: (periodeId: string) => void;\n    isNyPeriode?: boolean;\n    navnPåForeldre: NavnPåForeldre;\n    erMorUfør: boolean;\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean;\n    arbeidsforhold: Arbeidsforhold[];\n    situasjon: Situasjon;\n    utsettelserIPlan: Utsettelsesperiode[];\n    setPerioderErGyldige: React.Dispatch<React.SetStateAction<PeriodeValidState[]>>;\n    isOpen: boolean;\n}\n\nconst PeriodeUtsettelseForm: FunctionComponent<Props> = ({\n    periode,\n    familiehendelsesdato,\n    handleUpdatePeriode,\n    erFarEllerMedmor,\n    erAleneOmOmsorg,\n    handleAddPeriode,\n    handleDeletePeriode,\n    toggleIsOpen,\n    isNyPeriode = false,\n    setNyPeriodeFormIsVisible,\n    navnPåForeldre,\n    erMorUfør,\n    søkerErFarEllerMedmorOgKunDeHarRett,\n    situasjon,\n    utsettelserIPlan,\n    setPerioderErGyldige,\n    isOpen,\n}) => {\n    const intl = useIntl();\n    const [periodeIsValid, setPeriodeIsValid] = useState(true);\n    const { id } = periode;\n    const [tidsperiodeIsOpen, setTidsperiodeIsOpen] = useState(false);\n    const bem = bemUtils('periodeUtsettelseForm');\n    const skalViseGamleUtsettelseÅrsaker = førsteOktober2021ReglerGjelder(familiehendelsesdato) === false; // Utsettelseårsaker som gjelder for søknader sendt før 1. oktober 2021\n    const erFarMedmorOgHarAleneomsorg = erFarEllerMedmor && erAleneOmOmsorg;\n\n    const toggleVisTidsperiode = () => {\n        setTidsperiodeIsOpen(!tidsperiodeIsOpen);\n    };\n\n    useEffect(() => {\n        setPerioderErGyldige((previousState: PeriodeValidState[]) => {\n            return getIsValidStateForPerioder(previousState, periode, periodeIsValid);\n        });\n    }, [periodeIsValid]);\n\n    return (\n        <PeriodeUtsettelseFormComponents.FormikWrapper\n            initialValues={getPeriodeUtsettelseFormInitialValues(periode)}\n            onSubmit={(values) => {\n                if (!isNyPeriode) {\n                    handleUpdatePeriode(\n                        mapPeriodeUtsettelseFormToPeriode(values, id, erFarEllerMedmor),\n                        familiehendelsesdato,\n                    );\n                } else {\n                    setNyPeriodeFormIsVisible!(false);\n                    handleAddPeriode!(\n                        mapPeriodeUtsettelseFormToPeriode(values, guid(), erFarEllerMedmor),\n                        familiehendelsesdato,\n                    );\n                }\n            }}\n            renderForm={({ setFieldValue, values, isValid }) => {\n                const visibility = periodeUtsettelseFormQuestionsConfig.getVisbility({\n                    values,\n                    erFarEllerMedmor,\n                    erAleneOmOmsorg,\n                    søkerErFarEllerMedmorOgKunDeHarRett,\n                } as PeriodeUtsettelseFormConfigPayload);\n                if (isValid !== periodeIsValid) {\n                    setPeriodeIsValid(isValid);\n                }\n                const antallHelligdager = Tidsperioden({ fom: values.fom!, tom: values.tom! }).getAntallFridager();\n                const antallUttaksdager = Tidsperioden({ fom: values.fom!, tom: values.tom! }).getAntallUttaksdager();\n                const periodenErKunHelligdager = antallHelligdager === antallUttaksdager;\n                return (\n                    <>\n                        <Block visible={!isValidTidsperiode({ fom: values.fom!, tom: values.tom! })} padBottom=\"xl\">\n                            <TidsperiodeForm\n                                tidsperiode={{ fom: values.fom!, tom: values.tom! }}\n                                familiehendelsesdato={familiehendelsesdato}\n                                onBekreft={(values) => {\n                                    setFieldValue(PeriodeUtsettelseFormField.fom, ISOStringToDate(values.fom));\n                                    setFieldValue(PeriodeUtsettelseFormField.tom, ISOStringToDate(values.tom));\n                                }}\n                                ugyldigeTidsperioder={undefined}\n                                utsettelserIPlan={utsettelserIPlan}\n                                erFarEllerMedmor={erFarEllerMedmor}\n                                morHarRett={!søkerErFarEllerMedmorOgKunDeHarRett}\n                                situasjon={situasjon}\n                                erFarMedmorOgHarAleneomsorg={erFarMedmorOgHarAleneomsorg}\n                            />\n                        </Block>\n                        <PeriodeUtsettelseFormComponents.Form includeButtons={false}>\n                            {!isNyPeriode && (\n                                <SubmitListener\n                                    cleanup={() =>\n                                        cleanupPeriodeUtsettelseFormData(values as PeriodeUtsettelseFormData)\n                                    }\n                                />\n                            )}\n\n                            <Block visible={isValidTidsperiode({ fom: values.fom!, tom: values.tom! })} padBottom=\"xl\">\n                                <TidsperiodeDisplay\n                                    tidsperiode={{ fom: values.fom!, tom: values.tom! }}\n                                    toggleVisTidsperiode={toggleVisTidsperiode}\n                                />\n                                <UtsettelseEndreTidsperiodeSpørsmål\n                                    periode={periode}\n                                    familiehendelsesdato={familiehendelsesdato}\n                                    ugyldigeTidsperioder={undefined}\n                                    utsettelserIPlan={utsettelserIPlan}\n                                    onBekreft={(values) => {\n                                        toggleVisTidsperiode();\n                                        setFieldValue(PeriodeUtsettelseFormField.fom, ISOStringToDate(values.fom));\n                                        setFieldValue(PeriodeUtsettelseFormField.tom, ISOStringToDate(values.tom));\n                                    }}\n                                    changeTidsperiode={(values) => {\n                                        setTimeout(() => {\n                                            setFieldValue(PeriodeUtsettelseFormField.fom, values.fom);\n                                            setFieldValue(PeriodeUtsettelseFormField.tom, values.tom);\n                                        }, 0);\n                                    }}\n                                    tidsperiode={{ fom: values.fom!, tom: values.tom! }}\n                                    onAvbryt={() => toggleVisTidsperiode()}\n                                    visible={tidsperiodeIsOpen}\n                                    erFarEllerMedmor={erFarEllerMedmor}\n                                    morHarRett={!søkerErFarEllerMedmorOgKunDeHarRett}\n                                    situasjon={situasjon}\n                                    erFarMedmorOgHarAleneomsorg={erFarMedmorOgHarAleneomsorg}\n                                />\n                            </Block>\n                            <Block visible={visibility.isVisible(PeriodeUtsettelseFormField.årsak)} padBottom=\"xl\">\n                                <UtsettelseÅrsakSpørsmål\n                                    periodenErKunHelligdager={periodenErKunHelligdager}\n                                    skalViseGamleUtsettelseÅrsaker={skalViseGamleUtsettelseÅrsaker}\n                                    erFarEllerMedmor={erFarEllerMedmor}\n                                    tidsperiodenErInnenforFørsteSeksUker={Tidsperioden({\n                                        fom: values.fom!,\n                                        tom: values.tom!,\n                                    }).erInnenforFørsteSeksUker(familiehendelsesdato)}\n                                    utsettelseårsak={values.årsak!}\n                                    vedlegg={values.vedlegg!}\n                                    erMorUfør={erMorUfør}\n                                    søkerErFarEllerMedmorOgKunDeHarRett={søkerErFarEllerMedmorOgKunDeHarRett}\n                                    isOpen={isOpen}\n                                />\n                            </Block>\n                            <Block\n                                visible={visibility.isVisible(PeriodeUtsettelseFormField.bekrefterArbeidIPerioden)}\n                                padBottom=\"xl\"\n                            >\n                                <PeriodeUtsettelseFormComponents.Checkbox\n                                    name={PeriodeUtsettelseFormField.bekrefterArbeidIPerioden}\n                                    label={intlUtils(intl, 'uttaksplan.bekrefterArbeidIPerioden')}\n                                    validate={(value) => {\n                                        if (!hasValue(value) || value === undefined || value === false) {\n                                            return intlUtils(intl, 'uttaksplan.validering.bekrefterArbeidIPerioden');\n                                        }\n\n                                        return undefined;\n                                    }}\n                                />\n                            </Block>\n                            <Block\n                                visible={visibility.isVisible(PeriodeUtsettelseFormField.morsAktivitetIPerioden)}\n                                padBottom=\"xl\"\n                            >\n                                <AktivitetskravSpørsmål\n                                    aktivitetskravMorValue={values.morsAktivitetIPerioden!}\n                                    aktivitetskravVedlegg={values.morsAktivitetIPeriodenDokumentasjon!}\n                                    fieldName={PeriodeUtsettelseFormField.morsAktivitetIPerioden}\n                                    navnPåForeldre={navnPåForeldre}\n                                    FormComponents={PeriodeUtsettelseFormComponents}\n                                    vedleggFieldName={PeriodeUtsettelseFormField.morsAktivitetIPeriodenDokumentasjon}\n                                    isOpen={isOpen}\n                                />\n                            </Block>\n                            <Block\n                                visible={\n                                    !isNyPeriode && handleDeletePeriode !== undefined && toggleIsOpen !== undefined\n                                }\n                            >\n                                <div style={{ textAlign: 'center', position: 'relative' }}>\n                                    <Button variant=\"secondary\" onClick={() => toggleIsOpen!(periode.id)}>\n                                        <FormattedMessage id=\"uttaksplan.lukk\" />\n                                    </Button>\n                                    <div className={bem.element('slettPeriodeWrapper')}>\n                                        <ActionLink\n                                            onClick={() => handleDeletePeriode!(periode.id)}\n                                            className={bem.element('slettPeriode')}\n                                        >\n                                            <FormattedMessage id={getSlettPeriodeTekst(periode.type)} />\n                                        </ActionLink>\n                                    </div>\n                                </div>\n                            </Block>\n                            <Block\n                                visible={\n                                    isNyPeriode &&\n                                    setNyPeriodeFormIsVisible !== undefined &&\n                                    handleAddPeriode !== undefined\n                                }\n                            >\n                                <div className={bem.element('knapperad')}>\n                                    <Button variant=\"secondary\" onClick={() => setNyPeriodeFormIsVisible!(false)}>\n                                        <FormattedMessage id=\"uttaksplan.avbryt\" />\n                                    </Button>\n                                    {visibility.areAllQuestionsAnswered() ? (\n                                        <Button type=\"submit\">\n                                            <FormattedMessage id=\"uttaksplan.leggTil\" />\n                                        </Button>\n                                    ) : null}\n                                </div>\n                            </Block>\n                        </PeriodeUtsettelseFormComponents.Form>\n                    </>\n                );\n            }}\n        />\n    );\n};\n\nexport default PeriodeUtsettelseForm;\n","import { Block } from '@navikt/fp-common';\nimport AnnenForelder from 'app/context/types/AnnenForelder';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { Dispatch, FunctionComponent, SetStateAction, useState } from 'react';\nimport { Periode, Periodetype, Utsettelsesperiode } from 'uttaksplan/types/Periode';\nimport PeriodeUttakForm from '../periode-uttak-form/PeriodeUttakForm';\nimport PeriodeUtsettelseForm from '../periode-utsettelse-form/PeriodeUtsettelseForm';\nimport { FormattedMessage, IntlShape } from 'react-intl';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { Heading } from '@navikt/ds-react';\nimport { PeriodeValidState } from 'uttaksplan/Uttaksplan';\n\ninterface Props {\n    familiehendelsesdato: Date;\n    stønadskontoer: TilgjengeligStønadskonto[];\n    navnPåForeldre: NavnPåForeldre;\n    annenForelder: AnnenForelder;\n    setNyPeriodeFormIsVisible: Dispatch<SetStateAction<boolean>>;\n    arbeidsforhold: Arbeidsforhold[];\n    isUtsettelse: boolean;\n    handleAddPeriode: (nyPeriode: Periode, familiehendelsedato: Date) => void;\n    erFarEllerMedmor: boolean;\n    erFlerbarnssøknad: boolean;\n    erAleneOmOmsorg: boolean;\n    erDeltUttak: boolean;\n    situasjon: Situasjon;\n    erMorUfør: boolean;\n    setPerioderErGyldige: React.Dispatch<React.SetStateAction<PeriodeValidState[]>>;\n    nesteLedigeUttaksdato: Date | undefined;\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean;\n    erEndringssøknad: boolean;\n    termindato: Date | undefined;\n    antallBarn: number;\n    utsettelserIPlan: Utsettelsesperiode[];\n    intl: IntlShape;\n}\n\nconst NyPeriode: FunctionComponent<Props> = ({\n    setNyPeriodeFormIsVisible,\n    isUtsettelse,\n    annenForelder,\n    arbeidsforhold,\n    navnPåForeldre,\n    stønadskontoer,\n    familiehendelsesdato,\n    handleAddPeriode,\n    erFarEllerMedmor,\n    erFlerbarnssøknad,\n    erAleneOmOmsorg,\n    erDeltUttak,\n    situasjon,\n    erMorUfør,\n    setPerioderErGyldige,\n    nesteLedigeUttaksdato,\n    søkerErFarEllerMedmorOgKunDeHarRett,\n    erEndringssøknad,\n    termindato,\n    antallBarn,\n    utsettelserIPlan,\n    intl,\n}) => {\n    const [periode, setPeriode] = useState<Periode>({\n        type: isUtsettelse ? Periodetype.Utsettelse : Periodetype.Uttak,\n        tidsperiode: { fom: isUtsettelse ? undefined : nesteLedigeUttaksdato },\n    } as Periode);\n\n    return !isUtsettelse ? (\n        <>\n            <Block padBottom=\"xl\">\n                <Heading size=\"small\">\n                    <FormattedMessage id=\"uttaksplan.nyPeriode.tittel\" />\n                </Heading>\n            </Block>\n            <PeriodeUttakForm\n                periode={periode}\n                handleUpdatePeriode={setPeriode}\n                handleAddPeriode={handleAddPeriode}\n                annenForelder={annenForelder}\n                arbeidsforhold={arbeidsforhold}\n                familiehendelsesdato={familiehendelsesdato}\n                navnPåForeldre={navnPåForeldre}\n                stønadskontoer={stønadskontoer}\n                setNyPeriodeFormIsVisible={setNyPeriodeFormIsVisible}\n                isNyPeriode={true}\n                erFarEllerMedmor={erFarEllerMedmor}\n                erFlerbarnssøknad={erFlerbarnssøknad}\n                erAleneOmOmsorg={erAleneOmOmsorg}\n                erDeltUttak={erDeltUttak}\n                situasjon={situasjon}\n                erMorUfør={erMorUfør}\n                setPerioderErGyldige={setPerioderErGyldige}\n                erEndringssøknad={erEndringssøknad}\n                termindato={termindato}\n                morHarRett={!søkerErFarEllerMedmorOgKunDeHarRett}\n                antallBarn={antallBarn}\n                utsettelserIPlan={utsettelserIPlan}\n                intl={intl}\n                isOpen={true}\n            />\n        </>\n    ) : (\n        <PeriodeUtsettelseForm\n            periode={periode}\n            familiehendelsesdato={familiehendelsesdato}\n            handleUpdatePeriode={setPeriode}\n            erFarEllerMedmor={erFarEllerMedmor}\n            erAleneOmOmsorg={erAleneOmOmsorg}\n            handleAddPeriode={handleAddPeriode}\n            setNyPeriodeFormIsVisible={setNyPeriodeFormIsVisible}\n            isNyPeriode={true}\n            navnPåForeldre={navnPåForeldre}\n            erMorUfør={erMorUfør}\n            søkerErFarEllerMedmorOgKunDeHarRett={søkerErFarEllerMedmorOgKunDeHarRett}\n            arbeidsforhold={arbeidsforhold}\n            situasjon={situasjon}\n            utsettelserIPlan={utsettelserIPlan}\n            setPerioderErGyldige={setPerioderErGyldige}\n            isOpen={true}\n        />\n    );\n};\n\nexport default NyPeriode;\n","import { UttaksplanIkonProps } from 'uttaksplan/components/uttaksplan-ikon/UttaksplanIkon';\n\nconst ArbeidIkon = (props: UttaksplanIkonProps) => {\n    const { title, ...rest } = props;\n    return (\n        <svg\n            focusable=\"false\"\n            role=\"img\"\n            aria-hidden=\"true\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            width={32}\n            height={32}\n            {...rest}\n        >\n            <title>{props.title}</title>\n            <defs>\n                <rect id=\"a\" width={32} height={32} rx={10} />\n            </defs>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <path\n                    fill=\"#FFF\"\n                    fillRule=\"nonzero\"\n                    d=\"M23.378 7.79l-.001-.002-1.666-1.665A.413.413 0 0 0 21.417 6H10.583a.417.417 0 0 0-.295.123L8.622 7.788l-.002.002a.463.463 0 0 0-.12.293v17.5c0 .23.187.417.417.417h5.416v-3.75c0-.23.187-.417.417-.417h2.5c.23 0 .417.187.417.417V26h5.416c.23 0 .417-.187.417-.417v-17.5a.46.46 0 0 0-.122-.293zM12.667 20.167h-2.5v-2.5h2.5v2.5zm0-4.167h-2.5v-2.5h2.5V16zm0-4.167h-2.5v-2.5h2.5v2.5zm5 8.334h-3.334v-2.5h3.334v2.5zm0-4.167h-3.334v-2.5h3.334V16zm0-4.167h-3.334v-2.5h3.334v2.5zm4.166 8.334h-2.5v-2.5h2.5v2.5zm0-4.167h-2.5v-2.5h2.5V16zm0-4.167h-2.5v-2.5h2.5v2.5zM9.923 7.667l.833-.834h10.488l.834.834H9.923z\"\n                />\n            </g>\n        </svg>\n    );\n};\n\nexport default ArbeidIkon;\n","import { UttaksplanIkonProps } from 'uttaksplan/components/uttaksplan-ikon/UttaksplanIkon';\n\nconst FerieIkon = (props: UttaksplanIkonProps) => {\n    const { title, ...rest } = props;\n    return (\n        <svg\n            focusable=\"false\"\n            role=\"img\"\n            aria-hidden=\"true\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            width={32}\n            height={32}\n            {...rest}\n        >\n            <title>{props.title}</title>\n            <defs>\n                <rect id=\"a\" width={32} height={32} rx={10} />\n            </defs>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <g stroke=\"#FFF\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                    <path d=\"M25.583 19.737h-5c-2.042 0-3.85.657-4.991 1.667m4.991-1.654l-2.763-6.973m-2.149-5.423l-.307-.774\" />\n                    <path\n                        fill=\"#FFF\"\n                        d=\"M15.671 7.354c-4.065 1.61-6.704 4.571-5.517 7.566l.306.775 1.937-.769.468-1.081 1.082.468 7.747-3.07.467-1.082 1.082.467 1.937-.768-.307-.775c-1.188-2.995-5.138-3.342-9.202-1.731z\"\n                    />\n                    <path d=\"M25.583 24.75c-.833 0-1.666-.747-1.666-1.667 0 .92-.834 1.667-1.667 1.667-.833 0-1.667-.747-1.667-1.667 0 .92-.833 1.667-1.666 1.667-.834 0-1.667-.747-1.667-1.667 0 .92-.833 1.667-1.667 1.667-.833 0-1.666-.747-1.666-1.667 0 .92-.834 1.667-1.667 1.667-.833 0-1.667-.747-1.667-1.667 0 .92-.833 1.667-1.666 1.667-.834 0-1.667-.747-1.667-1.667 0 .575-.386 1.083-.833 1.383\" />\n                </g>\n            </g>\n        </svg>\n    );\n};\n\nexport default FerieIkon;\n","import { UttaksplanIkonProps } from 'uttaksplan/components/uttaksplan-ikon/UttaksplanIkon';\n\nconst SykdomIkon = (props: UttaksplanIkonProps) => {\n    const { title, ...rest } = props;\n    return (\n        <svg\n            focusable=\"false\"\n            role=\"img\"\n            aria-hidden=\"true\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            width={32}\n            height={32}\n            {...rest}\n        >\n            <title>{props.title}</title>\n            <defs>\n                <rect id=\"a\" width={32} height={32} rx={10} />\n                <path\n                    id=\"c\"\n                    d=\"M8.294 1.518l10.19 10.19c1.823 1.822 1.785 4.82-.086 6.69s-4.867 1.91-6.69.086L1.518 8.294c-1.823-1.822-1.786-4.818.086-6.69 1.872-1.871 4.867-1.91 6.69-.086zm6.27 7.4l-3.473-3.476-5.648 5.647 3.475 3.476 5.646-5.648zM3.258 6.65a.472.472 0 0 0-.138.339.499.499 0 0 0 .49.489A.472.472 0 0 0 4.085 7a.497.497 0 0 0-.489-.489.472.472 0 0 0-.34.138zM4.96 4.963a.47.47 0 0 0-.137.34.498.498 0 0 0 .488.488.47.47 0 0 0 .476-.476.496.496 0 0 0-.488-.488.466.466 0 0 0-.34.136zm-2.005-.31a.468.468 0 0 0-.138.338.499.499 0 0 0 .49.49.47.47 0 0 0 .476-.478.497.497 0 0 0-.489-.489.468.468 0 0 0-.34.138zm1.694-1.694a.472.472 0 0 0-.138.34.496.496 0 0 0 .488.487.467.467 0 0 0 .477-.477.496.496 0 0 0-.488-.488.472.472 0 0 0-.34.138zm.622 4.009a.47.47 0 0 0-.136.34.496.496 0 0 0 .489.488.466.466 0 0 0 .476-.476.498.498 0 0 0-.488-.489.474.474 0 0 0-.341.137zm1.694-1.693a.472.472 0 0 0-.138.34.496.496 0 0 0 .488.487.467.467 0 0 0 .477-.477.495.495 0 0 0-.488-.487.472.472 0 0 0-.34.137zM6.654 3.27a.472.472 0 0 0-.138.339.5.5 0 0 0 .49.49.47.47 0 0 0 .477-.477.5.5 0 0 0-.49-.49.472.472 0 0 0-.34.138zm5.993 12.771a.468.468 0 0 0-.138.34.498.498 0 0 0 .49.488.47.47 0 0 0 .337-.139.47.47 0 0 0 .14-.337.499.499 0 0 0-.49-.49.468.468 0 0 0-.34.138zm1.694-1.696a.473.473 0 0 0-.137.339c.002.268.22.486.489.489a.466.466 0 0 0 .476-.476.499.499 0 0 0-.49-.49.476.476 0 0 0-.338.138zm.31 2.006a.472.472 0 0 0-.137.339.499.499 0 0 0 .49.489.472.472 0 0 0 .476-.477.497.497 0 0 0-.489-.489.472.472 0 0 0-.34.138zm1.696-1.693a.469.469 0 0 0-.137.338c.002.267.22.485.489.49a.469.469 0 0 0 .476-.477.499.499 0 0 0-.49-.489.472.472 0 0 0-.338.138zm-4.011-.623a.469.469 0 0 0-.137.338.497.497 0 0 0 .489.49.469.469 0 0 0 .476-.477.499.499 0 0 0-.489-.489.472.472 0 0 0-.34.138zm1.694-1.694a.472.472 0 0 0-.138.339.499.499 0 0 0 .489.489.472.472 0 0 0 .476-.476.495.495 0 0 0-.489-.49.469.469 0 0 0-.338.138zm2.005.31a.472.472 0 0 0-.137.34.499.499 0 0 0 .489.489.466.466 0 0 0 .475-.476.495.495 0 0 0-.489-.488.466.466 0 0 0-.338.136z\"\n                />\n            </defs>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <g transform=\"translate(6 6)\">\n                    <mask id=\"d\" fill=\"#fff\">\n                        <use xlinkHref=\"#c\" />\n                    </mask>\n                    <g fill=\"#FFF\" mask=\"url(#d)\">\n                        <path d=\"M0 20h20V0H0z\" />\n                    </g>\n                </g>\n            </g>\n        </svg>\n    );\n};\n\nexport default SykdomIkon;\n","import { UttaksplanIkonProps } from 'uttaksplan/components/uttaksplan-ikon/UttaksplanIkon';\n\nconst TerminIkon = (props: UttaksplanIkonProps) => {\n    const { title, ...rest } = props;\n    return (\n        <svg focusable=\"false\" role=\"img\" aria-hidden=\"true\" width={24} height={24} viewBox=\"0 0 24 24\" {...rest}>\n            <title>{props.title}</title>\n            <path\n                fill=\"none\"\n                fillRule=\"evenodd\"\n                stroke=\"#3E3832\"\n                strokeLinejoin=\"round\"\n                d=\"M12 22.993s10.5-8.128 10.5-15.82-9.316-8.284-10.5-.59C10.816-1.112 1.5-.52 1.5 7.764S12 22.993 12 22.993z\"\n            />\n        </svg>\n    );\n};\n\nexport default TerminIkon;\n","import { UttaksplanIkonProps } from 'uttaksplan/components/uttaksplan-ikon/UttaksplanIkon';\n\nconst UttakIkon = (props: UttaksplanIkonProps) => {\n    const { title, ...rest } = props;\n    return (\n        <svg\n            focusable=\"false\"\n            role=\"img\"\n            aria-hidden=\"true\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            width={32}\n            height={32}\n            {...rest}\n        >\n            <title>{props.title}</title>\n            <defs>\n                <rect id=\"a\" width={32} height={32} rx={10} />\n            </defs>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <g transform=\"translate(6 6)\">\n                    <circle cx={14.583} cy={17.083} r={1.083} stroke=\"#FFF\" strokeWidth={2} />\n                    <circle cx={7.083} cy={17.083} r={1.083} stroke=\"#FFF\" strokeWidth={2} />\n                    <path\n                        fill=\"#FFF\"\n                        d=\"M19.928 8.718c0 3.453-1.997 6.282-5.586 6.282H7.106c-2.586 0-4.682-2.21-4.682-4.936 0-.467.062-.918.176-1.346 3.038 0 14.084-.004 17.328 0zM13.886 2.5c3.734 0 6.042 2.836 6.042 5.385-1.835 0-4.85-.005-8.841-.005l2.8-5.38z\"\n                    />\n                    <path\n                        stroke=\"#FFF\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        d=\"M3.107 9.612c0-2.314-1.218-3.962-2.678-3.962\"\n                    />\n                </g>\n            </g>\n        </svg>\n    );\n};\n\nexport default UttakIkon;\n","import { SVGProps } from 'react';\nimport ArbeidIkon from 'uttaksplan/assets/ArbeidIkon';\nimport FerieIkon from 'uttaksplan/assets/FerieIkon';\nimport SykdomIkon from 'uttaksplan/assets/SykdomIkon';\nimport TerminIkon from 'uttaksplan/assets/TerminIkon';\nimport UttakIkon from 'uttaksplan/assets/UttakIkon';\nimport { XMarkOctagonFillIcon, ExclamationmarkTriangleFillIcon, InformationSquareIcon } from '@navikt/aksel-icons';\n\nexport interface UttaksplanIkonProps extends SVGProps<any> {\n    title: string;\n}\n\nexport enum UttaksplanIkonKeys {\n    'arbeid' = 'arbeid',\n    'ferie' = 'ferie',\n    'sykdom' = 'sykdom',\n    'termin' = 'termin',\n    'uttak' = 'uttak',\n    'info' = 'info',\n    'advarsel' = 'advarsel',\n    'feil' = 'feil',\n}\n\nexport interface Props {\n    ikon: UttaksplanIkonKeys;\n    title: string;\n}\n\nconst UttaksplanIkon: React.FunctionComponent<Props> = ({ ikon, title }) => {\n    switch (ikon) {\n        case 'arbeid':\n            return <ArbeidIkon title={title} />;\n        case 'ferie':\n            return <FerieIkon title={title} />;\n        case 'sykdom':\n            return <SykdomIkon title={title} />;\n        case 'termin':\n            return <TerminIkon title={title} />;\n        case 'info':\n            return <InformationSquareIcon />;\n        case 'advarsel':\n            return <ExclamationmarkTriangleFillIcon />;\n        case 'feil':\n            return <XMarkOctagonFillIcon />;\n        default:\n            return <UttakIkon title={title} />;\n    }\n};\n\nexport default UttaksplanIkon;\n","import { VeilederMessage } from '../types';\nimport { FormattedMessage } from 'react-intl';\nimport { bemUtils } from '@navikt/fp-common';\nimport { UttaksplanIkonKeys } from 'uttaksplan/components/uttaksplan-ikon/UttaksplanIkon';\nimport { Alert, Label } from '@navikt/ds-react';\n\nimport './veilederMelding.less';\n\nexport type VeilederMeldingStil = 'transparent' | 'default';\n\ninterface VeilederpanelInnholdContentProps {\n    message: VeilederMessage;\n    stil?: VeilederMeldingStil;\n    skjulMeldingIkon?: boolean;\n}\n\ntype AlertType = 'error' | 'warning' | 'info' | 'success';\n\nconst getAlertStripeTypeFromMessageType = (message: VeilederMessage): AlertType => {\n    switch (message.type) {\n        case 'normal':\n        case 'info':\n            return 'info';\n        case 'advarsel':\n            return 'warning';\n        case 'feil':\n            return 'error';\n    }\n};\n\nexport const getIkonForVeilederMelding = (melding: VeilederMessage): UttaksplanIkonKeys => {\n    switch (melding.type) {\n        case 'feil':\n            return UttaksplanIkonKeys.feil;\n        case 'advarsel':\n            return UttaksplanIkonKeys.advarsel;\n        default:\n            return UttaksplanIkonKeys.info;\n    }\n};\n\nconst renderAlert = (message: VeilederMessage, skjulMeldingIkon: boolean, stil: VeilederMeldingStil) => {\n    const content = (\n        <>\n            {message.titleIntlKey !== undefined && (\n                <Label as=\"div\">\n                    <FormattedMessage id={message.titleIntlKey} />\n                </Label>\n            )}\n            <FormattedMessage id={message.contentIntlKey} values={message.values} />\n        </>\n    );\n    return skjulMeldingIkon ? (\n        <div>{content}</div>\n    ) : (\n        <Alert variant={getAlertStripeTypeFromMessageType(message)} inline={stil === 'transparent'}>\n            {content}\n        </Alert>\n    );\n};\n\nconst VeilederMelding: React.FunctionComponent<VeilederpanelInnholdContentProps> = ({\n    message,\n    stil = 'default',\n    skjulMeldingIkon = false,\n}) => {\n    const bem = bemUtils('veilederMelding');\n    return (\n        <div className={bem.classNames(bem.block, bem.modifier(stil))}>\n            {message.type !== 'normal' ? (\n                renderAlert(message, skjulMeldingIkon, stil)\n            ) : (\n                <div className=\"veilederMelding__padding\">\n                    <FormattedMessage id={message.contentIntlKey} values={message.values} />\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default VeilederMelding;\n","import * as React from 'react';\nimport { VeilederMessage } from '../veilederInfo/types';\nimport VeilederMelding, { VeilederMeldingStil } from './components/VeilederMelding';\nimport { Block } from '@navikt/fp-common';\n\ninterface Props {\n    meldinger: VeilederMessage[];\n    stil?: VeilederMeldingStil;\n    skjulMeldingIkon?: boolean;\n}\n\nconst VeilederMeldinger: React.FunctionComponent<Props> = ({ meldinger, stil, skjulMeldingIkon }) => {\n    return (\n        <div>\n            {meldinger.map((melding: VeilederMessage) => (\n                <Block padBottom=\"xl\" key={melding.contentIntlKey + melding.periodeId}>\n                    <VeilederMelding message={melding} stil={stil} skjulMeldingIkon={skjulMeldingIkon} />\n                </Block>\n            ))}\n        </div>\n    );\n};\n\nexport default VeilederMeldinger;\n","export enum UttaksplanColor {\n    'purple' = 'purple',\n    'blue' = 'blue',\n    'green' = 'green',\n    'purpleBlue' = 'purpleBlue',\n    'yellow' = 'yellow',\n    'white' = 'white',\n    'transparent' = 'transparent',\n    'infoBlue' = 'infoBlue',\n}\n","import { Forelder } from 'app/types/Forelder';\nimport { Oppholdsperiode, Periode, Periodetype } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { UttaksplanColor } from 'uttaksplan/types/UttaksplanColor';\n\nexport const getForelderFarge = (forelder: Forelder) => {\n    return forelder === Forelder.mor ? UttaksplanColor.purple : UttaksplanColor.blue;\n};\n\nexport const getStønadskontoFarge = (\n    konto: StønadskontoType,\n    forelder: Forelder | undefined,\n    forIkon?: boolean,\n    harMidlertidigOmsorg?: boolean\n): UttaksplanColor => {\n    if (forIkon && konto === StønadskontoType.Fellesperiode) {\n        return UttaksplanColor.purpleBlue;\n    }\n\n    if (harMidlertidigOmsorg) {\n        return UttaksplanColor.purple;\n    }\n\n    if (forelder === undefined) {\n        switch (konto) {\n            case StønadskontoType.Fedrekvote:\n            case StønadskontoType.AktivitetsfriKvote:\n                return UttaksplanColor.blue;\n            case StønadskontoType.Mødrekvote:\n            case StønadskontoType.Foreldrepenger:\n            case StønadskontoType.ForeldrepengerFørFødsel:\n                return UttaksplanColor.purple;\n            case StønadskontoType.Fellesperiode:\n                return UttaksplanColor.purpleBlue;\n            default:\n                return UttaksplanColor.transparent;\n        }\n    }\n    return getForelderFarge(forelder);\n};\n\nexport const getUtsettelseFarge = (): UttaksplanColor => {\n    return UttaksplanColor.green;\n};\n\nexport const getOppholdFarge = (periode: Oppholdsperiode): UttaksplanColor => {\n    return getForelderFarge(periode.forelder);\n};\n\nexport const getPeriodeFarge = (\n    periode: Periode,\n    forelder?: Forelder,\n    harMidlertidligOmsorg?: boolean\n): UttaksplanColor | undefined => {\n    if (harMidlertidligOmsorg) {\n        return UttaksplanColor.purple;\n    }\n\n    if (periode.type === Periodetype.Uttak || periode.type === Periodetype.Overføring) {\n        return getStønadskontoFarge(periode.konto, periode.forelder || forelder);\n    }\n    if (periode.type === Periodetype.Utsettelse) {\n        return getUtsettelseFarge();\n    }\n    if (periode.type === Periodetype.Opphold) {\n        return getOppholdFarge(periode);\n    }\n    return undefined;\n};\n","import classnames from 'classnames';\n\nimport './iconBox.less';\nimport { UttaksplanColor } from 'uttaksplan/types/UttaksplanColor';\nimport { bemUtils } from '@navikt/fp-common';\n\nexport interface Props {\n    color: UttaksplanColor;\n    stripes?: boolean;\n    children?: React.ReactNode;\n}\n\nconst IconBox: React.FunctionComponent<Props> = ({ children, color, stripes }) => {\n    const bem = bemUtils('iconBox');\n\n    return (\n        <div className={classnames(bem.block, bem.modifier(`${color}${stripes ? '--striped' : ''}`))}>{children}</div>\n    );\n};\n\nexport default IconBox;\n","import { Forelder } from 'app/types/Forelder';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { getStønadskontoFarge } from 'uttaksplan/utils/styleUtils';\nimport { getStønadskontoNavn } from 'uttaksplan/utils/stønadskontoerUtils';\nimport IconBox from '../icon-box/IconBox';\nimport UttaksplanIkon, { UttaksplanIkonKeys } from '../uttaksplan-ikon/UttaksplanIkon';\n\nexport interface Props {\n    konto: StønadskontoType;\n    forelder?: Forelder;\n    gradert?: boolean;\n    navnPåForeldre: NavnPåForeldre;\n    erFarEllerMedmor?: boolean;\n    situasjon?: Situasjon;\n    erAleneOmOmsorg?: boolean;\n    harMidlertidigOmsorg?: boolean;\n}\n\nconst StønadskontoIkon: FunctionComponent<Props> = ({\n    konto,\n    forelder,\n    gradert,\n    navnPåForeldre,\n    harMidlertidigOmsorg,\n    erFarEllerMedmor,\n    erAleneOmOmsorg,\n}) => {\n    const intl = useIntl();\n\n    return (\n        <IconBox color={getStønadskontoFarge(konto, forelder, true, harMidlertidigOmsorg)} stripes={gradert}>\n            <UttaksplanIkon\n                ikon={UttaksplanIkonKeys.uttak}\n                title={getStønadskontoNavn(intl, konto, navnPåForeldre, erFarEllerMedmor, erAleneOmOmsorg)}\n            />\n        </IconBox>\n    );\n};\n\nexport default StønadskontoIkon;\n","import { intlUtils } from '@navikt/fp-common';\n\nimport { useIntl } from 'react-intl';\nimport { getUtsettelseFarge } from 'uttaksplan/utils/styleUtils';\nimport IconBox from '../icon-box/IconBox';\nimport UttaksplanIkon, { UttaksplanIkonKeys } from '../uttaksplan-ikon/UttaksplanIkon';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\n\nexport interface Props {\n    årsak: UtsettelseÅrsakType;\n    gradert?: boolean;\n}\n\nconst getIkonForKonto = (årsak: UtsettelseÅrsakType): UttaksplanIkonKeys => {\n    switch (årsak) {\n        case UtsettelseÅrsakType.Ferie:\n            return UttaksplanIkonKeys.ferie;\n        case UtsettelseÅrsakType.Arbeid:\n        case UtsettelseÅrsakType.HvØvelse:\n        case UtsettelseÅrsakType.NavTiltak:\n        case UtsettelseÅrsakType.Fri:\n            return UttaksplanIkonKeys.arbeid;\n        case UtsettelseÅrsakType.InstitusjonBarnet:\n        case UtsettelseÅrsakType.InstitusjonSøker:\n        case UtsettelseÅrsakType.Sykdom:\n            return UttaksplanIkonKeys.sykdom;\n    }\n};\n\nconst UtsettelseIkon: React.FunctionComponent<Props> = ({ årsak, gradert }) => {\n    const intl = useIntl();\n\n    return (\n        <IconBox color={getUtsettelseFarge()} stripes={gradert}>\n            <UttaksplanIkon\n                ikon={getIkonForKonto(årsak)}\n                title={intlUtils(intl, `uttaksplan.utsettelsesårsak.${årsak || 'ukjent'}`)}\n            />\n        </IconBox>\n    );\n};\n\nexport default UtsettelseIkon;\n","import { SVGProps } from 'react';\n\nexport interface OwnProps {\n    type?: 'advarsel' | 'feil';\n    title?: string;\n}\n\ntype Props = OwnProps & SVGProps<any>;\n\nconst UttaksplanAdvarselIkon = (props: Props) => {\n    const farge = props.type === 'feil' ? '#ba3a26' : '#ff9100';\n    const { title, ...rest } = props;\n\n    return (\n        <svg\n            focusable=\"false\"\n            role=\"img\"\n            aria-hidden=\"true\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            width={24}\n            height={24}\n            viewBox=\"0 0 24 24\"\n            {...rest}\n        >\n            <title>{props.title}</title>\n            <defs>\n                <path\n                    id=\"advarsel-a\"\n                    d=\"M23.892 22.23L12.462 1.243c-.178-.324-.758-.324-.934 0L.055 22.307a.445.445 0 0 0 .022.465c.094.14.264.228.446.228h22.955c.287 0 .522-.214.522-.479 0-.109-.04-.21-.108-.29zM11.474 8.784c0-.264.233-.479.521-.479.287 0 .522.215.522.48v7.326c0 .264-.235.479-.522.479-.288 0-.521-.215-.521-.479V8.784zm.521 11.447c-.551 0-.998-.41-.998-.915 0-.505.447-.916.998-.916.55 0 .997.411.997.916 0 .506-.447.915-.997.915z\"\n                />\n            </defs>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <mask id=\"advarsel-b\" fill=\"#fff\">\n                    <use xlinkHref=\"#advarsel-a\" />\n                </mask>\n                <g fill={farge} mask=\"url(#advarsel-b)\">\n                    <path d=\"M0 24h24V0H0z\" />\n                </g>\n            </g>\n        </svg>\n    );\n};\n\nexport default UttaksplanAdvarselIkon;\n","import { bemUtils, intlUtils } from '@navikt/fp-common';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { getUkerOgDagerFromDager, måned, måned3bokstaver, år } from 'app/utils/dateUtils';\nimport classNames from 'classnames';\nimport dayjs from 'dayjs';\nimport { FunctionComponent } from 'react';\nimport {\n    isForeldrepengerFørFødselUttaksperiode,\n    isUtsettelseAnnenPart,\n    isUttakAnnenPart,\n    Periode,\n    Periodetype,\n} from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport StønadskontoIkon from '../stønadskonto-ikon/StønadskontoIkon';\nimport UtsettelseIkon from '../utsettelse-ikon/UtsettelseIkon';\nimport { getForelderNavn, getPeriodeTittel } from 'uttaksplan/utils/periodeUtils';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport { getValidTidsperiode, Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport UttaksplanIkon from '../uttaksplan-ikon/UttaksplanIkon';\nimport { getIkonForVeilederMelding } from 'uttaksplan/validering/veilederInfo/components/VeilederMelding';\nimport { VeilederMessage } from 'uttaksplan/validering/veilederInfo/types';\nimport UttaksplanAdvarselIkon from 'uttaksplan/assets/UttaksplanAdvarselIkon';\nimport { Forelder } from 'app/types/Forelder';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { BodyShort, Label } from '@navikt/ds-react';\n\nimport './periodelisteItemHeader.less';\n\ninterface Props {\n    egenPeriode: boolean;\n    periode: Periode;\n    navnPåForeldre: NavnPåForeldre;\n    melding: VeilederMessage | undefined;\n    annenForelderSamtidigUttakPeriode?: Periode;\n    familiehendelsesdato: Date;\n    termindato: Date | undefined;\n    situasjon: Situasjon;\n    erFarEllerMedmor: boolean;\n    erAleneOmOmsorg: boolean;\n}\n\nconst bem = bemUtils('periodelisteItemHeader');\n\nexport const getPeriodeIkon = (\n    periode: Periode,\n    navnPåForeldre: NavnPåForeldre,\n    harMidlertidigOmsorg?: boolean,\n    erFarEllerMedmor?: boolean,\n    situasjon?: Situasjon,\n    erAleneOmOmsorg?: boolean\n): React.ReactNode | undefined => {\n    switch (periode.type) {\n        case Periodetype.Uttak:\n            return (\n                <StønadskontoIkon\n                    konto={periode.konto}\n                    forelder={periode.forelder}\n                    gradert={periode.gradert}\n                    navnPåForeldre={navnPåForeldre}\n                    harMidlertidigOmsorg={harMidlertidigOmsorg}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    situasjon={situasjon}\n                    erAleneOmOmsorg={erAleneOmOmsorg}\n                />\n            );\n        case Periodetype.Overføring:\n            return (\n                <StønadskontoIkon konto={periode.konto} forelder={periode.forelder} navnPåForeldre={navnPåForeldre} />\n            );\n        case Periodetype.Utsettelse:\n            return <UtsettelseIkon årsak={periode.årsak} />;\n        case Periodetype.Opphold:\n            return (\n                <StønadskontoIkon\n                    konto={StønadskontoType.Foreldrepenger}\n                    forelder={periode.forelder}\n                    navnPåForeldre={navnPåForeldre}\n                />\n            );\n        case Periodetype.Info:\n            if (isUtsettelseAnnenPart(periode)) {\n                return <UtsettelseIkon årsak={periode.årsak} />;\n            } else {\n                return (\n                    <StønadskontoIkon\n                        konto={StønadskontoType.Foreldrepenger}\n                        forelder={periode.forelder}\n                        navnPåForeldre={navnPåForeldre}\n                    />\n                );\n            }\n        case Periodetype.Hull:\n            return <UttaksplanAdvarselIkon />;\n    }\n    return undefined;\n};\n\ntype VarighetFormat = 'full' | 'normal';\n\nexport const getVarighetString = (antallDager: number, intl: IntlShape, format: VarighetFormat = 'full'): string => {\n    const { uker, dager } = getUkerOgDagerFromDager(Math.abs(antallDager));\n    const dagerStr = intl.formatMessage(\n        { id: 'common.varighet.dager' },\n        {\n            dager,\n        }\n    );\n    if (uker === 0) {\n        return dagerStr;\n    }\n    const ukerStr = intl.formatMessage({ id: 'common.varighet.uker' }, { uker });\n    if (dager > 0) {\n        return `${ukerStr}${intl.formatMessage({\n            id: `common.varighet.separator--${format}`,\n        })}${dagerStr}`;\n    }\n    return ukerStr;\n};\n\nconst renderDagMnd = (dato: Date, visÅr = true): JSX.Element => {\n    const d = dayjs(dato);\n\n    return (\n        <div className={bem.element('dagmnd')}>\n            <span className={bem.element('dagmnd__dato')}>\n                <BodyShort>\n                    {d.get('date')}. {måned3bokstaver(d)}.\n                </BodyShort>\n            </span>\n            {visÅr && (\n                <BodyShort as=\"span\" className={bem.element('dagmnd__mnd')}>\n                    <abbr title={`${måned(d)} ${år(d)}`}>{år(d)}</abbr>\n                </BodyShort>\n            )}\n        </div>\n    );\n};\n\nconst PeriodelisteItemHeader: FunctionComponent<Props> = ({\n    periode,\n    navnPåForeldre,\n    melding,\n    annenForelderSamtidigUttakPeriode,\n    familiehendelsesdato,\n    termindato,\n    situasjon,\n    erFarEllerMedmor,\n    erAleneOmOmsorg,\n}) => {\n    const intl = useIntl();\n\n    let varighetString;\n    const erFpFørTerminUtenUttak =\n        isForeldrepengerFørFødselUttaksperiode(periode) && periode.skalIkkeHaUttakFørTermin === true;\n    if (erFpFørTerminUtenUttak) {\n        varighetString = intlUtils(intl, 'uttaksplan.periodeliste.header.skalIkkeHaUttakFørTermin');\n    } else {\n        varighetString = getVarighetString(Tidsperioden(periode.tidsperiode).getAntallUttaksdager(), intl);\n    }\n\n    let annenForelderIsMor;\n    let annenForelderNavn;\n    let beskrivelseSamtidigUttak;\n    if (annenForelderSamtidigUttakPeriode && isUttakAnnenPart(annenForelderSamtidigUttakPeriode)) {\n        annenForelderIsMor = annenForelderSamtidigUttakPeriode.forelder === Forelder.mor;\n        annenForelderNavn = getForelderNavn(annenForelderSamtidigUttakPeriode.forelder, navnPåForeldre);\n        beskrivelseSamtidigUttak = getVarighetString(\n            getValidTidsperiode(annenForelderSamtidigUttakPeriode.tidsperiode)\n                ? Tidsperioden(annenForelderSamtidigUttakPeriode.tidsperiode).getAntallUttaksdager()\n                : 0,\n            intl\n        );\n    }\n\n    return (\n        <div>\n            <div className={bem.block}>\n                <div className={bem.element('content')}>\n                    <div className={bem.element('ikon')}>{getPeriodeIkon(periode, navnPåForeldre)}</div>\n                    <div className={bem.element('tittel')}>\n                        <Label as=\"h3\">\n                            {getPeriodeTittel(\n                                intl,\n                                periode,\n                                navnPåForeldre,\n                                familiehendelsesdato,\n                                termindato,\n                                situasjon,\n                                erFarEllerMedmor,\n                                erAleneOmOmsorg\n                            )}\n                        </Label>\n                        <BodyShort>{varighetString}</BodyShort>\n                    </div>\n                    <div className={bem.element('advarsel')}>\n                        {melding && (\n                            <span\n                                role=\"presentation\"\n                                className={bem.modifier(`color-${getIkonForVeilederMelding(melding)}`)}\n                            >\n                                <UttaksplanIkon\n                                    ikon={getIkonForVeilederMelding(melding)}\n                                    title={melding.contentIntlKey}\n                                />\n                            </span>\n                        )}\n                    </div>\n                    {!erFpFørTerminUtenUttak && (\n                        <div className={bem.element('dato-container')}>\n                            {renderDagMnd(periode.tidsperiode.fom)}\n                            {renderDagMnd(periode.tidsperiode.tom)}\n                        </div>\n                    )}\n                </div>\n            </div>\n\n            {annenForelderSamtidigUttakPeriode && (\n                <div\n                    className={classNames(bem.element('samtidig-uttak'), {\n                        [bem.element('samtidig-uttak-mor')]: annenForelderIsMor,\n                        [bem.element('samtidig-uttak-far')]: !annenForelderIsMor,\n                    })}\n                >\n                    <div>\n                        <Label>\n                            <FormattedMessage id=\"oppsummering.morsAktivitet.SamtidigUttak\" />\n                        </Label>\n                    </div>\n                    <div className={bem.element('beskrivelse')}>\n                        <em className={bem.element('beskrivelse__tekst')}>\n                            {beskrivelseSamtidigUttak}\n                            <em className={bem.element('hvem')}> - {annenForelderNavn}</em>\n                        </em>\n                    </div>\n                    {annenForelderSamtidigUttakPeriode.tidsperiode && (\n                        <div className={bem.element('tidsrom')}>\n                            {renderDagMnd(annenForelderSamtidigUttakPeriode.tidsperiode.fom, false)}\n                            {renderDagMnd(annenForelderSamtidigUttakPeriode.tidsperiode.tom, false)}\n                        </div>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default PeriodelisteItemHeader;\n","import { ActionLink, bemUtils, Block, intlUtils } from '@navikt/fp-common';\nimport { Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { førsteOktober2021ReglerGjelder } from 'app/utils/dateUtils';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Periode, Periodetype } from 'uttaksplan/types/Periode';\nimport { BodyShort } from '@navikt/ds-react';\n\nimport './periodeHull.less';\n\ninterface Props {\n    periode: Periode;\n    navnAnnenForelder: string;\n    erDeltUttak: boolean;\n    familiehendelsesdato: Date;\n    erFarEllerMedmor: boolean;\n    erAleneOmOmsorg: boolean;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n}\n\nconst PeriodeHull: FunctionComponent<Props> = ({\n    periode,\n    navnAnnenForelder,\n    erDeltUttak,\n    familiehendelsesdato,\n    erFarEllerMedmor,\n    erAleneOmOmsorg,\n    handleUpdatePeriode,\n}) => {\n    const intl = useIntl();\n    const bem = bemUtils('periodeHull');\n\n    const antallDager = Tidsperioden(periode.tidsperiode).getAntallUttaksdager();\n    const antallHelligdager = Tidsperioden(periode.tidsperiode).getAntallFridager();\n    const antallUttaksdager = Tidsperioden(periode.tidsperiode).getAntallUttaksdager();\n    const kunHelligdager = antallHelligdager === antallUttaksdager;\n    const kunUttaksdager = antallHelligdager === 0;\n\n    const onLeggInnNyPeriode = () => {\n        const { id, tidsperiode } = periode;\n\n        handleUpdatePeriode({ id, type: Periodetype.Uttak, tidsperiode } as Periode, familiehendelsesdato);\n    };\n\n    const leggInnNyUtsettelse = () => {\n        const { id, tidsperiode } = periode;\n\n        handleUpdatePeriode({ id, type: Periodetype.Utsettelse, tidsperiode } as Periode, familiehendelsesdato);\n    };\n\n    const nyeRegler = førsteOktober2021ReglerGjelder(familiehendelsesdato);\n\n    return (\n        <div className={bem.block}>\n            <Block padBottom=\"l\" visible={kunHelligdager}>\n                <BodyShort>\n                    <FormattedMessage id=\"uttaksplan.hull.helligdager\" />\n                </BodyShort>\n            </Block>\n            <Block padBottom=\"l\" visible={kunUttaksdager || (kunUttaksdager === false && kunHelligdager === false)}>\n                <BodyShort>\n                    {erDeltUttak ? (\n                        <FormattedMessage\n                            id=\"uttaksplan.hull.uttaksdager.deltUttak\"\n                            values={{\n                                navn: navnAnnenForelder,\n                                dager: antallDager,\n                            }}\n                        />\n                    ) : (\n                        <FormattedMessage\n                            id={\n                                nyeRegler && erFarEllerMedmor && !erAleneOmOmsorg\n                                    ? 'uttaksplan.hull.uttaksdager.ikkeDeltUttak.nyeRegler'\n                                    : 'uttaksplan.hull.uttaksdager.ikkeDeltUttak'\n                            }\n                            values={{\n                                dager: antallDager,\n                            }}\n                        />\n                    )}\n                </BodyShort>\n            </Block>\n            <div className={bem.element('lenker')}>\n                <ActionLink onClick={onLeggInnNyPeriode}>{intlUtils(intl, 'uttaksplan.leggInnNyPeriode')}</ActionLink>\n                <ActionLink onClick={leggInnNyUtsettelse}>\n                    {intlUtils(intl, 'uttaksplan.leggInnNyUtsettelse')}\n                </ActionLink>\n            </div>\n        </div>\n    );\n};\n\nexport default PeriodeHull;\n","import { BodyShort } from '@navikt/ds-react';\nimport { intlUtils } from '@navikt/fp-common';\nimport { Forelder } from 'app/types/Forelder';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { formaterDatoKompakt } from 'app/utils/dateUtils';\nimport { FunctionComponent } from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\nimport { isUttakAnnenPart, UtsettelseAnnenPartInfoPeriode, UttakAnnenPartInfoPeriode } from 'uttaksplan/types/Periode';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\nimport { getForelderNavn, getOppholdskontoNavn } from 'uttaksplan/utils/periodeUtils';\n\nexport interface Props {\n    periode: UttakAnnenPartInfoPeriode | UtsettelseAnnenPartInfoPeriode;\n    navnPåForeldre: NavnPåForeldre;\n}\n\nconst getUtsettelseTekst = (intl: IntlShape, årsak: UtsettelseÅrsakType, foreldernavn: string, erMor: boolean) => {\n    return erMor\n        ? intlUtils(intl, `uttaksplan.utsettelseårsaktype.foreldernavn.far.${årsak}`, { foreldernavn })\n        : intlUtils(intl, `uttaksplan.utsettelseårsaktype.foreldernavn.mor.${årsak}`, { foreldernavn });\n};\n\nconst PeriodeInfo: FunctionComponent<Props> = ({ periode, navnPåForeldre }) => {\n    const intl = useIntl();\n\n    return (\n        <BodyShort>\n            <strong>\n                <span>{formaterDatoKompakt(periode.tidsperiode.fom)}</span>\n                <span>&mdash;</span>\n                <span>{formaterDatoKompakt(periode.tidsperiode.tom)}:</span>\n            </strong>{' '}\n            {isUttakAnnenPart(periode)\n                ? getOppholdskontoNavn(\n                      intl,\n                      periode.årsak,\n                      getForelderNavn(periode.forelder, navnPåForeldre),\n                      periode.forelder === Forelder.mor\n                  )\n                : getUtsettelseTekst(\n                      intl,\n                      periode.årsak,\n                      getForelderNavn(periode.forelder, navnPåForeldre),\n                      periode.forelder === Forelder.mor\n                  )}\n        </BodyShort>\n    );\n};\n\nexport default PeriodeInfo;\n","import { BodyShort } from '@navikt/ds-react';\nimport { ActionLink, Block, intlUtils } from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Periode, Periodetype } from 'uttaksplan/types/Periode';\n\ninterface Props {\n    periode: Periode;\n    handleUpdatePeriode: (periode: Periode, familiehendelsesdato: Date) => void;\n    familiehendelsesdato: Date;\n}\n\nconst PeriodeUtenUttak: FunctionComponent<Props> = ({ periode, handleUpdatePeriode, familiehendelsesdato }) => {\n    const intl = useIntl();\n\n    const onLeggTilNyPeriode = () => {\n        const { id, tidsperiode } = periode;\n\n        handleUpdatePeriode({ id, type: Periodetype.Uttak, tidsperiode } as Periode, familiehendelsesdato);\n    };\n\n    return (\n        <div>\n            <Block padBottom=\"l\">\n                <BodyShort>\n                    <FormattedMessage id=\"uttaksplan.periodeUtenUttak.info.del1\" />\n                </BodyShort>\n            </Block>\n            <Block padBottom=\"l\">\n                <BodyShort>\n                    <FormattedMessage id=\"uttaksplan.periodeUtenUttak.info.del2\" />\n                </BodyShort>\n            </Block>\n            <ActionLink onClick={onLeggTilNyPeriode}>{intlUtils(intl, 'uttaksplan.leggInnNyPeriode')}</ActionLink>\n        </div>\n    );\n};\n\nexport default PeriodeUtenUttak;\n","import { getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\n\nexport enum PeriodeFørFødselFormField {\n    fom = 'fom',\n    tom = 'tom',\n    skalIkkeHaUttakFørTermin = 'skalIkkeHaUttakFørTermin',\n}\n\nexport interface PeriodeFørFødselFormData {\n    [PeriodeFørFødselFormField.fom]: Date | undefined;\n    [PeriodeFørFødselFormField.tom]: Date | undefined;\n    [PeriodeFørFødselFormField.skalIkkeHaUttakFørTermin]: boolean;\n}\n\nexport const PeriodeFørFødselFormComponents = getTypedFormComponents<\n    PeriodeFørFødselFormField,\n    PeriodeFørFødselFormData\n>();\n","import { hasValue } from '@navikt/fp-common';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport { isValidTidsperiode } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { PeriodeFørFødselFormData, PeriodeFørFødselFormField } from './periodeFørFødselFormConfig';\n\nconst PeriodeFørFødselFormConfig: QuestionConfig<PeriodeFørFødselFormData, PeriodeFørFødselFormField> = {\n    [PeriodeFørFødselFormField.fom]: {\n        isAnswered: ({ fom }) => hasValue(fom),\n        isIncluded: ({ skalIkkeHaUttakFørTermin }) => !skalIkkeHaUttakFørTermin,\n    },\n    [PeriodeFørFødselFormField.tom]: {\n        isAnswered: ({ tom }) => hasValue(tom),\n        isIncluded: ({ skalIkkeHaUttakFørTermin }) => !skalIkkeHaUttakFørTermin,\n    },\n    [PeriodeFørFødselFormField.skalIkkeHaUttakFørTermin]: {\n        isAnswered: () => true,\n        isIncluded: () => true,\n        visibilityFilter: ({ fom, tom, skalIkkeHaUttakFørTermin }) =>\n            skalIkkeHaUttakFørTermin ? true : isValidTidsperiode({ fom, tom }),\n    },\n};\n\nexport const periodeFørFødselFormQuestionsConfig = Questions<PeriodeFørFødselFormData, PeriodeFørFødselFormField>(\n    PeriodeFørFødselFormConfig\n);\n","import uttaksConstants from 'app/constants';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport dayjs from 'dayjs';\nimport { ForeldrepengerFørFødselUttaksperiode, Periode, Periodetype } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { PeriodeFørFødselFormData, PeriodeFørFødselFormField } from './periodeFørFødselFormConfig';\n\nexport const initialValues: PeriodeFørFødselFormData = {\n    [PeriodeFørFødselFormField.fom]: undefined,\n    [PeriodeFørFødselFormField.tom]: undefined,\n    [PeriodeFørFødselFormField.skalIkkeHaUttakFørTermin]: false,\n};\n\nexport const getPeriodeFørFødselFormInitialValues = (\n    periode: ForeldrepengerFørFødselUttaksperiode,\n    familiehendelsesdato: Date\n): PeriodeFørFødselFormData => {\n    const sisteUttaksagFørFødsel = Uttaksdagen(dayjs(familiehendelsesdato).toDate()).forrige();\n    const førsteUttaksdag3UkerFørFødsel = Uttaksdagen(sisteUttaksagFørFødsel).trekkFra(\n        uttaksConstants.ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5 - 1\n    );\n    const fom = periode.tidsperiode.fom !== undefined ? periode.tidsperiode.fom : førsteUttaksdag3UkerFørFødsel;\n    const tom = periode.tidsperiode.tom !== undefined ? periode.tidsperiode.tom : sisteUttaksagFørFødsel;\n    return {\n        ...initialValues,\n        fom,\n        tom,\n        skalIkkeHaUttakFørTermin: periode.skalIkkeHaUttakFørTermin,\n    };\n};\n\nexport const mapPeriodeFørFødselFormToPeriode = (\n    values: Partial<PeriodeFørFødselFormData>,\n    periode: ForeldrepengerFørFødselUttaksperiode\n): Periode => {\n    return {\n        type: Periodetype.Uttak,\n        id: periode.id,\n        forelder: periode.forelder,\n        konto: StønadskontoType.ForeldrepengerFørFødsel,\n        tidsperiode: {\n            fom: values.fom!,\n            tom: values.tom!,\n        },\n        skalIkkeHaUttakFørTermin: !!values.skalIkkeHaUttakFørTermin,\n    };\n};\n","import { Block, intlUtils } from '@navikt/fp-common';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { isValidTidsperiode } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { ISOStringToDate } from 'app/utils/dateUtils';\nimport { FunctionComponent, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport TidsperiodeDisplay from 'uttaksplan/components/tidsperiode-display/TidsperiodeDisplay';\nimport UttakEndreTidsperiodeSpørsmål from 'uttaksplan/components/uttak-endre-tidsperiode-spørsmål/UttakEndreTidsperiodeSpørsmål';\nimport { ForeldrepengerFørFødselUttaksperiode, Periode, Utsettelsesperiode } from 'uttaksplan/types/Periode';\nimport { SubmitListener } from '../submit-listener/SubmitListener';\nimport TidsperiodeForm from '../tidsperiode-form/TidsperiodeForm';\nimport {\n    PeriodeFørFødselFormComponents,\n    PeriodeFørFødselFormData,\n    PeriodeFørFødselFormField,\n} from './periodeFørFødselFormConfig';\nimport { periodeFørFødselFormQuestionsConfig } from './periodeFørFødselFormQuestionsConfig';\nimport { getPeriodeFørFødselFormInitialValues, mapPeriodeFørFødselFormToPeriode } from './periodeFørFødselFormUtils';\n\ninterface Props {\n    periode: ForeldrepengerFørFødselUttaksperiode;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n    familiehendelsesdato: Date;\n    erFarEllerMedmor: boolean;\n    morHarRett: boolean;\n    situasjon: Situasjon;\n    utsettelserIPlan: Utsettelsesperiode[];\n}\n\nconst PeriodeFørFødselForm: FunctionComponent<Props> = ({\n    periode,\n    familiehendelsesdato,\n    handleUpdatePeriode,\n    erFarEllerMedmor,\n    morHarRett,\n    situasjon,\n    utsettelserIPlan,\n}) => {\n    const { tidsperiode } = periode;\n    const [tidsperiodeIsOpen, setTidsperiodeIsOpen] = useState(false);\n    const intl = useIntl();\n\n    const toggleVisTidsperiode = () => {\n        setTidsperiodeIsOpen(!tidsperiodeIsOpen);\n    };\n\n    const handleCleanup = (\n        values: PeriodeFørFødselFormData,\n        _visibility: QuestionVisibility<PeriodeFørFødselFormField, undefined>\n    ): PeriodeFørFødselFormData => {\n        return values;\n    };\n\n    return (\n        <PeriodeFørFødselFormComponents.FormikWrapper\n            initialValues={getPeriodeFørFødselFormInitialValues(periode, familiehendelsesdato)}\n            onSubmit={(values) =>\n                handleUpdatePeriode(mapPeriodeFørFødselFormToPeriode(values, periode), familiehendelsesdato)\n            }\n            renderForm={({ setFieldValue, values }) => {\n                const visibility = periodeFørFødselFormQuestionsConfig.getVisbility(values as PeriodeFørFødselFormData);\n\n                return (\n                    <>\n                        <Block\n                            visible={\n                                !isValidTidsperiode(tidsperiode) && visibility.isVisible(PeriodeFørFødselFormField.fom)\n                            }\n                            padBottom=\"l\"\n                        >\n                            <TidsperiodeForm\n                                tidsperiode={tidsperiode}\n                                familiehendelsesdato={familiehendelsesdato}\n                                onBekreft={(values) => {\n                                    setFieldValue(PeriodeFørFødselFormField.fom, ISOStringToDate(values.fom));\n                                    setFieldValue(PeriodeFørFødselFormField.tom, ISOStringToDate(values.tom));\n                                }}\n                                ugyldigeTidsperioder={undefined}\n                                utsettelserIPlan={utsettelserIPlan}\n                                erFarEllerMedmor={erFarEllerMedmor}\n                                morHarRett={morHarRett}\n                                situasjon={situasjon}\n                                erFarMedmorOgHarAleneomsorg={false}\n                            />\n                        </Block>\n                        <PeriodeFørFødselFormComponents.Form includeButtons={false}>\n                            <SubmitListener\n                                cleanup={() => handleCleanup(values as PeriodeFørFødselFormData, visibility)}\n                            />\n\n                            <Block\n                                visible={\n                                    isValidTidsperiode(tidsperiode) &&\n                                    visibility.isVisible(PeriodeFørFødselFormField.fom)\n                                }\n                                padBottom=\"l\"\n                            >\n                                <TidsperiodeDisplay\n                                    tidsperiode={tidsperiode}\n                                    toggleVisTidsperiode={toggleVisTidsperiode}\n                                />\n                                <UttakEndreTidsperiodeSpørsmål\n                                    periode={periode}\n                                    familiehendelsesdato={familiehendelsesdato}\n                                    ugyldigeTidsperioder={undefined}\n                                    utsettelserIPlan={utsettelserIPlan}\n                                    onBekreft={(values) => {\n                                        toggleVisTidsperiode();\n                                        setFieldValue(PeriodeFørFødselFormField.fom, values.fom);\n                                        setFieldValue(PeriodeFørFødselFormField.tom, values.tom);\n                                    }}\n                                    changeTidsperiode={(values) => {\n                                        setFieldValue(PeriodeFørFødselFormField.fom, values.fom);\n                                        setFieldValue(PeriodeFørFødselFormField.tom, values.tom);\n                                    }}\n                                    tidsperiode={tidsperiode}\n                                    onAvbryt={() => toggleVisTidsperiode()}\n                                    visible={tidsperiodeIsOpen}\n                                    erFarEllerMedmor={erFarEllerMedmor}\n                                    morHarRett={morHarRett}\n                                    situasjon={situasjon}\n                                    erFarMedmorOgHarAleneomsorg={false}\n                                />\n                            </Block>\n\n                            <Block\n                                visible={visibility.isVisible(PeriodeFørFødselFormField.skalIkkeHaUttakFørTermin)}\n                                padBottom=\"l\"\n                            >\n                                <PeriodeFørFødselFormComponents.Checkbox\n                                    name={PeriodeFørFødselFormField.skalIkkeHaUttakFørTermin}\n                                    label={intlUtils(intl, 'uttaksplan.periodeFørFødselForm.skalIkkeHaUttakFørTermin')}\n                                />\n                            </Block>\n                        </PeriodeFørFødselFormComponents.Form>\n                    </>\n                );\n            }}\n        />\n    );\n};\n\nexport default PeriodeFørFødselForm;\n","import { ActionLink, bemUtils } from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { InfoPeriode } from 'uttaksplan/types/Periode';\nimport { getSlettPeriodeTekst } from 'uttaksplan/utils/periodeUtils';\nimport './slettbarAvslåttPeriode.less';\n\ninterface Props {\n    periode: InfoPeriode;\n    handleDeletePeriode: (periodeId: string) => void;\n}\n\nconst SlettbarAvslåttPeriode: FunctionComponent<Props> = ({ periode, handleDeletePeriode }) => {\n    const bem = bemUtils('slettbarAvslåttPeriode');\n    const onSlettPeriode = () => {\n        handleDeletePeriode(periode.id);\n    };\n    return (\n        <div className={bem.element('wrapper')}>\n            <ActionLink onClick={onSlettPeriode}>\n                <FormattedMessage id={getSlettPeriodeTekst(periode.type)} />\n            </ActionLink>\n        </div>\n    );\n};\n\nexport default SlettbarAvslåttPeriode;\n","import { IntlShape } from 'react-intl';\nimport { bemUtils, Block } from '@navikt/fp-common';\nimport AnnenForelder from 'app/context/types/AnnenForelder';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport classNames from 'classnames';\nimport { FunctionComponent } from 'react';\nimport {\n    isAvslåttPeriode,\n    isForeldrepengerFørFødselUttaksperiode,\n    isInfoPeriode,\n    isSlettbarAvslåttPeriode,\n    Periode,\n    Periodetype,\n    Utsettelsesperiode,\n} from 'uttaksplan/types/Periode';\nimport { VeilederMessage } from 'uttaksplan/validering/veilederInfo/types';\nimport VeilederMeldinger from 'uttaksplan/validering/veilederInfo/VeilederMeldinger';\nimport PeriodelisteItemHeader from '../periodeliste-item-header/PeriodelisteItemHeader';\nimport PeriodeHull from '../perioder/PeriodeHull';\nimport PeriodeInfo from '../perioder/PeriodeInfo';\nimport PeriodeUtenUttak from '../perioder/PeriodeUtenUttak';\nimport PeriodeFørFødselForm from '../uttaks-forms/periode-før-fødsel-form/PeriodeFørFødselForm';\nimport PeriodeUtsettelseForm from '../uttaks-forms/periode-utsettelse-form/PeriodeUtsettelseForm';\nimport PeriodeUttakForm from '../uttaks-forms/periode-uttak-form/PeriodeUttakForm';\n\nimport './periodelisteItem.less';\nimport { Accordion } from '@navikt/ds-react';\nimport { PeriodeValidState } from 'uttaksplan/Uttaksplan';\nimport SlettbarAvslåttPeriode from '../perioder/SlettbarAvslåttPeriode';\n\ninterface Props {\n    egenPeriode: boolean;\n    periode: Periode;\n    isOpen: boolean;\n    toggleIsOpen: (id: string) => void;\n    familiehendelsesdato: Date;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n    stønadskontoer: TilgjengeligStønadskonto[];\n    navnPåForeldre: NavnPåForeldre;\n    annenForelder: AnnenForelder;\n    arbeidsforhold: Arbeidsforhold[];\n    handleDeletePeriode: (periodeId: string) => void;\n    erFarEllerMedmor: boolean;\n    erFlerbarnssøknad: boolean;\n    erAleneOmOmsorg: boolean;\n    erDeltUttak: boolean;\n    situasjon: Situasjon;\n    meldinger?: VeilederMessage[];\n    erMorUfør: boolean;\n    annenForelderSamtidigUttakPeriode: Periode | undefined;\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean;\n    setPerioderErGyldige: React.Dispatch<React.SetStateAction<PeriodeValidState[]>>;\n    erEndringssøknad: boolean;\n    termindato: Date | undefined;\n    antallBarn: number;\n    utsettelserIPlan: Utsettelsesperiode[];\n    intl: IntlShape;\n    periodeErGyldig: boolean;\n}\n\nconst renderPeriodeListeInnhold = (\n    periode: Periode,\n    familiehendelsesdato: Date,\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void,\n    stønadskontoer: TilgjengeligStønadskonto[],\n    navnPåForeldre: NavnPåForeldre,\n    annenForelder: AnnenForelder,\n    toggleIsOpen: (id: string) => void,\n    arbeidsforhold: Arbeidsforhold[],\n    handleDeletePeriode: (periodeId: string) => void,\n    erFarEllerMedmor: boolean,\n    erFlerbarnssøknad: boolean,\n    erAleneOmOmsorg: boolean,\n    erDeltUttak: boolean,\n    situasjon: Situasjon,\n    erMorUfør: boolean,\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean,\n    setPerioderErGyldige: React.Dispatch<React.SetStateAction<PeriodeValidState[]>>,\n    erEndringssøknad: boolean,\n    termindato: Date | undefined,\n    antallBarn: number,\n    utsettelserIPlan: Utsettelsesperiode[],\n    intl: IntlShape,\n    isOpen: boolean,\n) => {\n    switch (periode.type) {\n        case Periodetype.Uttak:\n        case Periodetype.Overføring:\n        case Periodetype.Opphold:\n            if (isForeldrepengerFørFødselUttaksperiode(periode)) {\n                return (\n                    <PeriodeFørFødselForm\n                        periode={periode}\n                        familiehendelsesdato={familiehendelsesdato}\n                        handleUpdatePeriode={handleUpdatePeriode}\n                        erFarEllerMedmor={erFarEllerMedmor}\n                        morHarRett={!søkerErFarEllerMedmorOgKunDeHarRett}\n                        situasjon={situasjon}\n                        utsettelserIPlan={utsettelserIPlan}\n                    />\n                );\n            }\n\n            return (\n                <PeriodeUttakForm\n                    periode={periode}\n                    familiehendelsesdato={familiehendelsesdato}\n                    handleUpdatePeriode={handleUpdatePeriode}\n                    stønadskontoer={stønadskontoer}\n                    navnPåForeldre={navnPåForeldre}\n                    annenForelder={annenForelder}\n                    toggleIsOpen={toggleIsOpen}\n                    arbeidsforhold={arbeidsforhold}\n                    handleDeletePeriode={handleDeletePeriode}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    erFlerbarnssøknad={erFlerbarnssøknad}\n                    erAleneOmOmsorg={erAleneOmOmsorg}\n                    erDeltUttak={erDeltUttak}\n                    situasjon={situasjon}\n                    erMorUfør={erMorUfør}\n                    erEndringssøknad={erEndringssøknad}\n                    setPerioderErGyldige={setPerioderErGyldige}\n                    termindato={termindato}\n                    morHarRett={!søkerErFarEllerMedmorOgKunDeHarRett}\n                    antallBarn={antallBarn}\n                    utsettelserIPlan={utsettelserIPlan}\n                    intl={intl}\n                    isOpen={isOpen}\n                />\n            );\n        case Periodetype.Utsettelse:\n            return (\n                <PeriodeUtsettelseForm\n                    periode={periode}\n                    familiehendelsesdato={familiehendelsesdato}\n                    handleUpdatePeriode={handleUpdatePeriode}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    erAleneOmOmsorg={erAleneOmOmsorg}\n                    handleDeletePeriode={handleDeletePeriode}\n                    toggleIsOpen={toggleIsOpen}\n                    navnPåForeldre={navnPåForeldre}\n                    erMorUfør={erMorUfør}\n                    søkerErFarEllerMedmorOgKunDeHarRett={søkerErFarEllerMedmorOgKunDeHarRett}\n                    arbeidsforhold={arbeidsforhold}\n                    situasjon={situasjon}\n                    utsettelserIPlan={utsettelserIPlan}\n                    setPerioderErGyldige={setPerioderErGyldige}\n                    isOpen={isOpen}\n                />\n            );\n        case Periodetype.Hull:\n            return (\n                <PeriodeHull\n                    erAleneOmOmsorg={erAleneOmOmsorg}\n                    erDeltUttak={erDeltUttak}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    periode={periode}\n                    familiehendelsesdato={familiehendelsesdato}\n                    navnAnnenForelder={erFarEllerMedmor ? navnPåForeldre.mor : navnPåForeldre.farMedmor}\n                    handleUpdatePeriode={handleUpdatePeriode}\n                />\n            );\n        case Periodetype.PeriodeUtenUttak:\n            return (\n                <PeriodeUtenUttak\n                    periode={periode}\n                    handleUpdatePeriode={handleUpdatePeriode}\n                    familiehendelsesdato={familiehendelsesdato}\n                />\n            );\n        case Periodetype.Info:\n            return (\n                <>\n                    {periode.visPeriodeIPlan && !isAvslåttPeriode(periode) && (\n                        <PeriodeInfo periode={periode} navnPåForeldre={navnPåForeldre} />\n                    )}\n                    {isSlettbarAvslåttPeriode(periode) && (\n                        <SlettbarAvslåttPeriode periode={periode} handleDeletePeriode={handleDeletePeriode} />\n                    )}\n                </>\n            );\n        default:\n            return <div>Ingen visning</div>;\n    }\n};\n\nconst PeriodelisteItem: FunctionComponent<Props> = ({\n    egenPeriode,\n    periode,\n    isOpen,\n    toggleIsOpen,\n    familiehendelsesdato,\n    handleUpdatePeriode,\n    stønadskontoer,\n    navnPåForeldre,\n    annenForelder,\n    arbeidsforhold,\n    handleDeletePeriode,\n    erFarEllerMedmor,\n    erFlerbarnssøknad,\n    erAleneOmOmsorg,\n    erDeltUttak,\n    situasjon,\n    meldinger = [],\n    erMorUfør,\n    annenForelderSamtidigUttakPeriode,\n    søkerErFarEllerMedmorOgKunDeHarRett,\n    erEndringssøknad,\n    setPerioderErGyldige,\n    termindato,\n    antallBarn,\n    utsettelserIPlan,\n    intl,\n    periodeErGyldig,\n}) => {\n    const bem = bemUtils('periodelisteItem');\n    let melding = meldinger.length > 0 ? meldinger[0] : undefined;\n\n    if (!periodeErGyldig) {\n        melding = {\n            type: 'feil',\n            contentIntlKey: 'uttaksplan.validering.feil.erAllePeriodeSkjemaspørsmålBesvart',\n        };\n    }\n\n    if (isInfoPeriode(periode) && !periode.visPeriodeIPlan) {\n        return null;\n    }\n\n    const toggleFocusAndOpen = () => {\n        const headerButton = window.document.getElementById(periode.id);\n\n        if (headerButton) {\n            setTimeout(() => {\n                headerButton.focus();\n            }, 150);\n        }\n\n        toggleIsOpen(periode.id);\n    };\n\n    return (\n        <article\n            className={classNames(bem.block, egenPeriode ? bem.modifier('egenPeriode') : bem.modifier('transparent'))}\n        >\n            <Accordion>\n                <Accordion.Item open={isOpen}>\n                    <Accordion.Header onClick={() => toggleIsOpen(periode.id)} className={bem.element('header')}>\n                        <PeriodelisteItemHeader\n                            egenPeriode={egenPeriode}\n                            periode={periode}\n                            navnPåForeldre={navnPåForeldre}\n                            melding={melding}\n                            annenForelderSamtidigUttakPeriode={annenForelderSamtidigUttakPeriode}\n                            familiehendelsesdato={familiehendelsesdato}\n                            termindato={termindato}\n                            situasjon={situasjon}\n                            erFarEllerMedmor={erFarEllerMedmor}\n                            erAleneOmOmsorg={erAleneOmOmsorg}\n                        />\n                    </Accordion.Header>\n                    <Accordion.Content>\n                        <Block visible={meldinger.length > 0}>\n                            <VeilederMeldinger\n                                stil=\"default\"\n                                meldinger={meldinger.filter((m) => m.avvikType !== 'skjema')}\n                            />\n                        </Block>\n                        {renderPeriodeListeInnhold(\n                            periode,\n                            familiehendelsesdato,\n                            handleUpdatePeriode,\n                            stønadskontoer,\n                            navnPåForeldre,\n                            annenForelder,\n                            toggleFocusAndOpen,\n                            arbeidsforhold,\n                            handleDeletePeriode,\n                            erFarEllerMedmor,\n                            erFlerbarnssøknad,\n                            erAleneOmOmsorg,\n                            erDeltUttak,\n                            situasjon,\n                            erMorUfør,\n                            søkerErFarEllerMedmorOgKunDeHarRett,\n                            setPerioderErGyldige,\n                            erEndringssøknad,\n                            termindato,\n                            antallBarn,\n                            utsettelserIPlan,\n                            intl,\n                            isOpen,\n                        )}\n                    </Accordion.Content>\n                </Accordion.Item>\n            </Accordion>\n        </article>\n    );\n};\n\nexport default PeriodelisteItem;\n","import { UttaksplanIkonProps } from 'uttaksplan/components/uttaksplan-ikon/UttaksplanIkon';\n\ninterface OwnProps {\n    fylt?: boolean;\n}\n\nconst HjerteIkon = (props: UttaksplanIkonProps & OwnProps) => {\n    const { title, fylt, ...rest } = props;\n    return fylt ? (\n        <svg focusable=\"false\" role=\"img\" aria-hidden=\"true\" width={24} height={24} {...rest}>\n            <title>{title}</title>\n            <path\n                fill=\"#ba3a26\"\n                fillRule=\"evenodd\"\n                d=\"M23 7.173c0 .41-.028.823-.083 1.243-.418 3.173-2.345 6.521-5.291 9.882a43.405 43.405 0 0 1-4.856 4.717c-.22.181-.378.307-.464.374a.5.5 0 0 1-.582.021 16.293 16.293 0 0 1-.467-.325 35.073 35.073 0 0 1-4.87-4.255C3.027 15.28 1 11.544 1 7.765 1-.286 9.586-1.719 12.003 4.612 14.42-1.616 23-.464 23 7.173z\"\n            />\n        </svg>\n    ) : (\n        <svg focusable=\"false\" role=\"img\" aria-hidden=\"true\" width={24} height={24} viewBox=\"0 0 24 24\" {...rest}>\n            <title>{title}</title>\n            <path\n                fill=\"none\"\n                fillRule=\"evenodd\"\n                stroke=\"#3E3832\"\n                strokeLinejoin=\"round\"\n                d=\"M12 22.993s10.5-8.128 10.5-15.82-9.316-8.284-10.5-.59C10.816-1.112 1.5-.52 1.5 7.764S12 22.993 12 22.993z\"\n            />\n        </svg>\n    );\n};\nexport default HjerteIkon;\n","import { bemUtils } from '@navikt/fp-common';\nimport Barn, { isAdoptertBarn, isFødtBarn } from 'app/context/types/Barn';\nimport { formaterDatoUtenDag } from 'app/utils/dateUtils';\nimport { FunctionComponent, ReactNode } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport HjerteIkon from 'uttaksplan/assets/HjerteIkon';\n\nimport './familiehendelsesdatoDisplay.less';\nimport { BodyShort } from '@navikt/ds-react';\n\ninterface Props {\n    familiehendelsedato: Date;\n    barn: Barn;\n}\n\nconst getTekst = (barn: Barn, familiehendelsedato: Date, antallBarn: number): ReactNode => {\n    if (!isAdoptertBarn(barn)) {\n        if (isFødtBarn(barn)) {\n            return (\n                <FormattedMessage\n                    id=\"uttaksplan.familiehendelsesdato.født\"\n                    values={{ antallBarn, dato: formaterDatoUtenDag(familiehendelsedato) }}\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id=\"uttaksplan.familiehendelsesdato.termin\"\n                values={{ dato: formaterDatoUtenDag(familiehendelsedato) }}\n            />\n        );\n    }\n\n    return (\n        <FormattedMessage\n            id=\"uttaksplan.familiehendelsesdato.adopsjon\"\n            values={{ antallBarn, dato: formaterDatoUtenDag(familiehendelsedato) }}\n        />\n    );\n};\n\nconst FamiliehendelsedatoDisplay: FunctionComponent<Props> = ({ familiehendelsedato, barn }) => {\n    const bem = bemUtils('familiehendelsesdatoDisplay');\n\n    return (\n        <div className={bem.block}>\n            <div className={bem.element('hjerte')}>\n                <HjerteIkon fylt={true} title=\"Hjerte\" />\n            </div>\n            <BodyShort>{getTekst(barn, familiehendelsedato, barn.antallBarn)}</BodyShort>\n        </div>\n    );\n};\n\nexport default FamiliehendelsedatoDisplay;\n","import { FunctionComponent, useState } from 'react';\nimport { bemUtils, Block, formatDate } from '@navikt/fp-common';\nimport PeriodelisteItem from './../periodeliste-item/PeriodelisteItem';\nimport { isInfoPeriode, Periode, Utsettelsesperiode } from 'uttaksplan/types/Periode';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\n\nimport './periodeliste.less';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport AnnenForelder from 'app/context/types/AnnenForelder';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { VeiledermeldingerPerPeriode } from 'uttaksplan/validering/veilederInfo/types';\nimport { getAnnenForelderSamtidigUttakPeriode } from 'uttaksplan/utils/periodeUtils';\nimport dayjs from 'dayjs';\nimport FamiliehendelsedatoDisplay from '../familiehendelsedato-display/FamiliehendelsedatoDisplay';\nimport Barn, { BarnFraNesteSak } from 'app/context/types/Barn';\nimport { FormattedMessage, IntlShape } from 'react-intl';\nimport { isValidTidsperiode } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { Alert } from '@navikt/ds-react';\nimport { PeriodeValidState } from 'uttaksplan/Uttaksplan';\n\ninterface Props {\n    uttaksplan: Periode[];\n    familiehendelsesdato: Date;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n    stønadskontoer: TilgjengeligStønadskonto[];\n    navnPåForeldre: NavnPåForeldre;\n    annenForelder: AnnenForelder;\n    arbeidsforhold: Arbeidsforhold[];\n    handleDeletePeriode: (periodeId: string) => void;\n    erFarEllerMedmor: boolean;\n    erFlerbarnssøknad: boolean;\n    erAleneOmOmsorg: boolean;\n    erDeltUttak: boolean;\n    situasjon: Situasjon;\n    meldingerPerPeriode: VeiledermeldingerPerPeriode;\n    erMorUfør: boolean;\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean;\n    setPerioderErGyldige: React.Dispatch<React.SetStateAction<PeriodeValidState[]>>;\n    erEndringssøknad: boolean;\n    termindato: Date | undefined;\n    antallBarn: number;\n    utsettelserIPlan: Utsettelsesperiode[];\n    barn: Barn;\n    barnFraNesteSak: BarnFraNesteSak | undefined;\n    intl: IntlShape;\n    perioderErGyldige: PeriodeValidState[];\n}\n\nconst getIndexOfFørstePeriodeEtterFødsel = (uttaksplan: Periode[], familiehendelsesdato: Date) => {\n    return uttaksplan.findIndex(\n        (p) => isValidTidsperiode(p.tidsperiode) && dayjs(p.tidsperiode.fom).isSameOrAfter(familiehendelsesdato)\n    );\n};\n\nconst getIndexOfSistePeriodeFørDato = (uttaksplan: Periode[], dato: Date | undefined) => {\n    if (dato !== undefined) {\n        return Math.max(0, uttaksplan.filter((p) => dayjs(p.tidsperiode.tom).isBefore(dato, 'day')).length);\n    }\n    return undefined;\n};\n\nconst Periodeliste: FunctionComponent<Props> = ({\n    uttaksplan,\n    familiehendelsesdato,\n    handleUpdatePeriode,\n    stønadskontoer,\n    navnPåForeldre,\n    annenForelder,\n    arbeidsforhold,\n    handleDeletePeriode,\n    erFarEllerMedmor,\n    erFlerbarnssøknad,\n    erAleneOmOmsorg,\n    erDeltUttak,\n    situasjon,\n    meldingerPerPeriode,\n    erMorUfør,\n    søkerErFarEllerMedmorOgKunDeHarRett,\n    setPerioderErGyldige,\n    erEndringssøknad,\n    termindato,\n    antallBarn,\n    utsettelserIPlan,\n    barn,\n    barnFraNesteSak,\n    intl,\n    perioderErGyldige,\n}) => {\n    const [openPeriodeId, setOpenPeriodeId] = useState<string>(null!);\n    const bem = bemUtils('periodeliste');\n\n    const toggleIsOpen = (id: string) => {\n        if (openPeriodeId === id) {\n            setOpenPeriodeId(null!);\n        } else {\n            setOpenPeriodeId(id);\n        }\n    };\n\n    const indexOfFørstePeriodeEtterFødsel = getIndexOfFørstePeriodeEtterFødsel(uttaksplan, familiehendelsesdato);\n    const erAllePerioderIPlanenFørFødsel = indexOfFørstePeriodeEtterFødsel === -1;\n    const indexOfSistePeriodeFørNyStøndasperiodeNyttBarn =\n        barnFraNesteSak !== undefined\n            ? getIndexOfSistePeriodeFørDato(uttaksplan, barnFraNesteSak.startdatoFørsteStønadsperiode)\n            : undefined;\n    return (\n        <div className={bem.block}>\n            {uttaksplan.map((p, index) => {\n                const periodeMedValidState = perioderErGyldige.find((periodeMedState) => periodeMedState.id === p.id);\n                const periodeErGyldig = periodeMedValidState ? periodeMedValidState.isValid : true;\n                return (\n                    <div key={p.id}>\n                        {indexOfFørstePeriodeEtterFødsel === index ? (\n                            <FamiliehendelsedatoDisplay barn={barn} familiehendelsedato={familiehendelsesdato} />\n                        ) : null}\n                        {barnFraNesteSak !== undefined &&\n                        indexOfSistePeriodeFørNyStøndasperiodeNyttBarn !== undefined &&\n                        indexOfSistePeriodeFørNyStøndasperiodeNyttBarn === index ? (\n                            <Block padBottom=\"s\">\n                                <Alert className=\"nyStønadsperiodeNesteSak\" variant=\"info\">\n                                    <FormattedMessage\n                                        id=\"uttaksplan.periodeliste.info.nyStønadsperiodeNesteSak\"\n                                        values={{\n                                            datoStønadsperiodeNyttBarn: formatDate(\n                                                barnFraNesteSak.startdatoFørsteStønadsperiode\n                                            ),\n                                        }}\n                                    />\n                                </Alert>\n                            </Block>\n                        ) : null}\n                        <PeriodelisteItem\n                            key={p.id}\n                            egenPeriode={!isInfoPeriode(p)}\n                            periode={p}\n                            isOpen={openPeriodeId === p.id}\n                            toggleIsOpen={toggleIsOpen}\n                            familiehendelsesdato={familiehendelsesdato}\n                            handleUpdatePeriode={handleUpdatePeriode}\n                            stønadskontoer={stønadskontoer}\n                            navnPåForeldre={navnPåForeldre}\n                            annenForelder={annenForelder}\n                            arbeidsforhold={arbeidsforhold}\n                            handleDeletePeriode={handleDeletePeriode}\n                            erFarEllerMedmor={erFarEllerMedmor}\n                            erFlerbarnssøknad={erFlerbarnssøknad}\n                            erAleneOmOmsorg={erAleneOmOmsorg}\n                            erDeltUttak={erDeltUttak}\n                            situasjon={situasjon}\n                            meldinger={meldingerPerPeriode[p.id]}\n                            erMorUfør={erMorUfør}\n                            annenForelderSamtidigUttakPeriode={getAnnenForelderSamtidigUttakPeriode(p, uttaksplan)}\n                            søkerErFarEllerMedmorOgKunDeHarRett={søkerErFarEllerMedmorOgKunDeHarRett}\n                            setPerioderErGyldige={setPerioderErGyldige}\n                            erEndringssøknad={erEndringssøknad}\n                            termindato={termindato}\n                            antallBarn={antallBarn}\n                            utsettelserIPlan={utsettelserIPlan}\n                            intl={intl}\n                            periodeErGyldig={periodeErGyldig}\n                        />\n                        {erAllePerioderIPlanenFørFødsel && index === uttaksplan.length - 1 ? (\n                            <FamiliehendelsedatoDisplay barn={barn} familiehendelsedato={familiehendelsesdato} />\n                        ) : null}\n                        {barnFraNesteSak !== undefined &&\n                        index === uttaksplan.length - 1 &&\n                        indexOfSistePeriodeFørNyStøndasperiodeNyttBarn === uttaksplan.length ? (\n                            <Block padBottom=\"s\">\n                                <Alert className=\"nyStønadsperiodeNesteSak\" variant=\"info\">\n                                    <FormattedMessage\n                                        id=\"uttaksplan.periodeliste.info.nyStønadsperiodeNesteSak\"\n                                        values={{\n                                            datoStønadsperiodeNyttBarn: formatDate(\n                                                barnFraNesteSak.startdatoFørsteStønadsperiode\n                                            ),\n                                        }}\n                                    />\n                                </Alert>\n                            </Block>\n                        ) : null}\n                    </div>\n                );\n            })}\n        </div>\n    );\n};\n\nexport default Periodeliste;\n","import { bemUtils, InfoBlock, intlUtils, Block, ActionLink } from '@navikt/fp-common';\nimport AnnenForelder, { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport Barn, { BarnFraNesteSak } from 'app/context/types/Barn';\nimport { Periodene } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { FunctionComponent, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Periode, Utsettelsesperiode } from 'uttaksplan/types/Periode';\nimport { VeiledermeldingerPerPeriode } from 'uttaksplan/validering/veilederInfo/types';\nimport NyPeriode from '../uttaks-forms/ny-periode/NyPeriode';\nimport Periodeliste from './../periodeliste/Periodeliste';\n\nimport './planlegger.less';\nimport { Button, Heading } from '@navikt/ds-react';\nimport { PeriodeValidState } from 'uttaksplan/Uttaksplan';\n\ninterface Props {\n    uttaksplan: Periode[];\n    familiehendelsesdato: Date;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n    stønadskontoer: TilgjengeligStønadskonto[];\n    navnPåForeldre: NavnPåForeldre;\n    annenForelder: AnnenForelder;\n    arbeidsforhold: Arbeidsforhold[];\n    handleDeletePeriode: (periodeId: string) => void;\n    handleAddPeriode: (nyPeriode: Periode, familiehendelsedato: Date) => void;\n    erFarEllerMedmor: boolean;\n    erFlerbarnssøknad: boolean;\n    erAleneOmOmsorg: boolean;\n    erDeltUttak: boolean;\n    situasjon: Situasjon;\n    meldingerPerPeriode: VeiledermeldingerPerPeriode;\n    erMorUfør: boolean;\n    setPerioderErGyldige: React.Dispatch<React.SetStateAction<PeriodeValidState[]>>;\n    erEndringssøknad: boolean;\n    setSlettUttaksplanModalOpen: (isOpen: boolean) => void;\n    setResetUttaksplanModalOpen: (isOpen: boolean) => void;\n    termindato: Date | undefined;\n    barn: Barn;\n    utsettelserIPlan: Utsettelsesperiode[];\n    barnFraNesteSak: BarnFraNesteSak | undefined;\n    perioderErGyldige: PeriodeValidState[];\n}\n\nconst Planlegger: FunctionComponent<Props> = ({\n    uttaksplan,\n    familiehendelsesdato,\n    handleUpdatePeriode,\n    stønadskontoer,\n    navnPåForeldre,\n    annenForelder,\n    arbeidsforhold,\n    handleDeletePeriode,\n    handleAddPeriode,\n    erFarEllerMedmor,\n    erFlerbarnssøknad,\n    erAleneOmOmsorg,\n    erDeltUttak,\n    situasjon,\n    meldingerPerPeriode,\n    erMorUfør,\n    setPerioderErGyldige,\n    erEndringssøknad,\n    setSlettUttaksplanModalOpen,\n    setResetUttaksplanModalOpen,\n    termindato,\n    barn,\n    utsettelserIPlan,\n    barnFraNesteSak,\n    perioderErGyldige,\n}) => {\n    const intl = useIntl();\n    const bem = bemUtils('planlegger');\n    const [nyPeriodeFormIsVisible, setNyPeriodeFormIsVisible] = useState(false);\n    const [isUtsettelse, setIsUtsettelse] = useState(false);\n    const nesteLedigeUttaksdato = Periodene(uttaksplan).getFørsteUttaksdagEtterSistePeriode();\n    const annenForelderErOppgitMenHarIkkeRett =\n        isAnnenForelderOppgitt(annenForelder) &&\n        !annenForelder.harRettPåForeldrepengerINorge &&\n        !annenForelder.harRettPåForeldrepengerIEØS;\n    const søkerErFarEllerMedmorOgKunDeHarRett =\n        erFarEllerMedmor && !erAleneOmOmsorg && annenForelderErOppgitMenHarIkkeRett;\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <InfoBlock>\n                    <Block padBottom=\"xl\">\n                        <section>\n                            <div className={bem.element('tittel')}>\n                                <div className={bem.element('tittelLinkWrapper')}>\n                                    <Heading size=\"medium\">{intlUtils(intl, 'uttaksplan.dinPlan')}</Heading>\n                                    {erEndringssøknad && (\n                                        <ActionLink\n                                            onClick={() => setResetUttaksplanModalOpen(true)}\n                                            className={bem.element('resetPlan')}\n                                        >\n                                            <FormattedMessage id=\"uttaksplan.resetPlan.tittel\" />\n                                        </ActionLink>\n                                    )}\n                                    <ActionLink\n                                        onClick={() => setSlettUttaksplanModalOpen(true)}\n                                        className={bem.element('slettPlan')}\n                                    >\n                                        <FormattedMessage id=\"uttaksplan.slettPlan.tittel\" />\n                                    </ActionLink>\n                                </div>\n                            </div>\n\n                            <Periodeliste\n                                uttaksplan={uttaksplan}\n                                familiehendelsesdato={familiehendelsesdato}\n                                handleUpdatePeriode={handleUpdatePeriode}\n                                stønadskontoer={stønadskontoer}\n                                navnPåForeldre={navnPåForeldre}\n                                annenForelder={annenForelder}\n                                arbeidsforhold={arbeidsforhold}\n                                handleDeletePeriode={handleDeletePeriode}\n                                erFarEllerMedmor={erFarEllerMedmor}\n                                erFlerbarnssøknad={erFlerbarnssøknad}\n                                erAleneOmOmsorg={erAleneOmOmsorg}\n                                erDeltUttak={erDeltUttak}\n                                situasjon={situasjon}\n                                meldingerPerPeriode={meldingerPerPeriode}\n                                erMorUfør={erMorUfør}\n                                søkerErFarEllerMedmorOgKunDeHarRett={søkerErFarEllerMedmorOgKunDeHarRett}\n                                setPerioderErGyldige={setPerioderErGyldige}\n                                erEndringssøknad={erEndringssøknad}\n                                termindato={termindato}\n                                antallBarn={barn.antallBarn}\n                                utsettelserIPlan={utsettelserIPlan}\n                                barn={barn}\n                                barnFraNesteSak={barnFraNesteSak}\n                                intl={intl}\n                                perioderErGyldige={perioderErGyldige}\n                            />\n                        </section>\n                    </Block>\n                    {nyPeriodeFormIsVisible && (\n                        <div style={{ backgroundColor: 'white', padding: '1rem' }}>\n                            <NyPeriode\n                                setNyPeriodeFormIsVisible={setNyPeriodeFormIsVisible}\n                                annenForelder={annenForelder}\n                                arbeidsforhold={arbeidsforhold}\n                                familiehendelsesdato={familiehendelsesdato}\n                                isUtsettelse={isUtsettelse}\n                                navnPåForeldre={navnPåForeldre}\n                                stønadskontoer={stønadskontoer}\n                                handleAddPeriode={handleAddPeriode}\n                                erFarEllerMedmor={erFarEllerMedmor}\n                                erFlerbarnssøknad={erFlerbarnssøknad}\n                                erAleneOmOmsorg={erAleneOmOmsorg}\n                                erDeltUttak={erDeltUttak}\n                                situasjon={situasjon}\n                                erMorUfør={erMorUfør}\n                                setPerioderErGyldige={setPerioderErGyldige}\n                                nesteLedigeUttaksdato={nesteLedigeUttaksdato}\n                                søkerErFarEllerMedmorOgKunDeHarRett={søkerErFarEllerMedmorOgKunDeHarRett}\n                                erEndringssøknad={erEndringssøknad}\n                                termindato={termindato}\n                                antallBarn={barn.antallBarn}\n                                utsettelserIPlan={utsettelserIPlan}\n                                intl={intl}\n                            />\n                        </div>\n                    )}\n                </InfoBlock>\n            </Block>\n            {!nyPeriodeFormIsVisible && (\n                <Block padBottom=\"l\">\n                    <div className={bem.element('knapperad')}>\n                        <Button\n                            type=\"button\"\n                            variant=\"secondary\"\n                            onClick={() => {\n                                setNyPeriodeFormIsVisible(true);\n                                setIsUtsettelse(false);\n                            }}\n                        >\n                            Legg til ny periode\n                        </Button>\n                        <Button\n                            type=\"button\"\n                            variant=\"secondary\"\n                            onClick={() => {\n                                setNyPeriodeFormIsVisible(true);\n                                setIsUtsettelse(true);\n                            }}\n                        >\n                            Legg til utsettelse\n                        </Button>\n                    </div>\n                </Block>\n            )}\n        </>\n    );\n};\n\nexport default Planlegger;\n","import { ForeldreparForelder } from 'app/types/ForeldreparSituasjonTypes';\n\nimport { getForeldreparIkon } from './foreldreparUtils';\n\ninterface Props {\n    forelder: ForeldreparForelder;\n    width?: number;\n}\n\nconst ForelderIkon: React.FunctionComponent<Props> = ({ forelder, width }) => {\n    const scale = width ? width / 31 : 1;\n    const scaledWidth = 31 * scale;\n    const scaledHeight = 45 * scale;\n\n    return getForeldreparIkon(forelder, 'forelderIkon', scaledWidth, scaledHeight);\n};\n\nexport default ForelderIkon;\n","import { Perioden } from 'app/steps/uttaksplan-info/utils/Perioden';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { getFloatFromString } from 'app/utils/numberUtils';\nimport {\n    AvslåttPeriode,\n    InfoPeriode,\n    isAvslåttPeriode,\n    isInfoPeriode,\n    isOppholdsperiode,\n    isOverføringsperiode,\n    isUttaksperiode,\n    Oppholdsperiode,\n    Overføringsperiode,\n    Periode,\n    Periodetype,\n    UttakAnnenPartInfoPeriode,\n    Uttaksperiode,\n} from 'uttaksplan/types/Periode';\nimport { PeriodeInfoType } from 'uttaksplan/types/PeriodeInfoType';\nimport { StønadskontoUttak } from 'uttaksplan/types/StønadskontoUttak';\nimport { getStønadskontoFromOppholdsårsak } from './periodeUtils';\n\nexport const finnAntallDagerÅTrekke = (periode: Periode): number => {\n    const dager = Perioden(periode).getAntallUttaksdager();\n    if (isUttaksperiode(periode)) {\n        const periodeErGradert = periode.stillingsprosent !== undefined;\n        const periodeErSamtidigUttak = periode.samtidigUttakProsent !== undefined;\n\n        if ((periodeErGradert && periodeErSamtidigUttak) || periodeErGradert) {\n            const graderingsProsent = (100 - getFloatFromString(periode.stillingsprosent)!) / 100;\n\n            return dager * graderingsProsent;\n        } else if (periodeErSamtidigUttak) {\n            return dager * (getFloatFromString(periode.samtidigUttakProsent)! / 100);\n        } else {\n            return dager;\n        }\n    }\n    return dager;\n};\n\nexport const getAllePerioderMedUttaksinfoFraUttaksplan = (perioder: Periode[]): Uttaksperiode[] => {\n    return [\n        ...perioder.filter(isUttaksperiode),\n        ...getUttakFraOppholdsperioder(perioder.filter(isOppholdsperiode)),\n        ...getUttakFraOverføringsperioder(perioder.filter(isOverføringsperiode)),\n        ...getUttakFraInfoperioder(perioder.filter(isInfoPeriode)),\n        ...getUttakFraAvslåttePerioder(perioder.filter(isAvslåttPeriode)),\n    ];\n};\n\nexport const beregnGjenståendeUttaksdager = (\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    uttaksplan: Periode[],\n    beregnDagerBrukt: boolean\n): StønadskontoUttak[] => {\n    const alleUttakIUttaksplan = getAllePerioderMedUttaksinfoFraUttaksplan(uttaksplan);\n    return tilgjengeligeStønadskontoer.map((konto): StønadskontoUttak => {\n        let antallDager = beregnDagerBrukt ? 0 : konto.dager;\n        const uttaksplanPerioder = alleUttakIUttaksplan.filter((p) => p.konto === konto.konto);\n        if (uttaksplanPerioder) {\n            uttaksplanPerioder.forEach((p: Periode) => {\n                if (p.type === Periodetype.Uttak || p.type === Periodetype.Overføring || isAvslåttPeriode(p)) {\n                    antallDager = beregnDagerBrukt\n                        ? antallDager + finnAntallDagerÅTrekke(p)\n                        : antallDager - finnAntallDagerÅTrekke(p);\n                }\n            });\n\n            antallDager = beregnDagerBrukt ? Math.floor(antallDager) : Math.ceil(antallDager);\n        }\n\n        return {\n            konto: konto.konto,\n            dager: antallDager,\n        };\n    });\n};\n\nexport const beregnBrukteUttaksdager = (\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    uttaksplan: Periode[]\n): StønadskontoUttak[] => {\n    return beregnGjenståendeUttaksdager(tilgjengeligeStønadskontoer, uttaksplan, true);\n};\n\nconst getUttakFraOppholdsperioder = (oppholdsperioder: Oppholdsperiode[]): Uttaksperiode[] => {\n    if (oppholdsperioder.length === 0) {\n        return [];\n    }\n    return oppholdsperioder.map(\n        (opphold: Oppholdsperiode): Uttaksperiode => ({\n            id: opphold.id,\n            tidsperiode: opphold.tidsperiode,\n            type: Periodetype.Uttak,\n            konto: getStønadskontoFromOppholdsårsak(opphold.årsak)!,\n            forelder: opphold.forelder,\n        })\n    );\n};\nconst getUttakFraOverføringsperioder = (overføringer: Overføringsperiode[]): Uttaksperiode[] => {\n    if (overføringer.length === 0) {\n        return [];\n    }\n    return overføringer.map(\n        (overføring): Uttaksperiode => ({\n            id: overføring.id,\n            tidsperiode: overføring.tidsperiode,\n            type: Periodetype.Uttak,\n            konto: overføring.konto,\n            forelder: overføring.forelder,\n        })\n    );\n};\n\nconst getUttakFraInfoperioder = (perioder: InfoPeriode[]): Uttaksperiode[] => {\n    if (perioder.length === 0) {\n        return [];\n    }\n    const oppholdAnnenPart: UttakAnnenPartInfoPeriode[] = [];\n    perioder\n        .filter((periode) => isAvslåttPeriode(periode) === false)\n        .forEach((periode) => {\n            if (periode.infotype === PeriodeInfoType.uttakAnnenPart) {\n                oppholdAnnenPart.push(periode);\n            }\n        });\n    return oppholdAnnenPart.map((periode): Uttaksperiode => {\n        const { type, årsak, ...rest } = periode;\n        return {\n            type: Periodetype.Uttak,\n            konto: getStønadskontoFromOppholdsårsak(periode.årsak),\n            ...rest,\n        };\n    });\n};\n\nconst getUttakFraAvslåttePerioder = (perioder: AvslåttPeriode[]): Uttaksperiode[] => {\n    if (perioder.length === 0) {\n        return [];\n    }\n\n    return perioder\n        .filter((p) => p.avslåttPeriodeType === Periodetype.Uttak)\n        .map(\n            (periode): Uttaksperiode => ({\n                type: Periodetype.Uttak,\n                konto: periode.kontoType!,\n                tidsperiode: periode.tidsperiode,\n                id: periode.id,\n                forelder: periode.forelder,\n            })\n        );\n};\n","import { beregnBrukteUttaksdager, getAllePerioderMedUttaksinfoFraUttaksplan } from 'uttaksplan/utils/uttaksPlanStatus';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { isUttaksperiode, Periode, Uttaksperiode } from 'uttaksplan/types/Periode';\nimport { Forelder } from 'app/types/Forelder';\nimport { StønadskontoUttak } from 'uttaksplan/types/StønadskontoUttak';\nimport { Periodene } from 'app/steps/uttaksplan-info/utils/Periodene';\n\ninterface ForeldersBrukteDager {\n    førTermin: StønadskontoUttak[];\n    etterTermin: StønadskontoUttak[];\n    alle: StønadskontoUttak[];\n    dagerTotalt: number;\n    dagerEgneKvoter: number;\n    dagerAnnenForeldersKvote: number;\n    dagerFellesperiode: number;\n}\n\nexport interface BrukteDager {\n    mor: ForeldersBrukteDager;\n    farMedmor: ForeldersBrukteDager;\n    alle: StønadskontoUttak[];\n}\n\nconst isMorsPeriode = (periode: Uttaksperiode): boolean => {\n    return periode.forelder === Forelder.mor;\n};\nconst isFarsPeriode = (periode: Uttaksperiode): boolean => {\n    return periode.forelder === Forelder.farMedmor;\n};\nconst isFellesperiodeKvote = (uttak: StønadskontoUttak): boolean => uttak.konto === StønadskontoType.Fellesperiode;\n\nconst isMorsKvote = (uttak: StønadskontoUttak): boolean => {\n    switch (uttak.konto) {\n        case StønadskontoType.ForeldrepengerFørFødsel:\n        case StønadskontoType.Mødrekvote:\n            return true;\n        default:\n            return false;\n    }\n};\n\nconst isFarMedmorsKvote = (uttak: StønadskontoUttak): boolean => {\n    return uttak.konto === StønadskontoType.Fedrekvote;\n};\n\nconst summerBrukteUttaksdager = (uttak: StønadskontoUttak[]) => {\n    return uttak.reduce((dager, u) => dager + u.dager, 0);\n};\n\nconst getBrukteDagerForForelder = (\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    perioder: Uttaksperiode[],\n    familiehendelsesdato: Date,\n    forelder: Forelder\n): ForeldersBrukteDager => {\n    const perioderFørTermin = Periodene(perioder)\n        .getPerioderFørFamiliehendelsesdato(familiehendelsesdato)\n        .filter(isUttaksperiode);\n    const perioderEtterTermin = Periodene(perioder)\n        .getPerioderEtterFamiliehendelsesdato(familiehendelsesdato)\n        .filter(isUttaksperiode);\n    const førTermin = beregnBrukteUttaksdager(tilgjengeligeStønadskontoer, perioderFørTermin);\n    const etterTermin = beregnBrukteUttaksdager(tilgjengeligeStønadskontoer, perioderEtterTermin);\n    const alle = beregnBrukteUttaksdager(tilgjengeligeStønadskontoer, perioder);\n    const dagerTotalt = summerBrukteUttaksdager(alle);\n\n    const isMor = forelder === Forelder.mor;\n    const dagerEgneKvoter = summerBrukteUttaksdager(alle.filter(isMor ? isMorsKvote : isFarMedmorsKvote));\n    const dagerOverført = summerBrukteUttaksdager(alle.filter(isMor ? isFarMedmorsKvote : isMorsKvote));\n    const dagerFellesperiode = summerBrukteUttaksdager(alle.filter(isFellesperiodeKvote));\n\n    return {\n        førTermin,\n        etterTermin,\n        alle,\n        dagerTotalt,\n        dagerEgneKvoter,\n        dagerFellesperiode,\n        dagerAnnenForeldersKvote: dagerOverført,\n    };\n};\n\nexport const getBrukteDager = (\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    perioder: Periode[],\n    familiehendelsesdato: Date\n): BrukteDager => {\n    const perioderMedUttak = getAllePerioderMedUttaksinfoFraUttaksplan(perioder);\n    return {\n        mor: getBrukteDagerForForelder(\n            tilgjengeligeStønadskontoer,\n            perioderMedUttak.filter(isMorsPeriode),\n            familiehendelsesdato,\n            Forelder.mor\n        ),\n        farMedmor: getBrukteDagerForForelder(\n            tilgjengeligeStønadskontoer,\n            perioderMedUttak.filter(isFarsPeriode),\n            familiehendelsesdato,\n            Forelder.farMedmor\n        ),\n        alle: beregnBrukteUttaksdager(tilgjengeligeStønadskontoer, perioder),\n    };\n};\n","import { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { Periode } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { StønadskontoUttak } from 'uttaksplan/types/StønadskontoUttak';\nimport { beregnGjenståendeUttaksdager } from './uttaksPlanStatus';\n\nexport interface Uttaksstatus {\n    gjelderDagerBrukt: boolean;\n    uttak: StønadskontoUttak[];\n}\n\nexport const getUttaksstatus = ({\n    erDeltUttak,\n    erEndringssøknad,\n    harKomplettUttaksplan,\n    erFarEllerMedmor,\n    tilgjengeligeStønadskontoer,\n    uttaksplan,\n}: UttaksstatusFuncParams): Uttaksstatus => {\n    const gjelderDagerBrukt =\n        (erEndringssøknad && harKomplettUttaksplan !== true) ||\n        (erDeltUttak && erFarEllerMedmor && harKomplettUttaksplan !== true);\n\n    const uttak: StønadskontoUttak[] = beregnGjenståendeUttaksdager(\n        tilgjengeligeStønadskontoer,\n        uttaksplan,\n        gjelderDagerBrukt\n    );\n    return {\n        gjelderDagerBrukt,\n        uttak: erFarEllerMedmor\n            ? uttak.filter((kontouttak) => kontouttak.konto !== StønadskontoType.ForeldrepengerFørFødsel)\n            : uttak,\n    };\n};\n\nexport interface UttaksstatusFuncParams {\n    erDeltUttak: boolean;\n    erEndringssøknad: boolean;\n    harKomplettUttaksplan: boolean;\n    erFarEllerMedmor: boolean;\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[];\n    uttaksplan: Periode[];\n}\n\nexport const getUttaksstatusFunc = ({\n    erDeltUttak,\n    erEndringssøknad,\n    harKomplettUttaksplan,\n    erFarEllerMedmor,\n    tilgjengeligeStønadskontoer,\n    uttaksplan,\n}: UttaksstatusFuncParams): (() => Uttaksstatus) => {\n    return () =>\n        getUttaksstatus({\n            erDeltUttak,\n            erEndringssøknad,\n            harKomplettUttaksplan,\n            erFarEllerMedmor,\n            tilgjengeligeStønadskontoer,\n            uttaksplan,\n        });\n};\n","import { FunctionComponent } from 'react';\nimport { injectIntl, IntlShape } from 'react-intl';\nimport { bemUtils } from '@navikt/fp-common';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { getVarighetString } from 'app/utils/dateUtils';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { StønadskontoUttak } from 'uttaksplan/types/StønadskontoUttak';\nimport { getStønadskontoNavn } from 'uttaksplan/utils/stønadskontoerUtils';\nimport StønadskontoIkon from 'uttaksplan/components/stønadskonto-ikon/StønadskontoIkon';\nimport './kontostatus.less';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { BodyShort } from '@navikt/ds-react';\n\nexport interface Props {\n    uttak: StønadskontoUttak;\n    navnPåForeldre: NavnPåForeldre;\n    erEndringssøknad: boolean;\n    intl: IntlShape;\n    erFarEllerMedmor: boolean;\n    situasjon: Situasjon;\n    erAleneOmOmsorg: boolean;\n}\n\nconst bem = bemUtils('kontostatus');\n\nconst Kontostatus: FunctionComponent<Props> = ({\n    uttak,\n    navnPåForeldre,\n    erEndringssøknad,\n    intl,\n    erFarEllerMedmor,\n    situasjon,\n    erAleneOmOmsorg,\n}) => {\n    if (erEndringssøknad && uttak.konto === StønadskontoType.ForeldrepengerFørFødsel) {\n        uttak.dager = 0;\n    }\n\n    const varighetString = getVarighetString(uttak.dager, intl);\n    const kontoErOvertrukket = uttak.dager < 0;\n\n    return (\n        <BodyShort className={bem.block} as=\"div\">\n            <div className={bem.element('ikon')} aria-hidden={true} role=\"presentation\">\n                <StønadskontoIkon\n                    konto={uttak.konto}\n                    navnPåForeldre={navnPåForeldre}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    situasjon={situasjon}\n                    erAleneOmOmsorg={erAleneOmOmsorg}\n                />\n            </div>\n            <div className={bem.element('content')}>\n                <div className={kontoErOvertrukket ? bem.element('kontoOvertrukket') : bem.element('konto')}>\n                    {getStønadskontoNavn(intl, uttak.konto, navnPåForeldre, erFarEllerMedmor, erAleneOmOmsorg)}\n                </div>\n                <strong\n                    className={kontoErOvertrukket ? bem.element('dagerOvertrukket') : bem.element('dager')}\n                    data-name={uttak.konto}\n                >\n                    {kontoErOvertrukket ? `- ${varighetString}` : varighetString}\n                </strong>\n            </div>\n        </BodyShort>\n    );\n};\n\nexport default injectIntl(Kontostatus);\n","import * as React from 'react';\nimport { bemUtils } from '@navikt/fp-common';\nimport './tilesList.less';\n\nconst bem = bemUtils('tilesList');\n\nconst TilesList: React.FunctionComponent<{ columns?: 1 | 2 | 3 | 'flex'; children?: React.ReactNode }> = ({\n    columns = 3,\n    children,\n}) => (\n    <ol className={bem.classNames(bem.block, bem.modifier(`columns-${columns}`))}>\n        {React.Children.map(children, (child) => (\n            <li className={bem.element('tile')}>{child}</li>\n        ))}\n    </ol>\n);\n\nexport default TilesList;\n","import { FunctionComponent } from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport { bemUtils, guid, intlUtils } from '@navikt/fp-common';\nimport Personkort from 'app/components/personkort/Personkort';\nimport ForelderIkon from 'app/components/foreldrepar/ForelderIkon';\nimport { getVarighetString } from 'app/utils/dateUtils';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport isFarEllerMedmor from 'app/utils/isFarEllerMedmor';\nimport { getNavnPåForeldre } from 'app/utils/personUtils';\nimport { getSituasjonForelderSvg } from 'app/utils/foreldreparSituasjonUtils';\nimport { ForeldreparSituasjon } from 'app/types/ForeldreparSituasjonTypes';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { Periode } from 'uttaksplan/types/Periode';\nimport { BrukteDager, getBrukteDager } from 'uttaksplan/utils/brukteDagerUtils';\nimport { getUttaksstatus, Uttaksstatus } from 'uttaksplan/utils/uttaksstatus';\nimport Kontostatus from './konto-status/Kontostatus';\nimport TilesList from './tilesList/TilesList';\nimport './oversiktKvoter.less';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { StønadskontoUttak } from 'uttaksplan/types/StønadskontoUttak';\nimport { capitalizeFirstLetter } from 'app/utils/stringUtils';\nimport { Heading } from '@navikt/ds-react';\n\nconst bem = bemUtils('oversiktKvoter');\n\nconst filtrerBortAnnenPartsKonto = (\n    uttakskontoer: StønadskontoUttak[],\n    erFarEllerMedmor: boolean\n): StønadskontoUttak[] => {\n    return erFarEllerMedmor\n        ? uttakskontoer.filter((uttak) => uttak.konto !== StønadskontoType.Mødrekvote)\n        : uttakskontoer.filter((uttak) => uttak.konto !== StønadskontoType.Fedrekvote);\n};\ninterface PropsPerForelder {\n    brukteDagerPerForelder: BrukteDager;\n    erDeltUttakINorge: boolean;\n    foreldreparSituasjon: ForeldreparSituasjon;\n    navnPåForeldre: NavnPåForeldre;\n    søkerErFarEllerMedmor: boolean;\n}\n\nconst OversiktPerForelder: FunctionComponent<PropsPerForelder> = ({\n    brukteDagerPerForelder,\n    erDeltUttakINorge,\n    foreldreparSituasjon,\n    navnPåForeldre,\n    søkerErFarEllerMedmor,\n}) => {\n    const intl = useIntl();\n    const søkerErMor = !søkerErFarEllerMedmor;\n    const svgInfo = getSituasjonForelderSvg(foreldreparSituasjon);\n\n    return (\n        <div className={bem.block}>\n            <div className={bem.element('perForelder')}>\n                <Heading size=\"small\" as=\"h2\" className=\"blokk-xs\">\n                    {intlUtils(intl, 'uttaksplan.oversiktKvoter.tittel.foreldre')}\n                </Heading>\n                <TilesList columns={'flex'}>\n                    {(erDeltUttakINorge || søkerErMor) && (\n                        <Personkort\n                            ikon={<ForelderIkon forelder={svgInfo.mor} />}\n                            tittel={capitalizeFirstLetter(navnPåForeldre.mor)}\n                        >\n                            <strong>{getVarighetString(brukteDagerPerForelder.mor.dagerTotalt, intl)}</strong>\n                        </Personkort>\n                    )}\n                    {(erDeltUttakINorge || søkerErFarEllerMedmor) && (\n                        <Personkort\n                            ikon={<ForelderIkon forelder={svgInfo.farMedmor} />}\n                            tittel={capitalizeFirstLetter(navnPåForeldre.farMedmor)}\n                        >\n                            <strong>{getVarighetString(brukteDagerPerForelder.farMedmor.dagerTotalt, intl)}</strong>\n                        </Personkort>\n                    )}\n                </TilesList>\n            </div>\n        </div>\n    );\n};\n\ninterface PropsPerKvote {\n    erDeltUttakINorge: boolean;\n    navnPåForeldre: NavnPåForeldre;\n    erEndringssøknad: boolean;\n    uttaksstatus: Uttaksstatus;\n    erFarEllerMedmor: boolean;\n    situasjon: Situasjon;\n    erAleneOmOmsorg: boolean;\n}\n\nconst OversiktPerKvote: FunctionComponent<PropsPerKvote> = ({\n    erDeltUttakINorge,\n    navnPåForeldre,\n    erEndringssøknad,\n    uttaksstatus,\n    erFarEllerMedmor,\n    situasjon,\n    erAleneOmOmsorg,\n}) => {\n    const uttakÅVise = erDeltUttakINorge\n        ? uttaksstatus.uttak\n        : filtrerBortAnnenPartsKonto(uttaksstatus.uttak, erFarEllerMedmor);\n    return (\n        <div className={bem.element('perKvote')}>\n            <Heading size=\"small\" as=\"h2\" className=\"blokk-xs\">\n                <FormattedMessage\n                    id={\n                        uttaksstatus.gjelderDagerBrukt\n                            ? 'uttaksplan.oversiktKvoter.tittel.kontoer.brukteDager'\n                            : 'uttaksplan.oversiktKvoter.tittel.kontoer.ikkeBrukteDager'\n                    }\n                    values={{ antall: erDeltUttakINorge ? 2 : 1 }}\n                />\n            </Heading>\n            <TilesList columns={2}>\n                {uttakÅVise.map((uttak) => (\n                    <Kontostatus\n                        key={guid()}\n                        uttak={uttak}\n                        navnPåForeldre={navnPåForeldre}\n                        erEndringssøknad={erEndringssøknad}\n                        erFarEllerMedmor={erFarEllerMedmor}\n                        situasjon={situasjon}\n                        erAleneOmOmsorg={erAleneOmOmsorg}\n                    />\n                ))}\n            </TilesList>\n        </div>\n    );\n};\n\ninterface Props {\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[];\n    uttaksplan: Periode[];\n    erDeltUttak: boolean;\n    foreldreparSituasjon: ForeldreparSituasjon;\n    familiehendelsesdato: Date;\n    annenForelderHarRettINorge: boolean;\n    toTetteReglerGjelder: boolean;\n    intl: IntlShape;\n}\n\nconst OversiktKvoter: FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer,\n    uttaksplan,\n    erDeltUttak,\n    foreldreparSituasjon,\n    familiehendelsesdato,\n    annenForelderHarRettINorge,\n    intl,\n}) => {\n    const søker = useSøkerinfo();\n    const søknad = useSøknad();\n    const søkerErFarEllerMedmor = isFarEllerMedmor(søknad.søkersituasjon.rolle);\n    const navnPåForeldre = getNavnPåForeldre(søker.person, søknad.annenForelder, søkerErFarEllerMedmor, intl);\n    const uttaksstatus = getUttaksstatus({\n        erDeltUttak: erDeltUttak,\n        erEndringssøknad: søknad.erEndringssøknad,\n        harKomplettUttaksplan: true,\n        erFarEllerMedmor: søkerErFarEllerMedmor,\n        tilgjengeligeStønadskontoer: tilgjengeligeStønadskontoer,\n        uttaksplan,\n    });\n    const brukteDagerPerForelder = getBrukteDager(tilgjengeligeStønadskontoer, uttaksplan, familiehendelsesdato);\n    const erDeltUttakINorge = erDeltUttak && annenForelderHarRettINorge;\n    return (\n        <div className={bem.block}>\n            <OversiktPerForelder\n                brukteDagerPerForelder={brukteDagerPerForelder}\n                erDeltUttakINorge={erDeltUttakINorge}\n                foreldreparSituasjon={foreldreparSituasjon}\n                navnPåForeldre={navnPåForeldre}\n                søkerErFarEllerMedmor={søkerErFarEllerMedmor}\n            />\n            <OversiktPerKvote\n                erDeltUttakINorge={erDeltUttakINorge}\n                navnPåForeldre={navnPåForeldre}\n                erEndringssøknad={søknad.erEndringssøknad}\n                uttaksstatus={uttaksstatus}\n                erFarEllerMedmor={søkerErFarEllerMedmor}\n                situasjon={søknad.søkersituasjon.situasjon}\n                erAleneOmOmsorg={søknad.søker.erAleneOmOmsorg}\n            />\n        </div>\n    );\n};\n\nexport default OversiktKvoter;\n","import { isValidTidsperiode } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { isHull, isInfoPeriode, isPeriodeUtenUttak } from 'uttaksplan/types/Periode';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\n\nexport const inneholderUttaksplanPerioderTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    return {\n        passerer:\n            grunnlag.perioder\n                .filter((p) => !isInfoPeriode(p) && !isPeriodeUtenUttak(p) && !isHull(p))\n                .filter((periode) => isValidTidsperiode(periode.tidsperiode)).length > 0,\n    };\n};\n","import { getTidsperiode, Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { Periodene } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { Forelder } from 'app/types/Forelder';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { isPeriodeUtenUttak, Periode, Periodetype, Utsettelsesperiode, Uttaksperiode } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { uttaksdatoer } from 'uttaksplan/utils/uttaksdatoerUtils';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\nimport { MorsAktivitet } from 'uttaksplan/types/MorsAktivitet';\nimport { OverføringÅrsakType } from 'uttaksplan/types/OverføringÅrsakType';\nimport { erPeriodeFørDato } from 'uttaksplan/utils/periodeUtils';\nimport AnnenForelder from 'app/context/types/AnnenForelder';\nimport { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\n\nconst ANTALL_UTTAKSDAGER_SEKS_UKER = 30;\n\nexport interface InformasjonOmTaptUttakVedUttakEtterSeksUkerFarMedmor {\n    antallUttaksdagerTapt: number;\n    førsteRegistrerteUttaksdag: Date;\n    sisteUttaksdagInnenforSeksUker: Date;\n}\n\nexport const getInformasjonOmTaptUttakVedUttakEtterSeksUkerFarMedmor = (\n    uttaksplan: Periode[],\n    familiehendelsesdato: Date,\n    søkerErFarEllerMedmor: boolean,\n    bareFarMedmorHarRett: boolean,\n    morErUfør: boolean,\n    søkerErFarEllerMedmorOgAnnenForelderKanIkkeOppgis: boolean,\n    søkerErFarEllerMedmorOgErAleneOmOmsorgen: boolean\n): InformasjonOmTaptUttakVedUttakEtterSeksUkerFarMedmor | undefined => {\n    if (søkerErFarEllerMedmor === false || bareFarMedmorHarRett === false || morErUfør === true) {\n        return undefined;\n    }\n\n    if (søkerErFarEllerMedmorOgAnnenForelderKanIkkeOppgis || søkerErFarEllerMedmorOgErAleneOmOmsorgen) {\n        return undefined;\n    }\n\n    const førstePeriode = Periodene(uttaksplan).getFørstePerioderEtterFamiliehendelsesdato(familiehendelsesdato);\n    if (førstePeriode === undefined) {\n        return undefined;\n    }\n\n    const førsteUttaksdag = Uttaksdagen(familiehendelsesdato).denneEllerNeste();\n    const førsteRegistrerteUttaksdag = førstePeriode.tidsperiode.fom;\n    const sisteUttaksdagInnenforSeksUker = getTidsperiode(førsteUttaksdag, 30).tom;\n    const antallUttaksdager =\n        Tidsperioden({\n            fom: førsteUttaksdag,\n            tom: førsteRegistrerteUttaksdag,\n        }).getAntallUttaksdager() - 1;\n\n    if (antallUttaksdager === undefined || antallUttaksdager <= ANTALL_UTTAKSDAGER_SEKS_UKER) {\n        return undefined;\n    }\n\n    return {\n        antallUttaksdagerTapt: antallUttaksdager - ANTALL_UTTAKSDAGER_SEKS_UKER,\n        førsteRegistrerteUttaksdag,\n        sisteUttaksdagInnenforSeksUker,\n    };\n};\n\nexport const getUgyldigUttakMor = (\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    situasjon: Situasjon,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n    flerbarnsFødsel?: boolean,\n    value?: string\n): Periode[] => {\n    if (situasjon == 'adopsjon') {\n        return [];\n    }\n\n    const førsteUttaksdag = uttaksdatoer(\n        familiehendelsesdato,\n        erFarEllerMedmor,\n        termindato\n    ).førsteUttaksdagPåEllerEtterFødsel;\n    const førsteUttaksdagEtterSeksUker = Uttaksdagen(førsteUttaksdag).leggTil(30);\n    const førsteUttaksdagEtterÅtteUker = Uttaksdagen(førsteUttaksdag).leggTil(40);\n\n    let ugyldigUttakRegelFørsteDato: Date;\n    let ugyldigUttakRegelSisteDato: Date;\n\n    if (value === 'førsteSeksUkerForMor') {\n        ugyldigUttakRegelFørsteDato = førsteUttaksdag;\n        ugyldigUttakRegelSisteDato = førsteUttaksdagEtterSeksUker;\n    } else if (value === 'mellomSyvOgÅtteUkerForMor') {\n        ugyldigUttakRegelFørsteDato = førsteUttaksdagEtterSeksUker;\n        ugyldigUttakRegelSisteDato = førsteUttaksdagEtterÅtteUker;\n    }\n\n    const ugyldigPeriode = Periodene(perioder)\n        .getPerioderEtterFamiliehendelsesdato(ugyldigUttakRegelFørsteDato!)\n        .filter((p) => erPeriodeFørDato(p, ugyldigUttakRegelSisteDato));\n\n    let ugyldigeUtsettelser: Utsettelsesperiode[] = [];\n\n    if (value === 'mellomSyvOgÅtteUkerForMor') {\n        ugyldigeUtsettelser = Periodene(ugyldigPeriode)\n            .getUtsettelser()\n            .filter(\n                (p) =>\n                    p.forelder === Forelder.mor &&\n                    (p.årsak === UtsettelseÅrsakType.Ferie || p.årsak === UtsettelseÅrsakType.Arbeid)\n            );\n    } else if (value === 'førsteSeksUkerForMor') {\n        ugyldigeUtsettelser = Periodene(ugyldigPeriode)\n            .getUtsettelser()\n            .filter(\n                (p) =>\n                    p.forelder === Forelder.mor &&\n                    p.årsak !== UtsettelseÅrsakType.InstitusjonSøker &&\n                    p.årsak !== UtsettelseÅrsakType.InstitusjonBarnet &&\n                    p.årsak !== UtsettelseÅrsakType.Sykdom\n            );\n    }\n    const gradertePerioder = Periodene(ugyldigPeriode)\n        .getUttak()\n        .filter((p) => p.forelder === Forelder.mor && p.gradert === true);\n\n    const flernbarnsPerioder = Periodene(ugyldigPeriode)\n        .getUttak()\n        .filter((p) => p.forelder === Forelder.mor && p.ønskerFlerbarnsdager === true);\n\n    const fellesPerioder = Periodene(ugyldigPeriode)\n        .getUttak()\n        .filter((p) => p.forelder === Forelder.mor && p.konto === StønadskontoType.Fellesperiode);\n\n    let samtidigUttaksperioder: Uttaksperiode[] = [];\n\n    if (!flerbarnsFødsel && flerbarnsFødsel !== undefined && !andreAugust2022ReglerGjelder(familiehendelsesdato)) {\n        samtidigUttaksperioder = Periodene(ugyldigPeriode)\n            .getUttak()\n            .filter((p) => p.forelder === Forelder.mor && p.ønskerSamtidigUttak);\n    }\n\n    return [\n        ...flernbarnsPerioder,\n        ...gradertePerioder,\n        ...ugyldigeUtsettelser,\n        ...fellesPerioder,\n        ...samtidigUttaksperioder,\n    ];\n};\n\nexport const unntakFarFørsteSeksUker = (periode: Uttaksperiode, harMidlertidigOmsorg: boolean) => ({\n    erMorForSykDeFørsteSeksUker: (): boolean => {\n        if (harMidlertidigOmsorg) {\n            return true;\n        }\n\n        if (periode.konto === StønadskontoType.Fellesperiode || periode.konto === StønadskontoType.Foreldrepenger) {\n            return (\n                periode.morsAktivitetIPerioden === MorsAktivitet.Innlagt ||\n                periode.morsAktivitetIPerioden === MorsAktivitet.TrengerHjelp ||\n                periode.erMorForSyk === true\n            );\n        }\n\n        if (periode.konto === StønadskontoType.Fedrekvote || periode.konto === StønadskontoType.AktivitetsfriKvote) {\n            return periode.erMorForSyk === true;\n        }\n\n        return false;\n    },\n    erFlerbarnsukerOgUttakAvFlerbarnsdagerEllerFedrekvote: (antallBarn: number): boolean => {\n        return antallBarn > 1 && periode.ønskerFlerbarnsdager === true;\n    },\n});\n\nconst erFarsUttakFørsteSeksUkerGyldig = (\n    periode: Uttaksperiode,\n    antallBarn: number,\n    harMidlertidigOmsorg: boolean\n): boolean => {\n    const unntak = unntakFarFørsteSeksUker(periode, harMidlertidigOmsorg);\n    return (\n        unntak.erMorForSykDeFørsteSeksUker() || unntak.erFlerbarnsukerOgUttakAvFlerbarnsdagerEllerFedrekvote(antallBarn)\n    );\n};\n\nexport const getUgyldigUttakFørsteSeksUkerForFarMedmor = (\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    antallBarn: number,\n    situasjon: Situasjon,\n    annenForelder: AnnenForelder,\n    erAleneOmOmsorg: boolean,\n    harMidlertidigOmsorg: boolean,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined\n): Periode[] => {\n    if (situasjon === 'adopsjon' || annenForelder.kanIkkeOppgis || erAleneOmOmsorg) {\n        return [];\n    }\n\n    const førsteUttaksdag = uttaksdatoer(\n        familiehendelsesdato,\n        erFarEllerMedmor,\n        termindato\n    ).førsteUttaksdagPåEllerEtterFødsel;\n    const førsteUttaksdagEtterSeksUker = Uttaksdagen(førsteUttaksdag).leggTil(30);\n\n    const farsPerioderInnenforSeksFørsteUker = Periodene(perioder)\n        .getPerioderEtterFamiliehendelsesdato(familiehendelsesdato)\n        .filter((p) => erPeriodeFørDato(p, førsteUttaksdagEtterSeksUker))\n        .filter((p) => p.type !== Periodetype.Hull && !isPeriodeUtenUttak(p) && p.forelder === Forelder.farMedmor);\n\n    const ugyldigeUttak = Periodene(farsPerioderInnenforSeksFørsteUker)\n        .getUttak()\n        .filter((p) => erFarsUttakFørsteSeksUkerGyldig(p, antallBarn, harMidlertidigOmsorg) === false);\n\n    const ugyldigeOverføringer = Periodene(farsPerioderInnenforSeksFørsteUker)\n        .getOverføringer()\n        .filter(\n            (p) =>\n                p.årsak !== OverføringÅrsakType.institusjonsoppholdAnnenForelder &&\n                p.årsak !== OverføringÅrsakType.sykdomAnnenForelder\n        );\n\n    const ugyldigeUtsettelser = Periodene(farsPerioderInnenforSeksFørsteUker)\n        .getUtsettelser()\n        .filter((utsettelse) => utsettelse.årsak !== UtsettelseÅrsakType.InstitusjonBarnet);\n\n    return [...ugyldigeUttak, ...ugyldigeOverføringer, ...ugyldigeUtsettelser];\n};\n","import { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { getUgyldigUttakMor } from '../utils/uttakValideringUtils';\n\nexport const harMorSøktUgyldigUttakFørsteSeksUkerTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const søkerErMor = !grunnlag.søkerErFarEllerMedmor;\n    if (søkerErMor) {\n        const ugyldigePerioder = getUgyldigUttakMor(\n            grunnlag.perioder,\n            grunnlag.familiehendelsesdato,\n            grunnlag.søkersituasjon.situasjon,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.termindato,\n            grunnlag.erFlerbarnssøknad,\n            'førsteSeksUkerForMor'\n        );\n        const passerer = ugyldigePerioder.length === 0;\n        return {\n            passerer,\n            info: ugyldigePerioder.map((periode) => ({\n                intlKey: andreAugust2022ReglerGjelder(grunnlag.familiehendelsesdato)\n                    ? 'uttaksplan.validering.feil.morHarSøktUgyldigUttakFørsteSeksUker.etterWLB'\n                    : 'uttaksplan.validering.feil.morHarSøktUgyldigUttakFørsteSeksUker.førWLB',\n                periodeId: periode.id,\n            })),\n        };\n    }\n\n    return { passerer: true };\n};\n","import { IntlShape } from 'react-intl';\nimport { getUttaksstatus } from '../../utils/uttaksstatus';\nimport { getStønadskontoNavn } from '../../utils/stønadskontoerUtils';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { RegelTest, RegelTestresultat, RegelTestresultatInfo } from '../utils/types/regelTypes';\nimport { getVarighetString } from '../../../app/utils/dateUtils';\n\nexport const stønadskontoInneholderForMyeUttakKunSøkerTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const {\n        navnPåForeldre,\n        perioder,\n        stønadskontoer,\n        erDeltUttak,\n        erEndringssøknad,\n        harKomplettUttaksplan,\n        søkerErFarEllerMedmor,\n        søkerErAleneOmOmsorg,\n    } = grunnlag;\n    const stønadskontoerMedForMyeUttak = getUttaksstatus({\n        erDeltUttak,\n        erEndringssøknad,\n        harKomplettUttaksplan,\n        erFarEllerMedmor: søkerErFarEllerMedmor,\n        tilgjengeligeStønadskontoer: stønadskontoer,\n        uttaksplan: perioder,\n    }).uttak.filter((u) => u.dager < 0);\n    return {\n        passerer: stønadskontoerMedForMyeUttak.length === 0,\n        info: stønadskontoerMedForMyeUttak.map(\n            (uttak): RegelTestresultatInfo => ({\n                intlKey: 'uttaksplan.validering.feil.forMyeUttak',\n                values: {\n                    dager: (intl: IntlShape) => getVarighetString(Math.abs(uttak.dager), intl),\n                    konto: (intl: IntlShape) =>\n                        getStønadskontoNavn(\n                            intl,\n                            uttak.konto,\n                            navnPåForeldre,\n                            søkerErFarEllerMedmor,\n                            søkerErAleneOmOmsorg\n                        ),\n                },\n            })\n        ),\n    };\n};\n","import { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\nimport { erPeriodeInnvilget } from 'uttaksplan/utils/periodeUtils';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { getUgyldigUttakFørsteSeksUkerForFarMedmor } from '../utils/uttakValideringUtils';\n\nexport const harFarMedmorSøktUgyldigUttakEllerUtsettelseFørsteSeksUkerTest: RegelTest = (\n    grunnlag: Søknadsinfo\n): RegelTestresultat => {\n    const wlbReglerGjelder = andreAugust2022ReglerGjelder(grunnlag.familiehendelsesdato);\n    if (grunnlag.søkerErFarEllerMedmor && !wlbReglerGjelder) {\n        const ugyldigePerioder = getUgyldigUttakFørsteSeksUkerForFarMedmor(\n            grunnlag.perioder.filter((p) => !erPeriodeInnvilget(p)),\n            grunnlag.familiehendelsesdato,\n            grunnlag.antallBarn,\n            grunnlag.søkersituasjon.situasjon,\n            grunnlag.annenForelder,\n            grunnlag.søkerErAleneOmOmsorg,\n            grunnlag.søkerHarMidlertidigOmsorg,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.termindato\n        );\n        const passerer = ugyldigePerioder.length === 0;\n        return {\n            passerer,\n            info: ugyldigePerioder.map((periode) => ({\n                periodeId: periode.id,\n            })),\n        };\n    }\n\n    return { passerer: true };\n};\n","import { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { uttaksplanErBareOpphold } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\n\nexport const erUttaksplanBareOppholdTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    return { passerer: uttaksplanErBareOpphold(grunnlag.perioder) === false };\n};\n","import { RegelTestresultat, RegelTest } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { uttaksplanSlutterMedOpphold } from 'app/steps/uttaksplan-info/utils/Periodene';\n\nexport const slutterUttaksplanMedOppholdTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    return { passerer: uttaksplanSlutterMedOpphold(grunnlag.perioder) === false };\n};\n","import { uttaksplanStarterMedOpphold } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\nexport const starterUttaksplanMedOppholdTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    if (grunnlag.erEndringssøknad) {\n        return { passerer: true };\n    }\n\n    return { passerer: uttaksplanStarterMedOpphold(grunnlag.perioder) === false };\n};\n","import { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { isUttaksperiode, Periode } from 'uttaksplan/types/Periode';\nimport { getFloatFromString } from 'app/utils/numberUtils';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\n\nconst uttaksplanGraderingStørreEnnSamtidigUttak = (uttaksplan: Periode[]) => {\n    const result = uttaksplan\n        .slice()\n        .filter(\n            (periode) => isUttaksperiode(periode) && periode.ønskerSamtidigUttak === true && periode.gradert === true\n        )\n        .filter(\n            (periode) =>\n                isUttaksperiode(periode) &&\n                getFloatFromString(periode.stillingsprosent)! + getFloatFromString(periode.samtidigUttakProsent)! >\n                    100.0\n        );\n\n    return result.length > 0;\n};\n\nexport const erUttaksplanGraderingStørreEnnSamtidigUttakTest: RegelTest = (\n    grunnlag: Søknadsinfo\n): RegelTestresultat => {\n    return { passerer: uttaksplanGraderingStørreEnnSamtidigUttak(grunnlag.perioder) === false };\n};\n","import { RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\nexport const tilleggsopplysningerMaxLength = 1000;\n\nexport const maxLengthIsGreaterThanOrEqualToStringLength = (maxLength: number, value: string) => {\n    return value.length <= maxLength;\n};\n\nexport const tilleggsopplysningerErGyldig = (begrunnelse?: string) =>\n    maxLengthIsGreaterThanOrEqualToStringLength(tilleggsopplysningerMaxLength, begrunnelse || '');\n\nexport function erTilleggsopplysningerGyldigTest(grunnlag: Søknadsinfo): RegelTestresultat {\n    const { begrunnelseForSenEndring } = grunnlag.tilleggsopplysninger;\n    const begrunnelseTekst = begrunnelseForSenEndring ? begrunnelseForSenEndring.tekst : '';\n    return tilleggsopplysningerErGyldig(begrunnelseTekst)\n        ? { passerer: true }\n        : {\n              passerer: false,\n              info: {\n                  intlKey: 'uttaksplan.veileder.fritekst.kanIkkeVæreLengreEnn',\n                  values: { maxLength: tilleggsopplysningerMaxLength },\n              },\n          };\n}\n","import { getIllegalChars, validateTextHasLegalChars } from 'app/utils/validationUtil';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\nexport function harTilleggsopplysningerGyldigeCharsTest(grunnlag: Søknadsinfo): RegelTestresultat {\n    const { begrunnelseForSenEndring } = grunnlag.tilleggsopplysninger;\n    const tekst = begrunnelseForSenEndring ? begrunnelseForSenEndring.tekst : '';\n    return validateTextHasLegalChars(tekst)\n        ? { passerer: true }\n        : {\n              passerer: false,\n              info: {\n                  intlKey: 'valideringsfeil.begrunnelseForSenEnding.kanIkkeInneholdeTegn',\n                  values: {\n                      ugyldigeTegn: getIllegalChars(tekst),\n                  },\n              },\n          };\n}\n","import { uttaksplanHarForMangeFlerbarnsdager } from 'app/steps/uttaksplan-info/utils/uttaksplanHarForMangeFlerbarnsuker';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\nexport const harUttaksplanForMangeFlerbarnsdagerTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const { perioder, dekningsgrad, antallBarn } = grunnlag;\n    return {\n        passerer:\n            dekningsgrad !== undefined &&\n            uttaksplanHarForMangeFlerbarnsdager(perioder, dekningsgrad, antallBarn) === false,\n    };\n};\n","import { RegelTest, RegelTestresultat, RegelTestresultatInfo } from '../utils/types/regelTypes';\nimport { isInfoPeriode } from 'uttaksplan/types/Periode';\nimport { erUttaksdag } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\nexport const inneholderUttaksplanDatoSomIkkeErUttaksdag: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const ugyldigePerioder = grunnlag.perioder\n        .filter((p) => !isInfoPeriode(p))\n        .filter(({ tidsperiode: { fom, tom } }) => erUttaksdag(fom) === false || erUttaksdag(tom) === false);\n\n    return {\n        passerer: ugyldigePerioder.length === 0,\n        info: ugyldigePerioder.map((periode): RegelTestresultatInfo => {\n            return {\n                intlKey: `uttaksplan.validering.feil.${\n                    erUttaksdag(periode.tidsperiode.fom)\n                        ? 'periodeSlutterPåDatoSomIkkeErUttaksdag'\n                        : 'periodeStarterPåDatoSomIkkeErUttaksdag'\n                }`,\n                periodeId: periode.id,\n            };\n        }),\n    };\n};\n","import { sorterPerioder } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { MissingAttachment } from 'app/types/MissingAttachment';\nimport { findMissingAttachmentsForPerioder } from 'app/utils/manglendeVedleggUtils';\nimport dayjs from 'dayjs';\nimport { isInfoPeriode } from 'uttaksplan/types/Periode';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\nexport const harPerioderManglendeVedleggTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const manglendeVedlegg: MissingAttachment[] = findMissingAttachmentsForPerioder(grunnlag);\n\n    const førsteUttaksEllerUttsettelsesPeriode = grunnlag.perioder\n        .filter((p) => p.tidsperiode.fom !== undefined && !isInfoPeriode(p))\n        .sort(sorterPerioder)\n        .shift();\n    const erLikEllerMindreEnnFireUkerTilUttaketStarter =\n        førsteUttaksEllerUttsettelsesPeriode !== undefined &&\n        dayjs(førsteUttaksEllerUttsettelsesPeriode.tidsperiode.fom).isSameOrBefore(dayjs().add(4, 'weeks'), 'day');\n    const regelTekst = erLikEllerMindreEnnFireUkerTilUttaketStarter\n        ? 'uttaksplan.validering.info.manglendeVedlegg'\n        : 'uttaksplan.validering.advarsel.forTidligUtenDokumentasjon';\n\n    const passerer = manglendeVedlegg.length === 0;\n    const x: RegelTestresultat = {\n        passerer,\n        info: passerer\n            ? undefined\n            : manglendeVedlegg\n                  .filter((vedlegg) => !!vedlegg.periodeId)\n                  .map((vedlegg) => ({\n                      periodeId: vedlegg.periodeId,\n                      intlKey: regelTekst,\n                  })),\n    };\n    return x;\n};\n","import { Periodetype } from 'uttaksplan/types/Periode';\nimport { erPeriodeInnvilget, erSenUtsettelsePgaFerieEllerArbeid } from 'uttaksplan/utils/periodeUtils';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\n\nexport function inneholderSenUtsettelsePgaFerieTest(grunnlag: Søknadsinfo): RegelTestresultat {\n    const seneUtsettelsePgaFerie = grunnlag.perioder\n        .filter((p) => !erPeriodeInnvilget(p, grunnlag.eksisterendeSak))\n        .filter(erSenUtsettelsePgaFerieEllerArbeid)\n        .filter((p) => p.type === Periodetype.Utsettelse && p.årsak === UtsettelseÅrsakType.Ferie);\n\n    const passerer = seneUtsettelsePgaFerie.length === 0;\n    return {\n        passerer,\n        info: seneUtsettelsePgaFerie.map((periode) => ({\n            intlKey: 'uttaksplan.validering.advarsel.planenAdvarerOmUtsettelser.ferie',\n            periodeId: periode.id,\n        })),\n    };\n}\n","import { Periodene } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { isUttaksperiode, Periodetype } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { getInformasjonOmTaptUttakVedUttakEtterSeksUkerFarMedmor } from '../utils/uttakValideringUtils';\n\nexport function inneholderTapteDagerTest(grunnlag: Søknadsinfo): RegelTestresultat {\n    const { perioder, søkerErFarEllerMedmor } = grunnlag;\n    const infoOmTaptUttakVedUttakEtterSeksUkerFarMedmor = getInformasjonOmTaptUttakVedUttakEtterSeksUkerFarMedmor(\n        perioder,\n        grunnlag.familiehendelsesdato,\n        søkerErFarEllerMedmor,\n        grunnlag.morHarRett === false,\n        grunnlag.morErUfør,\n        !!(søkerErFarEllerMedmor && grunnlag.annenForelder.kanIkkeOppgis),\n        !!(søkerErFarEllerMedmor && grunnlag.søkerErAleneOmOmsorg)\n    );\n\n    const planInneholderTapteDager =\n        Periodene(perioder).getHull().length > 0 || infoOmTaptUttakVedUttakEtterSeksUkerFarMedmor !== undefined;\n\n    const planInneholderAnnetEnnAktivitetsfriKvote = perioder\n        .filter((p) => p.type !== Periodetype.Hull)\n        .some((p) => (isUttaksperiode(p) && p.konto !== StønadskontoType.AktivitetsfriKvote) || !isUttaksperiode(p));\n\n    const passerer = (planInneholderTapteDager && planInneholderAnnetEnnAktivitetsfriKvote) === false;\n\n    return {\n        passerer,\n        info: {\n            intlKey: 'uttaksplan.validering.info.planenInneholderHull',\n        },\n    };\n}\n","import { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\nimport { isOverskrivbarPeriode, isUtsettelsesperiode } from 'uttaksplan/types/Periode';\nimport { Periodene } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { formaterDato } from 'app/utils/dateUtils';\n\nexport function inneholderBareUtsettelserTest(grunnlag: Søknadsinfo): RegelTestresultat {\n    const ikkeOverskrivbarePerioder = grunnlag.perioder.filter((p) => !isOverskrivbarPeriode(p));\n    const inneholderAndrePerioderEnnUtsettelser = ikkeOverskrivbarePerioder.some((p) => !isUtsettelsesperiode(p));\n    const bareUtsettelser = !inneholderAndrePerioderEnnUtsettelser;\n    const passerer = bareUtsettelser === false;\n    const intlKey = grunnlag.erEndringssøknad\n        ? 'uttaksplan.veileder.planenInneholderKunUtsettelser.endringssøknad'\n        : 'uttaksplan.veileder.planenInneholderKunUtsettelser';\n\n    return {\n        passerer,\n        info: {\n            intlKey,\n            values: {\n                sisteDag: formaterDato(\n                    Uttaksdagen(Periodene(grunnlag.perioder).getFørsteUttaksdagEtterSistePeriode()!).forrige(),\n                    'D. MMMM YYYY'\n                ),\n            },\n        },\n    };\n}\n","import { RegelTestresultat } from '../utils/types/regelTypes';\nimport { Periodetype } from 'uttaksplan/types/Periode';\nimport { erPeriodeInnvilget, erSenUtsettelsePgaFerieEllerArbeid } from 'uttaksplan/utils/periodeUtils';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\n\nexport function inneholderSenUtsettelsePgaArbeidTest(grunnlag: Søknadsinfo): RegelTestresultat {\n    const seneUtsettelserPgaArbeid = grunnlag.perioder\n        .filter((p) => !erPeriodeInnvilget(p, grunnlag.eksisterendeSak))\n        .filter(erSenUtsettelsePgaFerieEllerArbeid)\n        .filter((p) => p.type === Periodetype.Utsettelse && p.årsak === UtsettelseÅrsakType.Arbeid);\n\n    const passerer = seneUtsettelserPgaArbeid.length === 0;\n    return {\n        passerer,\n        info: seneUtsettelserPgaArbeid.map((periode) => ({\n            intlKey: 'uttaksplan.validering.advarsel.planenAdvarerOmUtsettelser.arbeid',\n            periodeId: periode.id,\n        })),\n    };\n}\n","import { Periodene } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { IntlShape } from 'react-intl';\nimport { isAvslåttPeriode, isInfoPeriode, isUttaksperiode, Periode } from 'uttaksplan/types/Periode';\nimport { getPeriodeTittel } from 'uttaksplan/utils/periodeUtils';\nimport { getNavnGenitivEierform } from 'uttaksplan/utils/stønadskontoerUtils';\nimport { RegelTest, RegelTestresultat, RegelTestresultatInfo } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\nexport const overskriverEndringerAnnenPartsPerioder: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const eksisterendeUttaksplan =\n        grunnlag.eksisterendeSak !== undefined\n            ? grunnlag.eksisterendeSak.uttaksplan.filter((p) => !isAvslåttPeriode(p))\n            : undefined;\n    const fornavnAnnenForelder = grunnlag.søkerErFarEllerMedmor\n        ? grunnlag.navnPåForeldre.mor\n        : grunnlag.navnPåForeldre.farMedmor;\n    if (eksisterendeUttaksplan) {\n        const perioderSomOverlapper: Periode[] = [];\n        const perioderForSjekk = grunnlag.erEndringssøknad\n            ? grunnlag.perioderSomSkalSendesInn\n            : grunnlag.perioder.filter((p) => !isInfoPeriode(p));\n\n        perioderForSjekk.forEach((periode) => {\n            const overlapp = Periodene(eksisterendeUttaksplan.filter(isInfoPeriode)).finnOverlappendePerioder(periode);\n            if (overlapp.length > 0) {\n                perioderSomOverlapper.push(periode);\n            }\n        });\n\n        const perioderSomOverlapperUtenSamtidigUttak = perioderSomOverlapper.filter(\n            (p) => !(isUttaksperiode(p) && p.ønskerSamtidigUttak)\n        );\n\n        const passerer = perioderSomOverlapperUtenSamtidigUttak.length === 0;\n        return {\n            passerer,\n            info: perioderSomOverlapperUtenSamtidigUttak.map((periode) => {\n                const regelInfo: RegelTestresultatInfo = {\n                    periodeId: periode.id,\n                    intlKey: 'uttaksplan.validering.advarsel.periodeOverskriverAnnenPartsPeriode',\n                    renderAsHtml: true,\n                    values: {\n                        periode: (intl: IntlShape) =>\n                            getPeriodeTittel(\n                                intl,\n                                periode,\n                                grunnlag.navnPåForeldre,\n                                grunnlag.familiehendelsesdato,\n                                grunnlag.termindato,\n                                grunnlag.søkersituasjon.situasjon\n                            ),\n                        tidsperiode: (intl: IntlShape) => Tidsperioden(periode.tidsperiode).formaterStringKort(intl),\n                        forelder: fornavnAnnenForelder,\n                        forelders: (intl: IntlShape) => getNavnGenitivEierform(fornavnAnnenForelder, intl.locale),\n                        //strong: (_intl: IntlShape) => (msg: any) => <strong>{msg}</strong>, //TODO: strong does not work.\n                        strong: (_intl: IntlShape) => (msg: any) => msg,\n                    },\n                };\n                return regelInfo;\n            }),\n        };\n    }\n\n    return { passerer: true };\n};\n","import { IntlShape } from 'react-intl';\nimport { RegelTest, RegelTestresultat, RegelTestresultatInfo } from '../utils/types/regelTypes';\nimport { isUttakAnnenPart } from 'uttaksplan/types/Periode';\nimport { Periodene } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { getPeriodeForelderNavn, getPeriodeTittel } from 'uttaksplan/utils/periodeUtils';\nimport { getNavnGenitivEierform } from 'app/utils/personUtils';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\nexport const overlapperPeriodeAndrePerioder: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const { perioder, navnPåForeldre } = grunnlag;\n    const perioderUtenUttakAnnenPart = perioder.filter((p) => !isUttakAnnenPart(p));\n    const perioderSomHarOverlapp = perioderUtenUttakAnnenPart.filter(\n        (periode) => Periodene(perioderUtenUttakAnnenPart).finnOverlappendePerioder(periode).length > 0\n    );\n\n    const passerer = perioderSomHarOverlapp.length === 0;\n    return {\n        passerer,\n        info: perioderSomHarOverlapp.map((periode) => {\n            const info: RegelTestresultatInfo = {\n                periodeId: periode.id,\n                intlKey: 'uttaksplan.validering.feil.periodeoverlapp.oppsummering',\n                renderAsHtml: true,\n                values: {\n                    periode: (intl: IntlShape) =>\n                        getPeriodeTittel(\n                            intl,\n                            periode,\n                            navnPåForeldre,\n                            grunnlag.familiehendelsesdato,\n                            grunnlag.termindato,\n                            grunnlag.søkersituasjon.situasjon\n                        ),\n                    tidsperiode: (intl: IntlShape) => Tidsperioden(periode.tidsperiode).formaterStringKort(intl),\n                    forelder: (intl: IntlShape) =>\n                        getNavnGenitivEierform(getPeriodeForelderNavn(periode, navnPåForeldre), intl.locale),\n                },\n            };\n            return info;\n        }),\n    };\n};\n","import { Dictionary } from 'lodash';\nimport { IntlShape } from 'react-intl';\n\ntype FeilIntlMessage = (intl: IntlShape) => string;\n\nexport enum RegelAlvorlighet {\n    FEIL = 'feil',\n    ADVARSEL = 'advarsel',\n    INFO = 'info',\n}\n\nexport interface UttaksplanRegelTestresultat {\n    resultat: RegelStatus[];\n    avvikPerPeriode: Dictionary<RegelAvvik[]>;\n    avvik: RegelAvvik[];\n    harFeil: boolean;\n}\n\nexport type RegelKategori = 'fordeling' | undefined;\n\nexport interface Regel {\n    key: string;\n    test: RegelTest;\n    alvorlighet: RegelAlvorlighet;\n    overstyresAvRegel?: string;\n    overstyrerRegler?: string[];\n    slåsSammenVedOppsummering?: boolean;\n    skjulesIOppsummering?: boolean;\n    skjulesIPeriode?: boolean;\n    avvikType?: AvvikType;\n    kategori?: RegelKategori;\n}\n\nexport type RegelTest = (grunnlag: any) => RegelTestresultat;\n\nexport interface RegelTestresultat {\n    passerer: boolean;\n    info?: RegelTestresultatInfoObject;\n    periodeId?: string;\n}\n\nexport type RegelTestresultatInfoObject = RegelTestresultatInfo | RegelTestresultatInfo[];\n\nexport interface RegelStatus {\n    key: string;\n    passerer: boolean;\n    regelAvvik?: RegelAvvik[];\n}\n\nexport type AvvikType = 'forretning' | 'skjema';\n\nexport interface RegelAvvik {\n    id: string;\n    regel: Regel;\n    periodeId?: string;\n    info: RegelAvvikInfo;\n}\n\ntype avikValueFunk = (intl: IntlShape) => string;\ntype intlHTMLFragmentFunc = (msg: any) => any;\n\ninterface AvvikInfo {\n    periodeId?: string;\n    values?: {\n        [key: string]: string | number | Date | FeilIntlMessage | avikValueFunk | undefined | intlHTMLFragmentFunc;\n    };\n    renderAsHtml?: boolean;\n}\n\nexport interface RegelAvvikInfo extends AvvikInfo {\n    intlKey: string;\n}\n\nexport interface RegelTestresultatInfo extends AvvikInfo {\n    intlKey?: string;\n}\n","import { IntlShape } from 'react-intl';\nimport { flatten, isArray, uniqBy } from 'lodash';\nimport {\n    UttaksplanRegelTestresultat,\n    RegelAvvik,\n    Regel,\n    RegelTestresultatInfo,\n    RegelStatus,\n    RegelTestresultatInfoObject,\n    RegelAvvikInfo,\n    RegelAlvorlighet,\n} from './types/regelTypes';\nimport { Validator } from './types/validatorTypes';\nimport { guid } from '@navikt/fp-common';\n\nconst getRegelIntlKey = (regel: Regel, intlRegelPrefix: string): string =>\n    `${intlRegelPrefix}.${regel.alvorlighet}.${regel.key}`;\n\nconst alvorlighetSortOrder = {\n    [RegelAlvorlighet.FEIL]: 0,\n    [RegelAlvorlighet.ADVARSEL]: 1,\n    [RegelAlvorlighet.INFO]: 2,\n};\n\nconst sorterAvvik = (a1: RegelAvvik, a2: RegelAvvik): number => {\n    if (a1.regel.alvorlighet === a2.regel.alvorlighet) {\n        return 0;\n    }\n    return alvorlighetSortOrder[a1.regel.alvorlighet] < alvorlighetSortOrder[a2.regel.alvorlighet] ? -1 : 1;\n};\n\nconst ensureRegelAvvikIntlKey = (\n    regel: Regel,\n    intlRegelPrefix: string,\n    info?: Partial<RegelTestresultatInfo>\n): RegelAvvikInfo => ({\n    ...info,\n    intlKey: info ? info.intlKey || getRegelIntlKey(regel, intlRegelPrefix) : getRegelIntlKey(regel, intlRegelPrefix),\n});\n\nconst overstyresAvFilter = (avvik: RegelAvvik, _idx: number, alleAvvik: RegelAvvik[]): boolean => {\n    return (\n        avvik.regel.overstyresAvRegel === undefined &&\n        alleAvvik.some((b2) => b2.regel.key === avvik.regel.overstyresAvRegel) === false\n    );\n};\n\nconst overstyrerAndreFilter = (avvik: RegelAvvik, _idx: number, alleAvvik: RegelAvvik[]): boolean => {\n    const overstyresAvAndre = alleAvvik.some((rb) =>\n        rb.regel.overstyrerRegler\n            ? rb.regel.overstyrerRegler.some((rbo) => {\n                  return rbo === avvik.regel.key;\n              })\n            : false\n    );\n    return overstyresAvAndre === false;\n};\n\nexport const regelHarAvvik = (\n    regel: Regel,\n    intlRegelPrefix: string,\n    info?: RegelTestresultatInfoObject,\n    periodeId?: string\n): RegelStatus => {\n    const mapInfoToRegelAvvik = (i?: Partial<RegelTestresultatInfo>): RegelAvvik => ({\n        id: guid(),\n        regel,\n        info: ensureRegelAvvikIntlKey(regel, intlRegelPrefix, i),\n        periodeId: i ? i.periodeId : periodeId,\n    });\n    const regelAvvik: RegelAvvik[] = [];\n    if (isArray(info)) {\n        info.forEach((i) => regelAvvik.push(mapInfoToRegelAvvik(i)));\n    } else {\n        regelAvvik.push(mapInfoToRegelAvvik(info));\n    }\n    return {\n        key: regel.key,\n        passerer: false,\n        regelAvvik,\n    };\n};\n\nexport const regelPasserer = (regel: Regel): RegelStatus => ({\n    key: regel.key,\n    passerer: true,\n});\n\nexport const getRegelAvvikForPeriode = (resultat: UttaksplanRegelTestresultat, periodeId: string): RegelAvvik[] => {\n    return resultat && resultat.avvikPerPeriode[periodeId] ? resultat.avvikPerPeriode[periodeId] : [];\n};\n\nexport const getRegelAvvik = (resultat: RegelStatus[]): RegelAvvik[] => {\n    if (resultat) {\n        return flatten(\n            resultat.filter((r) => r.passerer === false && r.regelAvvik !== undefined).map((r) => r.regelAvvik!)\n        ).sort(sorterAvvik);\n    }\n    return [];\n};\n\nexport const isRegelFeil = (regelAvvik: RegelAvvik): boolean => regelAvvik.regel.alvorlighet === RegelAlvorlighet.FEIL;\n\nexport const hasRegelFeil = (avvik: RegelAvvik[] = []) => avvik.some((a) => isRegelFeil(a));\n\nexport const trimRelaterteRegelAvvik = (avvik: RegelAvvik[], grupperAvvik: boolean): RegelAvvik[] => {\n    return grupperAvvik\n        ? uniqBy(avvik.filter(overstyresAvFilter).filter(overstyrerAndreFilter), (a) => {\n              return a.regel.slåsSammenVedOppsummering ? a.regel.key : guid();\n          })\n        : avvik.filter(overstyresAvFilter).filter(overstyrerAndreFilter);\n};\n\nexport const getRegelIntlValues = (\n    intl: IntlShape,\n    info: RegelTestresultatInfo\n): { [key: string]: string } | undefined => {\n    const { values } = info;\n    if (values === undefined) {\n        return undefined;\n    }\n    const newValues: { [key: string]: string } = {};\n    Object.keys(values).forEach((key) => {\n        const valueOrFunc = values[key];\n        if (valueOrFunc) {\n            newValues[key] = typeof valueOrFunc === 'function' ? valueOrFunc(intl) : `${valueOrFunc}`;\n        }\n    });\n    return newValues;\n};\n\nexport const hasValueRule = (v: any, failText: string): Validator => ({\n    test: () => v !== undefined && v !== '',\n    failText,\n});\n","import { intlUtils } from '@navikt/fp-common';\nimport { getFloatFromString } from 'app/utils/numberUtils';\nimport { IntlShape } from 'react-intl';\nimport {\n    samtidigUttakProsentIsMax100,\n    stillingsprosentIsLessThan100,\n    stillingsprosentIsMoreThan0,\n} from 'uttaksplan/utils/periodeUtils';\nimport { hasValueRule } from './regelUtils';\nimport { Validator } from './types/validatorTypes';\n\nexport const getStillingsprosentRegler = (\n    erSamtidigUttak: boolean,\n    stillingsprosent: string,\n    intl?: IntlShape\n): Validator[] => {\n    const intlKey = 'valideringsfeil.stillingsprosent';\n    return [\n        hasValueRule(stillingsprosent, intl ? intlUtils(intl, `${intlKey}.required`) : ''),\n        {\n            test: () => getFloatFromString(stillingsprosent) !== undefined,\n            failText: intl ? intlUtils(intl, `${intlKey}.ugyldigTall`) : '',\n        },\n        {\n            test: () => stillingsprosentIsMoreThan0(stillingsprosent),\n            failText: intl ? intlUtils(intl, `${intlKey}.under1`) : '',\n        },\n        {\n            test: () =>\n                erSamtidigUttak\n                    ? samtidigUttakProsentIsMax100(stillingsprosent)\n                    : stillingsprosentIsLessThan100(stillingsprosent),\n            failText: intl ? intlUtils(intl, `${intlKey}.over100prosent`) : '',\n        },\n    ];\n};\n","import { Periode, Periodetype } from 'uttaksplan/types/Periode';\nimport { getStillingsprosentRegler } from './stillingsprosentValideringUtils';\n\nexport const gradertUttaksperiodeErUgyldig = (periode: Periode) => {\n    if (periode.type === Periodetype.Uttak) {\n        const { gradert, stillingsprosent } = periode;\n        if (gradert === true) {\n            const regler = getStillingsprosentRegler(false, stillingsprosent || '');\n            const results = regler.map((regel) => regel.test() === true);\n            return results.some((erGyldig) => erGyldig === false);\n        }\n    }\n    return false;\n};\n\nexport const samtidigUttaksperiodeErUgyldig = (periode: Periode, søkerErFarEllerMedmor: boolean) => {\n    if (periode.type === Periodetype.Uttak) {\n        const { ønskerSamtidigUttak, samtidigUttakProsent } = periode;\n        if (ønskerSamtidigUttak === true && søkerErFarEllerMedmor) {\n            const regler = getStillingsprosentRegler(true, samtidigUttakProsent || '');\n            const results = regler.map((regel) => regel.test() === true);\n            return results.some((erGyldig) => erGyldig === false);\n        }\n    }\n    return false;\n};\n","import { Søknadsinfo } from '../../utils/types/Søknadsinfo';\nimport { RegelTest, RegelTestresultat } from 'uttaksplan/validering/utils/types/regelTypes';\nimport { gradertUttaksperiodeErUgyldig } from '../../utils/periodeValideringUtils';\n\nexport const harUttaksperiodeGyldigGradering: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const ugyldigePerioder = grunnlag.perioder.filter(gradertUttaksperiodeErUgyldig);\n    return {\n        passerer: ugyldigePerioder.length === 0,\n        info: ugyldigePerioder.map((periode) => ({\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { ValidationResult, ValidationTestVerdict, Validator } from './types/validatorTypes';\n\nexport const runValidators = (validators: Validator[] | undefined, inputName: string): ValidationResult => {\n    if (validators === undefined) {\n        return {\n            name: inputName,\n            tests: [],\n            valid: true,\n        };\n    }\n    const results: Validator[] = validators.filter((validator) => {\n        return validator.test() === false;\n    });\n\n    const valid = results.length === 0;\n    const tests: ValidationTestVerdict[] = valid === false ? [{ verdict: false, failText: results[0].failText }] : [];\n\n    return {\n        name: inputName,\n        tests,\n        valid,\n    };\n};\n\nexport const allValidatorsPass = (validators: Validator[] | undefined): boolean =>\n    validators === undefined ? true : runValidators(validators, 'group').valid;\n","import { TidsperiodeDate } from '@navikt/fp-common';\nimport { isValidTidsperiode } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport dayjs from 'dayjs';\nimport { isForeldrepengerFørFødselUttaksperiode, Periode, UtsettelseFormPeriodeType } from 'uttaksplan/types/Periode';\nimport { uttaksdatoer } from 'uttaksplan/utils/uttaksdatoerUtils';\nimport { DatoValidatorer, Validator } from './types/validatorTypes';\nimport { allValidatorsPass } from './validatorUtils';\n\ntype DateValue = Date | undefined;\n\nconst erUtfyltTest = (dato: DateValue): Validator => ({\n    test: () => dato !== undefined,\n    failText: { intlKey: `uttaksplan.validering.feil.påkrevd` },\n});\n\nconst erUttaksdagTest = (dato: DateValue) => ({\n    test: () => dato !== undefined && Uttaksdagen(dato).erUttaksdag(),\n    failText: { intlKey: `uttaksplan.validering.feil.datoErIkkeUttaksdag` },\n});\n\nconst slutterInnenforGyldigPermisjonsperiode = (\n    dato: DateValue,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined\n) => ({\n    test: () =>\n        dato !== undefined &&\n        dayjs(dato).isSameOrBefore(\n            uttaksdatoer(familiehendelsesdato, erFarEllerMedmor, termindato).sisteMuligeUttaksdagEtterTermin,\n            'day'\n        ),\n    failText: { intlKey: 'uttaksplan.validering.feil.etterSistePermisjonsdag' },\n});\n\nconst starterInnenforGyldigAntallUkerFørTermin = (\n    dato: DateValue,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined\n) => ({\n    test: () =>\n        dato !== undefined &&\n        dayjs(dato).isSameOrAfter(\n            uttaksdatoer(familiehendelsesdato, erFarEllerMedmor, termindato).førsteMuligeUttaksdagFørTermin,\n            'day'\n        ),\n    failText: { intlKey: 'uttaksplan.validering.feil.før12UkerFørTermin' },\n});\n\nexport const getUttakTidsperiodeValidatorer = (\n    skalIkkeHaUttak: boolean,\n    tidsperiode: Partial<TidsperiodeDate>,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined\n): DatoValidatorer | undefined => {\n    if (skalIkkeHaUttak) {\n        return undefined;\n    }\n\n    const { fom, tom } = tidsperiode;\n\n    return {\n        fra: [\n            erUtfyltTest(fom),\n            erUttaksdagTest(fom),\n            starterInnenforGyldigAntallUkerFørTermin(fom, familiehendelsesdato, erFarEllerMedmor, termindato),\n        ],\n        til: [\n            erUtfyltTest(tom),\n            erUttaksdagTest(tom),\n            slutterInnenforGyldigPermisjonsperiode(tom, familiehendelsesdato, erFarEllerMedmor, termindato),\n        ],\n    };\n};\n\nexport const uttakTidsperiodeErGyldig = (\n    uttaksperiode: Periode,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined\n): boolean => {\n    const { tidsperiode } = uttaksperiode;\n    if (!tidsperiode) {\n        return false;\n    }\n    const skalIkkeHaUttak = isForeldrepengerFørFødselUttaksperiode(uttaksperiode)\n        ? uttaksperiode.skalIkkeHaUttakFørTermin\n        : false;\n\n    if (isValidTidsperiode(tidsperiode) === false && !skalIkkeHaUttak) {\n        return false;\n    }\n    const validators = getUttakTidsperiodeValidatorer(\n        skalIkkeHaUttak,\n        tidsperiode,\n        familiehendelsesdato,\n        erFarEllerMedmor,\n        termindato\n    );\n    if (validators === undefined) {\n        return true;\n    }\n    const fraDatoErGyldig = allValidatorsPass(validators.fra);\n    const tilDatoErGyldig = allValidatorsPass(validators.til);\n\n    return fraDatoErGyldig && tilDatoErGyldig;\n};\n\nconst getUtsettelseTidsperiodeValidatorer = (\n    tidsperiode: Partial<TidsperiodeDate>,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined\n): DatoValidatorer | undefined => {\n    return {\n        fra: [erUtfyltTest(tidsperiode.fom), erUttaksdagTest(tidsperiode.fom)],\n        til: [\n            erUtfyltTest(tidsperiode.tom),\n            erUttaksdagTest(tidsperiode.tom),\n            slutterInnenforGyldigPermisjonsperiode(tidsperiode.tom, familiehendelsesdato, erFarEllerMedmor, termindato),\n        ],\n    };\n};\n\nexport const utsettelseTidsperiodeErGyldig = (\n    utsettelesperiode: UtsettelseFormPeriodeType,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined\n): boolean => {\n    const { tidsperiode } = utsettelesperiode;\n\n    if (isValidTidsperiode(tidsperiode) === false) {\n        return false;\n    }\n    const validators = getUtsettelseTidsperiodeValidatorer(\n        tidsperiode,\n        familiehendelsesdato,\n        erFarEllerMedmor,\n        termindato\n    );\n    if (validators === undefined) {\n        return true;\n    }\n    const fraDatoErGyldig = allValidatorsPass(validators.fra);\n    const tilDatoErGyldig = allValidatorsPass(validators.til);\n\n    return fraDatoErGyldig && tilDatoErGyldig;\n};\n","import { Søknadsinfo } from '../../utils/types/Søknadsinfo';\nimport { Periodetype } from 'uttaksplan/types/Periode';\nimport { utsettelseTidsperiodeErGyldig, uttakTidsperiodeErGyldig } from '../../utils/tidsperiodeValideringUtils';\nimport { RegelTest, RegelTestresultat } from 'uttaksplan/validering/utils/types/regelTypes';\n\nexport const harPeriodeGyldigTidsperiode: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const perioderMedUgyldigTidsperiode = grunnlag.perioder.filter((periode) => {\n        switch (periode.type) {\n            case Periodetype.Overføring:\n            case Periodetype.Uttak:\n            case Periodetype.Opphold:\n                return (\n                    uttakTidsperiodeErGyldig(\n                        periode,\n                        grunnlag.familiehendelsesdato,\n                        grunnlag.søkerErFarEllerMedmor,\n                        grunnlag.termindato\n                    ) === false\n                );\n            case Periodetype.Utsettelse:\n                return (\n                    utsettelseTidsperiodeErGyldig(\n                        periode,\n                        grunnlag.familiehendelsesdato,\n                        grunnlag.søkerErFarEllerMedmor,\n                        grunnlag.termindato\n                    ) === false\n                );\n        }\n        return false;\n    });\n    return {\n        passerer: perioderMedUgyldigTidsperiode.length === 0,\n        info: perioderMedUgyldigTidsperiode.map((periode) => ({\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { RegelTest, RegelTestresultat } from 'uttaksplan/validering/utils/types/regelTypes';\nimport { isUttaksperiode } from 'uttaksplan/types/Periode';\nimport { Søknadsinfo } from 'uttaksplan/validering/utils/types/Søknadsinfo';\n\nexport const harUttaksperiodeStønadskonto: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const uttaksperioderUtenStønadskonto = grunnlag.perioder.filter(\n        (periode) => isUttaksperiode(periode) && periode.konto === undefined\n    );\n    return {\n        passerer: uttaksperioderUtenStønadskonto.length === 0,\n        info: uttaksperioderUtenStønadskonto.map((periode) => ({\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { Søknadsinfo } from '../../utils/types/Søknadsinfo';\nimport { samtidigUttaksperiodeErUgyldig } from '../../utils/periodeValideringUtils';\nimport { RegelTest, RegelTestresultat } from 'uttaksplan/validering/utils/types/regelTypes';\n\nexport const erSamtidigUttakGyldig: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const perioderMedUgyldigTidsperiode = grunnlag.perioder.filter((periode) =>\n        samtidigUttaksperiodeErUgyldig(periode, grunnlag.søkerErFarEllerMedmor)\n    );\n    return {\n        passerer: perioderMedUgyldigTidsperiode.length === 0,\n        info: perioderMedUgyldigTidsperiode.map((periode) => ({\n            periodeId: periode.id,\n        })),\n    };\n};\n","import dayjs from 'dayjs';\nimport { isUtsettelsesperiode } from 'uttaksplan/types/Periode';\nimport { RegelTest, RegelTestresultat } from 'uttaksplan/validering/utils/types/regelTypes';\nimport { Søknadsinfo } from '../../utils/types/Søknadsinfo';\n\nexport const erUtsettelseEtterFamiliehendelsesdato: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const ugyldigeUtsettelser = grunnlag.perioder\n        .filter(isUtsettelsesperiode)\n        .filter((utsettelse) => dayjs(utsettelse.tidsperiode.fom).isBefore(grunnlag.familiehendelsesdato, 'day'));\n    return {\n        passerer: ugyldigeUtsettelser.length === 0,\n        info: ugyldigeUtsettelser.map((periode) => ({\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { Søknadsinfo } from '../../utils/types/Søknadsinfo';\nimport { RegelTest, RegelTestresultat } from 'uttaksplan/validering/utils/types/regelTypes';\nimport {\n    getFørsteUttaksdag2UkerFørFødsel,\n    gjelderWLBReglerFarMedmorRundtFødsel,\n    isUttaksperiodeFarMedmorMedValgForUttakRundtFødsel,\n    starterTidsperiodeEtter2UkerFørFødsel,\n} from 'app/utils/wlbUtils';\nimport { formaterDatoKompakt } from 'app/utils/dateUtils';\n\nexport const starterUttaksperiodeRundtFødselEtter2UkerFørFødsel: RegelTest = (\n    grunnlag: Søknadsinfo\n): RegelTestresultat => {\n    if (\n        !gjelderWLBReglerFarMedmorRundtFødsel(\n            grunnlag.familiehendelsesdato,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.morHarRett,\n            grunnlag.søkersituasjon.situasjon\n        )\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n\n    const perioderFarMedmorSomStarterFør2UkerFørFødsel = grunnlag.perioder\n        .filter((p) => isUttaksperiodeFarMedmorMedValgForUttakRundtFødsel(p))\n        .filter(\n            (p) =>\n                !starterTidsperiodeEtter2UkerFørFødsel(\n                    p.tidsperiode,\n                    grunnlag.familiehendelsesdato,\n                    grunnlag.termindato\n                )\n        );\n\n    const førsteUttaksdagToUkerFørFødsel = formaterDatoKompakt(\n        getFørsteUttaksdag2UkerFørFødsel(grunnlag.familiehendelsesdato, grunnlag.termindato)\n    );\n    return {\n        passerer: perioderFarMedmorSomStarterFør2UkerFørFødsel.length === 0,\n        info: perioderFarMedmorSomStarterFør2UkerFørFødsel.map((periode) => ({\n            intlKey: 'uttaksplan.validering.feil.starterUttaksperiodeRundtFødselEtter2UkerFørFødsel',\n            values: { dato: førsteUttaksdagToUkerFørFødsel },\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { Søknadsinfo } from '../../utils/types/Søknadsinfo';\nimport { RegelTest, RegelTestresultat } from 'uttaksplan/validering/utils/types/regelTypes';\nimport {\n    getSisteUttaksdag6UkerEtterFødsel,\n    gjelderWLBReglerFarMedmorRundtFødsel,\n    isUttaksperiodeFarMedmorPgaFødsel,\n    slutterTidsperiodeInnen6UkerEtterFødsel,\n} from 'app/utils/wlbUtils';\nimport { formaterDatoKompakt } from 'app/utils/dateUtils';\n\nexport const slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel: RegelTest = (\n    grunnlag: Søknadsinfo\n): RegelTestresultat => {\n    if (\n        !gjelderWLBReglerFarMedmorRundtFødsel(\n            grunnlag.familiehendelsesdato,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.morHarRett,\n            grunnlag.søkersituasjon.situasjon\n        )\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n\n    const perioderFarMedmorSomIkkeSlutterFør6UkerEtterFødsel = grunnlag.perioder\n        .filter((p) => isUttaksperiodeFarMedmorPgaFødsel(p, grunnlag.familiehendelsesdato, grunnlag.termindato))\n        .filter((p) => !slutterTidsperiodeInnen6UkerEtterFødsel(p.tidsperiode, grunnlag.familiehendelsesdato));\n\n    const sisteUttaksdagSeksUkerEtterFødsel = formaterDatoKompakt(\n        getSisteUttaksdag6UkerEtterFødsel(grunnlag.familiehendelsesdato)\n    );\n    return {\n        passerer: perioderFarMedmorSomIkkeSlutterFør6UkerEtterFødsel.length === 0,\n        info: perioderFarMedmorSomIkkeSlutterFør6UkerEtterFødsel.map((periode) => ({\n            intlKey: 'uttaksplan.validering.feil.slutterUttaksperiodeRundtFødselEtter6UkerEtterFødsel',\n            values: { dato: sisteUttaksdagSeksUkerEtterFødsel },\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { Søknadsinfo } from '../../utils/types/Søknadsinfo';\nimport { RegelTest, RegelTestresultat } from 'uttaksplan/validering/utils/types/regelTypes';\nimport { starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel } from 'app/utils/wlbUtils';\nimport { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\nimport { isUttaksperiode } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\n\nexport const periodeDeFørsteSeksUkeneHarUlovligUttakBFHR: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    if (\n        !andreAugust2022ReglerGjelder(grunnlag.familiehendelsesdato) ||\n        !grunnlag.søkerErFarEllerMedmor ||\n        grunnlag.morHarRett ||\n        grunnlag.søkersituasjon.situasjon !== 'fødsel'\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n\n    const perioderDeFørsteSeksUkeneMedUlovligUttakBFHR = grunnlag.perioder.filter(\n        (periode) =>\n            isUttaksperiode(periode) &&\n            starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel(\n                periode.tidsperiode,\n                grunnlag.familiehendelsesdato,\n                grunnlag.termindato\n            ) &&\n            periode.konto === StønadskontoType.Foreldrepenger &&\n            periode.erMorForSyk === false\n    );\n\n    return {\n        passerer: perioderDeFørsteSeksUkeneMedUlovligUttakBFHR.length === 0,\n        info: perioderDeFørsteSeksUkeneMedUlovligUttakBFHR.map((periode) => ({\n            intlKey: 'uttaksplan.validering.feil.perioderDeFørsteSeksUkeneMedUlovligUttakBFHR',\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { Søknadsinfo } from '../../utils/types/Søknadsinfo';\nimport { isUtsettelsePgaArbeid } from 'uttaksplan/types/Periode';\nimport { RegelTest, RegelTestresultat } from 'uttaksplan/validering/utils/types/regelTypes';\n\nexport const harBekreftet100ProsentArbeidIUtsettelsePgaArbeid: RegelTest = (\n    grunnlag: Søknadsinfo\n): RegelTestresultat => {\n    const utsettelserPgaArbeidUtenBekreftelse = grunnlag.perioder\n        .filter(isUtsettelsePgaArbeid)\n        .filter((periode) => periode.bekrefterArbeidIPerioden === false);\n\n    return {\n        passerer: utsettelserPgaArbeidUtenBekreftelse.length === 0,\n        info: utsettelserPgaArbeidUtenBekreftelse.map((periode) => ({\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { Søknadsinfo } from '../../utils/types/Søknadsinfo';\nimport { RegelTest, RegelTestresultat } from 'uttaksplan/validering/utils/types/regelTypes';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport dayjs from 'dayjs';\nimport { isUttakAnnenPart, Periode, Periodetype } from 'uttaksplan/types/Periode';\nimport { formatDate } from '@navikt/fp-common';\n\nexport const laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn = (\n    periode: Periode,\n    førsteUttaksdagForPåfølgendeBarn: Date | undefined\n) => {\n    if (\n        førsteUttaksdagForPåfølgendeBarn !== undefined &&\n        (periode.type === Periodetype.Uttak ||\n            periode.type === Periodetype.Overføring ||\n            periode.type === Periodetype.Utsettelse ||\n            periode.type === Periodetype.Opphold ||\n            isUttakAnnenPart(periode))\n    ) {\n        return (\n            dayjs(periode.tidsperiode.fom).isSameOrAfter(førsteUttaksdagForPåfølgendeBarn, 'd') ||\n            dayjs(periode.tidsperiode.tom).isSameOrAfter(førsteUttaksdagForPåfølgendeBarn, 'd')\n        );\n    }\n    return false;\n};\n\nexport const forSenUttakVedPåfølgendeBarn: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    if (\n        grunnlag.familiehendelsesdatoNesteSak === undefined ||\n        grunnlag.førsteUttaksdagNesteBarnsSak === undefined ||\n        (grunnlag.minsterettUkerToTette && grunnlag.minsterettUkerToTette > 0)\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n    const perioderMedUgyldigTidsperiode = grunnlag.perioder.filter((periode) =>\n        laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn(periode, grunnlag.førsteUttaksdagNesteBarnsSak)\n    );\n    const sisteMuligeUttaksdag = Uttaksdagen(grunnlag.førsteUttaksdagNesteBarnsSak).trekkFra(1);\n    return {\n        passerer: perioderMedUgyldigTidsperiode.length === 0,\n        info: perioderMedUgyldigTidsperiode.map((periode) => ({\n            intlKey: 'uttaksplan.validering.info.forSenUttakVedPåfølgendeBarn',\n            values: {\n                fom: formatDate(periode.tidsperiode.fom),\n                tom: formatDate(periode.tidsperiode.tom),\n                sisteMuligeUttaksdag: formatDate(sisteMuligeUttaksdag),\n            },\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { harUttaksperiodeGyldigGradering } from './harUttaksperiodeGyldigGradering';\nimport { harPeriodeGyldigTidsperiode } from './harPeriodeGyldigTidsperiode';\nimport { harUttaksperiodeStønadskonto } from './harUttaksperiodeStønadskonto';\nimport { erSamtidigUttakGyldig } from './erSamtidigUttakGyldig';\nimport { erUtsettelseEtterFamiliehendelsesdato } from './erUtsettelseEtterFamiliehendelsesdato';\nimport { Regel, RegelAlvorlighet } from '../../utils/types/regelTypes';\nimport { starterUttaksperiodeRundtFødselEtter2UkerFørFødsel } from './starterUttaksperiodeRundtFødselEtter2UkerFørFødsel';\nimport { slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel } from './slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel';\nimport { periodeDeFørsteSeksUkeneHarUlovligUttakBFHR } from './periodeDeFørsteSeksUkeneHarUlovligUttakBFHR';\nimport { harBekreftet100ProsentArbeidIUtsettelsePgaArbeid } from './harBekreftet100ProsentArbeidIUtsettelsePgaArbeid';\nimport { forSenUttakVedPåfølgendeBarn } from './forSenUttakVedPåfølgendeBarn';\n\nexport enum PeriodeValiderRegelKey {\n    'uttaksperiodeHarGyldigGradering' = 'uttaksperiodeHarGyldigGradering',\n    'periodeHarGyldigTidsperiode' = 'periodeHarGyldigTidsperiode',\n    'uttaksperiodeHarStønadskonto' = 'uttaksperiodeHarStønadskonto',\n    'erSamtidigUttakGyldig' = 'erSamtidigUttakGyldig',\n    'erUtsettelseEtterFamiliehendelsesdato' = 'erUtsettelseEtterFamiliehendelsesdato',\n    'starterUttaksperiodeRundtFødselEtter2UkerFørFødsel' = 'starterUttaksperiodeRundtFødselEtter2UkerFørFødsel',\n    'slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel' = 'slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel',\n    'periodeDeFørsteSeksUkeneHarUlovligUttakBFHR' = 'periodeDeFørsteSeksUkeneHarUlovligUttakBFHR',\n    'harBekreftet100ProsentArbeidIUtsettelsePgaArbeid' = 'harBekreftet100ProsentArbeidIUtsettelsePgaArbeid',\n    'forSenUttakVedPåfølgendeBarn' = 'forSenUttakVedPåfølgendeBarn',\n}\n\n/** Meldingene skal default kun vises inne i skjema */\n\nconst skjulIOppsummering = true;\n\nconst periodevalideringsregler: Regel[] = [\n    {\n        key: PeriodeValiderRegelKey.uttaksperiodeHarGyldigGradering,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harUttaksperiodeGyldigGradering,\n        skjulesIOppsummering: skjulIOppsummering,\n        avvikType: 'skjema',\n    },\n    {\n        key: PeriodeValiderRegelKey.periodeHarGyldigTidsperiode,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harPeriodeGyldigTidsperiode,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.starterUttaksperiodeRundtFødselEtter2UkerFørFødsel,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: starterUttaksperiodeRundtFødselEtter2UkerFørFødsel,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.uttaksperiodeHarStønadskonto,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harUttaksperiodeStønadskonto,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.periodeDeFørsteSeksUkeneHarUlovligUttakBFHR,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: periodeDeFørsteSeksUkeneHarUlovligUttakBFHR,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.erSamtidigUttakGyldig,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: erSamtidigUttakGyldig,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.erUtsettelseEtterFamiliehendelsesdato,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: erUtsettelseEtterFamiliehendelsesdato,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.harBekreftet100ProsentArbeidIUtsettelsePgaArbeid,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harBekreftet100ProsentArbeidIUtsettelsePgaArbeid,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.forSenUttakVedPåfølgendeBarn,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: forSenUttakVedPåfølgendeBarn,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n];\n\nexport default periodevalideringsregler;\n","import { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { isUtsettelsePgaFerie } from 'uttaksplan/types/Periode';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\nexport const harSøktOmFerieUtenArbeidsforhold: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const harArbeidsforhold = grunnlag.arbeidsforhold.length > 0;\n    return {\n        passerer: harArbeidsforhold ? true : grunnlag.perioder.some(isUtsettelsePgaFerie) === false,\n    };\n};\n","import uttaksConstants from 'app/constants';\nimport { IntlShape } from 'react-intl';\nimport { Perioden } from 'app/steps/uttaksplan-info/utils/Perioden';\nimport { isUtsettelsesperiode } from 'uttaksplan/types/Periode';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { getVarighetString } from 'app/utils/dateUtils';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\n\nexport const inneholderForMyeFerie: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const ferieUtsettelser = grunnlag.perioder.filter(\n        (p) => isUtsettelsesperiode(p) && p.årsak === UtsettelseÅrsakType.Ferie\n    );\n    const ferieDager = ferieUtsettelser.reduce(\n        (sumFerieDager, periode) => sumFerieDager + Perioden(periode).getAntallUttaksdager(),\n        0\n    );\n\n    return {\n        passerer: ferieDager <= uttaksConstants.MAKS_FERIEDAGER_MED_OVERFØRING,\n        info: ferieUtsettelser.map((periode) => ({\n            periodeId: periode.id,\n            values: {\n                ukerOgDager: (intl: IntlShape) => getVarighetString(ferieDager, intl),\n            },\n        })),\n    };\n};\n","import { RegelTestresultat } from '../utils/types/regelTypes';\nimport { beregnGjenståendeUttaksdager } from 'uttaksplan/utils/uttaksPlanStatus';\nimport { isUtsettelsesperiode } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\n// Denne regelen sparker inn dersom forelders kvote + fellesperiode er tømt\n// Dersom noe er igjen av andre forelders kvote er det OK\nexport function kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme(grunnlag: Søknadsinfo): RegelTestresultat {\n    const { perioder, søkerErFarEllerMedmor, stønadskontoer } = grunnlag;\n    const gjenståendeDager = beregnGjenståendeUttaksdager(stønadskontoer, perioder, false);\n    const sistePeriodeErIkkeUtsettelse =\n        perioder.length > 0 ? !isUtsettelsesperiode(perioder[perioder.length - 1]) : false;\n\n    const resterendeFellesperiode = gjenståendeDager.find((konto) => konto.konto === StønadskontoType.Fellesperiode);\n    const resterendeMødrekvote = gjenståendeDager.find((konto) => konto.konto === StønadskontoType.Mødrekvote);\n    const resterendeFedrekvote = gjenståendeDager.find((konto) => konto.konto === StønadskontoType.Fedrekvote);\n    const resterendeForeldrepenger = gjenståendeDager.find((konto) => konto.konto === StønadskontoType.Foreldrepenger);\n\n    if (sistePeriodeErIkkeUtsettelse || perioder.length === 0) {\n        return {\n            passerer: true,\n        };\n    }\n\n    if (søkerErFarEllerMedmor) {\n        if (resterendeFedrekvote !== undefined && resterendeFellesperiode !== undefined) {\n            if (resterendeFedrekvote.dager > 0 || resterendeFellesperiode.dager > 0) {\n                return {\n                    passerer: true,\n                };\n            }\n        }\n\n        if (resterendeForeldrepenger !== undefined) {\n            if (resterendeForeldrepenger.dager > 0) {\n                return {\n                    passerer: true,\n                };\n            }\n        }\n\n        return {\n            passerer: false,\n            info: {\n                intlKey: 'uttaksplan.validering.feil.sluttMedUtsettelse',\n            },\n        };\n    } else {\n        if (resterendeMødrekvote !== undefined && resterendeFellesperiode !== undefined) {\n            if (resterendeMødrekvote.dager > 0 || resterendeFellesperiode.dager > 0) {\n                return {\n                    passerer: true,\n                };\n            }\n        }\n\n        if (resterendeForeldrepenger !== undefined) {\n            if (resterendeForeldrepenger.dager > 0) {\n                return {\n                    passerer: true,\n                };\n            }\n        }\n\n        return {\n            passerer: false,\n            info: {\n                intlKey: 'uttaksplan.validering.feil.sluttMedUtsettelse',\n            },\n        };\n    }\n}\n","import { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { StønadskontoUttak } from 'uttaksplan/types/StønadskontoUttak';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { beregnGjenståendeUttaksdager } from 'uttaksplan/utils/uttaksPlanStatus';\nimport { Periode } from 'uttaksplan/types/Periode';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\n\nconst erUttaksmengdeForFarMedmorForHøy = (\n    uttaksplan: Periode[],\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    farEllerMedmor: boolean\n): boolean => {\n    if (farEllerMedmor === true) {\n        const kontoUttak = beregnGjenståendeUttaksdager(tilgjengeligeStønadskontoer, uttaksplan, false);\n        return kontoUttak.some((konto: StønadskontoUttak) => konto.dager < 0);\n    } else {\n        return false;\n    }\n};\n\nexport const erUttaksmengdeForFarMedmorForHøyTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    return {\n        passerer:\n            erUttaksmengdeForFarMedmorForHøy(\n                grunnlag.perioder,\n                grunnlag.stønadskontoer,\n                grunnlag.søkerErFarEllerMedmor\n            ) === false,\n    };\n};\n","import { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { IntlShape } from 'react-intl';\nimport {\n    isInfoPeriode,\n    isPeriodeUtenUttak,\n    isUtsettelsePgaArbeid,\n    isUttaksperiode,\n    Periode,\n} from 'uttaksplan/types/Periode';\nimport links from 'app/links/links';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\nconst vekslendeArbeidOgUttakTest = (kunSøkersPerioder: Periode[]): boolean => {\n    const firstArbeidsperiodeIndex = kunSøkersPerioder.findIndex((p) => isUtsettelsePgaArbeid(p));\n\n    if (firstArbeidsperiodeIndex > -1) {\n        const antallPerioderEtterFørsteUtsettelseGrunnetArbeid =\n            kunSøkersPerioder.length - 1 - firstArbeidsperiodeIndex;\n\n        if (antallPerioderEtterFørsteUtsettelseGrunnetArbeid >= 5) {\n            // Hvis vi har en serie perioder av formatet:\n            // Arbeid -> Uttak -> Arbeid -> Uttak -> Arbeid -> Uttak => foreslå gradering\n            if (\n                isUtsettelsePgaArbeid(kunSøkersPerioder[firstArbeidsperiodeIndex]) &&\n                isUttaksperiode(kunSøkersPerioder[firstArbeidsperiodeIndex + 1]) &&\n                isUtsettelsePgaArbeid(kunSøkersPerioder[firstArbeidsperiodeIndex + 2]) &&\n                isUttaksperiode(kunSøkersPerioder[firstArbeidsperiodeIndex + 3]) &&\n                isUtsettelsePgaArbeid(kunSøkersPerioder[firstArbeidsperiodeIndex + 4]) &&\n                isUttaksperiode(kunSøkersPerioder[firstArbeidsperiodeIndex + 5])\n            ) {\n                return false;\n            }\n        }\n        if (antallPerioderEtterFørsteUtsettelseGrunnetArbeid === 4 && firstArbeidsperiodeIndex > 0) {\n            // Hvis vi har en serie perioder av formatet:\n            // Uttak -> Arbeid -> Uttak -> Arbeid -> Uttak -> Arbeid => foreslå gradering\n            if (\n                firstArbeidsperiodeIndex > 0 &&\n                isUttaksperiode(kunSøkersPerioder[firstArbeidsperiodeIndex - 1]) &&\n                isUtsettelsePgaArbeid(kunSøkersPerioder[firstArbeidsperiodeIndex]) &&\n                isUttaksperiode(kunSøkersPerioder[firstArbeidsperiodeIndex + 1]) &&\n                isUtsettelsePgaArbeid(kunSøkersPerioder[firstArbeidsperiodeIndex + 2]) &&\n                isUttaksperiode(kunSøkersPerioder[firstArbeidsperiodeIndex + 3]) &&\n                isUtsettelsePgaArbeid(kunSøkersPerioder[firstArbeidsperiodeIndex + 4])\n            ) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n};\n\nconst vekslendePeriodeUtenUttakOgUttakTest = (kunSøkersPerioder: Periode[]): boolean => {\n    const firstPeriodeUtenUttakIndex = kunSøkersPerioder.findIndex((p) => isPeriodeUtenUttak(p));\n\n    if (firstPeriodeUtenUttakIndex > -1) {\n        const antallPerioderEtterFørstePeriodeUtenUttak = kunSøkersPerioder.length - 1 - firstPeriodeUtenUttakIndex;\n\n        if (antallPerioderEtterFørstePeriodeUtenUttak >= 5) {\n            // Hvis vi har en serie perioder av formatet:\n            // Uten Uttak -> Uttak ->  Uten Uttak -> Uttak ->  Uten Uttak -> Uttak => foreslå gradering\n            if (\n                isPeriodeUtenUttak(kunSøkersPerioder[firstPeriodeUtenUttakIndex]) &&\n                isUttaksperiode(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 1]) &&\n                isPeriodeUtenUttak(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 2]) &&\n                isUttaksperiode(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 3]) &&\n                isPeriodeUtenUttak(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 4]) &&\n                isUttaksperiode(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 5])\n            ) {\n                return false;\n            }\n        }\n        if (antallPerioderEtterFørstePeriodeUtenUttak === 4 && firstPeriodeUtenUttakIndex > 0) {\n            // Hvis vi har en serie perioder av formatet:\n            // Uttak ->  Uten Uttak -> Uttak ->  Uten Uttak -> Uttak ->  Uten Uttak => foreslå gradering\n            if (\n                firstPeriodeUtenUttakIndex > 0 &&\n                isUttaksperiode(kunSøkersPerioder[firstPeriodeUtenUttakIndex - 1]) &&\n                isPeriodeUtenUttak(kunSøkersPerioder[firstPeriodeUtenUttakIndex]) &&\n                isUttaksperiode(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 1]) &&\n                isPeriodeUtenUttak(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 2]) &&\n                isUttaksperiode(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 3]) &&\n                isPeriodeUtenUttak(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 4])\n            ) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n};\n\nexport const burdeKanskjeSøkeGraderingTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const { perioder } = grunnlag;\n    const kunSøkersPerioder = perioder.filter((p: Periode) => !isInfoPeriode(p));\n\n    if (kunSøkersPerioder.length >= 6) {\n        const vekslerArbeidOgUttakTest = vekslendeArbeidOgUttakTest(kunSøkersPerioder);\n        const veklserPerioderUtenUttakOgUttaktest = vekslendePeriodeUtenUttakOgUttakTest(kunSøkersPerioder);\n        const passerer = vekslerArbeidOgUttakTest && veklserPerioderUtenUttakOgUttaktest;\n        let infoTekstKey = undefined;\n        if (!vekslerArbeidOgUttakTest) {\n            infoTekstKey =\n                'uttaksplan.validering.info.burdeKanskjeSøkeGradering.PgaVekslendeUtsettelserPgaArbeidOgUttak';\n        }\n\n        if (!veklserPerioderUtenUttakOgUttaktest) {\n            infoTekstKey = 'uttaksplan.validering.info.burdeKanskjeSøkeGradering.PgaVekslendePerioderUtenUttakOgUttak';\n        }\n\n        return {\n            passerer: passerer,\n            info: {\n                intlKey: infoTekstKey,\n                renderAsHtml: true,\n                values: {\n                    a: (_intl: IntlShape) => (msg: any) =>\n                        (\n                            <a href={links.graderingInfo} className=\"lenke\" rel=\"noreferrer\" target=\"_blank\">\n                                {msg}\n                            </a>\n                        ),\n                },\n            },\n        };\n    }\n\n    return {\n        passerer: true,\n    };\n};\n","import { formatDate } from '@navikt/fp-common';\nimport { isUfødtBarn } from 'app/context/types/Barn';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { getUgyldigUttakMor } from '../utils/uttakValideringUtils';\n\nexport const ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindatoTest: RegelTest = (\n    grunnlag: Søknadsinfo\n): RegelTestresultat => {\n    const søkerErMor = !grunnlag.søkerErFarEllerMedmor;\n    if (søkerErMor && isUfødtBarn(grunnlag.barn)) {\n        const ugyldigePerioder = getUgyldigUttakMor(\n            grunnlag.perioder,\n            grunnlag.familiehendelsesdato,\n            grunnlag.søkersituasjon.situasjon,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.termindato,\n            grunnlag.erFlerbarnssøknad,\n            'mellomSyvOgÅtteUkerForMor'\n        );\n\n        const passerer = ugyldigePerioder.length === 0;\n        return {\n            passerer,\n            info: ugyldigePerioder.map((periode) => ({\n                intlKey: 'uttaksplan.validering.advarsel.ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindato',\n                values: {\n                    fraDato: formatDate(periode.tidsperiode.fom),\n                    tilDato: formatDate(periode.tidsperiode.tom),\n                },\n                periodeId: periode.id,\n            })),\n        };\n    }\n\n    return { passerer: true };\n};\n","import { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { isUttaksperiode } from 'uttaksplan/types/Periode';\nimport { hasValue } from '@navikt/fp-common';\nimport { farMedmorBrukerForeldrepengerMedAktivitetskravRundtFødselOgMorIkkeErSyk } from 'uttaksplan/utils/uttaksskjema/aktivitetskravMorSkalBesvares';\n\nexport const inneholderPerioderUtenAktivitetskrav = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const {\n        perioder,\n        søkerErFarEllerMedmor,\n        søkerErAleneOmOmsorg,\n        søkerHarMidlertidigOmsorg,\n        familiehendelsesdato,\n        søkersituasjon,\n    } = grunnlag;\n\n    if (!søkerErFarEllerMedmor || søkerErAleneOmOmsorg || søkerHarMidlertidigOmsorg) {\n        return {\n            passerer: true,\n        };\n    }\n    const perioderUtenAktivitetskrav = perioder.filter(\n        (p) =>\n            isUttaksperiode(p) &&\n            !hasValue(p.morsAktivitetIPerioden) &&\n            !p.erMorForSyk &&\n            !p.ønskerSamtidigUttak &&\n            !p.ønskerFlerbarnsdager &&\n            !farMedmorBrukerForeldrepengerMedAktivitetskravRundtFødselOgMorIkkeErSyk(\n                familiehendelsesdato,\n                søkerErFarEllerMedmor,\n                p.konto,\n                p.erMorForSyk,\n                p.tidsperiode,\n                søkersituasjon.situasjon\n            ) &&\n            (p.konto === StønadskontoType.Fellesperiode || p.konto === StønadskontoType.Foreldrepenger)\n    );\n\n    return {\n        passerer: perioderUtenAktivitetskrav.length === 0,\n        info: perioderUtenAktivitetskrav.map((p) => ({\n            intlKey: 'uttaksplan.validering.feil.inneholderPerioderUtenAktivitetskrav',\n            periodeId: p.id,\n        })),\n    };\n};\n","import { hasValue } from '@navikt/fp-common';\nimport { isUtsettelsesperiode } from 'uttaksplan/types/Periode';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\nexport const inneholderUtsettelserUtenÅrsak = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const utsettelserUtenÅrsak = grunnlag.perioder.filter((p) => isUtsettelsesperiode(p) && !hasValue(p.årsak));\n\n    const passerer = utsettelserUtenÅrsak.length === 0;\n\n    return {\n        passerer,\n        info: utsettelserUtenÅrsak.map((periode) => ({\n            intlKey: 'uttaksplan.validering.feil.inneholderUtsettelserUtenÅrsak',\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { formaterDatoKompakt } from 'app/utils/dateUtils';\nimport { Periode } from 'uttaksplan/types/Periode';\nimport {\n    getFarMedmorUttakRundtFødsel,\n    getFørsteUttaksdag2UkerFørFødsel,\n    getSisteUttaksdag6UkerEtterFødsel,\n    gjelderWLBReglerFarMedmorRundtFødsel,\n    slutterTidsperiodeInnen6UkerEtterFødsel,\n    ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL,\n} from 'app/utils/wlbUtils';\nimport { getSumUttaksdagerÅTrekkeIPeriodene } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport dayjs from 'dayjs';\n\nconst overskridelseUttakRundtFødselAntallDager = (\n    perioderRundtFødsel: Periode[],\n    familiehendelsesdato: Date\n): number => {\n    const sisteUttak6UkerEtterFødsel = getSisteUttaksdag6UkerEtterFødsel(familiehendelsesdato);\n    const perioderAvkortetTilÅSlutte6UkerEtterFødsel = perioderRundtFødsel.map((p) =>\n        dayjs(p.tidsperiode.tom).isAfter(dayjs(sisteUttak6UkerEtterFødsel), 'day')\n            ? { ...p, tidsperiode: { fom: p.tidsperiode.fom, tom: sisteUttak6UkerEtterFødsel } }\n            : p\n    );\n    const antallDager = getSumUttaksdagerÅTrekkeIPeriodene(perioderAvkortetTilÅSlutte6UkerEtterFødsel);\n    return ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL - antallDager;\n};\n\nexport const farMedmorHarSøktUgyldigAntallDagerUttakRundtFødselTest: RegelTest = (\n    grunnlag: Søknadsinfo\n): RegelTestresultat => {\n    if (\n        gjelderWLBReglerFarMedmorRundtFødsel(\n            grunnlag.familiehendelsesdato,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.morHarRett,\n            grunnlag.søkersituasjon.situasjon\n        )\n    ) {\n        const perioderUttakRundtFødsel = getFarMedmorUttakRundtFødsel(\n            grunnlag.perioder,\n            grunnlag.familiehendelsesdato,\n            grunnlag.termindato\n        );\n        const antallDagerForMye = overskridelseUttakRundtFødselAntallDager(\n            perioderUttakRundtFødsel,\n            grunnlag.familiehendelsesdato\n        );\n\n        const slutterEnAvPeriodeneForSent = perioderUttakRundtFødsel.some(\n            (p) => !slutterTidsperiodeInnen6UkerEtterFødsel(p.tidsperiode, grunnlag.familiehendelsesdato)\n        );\n        let info;\n        const fraDato = formaterDatoKompakt(\n            getFørsteUttaksdag2UkerFørFødsel(grunnlag.familiehendelsesdato, grunnlag.termindato)\n        );\n        const tilDato = formaterDatoKompakt(getSisteUttaksdag6UkerEtterFødsel(grunnlag.familiehendelsesdato));\n        if (slutterEnAvPeriodeneForSent) {\n            info = {\n                intlKey:\n                    'uttaksplan.validering.feil.farMedmorHarSøktUgyldigAntallDagerUttakRundtFødsel.periodeSlutterForSent',\n                values: {\n                    fraDato: fraDato,\n                    tilDato: tilDato,\n                },\n            };\n        } else {\n            info = {\n                intlKey: 'uttaksplan.validering.feil.farMedmorHarSøktUgyldigAntallDagerUttakRundtFødsel',\n                values: {\n                    fraDato: fraDato,\n                    tilDato: tilDato,\n                    dagerForMye: Math.abs(antallDagerForMye),\n                },\n            };\n        }\n        return {\n            passerer: antallDagerForMye >= 0,\n            info: info,\n        };\n    }\n\n    return {\n        passerer: true,\n    };\n};\n","import { getSisteUttaksdag6UkerEtterFødsel } from 'app/utils/wlbUtils';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport dayjs from 'dayjs';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { isUttaksperiode } from 'uttaksplan/types/Periode';\n\nexport const harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUkerTest: RegelTest = (\n    grunnlag: Søknadsinfo\n): RegelTestresultat => {\n    const søkerErMor = !grunnlag.søkerErFarEllerMedmor;\n    if (søkerErMor && grunnlag.søkersituasjon.situasjon === 'fødsel') {\n        const sisteUttaksdagEtterSeksUker = getSisteUttaksdag6UkerEtterFødsel(grunnlag.familiehendelsesdato);\n        const perioderMedSamtidigUttakUnder100ProsentInnenFørsteSeksUker = grunnlag.perioder.filter(\n            (p) =>\n                isUttaksperiode(p) &&\n                dayjs(p.tidsperiode.fom).isSameOrBefore(sisteUttaksdagEtterSeksUker, 'day') &&\n                p.ønskerSamtidigUttak === true &&\n                p.samtidigUttakProsent !== undefined &&\n                parseInt(p.samtidigUttakProsent, 10) < 100\n        );\n\n        return {\n            passerer: perioderMedSamtidigUttakUnder100ProsentInnenFørsteSeksUker.length <= 0,\n            info: {\n                intlKey: 'uttaksplan.validering.feil.morHarSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUker',\n            },\n        };\n    }\n    return { passerer: true };\n};\n","import {\n    ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL,\n    getFarMedmorUttakRundtFødsel,\n    getFørsteUttaksdag2UkerFørFødsel,\n    getSisteUttaksdag6UkerEtterFødsel,\n    gjelderWLBReglerFarMedmorRundtFødsel,\n} from 'app/utils/wlbUtils';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { formaterDatoKompakt } from 'app/utils/dateUtils';\nimport { getSumUttaksdagerÅTrekkeIPeriodene } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { erUttaksmengdeForFarMedmorForHøyTest } from './erUttaksmengdeForFarMedmorForHøyTest';\nimport dayjs from 'dayjs';\n\nexport const farMedMorHarRettPåUttakRundtFødselTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const tattUtForMangeDagerIPlanen = erUttaksmengdeForFarMedmorForHøyTest(grunnlag).passerer === false;\n    if (\n        !gjelderWLBReglerFarMedmorRundtFødsel(\n            grunnlag.familiehendelsesdato,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.morHarRett,\n            grunnlag.søkersituasjon.situasjon\n        ) ||\n        tattUtForMangeDagerIPlanen\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n    const perioderRundtFødsel = getFarMedmorUttakRundtFødsel(\n        grunnlag.perioder,\n        grunnlag.familiehendelsesdato,\n        grunnlag.termindato\n    );\n\n    let dagerIgjenRundtFødsel;\n    const førsteUttaksdag2UkerFørFødsel = getFørsteUttaksdag2UkerFørFødsel(\n        grunnlag.familiehendelsesdato,\n        grunnlag.termindato\n    );\n    const sisteUttak6UkerEtterFødsel = getSisteUttaksdag6UkerEtterFødsel(grunnlag.familiehendelsesdato);\n\n    if (perioderRundtFødsel.length > 0) {\n        const antallUttaksdagerRundtFødsel = getSumUttaksdagerÅTrekkeIPeriodene(perioderRundtFødsel);\n        dagerIgjenRundtFødsel = ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL - antallUttaksdagerRundtFødsel;\n    } else {\n        dagerIgjenRundtFødsel = ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL;\n    }\n    const erMerEnn3månederSidenFamiliehendelse = dayjs(new Date())\n        .subtract(3, 'month')\n        .isSameOrAfter(grunnlag.familiehendelsesdato, 'day');\n\n    return {\n        passerer: dagerIgjenRundtFødsel <= 0 || erMerEnn3månederSidenFamiliehendelse,\n        info: {\n            intlKey: 'uttaksplan.validering.info.rettTilUttakRundtFødsel',\n            values: {\n                fraDato: formaterDatoKompakt(førsteUttaksdag2UkerFørFødsel),\n                tilDato: formaterDatoKompakt(sisteUttak6UkerEtterFødsel),\n                antallDager: Math.round(dagerIgjenRundtFødsel * 10) / 10,\n            },\n        },\n    };\n};\n","import uttaksConstants from 'app/constants';\nimport { Dekningsgrad } from 'app/types/Dekningsgrad';\nimport { andreAugust2022ReglerGjelder } from './dateUtils';\n\nexport const getBareFarHarRettKontoUtenAktivitetskravUker = (\n    antallBarn: number,\n    morErUfør: boolean,\n    familiehendelsesdato: Date,\n    dekningsgrad: Dekningsgrad,\n    bareFarHarRett: boolean\n): number => {\n    if (!bareFarHarRett) {\n        return 0;\n    }\n\n    if (andreAugust2022ReglerGjelder(familiehendelsesdato) && antallBarn === 1 && !morErUfør) {\n        return 8;\n    }\n    let morUførUker = 0;\n    let flerbarnsukerSomDelAvMinsterett = 0;\n\n    if (morErUfør) {\n        morUførUker = dekningsgrad === Dekningsgrad.HUNDRE_PROSENT ? 15 : 19;\n    }\n\n    if (andreAugust2022ReglerGjelder(familiehendelsesdato)) {\n        if (antallBarn === 2) {\n            flerbarnsukerSomDelAvMinsterett = dekningsgrad === Dekningsgrad.HUNDRE_PROSENT ? 17 : 21;\n        } else if (antallBarn > 2) {\n            flerbarnsukerSomDelAvMinsterett = dekningsgrad === Dekningsgrad.HUNDRE_PROSENT ? 46 : 56;\n        }\n    }\n\n    return flerbarnsukerSomDelAvMinsterett + morUførUker;\n};\n\nexport const getBareFarHarRettFlerbarnsdagerUker = (\n    antallBarn: number,\n    familiehendelsesdato: Date,\n    dekningsgrad: Dekningsgrad,\n    bareFarHarRett: boolean\n): number => {\n    if (!bareFarHarRett || antallBarn === 1) {\n        return 0;\n    }\n\n    //Flerbarnsdager regnes som en del av minsteretten når WLB Regler gjelder, og blir med i kontoen uten aktivitetskrav\n    if (andreAugust2022ReglerGjelder(familiehendelsesdato)) {\n        return 0;\n    }\n\n    let flerbarnsUker = 0;\n\n    if (antallBarn === 2) {\n        flerbarnsUker =\n            dekningsgrad === Dekningsgrad.HUNDRE_PROSENT\n                ? uttaksConstants.ANTALL_UKER_2_BARN_100_PROSENT_UTTAK\n                : uttaksConstants.ANTALL_UKER_2_BARN_80_PROSENT_UTTAK;\n    } else if (antallBarn > 2) {\n        flerbarnsUker =\n            dekningsgrad === Dekningsgrad.HUNDRE_PROSENT\n                ? uttaksConstants.ANTALL_UKER_3_ELLER_FLERE_BARN_100_PROSENT_UTTAK\n                : uttaksConstants.ANTALL_UKER_3_ELLER_FLERE_BARN_80_PROSENT_UTTAK;\n    }\n\n    return flerbarnsUker;\n};\n\nexport const getBareFarHarRettAntallUkerPåÅTaUtDagerUtenAktivitetskravFørWLB = (\n    antallBarn: number,\n    familiehendelsesdato: Date,\n    dekningsgrad: Dekningsgrad,\n    bareFarHarRett: boolean\n) => {\n    if (!bareFarHarRett) {\n        return 0;\n    }\n    const antallUkerEtterFødselMor = uttaksConstants.ANTALL_UKER_MØDREKVOTE_ETTER_FØDSEL;\n    const antallUkerForeldrepengerFar =\n        dekningsgrad === Dekningsgrad.HUNDRE_PROSENT\n            ? uttaksConstants.ANTALL_UKER_FORELDREPENGER_BARE_FAR_HAR_RETT_100_PROSENT\n            : uttaksConstants.ANTALL_UKER_FORELDREPENGER_BARE_FAR_HAR_RETT_80_PROSENT;\n    const flerbarnsUker = getBareFarHarRettFlerbarnsdagerUker(\n        antallBarn,\n        familiehendelsesdato,\n        dekningsgrad,\n        bareFarHarRett\n    );\n\n    return antallUkerEtterFødselMor + antallUkerForeldrepengerFar + flerbarnsUker;\n};\n","import { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { erUttaksmengdeForFarMedmorForHøyTest } from './erUttaksmengdeForFarMedmorForHøyTest';\nimport links from 'app/links/links';\nimport { IntlShape } from 'react-intl';\nimport {\n    getBareFarHarRettKontoUtenAktivitetskravUker,\n    getBareFarHarRettAntallUkerPåÅTaUtDagerUtenAktivitetskravFørWLB,\n} from 'app/utils/minsterettUtils';\nimport { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\n\nexport const farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest: RegelTest = (\n    grunnlag: Søknadsinfo\n): RegelTestresultat => {\n    const tattUtForMangeDagerIPlanen = erUttaksmengdeForFarMedmorForHøyTest(grunnlag).passerer === false;\n    if (\n        !grunnlag.søkerErFarEllerMedmor ||\n        grunnlag.morHarRett ||\n        tattUtForMangeDagerIPlanen ||\n        (grunnlag.søkerErFarEllerMedmor && grunnlag.søkerErAleneOmOmsorg)\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n    const kontoUtenAktivitetskravUker = getBareFarHarRettKontoUtenAktivitetskravUker(\n        grunnlag.antallBarn,\n        grunnlag.morErUfør,\n        grunnlag.familiehendelsesdato,\n        grunnlag.dekningsgrad,\n        !grunnlag.morHarRett\n    );\n\n    const testPasserer = kontoUtenAktivitetskravUker === 0;\n    const renderAsHtml = true;\n    const link = (_intl: IntlShape) => (msg: any) =>\n        (\n            <a href={links.aktivitetsfriUttakInfo} className=\"lenke\" rel=\"noreferrer\" target=\"_blank\">\n                {msg}\n            </a>\n        );\n\n    if (andreAugust2022ReglerGjelder(grunnlag.familiehendelsesdato)) {\n        return {\n            passerer: testPasserer,\n            info: {\n                intlKey: 'uttaksplan.validering.info.rettTilAktivitetsfriUttak.etterWLB',\n                renderAsHtml: renderAsHtml,\n                values: {\n                    antallUker: kontoUtenAktivitetskravUker,\n                    a: link,\n                },\n            },\n        };\n    } else {\n        const bareFarHarRett = grunnlag.søkerErFarEllerMedmor && !grunnlag.morHarRett;\n        const antallUkerPåÅTaUtDager = getBareFarHarRettAntallUkerPåÅTaUtDagerUtenAktivitetskravFørWLB(\n            grunnlag.antallBarn,\n            grunnlag.familiehendelsesdato,\n            grunnlag.dekningsgrad,\n            bareFarHarRett\n        );\n        return {\n            passerer: testPasserer,\n            info: {\n                intlKey: 'uttaksplan.validering.info.rettTilAktivitetsfriUttak.førWLB',\n                renderAsHtml: renderAsHtml,\n                values: {\n                    antallUker: kontoUtenAktivitetskravUker,\n                    antallUkerÅTaUtDagerUtenAktivitet: antallUkerPåÅTaUtDager,\n                    a: link,\n                },\n            },\n        };\n    }\n};\n","import { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\nimport { isUttaksperiode, Periode, Uttaksperiode } from 'uttaksplan/types/Periode';\nimport { graderingSkalBesvares } from 'uttaksplan/utils/uttaksskjema/graderingSkalBesvares';\nimport dayjs from 'dayjs';\n\nexport const inneholderUttaksperioderMedUbesvartGradering = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const uttaksperioder = grunnlag.perioder.filter((p: Periode) => isUttaksperiode(p)) as Uttaksperiode[];\n    const perioderMedUbesvartGradering = uttaksperioder\n        .filter((p) =>\n            graderingSkalBesvares(\n                p.type,\n                p.konto,\n                grunnlag.familiehendelsesdato,\n                grunnlag.søkerErFarEllerMedmor,\n                p.erMorForSyk,\n                p.tidsperiode\n            )\n        )\n        //Feilmeldingen skal ikke komme hvis spm om flerbarnsdager skal besvares først (kun for perioder etter fødsel).\n        .filter((p) =>\n            grunnlag.erFlerbarnssøknad\n                ? (dayjs(p.tidsperiode.fom).isSameOrAfter(grunnlag.familiehendelsesdato, 'd') &&\n                      p.ønskerFlerbarnsdager !== undefined) ||\n                  dayjs(p.tidsperiode.fom).isBefore(grunnlag.familiehendelsesdato, 'd')\n                : p\n        )\n        .filter((p) => p.gradert === undefined);\n\n    return {\n        passerer: perioderMedUbesvartGradering.length === 0,\n        info: perioderMedUbesvartGradering.map((periode) => ({\n            intlKey: 'uttaksplan.validering.feil.inneholderUttaksperioderMedUbesvartGradering',\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\nimport { isUttaksperiode, Periode, Uttaksperiode } from 'uttaksplan/types/Periode';\nimport { ønskerFlerbarnsdagerSkalBesvares } from 'uttaksplan/utils/uttaksskjema/ønskerFlerbarnsdagerSkalBesvares';\nimport { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport { UttakRundtFødselÅrsak } from 'app/types/UttakRundtFødselÅrsak';\n\nexport const inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest = (\n    grunnlag: Søknadsinfo\n): RegelTestresultat => {\n    const uttaksperioder = grunnlag.perioder.filter((p: Periode) => isUttaksperiode(p)) as Uttaksperiode[];\n    const erFlerbarnssøknad = grunnlag.antallBarn > 1;\n    const bareFarMedmorHarRett = grunnlag.søkerErFarEllerMedmor && !grunnlag.erDeltUttak;\n    const erDeltUttakINorge =\n        grunnlag.erDeltUttak &&\n        isAnnenForelderOppgitt(grunnlag.annenForelder) &&\n        grunnlag.annenForelder.harRettPåForeldrepengerINorge;\n    const perioderMedUbesvartSpmOmFlerbarnsdager = uttaksperioder\n        .filter((p) =>\n            ønskerFlerbarnsdagerSkalBesvares(\n                p.type,\n                erFlerbarnssøknad,\n                grunnlag.søkerErFarEllerMedmor,\n                grunnlag.familiehendelsesdato,\n                p.tidsperiode,\n                p.konto,\n                bareFarMedmorHarRett,\n                grunnlag.antallBarn,\n                grunnlag.søkerErAleneOmOmsorg,\n                !!erDeltUttakINorge,\n                p.erMorForSyk ? UttakRundtFødselÅrsak.morErForSyk : undefined\n            )\n        )\n        .filter((p) => p.gradert === undefined);\n\n    return {\n        passerer: perioderMedUbesvartSpmOmFlerbarnsdager.length === 0,\n        info: perioderMedUbesvartSpmOmFlerbarnsdager.map((periode) => ({\n            intlKey: 'uttaksplan.validering.feil.inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdager',\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { erUttaksmengdeForFarMedmorForHøyTest } from './erUttaksmengdeForFarMedmorForHøyTest';\nimport links from 'app/links/links';\nimport { IntlShape } from 'react-intl';\nimport {\n    getBareFarHarRettFlerbarnsdagerUker,\n    getBareFarHarRettAntallUkerPåÅTaUtDagerUtenAktivitetskravFørWLB,\n} from 'app/utils/minsterettUtils';\nimport { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\n\nexport const farMedmorHarRettPåFlerbarnsdagerTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const tattUtForMangeDagerIPlanen = erUttaksmengdeForFarMedmorForHøyTest(grunnlag).passerer === false;\n    if (\n        !grunnlag.søkerErFarEllerMedmor ||\n        grunnlag.morHarRett ||\n        tattUtForMangeDagerIPlanen ||\n        (grunnlag.søkerErFarEllerMedmor && grunnlag.søkerErAleneOmOmsorg) ||\n        andreAugust2022ReglerGjelder(grunnlag.familiehendelsesdato)\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n    const flerbarnsUker = getBareFarHarRettFlerbarnsdagerUker(\n        grunnlag.antallBarn,\n        grunnlag.familiehendelsesdato,\n        grunnlag.dekningsgrad,\n        !grunnlag.morHarRett\n    );\n    const bareFarHarRett = grunnlag.søkerErFarEllerMedmor && !grunnlag.morHarRett;\n    const antallUkerPåÅTaUtDager = getBareFarHarRettAntallUkerPåÅTaUtDagerUtenAktivitetskravFørWLB(\n        grunnlag.antallBarn,\n        grunnlag.familiehendelsesdato,\n        grunnlag.dekningsgrad,\n        bareFarHarRett\n    );\n\n    return {\n        passerer: flerbarnsUker === 0,\n        info: {\n            intlKey: 'uttaksplan.validering.info.flerbarnsdagerKanBrukes',\n            renderAsHtml: true,\n            values: {\n                antallUker: flerbarnsUker,\n                antallUkerÅTaUtFlerbarnsdager: antallUkerPåÅTaUtDager,\n                a: (_intl: IntlShape) => (msg: any) =>\n                    (\n                        <a href={links.aktivitetsfriUttakInfo} className=\"lenke\" rel=\"noreferrer\" target=\"_blank\">\n                            {msg}\n                        </a>\n                    ),\n            },\n        },\n    };\n};\n","import { RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { getBrukteDager } from 'uttaksplan/utils/brukteDagerUtils';\nimport { laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn } from './periodevalideringstester/forSenUttakVedPåfølgendeBarn';\n\nexport const overstigerMinsterettVedToTette = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const { familiehendelsesdato, perioder, stønadskontoer, søkerErFarEllerMedmor, minsterettUkerToTette } = grunnlag;\n    const perioderEtterFørsteStønadsperiodeNyttBarn = perioder.filter((periode) =>\n        laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn(periode, grunnlag.førsteUttaksdagNesteBarnsSak)\n    );\n    if (\n        minsterettUkerToTette === undefined ||\n        minsterettUkerToTette === 0 ||\n        perioderEtterFørsteStønadsperiodeNyttBarn.length === 0\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n    const perioderFørFørsteStønadsperiodeNyttBarn = perioder.filter(\n        (periode) => !laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn(periode, grunnlag.førsteUttaksdagNesteBarnsSak)\n    );\n    const minsterettMaxAntallUker = minsterettUkerToTette;\n    const minsterettMaxAntallDager = minsterettMaxAntallUker * 5;\n\n    const brukteDagerPerForelderFørFørsteStønadsdagNyttBarn = getBrukteDager(\n        stønadskontoer,\n        perioderFørFørsteStønadsperiodeNyttBarn,\n        familiehendelsesdato\n    );\n    const uttaksdagerFremTilNyttBarnStønadsdag = søkerErFarEllerMedmor\n        ? brukteDagerPerForelderFørFørsteStønadsdagNyttBarn.farMedmor.dagerEgneKvoter +\n          brukteDagerPerForelderFørFørsteStønadsdagNyttBarn.farMedmor.dagerFellesperiode\n        : brukteDagerPerForelderFørFørsteStønadsdagNyttBarn.mor.dagerEgneKvoter +\n          brukteDagerPerForelderFørFørsteStønadsdagNyttBarn.mor.dagerFellesperiode;\n\n    const dagerIgjenÅBrukePåMinsteretten = minsterettMaxAntallDager - uttaksdagerFremTilNyttBarnStønadsdag;\n\n    const brukteDagerPerForelderEtterFørsteStønadsdagNyttBarn = getBrukteDager(\n        stønadskontoer,\n        perioderEtterFørsteStønadsperiodeNyttBarn,\n        familiehendelsesdato\n    );\n    const uttaksdagerEtterNyttBarnStønadsdag = søkerErFarEllerMedmor\n        ? brukteDagerPerForelderEtterFørsteStønadsdagNyttBarn.farMedmor.dagerEgneKvoter +\n          brukteDagerPerForelderEtterFørsteStønadsdagNyttBarn.farMedmor.dagerFellesperiode\n        : brukteDagerPerForelderEtterFørsteStønadsdagNyttBarn.mor.dagerEgneKvoter +\n          brukteDagerPerForelderEtterFørsteStønadsdagNyttBarn.mor.dagerFellesperiode;\n\n    const dagerIgjenAvMinsterett = dagerIgjenÅBrukePåMinsteretten - uttaksdagerEtterNyttBarnStønadsdag;\n\n    return {\n        passerer: dagerIgjenAvMinsterett >= 0,\n        info: {\n            intlKey: 'uttaksplan.validering.info.overstigerMinsterettVedToTette',\n            values: {\n                uker: minsterettMaxAntallUker,\n                forMyeUttak: Math.abs(dagerIgjenAvMinsterett),\n            },\n        },\n    };\n};\n","import { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { RegelTest, RegelTestresultat } from 'uttaksplan/validering/utils/types/regelTypes';\nimport { laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn } from './periodevalideringstester/forSenUttakVedPåfølgendeBarn';\n\nexport const harPerioderEtterFørsteStønadsdagNesteBarnDerToTette: RegelTest = (\n    grunnlag: Søknadsinfo\n): RegelTestresultat => {\n    if (grunnlag.minsterettUkerToTette === undefined || grunnlag.minsterettUkerToTette === 0) {\n        return {\n            passerer: true,\n        };\n    }\n    const perioderEtterFørsteStønadsperiodeNyttBarn = grunnlag.perioder.filter((periode) =>\n        laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn(periode, grunnlag.førsteUttaksdagNesteBarnsSak)\n    );\n\n    const tekstKey = grunnlag.søkerErFarEllerMedmor\n        ? 'uttaksplan.validering.info.harPerioderEtterFørsteStønadsdagNesteBarnDerToTette.far'\n        : 'uttaksplan.validering.info.harPerioderEtterFørsteStønadsdagNesteBarnDerToTette.mor';\n    return {\n        passerer: perioderEtterFørsteStønadsperiodeNyttBarn.length === 0,\n        info: {\n            intlKey: tekstKey,\n        },\n    };\n};\n","import { inneholderUttaksplanPerioderTest } from './tester/inneholderUttaksplanPerioderTest';\nimport { harMorSøktUgyldigUttakFørsteSeksUkerTest } from './tester/harMorSøktUgyldigUttakFørsteSeksUkerTest';\nimport { stønadskontoInneholderForMyeUttakKunSøkerTest } from './tester/stønadskontoInneholderForMyeUttakKunSøkerTest';\nimport { harFarMedmorSøktUgyldigUttakEllerUtsettelseFørsteSeksUkerTest } from './tester/harFarMedmorSøktUgyldigUttakEllerUtsettelseFørsteSeksUkerTest';\nimport { erUttaksplanBareOppholdTest } from './tester/erUttaksplanBareOppholdTest';\nimport { slutterUttaksplanMedOppholdTest } from './tester/slutterUttaksplanMedOppholdTest';\nimport { starterUttaksplanMedOppholdTest } from './tester/starterUttaksplanMedOppholdTest';\nimport { erUttaksplanGraderingStørreEnnSamtidigUttakTest } from './tester/erUttaksplanGraderingStørreEnnSamtidigUttakTest';\nimport { erTilleggsopplysningerGyldigTest } from './tester/erTilleggsopplysningerGyldigTest';\nimport { harTilleggsopplysningerGyldigeCharsTest } from './tester/harTilleggsopplysningerGyldigeCharsTest';\nimport { harUttaksplanForMangeFlerbarnsdagerTest } from './tester/harUttaksplanForMangeFlerbarnsdagerTest';\nimport { inneholderUttaksplanDatoSomIkkeErUttaksdag } from './tester/inneholderUttaksplanDatoSomIkkeErUttaksdagTest';\nimport { harPerioderManglendeVedleggTest } from './tester/harPerioderManglendeVedleggTest';\nimport { inneholderSenUtsettelsePgaFerieTest } from './tester/inneholderSenUtsettelsePgaFerieTest';\nimport { inneholderTapteDagerTest } from './tester/inneholderTapteDagerTest';\nimport { inneholderBareUtsettelserTest } from './tester/inneholderBareUtsettelserTest';\nimport { inneholderSenUtsettelsePgaArbeidTest } from './tester/inneholderSenUtsettelsePgaArbeidTest';\nimport { overskriverEndringerAnnenPartsPerioder } from './tester/overskriverEndringerAnnenPartsPerioder';\nimport { overlapperPeriodeAndrePerioder } from './tester/overlapperPeriodeAndrePerioderTest';\nimport periodevalideringsregler, { PeriodeValiderRegelKey } from './tester/periodevalideringstester';\nimport { harSøktOmFerieUtenArbeidsforhold } from './tester/harSøktOmFerieUtenArbeidsforholdTest';\nimport { inneholderForMyeFerie } from './tester/inneholderForMyeFerie';\nimport { kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme } from './tester/kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme';\nimport { erUttaksmengdeForFarMedmorForHøyTest } from './tester/erUttaksmengdeForFarMedmorForHøyTest';\nimport { burdeKanskjeSøkeGraderingTest } from './tester/burdeKanskjeSøkeGraderingTest';\nimport { ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindatoTest } from './tester/ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindatoTest';\nimport { Regel, RegelAlvorlighet } from './utils/types/regelTypes';\nimport { førsteOktober2021ReglerGjelder } from 'app/utils/dateUtils';\nimport { inneholderPerioderUtenAktivitetskrav } from './tester/inneholderPerioderUtenAktivitetskrav';\nimport { inneholderUtsettelserUtenÅrsak } from './tester/inneholderUtsettelserUtenÅrsak';\nimport { farMedmorHarSøktUgyldigAntallDagerUttakRundtFødselTest } from './tester/farMedmorHarSøktUgyldigAntallDagerUttakRundtFødselTest';\nimport { harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUkerTest } from './tester/harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUkerTest';\nimport { farMedMorHarRettPåUttakRundtFødselTest } from './tester/farMedMorHarRettPåUttakRundtFødselTest';\nimport { farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest } from './tester/farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest';\nimport { inneholderUttaksperioderMedUbesvartGradering } from './tester/inneholderUttaksperioderMedUbesvartGradering';\nimport { inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest } from './tester/inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest';\nimport { farMedmorHarRettPåFlerbarnsdagerTest } from './tester/farMedmorHarRettPåFlerbarnsdagerTest';\nimport { overstigerMinsterettVedToTette } from './tester/overstigerMinsterettVedToTette';\nimport { harPerioderEtterFørsteStønadsdagNesteBarnDerToTette } from './tester/harPerioderEtterFørsteStønadsdagNesteBarnDerToTette';\n\nexport enum UttaksplanRegelKey {\n    'planenInneholderIngenPerioder' = 'planenInneholderIngenPerioder',\n    'morHarSøktUgyldigUttakFørsteSeksUker' = 'morHarSøktUgyldigUttakFørsteSeksUker',\n    'farMedmorHarSøktUgyldigUttakEllerUtsettelseFørsteSeksUker' = 'farMedmorHarSøktUgyldigUttakEllerUtsettelseFørsteSeksUker',\n    'farMedmorHarSøktUgyldigAntallDagerUttakRundtFødsel' = 'farMedmorHarSøktUgyldigAntallDagerUttakRundtFødsel',\n    'harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUker' = 'harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUker',\n    'farMedmorHarSøktUttakRundtFødselUtenforGyldigPeriode' = 'farMedmorHarSøktUttakRundtFødselUtenforGyldigPeriode',\n    'stønadskontoInneholderForMyeUttakKunSøker' = 'stønadskontoInneholderForMyeUttakKunSøker',\n    'uttaksplanErBareOpphold' = 'uttaksplanErBareOpphold',\n    'uttaksplanStarterMedOpphold' = 'uttaksplanStarterMedOpphold',\n    'uttaksplanSlutterMedOpphold' = 'uttaksplanSlutterMedOpphold',\n    'uttaksplanGraderingStørreEnnSamtidigUttak' = 'uttaksplanGraderingStørreEnnSamtidigUttak',\n    'begrunnelseVedForSenEndringErUgyldig' = 'begrunnelseVedForSenEndringErUgyldig',\n    'begrunnelseVedForSenEndringHarUgyldigeChars' = 'begrunnelseVedForSenEndringHarUgyldigeChars',\n    'uttaksplanHarForMangeFlerbarnsdager' = 'uttaksplanHarForMangeFlerbarnsdager',\n    'uttaksplanInneholderDatoSomIkkeErUttaksdag' = 'uttaksplanInneholderDatoSomIkkeErUttaksdag',\n    'perioderManglerVedlegg' = 'manglendeVedlegg',\n    'inneholderSenUtsettelsePgaFerie' = 'inneholderSenUtsettelsePgaFerieTest',\n    'inneholderSenUtsettelsePgaArbeid' = 'inneholderSenUtsettelsePgaArbeidTest',\n    'inneholderTapteDager' = 'inneholderTapteDager',\n    'inneholderBareUtsettelser' = 'inneholderBareUtsettelser',\n    'inneholderForMyeFerie' = 'inneholderForMyeFerie',\n    'endringerOverskriverAnnenPartsPerioder' = 'endringerOverskriverAnnenPartsPerioder',\n    'periodeOverlapperAndrePerioder' = 'periodeOverlapperAndrePerioder',\n    'harSøktOmFerieUtenArbeidsforhold' = 'harSøktOmFerieUtenArbeidsforhold',\n    'kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme' = 'kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme',\n    'uttaksmengdeForFarMedmorErForHøy' = 'uttaksmengdeForFarMedmorErForHøy',\n    'burdeKanskjeSøkeGradering' = 'burdeKanskjeSøkeGradering',\n    'ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindato' = 'ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindato',\n    'inneholderPerioderUtenAktivitetskrav' = 'inneholderPerioderUtenAktivitetskrav',\n    'inneholderUtsettelserUtenÅrsak' = 'inneholderUtsettelserUtenÅrsak',\n    'farMedMorHarRettPåUttakRundtFødsel' = 'farMedMorHarRettPåUttakRundtFødsel',\n    'farMedmorHarRettPåForeldrepengerUtenAktivitetskrav' = 'farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest',\n    'farMedmorHarRettPåFlerbarnsdager' = 'farMedmorHarRettPåFlerbarnsdagerTest',\n    'inneholderUttaksperioderMedUbesvartGradering' = 'inneholderUttaksperioderMedUbesvartGradering',\n    'inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest' = 'inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest',\n    'overstigerMinsterettVedToTette' = 'overstigerMinsterettVedToTette',\n    'harPerioderEtterFørsteStønadsdagNesteBarnDerToTette' = 'harPerioderEtterFørsteStønadsdagNesteBarnDerToTette',\n}\n\nexport type RegelKey = UttaksplanRegelKey | PeriodeValiderRegelKey;\n\nconst uttaksplanValideringRegler = (familiehendelsesdato: Date): Regel[] => [\n    {\n        key: UttaksplanRegelKey.planenInneholderIngenPerioder,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderUttaksplanPerioderTest,\n    },\n    {\n        key: UttaksplanRegelKey.stønadskontoInneholderForMyeUttakKunSøker,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: stønadskontoInneholderForMyeUttakKunSøkerTest,\n    },\n    {\n        key: UttaksplanRegelKey.morHarSøktUgyldigUttakFørsteSeksUker,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harMorSøktUgyldigUttakFørsteSeksUkerTest,\n    },\n    {\n        key: UttaksplanRegelKey.farMedmorHarSøktUgyldigUttakEllerUtsettelseFørsteSeksUker,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harFarMedmorSøktUgyldigUttakEllerUtsettelseFørsteSeksUkerTest,\n    },\n    {\n        key: UttaksplanRegelKey.farMedmorHarSøktUgyldigAntallDagerUttakRundtFødsel,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: farMedmorHarSøktUgyldigAntallDagerUttakRundtFødselTest,\n    },\n    {\n        key: UttaksplanRegelKey.harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUker,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUkerTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksmengdeForFarMedmorErForHøy,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: erUttaksmengdeForFarMedmorForHøyTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksplanErBareOpphold,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: erUttaksplanBareOppholdTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksplanStarterMedOpphold,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: starterUttaksplanMedOppholdTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksplanSlutterMedOpphold,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: slutterUttaksplanMedOppholdTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksplanGraderingStørreEnnSamtidigUttak,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: erUttaksplanGraderingStørreEnnSamtidigUttakTest,\n    },\n    {\n        key: UttaksplanRegelKey.begrunnelseVedForSenEndringErUgyldig,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: erTilleggsopplysningerGyldigTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksplanHarForMangeFlerbarnsdager,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harUttaksplanForMangeFlerbarnsdagerTest,\n    },\n    {\n        key: UttaksplanRegelKey.begrunnelseVedForSenEndringHarUgyldigeChars,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harTilleggsopplysningerGyldigeCharsTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksplanInneholderDatoSomIkkeErUttaksdag,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderUttaksplanDatoSomIkkeErUttaksdag,\n    },\n    {\n        key: UttaksplanRegelKey.perioderManglerVedlegg,\n        alvorlighet: RegelAlvorlighet.ADVARSEL,\n        test: harPerioderManglendeVedleggTest,\n        slåsSammenVedOppsummering: true,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderSenUtsettelsePgaFerie,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: inneholderSenUtsettelsePgaFerieTest,\n        slåsSammenVedOppsummering: true,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderSenUtsettelsePgaArbeid,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: inneholderSenUtsettelsePgaArbeidTest,\n        slåsSammenVedOppsummering: true,\n    },\n    {\n        key: UttaksplanRegelKey.farMedMorHarRettPåUttakRundtFødsel,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: farMedMorHarRettPåUttakRundtFødselTest,\n        skjulesIPeriode: true,\n    },\n    {\n        key: UttaksplanRegelKey.farMedmorHarRettPåForeldrepengerUtenAktivitetskrav,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest,\n        skjulesIPeriode: true,\n    },\n    {\n        key: UttaksplanRegelKey.farMedmorHarRettPåFlerbarnsdager,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: farMedmorHarRettPåFlerbarnsdagerTest,\n        skjulesIPeriode: true,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderTapteDager,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: inneholderTapteDagerTest,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderBareUtsettelser,\n        alvorlighet: førsteOktober2021ReglerGjelder(familiehendelsesdato)\n            ? RegelAlvorlighet.FEIL\n            : RegelAlvorlighet.INFO,\n        test: inneholderBareUtsettelserTest,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderForMyeFerie,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderForMyeFerie,\n    },\n    {\n        key: UttaksplanRegelKey.endringerOverskriverAnnenPartsPerioder,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: overskriverEndringerAnnenPartsPerioder,\n        slåsSammenVedOppsummering: false,\n    },\n    {\n        key: UttaksplanRegelKey.periodeOverlapperAndrePerioder,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: overlapperPeriodeAndrePerioder,\n        slåsSammenVedOppsummering: false,\n        skjulesIOppsummering: true,\n    },\n    {\n        key: UttaksplanRegelKey.harSøktOmFerieUtenArbeidsforhold,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harSøktOmFerieUtenArbeidsforhold,\n    },\n    {\n        key: UttaksplanRegelKey.kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme,\n    },\n    {\n        key: UttaksplanRegelKey.burdeKanskjeSøkeGradering,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: burdeKanskjeSøkeGraderingTest,\n    },\n    {\n        key: UttaksplanRegelKey.ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindato,\n        alvorlighet: RegelAlvorlighet.ADVARSEL,\n        test: ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindatoTest,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderPerioderUtenAktivitetskrav,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderPerioderUtenAktivitetskrav,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderUttaksperioderMedUbesvartGradering,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderUttaksperioderMedUbesvartGradering,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderUtsettelserUtenÅrsak,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderUtsettelserUtenÅrsak,\n    },\n    {\n        key: UttaksplanRegelKey.overstigerMinsterettVedToTette,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: overstigerMinsterettVedToTette,\n    },\n    {\n        key: UttaksplanRegelKey.harPerioderEtterFørsteStønadsdagNesteBarnDerToTette,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: harPerioderEtterFørsteStønadsdagNesteBarnDerToTette,\n    },\n];\n\nconst uttaksplanRegler = (familiehendelsesDato: Date) => [\n    ...uttaksplanValideringRegler(familiehendelsesDato),\n    ...periodevalideringsregler,\n];\n\nexport default uttaksplanRegler;\n","import { groupBy } from 'lodash';\nimport uttaksplanRegler from '.';\nimport { getRegelAvvik, hasRegelFeil, regelHarAvvik, regelPasserer } from './utils/regelUtils';\nimport { Søknadsinfo } from './utils/types/Søknadsinfo';\nimport { RegelStatus, UttaksplanRegelTestresultat } from './utils/types/regelTypes';\n\nconst REGEL_INTL_PREFIX = 'uttaksplan.validering';\n\nexport const sjekkUttaksplanOppMotRegler = (valideringsgrunnlag: Søknadsinfo): RegelStatus[] => {\n    return uttaksplanRegler(valideringsgrunnlag.familiehendelsesdato).map((regel) => {\n        const resultat = regel.test(valideringsgrunnlag);\n        return resultat.passerer\n            ? regelPasserer(regel)\n            : regelHarAvvik(regel, REGEL_INTL_PREFIX, resultat.info, resultat.periodeId);\n    });\n};\n\nexport const validerUttaksplan = (søknadsinfo: Søknadsinfo): UttaksplanRegelTestresultat => {\n    const resultat = sjekkUttaksplanOppMotRegler(søknadsinfo);\n\n    const avvik = getRegelAvvik(resultat);\n    const avvikPerPeriode = groupBy(\n        avvik.filter((a) => a.periodeId !== undefined),\n        (r) => r.periodeId\n    );\n\n    const harFeil = hasRegelFeil(avvik);\n    return {\n        resultat,\n        avvik,\n        avvikPerPeriode,\n        harFeil,\n    };\n};\n","import * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { VeilederMessage } from './types';\nimport VeilederMeldinger from './VeilederMeldinger';\nimport AriaText from 'uttaksplan/components/aria-text/AriaText';\nimport { GuidePanel } from '@navikt/ds-react';\n\ninterface Props {\n    messages: VeilederMessage[];\n    ariaTittel?: string;\n    skjulMeldingIkon?: boolean;\n}\n\nconst VeilederInfo: React.FunctionComponent<Props> = ({ messages, skjulMeldingIkon = false, ariaTittel }) => {\n    return (\n        <GuidePanel poster>\n            {ariaTittel && (\n                <AriaText tag=\"h2\">\n                    <FormattedMessage id=\"uttaksplan.regelAvvik.ariaTittel\" />\n                </AriaText>\n            )}\n            <VeilederMeldinger meldinger={messages} stil=\"transparent\" skjulMeldingIkon={skjulMeldingIkon} />\n        </GuidePanel>\n    );\n};\n\nexport default VeilederInfo;\n","import { IntlShape } from 'react-intl';\n\nexport const intlHasKey = (intl: IntlShape, key: string) => {\n    return intl.messages[key] !== undefined;\n};\n","import { VeiledermeldingerPerPeriode, VeilederMessage } from './types';\nimport { IntlShape } from 'react-intl';\nimport { RegelAvvik } from '../utils/types/regelTypes';\nimport { intlHasKey } from 'app/intl/utils';\nimport { getRegelIntlValues, trimRelaterteRegelAvvik } from '../utils/regelUtils';\nimport { UttaksplanAvvikType } from '../utils/types/UttaksplanAvvikType';\nimport { groupBy } from 'lodash';\n\nexport const veilederMessageAvsnitt = (\n    førsteTekst: VeilederMessage[],\n    andreTekst: VeilederMessage[],\n    visInfoOmPrematuruker: boolean\n): VeilederMessage[] => {\n    return visInfoOmPrematuruker === false ? førsteTekst : førsteTekst.concat(andreTekst);\n};\n\nconst mapAvvikTilMessage = (avvik: RegelAvvik, intl: IntlShape): VeilederMessage => {\n    const { info } = avvik;\n    const tittelIntlKey = `${info.intlKey}.tittel`;\n    const harTittel = intlHasKey(intl, tittelIntlKey);\n    return {\n        type: avvik.regel.alvorlighet,\n        contentIntlKey: info.intlKey,\n        titleIntlKey: harTittel ? tittelIntlKey : undefined,\n        formatContentAsHTML: info.renderAsHtml,\n        values: getRegelIntlValues(intl, info),\n        periodeId: avvik.regel.skjulesIPeriode !== true ? avvik.periodeId : undefined,\n        skjulesIOppsummering: avvik.regel.skjulesIOppsummering,\n        avvikType: avvik.regel.avvikType as UttaksplanAvvikType,\n    };\n};\n\nexport const getUttaksplanVeilederinfo = (\n    avvik: RegelAvvik[],\n    intl: IntlShape,\n    grupperAvvik: boolean\n): VeilederMessage[] => {\n    return trimRelaterteRegelAvvik(avvik, grupperAvvik).map((a) => mapAvvikTilMessage(a, intl));\n};\n\nexport const getPeriodelisteMeldinger = (veilederinfo: VeilederMessage[]): VeiledermeldingerPerPeriode => {\n    const meldinger = veilederinfo.filter((info) => info.periodeId !== undefined);\n    return groupBy(meldinger, (info) => info.periodeId);\n};\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */\nfunction throttle(func, wait, options) {\n  var leading = true,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, {\n    'leading': leading,\n    'maxWait': wait,\n    'trailing': trailing\n  });\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = throttle;\n","import throttle from 'lodash.throttle';\nimport { injectIntl, IntlShape } from 'react-intl';\nimport { Block, intlUtils } from '@navikt/fp-common';\nimport { tilleggsopplysningerMaxLength } from 'uttaksplan/validering/tester/erTilleggsopplysningerGyldigTest';\nimport { Attachment } from 'app/types/Attachment';\nimport { BodyLong, Label, ReadMore, Textarea } from '@navikt/ds-react';\nimport { ChangeEvent, Component } from 'react';\n\ninterface OwnProps {\n    begrunnelse?: string;\n    vedlegg?: Attachment[];\n    onBegrunnelseTekstChange: (begrunnelse: string) => void;\n    intl: IntlShape;\n}\n\ntype Props = OwnProps;\n\ninterface State {\n    begrunnelse: string;\n}\n\nconst getLabel = (intl: IntlShape) => {\n    return (\n        <>\n            <Label>{intlUtils(intl, 'uttaksplan.tilleggsopplysninger.label')}</Label>\n        </>\n    );\n};\n\nexport type TextareaChangeEvent = ChangeEvent<HTMLTextAreaElement>;\n\nclass OppgiTilleggsopplysninger extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            begrunnelse: this.props.begrunnelse || '',\n        };\n\n        this.throttledOnChange = throttle(this.throttledOnChange, 2000);\n    }\n\n    throttledOnChange = () => {\n        this.props.onBegrunnelseTekstChange(this.state.begrunnelse);\n    };\n\n    handleBegrunnelseChange = (e: TextareaChangeEvent) => {\n        this.setState(\n            {\n                begrunnelse: e.target.value,\n            },\n            this.throttledOnChange\n        );\n    };\n\n    render() {\n        const { intl } = this.props;\n\n        return (\n            <div className=\"blokk-m\">\n                <Block margin=\"l\" padBottom=\"xl\">\n                    <Textarea\n                        value={this.state.begrunnelse}\n                        maxLength={tilleggsopplysningerMaxLength}\n                        name=\"begrunnelseForSenEndring\"\n                        label={getLabel(intl)}\n                        onChange={this.handleBegrunnelseChange}\n                    />\n                    <ReadMore header={intlUtils(intl, 'uttaksplan.tilleggsopplysninger.apneLabel')}>\n                        <div style={{ backgroundColor: '#e9e7e7', padding: '1.5rem' }}>\n                            <Block margin=\"s\">\n                                <Label>\n                                    {intlUtils(intl, 'uttaksplan.tilleggsopplysninger.sykdomTilbakeITid.overskrift')}\n                                </Label>\n                                <BodyLong>\n                                    {intlUtils(intl, 'uttaksplan.tilleggsopplysninger.sykdomTilbakeITid')}\n                                </BodyLong>\n                            </Block>\n                            <Block margin=\"s\">\n                                <Label>{intlUtils(intl, 'uttaksplan.tilleggsopplysninger.uttak.overskrift')}</Label>\n                                <BodyLong>{intlUtils(intl, 'uttaksplan.tilleggsopplysninger.uttak')}</BodyLong>\n                            </Block>\n                            <Block margin=\"s\">\n                                <Label>\n                                    {intlUtils(\n                                        intl,\n                                        'uttaksplan.tilleggsopplysninger.utsettelsearbeidellergradering.overskrift'\n                                    )}\n                                </Label>\n                                <BodyLong>\n                                    {intlUtils(intl, 'uttaksplan.tilleggsopplysninger.utsettelsearbeidellergradering')}\n                                </BodyLong>\n                            </Block>\n                            <Label>{intlUtils(intl, 'uttaksplan.tilleggsopplysninger.sykdom.overskrift')}</Label>\n                            <BodyLong>{intlUtils(intl, 'uttaksplan.tilleggsopplysninger.sykdom')}</BodyLong>\n                        </div>\n                    </ReadMore>\n                </Block>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(OppgiTilleggsopplysninger);\n","import { FunctionComponent } from 'react';\nimport { bemUtils, Block } from '@navikt/fp-common';\nimport { FormattedMessage } from 'react-intl';\nimport { BodyShort, Button, Heading, Modal } from '@navikt/ds-react';\n\nimport './slettUttaksplanModal.less';\n\ninterface Props {\n    isOpen: boolean;\n    erEndringssøknad: boolean;\n    onClose: () => void;\n    handleSlettUttaksplanModalBekreft: () => void;\n}\n\nconst SlettUttaksplanModal: FunctionComponent<Props> = ({\n    isOpen,\n    erEndringssøknad,\n    onClose,\n    handleSlettUttaksplanModalBekreft,\n}) => {\n    const bem = bemUtils('slettUttaksplanModal');\n\n    let innhold1Id = 'uttaksplan.slettPlan.innhold1.førstegangssøknad';\n    let innhold2Id = 'uttaksplan.slettPlan.innhold2.førstegangssøknad';\n    if (erEndringssøknad) {\n        innhold1Id = 'uttaksplan.slettPlan.innhold1.endringssøknad';\n        innhold2Id = 'uttaksplan.slettPlan.innhold2.endringssøknad';\n    }\n\n    return (\n        <Modal\n            className={bem.block}\n            open={isOpen}\n            closeButton={true}\n            onClose={onClose}\n            aria-label=\"Slett uttaksplanen din\"\n        >\n            <div className={bem.element('content')}>\n                <Block padBottom=\"l\">\n                    <Heading size=\"small\">\n                        <FormattedMessage id=\"uttaksplan.slettPlan.modal.tittel\" />\n                    </Heading>\n                    <BodyShort>\n                        <FormattedMessage id={innhold1Id} />\n                    </BodyShort>\n                    <br />\n                    <BodyShort>\n                        <FormattedMessage id={innhold2Id} />\n                    </BodyShort>\n                </Block>\n                <div className={bem.element('knappWrapper')}>\n                    <Button onClick={handleSlettUttaksplanModalBekreft}>\n                        <FormattedMessage id=\"uttaksplan.slettPlan.slett\" />\n                    </Button>\n                    <Button variant=\"secondary\" onClick={onClose}>\n                        <FormattedMessage id=\"uttaksplan.slettPlan.avbryt\" />\n                    </Button>\n                </div>\n            </div>\n        </Modal>\n    );\n};\n\nexport default SlettUttaksplanModal;\n","import { Periode } from 'uttaksplan/types/Periode';\nimport { getPeriodeHullEllerPeriodeUtenUttak } from './uttaksplanbuilderUtils';\n\ninterface SlettPeriodeParams {\n    perioder: Periode[];\n    slettetPeriode: Periode;\n    familiehendelsesdato: Date;\n    harAktivitetskravIPeriodeUtenUttak: boolean;\n    erAdopsjon: boolean;\n    bareFarHarRett: boolean;\n    erFarEllerMedmor: boolean;\n    førsteUttaksdagNesteBarnsSak: Date | undefined;\n}\n\nexport const slettPeriode = ({\n    perioder,\n    slettetPeriode,\n    familiehendelsesdato,\n    harAktivitetskravIPeriodeUtenUttak,\n    erAdopsjon,\n    bareFarHarRett,\n    erFarEllerMedmor,\n    førsteUttaksdagNesteBarnsSak,\n}: SlettPeriodeParams): Periode[] => {\n    const result: Periode[] = perioder.reduce((res, periode, index) => {\n        if (index === 0 && periode.id === slettetPeriode.id) {\n            return res;\n        }\n\n        if (periode.id === slettetPeriode.id) {\n            res.push(\n                ...getPeriodeHullEllerPeriodeUtenUttak(\n                    slettetPeriode.tidsperiode,\n                    harAktivitetskravIPeriodeUtenUttak,\n                    familiehendelsesdato,\n                    erAdopsjon,\n                    bareFarHarRett,\n                    erFarEllerMedmor,\n                    førsteUttaksdagNesteBarnsSak\n                )\n            );\n            return res;\n        }\n\n        res.push(periode);\n        return res;\n    }, [] as Periode[]);\n\n    return result;\n};\n","import { Periode } from 'uttaksplan/types/Periode';\nimport { leggTilPeriode } from './leggTilPeriode';\nimport { slettPeriode } from './slettPeriode';\nimport { slåSammenLikePerioder } from './uttaksplanbuilderUtils';\n\ninterface OppdaterPeriodeParams {\n    perioder: Periode[];\n    endretPeriode: Periode;\n    originalPeriode: Periode;\n    familiehendelsesdato: Date;\n    harAktivitetskravIPeriodeUtenUttak: boolean;\n    erAdopsjon: boolean;\n    bareFarHarRett: boolean;\n    erFarEllerMedmor: boolean;\n    annenPartsUttak: Periode[] | undefined;\n    førsteUttaksdagNesteBarnsSak: Date | undefined;\n}\n\nexport const oppdaterPeriode = ({\n    perioder,\n    endretPeriode,\n    originalPeriode,\n    familiehendelsesdato,\n    harAktivitetskravIPeriodeUtenUttak,\n    erAdopsjon,\n    bareFarHarRett,\n    erFarEllerMedmor,\n    annenPartsUttak,\n    førsteUttaksdagNesteBarnsSak,\n}: OppdaterPeriodeParams): Periode[] => {\n    const perioderSlettetEndretPeriode = slåSammenLikePerioder(\n        slettPeriode({\n            perioder,\n            slettetPeriode: originalPeriode,\n            familiehendelsesdato,\n            harAktivitetskravIPeriodeUtenUttak,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak,\n        }),\n        familiehendelsesdato,\n        førsteUttaksdagNesteBarnsSak,\n        annenPartsUttak\n    );\n\n    return slåSammenLikePerioder(\n        leggTilPeriode({\n            perioder: perioderSlettetEndretPeriode,\n            nyPeriode: endretPeriode,\n            familiehendelsesdato,\n            harAktivitetskravIPeriodeUtenUttak,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak,\n        }),\n        familiehendelsesdato,\n        førsteUttaksdagNesteBarnsSak,\n        annenPartsUttak\n    );\n};\n","import { starterUttaksperiodeFørFødsel } from 'app/utils/wlbUtils';\nimport {\n    isForeldrepengerFørFødselUttaksperiode,\n    isInfoPeriodeAnnenPart,\n    isUtsettelsesperiode,\n    Periode,\n} from 'uttaksplan/types/Periode';\nimport { leggTilPeriode } from './leggTilPeriode';\nimport { oppdaterPeriode } from './oppdaterPeriode';\nimport { slettPeriode } from './slettPeriode';\nimport {\n    finnOgSettInnHull,\n    fjernUnødvendigeHull,\n    settInnAnnenPartsUttak,\n    slåSammenLikePerioder,\n} from './uttaksplanbuilderUtils';\n\nconst leggTilPeriodeOgBuild = (\n    bevegeligePerioder: Periode[],\n    fastePerioder: Periode[],\n    nyPeriode: Periode,\n    familiehendelsesdato: Date,\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    annenPartsUttak: Periode[] | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n) => {\n    let nyePerioder = slåSammenLikePerioder(\n        leggTilPeriode({\n            perioder: bevegeligePerioder,\n            nyPeriode,\n            familiehendelsesdato,\n            harAktivitetskravIPeriodeUtenUttak,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak,\n        }),\n        familiehendelsesdato,\n        førsteUttaksdagNesteBarnsSak\n    );\n\n    fastePerioder.forEach((fastPeriode) => {\n        nyePerioder = leggTilPeriode({\n            perioder: nyePerioder,\n            nyPeriode: fastPeriode,\n            familiehendelsesdato,\n            harAktivitetskravIPeriodeUtenUttak,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak,\n        });\n    });\n\n    if (annenPartsUttak) {\n        nyePerioder = finnOgSettInnHull(\n            settInnAnnenPartsUttak(nyePerioder, annenPartsUttak, familiehendelsesdato, førsteUttaksdagNesteBarnsSak),\n            harAktivitetskravIPeriodeUtenUttak,\n            familiehendelsesdato,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak\n        );\n    }\n\n    return nyePerioder;\n};\n\nconst oppdaterPeriodeOgBuild = (\n    endretPeriode: Periode,\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    annenPartsUttak: Periode[] | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n) => {\n    const originalPeriode = perioder.find((p) => p.id === endretPeriode.id)!;\n\n    let oppdatertePerioder = fjernUnødvendigeHull(\n        oppdaterPeriode({\n            perioder,\n            endretPeriode,\n            originalPeriode,\n            familiehendelsesdato,\n            harAktivitetskravIPeriodeUtenUttak,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            annenPartsUttak,\n            førsteUttaksdagNesteBarnsSak,\n        })\n    );\n\n    if (annenPartsUttak) {\n        oppdatertePerioder = finnOgSettInnHull(\n            oppdatertePerioder,\n            harAktivitetskravIPeriodeUtenUttak,\n            familiehendelsesdato,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak\n        );\n        oppdatertePerioder = settInnAnnenPartsUttak(\n            oppdatertePerioder,\n            annenPartsUttak,\n            familiehendelsesdato,\n            førsteUttaksdagNesteBarnsSak\n        );\n    }\n\n    return finnOgSettInnHull(\n        oppdatertePerioder,\n        harAktivitetskravIPeriodeUtenUttak,\n        familiehendelsesdato,\n        erAdopsjon,\n        bareFarHarRett,\n        erFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak\n    );\n};\n\nconst slettPeriodeOgBuild = (\n    perioder: Periode[],\n    slettetPeriode: Periode,\n    familiehendelsesdato: Date,\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    annenPartsUttak: Periode[] | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n) => {\n    let nyePerioder = fjernUnødvendigeHull(\n        slåSammenLikePerioder(\n            slettPeriode({\n                perioder,\n                slettetPeriode,\n                familiehendelsesdato,\n                harAktivitetskravIPeriodeUtenUttak,\n                erAdopsjon,\n                bareFarHarRett,\n                erFarEllerMedmor,\n                førsteUttaksdagNesteBarnsSak,\n            }),\n            familiehendelsesdato,\n            førsteUttaksdagNesteBarnsSak\n        )\n    );\n\n    if (annenPartsUttak) {\n        nyePerioder = finnOgSettInnHull(\n            nyePerioder,\n            harAktivitetskravIPeriodeUtenUttak,\n            familiehendelsesdato,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak\n        );\n        nyePerioder = settInnAnnenPartsUttak(\n            nyePerioder,\n            annenPartsUttak,\n            familiehendelsesdato,\n            førsteUttaksdagNesteBarnsSak\n        );\n    }\n\n    return finnOgSettInnHull(\n        nyePerioder,\n        harAktivitetskravIPeriodeUtenUttak,\n        familiehendelsesdato,\n        erAdopsjon,\n        bareFarHarRett,\n        erFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak\n    );\n};\n\nconst getFastePerioder = (perioder: Periode[], familiehendelsesdato: Date): Periode[] => {\n    return perioder.filter(\n        (p) =>\n            isUtsettelsesperiode(p) ||\n            isForeldrepengerFørFødselUttaksperiode(p) ||\n            starterUttaksperiodeFørFødsel(p, familiehendelsesdato)\n    );\n};\n\nconst getBevegeligePerioder = (\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n): Periode[] => {\n    return finnOgSettInnHull(\n        perioder.filter(\n            (p) =>\n                !isUtsettelsesperiode(p) &&\n                !isForeldrepengerFørFødselUttaksperiode(p) &&\n                !starterUttaksperiodeFørFødsel(p, familiehendelsesdato) &&\n                !isInfoPeriodeAnnenPart(p)\n        ),\n        harAktivitetskravIPeriodeUtenUttak,\n        familiehendelsesdato,\n        erAdopsjon,\n        bareFarHarRett,\n        erFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak\n    );\n};\n\nconst getAnnenPartsUttak = (perioder: Periode[]): Periode[] => {\n    return perioder.filter((p) => isInfoPeriodeAnnenPart(p));\n};\n\nconst Uttaksplanbuilder = (\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n    opprinneligPlan?: Periode[]\n) => {\n    const perioderUtenAnnenPart = finnOgSettInnHull(\n        perioder.filter((p) => !isInfoPeriodeAnnenPart(p)),\n        harAktivitetskravIPeriodeUtenUttak,\n        familiehendelsesdato,\n        erAdopsjon,\n        bareFarHarRett,\n        erFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak\n    );\n    const fastePerioder = getFastePerioder(perioderUtenAnnenPart, familiehendelsesdato);\n    const bevegeligePerioder = getBevegeligePerioder(\n        perioderUtenAnnenPart,\n        familiehendelsesdato,\n        harAktivitetskravIPeriodeUtenUttak,\n        erAdopsjon,\n        bareFarHarRett,\n        erFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak\n    );\n    let annenPartsUttak: Periode[] | undefined = undefined;\n\n    if (opprinneligPlan) {\n        annenPartsUttak = getAnnenPartsUttak(opprinneligPlan);\n    }\n\n    return {\n        leggTilPeriode: (nyPeriode: Periode) =>\n            leggTilPeriodeOgBuild(\n                bevegeligePerioder,\n                fastePerioder,\n                nyPeriode,\n                familiehendelsesdato,\n                harAktivitetskravIPeriodeUtenUttak,\n                erAdopsjon,\n                bareFarHarRett,\n                erFarEllerMedmor,\n                annenPartsUttak,\n                førsteUttaksdagNesteBarnsSak\n            ),\n        leggTilPerioder: (nyePerioder: Periode[]) => {\n            let resultat: Periode[] = [];\n            nyePerioder.forEach((periode, index) => {\n                if (index === 0) {\n                    resultat = leggTilPeriodeOgBuild(\n                        bevegeligePerioder,\n                        fastePerioder,\n                        periode,\n                        familiehendelsesdato,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        annenPartsUttak,\n                        førsteUttaksdagNesteBarnsSak\n                    );\n                } else {\n                    const nyAnnenPartsUttak = getAnnenPartsUttak(resultat);\n                    const nyFastePerioder = getFastePerioder(resultat, familiehendelsesdato);\n                    const nyBevegeligePerioder = getBevegeligePerioder(\n                        resultat,\n                        familiehendelsesdato,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        førsteUttaksdagNesteBarnsSak\n                    );\n                    resultat = leggTilPeriodeOgBuild(\n                        nyBevegeligePerioder,\n                        nyFastePerioder,\n                        periode,\n                        familiehendelsesdato,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        nyAnnenPartsUttak,\n                        førsteUttaksdagNesteBarnsSak\n                    );\n                }\n            });\n            return resultat;\n        },\n        oppdaterPeriode: (endretPeriode: Periode) =>\n            oppdaterPeriodeOgBuild(\n                endretPeriode,\n                perioderUtenAnnenPart,\n                familiehendelsesdato,\n                harAktivitetskravIPeriodeUtenUttak,\n                erAdopsjon,\n                bareFarHarRett,\n                erFarEllerMedmor,\n                annenPartsUttak,\n                førsteUttaksdagNesteBarnsSak\n            ),\n        oppdaterPerioder: (oppdatertePerioder: Periode[]) => {\n            let resultat: Periode[] = [];\n            oppdatertePerioder.forEach((endretPeriode, index) => {\n                if (index === 0) {\n                    resultat = oppdaterPeriodeOgBuild(\n                        endretPeriode,\n                        perioderUtenAnnenPart,\n                        familiehendelsesdato,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        annenPartsUttak,\n                        førsteUttaksdagNesteBarnsSak\n                    );\n                } else {\n                    const nyAnnenPartsUttak = getAnnenPartsUttak(resultat);\n                    const nyFastePerioder = getFastePerioder(resultat, familiehendelsesdato);\n                    const nyBevegeligePerioder = getBevegeligePerioder(\n                        resultat,\n                        familiehendelsesdato,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        førsteUttaksdagNesteBarnsSak\n                    );\n                    resultat = leggTilPeriodeOgBuild(\n                        nyBevegeligePerioder,\n                        nyFastePerioder,\n                        endretPeriode,\n                        familiehendelsesdato,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        nyAnnenPartsUttak,\n                        førsteUttaksdagNesteBarnsSak\n                    );\n                }\n            });\n            return resultat;\n        },\n        slettPeriode: (slettetPeriode: Periode) =>\n            slettPeriodeOgBuild(\n                perioderUtenAnnenPart,\n                slettetPeriode,\n                familiehendelsesdato,\n                harAktivitetskravIPeriodeUtenUttak,\n                erAdopsjon,\n                bareFarHarRett,\n                erFarEllerMedmor,\n                annenPartsUttak,\n                førsteUttaksdagNesteBarnsSak\n            ),\n    };\n};\n\nexport default Uttaksplanbuilder;\n","import { YesOrNo, getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\n\nexport enum UttaksplanFormField {\n    ønskerAutomatiskJustering = 'ønskerAutomatiskJustering',\n}\n\nexport interface UttaksplanFormData {\n    [UttaksplanFormField.ønskerAutomatiskJustering]: YesOrNo;\n}\n\nexport const UttaksplanFormComponents = getTypedFormComponents<UttaksplanFormField, UttaksplanFormData>();\n","import { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { convertBooleanOrUndefinedToYesOrNo, convertYesOrNoOrUndefinedToBoolean } from 'app/utils/formUtils';\nimport { UttaksplanFormData, UttaksplanFormField } from './UttaksplanFormConfig';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\n\nexport const cleanUttaksplanFormData = (\n    values: UttaksplanFormData,\n    visibility: QuestionVisibility<UttaksplanFormField, undefined>\n): UttaksplanFormData => {\n    const cleanedData: UttaksplanFormData = {\n        ønskerAutomatiskJustering: visibility.isVisible(UttaksplanFormField.ønskerAutomatiskJustering)\n            ? values.ønskerAutomatiskJustering\n            : YesOrNo.UNANSWERED,\n    };\n\n    return cleanedData;\n};\n\nexport const mapUttaksplanFormToState = (values: Partial<UttaksplanFormData>): boolean | undefined => {\n    return convertYesOrNoOrUndefinedToBoolean(values.ønskerAutomatiskJustering);\n};\n\nexport const mapUttaksplanFormValueToState = (value: YesOrNo): boolean | undefined => {\n    return convertYesOrNoOrUndefinedToBoolean(value);\n};\n\nexport const getUttaksplanFormInitialValues = (ønskerAutomatiskJustering: boolean | undefined): UttaksplanFormData => {\n    return {\n        ønskerAutomatiskJustering:\n            ønskerAutomatiskJustering !== undefined\n                ? convertBooleanOrUndefinedToYesOrNo(ønskerAutomatiskJustering)\n                : YesOrNo.UNANSWERED,\n    };\n};\n","import { Alert } from '@navikt/ds-react';\nimport { Block, intlUtils } from '@navikt/fp-common';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport actionCreator from 'app/context/action/actionCreator';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { UttaksplanFormComponents, UttaksplanFormField } from 'app/steps/uttaksplan/UttaksplanFormConfig';\nimport { mapUttaksplanFormValueToState } from 'app/steps/uttaksplan/UttaksplanFormUtils';\nimport dayjs from 'dayjs';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { isOverføringsperiode, isUttaksperiode, Periode } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\n\ninterface Props {\n    termindato: Date;\n    perioderMedUttakRundtFødsel: Periode[];\n    antallBarn: number;\n    visibility: QuestionVisibility<UttaksplanFormField, undefined>;\n}\nconst AutomatiskJusteringForm: FunctionComponent<Props> = ({\n    termindato,\n    perioderMedUttakRundtFødsel,\n    antallBarn,\n    visibility,\n}) => {\n    const intl = useIntl();\n    const uttaksdagPåEllerEtterTermin = Uttaksdagen(termindato).denneEllerNeste();\n    const { dispatch, state } = useForeldrepengesøknadContext();\n    const svarteJaMenFlerePerioderInnen6Uker =\n        state.brukerSvarteJaPåAutoJustering && perioderMedUttakRundtFødsel.length > 1;\n    const svarteJaMenStarterIkkeLengerPåTermin =\n        state.brukerSvarteJaPåAutoJustering &&\n        perioderMedUttakRundtFødsel.length === 1 &&\n        !dayjs(perioderMedUttakRundtFødsel[0].tidsperiode.fom).isSame(uttaksdagPåEllerEtterTermin, 'day');\n    const svarteJaMenEndretPeriodenPåTermin =\n        state.brukerSvarteJaPåAutoJustering &&\n        perioderMedUttakRundtFødsel.length === 1 &&\n        dayjs(perioderMedUttakRundtFødsel[0].tidsperiode.fom).isSame(uttaksdagPåEllerEtterTermin, 'day') &&\n        ((isUttaksperiode(perioderMedUttakRundtFødsel[0]) &&\n            (perioderMedUttakRundtFødsel[0].konto !== StønadskontoType.Fedrekvote ||\n                !perioderMedUttakRundtFødsel[0].ønskerSamtidigUttak)) ||\n            isOverføringsperiode(perioderMedUttakRundtFødsel[0]));\n    const svarteJaMenEndretPeriodenTilØnskerFlerbarnsdager =\n        state.brukerSvarteJaPåAutoJustering &&\n        perioderMedUttakRundtFødsel.length === 1 &&\n        dayjs(perioderMedUttakRundtFødsel[0].tidsperiode.fom).isSame(uttaksdagPåEllerEtterTermin, 'day') &&\n        isUttaksperiode(perioderMedUttakRundtFødsel[0]) &&\n        perioderMedUttakRundtFødsel[0].konto === StønadskontoType.Fedrekvote &&\n        perioderMedUttakRundtFødsel[0].ønskerFlerbarnsdager === true;\n    let infoTekstId = '';\n    if (svarteJaMenFlerePerioderInnen6Uker) {\n        infoTekstId = 'uttaksplan.automatiskJustering.info.hvisFlerePerioder';\n    }\n    if (svarteJaMenStarterIkkeLengerPåTermin) {\n        infoTekstId = 'uttaksplan.automatiskJustering.info.hvisIkkeLengerStarterPåTermin';\n    }\n\n    if (svarteJaMenEndretPeriodenPåTermin) {\n        infoTekstId = 'uttaksplan.automatiskJustering.info.hvisEndretPeriodePåTermin';\n    }\n    if (svarteJaMenEndretPeriodenTilØnskerFlerbarnsdager) {\n        infoTekstId = 'uttaksplan.automatiskJustering.info.hvisEndretPeriodeTilØnskerFlerbarnsdager';\n    }\n\n    const handleOnChange = (value: string) => {\n        const ønskerJustertUttakVedFødsel = mapUttaksplanFormValueToState(value as YesOrNo);\n        dispatch(actionCreator.setØnskerJustertUttakVedFødsel(ønskerJustertUttakVedFødsel));\n        dispatch(actionCreator.setBrukerSvarteJaPåAutoJustering(ønskerJustertUttakVedFødsel));\n    };\n\n    return (\n        <UttaksplanFormComponents.Form includeButtons={false}>\n            <div style={{ paddingTop: '1rem', paddingBottom: '1rem' }}>\n                {infoTekstId !== '' && (\n                    <Block padBottom=\"l\">\n                        <Alert variant=\"info\">\n                            <FormattedMessage id={infoTekstId} />\n                        </Alert>\n                    </Block>\n                )}\n                <Block visible={visibility.isVisible(UttaksplanFormField.ønskerAutomatiskJustering)} padBottom=\"l\">\n                    <UttaksplanFormComponents.YesOrNoQuestion\n                        name={UttaksplanFormField.ønskerAutomatiskJustering}\n                        legend={intlUtils(intl, 'uttaksplan.automatiskJustering.spørsmål', {\n                            antallBarn,\n                        })}\n                        validate={(value: YesOrNo) => {\n                            if (value === YesOrNo.UNANSWERED) {\n                                return intlUtils(intl, 'uttaksplan.automatiskJustering.svar.påkrevd');\n                            }\n\n                            return undefined;\n                        }}\n                        afterOnChange={(value) => handleOnChange(value)}\n                    />\n                </Block>\n            </div>\n        </UttaksplanFormComponents.Form>\n    );\n};\n\nexport default AutomatiskJusteringForm;\n","import { FunctionComponent } from 'react';\nimport { bemUtils, Block } from '@navikt/fp-common';\nimport { FormattedMessage } from 'react-intl';\nimport { BodyShort, Button, Heading, Modal } from '@navikt/ds-react';\n\nimport './resetUttaksplanModal.less';\n\ninterface Props {\n    isOpen: boolean;\n    onClose: () => void;\n    handleResetUttaksplanModalBekreft: () => void;\n}\n\nconst ResetUttaksplanModal: FunctionComponent<Props> = ({ isOpen, onClose, handleResetUttaksplanModalBekreft }) => {\n    const bem = bemUtils('resetUttaksplanModal');\n\n    return (\n        <Modal\n            className={bem.block}\n            open={isOpen}\n            closeButton={true}\n            onClose={onClose}\n            aria-label=\"Tilbakestill uttaksplanen din\"\n        >\n            <div className={bem.element('content')}>\n                <Block padBottom=\"l\">\n                    <Heading size=\"small\">\n                        <FormattedMessage id=\"uttaksplan.resetPlan.innhold1\" />\n                    </Heading>\n                    <BodyShort>\n                        <FormattedMessage id=\"uttaksplan.resetPlan.innhold2\" />\n                    </BodyShort>\n                </Block>\n                <div className={bem.element('knappWrapper')}>\n                    <Button onClick={handleResetUttaksplanModalBekreft}>\n                        <FormattedMessage id=\"uttaksplan.resetPlan.slett\" />\n                    </Button>\n                    <Button variant=\"secondary\" onClick={onClose}>\n                        <FormattedMessage id=\"uttaksplan.resetPlan.avbryt\" />\n                    </Button>\n                </div>\n            </div>\n        </Modal>\n    );\n};\n\nexport default ResetUttaksplanModal;\n","import { FunctionComponent, useEffect, useState } from 'react';\nimport { Block, intlUtils } from '@navikt/fp-common';\nimport Planlegger from './components/planlegger/Planlegger';\nimport { ForeldreparSituasjon } from 'app/types/ForeldreparSituasjonTypes';\nimport { Forelder } from 'app/types/Forelder';\nimport {\n    isAnnenPartInfoPeriode,\n    isUtsettelsesperiode,\n    Periode,\n    Utsettelsesperiode,\n    Uttaksperiode,\n} from './types/Periode';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport AnnenForelder, { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { Situasjon } from 'app/types/Situasjon';\nimport OversiktKvoter from './components/oversikt-kvoter/OversiktKvoter';\nimport { getToTetteReglerGjelder, ISOStringToDate, tidperiodeOverlapperDato } from 'app/utils/dateUtils';\nimport { validerUttaksplan } from './validering/validerUttaksplan';\nimport Søkersituasjon from 'app/context/types/Søkersituasjon';\nimport { Dekningsgrad } from 'app/types/Dekningsgrad';\nimport VeilederInfo from './validering/veilederInfo/VeilederInfo';\nimport { useIntl } from 'react-intl';\nimport { getPeriodelisteMeldinger, getUttaksplanVeilederinfo } from './validering/veilederInfo/utils';\nimport OppgiTilleggsopplysninger from './components/oppgi-tilleggsopplysninger/OppgiTilleggsopplysninger';\nimport { Tilleggsopplysninger } from 'app/context/types/Tilleggsopplysninger';\nimport { SenEndringÅrsak } from './types/SenEndringÅrsak';\nimport { getSeneEndringerSomKreverBegrunnelse } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { EksisterendeSak } from 'app/types/EksisterendeSak';\nimport InfoOmSøknaden from 'app/components/info-eksisterende-sak/InfoOmSøknaden';\nimport SlettUttaksplanModal from './components/slett-uttaksplan-modal/SlettUttaksplanModal';\nimport Uttaksplanbuilder from './builder/Uttaksplanbuilder';\nimport Barn, { BarnFraNesteSak } from 'app/context/types/Barn';\nimport { farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato } from 'app/utils/wlbUtils';\nimport { getHarAktivitetskravIPeriodeUtenUttak } from 'app/utils/uttaksplan/uttaksplanUtils';\nimport AutomatiskJusteringForm from './components/automatisk-justering-form/AutomatiskJusteringForm';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { UttaksplanFormField } from 'app/steps/uttaksplan/UttaksplanFormConfig';\nimport ResetUttaksplanModal from './components/reset-uttaksplan-modal/ResetUttaksplanModal';\nimport { splittPeriodePåDato, splittUttaksperiodePåFamiliehendelsesdato } from './builder/leggTilPeriode';\n\ninterface Props {\n    foreldreSituasjon: ForeldreparSituasjon;\n    forelderVedAleneomsorg: Forelder | undefined;\n    erDeltUttak: boolean;\n    uttaksplan: Periode[];\n    familiehendelsesdato: string;\n    handleOnPlanChange: (nyPlan: Periode[]) => void;\n    stønadskontoer: TilgjengeligStønadskonto[];\n    navnPåForeldre: NavnPåForeldre;\n    annenForelder: AnnenForelder;\n    arbeidsforhold: Arbeidsforhold[];\n    erEndringssøknad: boolean;\n    erFarEllerMedmor: boolean;\n    erFlerbarnssøknad: boolean;\n    erAleneOmOmsorg: boolean;\n    harMidlertidigOmsorg: boolean;\n    situasjon: Situasjon;\n    erMorUfør: boolean;\n    morHarRett: boolean;\n    søkersituasjon: Søkersituasjon;\n    dekningsgrad: Dekningsgrad;\n    antallBarn: number;\n    tilleggsopplysninger: Tilleggsopplysninger;\n    eksisterendeSak: EksisterendeSak | undefined;\n    perioderSomSkalSendesInn: Periode[];\n    morsSisteDag: Date | undefined;\n    harKomplettUttaksplan: boolean;\n    opprinneligPlan: Periode[] | undefined;\n    termindato: Date | undefined;\n    barn: Barn;\n    setUttaksplanErGyldig: (planErGyldig: boolean) => void;\n    handleBegrunnelseChange: (årsak: SenEndringÅrsak, begrunnelse: string) => void;\n    handleSlettUttaksplan: () => void;\n    handleResetUttaksplan: () => void;\n    visibility: QuestionVisibility<UttaksplanFormField, undefined>;\n    visAutomatiskJusteringForm: boolean;\n    perioderMedUttakRundtFødsel: Uttaksperiode[];\n    barnFraNesteSak: BarnFraNesteSak | undefined;\n    familiehendelsesdatoNesteSak: Date | undefined;\n    førsteUttaksdagNesteBarnsSak: Date | undefined;\n    minsterettUkerToTette: number | undefined;\n}\n\nexport interface PeriodeValidState {\n    id: string;\n    isValid: boolean;\n}\n\nconst Uttaksplan: FunctionComponent<Props> = ({\n    foreldreSituasjon,\n    erDeltUttak,\n    uttaksplan,\n    familiehendelsesdato,\n    stønadskontoer,\n    handleOnPlanChange,\n    navnPåForeldre,\n    annenForelder,\n    arbeidsforhold,\n    erEndringssøknad,\n    erFarEllerMedmor,\n    erFlerbarnssøknad,\n    erAleneOmOmsorg,\n    harMidlertidigOmsorg,\n    situasjon,\n    erMorUfør,\n    morHarRett,\n    søkersituasjon,\n    dekningsgrad,\n    antallBarn,\n    tilleggsopplysninger,\n    eksisterendeSak,\n    perioderSomSkalSendesInn,\n    harKomplettUttaksplan,\n    termindato,\n    opprinneligPlan,\n    setUttaksplanErGyldig,\n    handleBegrunnelseChange,\n    handleSlettUttaksplan,\n    handleResetUttaksplan,\n    barn,\n    visibility,\n    visAutomatiskJusteringForm,\n    perioderMedUttakRundtFødsel,\n    barnFraNesteSak,\n    familiehendelsesdatoNesteSak,\n    førsteUttaksdagNesteBarnsSak,\n    minsterettUkerToTette,\n}) => {\n    const familiehendelsesdatoDate = ISOStringToDate(familiehendelsesdato)!;\n    const intl = useIntl();\n    const [perioderErGyldige, setPerioderErGyldige] = useState<PeriodeValidState[]>([]);\n    const [slettUttaksplanModalOpen, setSlettUttaksplanModalOpen] = useState(false);\n    const [resetUttaksplanModalOpen, setResetUttaksplanModalOpen] = useState(false);\n    const harAktivitetskravIPeriodeUtenUttak = getHarAktivitetskravIPeriodeUtenUttak({\n        erDeltUttak,\n        morHarRett,\n        søkerErAleneOmOmsorg: erAleneOmOmsorg,\n    });\n    const uttaksplanUtenAnnenPartsSamtidigUttak = uttaksplan.filter(\n        (p) => !(isAnnenPartInfoPeriode(p) && !p.visPeriodeIPlan)\n    );\n    const bareFarHarRett = !morHarRett;\n    const annenForelderHarRettINorge =\n        isAnnenForelderOppgitt(annenForelder) && annenForelder.harRettPåForeldrepengerINorge!;\n    const toTetteReglerGjelder = getToTetteReglerGjelder(familiehendelsesdatoDate, familiehendelsesdatoNesteSak);\n\n    const builder = Uttaksplanbuilder(\n        uttaksplanUtenAnnenPartsSamtidigUttak,\n        familiehendelsesdatoDate,\n        harAktivitetskravIPeriodeUtenUttak,\n        situasjon === 'adopsjon',\n        bareFarHarRett,\n        erFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak,\n        opprinneligPlan\n    );\n\n    const handleDeletePeriode = (periodeId: string) => {\n        const slettetPeriode = uttaksplan.find((p) => p.id === periodeId)!;\n        const result = builder.slettPeriode(slettetPeriode);\n\n        handleOnPlanChange(result);\n    };\n\n    const handleUpdatePeriode = (oppdatertPeriode: Periode, familiehendelsesdato: Date) => {\n        let resultat: Periode[] = [];\n        if (\n            farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato(\n                oppdatertPeriode,\n                familiehendelsesdato,\n                morHarRett,\n                termindato\n            )\n        ) {\n            const perioder = splittUttaksperiodePåFamiliehendelsesdato(\n                oppdatertPeriode as Uttaksperiode,\n                familiehendelsesdato\n            );\n\n            resultat = builder.oppdaterPerioder(perioder);\n\n            handleOnPlanChange(resultat);\n        } else if (\n            førsteUttaksdagNesteBarnsSak !== undefined &&\n            tidperiodeOverlapperDato(oppdatertPeriode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n        ) {\n            const perioder = splittPeriodePåDato(oppdatertPeriode, førsteUttaksdagNesteBarnsSak);\n            resultat = builder.oppdaterPerioder(perioder);\n            handleOnPlanChange(resultat);\n        } else {\n            const result = builder.oppdaterPeriode(oppdatertPeriode);\n\n            handleOnPlanChange(result);\n        }\n    };\n\n    const handleAddPeriode = (nyPeriode: Periode, familiehendelsesdato: Date) => {\n        let resultat: Periode[] = [];\n        if (\n            farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato(\n                nyPeriode,\n                familiehendelsesdato,\n                morHarRett,\n                termindato\n            )\n        ) {\n            const perioder = splittUttaksperiodePåFamiliehendelsesdato(\n                nyPeriode as Uttaksperiode,\n                familiehendelsesdato\n            );\n\n            resultat = builder.leggTilPerioder(perioder);\n\n            handleOnPlanChange(resultat);\n        } else if (\n            førsteUttaksdagNesteBarnsSak !== undefined &&\n            tidperiodeOverlapperDato(nyPeriode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n        ) {\n            const perioder = splittPeriodePåDato(nyPeriode, førsteUttaksdagNesteBarnsSak);\n            resultat = builder.leggTilPerioder(perioder);\n            handleOnPlanChange(resultat);\n        } else {\n            resultat = builder.leggTilPeriode(nyPeriode);\n            handleOnPlanChange(resultat);\n        }\n    };\n\n    const vedleggForSenEndring = []!; //TODO: handleBegrunnelseVedleggChange\n\n    const årsakTilSenEndring = getSeneEndringerSomKreverBegrunnelse(perioderSomSkalSendesInn);\n\n    const handleBegrunnelseTekstChange = (begrunnelse: string) => {\n        handleBegrunnelseChange(årsakTilSenEndring, begrunnelse);\n    };\n\n    const uttaksplanValidering = validerUttaksplan({\n        søkersituasjon: søkersituasjon,\n        arbeidsforhold: arbeidsforhold,\n        dekningsgrad: dekningsgrad,\n        erEndringssøknad: erEndringssøknad,\n        antallBarn: antallBarn,\n        annenForelder: annenForelder,\n        navnPåForeldre: navnPåForeldre,\n        søkerErFarEllerMedmor: erFarEllerMedmor,\n        søkerErAleneOmOmsorg: erAleneOmOmsorg,\n        søkerHarMidlertidigOmsorg: harMidlertidigOmsorg,\n        erDeltUttak: erDeltUttak,\n        morErUfør: erMorUfør,\n        morHarRett: morHarRett,\n        erFlerbarnssøknad: erFlerbarnssøknad,\n        familiehendelsesdato: familiehendelsesdatoDate,\n        termindato: termindato,\n        stønadskontoer: stønadskontoer,\n        perioder: uttaksplan,\n        harKomplettUttaksplan,\n        tilleggsopplysninger: tilleggsopplysninger,\n        eksisterendeSak: eksisterendeSak,\n        perioderSomSkalSendesInn: perioderSomSkalSendesInn,\n        barn: barn,\n        familiehendelsesdatoNesteSak,\n        førsteUttaksdagNesteBarnsSak,\n        minsterettUkerToTette,\n    });\n\n    useEffect(() => {\n        if (perioderErGyldige.some((p) => !p.isValid) || uttaksplanValidering.harFeil) {\n            setUttaksplanErGyldig(false);\n        } else {\n            setUttaksplanErGyldig(true);\n        }\n    });\n\n    const handleSlettUttaksplanModalClose = () => {\n        setSlettUttaksplanModalOpen(false);\n    };\n\n    const handleSlettUttaksplanModalBekreft = () => {\n        setSlettUttaksplanModalOpen(false);\n        handleSlettUttaksplan();\n    };\n\n    const handleResetUttaksplanModalClose = () => {\n        setResetUttaksplanModalOpen(false);\n    };\n\n    const handleResetUttaksplanModalBekreft = () => {\n        setResetUttaksplanModalOpen(false);\n        handleResetUttaksplan();\n    };\n\n    const uttaksplanVeilederInfo = getUttaksplanVeilederinfo(uttaksplanValidering.avvik, intl, false);\n    const meldingerPerPeriode = getPeriodelisteMeldinger(uttaksplanVeilederInfo);\n\n    const utsettelserIPlan = uttaksplan.filter((p) => isUtsettelsesperiode(p)) as Utsettelsesperiode[];\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <InfoOmSøknaden\n                    eksisterendeSak={eksisterendeSak}\n                    erIUttaksplanenSteg={true}\n                    tilgjengeligeStønadskontoer={stønadskontoer}\n                    minsterettUkerToTette={minsterettUkerToTette}\n                />\n            </Block>\n            <Block padBottom=\"l\">\n                <Planlegger\n                    uttaksplan={uttaksplan}\n                    familiehendelsesdato={familiehendelsesdatoDate}\n                    handleUpdatePeriode={handleUpdatePeriode}\n                    stønadskontoer={stønadskontoer}\n                    navnPåForeldre={navnPåForeldre}\n                    annenForelder={annenForelder}\n                    arbeidsforhold={arbeidsforhold}\n                    handleDeletePeriode={handleDeletePeriode}\n                    handleAddPeriode={handleAddPeriode}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    erFlerbarnssøknad={erFlerbarnssøknad}\n                    erDeltUttak={erDeltUttak}\n                    erAleneOmOmsorg={erAleneOmOmsorg}\n                    situasjon={situasjon}\n                    meldingerPerPeriode={meldingerPerPeriode}\n                    erMorUfør={erMorUfør}\n                    setPerioderErGyldige={setPerioderErGyldige}\n                    erEndringssøknad={erEndringssøknad}\n                    setSlettUttaksplanModalOpen={setSlettUttaksplanModalOpen}\n                    setResetUttaksplanModalOpen={setResetUttaksplanModalOpen}\n                    termindato={termindato}\n                    barn={barn}\n                    utsettelserIPlan={utsettelserIPlan}\n                    barnFraNesteSak={barnFraNesteSak}\n                    perioderErGyldige={perioderErGyldige}\n                />\n            </Block>\n            {visAutomatiskJusteringForm && (\n                <Block padBottom=\"l\">\n                    <AutomatiskJusteringForm\n                        termindato={termindato!}\n                        perioderMedUttakRundtFødsel={perioderMedUttakRundtFødsel}\n                        antallBarn={barn.antallBarn}\n                        visibility={visibility}\n                    />\n                </Block>\n            )}\n            <Block padBottom=\"xl\">\n                <OversiktKvoter\n                    tilgjengeligeStønadskontoer={stønadskontoer}\n                    uttaksplan={uttaksplan}\n                    erDeltUttak={erDeltUttak}\n                    foreldreparSituasjon={foreldreSituasjon}\n                    familiehendelsesdato={familiehendelsesdatoDate}\n                    annenForelderHarRettINorge={annenForelderHarRettINorge}\n                    toTetteReglerGjelder={toTetteReglerGjelder}\n                    intl={intl}\n                />\n            </Block>\n            <Block visible={uttaksplanVeilederInfo.length > 0} padBottom=\"l\">\n                <VeilederInfo\n                    messages={uttaksplanVeilederInfo}\n                    ariaTittel={intlUtils(intl, 'uttaksplan.regelAvvik.ariaTittel')}\n                />\n            </Block>\n            {årsakTilSenEndring && årsakTilSenEndring !== SenEndringÅrsak.Ingen && (\n                <OppgiTilleggsopplysninger\n                    begrunnelse={\n                        tilleggsopplysninger.begrunnelseForSenEndring\n                            ? tilleggsopplysninger.begrunnelseForSenEndring.tekst\n                            : ''\n                    }\n                    vedlegg={vedleggForSenEndring}\n                    onBegrunnelseTekstChange={handleBegrunnelseTekstChange}\n                    //onVedleggChange={handleBegrunnelseVedleggChange}\n                />\n            )}\n            <SlettUttaksplanModal\n                isOpen={slettUttaksplanModalOpen}\n                erEndringssøknad={erEndringssøknad}\n                onClose={handleSlettUttaksplanModalClose}\n                handleSlettUttaksplanModalBekreft={handleSlettUttaksplanModalBekreft}\n            />\n            <ResetUttaksplanModal\n                isOpen={resetUttaksplanModalOpen}\n                onClose={handleResetUttaksplanModalClose}\n                handleResetUttaksplanModalBekreft={handleResetUttaksplanModalBekreft}\n            />\n        </>\n    );\n};\n\nexport default Uttaksplan;\n","import { useState, useEffect } from 'react';\n\nconst useDebounce = (value: any, delay: number) => {\n    const [debouncedValue, setDebouncedValue] = useState(value);\n\n    useEffect(() => {\n        const handler = setTimeout(() => {\n            setDebouncedValue(value);\n        }, delay);\n\n        return () => {\n            clearTimeout(handler);\n        };\n    }, [value, delay]);\n\n    return debouncedValue;\n};\n\nexport default useDebounce;\n","import { bemUtils, Block, intlUtils } from '@navikt/fp-common';\nimport SøknadRoutes from 'app/routes/routes';\nimport { Dispatch, FunctionComponent, SetStateAction } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useNavigate } from 'react-router-dom';\nimport { BodyShort, Button, Heading, Modal } from '@navikt/ds-react';\n\nimport './vilDuGåTilbakeModal.less';\n\ninterface Props {\n    isOpen: boolean;\n    setIsOpen: Dispatch<SetStateAction<boolean>>;\n}\n\nconst VilDuGåTilbakeModal: FunctionComponent<Props> = ({ isOpen, setIsOpen }) => {\n    const intl = useIntl();\n    const bem = bemUtils('vilDuGåTilbakeModal');\n    const navigate = useNavigate();\n\n    return (\n        <Modal\n            className={bem.block}\n            aria-label={'Vil du gå tilbake'}\n            closeButton={false}\n            open={isOpen}\n            onClose={() => setIsOpen(false)}\n        >\n            <Block padBottom=\"l\">\n                <Heading size=\"small\" as=\"h1\">\n                    {intlUtils(intl, 'uttaksplan.vilDuGåTilbakeModal.tittel')}\n                </Heading>\n            </Block>\n            <Block padBottom=\"l\">\n                <BodyShort>{intlUtils(intl, 'uttaksplan.vilDuGåTilbakeModal.intro')}</BodyShort>\n            </Block>\n            <Block padBottom=\"l\">\n                <BodyShort>{intlUtils(intl, 'uttaksplan.vilDuGåTilbakeModal.spørsmål')}</BodyShort>\n            </Block>\n            <div className={bem.element('knapperad')}>\n                <Button\n                    onClick={() => {\n                        setIsOpen(false);\n                        navigate(SøknadRoutes.UTTAKSPLAN_INFO);\n                    }}\n                >\n                    <FormattedMessage id=\"uttaksplan.vilDuGåTilbakeModal.okLabel\" />\n                </Button>\n                <Button variant=\"secondary\" onClick={() => setIsOpen(false)}>\n                    <FormattedMessage id=\"uttaksplan.vilDuGåTilbakeModal.avbrytLabel\" />\n                </Button>\n            </div>\n        </Modal>\n    );\n};\n\nexport default VilDuGåTilbakeModal;\n","import Barn, { BarnType, isUfødtBarn } from 'app/context/types/Barn';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { Forelder } from 'app/types/Forelder';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\nimport dayjs from 'dayjs';\nimport { isUttaksperiode, Periode } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\n\nexport const getKanPeriodenRundtFødselJusteres = (\n    periodeRundtFødsel: Periode,\n    termindato: Date | undefined\n): boolean => {\n    return (\n        termindato !== undefined &&\n        isUttaksperiode(periodeRundtFødsel) &&\n        dayjs(periodeRundtFødsel.tidsperiode.fom).isSame(Uttaksdagen(termindato).denneEllerNeste(), 'day') &&\n        periodeRundtFødsel.forelder === Forelder.farMedmor &&\n        periodeRundtFødsel.konto === StønadskontoType.Fedrekvote &&\n        periodeRundtFødsel.ønskerSamtidigUttak === true &&\n        periodeRundtFødsel.ønskerFlerbarnsdager !== true\n    );\n};\n\nexport const getKanJustereAutomatiskVedFødsel = (\n    perioderMedUttakRundtFødsel: Periode[],\n    termindato: Date | undefined,\n    erFarEllerMedmor: boolean,\n    barn: Barn\n): boolean => {\n    return (\n        barn.type === BarnType.UFØDT &&\n        erFarEllerMedmor &&\n        perioderMedUttakRundtFødsel.length === 1 &&\n        getKanPeriodenRundtFødselJusteres(perioderMedUttakRundtFødsel[0], termindato)\n    );\n};\n\nexport const getVisAutomatiskJusteringForm = (\n    erFarEllerMedmor: boolean,\n    familiehendelsesdato: Date,\n    situasjon: Situasjon,\n    perioderMedUttakRundtFødsel: Periode[],\n    barn: Barn,\n    termindato: Date | undefined,\n    bareFarHarRett: boolean\n): boolean => {\n    return (\n        erFarEllerMedmor &&\n        andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n        situasjon === 'fødsel' &&\n        perioderMedUttakRundtFødsel.length !== 0 &&\n        isUfødtBarn(barn) &&\n        termindato !== undefined &&\n        !bareFarHarRett\n    );\n};\n","import { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport { getKanPeriodenRundtFødselJusteres } from 'uttaksplan/components/automatisk-justering-form/automatiskJusteringUtils';\nimport { Periode } from 'uttaksplan/types/Periode';\nimport { UttaksplanFormData, UttaksplanFormField } from './UttaksplanFormConfig';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\n\nexport interface UttaksplanQuestionPayload extends UttaksplanFormData {\n    termindato: Date | undefined;\n    perioderMedUttakRundtFødsel: Periode[];\n}\nconst includeAutomatiskJusteringSpørsmål = (\n    perioderMedUttakRundtFødsel: Periode[],\n    termindato: Date | undefined\n): boolean => {\n    if (perioderMedUttakRundtFødsel.length !== 1 || termindato === undefined) {\n        return false;\n    }\n\n    return getKanPeriodenRundtFødselJusteres(perioderMedUttakRundtFødsel[0], termindato);\n};\n\nconst UttaksplanFormConfig: QuestionConfig<UttaksplanQuestionPayload, UttaksplanFormField> = {\n    [UttaksplanFormField.ønskerAutomatiskJustering]: {\n        isIncluded: ({ perioderMedUttakRundtFødsel, termindato }) =>\n            includeAutomatiskJusteringSpørsmål(perioderMedUttakRundtFødsel, termindato),\n        isAnswered: ({ ønskerAutomatiskJustering }) => ønskerAutomatiskJustering !== YesOrNo.UNANSWERED,\n    },\n};\n\nconst uttaksplanQuestionsConfig = Questions<UttaksplanQuestionPayload, UttaksplanFormField>(UttaksplanFormConfig);\n\nexport default uttaksplanQuestionsConfig;\n","import { Block, intlUtils, Step, StepButtonWrapper } from '@navikt/fp-common';\nimport SøknadRoutes from 'app/routes/routes';\nimport useOnValidSubmit from 'app/utils/hooks/useOnValidSubmit';\nimport useAvbrytSøknad from 'app/utils/hooks/useAvbrytSøknad';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport stepConfig, { getPreviousStepHref } from '../stepsConfig';\nimport Uttaksplan from 'uttaksplan/Uttaksplan';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport {\n    getFarMedmorErAleneOmOmsorg,\n    getKjønnFromFnr,\n    getMorErAleneOmOmsorg,\n    getMorHarRettPåForeldrepengerINorgeEllerEØS,\n    getNavnPåForeldre,\n} from 'app/utils/personUtils';\nimport { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport isFarEllerMedmor from 'app/utils/isFarEllerMedmor';\nimport { getForeldreparSituasjon } from 'app/utils/foreldreparSituasjonUtils';\nimport { Forelder } from 'app/types/Forelder';\nimport { isUttakAnnenPart, isUttakAvForeldrepengerFørFødsel, isUttaksperiode, Periode } from 'uttaksplan/types/Periode';\nimport { getFamiliehendelsedato, getTermindato } from 'app/utils/barnUtils';\nimport actionCreator from 'app/context/action/actionCreator';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport Api from 'app/api/api';\nimport { Dekningsgrad } from 'app/types/Dekningsgrad';\nimport getStønadskontoParams, {\n    getAntallBarnSomSkalBrukesFraSaksgrunnlagBeggeParter,\n    getTermindatoSomSkalBrukesFraSaksgrunnlagBeggeParter,\n} from 'app/api/getStønadskontoParams';\nimport { getValgtStønadskontoFor80Og100Prosent } from 'app/utils/stønadskontoUtils';\nimport { getErMorUfør } from 'app/utils/annenForelderUtils';\nimport useDebounce from 'app/utils/hooks/useDebounce';\nimport { getPerioderSomSkalSendesInn, storeAppState } from 'app/utils/submitUtils';\nimport { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport { SenEndringÅrsak } from 'uttaksplan/types/SenEndringÅrsak';\nimport useFortsettSøknadSenere from 'app/utils/hooks/useFortsettSøknadSenere';\nimport { getEndringstidspunkt, getMorsSisteDag, ISOStringToDate } from 'app/utils/dateUtils';\nimport { cleanupInvisibleCharsFromTilleggsopplysninger } from 'app/utils/tilleggsopplysningerUtils';\nimport VilDuGåTilbakeModal from './components/vil-du-gå-tilbake-modal/VilDuGåTilbakeModal';\nimport { getAktiveArbeidsforhold } from 'app/utils/arbeidsforholdUtils';\nimport { UttaksplanFormComponents } from 'app/steps/uttaksplan/UttaksplanFormConfig';\n\nimport { getPerioderMedUttakRundtFødsel } from 'app/utils/wlbUtils';\nimport uttaksplanQuestionsConfig, { UttaksplanQuestionPayload } from './uttaksplanQuestionConfig';\nimport { getUttaksplanFormInitialValues } from './UttaksplanFormUtils';\n\nimport {\n    getVisAutomatiskJusteringForm,\n    getKanJustereAutomatiskVedFødsel,\n} from 'uttaksplan/components/automatisk-justering-form/automatiskJusteringUtils';\nimport { FormikValues } from 'formik';\nimport {\n    getStartdatoFørstePeriodeAnnenPart,\n    mapAnnenPartsEksisterendeSakFromDTO,\n} from 'app/utils/eksisterendeSakUtils';\nimport { getHarAktivitetskravIPeriodeUtenUttak } from 'app/utils/uttaksplan/uttaksplanUtils';\nimport { RequestStatus } from 'app/types/RequestState';\nimport { Periodene } from '../uttaksplan-info/utils/Periodene';\nimport { finnOgSettInnHull, settInnAnnenPartsUttak } from 'uttaksplan/builder/uttaksplanbuilderUtils';\nimport { isUfødtBarn } from 'app/context/types/Barn';\nimport dayjs from 'dayjs';\nimport { getAntallUkerMinsterett } from '../uttaksplan-info/utils/stønadskontoer';\nimport { sendErrorMessageToSentry } from 'app/api/apiUtils';\nimport useSaveLoadedRoute from 'app/utils/hooks/useSaveLoadedRoute';\nimport { Alert, Button, Loader } from '@navikt/ds-react';\nimport { dateToISOString } from '@navikt/sif-common-formik-ds/lib';\nimport { Link } from 'react-router-dom';\n\nconst UttaksplanStep = () => {\n    const intl = useIntl();\n    const søkerinfo = useSøkerinfo();\n    const søknad = useSøknad();\n    const [gåTilbakeIsOpen, setGåTilbakeIsOpen] = useState(false);\n    const [uttaksplanErGyldig, setUttaksplanErGyldig] = useState(true);\n    const [submitIsClicked, setSubmitIsClicked] = useState(false);\n    const { dispatch, state } = useForeldrepengesøknadContext();\n    const [endringstidspunkt, setEndringstidspunkt] = useState(state.endringstidspunkt);\n    const [perioderSomSkalSendesInn, setPerioderSomSkalSendesInn] = useState(state.perioderSomSkalSendesInn);\n    const nextRoute = søknad.erEndringssøknad ? SøknadRoutes.OPPSUMMERING : SøknadRoutes.UTENLANDSOPPHOLD;\n    const { uttaksplanInfo, eksisterendeSak, harUttaksplanBlittSlettet, annenPartsUttakErLagtTilIPlan } = state;\n    const { person, arbeidsforhold } = søkerinfo;\n    const { annenForelder, søker, barn, søkersituasjon, dekningsgrad, erEndringssøknad, tilleggsopplysninger } = søknad;\n    const { erAleneOmOmsorg } = søker;\n    const { situasjon } = søkersituasjon;\n    const { rolle } = søkersituasjon;\n    const { barnFraNesteSak } = state;\n    const debouncedState = useDebounce(state, 3000);\n    const annenForelderKjønn = getKjønnFromFnr(annenForelder);\n    const erDeltUttak = isAnnenForelderOppgitt(annenForelder)\n        ? !!annenForelder.harRettPåForeldrepengerINorge || !!annenForelder.harRettPåForeldrepengerIEØS\n        : false;\n    const erFarEllerMedmor = isFarEllerMedmor(søknad.søkersituasjon.rolle);\n    const morErAleneOmOmsorg = getMorErAleneOmOmsorg(!erFarEllerMedmor, erAleneOmOmsorg, annenForelder);\n    const farMedmorErAleneOmOmsorg = getFarMedmorErAleneOmOmsorg(erFarEllerMedmor, erAleneOmOmsorg, annenForelder);\n    const søkerErAleneOmOmsorg = morErAleneOmOmsorg || farMedmorErAleneOmOmsorg;\n    const forelderVedAleneomsorg = erDeltUttak ? undefined : erFarEllerMedmor ? Forelder.farMedmor : Forelder.mor;\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const familiehendelsesdatoDate = ISOStringToDate(familiehendelsesdato);\n    const erMorUfør = getErMorUfør(annenForelder, erFarEllerMedmor);\n    const navnPåForeldre = getNavnPåForeldre(person, annenForelder, erFarEllerMedmor, intl);\n    const antallBarn = barn.antallBarn;\n    const erFlerbarnssøknad = antallBarn > 1;\n    const morHarRett = getMorHarRettPåForeldrepengerINorgeEllerEØS(rolle, erFarEllerMedmor, annenForelder);\n    const opprinneligPlan = eksisterendeSak?.uttaksplan;\n    const harKomplettUttaksplan = eksisterendeSak ? eksisterendeSak.uttaksplan !== undefined : false;\n    const harMidlertidigOmsorg = false; //TODO søkerHarMidlertidigOmsorg\n    const morsSisteDag = getMorsSisteDag(uttaksplanInfo);\n    const termindato = getTermindato(barn);\n    const annenForelderFnr =\n        isAnnenForelderOppgitt(annenForelder) && !!annenForelder.utenlandskFnr === false\n            ? annenForelder.fnr\n            : undefined;\n    const erAdopsjon = situasjon === 'adopsjon';\n    const annenForelderFnrNesteSak = barnFraNesteSak !== undefined ? barnFraNesteSak.annenForelderFnr : undefined;\n    const førsteBarnFraNesteSakFnr =\n        barnFraNesteSak !== undefined && barnFraNesteSak.fnr !== undefined && barnFraNesteSak.fnr.length > 0\n            ? barnFraNesteSak.fnr[0]\n            : undefined;\n    const familieHendelseDatoNesteSak =\n        barnFraNesteSak !== undefined ? barnFraNesteSak.familiehendelsesdato : undefined;\n    const førsteUttaksdagNesteBarnsSak =\n        barnFraNesteSak !== undefined ? barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n\n    const bareFarMedmorHarRett = !getMorHarRettPåForeldrepengerINorgeEllerEØS(\n        søkersituasjon.rolle,\n        erFarEllerMedmor,\n        annenForelder\n    );\n\n    const barnFnr = !isUfødtBarn(barn) && barn.fnr !== undefined && barn.fnr.length > 0 ? barn.fnr[0] : undefined;\n    const eksisterendeSakAnnenPartRequestIsSuspended =\n        !søkerErAleneOmOmsorg &&\n        annenForelderFnr !== undefined &&\n        annenForelderFnr !== '' &&\n        (barnFnr !== undefined || familiehendelsesdato !== undefined)\n            ? false\n            : true;\n\n    useSaveLoadedRoute(SøknadRoutes.UTTAKSPLAN);\n\n    const { eksisterendeSakAnnenPartData, eksisterendeSakAnnenPartError, eksisterendeSakAnnenPartRequestStatus } =\n        Api.useGetAnnenPartsVedtak(\n            annenForelderFnr,\n            barnFnr,\n            familiehendelsesdato,\n            eksisterendeSakAnnenPartRequestIsSuspended\n        );\n\n    const eksisterendeVedtakAnnenPart = useMemo(\n        () =>\n            mapAnnenPartsEksisterendeSakFromDTO(\n                eksisterendeSakAnnenPartData,\n                barn,\n                erFarEllerMedmor,\n                familiehendelsesdato,\n                førsteUttaksdagNesteBarnsSak\n            ),\n        [eksisterendeSakAnnenPartData, barn, erFarEllerMedmor, familiehendelsesdato, førsteUttaksdagNesteBarnsSak]\n    );\n\n    const saksgrunnlagsTermindato = getTermindatoSomSkalBrukesFraSaksgrunnlagBeggeParter(\n        eksisterendeSak?.grunnlag.termindato,\n        eksisterendeVedtakAnnenPart?.grunnlag.termindato\n    );\n    const saksgrunnlagsAntallBarn = getAntallBarnSomSkalBrukesFraSaksgrunnlagBeggeParter(\n        erFarEllerMedmor,\n        barn.antallBarn,\n        eksisterendeVedtakAnnenPart?.grunnlag.antallBarn\n    );\n    useEffect(() => {\n        if (erFarEllerMedmor && søknad.barn.antallBarn !== saksgrunnlagsAntallBarn) {\n            const søknadMedOppdatertAntallBarn = {\n                ...søknad,\n                barn: { ...søknad.barn, antallBarn: saksgrunnlagsAntallBarn },\n            };\n            dispatch(actionCreator.setSøknad(søknadMedOppdatertAntallBarn));\n        }\n    }, [erFarEllerMedmor, saksgrunnlagsAntallBarn, dispatch, søknad]);\n\n    const nesteBarnsSakAnnenPartRequestIsSuspended =\n        annenForelderFnrNesteSak !== undefined &&\n        annenForelderFnrNesteSak !== '' &&\n        (førsteBarnFraNesteSakFnr !== undefined || familieHendelseDatoNesteSak !== undefined) &&\n        (eksisterendeSakAnnenPartRequestIsSuspended || eksisterendeSakAnnenPartRequestStatus === RequestStatus.FINISHED)\n            ? false\n            : true;\n\n    const {\n        eksisterendeSakAnnenPartData: nesteSakAnnenPartData,\n        eksisterendeSakAnnenPartError: nesteSakAnnenPartError,\n        eksisterendeSakAnnenPartRequestStatus: nesteSakAnnenPartRequestStatus,\n    } = Api.useGetAnnenPartsVedtak(\n        annenForelderFnrNesteSak,\n        førsteBarnFraNesteSakFnr,\n        dateToISOString(familieHendelseDatoNesteSak),\n        nesteBarnsSakAnnenPartRequestIsSuspended\n    );\n\n    const førsteUttaksdagAnnenPart = getStartdatoFørstePeriodeAnnenPart(nesteSakAnnenPartData);\n\n    useEffect(() => {\n        if (\n            førsteUttaksdagAnnenPart !== undefined &&\n            state.barnFraNesteSak !== undefined &&\n            (dayjs(førsteUttaksdagAnnenPart).isBefore(state.barnFraNesteSak.startdatoFørsteStønadsperiode, 'd') ||\n                state.barnFraNesteSak.startdatoFørsteStønadsperiode === undefined)\n        ) {\n            const oppdatertBarnNesteSak = {\n                ...state.barnFraNesteSak,\n                startdatoFørsteStønadsperiode: førsteUttaksdagAnnenPart,\n            };\n            dispatch(actionCreator.setBarnFraNesteSak(oppdatertBarnNesteSak));\n        }\n    }, [førsteUttaksdagNesteBarnsSak, førsteUttaksdagAnnenPart, barnFraNesteSak, dispatch, state.barnFraNesteSak]);\n\n    const harAktivitetskravIPeriodeUtenUttak = getHarAktivitetskravIPeriodeUtenUttak({\n        erDeltUttak,\n        morHarRett,\n        søkerErAleneOmOmsorg,\n    });\n\n    //Legg til annen parts perioder i planen til bruker\n    useEffect(() => {\n        if (\n            eksisterendeSak !== undefined &&\n            opprinneligPlan !== undefined &&\n            eksisterendeVedtakAnnenPart !== undefined &&\n            !annenPartsUttakErLagtTilIPlan\n        ) {\n            //Sett samtidigUttak på søkerens perioder hvis de overlapper med annen parts samtidig uttak:\n            opprinneligPlan.forEach((p) => {\n                if (isUttaksperiode(p)) {\n                    const overlappendePerioderAnnenPart = Periodene(\n                        eksisterendeVedtakAnnenPart.uttaksplan\n                    ).finnOverlappendePerioder(p);\n\n                    if (\n                        overlappendePerioderAnnenPart.length !== 0 &&\n                        overlappendePerioderAnnenPart.find(\n                            (periode) => isUttakAnnenPart(periode) && periode.ønskerSamtidigUttak === true\n                        )\n                    ) {\n                        if (!p.ønskerSamtidigUttak) {\n                            p.ønskerSamtidigUttak = true;\n                            p.samtidigUttakProsent = '100';\n                        }\n                    }\n                }\n            });\n\n            const uttaksplanMedAnnenPart = finnOgSettInnHull(\n                settInnAnnenPartsUttak(\n                    opprinneligPlan,\n                    eksisterendeVedtakAnnenPart.uttaksplan,\n                    familiehendelsesdatoDate!,\n                    førsteUttaksdagNesteBarnsSak,\n                    true\n                ),\n                harAktivitetskravIPeriodeUtenUttak,\n                familiehendelsesdatoDate!,\n                erAdopsjon,\n                bareFarMedmorHarRett,\n                erFarEllerMedmor,\n                førsteUttaksdagNesteBarnsSak\n            );\n            const eksisterendeSakMedAnnenPartsPlan = {\n                ...eksisterendeSak,\n                uttaksplan: uttaksplanMedAnnenPart,\n            };\n            dispatch(actionCreator.setUttaksplan(uttaksplanMedAnnenPart));\n            dispatch(actionCreator.setEksisterendeSak(eksisterendeSakMedAnnenPartsPlan));\n            dispatch(actionCreator.setAnnenPartsUttakErLagtTilIPlan(true));\n        }\n    }, [\n        eksisterendeVedtakAnnenPart,\n        opprinneligPlan,\n        familiehendelsesdatoDate,\n        harAktivitetskravIPeriodeUtenUttak,\n        erAdopsjon,\n        bareFarMedmorHarRett,\n        erFarEllerMedmor,\n        dispatch,\n        førsteUttaksdagNesteBarnsSak,\n        eksisterendeSak,\n        annenPartsUttakErLagtTilIPlan,\n    ]);\n\n    const onValidSubmitHandler = () => {\n        setSubmitIsClicked(true);\n        const cleanedTilleggsopplysninger = cleanupInvisibleCharsFromTilleggsopplysninger(tilleggsopplysninger);\n        return [\n            actionCreator.setTilleggsopplysninger(cleanedTilleggsopplysninger),\n            actionCreator.setEndringstidspunkt(endringstidspunkt),\n            actionCreator.setPerioderSomSkalSendesInn(perioderSomSkalSendesInn),\n        ];\n    };\n\n    const handleBegrunnelseChange = (årsak: SenEndringÅrsak, begrunnelse: string) => {\n        const ekstraInformasjon = årsak !== SenEndringÅrsak.Ingen ? årsak : undefined;\n        const opplysninger = {\n            ...tilleggsopplysninger,\n            begrunnelseForSenEndring: {\n                ...tilleggsopplysninger.begrunnelseForSenEndring,\n                tekst: begrunnelse,\n                ekstraInformasjon: ekstraInformasjon,\n            },\n        };\n        dispatch(actionCreator.setTilleggsopplysninger(opplysninger));\n    };\n    useEffect(() => {\n        const periodeAngittAvAnnenPart = opprinneligPlan?.find((p) => isUttaksperiode(p) && p.angittAvAnnenPart);\n\n        if (periodeAngittAvAnnenPart && endringstidspunkt === undefined) {\n            const tidspunktForEndring = periodeAngittAvAnnenPart.tidsperiode.fom;\n            dispatch(actionCreator.setEndringstidspunkt(tidspunktForEndring));\n\n            const perioderForÅSendeInn = getPerioderSomSkalSendesInn(\n                søknad.uttaksplan,\n                erEndringssøknad,\n                erFarEllerMedmor,\n                opprinneligPlan,\n                tidspunktForEndring\n            );\n            setPerioderSomSkalSendesInn(perioderForÅSendeInn);\n            dispatch(actionCreator.setPerioderSomSkalSendesInn(perioderForÅSendeInn));\n        }\n    }, [opprinneligPlan, dispatch, endringstidspunkt, erFarEllerMedmor, søknad.uttaksplan, erEndringssøknad]);\n\n    const { handleSubmit, isSubmitting } = useOnValidSubmit(\n        onValidSubmitHandler,\n        nextRoute,\n        (state: ForeldrepengesøknadContextState) => storeAppState(state)\n    );\n\n    const perioderMedUttakRundtFødsel = getPerioderMedUttakRundtFødsel(\n        søknad.uttaksplan,\n        familiehendelsesdatoDate!,\n        termindato\n    );\n\n    const visAutomatiskJusteringForm = getVisAutomatiskJusteringForm(\n        erFarEllerMedmor,\n        familiehendelsesdatoDate!,\n        situasjon,\n        perioderMedUttakRundtFødsel,\n        barn,\n        termindato,\n        bareFarMedmorHarRett\n    );\n\n    const kanJustereAutomatiskVedFødsel = getKanJustereAutomatiskVedFødsel(\n        perioderMedUttakRundtFødsel,\n        termindato,\n        erFarEllerMedmor,\n        barn\n    );\n\n    const setØnskerJustertUttakVedFødselTilUndefinedHvisUgyldig = () => {\n        if ((visAutomatiskJusteringForm || erEndringssøknad) && !kanJustereAutomatiskVedFødsel) {\n            dispatch(actionCreator.setØnskerJustertUttakVedFødsel(undefined));\n        }\n    };\n\n    const ønskerJustertUttakVedFødselErBesvart = (ønskerAutomatiskJusteringSvar: boolean | undefined) => {\n        return (\n            visAutomatiskJusteringForm && kanJustereAutomatiskVedFødsel && ønskerAutomatiskJusteringSvar !== undefined\n        );\n    };\n\n    const ref = useRef<FormikValues>(null);\n    const clickHandler = (values: any) => {\n        setSubmitIsClicked(true);\n        if (uttaksplanErGyldig && !erTomEndringssøknad) {\n            if (ref.current) {\n                ref.current.handleSubmit();\n            }\n\n            setØnskerJustertUttakVedFødselTilUndefinedHvisUgyldig();\n\n            if (ønskerJustertUttakVedFødselErBesvart(values.ønskerAutomatiskJustering)) {\n                handleSubmit(values);\n            }\n        }\n    };\n\n    const onAvbrytSøknad = useAvbrytSøknad();\n    const onFortsettSøknadSenere = useFortsettSøknadSenere();\n\n    useEffect(() => {\n        Api.storeAppState(debouncedState, person.fnr);\n    }, [person.fnr, debouncedState]);\n\n    const foreldreSituasjon = getForeldreparSituasjon(\n        person.kjønn,\n        annenForelderKjønn,\n        erDeltUttak,\n        morErAleneOmOmsorg,\n        farMedmorErAleneOmOmsorg,\n        rolle\n    );\n    const kontoRequestIsSuspended =\n        (eksisterendeSakAnnenPartRequestIsSuspended\n            ? false\n            : eksisterendeSakAnnenPartRequestStatus !== RequestStatus.FINISHED) ||\n        (nesteBarnsSakAnnenPartRequestIsSuspended ? false : nesteSakAnnenPartRequestStatus !== RequestStatus.FINISHED);\n\n    const { tilgjengeligeStønadskontoerData: stønadskontoer100, tilgjengeligeStønadskontoerError } =\n        Api.useGetUttakskontoer(\n            getStønadskontoParams(\n                Dekningsgrad.HUNDRE_PROSENT,\n                barn,\n                annenForelder,\n                søkersituasjon,\n                farMedmorErAleneOmOmsorg,\n                morErAleneOmOmsorg,\n                dateToISOString(familieHendelseDatoNesteSak),\n                saksgrunnlagsAntallBarn,\n                saksgrunnlagsTermindato\n            ),\n            kontoRequestIsSuspended\n        );\n    const { tilgjengeligeStønadskontoerData: stønadskontoer80 } = Api.useGetUttakskontoer(\n        getStønadskontoParams(\n            Dekningsgrad.ÅTTI_PROSENT,\n            barn,\n            annenForelder,\n            søkersituasjon,\n            farMedmorErAleneOmOmsorg,\n            morErAleneOmOmsorg,\n            dateToISOString(familieHendelseDatoNesteSak),\n            saksgrunnlagsAntallBarn,\n            saksgrunnlagsTermindato\n        ),\n        kontoRequestIsSuspended\n    );\n\n    const handleOnPlanChange = (nyPlan: Periode[]) => {\n        setSubmitIsClicked(false);\n        dispatch(actionCreator.setUttaksplan(nyPlan));\n        const tidspunktForEndring = getEndringstidspunkt(opprinneligPlan, nyPlan, erEndringssøknad);\n        setEndringstidspunkt(tidspunktForEndring);\n\n        const perioderForÅSendeInn = getPerioderSomSkalSendesInn(\n            nyPlan,\n            erEndringssøknad,\n            erFarEllerMedmor,\n            opprinneligPlan,\n            tidspunktForEndring\n        );\n        setPerioderSomSkalSendesInn(perioderForÅSendeInn);\n        dispatch(actionCreator.setPerioderSomSkalSendesInn(perioderForÅSendeInn));\n    };\n\n    useEffect(() => {\n        if (tilgjengeligeStønadskontoerError) {\n            sendErrorMessageToSentry(tilgjengeligeStønadskontoerError);\n            throw new Error(\n                `Vi klarte ikke å hente opp stønadskontoer. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`\n            );\n        }\n        if (eksisterendeSakAnnenPartError) {\n            sendErrorMessageToSentry(eksisterendeSakAnnenPartError);\n            throw new Error(\n                `Vi klarte ikke å hente informasjon om saken til annen forelder. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`\n            );\n        }\n\n        if (nesteSakAnnenPartError) {\n            sendErrorMessageToSentry(nesteSakAnnenPartError);\n            throw new Error(\n                `Vi klarte ikke å hente informasjon om saken til annen forelder for neste barn. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`\n            );\n        }\n    }, [tilgjengeligeStønadskontoerError, eksisterendeSakAnnenPartError, nesteSakAnnenPartError]);\n\n    if (\n        !stønadskontoer100 ||\n        !stønadskontoer80 ||\n        (eksisterendeSakAnnenPartRequestStatus !== RequestStatus.FINISHED &&\n            !eksisterendeSakAnnenPartRequestIsSuspended) ||\n        (nesteSakAnnenPartRequestStatus !== RequestStatus.FINISHED && !nesteBarnsSakAnnenPartRequestIsSuspended)\n    ) {\n        return (\n            <div style={{ textAlign: 'center', padding: '12rem 0' }}>\n                <Loader size=\"2xlarge\" />\n            </div>\n        );\n    }\n\n    const stønadskontoer = getValgtStønadskontoFor80Og100Prosent(stønadskontoer80, stønadskontoer100);\n    const minsterettUkerToTette = getAntallUkerMinsterett(stønadskontoer100.minsteretter.toTette);\n\n    const valgteStønadskontoer =\n        dekningsgrad === Dekningsgrad.HUNDRE_PROSENT ? stønadskontoer[100] : stønadskontoer[80];\n\n    const erTomEndringssøknad =\n        erEndringssøknad && (perioderSomSkalSendesInn === undefined || perioderSomSkalSendesInn.length === 0);\n\n    const handleSlettUttaksplan = () => {\n        const slettetPlanUtenomFpFørFødsel = søknad.uttaksplan.filter((periode) =>\n            isUttakAvForeldrepengerFørFødsel(periode)\n        );\n        dispatch(actionCreator.slettUttaksplan(slettetPlanUtenomFpFørFødsel));\n        dispatch(actionCreator.setUttaksplanSlettet(true));\n    };\n\n    const handleResetUttaksplan = () => {\n        if (state.eksisterendeSak) {\n            dispatch(actionCreator.setUttaksplan(state.eksisterendeSak.uttaksplan));\n            dispatch(actionCreator.setPerioderSomSkalSendesInn([]));\n            setPerioderSomSkalSendesInn([]);\n        }\n    };\n\n    return (\n        <UttaksplanFormComponents.FormikWrapper\n            initialValues={getUttaksplanFormInitialValues(state.søknad.ønskerJustertUttakVedFødsel)}\n            onSubmit={handleSubmit}\n            innerRef={ref}\n            renderForm={({ values: formValues }) => {\n                const visibility = uttaksplanQuestionsConfig.getVisbility({\n                    ...formValues,\n                    termindato,\n                    perioderMedUttakRundtFødsel,\n                } as UttaksplanQuestionPayload);\n\n                return (\n                    <Step\n                        bannerTitle={intlUtils(intl, 'søknad.pageheading')}\n                        activeStepId=\"uttaksplan\"\n                        pageTitle={intlUtils(intl, 'søknad.uttaksplan')}\n                        onCancel={onAvbrytSøknad}\n                        onContinueLater={onFortsettSøknadSenere}\n                        steps={stepConfig(intl, erEndringssøknad)}\n                    >\n                        <Uttaksplan\n                            foreldreSituasjon={foreldreSituasjon}\n                            forelderVedAleneomsorg={forelderVedAleneomsorg}\n                            erDeltUttak={erDeltUttak}\n                            uttaksplan={søknad.uttaksplan}\n                            familiehendelsesdato={familiehendelsesdato}\n                            handleOnPlanChange={handleOnPlanChange}\n                            stønadskontoer={valgteStønadskontoer}\n                            navnPåForeldre={navnPåForeldre}\n                            annenForelder={annenForelder}\n                            arbeidsforhold={getAktiveArbeidsforhold(\n                                arbeidsforhold,\n                                erAdopsjon,\n                                erFarEllerMedmor,\n                                ISOStringToDate(familiehendelsesdato)\n                            )}\n                            erEndringssøknad={erEndringssøknad}\n                            erFarEllerMedmor={erFarEllerMedmor}\n                            erFlerbarnssøknad={erFlerbarnssøknad}\n                            erAleneOmOmsorg={søkerErAleneOmOmsorg}\n                            harMidlertidigOmsorg={harMidlertidigOmsorg}\n                            situasjon={situasjon}\n                            erMorUfør={erMorUfør}\n                            morHarRett={morHarRett}\n                            søkersituasjon={søkersituasjon}\n                            dekningsgrad={dekningsgrad}\n                            antallBarn={antallBarn}\n                            tilleggsopplysninger={tilleggsopplysninger}\n                            setUttaksplanErGyldig={setUttaksplanErGyldig}\n                            handleBegrunnelseChange={handleBegrunnelseChange}\n                            eksisterendeSak={eksisterendeSak}\n                            perioderSomSkalSendesInn={perioderSomSkalSendesInn}\n                            morsSisteDag={morsSisteDag}\n                            harKomplettUttaksplan={harKomplettUttaksplan}\n                            opprinneligPlan={harUttaksplanBlittSlettet ? undefined : opprinneligPlan}\n                            handleSlettUttaksplan={handleSlettUttaksplan}\n                            handleResetUttaksplan={handleResetUttaksplan}\n                            termindato={termindato}\n                            barn={barn}\n                            visibility={visibility}\n                            visAutomatiskJusteringForm={visAutomatiskJusteringForm}\n                            perioderMedUttakRundtFødsel={perioderMedUttakRundtFødsel}\n                            barnFraNesteSak={barnFraNesteSak}\n                            familiehendelsesdatoNesteSak={familieHendelseDatoNesteSak}\n                            førsteUttaksdagNesteBarnsSak={førsteUttaksdagNesteBarnsSak}\n                            minsterettUkerToTette={minsterettUkerToTette}\n                        />\n                        <VilDuGåTilbakeModal isOpen={gåTilbakeIsOpen} setIsOpen={setGåTilbakeIsOpen} />\n                        {!uttaksplanErGyldig && submitIsClicked && (\n                            <Block textAlignCenter={true} padBottom=\"l\">\n                                <Alert variant=\"error\">\n                                    <FormattedMessage id=\"uttaksplan.validering.kanIkkeGåVidere\" />\n                                </Alert>\n                            </Block>\n                        )}\n                        {erTomEndringssøknad && submitIsClicked && (\n                            <Block textAlignCenter={true} padBottom=\"l\">\n                                <Alert variant=\"error\">\n                                    <FormattedMessage id=\"uttaksplan.validering.kanIkkeGåVidereEndringssøknad\" />\n                                </Alert>\n                            </Block>\n                        )}\n                        <Block textAlignCenter={true} padBottom=\"l\">\n                            <StepButtonWrapper>\n                                {!erEndringssøknad && (\n                                    <Button\n                                        variant=\"secondary\"\n                                        as={Link}\n                                        onClick={(event) => {\n                                            event.preventDefault();\n                                            setGåTilbakeIsOpen(true);\n                                        }}\n                                        to={getPreviousStepHref('uttaksplan')}\n                                    >\n                                        <FormattedMessage id=\"backlink.label\" />\n                                    </Button>\n                                )}\n                                <Button\n                                    type=\"submit\"\n                                    onClick={clickHandler}\n                                    disabled={isSubmitting}\n                                    loading={isSubmitting}\n                                >\n                                    {intlUtils(intl, 'søknad.gåVidere')}\n                                </Button>\n                            </StepButtonWrapper>\n                        </Block>\n                    </Step>\n                );\n            }}\n        />\n    );\n};\nexport default UttaksplanStep;\n","import { Søknad } from 'app/context/types/Søknad';\nimport { uttaksplanInneholderPerioderUtenKonto } from 'app/utils/uttaksplan/uttaksplanUtils';\nimport SøknadRoutes from './routes';\n\nconst isAvailable = (route: SøknadRoutes, søknad: Søknad): boolean => {\n    switch (route) {\n        case SøknadRoutes.SØKERSITUASJON:\n            return søknad.harGodkjentVilkår === true;\n        case SøknadRoutes.OPPSUMMERING:\n            return uttaksplanInneholderPerioderUtenKonto(søknad.uttaksplan) === false && søknad.uttaksplan.length > 0;\n        default:\n            return true;\n    }\n};\n\nexport default isAvailable;\n","import { Locale } from '@navikt/fp-common';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport IkkeMyndig from 'app/pages/ikkeMyndig/IkkeMyndig';\nimport Velkommen from 'app/pages/velkommen/Velkommen';\nimport AnnenForelder from 'app/steps/annen-forelder/AnnenForelder';\nimport Inntektsinformasjon from 'app/steps/inntektsinformasjon/Inntektsinformasjon';\nimport OmBarnet from 'app/steps/om-barnet/OmBarnet';\nimport Oppsummering from 'app/steps/oppsummering/Oppsummering';\nimport Søkersituasjon from 'app/steps/søkersituasjon/Søkersituasjon';\nimport Utenlandsopphold from 'app/steps/utenlandsopphold/Utenlandsopphold';\nimport UttaksplanInfo from 'app/steps/uttaksplan-info/UttaksplanInfo';\nimport UttaksplanStep from 'app/steps/uttaksplan/UttaksplanStep';\nimport { FunctionComponent, useEffect, useState } from 'react';\nimport { Route, useNavigate, Navigate, Routes, useLocation } from 'react-router-dom';\nimport SøknadSendt from '../pages/søknadSendt/SøknadSendt';\nimport isAvailable from './isAvailable';\nimport SøknadRoutes from './routes';\n\ninterface Props {\n    fornavn: string;\n    locale: Locale;\n    onChangeLocale: (locale: Locale) => void;\n    currentRoute: SøknadRoutes;\n}\n\nconst renderSøknadRoutes = (harGodkjentVilkår: boolean, erEndringssøknad: boolean, søkerErMyndig: boolean) => {\n    if (!harGodkjentVilkår) {\n        return <Route path=\"*\" element={<Navigate to={SøknadRoutes.VELKOMMEN} />} />;\n    }\n\n    if (!søkerErMyndig) {\n        return <Route path=\"*\" element={<Navigate to={SøknadRoutes.IKKE_MYNDIG} />} />;\n    }\n\n    if (erEndringssøknad) {\n        return (\n            <>\n                <Route path={SøknadRoutes.UTTAKSPLAN} element={<UttaksplanStep />} />\n                <Route path={SøknadRoutes.OPPSUMMERING} element={<Oppsummering />} />\n                <Route path={SøknadRoutes.SØKNAD_SENDT} element={<SøknadSendt />} />\n            </>\n        );\n    }\n\n    return (\n        <>\n            <Route path={SøknadRoutes.SØKERSITUASJON} element={<Søkersituasjon />} />\n            <Route path={SøknadRoutes.OM_BARNET} element={<OmBarnet />} />\n            <Route path={SøknadRoutes.ANNEN_FORELDER} element={<AnnenForelder />} />\n            <Route path={SøknadRoutes.UTTAKSPLAN_INFO} element={<UttaksplanInfo />} />\n            <Route path={SøknadRoutes.UTTAKSPLAN} element={<UttaksplanStep />} />\n            <Route path={SøknadRoutes.UTENLANDSOPPHOLD} element={<Utenlandsopphold />} />\n            <Route path={SøknadRoutes.INNTEKTSINFORMASJON} element={<Inntektsinformasjon />} />\n            <Route path={SøknadRoutes.OPPSUMMERING} element={<Oppsummering />} />\n            <Route path={SøknadRoutes.SØKNAD_SENDT} element={<SøknadSendt />} />\n        </>\n    );\n};\n\nconst ForeldrepengesøknadRoutes: FunctionComponent<Props> = ({ fornavn, locale, onChangeLocale, currentRoute }) => {\n    const { state } = useForeldrepengesøknadContext();\n    const navigate = useNavigate();\n    const location = useLocation();\n    const harGodkjentVilkår = state.søknad.harGodkjentVilkår;\n    const erMyndig = state.søkerinfo.person.erMyndig;\n    const [isFirstTimeLoadingApp, setIsFirstTimeLoadingApp] = useState(true);\n\n    useEffect(() => {\n        if (currentRoute && erMyndig && harGodkjentVilkår && isFirstTimeLoadingApp) {\n            setIsFirstTimeLoadingApp(false);\n            if (isAvailable(currentRoute, state.søknad)) {\n                navigate(currentRoute);\n            } else {\n                if (location.pathname === SøknadRoutes.OPPSUMMERING) {\n                    navigate(SøknadRoutes.UTTAKSPLAN);\n                }\n            }\n        }\n    }, [currentRoute, erMyndig, harGodkjentVilkår, navigate, isFirstTimeLoadingApp, state.søknad, location.pathname]);\n\n    return (\n        <Routes>\n            <Route\n                path={SøknadRoutes.VELKOMMEN}\n                element={\n                    <Velkommen\n                        fornavn={fornavn}\n                        locale={locale}\n                        saker={state.saker}\n                        onChangeLocale={onChangeLocale}\n                        fnr={state.søkerinfo.person.fnr}\n                    />\n                }\n            />\n            <Route path={SøknadRoutes.IKKE_MYNDIG} element={<IkkeMyndig fornavn={state.søkerinfo.person.fornavn} />} />\n\n            {renderSøknadRoutes(harGodkjentVilkår, state.søknad.erEndringssøknad, erMyndig)}\n        </Routes>\n    );\n};\n\nexport default ForeldrepengesøknadRoutes;\n","import { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport SøknadRoutes from 'app/routes/routes';\n\nconst isEndringssøknadRoute = (route: SøknadRoutes): boolean => {\n    switch (route) {\n        case SøknadRoutes.UTTAKSPLAN:\n        case SøknadRoutes.OPPSUMMERING:\n        case SøknadRoutes.SØKNAD_SENDT:\n            return true;\n        default:\n            return false;\n    }\n};\n\nexport const shouldApplyStorage = (storedState: ForeldrepengesøknadContextState): boolean => {\n    if (storedState.søknad && storedState.søknad.erEndringssøknad) {\n        if (!isEndringssøknadRoute(storedState.currentRoute)) {\n            return false;\n        }\n    }\n\n    return storedState.version === 5;\n};\n","import { Locale } from '@navikt/fp-common';\nimport { useEffect } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport Api from './api/api';\nimport { sendErrorMessageToSentry } from './api/apiUtils';\nimport actionCreator from './context/action/actionCreator';\nimport { useForeldrepengesøknadContext } from './context/hooks/useForeldrepengesøknadContext';\nimport ForeldrepengesøknadRoutes from './routes/ForeldrepengesøknadRoutes';\nimport SøknadRoutes from './routes/routes';\nimport mapSøkerinfoDTOToSøkerinfo from './utils/mapSøkerinfoDTO';\nimport { shouldApplyStorage } from './utils/mellomlagringUtils';\nimport { Loader } from '@navikt/ds-react';\n\ninterface Props {\n    locale: Locale;\n    onChangeLocale: any;\n}\n\nconst renderSpinner = () => (\n    <div style={{ textAlign: 'center', padding: '12rem 0' }}>\n        <Loader size=\"2xlarge\" />\n    </div>\n);\n\nconst Foreldrepengesøknad: React.FunctionComponent<Props> = ({ locale, onChangeLocale }) => {\n    const { søkerinfoData, søkerinfoError } = Api.useSøkerinfo();\n    const { sakerData, sakerError } = Api.useGetSaker();\n    const { storageData } = Api.useStoredAppState();\n    const { dispatch, state } = useForeldrepengesøknadContext();\n\n    useEffect(() => {\n        if (storageData) {\n            if (shouldApplyStorage(storageData)) {\n                dispatch(actionCreator.applyStoredState(storageData));\n            }\n        }\n        if (søkerinfoData) {\n            dispatch(actionCreator.setSøkerinfo(mapSøkerinfoDTOToSøkerinfo(søkerinfoData)));\n        }\n\n        if (sakerData) {\n            dispatch(actionCreator.setSaker(sakerData.foreldrepenger));\n        }\n    }, [dispatch, storageData, søkerinfoData, sakerData]);\n\n    useEffect(() => {\n        if (søkerinfoError) {\n            sendErrorMessageToSentry(søkerinfoError);\n            throw new Error(\n                `Vi klarte ikke å hente informasjon om deg. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`,\n            );\n        }\n        if (sakerError) {\n            sendErrorMessageToSentry(sakerError);\n            throw new Error(\n                `Vi klarte ikke å hente informasjon om sakene dine. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`,\n            );\n        }\n    }, [søkerinfoError, sakerError]);\n\n    if (!state.søkerinfo || !sakerData) {\n        return renderSpinner();\n    }\n\n    return (\n        <BrowserRouter>\n            <ForeldrepengesøknadRoutes\n                fornavn={state.søkerinfo.person.fornavn}\n                locale={locale}\n                onChangeLocale={onChangeLocale}\n                currentRoute={storageData ? storageData.currentRoute : SøknadRoutes.VELKOMMEN}\n            />\n        </BrowserRouter>\n    );\n};\n\nexport default Foreldrepengesøknad;\n","import * as Sentry from '@sentry/browser';\nimport Feilside from 'app/pages/feilside/Feilside';\nimport links from 'app/links/links';\nimport { FOR_MANGE_VEDLEGG_ERROR } from 'app/api/apiUtils';\nimport { Component } from 'react';\n\ninterface State {\n    hasError: boolean;\n    error: Error | null;\n}\n\nclass ErrorBoundary extends Component<any, State> {\n    constructor(props: unknown) {\n        super(props);\n        this.state = { hasError: false, error: null };\n    }\n\n    componentDidCatch(error: Error | null, errorInfo: any): void {\n        if (error && error.message !== 'window.hasFocus is not a function') {\n            this.setState({ ...this.state, hasError: true, error });\n\n            Sentry.withScope((scope) => {\n                scope.setExtras(errorInfo);\n                Sentry.captureException(error);\n            });\n        }\n    }\n\n    render() {\n        if (this.state.hasError) {\n            const feilPgaForMangeVedlegg =\n                !!this.state.error &&\n                !!this.state.error.message &&\n                this.state.error.message === FOR_MANGE_VEDLEGG_ERROR;\n            const feilsideTittel = feilPgaForMangeVedlegg ? 'Feil: for mange vedlegg' : 'Informasjon om feilen';\n            return (\n                <Feilside\n                    dokumenttittel=\"NAV Foreldrepengesøknad\"\n                    ingress={`${this.state.error?.message}`}\n                    tittel={feilsideTittel}\n                    illustrasjon={{\n                        tittel: 'Hei!',\n                        tekst: 'Noe har gått galt med søknaden.',\n                        lenke: { tekst: 'Her finner du en lenke til brukerstøtte', url: links.brukerstøtte },\n                    }}\n                    skalKunneGåTilbakeTilSøknad={feilPgaForMangeVedlegg}\n                />\n            );\n        }\n\n        return this.props.children;\n    }\n}\nexport default ErrorBoundary;\n","import { detect } from 'detect-browser';\n\nexport const shouldChangeBrowser = () => {\n    const browserInfo = detect();\n    return browserInfo ? browserInfo.name === 'ie' : false;\n};\n","import { useEffect, useState } from 'react';\nimport dayjs from 'dayjs';\nimport { getLocaleFromSessionStorage, Locale, setLocaleInSessionStorage } from '@navikt/fp-common';\nimport IntlProvider from './intl/IntlProvider';\nimport ForeldrepengesøknadContextProvider from './context/ForeldrepengesøknadContext';\nimport Foreldrepengesøknad from './Foreldrepengesøknad';\nimport ByttBrowserModal from 'app/pages/byttBrowserModal/ByttBrowserModal';\nimport ErrorBoundary from './errorBoundary/ErrorBoundary';\nimport { Modal } from '@navikt/ds-react';\nimport { shouldChangeBrowser } from './utils/browserUtils';\n\nconst localeFromSessionStorage = getLocaleFromSessionStorage();\n\ndayjs.locale(localeFromSessionStorage);\n\nconst AppContainer = () => {\n    const [locale, setLocale] = useState<Locale>(localeFromSessionStorage);\n\n    useEffect(() => {\n        if (Modal.setAppElement) {\n            Modal.setAppElement('#app');\n        }\n    });\n\n    return (\n        <ForeldrepengesøknadContextProvider>\n            <ErrorBoundary>\n                <IntlProvider locale={locale}>\n                    <ByttBrowserModal skalEndreNettleser={shouldChangeBrowser()} />\n                    <Foreldrepengesøknad\n                        locale={locale}\n                        onChangeLocale={(activeLocale: Locale) => {\n                            setLocaleInSessionStorage(activeLocale);\n                            setLocale(activeLocale);\n                        }}\n                    />\n                </IntlProvider>\n            </ErrorBoundary>\n        </ForeldrepengesøknadContextProvider>\n    );\n};\n\nexport default AppContainer;\n"],"names":["LocaleSessionKey","getLocaleFromSessionStorage","setLocaleInSessionStorage","locale","IkkeMyndig","fornavn","intl","useIntl","jsx","Feilside","intlUtils","links","UtsettelseEndreTidsperiodeSpørsmål","onBekreft","onAvbryt","changeTidsperiode","visible","periode","tidsperiode","familiehendelsesdato","ugyldigeTidsperioder","utsettelserIPlan","erFarEllerMedmor","morHarRett","situasjon","erFarMedmorOgHarAleneomsorg","initialMonth","isForeldrepengerFørFødselUttaksperiode","varighetIDager","dayjs","Tidsperioden","uker","dager","getUkerOgDagerFromDager","handleOnSubmit","values","getDagValue","uker2","dager2","jsxs","Fragment","Modal","TidsperiodeForm","UkerDagerTeller","nyUker","date","getTidsperiode","nyDager","PeriodeUtsettelseFormField","PeriodeUtsettelseFormComponents","getTypedFormComponents","initialValues","getFormStateFraVedlegg","vedlegg","gjelderMorsAktivitet","v","AttachmentType","getPeriodeUtsettelseFormInitialValues","isUtsettelsesperiode","isUtsettelsePgaArbeid","getVedleggFraFormState","morsAktivitetIPeriodenDokumentasjon","mapPeriodeUtsettelseFormToPeriode","id","Periodetype","Forelder","cleanupPeriodeUtsettelseFormData","UtsettelseÅrsakType","PeriodeUtsettelseFormConfig","hasValue","isValidTidsperiode","søkerErFarEllerMedmorOgKunDeHarRett","periodeUtsettelseFormQuestionsConfig","Questions","getUtsettelseÅrsakOptions","periodenErKunHelligdager","skalViseGamleUtsettelseÅrsaker","tidsperiodenErInnenforFørsteSeksUker","erMorUfør","option","getUtsettelseårsakSkjemanummer","årsak","Skjemanummer","showAttachmentUploader","getAttachmentUploaderLabel","getAttachmentUploaderType","getVeilederTekst","FormattedMessage","UtsettelseÅrsakSpørsmål","utsettelseårsak","isOpen","årsakOptions","GuidePanel","Block","BodyShort","value","FormikFileUploader","PeriodeUtsettelseForm","handleUpdatePeriode","erAleneOmOmsorg","handleAddPeriode","handleDeletePeriode","toggleIsOpen","isNyPeriode","setNyPeriodeFormIsVisible","navnPåForeldre","setPerioderErGyldige","periodeIsValid","setPeriodeIsValid","useState","tidsperiodeIsOpen","setTidsperiodeIsOpen","bem","bemUtils","førsteOktober2021ReglerGjelder","toggleVisTidsperiode","useEffect","previousState","getIsValidStateForPerioder","guid","setFieldValue","isValid","visibility","antallHelligdager","antallUttaksdager","values2","ISOStringToDate","SubmitListener","TidsperiodeDisplay","AktivitetskravSpørsmål","Button","ActionLink","getSlettPeriodeTekst","NyPeriode","isUtsettelse","annenForelder","arbeidsforhold","stønadskontoer","erFlerbarnssøknad","erDeltUttak","nesteLedigeUttaksdato","erEndringssøknad","termindato","antallBarn","setPeriode","Heading","PeriodeUttakForm","ArbeidIkon","props","title","rest","FerieIkon","SykdomIkon","TerminIkon","UttakIkon","UttaksplanIkonKeys","UttaksplanIkonKeys2","UttaksplanIkon","ikon","InformationSquareIcon","ExclamationmarkTriangleFillIcon","XMarkOctagonFillIcon","getAlertStripeTypeFromMessageType","message","getIkonForVeilederMelding","melding","renderAlert","skjulMeldingIkon","stil","content","Label","Alert","VeilederMelding","VeilederMeldinger","meldinger","UttaksplanColor","getForelderFarge","forelder","getStønadskontoFarge","konto","forIkon","harMidlertidigOmsorg","StønadskontoType","getUtsettelseFarge","IconBox","children","color","stripes","classnames","StønadskontoIkon","gradert","getStønadskontoNavn","getIkonForKonto","UtsettelseIkon","UttaksplanAdvarselIkon","farge","getPeriodeIkon","isUtsettelseAnnenPart","getVarighetString","antallDager","format","dagerStr","ukerStr","renderDagMnd","dato","visÅr","d","måned3bokstaver","måned","år","PeriodelisteItemHeader","annenForelderSamtidigUttakPeriode","varighetString","erFpFørTerminUtenUttak","annenForelderIsMor","annenForelderNavn","beskrivelseSamtidigUttak","isUttakAnnenPart","getForelderNavn","getValidTidsperiode","getPeriodeTittel","classNames","PeriodeHull","navnAnnenForelder","kunHelligdager","kunUttaksdager","onLeggInnNyPeriode","leggInnNyUtsettelse","nyeRegler","getUtsettelseTekst","foreldernavn","erMor","PeriodeInfo","formaterDatoKompakt","getOppholdskontoNavn","PeriodeUtenUttak","onLeggTilNyPeriode","PeriodeFørFødselFormField","PeriodeFørFødselFormComponents","PeriodeFørFødselFormConfig","fom","skalIkkeHaUttakFørTermin","tom","periodeFørFødselFormQuestionsConfig","getPeriodeFørFødselFormInitialValues","sisteUttaksagFørFødsel","Uttaksdagen","førsteUttaksdag3UkerFørFødsel","uttaksConstants","mapPeriodeFørFødselFormToPeriode","PeriodeFørFødselForm","handleCleanup","_visibility","UttakEndreTidsperiodeSpørsmål","SlettbarAvslåttPeriode","onSlettPeriode","renderPeriodeListeInnhold","isAvslåttPeriode","isSlettbarAvslåttPeriode","PeriodelisteItem","egenPeriode","periodeErGyldig","isInfoPeriode","toggleFocusAndOpen","headerButton","Accordion","m","HjerteIkon","fylt","getTekst","barn","familiehendelsedato","isAdoptertBarn","formaterDatoUtenDag","isFødtBarn","FamiliehendelsedatoDisplay","getIndexOfFørstePeriodeEtterFødsel","uttaksplan","p","getIndexOfSistePeriodeFørDato","Periodeliste","meldingerPerPeriode","barnFraNesteSak","perioderErGyldige","openPeriodeId","setOpenPeriodeId","indexOfFørstePeriodeEtterFødsel","erAllePerioderIPlanenFørFødsel","indexOfSistePeriodeFørNyStøndasperiodeNyttBarn","index","periodeMedValidState","periodeMedState","formatDate","getAnnenForelderSamtidigUttakPeriode","Planlegger","setSlettUttaksplanModalOpen","setResetUttaksplanModalOpen","nyPeriodeFormIsVisible","setIsUtsettelse","Periodene","annenForelderErOppgitMenHarIkkeRett","isAnnenForelderOppgitt","InfoBlock","ForelderIkon","width","scale","scaledWidth","scaledHeight","getForeldreparIkon","finnAntallDagerÅTrekke","Perioden","isUttaksperiode","periodeErGradert","periodeErSamtidigUttak","graderingsProsent","getFloatFromString","getAllePerioderMedUttaksinfoFraUttaksplan","perioder","getUttakFraOppholdsperioder","isOppholdsperiode","getUttakFraOverføringsperioder","isOverføringsperiode","getUttakFraInfoperioder","getUttakFraAvslåttePerioder","beregnGjenståendeUttaksdager","tilgjengeligeStønadskontoer","beregnDagerBrukt","alleUttakIUttaksplan","uttaksplanPerioder","beregnBrukteUttaksdager","oppholdsperioder","opphold","getStønadskontoFromOppholdsårsak","overføringer","overføring","oppholdAnnenPart","PeriodeInfoType","type","isMorsPeriode","isFarsPeriode","isFellesperiodeKvote","uttak","isMorsKvote","isFarMedmorsKvote","summerBrukteUttaksdager","u","getBrukteDagerForForelder","perioderFørTermin","perioderEtterTermin","førTermin","etterTermin","alle","dagerTotalt","isMor","dagerEgneKvoter","dagerOverført","dagerFellesperiode","getBrukteDager","perioderMedUttak","getUttaksstatus","harKomplettUttaksplan","gjelderDagerBrukt","kontouttak","Kontostatus","kontoErOvertrukket","Kontostatus$1","injectIntl","TilesList","columns","React.Children","child","filtrerBortAnnenPartsKonto","uttakskontoer","OversiktPerForelder","brukteDagerPerForelder","erDeltUttakINorge","foreldreparSituasjon","søkerErFarEllerMedmor","søkerErMor","svgInfo","getSituasjonForelderSvg","Personkort","capitalizeFirstLetter","OversiktPerKvote","uttaksstatus","uttakÅVise","OversiktKvoter","annenForelderHarRettINorge","søker","useSøkerinfo","søknad","useSøknad","isFarEllerMedmor","getNavnPåForeldre","inneholderUttaksplanPerioderTest","grunnlag","isPeriodeUtenUttak","isHull","ANTALL_UTTAKSDAGER_SEKS_UKER","getInformasjonOmTaptUttakVedUttakEtterSeksUkerFarMedmor","bareFarMedmorHarRett","morErUfør","søkerErFarEllerMedmorOgAnnenForelderKanIkkeOppgis","søkerErFarEllerMedmorOgErAleneOmOmsorgen","førstePeriode","førsteUttaksdag","førsteRegistrerteUttaksdag","sisteUttaksdagInnenforSeksUker","getUgyldigUttakMor","flerbarnsFødsel","uttaksdatoer","førsteUttaksdagEtterSeksUker","førsteUttaksdagEtterÅtteUker","ugyldigUttakRegelFørsteDato","ugyldigUttakRegelSisteDato","ugyldigPeriode","erPeriodeFørDato","ugyldigeUtsettelser","gradertePerioder","flernbarnsPerioder","fellesPerioder","samtidigUttaksperioder","andreAugust2022ReglerGjelder","unntakFarFørsteSeksUker","MorsAktivitet","erFarsUttakFørsteSeksUkerGyldig","unntak","getUgyldigUttakFørsteSeksUkerForFarMedmor","farsPerioderInnenforSeksFørsteUker","ugyldigeUttak","ugyldigeOverføringer","OverføringÅrsakType","utsettelse","harMorSøktUgyldigUttakFørsteSeksUkerTest","ugyldigePerioder","stønadskontoInneholderForMyeUttakKunSøkerTest","søkerErAleneOmOmsorg","stønadskontoerMedForMyeUttak","harFarMedmorSøktUgyldigUttakEllerUtsettelseFørsteSeksUkerTest","wlbReglerGjelder","erPeriodeInnvilget","erUttaksplanBareOppholdTest","uttaksplanErBareOpphold","slutterUttaksplanMedOppholdTest","uttaksplanSlutterMedOpphold","starterUttaksplanMedOppholdTest","uttaksplanStarterMedOpphold","uttaksplanGraderingStørreEnnSamtidigUttak","erUttaksplanGraderingStørreEnnSamtidigUttakTest","tilleggsopplysningerMaxLength","maxLengthIsGreaterThanOrEqualToStringLength","maxLength","tilleggsopplysningerErGyldig","begrunnelse","erTilleggsopplysningerGyldigTest","begrunnelseForSenEndring","begrunnelseTekst","harTilleggsopplysningerGyldigeCharsTest","tekst","validateTextHasLegalChars","getIllegalChars","harUttaksplanForMangeFlerbarnsdagerTest","dekningsgrad","uttaksplanHarForMangeFlerbarnsdager","inneholderUttaksplanDatoSomIkkeErUttaksdag","erUttaksdag","harPerioderManglendeVedleggTest","manglendeVedlegg","findMissingAttachmentsForPerioder","førsteUttaksEllerUttsettelsesPeriode","sorterPerioder","regelTekst","passerer","inneholderSenUtsettelsePgaFerieTest","seneUtsettelsePgaFerie","erSenUtsettelsePgaFerieEllerArbeid","inneholderTapteDagerTest","infoOmTaptUttakVedUttakEtterSeksUkerFarMedmor","planInneholderTapteDager","planInneholderAnnetEnnAktivitetsfriKvote","inneholderBareUtsettelserTest","isOverskrivbarPeriode","intlKey","formaterDato","inneholderSenUtsettelsePgaArbeidTest","seneUtsettelserPgaArbeid","overskriverEndringerAnnenPartsPerioder","eksisterendeUttaksplan","fornavnAnnenForelder","perioderSomOverlapper","perioderSomOverlapperUtenSamtidigUttak","getNavnGenitivEierform","_intl","msg","overlapperPeriodeAndrePerioder","perioderUtenUttakAnnenPart","perioderSomHarOverlapp","getPeriodeForelderNavn","RegelAlvorlighet","getRegelIntlKey","regel","intlRegelPrefix","alvorlighetSortOrder","sorterAvvik","a1","a2","ensureRegelAvvikIntlKey","info","overstyresAvFilter","avvik","_idx","alleAvvik","b2","overstyrerAndreFilter","rb","rbo","regelHarAvvik","periodeId","mapInfoToRegelAvvik","regelAvvik","isArray","regelPasserer","getRegelAvvik","resultat","flatten","r","isRegelFeil","hasRegelFeil","a","trimRelaterteRegelAvvik","grupperAvvik","uniqBy","getRegelIntlValues","newValues","key","valueOrFunc","hasValueRule","failText","getStillingsprosentRegler","erSamtidigUttak","stillingsprosent","stillingsprosentIsMoreThan0","samtidigUttakProsentIsMax100","stillingsprosentIsLessThan100","gradertUttaksperiodeErUgyldig","erGyldig","samtidigUttaksperiodeErUgyldig","ønskerSamtidigUttak","samtidigUttakProsent","harUttaksperiodeGyldigGradering","runValidators","validators","inputName","results","validator","valid","tests","allValidatorsPass","erUtfyltTest","erUttaksdagTest","slutterInnenforGyldigPermisjonsperiode","starterInnenforGyldigAntallUkerFørTermin","getUttakTidsperiodeValidatorer","skalIkkeHaUttak","uttakTidsperiodeErGyldig","uttaksperiode","fraDatoErGyldig","tilDatoErGyldig","getUtsettelseTidsperiodeValidatorer","utsettelseTidsperiodeErGyldig","utsettelesperiode","harPeriodeGyldigTidsperiode","perioderMedUgyldigTidsperiode","harUttaksperiodeStønadskonto","uttaksperioderUtenStønadskonto","erSamtidigUttakGyldig","erUtsettelseEtterFamiliehendelsesdato","starterUttaksperiodeRundtFødselEtter2UkerFørFødsel","gjelderWLBReglerFarMedmorRundtFødsel","perioderFarMedmorSomStarterFør2UkerFørFødsel","isUttaksperiodeFarMedmorMedValgForUttakRundtFødsel","starterTidsperiodeEtter2UkerFørFødsel","førsteUttaksdagToUkerFørFødsel","getFørsteUttaksdag2UkerFørFødsel","slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel","perioderFarMedmorSomIkkeSlutterFør6UkerEtterFødsel","isUttaksperiodeFarMedmorPgaFødsel","slutterTidsperiodeInnen6UkerEtterFødsel","sisteUttaksdagSeksUkerEtterFødsel","getSisteUttaksdag6UkerEtterFødsel","periodeDeFørsteSeksUkeneHarUlovligUttakBFHR","perioderDeFørsteSeksUkeneMedUlovligUttakBFHR","starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel","harBekreftet100ProsentArbeidIUtsettelsePgaArbeid","utsettelserPgaArbeidUtenBekreftelse","laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn","førsteUttaksdagForPåfølgendeBarn","forSenUttakVedPåfølgendeBarn","sisteMuligeUttaksdag","skjulIOppsummering","periodevalideringsregler","harSøktOmFerieUtenArbeidsforhold","isUtsettelsePgaFerie","inneholderForMyeFerie","ferieUtsettelser","ferieDager","sumFerieDager","kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme","gjenståendeDager","sistePeriodeErIkkeUtsettelse","resterendeFellesperiode","resterendeMødrekvote","resterendeFedrekvote","resterendeForeldrepenger","erUttaksmengdeForFarMedmorForHøy","farEllerMedmor","erUttaksmengdeForFarMedmorForHøyTest","vekslendeArbeidOgUttakTest","kunSøkersPerioder","firstArbeidsperiodeIndex","antallPerioderEtterFørsteUtsettelseGrunnetArbeid","vekslendePeriodeUtenUttakOgUttakTest","firstPeriodeUtenUttakIndex","antallPerioderEtterFørstePeriodeUtenUttak","burdeKanskjeSøkeGraderingTest","vekslerArbeidOgUttakTest","veklserPerioderUtenUttakOgUttaktest","infoTekstKey","ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindatoTest","isUfødtBarn","inneholderPerioderUtenAktivitetskrav","søkerHarMidlertidigOmsorg","søkersituasjon","perioderUtenAktivitetskrav","farMedmorBrukerForeldrepengerMedAktivitetskravRundtFødselOgMorIkkeErSyk","inneholderUtsettelserUtenÅrsak","utsettelserUtenÅrsak","overskridelseUttakRundtFødselAntallDager","perioderRundtFødsel","sisteUttak6UkerEtterFødsel","perioderAvkortetTilÅSlutte6UkerEtterFødsel","getSumUttaksdagerÅTrekkeIPeriodene","ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL","farMedmorHarSøktUgyldigAntallDagerUttakRundtFødselTest","perioderUttakRundtFødsel","getFarMedmorUttakRundtFødsel","antallDagerForMye","slutterEnAvPeriodeneForSent","fraDato","tilDato","harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUkerTest","sisteUttaksdagEtterSeksUker","farMedMorHarRettPåUttakRundtFødselTest","tattUtForMangeDagerIPlanen","dagerIgjenRundtFødsel","førsteUttaksdag2UkerFørFødsel","antallUttaksdagerRundtFødsel","erMerEnn3månederSidenFamiliehendelse","getBareFarHarRettKontoUtenAktivitetskravUker","bareFarHarRett","morUførUker","flerbarnsukerSomDelAvMinsterett","Dekningsgrad","getBareFarHarRettFlerbarnsdagerUker","flerbarnsUker","getBareFarHarRettAntallUkerPåÅTaUtDagerUtenAktivitetskravFørWLB","antallUkerEtterFødselMor","antallUkerForeldrepengerFar","farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest","kontoUtenAktivitetskravUker","testPasserer","renderAsHtml","link","antallUkerPåÅTaUtDager","inneholderUttaksperioderMedUbesvartGradering","perioderMedUbesvartGradering","graderingSkalBesvares","inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest","uttaksperioder","perioderMedUbesvartSpmOmFlerbarnsdager","ønskerFlerbarnsdagerSkalBesvares","UttakRundtFødselÅrsak","farMedmorHarRettPåFlerbarnsdagerTest","overstigerMinsterettVedToTette","minsterettUkerToTette","perioderEtterFørsteStønadsperiodeNyttBarn","perioderFørFørsteStønadsperiodeNyttBarn","minsterettMaxAntallUker","minsterettMaxAntallDager","brukteDagerPerForelderFørFørsteStønadsdagNyttBarn","uttaksdagerFremTilNyttBarnStønadsdag","dagerIgjenÅBrukePåMinsteretten","brukteDagerPerForelderEtterFørsteStønadsdagNyttBarn","uttaksdagerEtterNyttBarnStønadsdag","dagerIgjenAvMinsterett","harPerioderEtterFørsteStønadsdagNesteBarnDerToTette","tekstKey","uttaksplanValideringRegler","uttaksplanRegler","familiehendelsesDato","REGEL_INTL_PREFIX","sjekkUttaksplanOppMotRegler","valideringsgrunnlag","validerUttaksplan","søknadsinfo","avvikPerPeriode","groupBy","harFeil","VeilederInfo","messages","ariaTittel","AriaText","intlHasKey","mapAvvikTilMessage","tittelIntlKey","harTittel","getUttaksplanVeilederinfo","getPeriodelisteMeldinger","veilederinfo","FUNC_ERROR_TEXT","NAN","symbolTag","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","freeGlobal","global","freeSelf","root","objectProto","objectToString","nativeMax","nativeMin","now","debounce","func","wait","options","lastArgs","lastThis","maxWait","result","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","toNumber","isObject","invokeFunc","time","args","thisArg","leadingEdge","timerExpired","remainingWait","timeSinceLastCall","timeSinceLastInvoke","shouldInvoke","trailingEdge","cancel","flush","debounced","isInvoking","throttle","isObjectLike","isSymbol","other","isBinary","lodash_throttle","getLabel","OppgiTilleggsopplysninger","Component","__publicField","e","Textarea","ReadMore","BodyLong","OppgiTilleggsopplysninger$1","SlettUttaksplanModal","onClose","handleSlettUttaksplanModalBekreft","innhold1Id","innhold2Id","slettPeriode","slettetPeriode","harAktivitetskravIPeriodeUtenUttak","erAdopsjon","førsteUttaksdagNesteBarnsSak","res","getPeriodeHullEllerPeriodeUtenUttak","oppdaterPeriode","endretPeriode","originalPeriode","annenPartsUttak","perioderSlettetEndretPeriode","slåSammenLikePerioder","leggTilPeriode","leggTilPeriodeOgBuild","bevegeligePerioder","fastePerioder","nyPeriode","nyePerioder","fastPeriode","finnOgSettInnHull","settInnAnnenPartsUttak","oppdaterPeriodeOgBuild","oppdatertePerioder","fjernUnødvendigeHull","slettPeriodeOgBuild","getFastePerioder","starterUttaksperiodeFørFødsel","getBevegeligePerioder","isInfoPeriodeAnnenPart","getAnnenPartsUttak","Uttaksplanbuilder","opprinneligPlan","perioderUtenAnnenPart","nyAnnenPartsUttak","nyFastePerioder","nyBevegeligePerioder","UttaksplanFormField","UttaksplanFormComponents","mapUttaksplanFormValueToState","convertYesOrNoOrUndefinedToBoolean","getUttaksplanFormInitialValues","ønskerAutomatiskJustering","convertBooleanOrUndefinedToYesOrNo","YesOrNo","AutomatiskJusteringForm","perioderMedUttakRundtFødsel","uttaksdagPåEllerEtterTermin","dispatch","state","useForeldrepengesøknadContext","svarteJaMenFlerePerioderInnen6Uker","svarteJaMenStarterIkkeLengerPåTermin","svarteJaMenEndretPeriodenPåTermin","svarteJaMenEndretPeriodenTilØnskerFlerbarnsdager","infoTekstId","handleOnChange","ønskerJustertUttakVedFødsel","actionCreator","ResetUttaksplanModal","handleResetUttaksplanModalBekreft","Uttaksplan","foreldreSituasjon","handleOnPlanChange","tilleggsopplysninger","eksisterendeSak","perioderSomSkalSendesInn","setUttaksplanErGyldig","handleBegrunnelseChange","handleSlettUttaksplan","handleResetUttaksplan","visAutomatiskJusteringForm","familiehendelsesdatoNesteSak","familiehendelsesdatoDate","slettUttaksplanModalOpen","resetUttaksplanModalOpen","getHarAktivitetskravIPeriodeUtenUttak","uttaksplanUtenAnnenPartsSamtidigUttak","isAnnenPartInfoPeriode","toTetteReglerGjelder","getToTetteReglerGjelder","builder","oppdatertPeriode","familiehendelsesdato2","farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato","splittUttaksperiodePåFamiliehendelsesdato","tidperiodeOverlapperDato","splittPeriodePåDato","vedleggForSenEndring","årsakTilSenEndring","getSeneEndringerSomKreverBegrunnelse","handleBegrunnelseTekstChange","uttaksplanValidering","handleSlettUttaksplanModalClose","handleResetUttaksplanModalClose","uttaksplanVeilederInfo","InfoOmSøknaden","SenEndringÅrsak","useDebounce","delay","debouncedValue","setDebouncedValue","handler","VilDuGåTilbakeModal","setIsOpen","navigate","useNavigate","SøknadRoutes","getKanPeriodenRundtFødselJusteres","periodeRundtFødsel","getKanJustereAutomatiskVedFødsel","BarnType","getVisAutomatiskJusteringForm","includeAutomatiskJusteringSpørsmål","UttaksplanFormConfig","uttaksplanQuestionsConfig","UttaksplanStep","søkerinfo","gåTilbakeIsOpen","setGåTilbakeIsOpen","uttaksplanErGyldig","submitIsClicked","setSubmitIsClicked","endringstidspunkt","setEndringstidspunkt","setPerioderSomSkalSendesInn","nextRoute","uttaksplanInfo","harUttaksplanBlittSlettet","annenPartsUttakErLagtTilIPlan","person","rolle","debouncedState","annenForelderKjønn","getKjønnFromFnr","morErAleneOmOmsorg","getMorErAleneOmOmsorg","farMedmorErAleneOmOmsorg","getFarMedmorErAleneOmOmsorg","forelderVedAleneomsorg","getFamiliehendelsedato","getErMorUfør","getMorHarRettPåForeldrepengerINorgeEllerEØS","morsSisteDag","getMorsSisteDag","getTermindato","annenForelderFnr","annenForelderFnrNesteSak","førsteBarnFraNesteSakFnr","familieHendelseDatoNesteSak","barnFnr","eksisterendeSakAnnenPartRequestIsSuspended","useSaveLoadedRoute","eksisterendeSakAnnenPartData","eksisterendeSakAnnenPartError","eksisterendeSakAnnenPartRequestStatus","Api","eksisterendeVedtakAnnenPart","useMemo","mapAnnenPartsEksisterendeSakFromDTO","saksgrunnlagsTermindato","getTermindatoSomSkalBrukesFraSaksgrunnlagBeggeParter","saksgrunnlagsAntallBarn","getAntallBarnSomSkalBrukesFraSaksgrunnlagBeggeParter","søknadMedOppdatertAntallBarn","nesteBarnsSakAnnenPartRequestIsSuspended","RequestStatus","nesteSakAnnenPartData","nesteSakAnnenPartError","nesteSakAnnenPartRequestStatus","dateToISOString","førsteUttaksdagAnnenPart","getStartdatoFørstePeriodeAnnenPart","oppdatertBarnNesteSak","overlappendePerioderAnnenPart","uttaksplanMedAnnenPart","eksisterendeSakMedAnnenPartsPlan","onValidSubmitHandler","cleanedTilleggsopplysninger","cleanupInvisibleCharsFromTilleggsopplysninger","ekstraInformasjon","opplysninger","periodeAngittAvAnnenPart","tidspunktForEndring","perioderForÅSendeInn","getPerioderSomSkalSendesInn","handleSubmit","isSubmitting","useOnValidSubmit","storeAppState","getPerioderMedUttakRundtFødsel","kanJustereAutomatiskVedFødsel","setØnskerJustertUttakVedFødselTilUndefinedHvisUgyldig","ønskerJustertUttakVedFødselErBesvart","ønskerAutomatiskJusteringSvar","ref","useRef","clickHandler","erTomEndringssøknad","onAvbrytSøknad","useAvbrytSøknad","onFortsettSøknadSenere","useFortsettSøknadSenere","getForeldreparSituasjon","kontoRequestIsSuspended","stønadskontoer100","tilgjengeligeStønadskontoerError","getStønadskontoParams","stønadskontoer80","nyPlan","getEndringstidspunkt","sendErrorMessageToSentry","Loader","getValgtStønadskontoFor80Og100Prosent","getAntallUkerMinsterett","valgteStønadskontoer","slettetPlanUtenomFpFørFødsel","isUttakAvForeldrepengerFørFødsel","formValues","Step","stepConfig","getAktiveArbeidsforhold","StepButtonWrapper","Link","event","getPreviousStepHref","isAvailable","route","uttaksplanInneholderPerioderUtenKonto","renderSøknadRoutes","harGodkjentVilkår","søkerErMyndig","Route","Oppsummering","SøknadSendt","Søkersituasjon","OmBarnet","AnnenForelder","UttaksplanInfo","Utenlandsopphold","Inntektsinformasjon","Navigate","ForeldrepengesøknadRoutes","onChangeLocale","currentRoute","location","useLocation","erMyndig","isFirstTimeLoadingApp","setIsFirstTimeLoadingApp","Routes","Velkommen","isEndringssøknadRoute","shouldApplyStorage","storedState","renderSpinner","Foreldrepengesøknad","søkerinfoData","søkerinfoError","sakerData","sakerError","storageData","mapSøkerinfoDTOToSøkerinfo","BrowserRouter","ErrorBoundary","error","errorInfo","Sentry.withScope","scope","Sentry.captureException","feilPgaForMangeVedlegg","FOR_MANGE_VEDLEGG_ERROR","feilsideTittel","_a","shouldChangeBrowser","browserInfo","detect","localeFromSessionStorage","AppContainer","setLocale","ForeldrepengesøknadContextProvider","IntlProvider","ByttBrowserModal","activeLocale","AppContainer$1"],"mappings":"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","x_google_ignoreList":[104]}