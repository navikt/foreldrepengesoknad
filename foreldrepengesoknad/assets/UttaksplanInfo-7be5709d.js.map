{"version":3,"file":"UttaksplanInfo-7be5709d.js","sources":["../../../../packages/fp-common/src/common/types/UttaksplanHexColor.ts","../../src/app/steps/uttaksplan-info/components/scenarios/far-medmor-fødsel-begge-har-rett/farMedmorFødselBeggeHarRettFormConfig.ts","../../src/app/steps/uttaksplan-info/components/scenarios/far-medmor-fødsel-begge-har-rett/farMedmorFødselBeggeHarRettUtils.ts","../../src/app/steps/uttaksplan-info/components/tilgjengeligeDagerGraf/multibar/Multibar.tsx","../../src/app/steps/uttaksplan-info/components/tilgjengeligeDagerGraf/TilgjengeligeDagerGraf.tsx","../../src/app/steps/uttaksplan-info/components/tilgjengeligeDagerGraf/tilgjengeligeDagerUtils.ts","../../src/app/utils/stønadskontoUtils.ts","../../src/app/steps/uttaksplan-info/components/scenarios/far-medmor-fødsel-begge-har-rett/farMedmorFødselBeggeHarRettQuestionsConfig.ts","../../src/app/steps/uttaksplan-info/components/scenarios/spørsmål/MorsSisteDagSpørsmål.tsx","../../src/app/steps/uttaksplan-info/components/scenarios/far-medmor-fødsel-og-mor-har-ikke-rett/validation/farMedmorFødselOgMorHarIkkeRettValidering.ts","../../src/app/steps/uttaksplan-info/components/scenarios/spørsmål/FarMedmorsFørsteDag.tsx","../../src/app/steps/uttaksplan-info/components/fordelingFellesperiode/range-input/RangeIcon.tsx","../../src/app/steps/uttaksplan-info/components/fordelingFellesperiode/range-input/preventDoubleTapZoom.ts","../../src/app/steps/uttaksplan-info/components/fordelingFellesperiode/range-input/AriaText.tsx","../../src/app/steps/uttaksplan-info/components/fordelingFellesperiode/range-input/sirkelknapp/Sirkelknapp.tsx","../../src/app/steps/uttaksplan-info/components/scenarios/spørsmål/AntallUkerOgDagerFellesperiodeFarMedmorSpørsmål.tsx","../../src/app/steps/uttaksplan-info/components/scenarios/spørsmål/DekningsgradSpørsmål.tsx","../../src/app/utils/hooks/useUttaksplanInfo.ts","../../src/app/utils/getDekningsgradFromString.ts","../../src/app/utils/uttaksplan/deltUttak.ts","../../src/app/utils/uttaksplan/ikkeDeltUttak.ts","../../src/app/utils/uttaksplan/lagUttaksplan.ts","../../src/app/steps/uttaksplan-info/components/scenarios/far-medmor-fødsel-begge-har-rett/FarMedmorFødselBeggeHarRett.tsx","../../src/app/steps/uttaksplan-info/components/scenarios/mor-fodsel/morFødselFormConfig.ts","../../src/app/steps/uttaksplan-info/components/scenarios/mor-fodsel/morFødselUtils.ts","../../src/app/steps/uttaksplan-info/components/scenarios/mor-fodsel/validation/morFodselValidering.ts","../../src/app/steps/uttaksplan-info/components/scenarios/mor-fodsel/VeilederStartdatoPermisjon.tsx","../../src/app/steps/uttaksplan-info/components/scenarios/mor-fodsel/StartdatoPermisjonMor.tsx","../../src/app/steps/uttaksplan-info/components/fordelingFellesperiode/range-input/RangeStepper.tsx","../../src/app/steps/uttaksplan-info/components/fordelingFellesperiode/range-input/RangeInput.tsx","../../src/app/steps/uttaksplan-info/components/fordelingFellesperiode/FordelingFellesperiodeSpørsmål.tsx","../../src/app/steps/uttaksplan-info/components/scenarios/mor-fodsel/morFødselQuestionsConfig.ts","../../src/app/utils/uttaksplanInfoUtils.ts","../../src/app/steps/uttaksplan-info/utils/leggTilAnnenPartsPerioderISøkerensUttaksplan.ts","../../src/app/steps/uttaksplan-info/components/scenarios/mor-fodsel/MorFødsel.tsx","../../src/app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon/adopsjonStartdatoValg.ts","../../src/app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon/morFarAdopsjonFormConfig.ts","../../src/app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon/morFarAdopsjonUtils.ts","../../src/app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon/morFarAdopsjonQuestionsConfig.ts","../../src/app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon/validation/morFarAdopsjonValidering.ts","../../src/app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon/StartdatoAdopsjon.tsx","../../src/app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon/MorFarAdopsjon.tsx","../../src/app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon-annen-part-har-rett-i-eøs/morFarAdopsjonAnnenForelderHarRettIEØSFormConfig.ts","../../src/app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon-annen-part-har-rett-i-eøs/morFarAdopsjonAnnenForelderHarRettIEØSQuestionsConfig.ts","../../src/app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon-annen-part-har-rett-i-eøs/morFarAdopsjonAnnenForelderHarRettIEØSUtils.ts","../../src/app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon-annen-part-har-rett-i-eøs/MorFarAdopsjonAnnenForelderHarRettIEØS.tsx","../../src/app/steps/uttaksplan-info/components/scenarios/mor-far-fødsel-annen-part-har-rett-i-eøs/morFarFødselAnnenForelderHarRettIEØSFormConfig.ts","../../src/app/steps/uttaksplan-info/components/scenarios/mor-far-fødsel-annen-part-har-rett-i-eøs/morFarFødselAnnenForelderHarRettIEØSQuestionsConfig.ts","../../src/app/steps/uttaksplan-info/components/scenarios/mor-far-fødsel-annen-part-har-rett-i-eøs/morFarFødselAnnenForelderHarRettIEØSUtils.ts","../../src/app/steps/uttaksplan-info/components/scenarios/mor-far-fødsel-annen-part-har-rett-i-eøs/MorFarFødselAnnenForelderHarRettIEØS.tsx","../../src/app/steps/uttaksplan-info/components/scenarios/far-medmor-aleneomsorg-fødsel/farMedmorAleneomsorgFødselFormConfig.ts","../../src/app/steps/uttaksplan-info/components/scenarios/far-medmor-aleneomsorg-fødsel/farMedmorAleneomsorgFødselQuestionsConfig.ts","../../src/app/steps/uttaksplan-info/components/scenarios/far-medmor-aleneomsorg-fødsel/farMedmorAleneomsorgFødselUtils.ts","../../src/app/steps/uttaksplan-info/components/scenarios/far-medmor-aleneomsorg-fødsel/validation/farMedmorAleneomsorgFødselValidation.ts","../../src/app/steps/uttaksplan-info/components/scenarios/far-medmor-aleneomsorg-fødsel/FarMedmorAleneomsorgFødsel.tsx","../../src/app/steps/uttaksplan-info/components/scenarios/far-medmor-fødsel-og-mor-har-ikke-rett/farMedmorFødselOgMorHarIkkeRettFormConfig.ts","../../src/app/steps/uttaksplan-info/components/scenarios/far-medmor-fødsel-og-mor-har-ikke-rett/farMedmorFødselOgMorHarIkkeRettUtils.ts","../../src/app/steps/uttaksplan-info/components/scenarios/far-medmor-fødsel-og-mor-har-ikke-rett/farMedmorFødselOgMorHarIkkeRettQuestionsConfig.ts","../../src/app/steps/uttaksplan-info/components/scenarios/far-medmor-fødsel-og-mor-har-ikke-rett/FarMedmorFødselOgMorHarIkkeRett.tsx","../../src/app/steps/uttaksplan-info/components/scenarios/farMedmor-førstegangssøknad-med-annen-part/farMedmorFørstegangssøknadMedAnnenPartFormConfig.ts","../../src/app/steps/uttaksplan-info/components/scenarios/farMedmor-førstegangssøknad-med-annen-part/farMedmorFørstegangssøknadMedAnnenPartQuestionsConfig.ts","../../src/app/steps/uttaksplan-info/components/scenarios/farMedmor-førstegangssøknad-med-annen-part/farMedmorFørstegangssøknadMedAnnenPartUtils.ts","../../src/app/steps/uttaksplan-info/components/scenarios/farMedmor-førstegangssøknad-med-annen-part/FarMedmorFørstegangssøknadMedAnnenPart.tsx","../../src/app/steps/uttaksplan-info/components/scenarios/scenarios.ts","../../src/app/steps/uttaksplan-info/components/UttaksplanInfoScenarios.tsx","../../src/app/api/getStønadskontoParams.ts","../../src/app/steps/uttaksplan-info/UttaksplanInfo.tsx"],"sourcesContent":["export enum UttaksplanHexColor {\n    lilla = '#544066',\n    blaa = '#0067C5',\n    gronn = '#06893a',\n    yellow = '#ff9100',\n    graa = '#7f756c',\n    rammeGraa = '#c6c2bf',\n    rod = '#BA3A26',\n}\n","import { getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\n\nexport enum FarMedmorFødselBeggeHarRettFormField {\n    dekningsgrad = 'dekningsgrad',\n    morsSisteDag = 'morsSisteDag',\n    farMedmorsFørsteDag = 'farMedmorsFørsteDag',\n    antallUkerFellesperiode = 'antallUkerFellesperiode',\n    antallDagerFellesperiode = 'antallDagerFellesperiode',\n}\n\nexport interface FarMedmorFødselBeggeHarRettFormData {\n    [FarMedmorFødselBeggeHarRettFormField.dekningsgrad]: string;\n    [FarMedmorFødselBeggeHarRettFormField.morsSisteDag]: string;\n    [FarMedmorFødselBeggeHarRettFormField.farMedmorsFørsteDag]: string;\n    [FarMedmorFødselBeggeHarRettFormField.antallUkerFellesperiode]: string;\n    [FarMedmorFødselBeggeHarRettFormField.antallDagerFellesperiode]: string;\n}\n\nexport const FarMedmorFødselBeggeHarRettFormComponents = getTypedFormComponents<\n    FarMedmorFødselBeggeHarRettFormField,\n    FarMedmorFødselBeggeHarRettFormData\n>();\n","import { FarMedmorFødselBeggeHarRettUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport {\n    FarMedmorFødselBeggeHarRettFormData,\n    FarMedmorFødselBeggeHarRettFormField,\n} from './farMedmorFødselBeggeHarRettFormConfig';\nimport { Dekningsgrad } from '@navikt/fp-common';\n\nconst initialFarMedmorFødselBeggeHarRettValues: FarMedmorFødselBeggeHarRettFormData = {\n    [FarMedmorFødselBeggeHarRettFormField.dekningsgrad]: '',\n    [FarMedmorFødselBeggeHarRettFormField.morsSisteDag]: '',\n    [FarMedmorFødselBeggeHarRettFormField.farMedmorsFørsteDag]: '',\n    [FarMedmorFødselBeggeHarRettFormField.antallUkerFellesperiode]: '0',\n    [FarMedmorFødselBeggeHarRettFormField.antallDagerFellesperiode]: '0',\n};\n\nexport const mapFarMedmorFødselBeggeHarRettToState = (\n    values: Partial<FarMedmorFødselBeggeHarRettFormData>,\n): FarMedmorFødselBeggeHarRettUttaksplanInfo => {\n    return {\n        antallDagerFellesperiode:\n            values.antallDagerFellesperiode === undefined || values.antallDagerFellesperiode.trim().length === 0\n                ? '0'\n                : values.antallDagerFellesperiode,\n        antallUkerFellesperiode:\n            values.antallUkerFellesperiode === undefined || values.antallUkerFellesperiode.trim().length === 0\n                ? '0'\n                : values.antallUkerFellesperiode,\n        farMedmorsFørsteDag: values.farMedmorsFørsteDag!,\n        morsSisteDag: values.morsSisteDag!,\n    };\n};\n\nexport const getInitialFarMedmorFødselBeggeHarRettValues = (\n    state: FarMedmorFødselBeggeHarRettUttaksplanInfo | undefined,\n    dekningsgrad: Dekningsgrad,\n): FarMedmorFødselBeggeHarRettFormData => {\n    if (!state) {\n        return initialFarMedmorFødselBeggeHarRettValues;\n    }\n\n    return {\n        ...initialFarMedmorFødselBeggeHarRettValues,\n        antallDagerFellesperiode: state.antallDagerFellesperiode,\n        antallUkerFellesperiode: state.antallUkerFellesperiode,\n        morsSisteDag: state.morsSisteDag,\n        farMedmorsFørsteDag: state.farMedmorsFørsteDag,\n        dekningsgrad,\n    };\n};\n","import { bemUtils } from '@navikt/fp-common';\n\nimport './multibar.less';\n\ninterface BarProps {\n    width: number;\n    color: string;\n    color2?: string;\n    text?: React.ReactNode;\n}\n\ninterface Props {\n    borderColor: string;\n    leftBar?: BarProps;\n    rightBar?: BarProps;\n    centerBar?: BarProps;\n}\n\nconst getBarStyle = ({ width, color, color2 }: BarProps): React.CSSProperties => {\n    return {\n        width: `${width}%`,\n        background: color2 ? `linear-gradient(to right bottom, ${color} 49%, ${color2} 51%)` : color,\n    };\n};\n\nconst Multibar: React.FunctionComponent<Props> = ({ leftBar, rightBar, centerBar, borderColor }) => {\n    const bem = bemUtils('multibar');\n\n    return (\n        <div className={bem.block}>\n            <div className={bem.element('bars')}>\n                {leftBar && leftBar.width > 0 && (\n                    <div className={bem.element('bar', 'left')} style={getBarStyle(leftBar)}>\n                        {leftBar && leftBar.text}\n                    </div>\n                )}\n                {centerBar && (\n                    <div\n                        className={bem.element('bar', 'center')}\n                        style={{ ...getBarStyle(centerBar), left: leftBar ? `${leftBar.width}%` : undefined }}\n                    >\n                        {centerBar && centerBar.text}\n                    </div>\n                )}\n                {rightBar && rightBar.width > 0 && (\n                    <div className={bem.element('bar', 'right')} style={getBarStyle(rightBar)}>\n                        {rightBar && rightBar.text}\n                    </div>\n                )}\n            </div>\n            <div className={bem.element('background')} style={{ borderColor }} />\n        </div>\n    );\n};\n\nexport default Multibar;\n","import { FormattedMessage, useIntl } from 'react-intl';\nimport {\n    Personkort,\n    UttaksplanHexColor,\n    bemUtils,\n    getNavnGenitivEierform,\n    getVarighetString,\n    intlUtils,\n} from '@navikt/fp-common';\nimport Multibar from './multibar/Multibar';\nimport { TilgjengeligeDager } from 'app/types/TilgjengeligeDager';\nimport { Label } from '@navikt/ds-react';\n\nimport './tilgjengeligeDagerGraf.less';\n\ninterface Props {\n    tilgjengeligeDager: TilgjengeligeDager;\n    navnMor: string;\n    navnFarMedmor: string;\n    erFarEllerMedmor: boolean;\n    erDeltUttak: boolean;\n}\n\nexport const getProsentFordelingPerDel = (\n    tilgjengeligeDager: TilgjengeligeDager,\n    inkluderForeldrepengerFørTermin: boolean,\n): {\n    pstMor: number;\n    pstFelles: number;\n    pstFarMedmor: number;\n} => {\n    const pstMultiplikator =\n        100 / (inkluderForeldrepengerFørTermin ? tilgjengeligeDager.dagerTotalt : tilgjengeligeDager.dagerEtterTermin);\n\n    const pstMor =\n        pstMultiplikator * tilgjengeligeDager.dagerMor +\n        (inkluderForeldrepengerFørTermin ? tilgjengeligeDager.dagerForeldrepengerFørFødsel : 0);\n    const pstFarMedmor = pstMultiplikator * tilgjengeligeDager.dagerFarMedmor;\n    const pstFelles = 100 - pstMor - pstFarMedmor;\n\n    return {\n        pstMor,\n        pstFarMedmor,\n        pstFelles,\n    };\n};\n\nconst DeltOmsorgGraf: React.FunctionComponent<Props> = ({\n    tilgjengeligeDager,\n    navnFarMedmor,\n    navnMor,\n    erFarEllerMedmor,\n}) => {\n    const intl = useIntl();\n    const bem = bemUtils('tilgjengeligeDagerGraf');\n    const fordeling = getProsentFordelingPerDel(tilgjengeligeDager, true);\n    const txtMor =\n        tilgjengeligeDager.dagerForeldrepengerFørFødsel > 0\n            ? `${tilgjengeligeDager.dagerForeldrepengerFørFødsel / 5} + ${tilgjengeligeDager.dagerMor / 5} ${intlUtils(\n                  intl,\n                  'uker',\n                  { uker: 15 },\n              )}`\n            : getVarighetString(tilgjengeligeDager.dagerMor, intl);\n    return (\n        <div className={bem.classNames(bem.block, bem.modifier('flereForeldre'))}>\n            <div className={bem.element('bars')}>\n                <div className={bem.element('forelder1')} style={{ width: `${fordeling.pstMor}%` }}>\n                    <div className={bem.element('barTitle')}>\n                        <Personkort textValign=\"bottom\">\n                            <FormattedMessage\n                                id=\"tilgjengeligeDagerGraf.person.del\"\n                                values={{ navnEierform: getNavnGenitivEierform(navnMor, intl.locale) }}\n                            />\n                        </Personkort>\n                    </div>\n                    <Multibar\n                        borderColor={UttaksplanHexColor.graa}\n                        leftBar={{\n                            color: UttaksplanHexColor.lilla,\n                            width: 100,\n                            text: <div className={bem.element('barTekst')}>{txtMor}</div>,\n                        }}\n                    />\n                </div>\n                <div className={bem.element('felles')} style={{ width: `${fordeling.pstFelles}%` }}>\n                    <div className={bem.element('barTitle')}>\n                        <FormattedMessage id=\"tilgjengeligeDagerGraf.fellesperiode\" />\n                    </div>\n                    <Multibar\n                        borderColor={UttaksplanHexColor.graa}\n                        leftBar={{\n                            color: UttaksplanHexColor.lilla,\n                            color2: UttaksplanHexColor.blaa,\n                            width: 100,\n                            text: (\n                                <div className={bem.element('barTekst')}>\n                                    {getVarighetString(tilgjengeligeDager.dagerFelles, intl)}\n                                </div>\n                            ),\n                        }}\n                    />\n                </div>\n                {navnFarMedmor && (\n                    <div className={bem.element('forelder2')} style={{ width: `${fordeling.pstFarMedmor}%` }}>\n                        <div className={bem.element('barTitle')}>\n                            <Personkort invertert={true} textValign=\"bottom\">\n                                <FormattedMessage\n                                    id=\"tilgjengeligeDagerGraf.person.del\"\n                                    values={{\n                                        navnEierform: getNavnGenitivEierform(navnFarMedmor, intl.locale),\n                                    }}\n                                />\n                            </Personkort>\n                        </div>\n                        <Multibar\n                            borderColor={UttaksplanHexColor.graa}\n                            leftBar={{\n                                color: UttaksplanHexColor.blaa,\n                                width: 100,\n                                text: (\n                                    <div className={bem.element('barTekst')}>\n                                        {getVarighetString(tilgjengeligeDager.dagerFarMedmor, intl)}\n                                    </div>\n                                ),\n                            }}\n                        />\n                    </div>\n                )}\n            </div>\n            {!erFarEllerMedmor && tilgjengeligeDager.dagerForeldrepengerFørFødsel > 0 && (\n                <div style={{ paddingTop: '0.625rem' }}>\n                    <Label>\n                        <FormattedMessage id=\"tilgjengeligeDagerGraf.uttakFørFødselInfo\" values={{ navn: navnMor }} />\n                    </Label>\n                </div>\n            )}\n            {erFarEllerMedmor && tilgjengeligeDager.dagerForeldrepengerFørFødsel > 0 && (\n                <div style={{ paddingTop: '0.625rem' }}>\n                    <Label>\n                        <FormattedMessage\n                            id=\"tilgjengeligeDagerGraf.uttakFørFødselInfoFarMedmor\"\n                            values={{ navn: navnMor }}\n                        />\n                    </Label>\n                </div>\n            )}\n        </div>\n    );\n};\n\nconst AleneomsorgGraf: React.FunctionComponent<Props> = ({ tilgjengeligeDager, erFarEllerMedmor }) => {\n    const intl = useIntl();\n    const bem = bemUtils('tilgjengeligeDagerGraf');\n    const txt =\n        tilgjengeligeDager.dagerForeldrepengerFørFødsel > 0\n            ? `${tilgjengeligeDager.dagerForeldrepengerFørFødsel / 5} + ${\n                  tilgjengeligeDager.dagerForeldrepenger / 5\n              } uker`\n            : getVarighetString(tilgjengeligeDager.dagerEtterTermin, intl);\n    return (\n        <div className={bem.block}>\n            <div style={{ position: 'relative' }}>\n                <div className={bem.element('barTitle')}>\n                    <Label>\n                        <FormattedMessage id=\"tilgjengeligeDagerGraf.periodeMedForeldrepenger\" />\n                    </Label>\n                </div>\n            </div>\n            <Multibar\n                borderColor={UttaksplanHexColor.graa}\n                leftBar={{\n                    color: erFarEllerMedmor ? UttaksplanHexColor.blaa : UttaksplanHexColor.lilla,\n                    width: 100,\n                    text: <div className={bem.element('barTekst')}>{txt}</div>,\n                }}\n            />\n            {!erFarEllerMedmor && tilgjengeligeDager.dagerForeldrepengerFørFødsel > 0 && (\n                <div style={{ paddingTop: '0.625rem' }}>\n                    <Label>\n                        <FormattedMessage id=\"tilgjengeligeDagerGraf.uttakFørFødselInfoIkkeDeltUttak\" />\n                    </Label>\n                </div>\n            )}\n        </div>\n    );\n};\n\nconst TilgjengeligeDagerGraf: React.FunctionComponent<Props> = (props) => {\n    return props.erDeltUttak ? <DeltOmsorgGraf {...props} /> : <AleneomsorgGraf {...props} />;\n};\n\nexport default TilgjengeligeDagerGraf;\n","import { Forelder, StønadskontoType, TilgjengeligStønadskonto } from '@navikt/fp-common';\nimport { TilgjengeligeDager } from './../../../../types/TilgjengeligeDager';\n\nexport const summerAntallDagerIKontoer = (kontoer: TilgjengeligStønadskonto[]): number => {\n    return kontoer.reduce((dager, konto) => konto.dager + dager, 0);\n};\n\nconst getMorsStønadskontoer = (kontoer: TilgjengeligStønadskonto[]): TilgjengeligStønadskonto[] =>\n    kontoer.filter((konto) => konto.konto === StønadskontoType.Mødrekvote);\n\nconst getFarsStønadskontoer = (kontoer: TilgjengeligStønadskonto[]): TilgjengeligStønadskonto[] =>\n    kontoer.filter((konto) => konto.konto === StønadskontoType.Fedrekvote);\n\nconst getForeldrepengeKontoer = (kontoer: TilgjengeligStønadskonto[]): TilgjengeligStønadskonto[] =>\n    kontoer.filter((konto) => konto.konto === StønadskontoType.Foreldrepenger);\n\nconst getFellesStønadskontoer = (kontoer: TilgjengeligStønadskonto[]): TilgjengeligStønadskonto[] =>\n    kontoer.filter((konto) => konto.konto === StønadskontoType.Fellesperiode);\n\nconst kontoErFørTermin = (konto: TilgjengeligStønadskonto): boolean => {\n    return konto.konto === StønadskontoType.ForeldrepengerFørFødsel;\n};\n\nconst kontoErEtterTermin = (konto: TilgjengeligStønadskonto): boolean => {\n    return konto.konto !== StønadskontoType.ForeldrepengerFørFødsel;\n};\n\nexport const getTilgjengeligeDager = (\n    kontoer: TilgjengeligStønadskonto[],\n    erDeltUttak: boolean,\n    forelderVedAleneomsorg: Forelder | undefined,\n): TilgjengeligeDager => {\n    const kontoerEtterTermin = kontoer.filter(kontoErEtterTermin);\n\n    const dagerTotalt = summerAntallDagerIKontoer(kontoer);\n    const dagerForeldrepengerFørFødsel = summerAntallDagerIKontoer(kontoer.filter(kontoErFørTermin));\n    const dagerEtterTermin = summerAntallDagerIKontoer(kontoerEtterTermin);\n    const dagerForeldrepenger = summerAntallDagerIKontoer(getForeldrepengeKontoer(kontoerEtterTermin));\n    const dagerMor = summerAntallDagerIKontoer(getMorsStønadskontoer(kontoerEtterTermin));\n    const dagerFar = summerAntallDagerIKontoer(getFarsStønadskontoer(kontoerEtterTermin));\n    const dagerFelles = summerAntallDagerIKontoer(getFellesStønadskontoer(kontoerEtterTermin));\n\n    const dagerKunTilMor = erDeltUttak === false && forelderVedAleneomsorg === Forelder.mor;\n    const dagerKunTilFar = erDeltUttak === false && forelderVedAleneomsorg === Forelder.farMedmor;\n\n    const maksDagerFar = dagerKunTilFar ? dagerForeldrepenger : dagerFar + dagerFelles;\n    const maksDagerMor = dagerKunTilMor ? dagerForeldrepenger + dagerForeldrepengerFørFødsel : dagerMor + dagerFelles;\n\n    return {\n        dagerTotalt,\n        dagerForeldrepengerFørFødsel,\n        dagerEtterTermin,\n        dagerForeldrepenger,\n        dagerMor,\n        dagerFarMedmor: dagerFar,\n        dagerFelles,\n        maksDagerFar,\n        maksDagerMor,\n        stønadskontoer: kontoer,\n    };\n};\n","import { Dekningsgrad, StønadskontoType, TilgjengeligStønadskonto } from '@navikt/fp-common';\nimport { TilgjengeligeStønadskontoerDTO } from 'app/types/TilgjengeligeStønadskontoerDTO';\n\nconst opprettAktivitetsFriKonto = (\n    kontoer: TilgjengeligStønadskonto[],\n    generellMinsterett: number,\n): TilgjengeligStønadskonto[] => {\n    const nyeKontoer: TilgjengeligStønadskonto[] = [];\n    nyeKontoer.push({ ...kontoer[0], dager: kontoer[0].dager - generellMinsterett });\n    nyeKontoer.push({ konto: StønadskontoType.AktivitetsfriKvote, dager: generellMinsterett });\n    return nyeKontoer;\n};\n\nconst mapTilgjengeligStønadskontoDTOToTilgjengeligStønadskonto = (\n    stønadskontoerDTO: TilgjengeligeStønadskontoerDTO,\n): TilgjengeligStønadskonto[] => {\n    let tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[] = [];\n\n    Object.keys(stønadskontoerDTO.kontoer)\n        .filter((konto: string) => konto !== StønadskontoType.Flerbarnsdager)\n        .forEach((konto) => {\n            tilgjengeligeStønadskontoer.push({\n                konto: konto as StønadskontoType,\n                dager: stønadskontoerDTO.kontoer[konto],\n            });\n        });\n\n    const generellMinsterett = stønadskontoerDTO.minsteretter.generellMinsterett;\n\n    if (generellMinsterett > 0) {\n        tilgjengeligeStønadskontoer = opprettAktivitetsFriKonto(tilgjengeligeStønadskontoer, generellMinsterett);\n    }\n    return tilgjengeligeStønadskontoer;\n};\n\nexport const getValgtStønadskontoFor80Og100Prosent = (\n    kontoer80: TilgjengeligeStønadskontoerDTO,\n    kontoer100: TilgjengeligeStønadskontoerDTO,\n) => {\n    const åttiProsent = mapTilgjengeligStønadskontoDTOToTilgjengeligStønadskonto(kontoer80);\n    const hundreProsent = mapTilgjengeligStønadskontoDTOToTilgjengeligStønadskonto(kontoer100);\n    return {\n        [Dekningsgrad.ÅTTI_PROSENT]: åttiProsent,\n        [Dekningsgrad.HUNDRE_PROSENT]: hundreProsent,\n    };\n};\n","import {\n    ISOStringToDate,\n    andreAugust2022ReglerGjelder,\n    getSisteUttaksdag6UkerEtterFødsel,\n    hasValue,\n} from '@navikt/fp-common';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport dayjs from 'dayjs';\nimport {\n    FarMedmorFødselBeggeHarRettFormData,\n    FarMedmorFødselBeggeHarRettFormField,\n} from './farMedmorFødselBeggeHarRettFormConfig';\n\nexport interface FarMedmorFødselBeggeHarRettFormPayload extends FarMedmorFødselBeggeHarRettFormData {\n    familiehendelsesdato: Date;\n}\nconst includeFellesperiodeSpørsmål = (farMedmorsFørsteDag: string, familiehendelsesdato: Date) => {\n    return (\n        hasValue(farMedmorsFørsteDag) &&\n        (!andreAugust2022ReglerGjelder ||\n            dayjs(ISOStringToDate(farMedmorsFørsteDag)).isAfter(\n                getSisteUttaksdag6UkerEtterFødsel(familiehendelsesdato),\n                'day',\n            ))\n    );\n};\nconst FarMedmorFødselBeggeHarRettFormConfig: QuestionConfig<\n    FarMedmorFødselBeggeHarRettFormPayload,\n    FarMedmorFødselBeggeHarRettFormField\n> = {\n    [FarMedmorFødselBeggeHarRettFormField.dekningsgrad]: {\n        isIncluded: () => true,\n        isAnswered: ({ dekningsgrad }) => hasValue(dekningsgrad),\n    },\n    [FarMedmorFødselBeggeHarRettFormField.morsSisteDag]: {\n        isIncluded: ({ familiehendelsesdato }) => !andreAugust2022ReglerGjelder(familiehendelsesdato),\n        isAnswered: ({ morsSisteDag, familiehendelsesdato }) =>\n            andreAugust2022ReglerGjelder(familiehendelsesdato) || hasValue(morsSisteDag),\n        visibilityFilter: ({ dekningsgrad }) => hasValue(dekningsgrad),\n    },\n    [FarMedmorFødselBeggeHarRettFormField.farMedmorsFørsteDag]: {\n        isIncluded: ({ morsSisteDag, familiehendelsesdato }) =>\n            andreAugust2022ReglerGjelder(familiehendelsesdato) || hasValue(morsSisteDag),\n        isAnswered: ({ farMedmorsFørsteDag }) => hasValue(farMedmorsFørsteDag),\n    },\n    [FarMedmorFødselBeggeHarRettFormField.antallDagerFellesperiode]: {\n        isIncluded: ({ farMedmorsFørsteDag, familiehendelsesdato }) =>\n            includeFellesperiodeSpørsmål(farMedmorsFørsteDag, familiehendelsesdato),\n        isAnswered: () => true,\n    },\n    [FarMedmorFødselBeggeHarRettFormField.antallUkerFellesperiode]: {\n        isIncluded: ({ farMedmorsFørsteDag, familiehendelsesdato }) =>\n            includeFellesperiodeSpørsmål(farMedmorsFørsteDag, familiehendelsesdato),\n\n        isAnswered: () => true,\n    },\n};\n\nconst farMedmorFødselBeggeHarRettQuestionsConfig = Questions<\n    FarMedmorFødselBeggeHarRettFormPayload,\n    FarMedmorFødselBeggeHarRettFormField\n>(FarMedmorFødselBeggeHarRettFormConfig);\n\nexport default farMedmorFødselBeggeHarRettQuestionsConfig;\n","import { ISOStringToDate, intlUtils, uttaksplanDatoavgrensninger } from '@navikt/fp-common';\nimport { TypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\ninterface Props {\n    FormComponents: TypedFormComponents<any, any, string>;\n    fieldName: string;\n    navnMor: string;\n    familiehendelsesdato: string;\n}\n\nconst MorsSisteDagSpørsmål: FunctionComponent<Props> = ({\n    FormComponents,\n    fieldName,\n    familiehendelsesdato,\n    navnMor,\n}) => {\n    const intl = useIntl();\n\n    const maxDate = ISOStringToDate(uttaksplanDatoavgrensninger.morsSisteUttaksdag(familiehendelsesdato).maxDate);\n    const minDate = ISOStringToDate(uttaksplanDatoavgrensninger.morsSisteUttaksdag(familiehendelsesdato).minDate);\n\n    return (\n        <FormComponents.DatePicker\n            name={fieldName}\n            label={intlUtils(intl, 'uttaksplaninfo.morSinSisteUttaksdag.label', { navnMor })}\n            maxDate={maxDate}\n            minDate={minDate}\n            showYearSelector={true}\n            disableWeekend={true}\n            placeholder={'dd.mm.åååå'}\n        />\n    );\n};\n\nexport default MorsSisteDagSpørsmål;\n","import { ISOStringToDate, Uttaksdagen, formatDateExtended, intlUtils } from '@navikt/fp-common';\nimport dayjs from 'dayjs';\nimport { IntlShape } from 'react-intl';\nimport { isISODateString } from '@navikt/ds-datepicker';\n\nexport const validateStartdatoFarMedmor =\n    (intl: IntlShape, minDato: Date, maxDato: Date) => (permisjonStartdato: string) => {\n        if (!isISODateString(permisjonStartdato)) {\n            return intlUtils(intl, 'valideringsfeil.uttaksplaninfo.startdatoPermisjon.gyldigDato');\n        }\n        if (!Uttaksdagen(ISOStringToDate(permisjonStartdato)!).erUttaksdag()) {\n            return intlUtils(intl, 'valideringsfeil.uttaksplaninfo.startdatoHelg');\n        }\n        if (dayjs(permisjonStartdato).isBefore(minDato, 'd') || dayjs(permisjonStartdato).isAfter(maxDato, 'd')) {\n            return intlUtils(intl, 'valideringsfeil.dateOutsideRange.fom', {\n                fom: formatDateExtended(minDato),\n                tom: formatDateExtended(maxDato),\n            });\n        }\n\n        return undefined;\n    };\n","import {\n    Block,\n    ISOStringToDate,\n    Situasjon,\n    Uttaksdagen,\n    andreAugust2022ReglerGjelder,\n    formatDate,\n    intlUtils,\n    uttaksplanDatoavgrensninger,\n} from '@navikt/fp-common';\nimport LenkeKnapp from 'app/components/lenke-knapp/LenkeKnapp';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { validateStartdatoFarMedmor } from '../far-medmor-fødsel-og-mor-har-ikke-rett/validation/farMedmorFødselOgMorHarIkkeRettValidering';\nimport { TypedFormComponents, dateToISOString } from '@navikt/sif-common-formik-ds/lib';\n\ninterface Props {\n    FormComponents: TypedFormComponents<any, any, string>;\n    fieldName: string;\n    familiehendelsesdato: Date;\n    setFieldValue: (field: string, value: any, shouldValidate?: boolean | undefined) => void;\n    morsSisteDag: Date | undefined;\n    navnMor: string;\n    termindato: Date | undefined;\n    situasjon: Situasjon;\n    morHarRettTilForeldrepengerIEØS: boolean;\n}\n\nconst FarMedmorsFørsteDag: FunctionComponent<Props> = ({\n    FormComponents,\n    fieldName,\n    familiehendelsesdato,\n    morsSisteDag,\n    setFieldValue,\n    navnMor,\n    termindato,\n    situasjon,\n    morHarRettTilForeldrepengerIEØS,\n}) => {\n    const intl = useIntl();\n    const maxDate = ISOStringToDate(\n        uttaksplanDatoavgrensninger.startdatoPermisjonFarMedmor(familiehendelsesdato, termindato, situasjon).maxDate,\n    );\n    const minDate = ISOStringToDate(\n        uttaksplanDatoavgrensninger.startdatoPermisjonFarMedmor(familiehendelsesdato, termindato, situasjon).minDate,\n    );\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <FormComponents.DatePicker\n                    name={fieldName}\n                    label={intlUtils(intl, 'uttaksplaninfo.farSinFørsteUttaksdagSpørsmål.label')}\n                    maxDate={maxDate}\n                    minDate={minDate}\n                    showYearSelector={true}\n                    disableWeekend={true}\n                    placeholder={'dd.mm.åååå'}\n                    validate={validateStartdatoFarMedmor(intl, minDate!, maxDate!)}\n                />\n            </Block>\n            {!andreAugust2022ReglerGjelder(familiehendelsesdato) && !morHarRettTilForeldrepengerIEØS && (\n                <LenkeKnapp\n                    text={\n                        <FormattedMessage\n                            id=\"uttaksplaninfo.farSinFørsteUttaksdagSpørsmål.førsteUttaksdagEtterAnnenPart\"\n                            values={{\n                                navn: navnMor,\n                                dato: formatDate(Uttaksdagen(morsSisteDag!).neste()),\n                            }}\n                        />\n                    }\n                    onClick={() => {\n                        const farSinFørsteUttaksdag: string | undefined = morsSisteDag\n                            ? dateToISOString(Uttaksdagen(morsSisteDag).neste())\n                            : undefined;\n\n                        setFieldValue(fieldName, farSinFørsteUttaksdag);\n                    }}\n                />\n            )}\n        </>\n    );\n};\n\nexport default FarMedmorsFørsteDag;\n","import { Component } from 'react';\n\ninterface RangeIconProps {\n    type: 'plus' | 'minus';\n}\n\nexport default class RangeIcon extends Component<RangeIconProps> {\n    renderPlusIcon() {\n        return (\n            <path\n                d=\"M18.2616283,12.5217391 L12.5222595,12.5217391 L12.5222595,18.2608696 C12.5222595,18.5488696 12.2874672,18.7826087 12.0004988,18.7826087 C11.7124868,18.7826087 11.478738,18.5488696 11.478738,18.2608696 L11.478738,12.5217391 L5.73936926,12.5217391 C5.4513573,12.5206957 5.21656494,12.288 5.21760846,12 C5.21760846,11.7130435 5.4513573,11.4782609 5.73936926,11.4782609 L11.478738,11.4782609 L11.478738,5.73913043 C11.478738,5.45113043 11.7124868,5.2173913 12.0004988,5.2173913 C12.2874672,5.2173913 12.5222595,5.45113043 12.5222595,5.73913043 L12.5222595,11.4782609 L18.2616283,11.4782609 C18.5485967,11.4782609 18.7844326,11.712 18.783389,12 C18.783389,12.288 18.5496402,12.5217391 18.2616283,12.5217391 Z\"\n                id=\"Inner\"\n                fill=\"#FFFFFF\"\n            />\n        );\n    }\n\n    renderMinusIcon() {\n        return (\n            <path\n                d=\"M18.2616283,12.5217391 L5.73936926,12.5217391 C5.4513573,12.5206957 5.21656494,12.288 5.21760846,12 C5.21760846,11.7130435 5.4513573,11.4782609 5.73936926,11.4782609 L18.2616283,11.4782609 C18.5485967,11.4782609 18.7844326,11.712 18.783389,12 C18.783389,12.288 18.5496402,12.5217391 18.2616283,12.5217391 Z\"\n                id=\"Inner\"\n                fill=\"#FFFFFF\"\n            />\n        );\n    }\n\n    render() {\n        const { type } = this.props;\n        const icon = type === 'minus' ? this.renderMinusIcon() : this.renderPlusIcon();\n\n        return (\n            <svg\n                focusable=\"false\"\n                role=\"img\"\n                aria-hidden=\"true\"\n                width=\"24px\"\n                height=\"24px\"\n                viewBox=\"0 0 24 24\"\n                className=\"rangeIcon\"\n            >\n                <g id=\"Icons/subtract/default\" stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\n                    {icon}\n                </g>\n            </svg>\n        );\n    }\n}\n","// Ensure touches occur rapidly\nconst delay = 500;\n// Sequential touches must be in close vicinity\nconst minZoomTouchDelta = 10;\n\n// Track state of the last touch\nlet lastTapAt = 0;\nlet lastClientX = 0;\nlet lastClientY = 0;\n\nexport default function preventDoubleTapZoom(event: React.TouchEvent<any>) {\n    // Exit early if this involves more than one finger (e.g. pinch to zoom)\n    if (event.touches.length > 1) {\n        return;\n    }\n\n    const tapAt = new Date().getTime();\n    const timeDiff = tapAt - lastTapAt;\n    const { clientX, clientY } = event.touches[0];\n    const xDiff = Math.abs(lastClientX - clientX);\n    const yDiff = Math.abs(lastClientY - clientY);\n    if (xDiff < minZoomTouchDelta && yDiff < minZoomTouchDelta && event.touches.length === 1 && timeDiff < delay) {\n        event.preventDefault();\n        // Trigger a fake click for the tap we just prevented\n        (event.target as any).click();\n    }\n    lastClientX = clientX;\n    lastClientY = clientY;\n    lastTapAt = tapAt;\n}\n","import { createElement } from 'react';\n\n/**\n *  Skjuler tekst slik at den ikke er synlig på skjerm, men leses av skjermleser\n */\nexport interface AriaTextProps {\n    id?: string;\n    children?: React.ReactNode;\n    tag?: string;\n}\n\nconst AriaText: React.FunctionComponent<AriaTextProps> = ({ id, children, tag }) => {\n    const tagName = tag || 'span';\n    return createElement(tagName, { id, className: 'sr-only' }, children);\n};\nexport default AriaText;\n","import classnames from 'classnames';\nimport preventDoubleTapZoom from '../preventDoubleTapZoom';\nimport AriaText from '../AriaText';\nimport './sirkelknapp.less';\nimport { guid } from '@navikt/fp-common';\n\nexport type Stil = 'hvit' | 'bla' | 'info';\n\nexport interface SirkelknappProps {\n    /** Tekst som blir lest opp og satt som tittel på knappen */\n    ariaLabel: string;\n    /** Ikon som brukes inne i knappen */\n    ikon: React.ReactNode;\n    /** Funksjon som kalles knappen klikkes på */\n    onClick: () => void;\n    /** Om knappen er disabled eller ikke. Default false. */\n    disabled?: boolean;\n    /** Om knappen skal ha tilstanded pressed/valgt. Default false. */\n    toggle?: {\n        pressed: boolean;\n    };\n    /** Layout varianter */\n    stil?: Stil;\n    /** Størrelse - default normal */\n    size?: 'normal' | 'stor';\n    posisjoneringFraHøyre?: number;\n}\n\nconst Sirkelknapp: React.FunctionComponent<SirkelknappProps> = ({\n    onClick,\n    ariaLabel,\n    ikon,\n    toggle,\n    disabled,\n    stil = 'info',\n    size = 'normal',\n    posisjoneringFraHøyre,\n}) => {\n    const labelId = guid();\n    return (\n        <button\n            style={{ left: posisjoneringFraHøyre }}\n            type=\"button\"\n            onClick={() => onClick()}\n            onTouchStart={preventDoubleTapZoom}\n            aria-labelledby={labelId}\n            className={classnames(`sirkelknapp`, `sirkelknapp--${stil}`, `sirkelknapp--${size}`, {\n                'sirkelknapp--pressed': toggle && toggle.pressed,\n                'sirkelknapp--disabled': disabled,\n            })}\n            disabled={disabled}\n            aria-pressed={toggle ? toggle.pressed : undefined}\n        >\n            <span className=\"sirkelknapp__ikon\" role=\"presentation\">\n                {ikon}\n            </span>\n            <AriaText id={labelId}>{ariaLabel}</AriaText>\n        </button>\n    );\n};\n\nexport default Sirkelknapp;\n","import { bemUtils, Block, intlUtils } from '@navikt/fp-common';\nimport { Label, ReadMore } from '@navikt/ds-react';\nimport { getNumberFromNumberInputValue, TypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport RangeIcon from '../../fordelingFellesperiode/range-input/RangeIcon';\nimport Sirkelknapp from '../../fordelingFellesperiode/range-input/sirkelknapp/Sirkelknapp';\n\nimport './antallUkerOgDagerFellesperiodeFarMedmorSpørsmål.less';\n\ninterface Props {\n    FormComponents: TypedFormComponents<any, any, string>;\n    ukerFieldName: string;\n    dagerFieldName: string;\n    antallUker: string;\n    antallDager: string;\n    setFieldValue: (field: string, value: any, shouldValidate?: boolean | undefined) => void;\n    ukerMedFellesperiode: number;\n}\n\nconst getNumberFromStringInput = (input: string): number | undefined => {\n    return input === undefined || input.trim().length === 0 ? 0 : getNumberFromNumberInputValue(input);\n};\n\nconst leggTil = (currentAntall: string, max: number): string => {\n    const number = getNumberFromStringInput(currentAntall);\n\n    if (number === undefined || Math.round(number) !== number) {\n        return currentAntall;\n    }\n\n    if (number + 1 > max) {\n        return max.toString();\n    }\n\n    return (number + 1).toString();\n};\n\nconst trekkFra = (currentAntall: string, min: number): string => {\n    const number = getNumberFromStringInput(currentAntall);\n\n    if (number === undefined || number === 0 || Math.round(number) !== number) {\n        return currentAntall;\n    }\n\n    if (number - 1 < min) {\n        return min.toString();\n    }\n\n    return (number - 1).toString();\n};\n\nconst AntallUkerOgDagerFellesperiodeFarMedmorSpørsmål: FunctionComponent<Props> = ({\n    FormComponents,\n    ukerFieldName,\n    dagerFieldName,\n    antallDager,\n    antallUker,\n    setFieldValue,\n    ukerMedFellesperiode,\n}) => {\n    const bem = bemUtils('antallUkerOgDagerFellesperiodeFarMedmorSpørsmål');\n    const intl = useIntl();\n\n    return (\n        <>\n            <legend>\n                <Label>\n                    <FormattedMessage id=\"uttaksplaninfo.fellesperiode.tittel\" />\n                </Label>\n            </legend>\n            <div className={bem.block}>\n                <div className={bem.element('stepper')}>\n                    <div className={bem.element('icon')}>\n                        <Sirkelknapp\n                            stil=\"hvit\"\n                            ariaLabel=\"Mink antall uker med en uke\"\n                            ikon={<RangeIcon type=\"minus\" />}\n                            disabled={\n                                antallUker === undefined ||\n                                parseInt(antallUker, 10) === 0 ||\n                                antallUker.trim().length === 0\n                                    ? true\n                                    : false\n                            }\n                            onClick={() => setFieldValue(ukerFieldName, trekkFra(antallUker, 0))}\n                        />\n                    </div>\n                    <FormComponents.NumberInput\n                        className={bem.element('uker')}\n                        integerValue={true}\n                        name={ukerFieldName}\n                        label={intlUtils(intl, 'uker.fellesperiode')}\n                        width=\"xs\"\n                        step=\"1\"\n                    />\n                    <div className={bem.element('icon')}>\n                        <Sirkelknapp\n                            stil=\"hvit\"\n                            ariaLabel=\"Øk antall uker med en uke\"\n                            ikon={<RangeIcon type=\"plus\" />}\n                            disabled={parseInt(antallUker, 10) >= ukerMedFellesperiode ? true : false}\n                            onClick={() => setFieldValue(ukerFieldName, leggTil(antallUker, ukerMedFellesperiode))}\n                        />\n                    </div>\n                </div>\n                <div className={bem.element('stepper')}>\n                    <div className={bem.element('icon')}>\n                        <Sirkelknapp\n                            stil=\"hvit\"\n                            ariaLabel=\"Mink antall dager med en dag\"\n                            ikon={<RangeIcon type=\"minus\" />}\n                            onClick={() => setFieldValue(dagerFieldName, trekkFra(antallDager, 0))}\n                            disabled={\n                                antallDager === undefined ||\n                                parseInt(antallDager, 10) === 0 ||\n                                antallDager.trim().length === 0\n                                    ? true\n                                    : false\n                            }\n                        />\n                    </div>\n                    <FormComponents.NumberInput\n                        className={bem.element('uker')}\n                        integerValue={true}\n                        name={dagerFieldName}\n                        label={intlUtils(intl, 'dager.fellesperiode')}\n                        width=\"xs\"\n                        step=\"1\"\n                    />\n                    <div className={bem.element('icon')}>\n                        <Sirkelknapp\n                            stil=\"hvit\"\n                            ariaLabel=\"Øk antall dager med en dag\"\n                            ikon={<RangeIcon type=\"plus\" />}\n                            onClick={() => setFieldValue(dagerFieldName, leggTil(antallDager, 4))}\n                            disabled={parseInt(antallDager, 10) === 4 ? true : false}\n                        />\n                    </div>\n                </div>\n            </div>\n            <Block margin=\"m\">\n                <ReadMore header={intlUtils(intl, 'uttaksplaninfo.fellesperiode.apneLabel')}>\n                    <FormattedMessage id=\"uttaksplaninfo.fellesperiode.lesMerInfo\" />\n                </ReadMore>\n            </Block>\n        </>\n    );\n};\n\nexport default AntallUkerOgDagerFellesperiodeFarMedmorSpørsmål;\n","import { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Block, Dekningsgrad, TilgjengeligStønadskonto, intlUtils } from '@navikt/fp-common';\nimport { getAntallUker } from 'app/steps/uttaksplan-info/utils/stønadskontoer';\nimport { TypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\nimport { ReadMore } from '@navikt/ds-react';\n\ninterface Props {\n    FormKomponent: TypedFormComponents<any, any, any>;\n    dekningsgradFeltNavn: string;\n    tilgjengeligeStønadskontoer: {\n        [Dekningsgrad.ÅTTI_PROSENT]: TilgjengeligStønadskonto[];\n        [Dekningsgrad.HUNDRE_PROSENT]: TilgjengeligStønadskonto[];\n    };\n    erDeltUttak: boolean;\n}\n\nconst DekningsgradSpørsmål: FunctionComponent<Props> = ({\n    FormKomponent,\n    dekningsgradFeltNavn,\n    tilgjengeligeStønadskontoer,\n    erDeltUttak,\n}) => {\n    const intl = useIntl();\n    const spørsmålTekst = erDeltUttak\n        ? 'uttaksplaninfo.dekningsgrad.label.deltUttak'\n        : 'uttaksplaninfo.dekningsgrad.label.ikkeDeltUttak';\n    return (\n        <Block padBottom=\"l\">\n            <FormKomponent.RadioGroup\n                name={dekningsgradFeltNavn}\n                radios={[\n                    {\n                        label: intlUtils(intl, 'uttaksplaninfo.49Uker', {\n                            antallUker: getAntallUker(tilgjengeligeStønadskontoer[Dekningsgrad.HUNDRE_PROSENT]),\n                        }),\n                        value: Dekningsgrad.HUNDRE_PROSENT,\n                    },\n                    {\n                        label: intlUtils(intl, 'uttaksplaninfo.59Uker', {\n                            antallUker: getAntallUker(tilgjengeligeStønadskontoer[Dekningsgrad.ÅTTI_PROSENT]),\n                        }),\n                        value: Dekningsgrad.ÅTTI_PROSENT,\n                    },\n                ]}\n                legend={intlUtils(intl, spørsmålTekst)}\n            />\n            <ReadMore header=\"Les mer om lengden på foreldrepengeperioden\">\n                <FormattedMessage id=\"uttaksplaninfo.veileder.dekningsgrad\" />\n            </ReadMore>\n        </Block>\n    );\n};\n\nexport default DekningsgradSpørsmål;\n","import { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport UttaksplanInfo from 'app/context/types/UttaksplanInfo';\n\nconst useUttaksplanInfo = <T extends UttaksplanInfo>(): T | undefined => {\n    const { state } = useForeldrepengesøknadContext();\n    //TODO (TOR) Fiks casting\n    return <T>state.uttaksplanInfo;\n};\n\nexport default useUttaksplanInfo;\n","import { Dekningsgrad } from '@navikt/fp-common';\n\nexport const getDekningsgradFromString = (dekningsgrad: string | undefined) => {\n    if (!dekningsgrad) {\n        return Dekningsgrad.HUNDRE_PROSENT;\n    }\n\n    return dekningsgrad === Dekningsgrad.HUNDRE_PROSENT ? Dekningsgrad.HUNDRE_PROSENT : Dekningsgrad.ÅTTI_PROSENT;\n};\n","import {\n    Forelder,\n    Periode,\n    Periodetype,\n    Situasjon,\n    StønadskontoType,\n    Tidsperioden,\n    TilgjengeligStønadskonto,\n    UtsettelseÅrsakType,\n    Uttaksdagen,\n    andreAugust2022ReglerGjelder,\n    dateIsSameOrAfter,\n    farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato,\n    getLengdePåForeslåttWLBUttakFarMedmor,\n    getTidsperiode,\n    guid,\n    isUttaksperiode,\n    sorterPerioder,\n    starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel,\n    tidperiodeOverlapperDato,\n} from '@navikt/fp-common';\nimport {\n    splittPeriodePåDato,\n    splittUttaksperiodePåFamiliehendelsesdato,\n} from '@navikt/uttaksplan/src/builder/leggTilPeriode';\nimport { skalFarUtsetteEtterMorSinSisteUttaksdag } from '../dateUtils';\n\nconst deltUttakAdopsjonSøktFørst = (\n    famDato: Date,\n    erFarEllerMedmor: boolean,\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    startdatoPermisjon: Date | undefined,\n    fellesperiodeukerMor: number | undefined,\n    harAnnenForelderSøktFP: boolean | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n): Periode[] => {\n    if (harAnnenForelderSøktFP !== true) {\n        const førsteUttaksdag = Uttaksdagen(startdatoPermisjon || famDato).denneEllerNeste();\n        const perioder: Periode[] = [];\n        const kontoType = erFarEllerMedmor ? StønadskontoType.Fedrekvote : StønadskontoType.Mødrekvote;\n        const forelder = erFarEllerMedmor ? Forelder.farMedmor : Forelder.mor;\n        const konto: TilgjengeligStønadskonto | undefined = tilgjengeligeStønadskontoer.find((k) =>\n            erFarEllerMedmor ? k.konto === StønadskontoType.Fedrekvote : k.konto === StønadskontoType.Mødrekvote,\n        );\n        let currentTomDate: Date = førsteUttaksdag;\n\n        if (konto !== undefined) {\n            const periodeMødrekvote: Periode = {\n                id: guid(),\n                type: Periodetype.Uttak,\n                forelder,\n                konto: kontoType,\n                tidsperiode: getTidsperiode(currentTomDate, konto.dager),\n                ønskerSamtidigUttak: false,\n                gradert: false,\n            };\n\n            currentTomDate = Uttaksdagen(periodeMødrekvote.tidsperiode.tom).neste();\n\n            if (\n                førsteUttaksdagNesteBarnsSak !== undefined &&\n                tidperiodeOverlapperDato(periodeMødrekvote.tidsperiode, førsteUttaksdagNesteBarnsSak)\n            ) {\n                const splittedePerioder = splittPeriodePåDato(periodeMødrekvote, førsteUttaksdagNesteBarnsSak);\n                splittedePerioder.forEach((periode) => perioder.push(periode));\n            } else {\n                perioder.push(periodeMødrekvote);\n            }\n        }\n\n        if (fellesperiodeukerMor !== undefined && fellesperiodeukerMor > 0) {\n            const periodeFellesperiode: Periode = {\n                id: guid(),\n                type: Periodetype.Uttak,\n                forelder,\n                konto: StønadskontoType.Fellesperiode,\n                tidsperiode: getTidsperiode(currentTomDate, fellesperiodeukerMor * 5),\n                ønskerSamtidigUttak: false,\n                gradert: false,\n            };\n            if (\n                førsteUttaksdagNesteBarnsSak !== undefined &&\n                tidperiodeOverlapperDato(periodeFellesperiode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n            ) {\n                const splittedePerioder = splittPeriodePåDato(periodeFellesperiode, førsteUttaksdagNesteBarnsSak);\n                splittedePerioder.forEach((periode) => perioder.push(periode));\n            } else {\n                perioder.push(periodeFellesperiode);\n            }\n        }\n\n        return perioder.sort(sorterPerioder);\n    } else {\n        return [];\n    }\n};\n\nconst deltUttakAdopsjonSøktSist = (\n    familiehendelsesdato: Date,\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    erFarEllerMedmor: boolean,\n    antallDagerFellesperiodeFarMedmor: number | undefined,\n    antallUkerFellesperiodeFarMedmor: number | undefined,\n    morSinSisteUttaksdag: Date,\n    farSinFørsteUttaksdag: Date,\n    begrunnelseForUtsettelse: UtsettelseÅrsakType | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n) => {\n    if (erFarEllerMedmor) {\n        // Oppfører seg identisk som fødselsscenario\n        return deltUttakFødselFarMedmor(\n            tilgjengeligeStønadskontoer,\n            antallDagerFellesperiodeFarMedmor,\n            antallUkerFellesperiodeFarMedmor,\n            morSinSisteUttaksdag,\n            farSinFørsteUttaksdag,\n            begrunnelseForUtsettelse,\n            familiehendelsesdato,\n            undefined,\n            undefined,\n            førsteUttaksdagNesteBarnsSak,\n            'adopsjon',\n        );\n    } else {\n        const forslag = deltUttakFødselFarMedmor(\n            tilgjengeligeStønadskontoer,\n            antallDagerFellesperiodeFarMedmor,\n            antallUkerFellesperiodeFarMedmor,\n            morSinSisteUttaksdag,\n            farSinFørsteUttaksdag,\n            begrunnelseForUtsettelse,\n            familiehendelsesdato,\n            undefined,\n            undefined,\n            førsteUttaksdagNesteBarnsSak,\n            'adopsjon',\n        );\n\n        const forslagGjortOmTilMor = forslag.map((periode) => {\n            if (\n                isUttaksperiode(periode) &&\n                (periode.konto === StønadskontoType.Fedrekvote || periode.konto === StønadskontoType.Fellesperiode)\n            ) {\n                if (periode.konto === StønadskontoType.Fedrekvote) {\n                    return {\n                        ...periode,\n                        konto: StønadskontoType.Mødrekvote,\n                        forelder: Forelder.mor,\n                    };\n                } else {\n                    return {\n                        ...periode,\n                        forelder: Forelder.mor,\n                    };\n                }\n            }\n\n            return periode;\n        });\n\n        return forslagGjortOmTilMor;\n    }\n};\n\nconst deltUttakAdopsjon = (\n    famDato: Date,\n    erFarEllerMedmor: boolean,\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    startdatoPermisjon: Date | undefined,\n    fellesperiodeukerMor: number | undefined,\n    harAnnenForelderSøktFP: boolean | undefined,\n    antallDagerFellesperiodeFarMedmor: number | undefined,\n    antallUkerFellesperiodeFarMedmor: number | undefined,\n    morSinSisteUttaksdag: Date | undefined,\n    farSinFørsteUttaksdag: Date | undefined,\n    begrunnelseForUtsettelse: UtsettelseÅrsakType | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n) => {\n    if (!harAnnenForelderSøktFP) {\n        return deltUttakAdopsjonSøktFørst(\n            famDato,\n            erFarEllerMedmor,\n            tilgjengeligeStønadskontoer,\n            startdatoPermisjon,\n            fellesperiodeukerMor,\n            harAnnenForelderSøktFP,\n            førsteUttaksdagNesteBarnsSak,\n        );\n    } else {\n        return deltUttakAdopsjonSøktSist(\n            famDato,\n            tilgjengeligeStønadskontoer,\n            erFarEllerMedmor,\n            antallDagerFellesperiodeFarMedmor,\n            antallUkerFellesperiodeFarMedmor,\n            morSinSisteUttaksdag!,\n            farSinFørsteUttaksdag!,\n            begrunnelseForUtsettelse,\n            førsteUttaksdagNesteBarnsSak,\n        );\n    }\n};\n\nconst deltUttakFødselMor = (\n    famDato: Date,\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    ønsketStartdatoPermisjon: Date | undefined,\n    fellesperiodeukerMor: number | undefined,\n): Periode[] => {\n    const førsteUttaksdag = Uttaksdagen(famDato).denneEllerNeste();\n    const perioder: Periode[] = [];\n    const skalHaForeldrePengerFørFødsel = ønsketStartdatoPermisjon ? true : false;\n    const fpFørFødselKonto: TilgjengeligStønadskonto | undefined = tilgjengeligeStønadskontoer.find(\n        (konto) => konto.konto === StønadskontoType.ForeldrepengerFørFødsel,\n    );\n    const mkKonto: TilgjengeligStønadskonto | undefined = tilgjengeligeStønadskontoer.find(\n        (konto) => konto.konto === StønadskontoType.Mødrekvote,\n    );\n    let currentTomDate: Date = førsteUttaksdag;\n    if (fpFørFødselKonto !== undefined && skalHaForeldrePengerFørFødsel && ønsketStartdatoPermisjon) {\n        const startdatoPermisjon = Uttaksdagen(ønsketStartdatoPermisjon).denneEllerNeste();\n        const dagerFørFødsel = Uttaksdagen(startdatoPermisjon).getUttaksdagerFremTilDato(currentTomDate);\n        const merEnnTreUkerPermisjonFørFødsel = dagerFørFødsel > 15;\n        const startdatoFpFørFødsel = Uttaksdagen(førsteUttaksdag).trekkFra(\n            merEnnTreUkerPermisjonFørFødsel ? 15 : dagerFørFødsel,\n        );\n\n        if (merEnnTreUkerPermisjonFørFødsel) {\n            const ekstraPeriodeFørFødsel: Periode = {\n                id: guid(),\n                type: Periodetype.Uttak,\n                forelder: Forelder.mor,\n                konto: StønadskontoType.Fellesperiode,\n                tidsperiode: getTidsperiode(startdatoPermisjon, dagerFørFødsel - 15),\n                vedlegg: [],\n            };\n\n            perioder.push(ekstraPeriodeFørFødsel);\n        }\n\n        const periodeFørFødsel: Periode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.mor,\n            konto: StønadskontoType.ForeldrepengerFørFødsel,\n            tidsperiode: {\n                fom: startdatoFpFørFødsel,\n                tom: Uttaksdagen(currentTomDate).forrige(),\n            },\n        };\n\n        perioder.push(periodeFørFødsel);\n    } else {\n        const periodeFørFødsel: Periode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.mor,\n            konto: StønadskontoType.ForeldrepengerFørFødsel,\n            skalIkkeHaUttakFørTermin: true,\n            tidsperiode: {} as any,\n            vedlegg: [],\n        };\n        perioder.push(periodeFørFødsel);\n    }\n\n    if (mkKonto !== undefined) {\n        const periodeMødrekvote: Periode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.mor,\n            konto: StønadskontoType.Mødrekvote,\n            tidsperiode: getTidsperiode(currentTomDate, mkKonto.dager),\n            ønskerSamtidigUttak: false,\n            gradert: false,\n        };\n\n        currentTomDate = Uttaksdagen(periodeMødrekvote.tidsperiode.tom).neste();\n\n        perioder.push(periodeMødrekvote);\n    }\n\n    if (fellesperiodeukerMor !== undefined && fellesperiodeukerMor > 0) {\n        const ekstraPermisjonFørFødsel = perioder.find(\n            (p) => isUttaksperiode(p) && p.konto === StønadskontoType.Fellesperiode,\n        );\n\n        let trekkEkstraPermisjonDager = 0;\n        if (ekstraPermisjonFørFødsel) {\n            trekkEkstraPermisjonDager = Tidsperioden(ekstraPermisjonFørFødsel.tidsperiode).getAntallUttaksdager();\n        }\n\n        if (fellesperiodeukerMor * 5 - trekkEkstraPermisjonDager > 0) {\n            const periodeFellesperiodeMor: Periode = {\n                id: guid(),\n                type: Periodetype.Uttak,\n                forelder: Forelder.mor,\n                konto: StønadskontoType.Fellesperiode,\n                tidsperiode: getTidsperiode(currentTomDate, fellesperiodeukerMor * 5 - trekkEkstraPermisjonDager),\n                ønskerSamtidigUttak: false,\n                gradert: false,\n            };\n\n            perioder.push(periodeFellesperiodeMor);\n        }\n    }\n\n    return perioder.sort(sorterPerioder);\n};\n\nconst deltUttakFødselFarMedmor = (\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    antallDagerFellesperiodeFarMedmor: number | undefined,\n    antallUkerFellesperiodeFarMedmor: number | undefined,\n    morSinSisteUttaksdag: Date,\n    farSinFørsteUttaksdag: Date,\n    begrunnelseForUtsettelse: UtsettelseÅrsakType | undefined,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    morHarRettPåForeldrepengerIEØS: boolean | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n    situasjon = 'fødsel',\n): Periode[] => {\n    if (\n        !andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n        dateIsSameOrAfter(morSinSisteUttaksdag, farSinFørsteUttaksdag) &&\n        !morHarRettPåForeldrepengerIEØS\n    ) {\n        return [];\n    }\n\n    const perioder: Periode[] = [];\n    const startDatoUttak = Uttaksdagen(farSinFørsteUttaksdag).denneEllerNeste();\n    let sisteUttaksDag = Uttaksdagen(farSinFørsteUttaksdag).denneEllerNeste();\n    const fedrekvoteKonto: TilgjengeligStønadskonto | undefined = tilgjengeligeStønadskontoer.find(\n        (konto) => konto.konto === StønadskontoType.Fedrekvote,\n    );\n    const fellesKonto: TilgjengeligStønadskonto | undefined = tilgjengeligeStønadskontoer.find(\n        (konto) => konto.konto === StønadskontoType.Fellesperiode,\n    );\n\n    const morHarRett = true;\n\n    if (\n        begrunnelseForUtsettelse &&\n        morSinSisteUttaksdag !== undefined &&\n        skalFarUtsetteEtterMorSinSisteUttaksdag(farSinFørsteUttaksdag, morSinSisteUttaksdag)\n    ) {\n        perioder.push({\n            id: guid(),\n            årsak: begrunnelseForUtsettelse,\n            type: Periodetype.Utsettelse,\n            forelder: Forelder.farMedmor,\n            erArbeidstaker: false, // TODO\n            tidsperiode: {\n                fom: Uttaksdagen(morSinSisteUttaksdag).neste(),\n                tom: Uttaksdagen(farSinFørsteUttaksdag).forrige(),\n            },\n        });\n    }\n\n    if (fedrekvoteKonto !== undefined) {\n        const erPeriodeWLBRundtFødsel =\n            situasjon === 'fødsel' &&\n            andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n            starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel(\n                getTidsperiode(startDatoUttak, 1),\n                familiehendelsesdato,\n                termindato,\n            );\n\n        const lengdePåForeslåttUttak = erPeriodeWLBRundtFødsel\n            ? getLengdePåForeslåttWLBUttakFarMedmor(familiehendelsesdato, startDatoUttak)\n            : fedrekvoteKonto.dager;\n\n        const fedrekvotePeriode: Periode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.farMedmor,\n            konto: StønadskontoType.Fedrekvote,\n            tidsperiode: getTidsperiode(startDatoUttak, lengdePåForeslåttUttak),\n            ønskerSamtidigUttak: erPeriodeWLBRundtFødsel,\n            samtidigUttakProsent: erPeriodeWLBRundtFødsel ? '100' : undefined,\n        };\n\n        sisteUttaksDag = Uttaksdagen(fedrekvotePeriode.tidsperiode.tom).neste();\n\n        if (\n            farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato(\n                fedrekvotePeriode,\n                familiehendelsesdato,\n                morHarRett,\n                termindato,\n            )\n        ) {\n            const fedrekvotePerioder = splittUttaksperiodePåFamiliehendelsesdato(\n                fedrekvotePeriode,\n                familiehendelsesdato,\n            );\n            fedrekvotePerioder.forEach((periode) => perioder.push(periode));\n        } else if (\n            førsteUttaksdagNesteBarnsSak !== undefined &&\n            tidperiodeOverlapperDato(fedrekvotePeriode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n        ) {\n            const fedrekvotePerioder = splittPeriodePåDato(fedrekvotePeriode, førsteUttaksdagNesteBarnsSak);\n            fedrekvotePerioder.forEach((periode) => perioder.push(periode));\n        } else {\n            perioder.push(fedrekvotePeriode);\n        }\n    }\n\n    if (fellesKonto !== undefined) {\n        let antallDagerFellesperiode = 0;\n\n        if (antallUkerFellesperiodeFarMedmor !== undefined && antallUkerFellesperiodeFarMedmor !== 0) {\n            antallDagerFellesperiode = 5 * antallUkerFellesperiodeFarMedmor;\n        }\n\n        if (antallDagerFellesperiodeFarMedmor !== undefined && antallDagerFellesperiodeFarMedmor !== 0) {\n            antallDagerFellesperiode = antallDagerFellesperiode + antallDagerFellesperiodeFarMedmor;\n        }\n\n        if (antallDagerFellesperiode > 0) {\n            const fellesPeriode: Periode = {\n                id: guid(),\n                type: Periodetype.Uttak,\n                forelder: Forelder.farMedmor,\n                konto: StønadskontoType.Fellesperiode,\n                tidsperiode: getTidsperiode(sisteUttaksDag, antallDagerFellesperiode),\n                ønskerSamtidigUttak: false,\n                gradert: false,\n            };\n\n            perioder.push(fellesPeriode);\n        }\n    }\n\n    return perioder;\n};\n\nconst deltUttakFødsel = (\n    famDato: Date,\n    erFarEllerMedmor: boolean,\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    startdatoPermisjon: Date | undefined,\n    fellesperiodeukerMor: number | undefined,\n    antallDagerFellesperiodeFarMedmor: number | undefined,\n    antallUkerFellesperiodeFarMedmor: number | undefined,\n    morSinSisteUttaksdag: Date | undefined,\n    farSinFørsteUttaksdag: Date | undefined,\n    begrunnelseForUtsettelse: UtsettelseÅrsakType | undefined,\n    annenForelderHarRettPåForeldrepengerIEØS: boolean | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n    termindato?: Date | undefined,\n) => {\n    if (!erFarEllerMedmor) {\n        return deltUttakFødselMor(famDato, tilgjengeligeStønadskontoer, startdatoPermisjon, fellesperiodeukerMor);\n    } else {\n        const tilgjengeligeStønadskontoerUtenFPP = tilgjengeligeStønadskontoer.filter(\n            (konto) => konto.konto !== StønadskontoType.ForeldrepengerFørFødsel,\n        );\n\n        return deltUttakFødselFarMedmor(\n            tilgjengeligeStønadskontoerUtenFPP,\n            antallDagerFellesperiodeFarMedmor,\n            antallUkerFellesperiodeFarMedmor,\n            morSinSisteUttaksdag!,\n            farSinFørsteUttaksdag!,\n            begrunnelseForUtsettelse,\n            famDato,\n            termindato,\n            annenForelderHarRettPåForeldrepengerIEØS,\n            førsteUttaksdagNesteBarnsSak,\n        );\n    }\n};\n\nexport interface DeltUttakParams {\n    situasjon: Situasjon;\n    famDato: Date;\n    erFarEllerMedmor: boolean;\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[];\n    startdatoPermisjon: Date | undefined;\n    fellesperiodeukerMor: number | undefined;\n    harAnnenForelderSøktFP: boolean | undefined;\n    antallDagerFellesperiodeFarMedmor: number | undefined;\n    antallUkerFellesperiodeFarMedmor: number | undefined;\n    morSinSisteUttaksdag: Date | undefined;\n    farSinFørsteUttaksdag: Date | undefined;\n    begrunnelseForUtsettelse: UtsettelseÅrsakType | undefined;\n    førsteUttaksdagNesteBarnsSak: Date | undefined;\n    annenForelderHarRettPåForeldrepengerIEØS?: boolean;\n    termindato?: Date;\n}\n\nexport const deltUttak = (params: DeltUttakParams) => {\n    if (params.situasjon === 'adopsjon') {\n        return deltUttakAdopsjon(\n            params.famDato,\n            params.erFarEllerMedmor,\n            params.tilgjengeligeStønadskontoer,\n            params.startdatoPermisjon,\n            params.fellesperiodeukerMor,\n            params.harAnnenForelderSøktFP,\n            params.antallDagerFellesperiodeFarMedmor,\n            params.antallUkerFellesperiodeFarMedmor,\n            params.morSinSisteUttaksdag,\n            params.farSinFørsteUttaksdag,\n            params.begrunnelseForUtsettelse,\n            params.førsteUttaksdagNesteBarnsSak,\n        );\n    }\n\n    if (params.situasjon === 'fødsel') {\n        return deltUttakFødsel(\n            params.famDato,\n            params.erFarEllerMedmor,\n            params.tilgjengeligeStønadskontoer,\n            params.startdatoPermisjon,\n            params.fellesperiodeukerMor,\n            params.antallDagerFellesperiodeFarMedmor,\n            params.antallUkerFellesperiodeFarMedmor,\n            params.morSinSisteUttaksdag,\n            params.farSinFørsteUttaksdag,\n            params.begrunnelseForUtsettelse,\n            params.annenForelderHarRettPåForeldrepengerIEØS,\n            params.førsteUttaksdagNesteBarnsSak,\n            params.termindato,\n        );\n    }\n\n    return [];\n};\n","import {\n    Forelder,\n    Periode,\n    Periodetype,\n    Situasjon,\n    StønadskontoType,\n    Tidsperioden,\n    TilgjengeligStønadskonto,\n    Uttaksdagen,\n    Uttaksperiode,\n    andreAugust2022ReglerGjelder,\n    farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato,\n    getTidsperiode,\n    guid,\n    isUttaksperiode,\n    sorterPerioder,\n    tidperiodeOverlapperDato,\n} from '@navikt/fp-common';\nimport {\n    splittPeriodePåDato,\n    splittUttaksperiodePåFamiliehendelsesdato,\n} from '@navikt/uttaksplan/src/builder/leggTilPeriode';\n\nconst ikkeDeltUttakAdopsjonFarMedmor = (\n    famDato: Date,\n    foreldrepengerKonto: TilgjengeligStønadskonto,\n    startdatoPermisjon: Date | undefined,\n    erMorUfør: boolean | undefined,\n    aktivitetsfriKvote: TilgjengeligStønadskonto | undefined,\n    bareFarMedmorHarRett: boolean,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n) => {\n    const førsteUttaksdag = Uttaksdagen(startdatoPermisjon || famDato).denneEllerNeste();\n    const perioder: Uttaksperiode[] = [];\n\n    if (erMorUfør !== true) {\n        let startDatoNestePeriode = førsteUttaksdag;\n        if (andreAugust2022ReglerGjelder(famDato) && !!bareFarMedmorHarRett) {\n            const aktivitetsFriPeriode: Uttaksperiode = {\n                id: guid(),\n                type: Periodetype.Uttak,\n                forelder: Forelder.farMedmor,\n                konto: StønadskontoType.AktivitetsfriKvote,\n                tidsperiode: getTidsperiode(førsteUttaksdag, aktivitetsfriKvote!.dager),\n                vedlegg: [],\n                gradert: false,\n                harIkkeAktivitetskrav: true,\n            };\n            if (\n                førsteUttaksdagNesteBarnsSak !== undefined &&\n                tidperiodeOverlapperDato(aktivitetsFriPeriode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n            ) {\n                const splittetPeriode = splittPeriodePåDato(\n                    aktivitetsFriPeriode,\n                    førsteUttaksdagNesteBarnsSak,\n                ) as Uttaksperiode[];\n                splittetPeriode.forEach((sp) => perioder.push(sp));\n            } else {\n                perioder.push(aktivitetsFriPeriode);\n            }\n            startDatoNestePeriode = Uttaksdagen(aktivitetsFriPeriode.tidsperiode.tom).neste();\n        }\n        const periode: Uttaksperiode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.farMedmor,\n            konto: foreldrepengerKonto.konto,\n            tidsperiode: getTidsperiode(startDatoNestePeriode, foreldrepengerKonto.dager),\n            vedlegg: [],\n            gradert: false,\n        };\n        if (\n            førsteUttaksdagNesteBarnsSak !== undefined &&\n            tidperiodeOverlapperDato(periode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n        ) {\n            const splittetPeriode = splittPeriodePåDato(periode, førsteUttaksdagNesteBarnsSak) as Uttaksperiode[];\n            splittetPeriode.forEach((sp) => perioder.push(sp));\n        } else {\n            perioder.push(periode);\n        }\n    } else {\n        const aktivitetsFriPeriode: Uttaksperiode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.farMedmor,\n            konto: StønadskontoType.AktivitetsfriKvote,\n            tidsperiode: getTidsperiode(førsteUttaksdag, aktivitetsfriKvote!.dager),\n            vedlegg: [],\n            gradert: false,\n            harIkkeAktivitetskrav: true,\n        };\n\n        if (\n            førsteUttaksdagNesteBarnsSak !== undefined &&\n            tidperiodeOverlapperDato(aktivitetsFriPeriode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n        ) {\n            const splittetPeriode = splittPeriodePåDato(\n                aktivitetsFriPeriode,\n                førsteUttaksdagNesteBarnsSak,\n            ) as Uttaksperiode[];\n            splittetPeriode.forEach((sp) => perioder.push(sp));\n        } else {\n            perioder.push(aktivitetsFriPeriode);\n        }\n\n        const aktivitetskravPeriode: Uttaksperiode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.farMedmor,\n            konto: StønadskontoType.Foreldrepenger,\n            tidsperiode: getTidsperiode(\n                Uttaksdagen(aktivitetsFriPeriode.tidsperiode.tom).neste(),\n                foreldrepengerKonto.dager,\n            ),\n            vedlegg: [],\n            gradert: false,\n        };\n\n        if (\n            førsteUttaksdagNesteBarnsSak !== undefined &&\n            tidperiodeOverlapperDato(aktivitetskravPeriode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n        ) {\n            const splittetPeriode = splittPeriodePåDato(\n                aktivitetskravPeriode,\n                førsteUttaksdagNesteBarnsSak,\n            ) as Uttaksperiode[];\n            splittetPeriode.forEach((sp) => perioder.push(sp));\n        } else {\n            perioder.push(aktivitetskravPeriode);\n        }\n    }\n\n    return perioder;\n};\n\nconst ikkeDeltUttakAdopsjonMor = (\n    famDato: Date,\n    foreldrepengerKonto: TilgjengeligStønadskonto,\n    startdatoPermisjon: Date | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n) => {\n    const førsteUttaksdag = Uttaksdagen(startdatoPermisjon || famDato).denneEllerNeste();\n    const periode: Uttaksperiode = {\n        id: guid(),\n        type: Periodetype.Uttak,\n        forelder: Forelder.mor,\n        konto: foreldrepengerKonto.konto,\n        tidsperiode: getTidsperiode(førsteUttaksdag, foreldrepengerKonto.dager),\n        vedlegg: [],\n        gradert: false,\n    };\n    if (\n        førsteUttaksdagNesteBarnsSak !== undefined &&\n        tidperiodeOverlapperDato(periode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n    ) {\n        return splittPeriodePåDato(periode, førsteUttaksdagNesteBarnsSak);\n    }\n    return [periode];\n};\n\nconst ikkeDeltUttakAdopsjon = (\n    famDato: Date,\n    erFarEllerMedmor: boolean,\n    foreldrepengerKonto: TilgjengeligStønadskonto,\n    startdatoPermisjon: Date | undefined,\n    erMorUfør: boolean | undefined,\n    aktivitetsfriKvote: TilgjengeligStønadskonto | undefined,\n    bareFarMedmorHarRett: boolean,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n) => {\n    if (!erFarEllerMedmor) {\n        return ikkeDeltUttakAdopsjonMor(famDato, foreldrepengerKonto, startdatoPermisjon, førsteUttaksdagNesteBarnsSak);\n    } else {\n        return ikkeDeltUttakAdopsjonFarMedmor(\n            famDato,\n            foreldrepengerKonto,\n            startdatoPermisjon,\n            erMorUfør,\n            aktivitetsfriKvote,\n            bareFarMedmorHarRett,\n            førsteUttaksdagNesteBarnsSak,\n        );\n    }\n};\n\nconst ikkeDeltUttakFødselMor = (\n    famDato: Date,\n    foreldrepengerKonto: TilgjengeligStønadskonto,\n    startdatoPermisjon: Date | undefined,\n    foreldrePengerFørFødselKonto: TilgjengeligStønadskonto,\n) => {\n    const førsteUttaksdag = Uttaksdagen(famDato).denneEllerNeste();\n    const perioder: Periode[] = [];\n    const skalHaForeldrePengerFørFødsel = startdatoPermisjon ? true : false;\n\n    if (foreldrePengerFørFødselKonto !== undefined && skalHaForeldrePengerFørFødsel && startdatoPermisjon) {\n        const dagerFørFødsel = Uttaksdagen(startdatoPermisjon).getUttaksdagerFremTilDato(førsteUttaksdag);\n        const merEnnTreUkerPermisjonFørFødsel = dagerFørFødsel > 15;\n        const startdatoFpFørFødsel = Uttaksdagen(førsteUttaksdag).trekkFra(\n            merEnnTreUkerPermisjonFørFødsel ? 15 : dagerFørFødsel,\n        );\n\n        if (merEnnTreUkerPermisjonFørFødsel) {\n            const ekstraPeriodeFørFødsel: Periode = {\n                id: guid(),\n                type: Periodetype.Uttak,\n                forelder: Forelder.mor,\n                konto: StønadskontoType.Foreldrepenger,\n                tidsperiode: getTidsperiode(startdatoPermisjon, dagerFørFødsel - 15),\n                vedlegg: [],\n            };\n\n            perioder.push(ekstraPeriodeFørFødsel);\n        }\n\n        const periodeFørFødsel: Periode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.mor,\n            konto: foreldrePengerFørFødselKonto.konto,\n            tidsperiode: {\n                fom: startdatoFpFørFødsel,\n                tom: Uttaksdagen(førsteUttaksdag).forrige(),\n            },\n            vedlegg: [],\n        };\n\n        perioder.push(periodeFørFødsel);\n    } else {\n        const periodeFørFødsel: Periode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.mor,\n            konto: StønadskontoType.ForeldrepengerFørFødsel,\n            skalIkkeHaUttakFørTermin: true,\n            tidsperiode: {} as any,\n            vedlegg: [],\n        };\n\n        perioder.push(periodeFørFødsel);\n    }\n\n    const ekstraPermisjonFørFødsel = perioder.find(\n        (p) => isUttaksperiode(p) && p.konto === StønadskontoType.Foreldrepenger,\n    );\n\n    const antallDagerIForeldrepenger = ekstraPermisjonFørFødsel\n        ? getTidsperiode(\n              førsteUttaksdag,\n              foreldrepengerKonto.dager - Tidsperioden(ekstraPermisjonFørFødsel.tidsperiode).getAntallUttaksdager(),\n          )\n        : getTidsperiode(førsteUttaksdag, foreldrepengerKonto.dager);\n\n    const foreldrepengerPeriode: Periode = {\n        id: guid(),\n        type: Periodetype.Uttak,\n        forelder: Forelder.mor,\n        konto: foreldrepengerKonto.konto,\n        tidsperiode: antallDagerIForeldrepenger,\n        vedlegg: [],\n        gradert: false,\n    };\n\n    perioder.push(foreldrepengerPeriode);\n\n    return perioder.sort(sorterPerioder);\n};\n\nconst ikkeDeltUttakFødselFarMedmor = (\n    famDato: Date,\n    foreldrepengerKonto: TilgjengeligStønadskonto,\n    startdatoPermisjon: Date | undefined,\n    erMorUfør: boolean | undefined,\n    aktivitetsfriKvote: TilgjengeligStønadskonto | undefined,\n    bareFarMedmorHarRett: boolean,\n    termindato: Date | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n) => {\n    const startDato = Uttaksdagen(startdatoPermisjon || famDato).denneEllerNeste();\n    const morHarRett = false;\n    const perioder: Periode[] = [];\n\n    if (erMorUfør !== true) {\n        let startDatoNestePeriode = startDato;\n        if (andreAugust2022ReglerGjelder(famDato) && !!bareFarMedmorHarRett) {\n            const aktivitetsFriPeriode: Uttaksperiode = {\n                id: guid(),\n                type: Periodetype.Uttak,\n                forelder: Forelder.farMedmor,\n                konto: StønadskontoType.AktivitetsfriKvote,\n                tidsperiode: getTidsperiode(startDato, aktivitetsfriKvote!.dager),\n                vedlegg: [],\n                harIkkeAktivitetskrav: true,\n            };\n            if (\n                farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato(\n                    aktivitetsFriPeriode,\n                    famDato,\n                    morHarRett,\n                    termindato,\n                )\n            ) {\n                const aktivitetsFriePerioder = splittUttaksperiodePåFamiliehendelsesdato(aktivitetsFriPeriode, famDato);\n                aktivitetsFriePerioder.forEach((periode) => perioder.push(periode));\n            } else if (\n                førsteUttaksdagNesteBarnsSak !== undefined &&\n                tidperiodeOverlapperDato(aktivitetsFriPeriode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n            ) {\n                const aktivitetsFriePerioder = splittPeriodePåDato(aktivitetsFriPeriode, førsteUttaksdagNesteBarnsSak);\n                aktivitetsFriePerioder.forEach((periode) => perioder.push(periode));\n            } else {\n                perioder.push(aktivitetsFriPeriode);\n            }\n            startDatoNestePeriode = Uttaksdagen(aktivitetsFriPeriode.tidsperiode.tom).neste();\n        }\n\n        const periode: Uttaksperiode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.farMedmor,\n            konto: foreldrepengerKonto.konto,\n            tidsperiode: getTidsperiode(startDatoNestePeriode, foreldrepengerKonto.dager),\n            vedlegg: [],\n            gradert: false,\n        };\n\n        perioder.push(periode);\n    } else {\n        const aktivitetsFriPeriode: Uttaksperiode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.farMedmor,\n            konto: StønadskontoType.AktivitetsfriKvote,\n            tidsperiode: getTidsperiode(startDato, aktivitetsfriKvote!.dager),\n            vedlegg: [],\n            gradert: false,\n            harIkkeAktivitetskrav: true,\n        };\n\n        if (\n            farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato(\n                aktivitetsFriPeriode,\n                famDato,\n                morHarRett,\n                termindato,\n            )\n        ) {\n            const aktivitetsFriePerioder = splittUttaksperiodePåFamiliehendelsesdato(aktivitetsFriPeriode, famDato);\n            aktivitetsFriePerioder.forEach((periode) => perioder.push(periode));\n        } else {\n            perioder.push(aktivitetsFriPeriode);\n        }\n\n        const aktivitetskravPeriode: Uttaksperiode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.farMedmor,\n            konto: StønadskontoType.Foreldrepenger,\n            tidsperiode: getTidsperiode(\n                Uttaksdagen(aktivitetsFriPeriode.tidsperiode.tom).neste(),\n                foreldrepengerKonto.dager,\n            ),\n            vedlegg: [],\n            gradert: false,\n        };\n        perioder.push(aktivitetskravPeriode);\n    }\n\n    return perioder.sort(sorterPerioder);\n};\n\nconst ikkeDeltUttakFødsel = (\n    famDato: Date,\n    erFarEllerMedmor: boolean,\n    foreldrepengerKonto: TilgjengeligStønadskonto,\n    startdatoPermisjon: Date | undefined,\n    foreldrePengerFørFødselKonto: TilgjengeligStønadskonto | undefined,\n    erMorUfør: boolean | undefined,\n    aktivitetsfriKvote: TilgjengeligStønadskonto | undefined,\n    bareFarMedmorHarRett: boolean,\n    termindato: Date | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n) => {\n    if (!erFarEllerMedmor) {\n        return ikkeDeltUttakFødselMor(famDato, foreldrepengerKonto, startdatoPermisjon, foreldrePengerFørFødselKonto!);\n    } else {\n        return ikkeDeltUttakFødselFarMedmor(\n            famDato,\n            foreldrepengerKonto,\n            startdatoPermisjon,\n            erMorUfør,\n            aktivitetsfriKvote,\n            bareFarMedmorHarRett,\n            termindato,\n            førsteUttaksdagNesteBarnsSak,\n        );\n    }\n};\n\nexport const ikkeDeltUttak = (\n    situasjon: Situasjon,\n    famDato: Date,\n    erFarEllerMedmor: boolean,\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    startdatoPermisjon: Date | undefined,\n    erMorUfør: boolean | undefined,\n    bareFarMedmorHarRett: boolean,\n    termindato: Date | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n) => {\n    const foreldrepengerKonto = tilgjengeligeStønadskontoer.find(\n        (konto) => konto.konto === StønadskontoType.Foreldrepenger,\n    );\n    const foreldrePengerFørFødselKonto = tilgjengeligeStønadskontoer.find(\n        (konto) => konto.konto === StønadskontoType.ForeldrepengerFørFødsel,\n    );\n    const aktivitetsfriKvote = tilgjengeligeStønadskontoer.find(\n        (konto) => konto.konto === StønadskontoType.AktivitetsfriKvote,\n    );\n\n    if (situasjon === 'adopsjon') {\n        return ikkeDeltUttakAdopsjon(\n            famDato,\n            erFarEllerMedmor,\n            foreldrepengerKonto!,\n            startdatoPermisjon,\n            erMorUfør,\n            aktivitetsfriKvote,\n            bareFarMedmorHarRett,\n            førsteUttaksdagNesteBarnsSak,\n        );\n    }\n\n    if (situasjon === 'fødsel') {\n        return ikkeDeltUttakFødsel(\n            famDato,\n            erFarEllerMedmor,\n            foreldrepengerKonto!,\n            startdatoPermisjon,\n            foreldrePengerFørFødselKonto,\n            erMorUfør,\n            aktivitetsfriKvote,\n            bareFarMedmorHarRett,\n            termindato,\n            førsteUttaksdagNesteBarnsSak,\n        );\n    }\n\n    return [];\n};\n","import { UttaksplanSkjemadata } from 'app/types/UttaksplanSkjemaData';\nimport { deltUttak } from './deltUttak';\nimport { ikkeDeltUttak } from './ikkeDeltUttak';\nimport { ISOStringToDate, Periode, Situasjon, TilgjengeligStønadskonto } from '@navikt/fp-common';\nimport { finnOgSettInnHull } from '@navikt/uttaksplan/src/builder/uttaksplanbuilderUtils';\n\nexport interface LagUttaksplanParams {\n    situasjon: Situasjon;\n    familiehendelsesdato: Date;\n    erDeltUttak: boolean;\n    erEndringssøknad: boolean;\n    søkerErFarEllerMedmor: boolean;\n    annenForelderErUfør: boolean;\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[];\n    uttaksplanSkjema: UttaksplanSkjemadata;\n    erEnkelEndringssøknad: boolean;\n    førsteUttaksdagEtterSeksUker: Date;\n    søkerHarMidlertidigOmsorg: boolean;\n    bareFarMedmorHarRett: boolean;\n    harAktivitetskravIPeriodeUtenUttak: boolean;\n    termindato: Date | undefined;\n    førsteUttaksdagNesteBarnsSak: Date | undefined;\n    annenForelderHarRettPåForeldrepengerIEØS?: boolean;\n}\n\nexport const lagUttaksplan = (params: LagUttaksplanParams): Periode[] => {\n    const {\n        situasjon,\n        familiehendelsesdato,\n        erDeltUttak,\n        erEndringssøknad,\n        søkerErFarEllerMedmor,\n        annenForelderErUfør,\n        tilgjengeligeStønadskontoer,\n        uttaksplanSkjema,\n        bareFarMedmorHarRett,\n        termindato,\n        harAktivitetskravIPeriodeUtenUttak,\n        annenForelderHarRettPåForeldrepengerIEØS,\n        førsteUttaksdagNesteBarnsSak,\n    } = params;\n\n    if (uttaksplanSkjema.ønskerIkkeFlerePerioder || erEndringssøknad) {\n        return [];\n    }\n    const erAdopsjon = situasjon === 'adopsjon';\n\n    const {\n        harAnnenForelderSøktFP,\n        startdatoPermisjon,\n        fellesperiodeukerMor,\n        antallDagerFellesperiodeFarMedmor,\n        antallUkerFellesperiodeFarMedmor,\n        morSinSisteUttaksdag,\n        farSinFørsteUttaksdag,\n        begrunnelseForUtsettelse,\n    } = uttaksplanSkjema;\n\n    const morSinSisteUttaksdagDate = ISOStringToDate(morSinSisteUttaksdag);\n    if (familiehendelsesdato) {\n        if (erDeltUttak) {\n            const forslag = deltUttak({\n                situasjon,\n                famDato: familiehendelsesdato,\n                erFarEllerMedmor: søkerErFarEllerMedmor,\n                tilgjengeligeStønadskontoer,\n                startdatoPermisjon: ISOStringToDate(startdatoPermisjon),\n                fellesperiodeukerMor,\n                harAnnenForelderSøktFP,\n                antallDagerFellesperiodeFarMedmor,\n                antallUkerFellesperiodeFarMedmor,\n                morSinSisteUttaksdag: morSinSisteUttaksdagDate,\n                farSinFørsteUttaksdag: ISOStringToDate(farSinFørsteUttaksdag),\n                begrunnelseForUtsettelse,\n                annenForelderHarRettPåForeldrepengerIEØS,\n                termindato,\n                førsteUttaksdagNesteBarnsSak,\n            });\n\n            return finnOgSettInnHull(\n                forslag,\n                harAktivitetskravIPeriodeUtenUttak,\n                familiehendelsesdato,\n                erAdopsjon,\n                false,\n                søkerErFarEllerMedmor,\n                førsteUttaksdagNesteBarnsSak,\n            );\n        } else {\n            const forslag = ikkeDeltUttak(\n                situasjon,\n                familiehendelsesdato,\n                søkerErFarEllerMedmor,\n                tilgjengeligeStønadskontoer,\n                ISOStringToDate(startdatoPermisjon),\n                annenForelderErUfør,\n                bareFarMedmorHarRett,\n                termindato,\n                førsteUttaksdagNesteBarnsSak,\n            );\n\n            return finnOgSettInnHull(\n                forslag,\n                harAktivitetskravIPeriodeUtenUttak,\n                familiehendelsesdato,\n                erAdopsjon,\n                søkerErFarEllerMedmor,\n                søkerErFarEllerMedmor,\n                førsteUttaksdagNesteBarnsSak,\n            );\n        }\n    }\n\n    return [];\n};\n","import { FunctionComponent } from 'react';\nimport {\n    Block,\n    EksisterendeSak,\n    Forelder,\n    ISOStringToDate,\n    StepButtonWrapper,\n    Uttaksdagen,\n    andreAugust2022ReglerGjelder,\n    getErMorUfør,\n    getNavnGenitivEierform,\n    intlUtils,\n    isAnnenForelderOppgitt,\n    isFarEllerMedmor,\n} from '@navikt/fp-common';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport {\n    FarMedmorFødselBeggeHarRettFormComponents,\n    FarMedmorFødselBeggeHarRettFormData,\n    FarMedmorFødselBeggeHarRettFormField,\n} from './farMedmorFødselBeggeHarRettFormConfig';\nimport {\n    getInitialFarMedmorFødselBeggeHarRettValues,\n    mapFarMedmorFødselBeggeHarRettToState,\n} from './farMedmorFødselBeggeHarRettUtils';\nimport TilgjengeligeDagerGraf from '../../tilgjengeligeDagerGraf/TilgjengeligeDagerGraf';\nimport { getTilgjengeligeDager } from '../../tilgjengeligeDagerGraf/tilgjengeligeDagerUtils';\nimport { TilgjengeligeStønadskontoerDTO } from 'app/types/TilgjengeligeStønadskontoerDTO';\nimport { getValgtStønadskontoFor80Og100Prosent } from 'app/utils/stønadskontoUtils';\nimport { getFamiliehendelsedato, getTermindato } from 'app/utils/barnUtils';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport farMedmorFødselBeggeHarRettQuestionsConfig, {\n    FarMedmorFødselBeggeHarRettFormPayload,\n} from './farMedmorFødselBeggeHarRettQuestionsConfig';\nimport MorsSisteDagSpørsmål from '../spørsmål/MorsSisteDagSpørsmål';\nimport FarMedmorsFørsteDag from '../spørsmål/FarMedmorsFørsteDag';\nimport AntallUkerOgDagerFellesperiodeFarMedmorSpørsmål from '../spørsmål/AntallUkerOgDagerFellesperiodeFarMedmorSpørsmål';\nimport DekningsgradSpørsmål from '../spørsmål/DekningsgradSpørsmål';\nimport actionCreator from 'app/context/action/actionCreator';\nimport SøknadRoutes from 'app/routes/routes';\nimport useOnValidSubmit from 'app/utils/hooks/useOnValidSubmit';\nimport useUttaksplanInfo from 'app/utils/hooks/useUttaksplanInfo';\nimport { FarMedmorFødselBeggeHarRettUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport { getDekningsgradFromString } from 'app/utils/getDekningsgradFromString';\nimport { lagUttaksplan } from 'app/utils/uttaksplan/lagUttaksplan';\nimport { storeAppState } from 'app/utils/submitUtils';\nimport { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport { getAntallUker } from 'app/steps/uttaksplan-info/utils/stønadskontoer';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport { Button, GuidePanel } from '@navikt/ds-react';\nimport { Link } from 'react-router-dom';\nimport { getPreviousStepHref } from 'app/steps/stepsConfig';\n\ninterface Props {\n    tilgjengeligeStønadskontoer100DTO: TilgjengeligeStønadskontoerDTO;\n    tilgjengeligeStønadskontoer80DTO: TilgjengeligeStønadskontoerDTO;\n    eksisterendeSakAnnenPart: EksisterendeSak | undefined;\n}\n\nconst FarMedmorFødselFørsteganggsøknadBeggeHarRett: FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer100DTO,\n    tilgjengeligeStønadskontoer80DTO,\n}) => {\n    const intl = useIntl();\n    const { state } = useForeldrepengesøknadContext();\n    const { annenForelder, søkersituasjon, barn, dekningsgrad, erEndringssøknad } = useSøknad();\n    const { person } = useSøkerinfo();\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const erFødsel = søkersituasjon.situasjon === 'fødsel';\n    const lagretUttaksplanInfo = useUttaksplanInfo<FarMedmorFødselBeggeHarRettUttaksplanInfo>();\n\n    const navnFar = erFarEllerMedmor\n        ? person.fornavn\n        : isAnnenForelderOppgitt(annenForelder)\n        ? annenForelder.fornavn\n        : '';\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const navnMor = erFarEllerMedmor && isAnnenForelderOppgitt(annenForelder) ? annenForelder.fornavn : person.fornavn;\n\n    const erMorUfør = getErMorUfør(annenForelder, erFarEllerMedmor);\n    const tilgjengeligeStønadskontoer = getValgtStønadskontoFor80Og100Prosent(\n        tilgjengeligeStønadskontoer80DTO,\n        tilgjengeligeStønadskontoer100DTO,\n    );\n\n    const familiehendelsesdatoDate = ISOStringToDate(familiehendelsesdato);\n    const termindato = getTermindato(barn);\n    const førsteUttaksdagNesteBarnsSak =\n        state.barnFraNesteSak !== undefined ? state.barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n    const onValidSubmitHandler = (values: Partial<FarMedmorFødselBeggeHarRettFormData>) => {\n        const antallUker = getAntallUker(tilgjengeligeStønadskontoer[values.dekningsgrad! === '100' ? 100 : 80]);\n        return [\n            actionCreator.setAntallUkerIUttaksplan(antallUker),\n            actionCreator.setUttaksplanInfo(mapFarMedmorFødselBeggeHarRettToState(values)),\n            actionCreator.setDekningsgrad(getDekningsgradFromString(values.dekningsgrad)),\n            actionCreator.lagUttaksplanforslag(\n                lagUttaksplan({\n                    annenForelderErUfør: erMorUfør,\n                    erDeltUttak: true,\n                    erEndringssøknad,\n                    erEnkelEndringssøknad: erEndringssøknad,\n                    familiehendelsesdato: familiehendelsesdatoDate!,\n                    førsteUttaksdagEtterSeksUker: Uttaksdagen(\n                        Uttaksdagen(familiehendelsesdatoDate!).denneEllerNeste(),\n                    ).leggTil(30),\n                    situasjon: erFødsel ? 'fødsel' : 'adopsjon',\n                    søkerErFarEllerMedmor: erFarEllerMedmor,\n                    søkerHarMidlertidigOmsorg: false,\n                    tilgjengeligeStønadskontoer:\n                        tilgjengeligeStønadskontoer[getDekningsgradFromString(values.dekningsgrad)],\n                    uttaksplanSkjema: {\n                        morSinSisteUttaksdag: values.morsSisteDag,\n                        farSinFørsteUttaksdag: values.farMedmorsFørsteDag,\n                        antallDagerFellesperiodeFarMedmor: parseInt(values.antallDagerFellesperiode || '0', 10),\n                        antallUkerFellesperiodeFarMedmor: parseInt(values.antallUkerFellesperiode || '0', 10),\n                    },\n                    bareFarMedmorHarRett: false,\n                    termindato,\n                    harAktivitetskravIPeriodeUtenUttak: false,\n                    førsteUttaksdagNesteBarnsSak,\n                }),\n            ),\n        ];\n    };\n    const { handleSubmit, isSubmitting } = useOnValidSubmit(\n        onValidSubmitHandler,\n        SøknadRoutes.UTTAKSPLAN,\n        (state: ForeldrepengesøknadContextState) => storeAppState(state),\n    );\n\n    return (\n        <FarMedmorFødselBeggeHarRettFormComponents.FormikWrapper\n            initialValues={getInitialFarMedmorFødselBeggeHarRettValues(lagretUttaksplanInfo, dekningsgrad)}\n            onSubmit={handleSubmit}\n            renderForm={({ values: formValues, setFieldValue }) => {\n                const visibility = farMedmorFødselBeggeHarRettQuestionsConfig.getVisbility({\n                    ...formValues,\n                    familiehendelsesdato: familiehendelsesdatoDate!,\n                } as FarMedmorFødselBeggeHarRettFormPayload);\n\n                const valgtStønadskonto = tilgjengeligeStønadskontoer[formValues.dekningsgrad === '100' ? 100 : 80];\n                const tilgjengeligeDager = valgtStønadskonto\n                    ? getTilgjengeligeDager(valgtStønadskonto, false, Forelder.farMedmor)\n                    : undefined;\n\n                return (\n                    <FarMedmorFødselBeggeHarRettFormComponents.Form\n                        includeButtons={false}\n                        includeValidationSummary={true}\n                    >\n                        <Block padBottom=\"xl\">\n                            <GuidePanel>\n                                <FormattedMessage\n                                    id=\"uttaksplaninfo.veileder.informasjonTilAnnenForelder\"\n                                    values={{\n                                        navn: isAnnenForelderOppgitt(annenForelder)\n                                            ? getNavnGenitivEierform(annenForelder.fornavn, intl.locale)\n                                            : '',\n                                    }}\n                                />\n                            </GuidePanel>\n                        </Block>\n                        <Block padBottom=\"l\">\n                            <DekningsgradSpørsmål\n                                FormKomponent={FarMedmorFødselBeggeHarRettFormComponents}\n                                dekningsgradFeltNavn={FarMedmorFødselBeggeHarRettFormField.dekningsgrad}\n                                tilgjengeligeStønadskontoer={tilgjengeligeStønadskontoer}\n                                erDeltUttak={true}\n                            />\n                        </Block>\n                        <Block padBottom=\"xl\" visible={formValues.dekningsgrad !== ''}>\n                            {tilgjengeligeDager && (\n                                <TilgjengeligeDagerGraf\n                                    erDeltUttak={true}\n                                    erFarEllerMedmor={true}\n                                    navnFarMedmor={navnFar}\n                                    navnMor={navnMor}\n                                    tilgjengeligeDager={tilgjengeligeDager}\n                                />\n                            )}\n                        </Block>\n                        <Block\n                            padBottom=\"xl\"\n                            visible={\n                                erFarEllerMedmor &&\n                                formValues.dekningsgrad !== '' &&\n                                !andreAugust2022ReglerGjelder(ISOStringToDate(familiehendelsesdato)!)\n                            }\n                        >\n                            <GuidePanel>\n                                <FormattedMessage\n                                    id=\"uttaksplaninfo.veileder.farMedmor.infoOmTidsromMellomMorsSisteDagOgFarsFørsteDag\"\n                                    values={{ navnMor }}\n                                />\n                            </GuidePanel>\n                        </Block>\n                        <Block\n                            padBottom=\"xl\"\n                            visible={visibility.isVisible(FarMedmorFødselBeggeHarRettFormField.morsSisteDag)}\n                        >\n                            <MorsSisteDagSpørsmål\n                                FormComponents={FarMedmorFødselBeggeHarRettFormComponents}\n                                fieldName={FarMedmorFødselBeggeHarRettFormField.morsSisteDag}\n                                navnMor={navnMor}\n                                familiehendelsesdato={familiehendelsesdato}\n                            />\n                        </Block>\n                        <Block\n                            padBottom=\"xl\"\n                            visible={visibility.isVisible(FarMedmorFødselBeggeHarRettFormField.farMedmorsFørsteDag)}\n                        >\n                            <FarMedmorsFørsteDag\n                                FormComponents={FarMedmorFødselBeggeHarRettFormComponents}\n                                fieldName={FarMedmorFødselBeggeHarRettFormField.farMedmorsFørsteDag}\n                                familiehendelsesdato={familiehendelsesdatoDate!}\n                                setFieldValue={setFieldValue}\n                                morsSisteDag={ISOStringToDate(formValues.morsSisteDag)}\n                                navnMor={navnMor}\n                                termindato={termindato}\n                                situasjon={søkersituasjon.situasjon}\n                                morHarRettTilForeldrepengerIEØS={false}\n                            />\n                        </Block>\n                        <Block\n                            padBottom=\"xl\"\n                            visible={visibility.isVisible(\n                                FarMedmorFødselBeggeHarRettFormField.antallDagerFellesperiode,\n                            )}\n                        >\n                            {tilgjengeligeDager && (\n                                <AntallUkerOgDagerFellesperiodeFarMedmorSpørsmål\n                                    FormComponents={FarMedmorFødselBeggeHarRettFormComponents}\n                                    ukerFieldName={FarMedmorFødselBeggeHarRettFormField.antallUkerFellesperiode}\n                                    dagerFieldName={FarMedmorFødselBeggeHarRettFormField.antallDagerFellesperiode}\n                                    antallDager={formValues.antallDagerFellesperiode!}\n                                    antallUker={formValues.antallUkerFellesperiode!}\n                                    setFieldValue={setFieldValue}\n                                    ukerMedFellesperiode={tilgjengeligeDager.dagerFelles / 5}\n                                />\n                            )}\n                        </Block>\n                        <Block>\n                            <StepButtonWrapper>\n                                <Button variant=\"secondary\" as={Link} to={getPreviousStepHref('uttaksplanInfo')}>\n                                    <FormattedMessage id=\"backlink.label\" />\n                                </Button>\n                                {visibility.areAllQuestionsAnswered() && (\n                                    <Button type=\"submit\" disabled={isSubmitting} loading={isSubmitting}>\n                                        {intlUtils(intl, 'søknad.gåVidere')}\n                                    </Button>\n                                )}\n                            </StepButtonWrapper>\n                        </Block>\n                    </FarMedmorFødselBeggeHarRettFormComponents.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default FarMedmorFødselFørsteganggsøknadBeggeHarRett;\n","import { getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\n\nexport enum MorFødselFormField {\n    dekningsgrad = 'dekningsgrad',\n    permisjonStartdato = 'permisjonStartdato',\n    skalIkkeHaUttakFørTermin = 'skalIkkeHaUttakFørTermin',\n    fellesperiodeukerMor = 'fellesperiodeukerMor',\n}\n\nexport interface MorFødselFormData {\n    [MorFødselFormField.dekningsgrad]: string;\n    [MorFødselFormField.permisjonStartdato]: string;\n    [MorFødselFormField.skalIkkeHaUttakFørTermin]: boolean;\n    [MorFødselFormField.fellesperiodeukerMor]: number | undefined;\n}\n\nexport const MorFødselFormComponents = getTypedFormComponents<MorFødselFormField, MorFødselFormData>();\n","import { MorFødselUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport { MorFødselFormData, MorFødselFormField } from './morFødselFormConfig';\nimport { dateToISOString } from '@navikt/sif-common-formik-ds/lib';\nimport { Dekningsgrad } from '@navikt/fp-common';\n\nconst initialMorFødselValues: MorFødselFormData = {\n    [MorFødselFormField.dekningsgrad]: '',\n    [MorFødselFormField.permisjonStartdato]: '',\n    [MorFødselFormField.skalIkkeHaUttakFørTermin]: false,\n    [MorFødselFormField.fellesperiodeukerMor]: undefined,\n};\n\nexport const mapMorFødselFormToState = (values: Partial<MorFødselFormData>): MorFødselUttaksplanInfo => {\n    return {\n        permisjonStartdato: values.permisjonStartdato!,\n        skalIkkeHaUttakFørTermin: values.skalIkkeHaUttakFørTermin!,\n        fellesperiodeukerMor: values.fellesperiodeukerMor,\n    };\n};\n\nexport const getInitialMorFødselValues = (\n    defaultPermisjonStartdato: Date,\n    lagretUttaksplanInfo: MorFødselUttaksplanInfo | undefined,\n    dekningsgrad: Dekningsgrad,\n): MorFødselFormData => {\n    if (lagretUttaksplanInfo) {\n        return {\n            ...lagretUttaksplanInfo,\n            [MorFødselFormField.dekningsgrad]: dekningsgrad,\n        };\n    }\n\n    return {\n        ...initialMorFødselValues,\n        [MorFødselFormField.permisjonStartdato]: dateToISOString(defaultPermisjonStartdato),\n    };\n};\n","import {\n    ISOStringToDate,\n    Uttaksdagen,\n    intlUtils,\n    uttaksConstants,\n    uttaksplanDatoavgrensninger,\n} from '@navikt/fp-common';\nimport dayjs from 'dayjs';\nimport { IntlShape } from 'react-intl';\nimport { isISODateString } from '@navikt/ds-datepicker';\n\nexport const validateErStartdatoFørTermindato =\n    (intl: IntlShape, familiehendelsedato: Date, skalIkkeHaUttakFørTermin: boolean, termindato: Date | undefined) =>\n    (permisjonStartdato: string) => {\n        if (!(permisjonStartdato === undefined && skalIkkeHaUttakFørTermin)) {\n            if (!isISODateString(permisjonStartdato)) {\n                return intlUtils(intl, 'valideringsfeil.uttaksplaninfo.startdatoPermisjon.gyldigDato');\n            }\n        }\n\n        if (permisjonStartdato !== undefined && !Uttaksdagen(ISOStringToDate(permisjonStartdato)!).erUttaksdag()) {\n            return intlUtils(intl, 'valideringsfeil.uttaksplaninfo.startdatoHelg');\n        }\n\n        if (!skalIkkeHaUttakFørTermin) {\n            const avgrensninger = uttaksplanDatoavgrensninger.startdatoFørTermin(familiehendelsedato, termindato);\n            if (\n                (avgrensninger.minDate &&\n                    avgrensninger.maxDate &&\n                    dayjs(permisjonStartdato).isBefore(avgrensninger.minDate, 'day')) ||\n                dayjs(permisjonStartdato).isAfter(avgrensninger.maxDate, 'day')\n            ) {\n                return intlUtils(intl, 'valideringsfeil.uttaksplaninfo.startdatoUtenforGyldigTidsrom', {\n                    uker: uttaksConstants.MAKS_ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL,\n                });\n            }\n        }\n\n        return undefined;\n    };\n","import * as React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport dayjs from 'dayjs';\nimport { Block, Uttaksdagen, formaterDato, getVarighetString, intlUtils } from '@navikt/fp-common';\nimport { GuidePanel } from '@navikt/ds-react';\n\ntype ugyldigStartdatoÅrsak = undefined | 'helgedag' | 'fortidlig';\n\nexport interface Props {\n    startdato: Date | undefined;\n    antallDager: number;\n    antallDagerFørFødselIhtRegler: number;\n    skalIkkeHaUttakFørTermin: boolean | undefined;\n    førsteMuligeStartdato: Date | undefined;\n    visKunFeil?: boolean;\n}\n\nexport const getÅrsakDersomUgyldigStartdato = (\n    startdato: Date | undefined,\n    førsteMuligeStartdato: Date | undefined,\n): ugyldigStartdatoÅrsak => {\n    if (startdato === undefined) {\n        return;\n    }\n    if (Uttaksdagen(startdato).erUttaksdag() === false) {\n        return 'helgedag';\n    } else if (førsteMuligeStartdato && dayjs(startdato).isBefore(førsteMuligeStartdato, 'day')) {\n        return 'fortidlig';\n    }\n\n    return undefined;\n};\n\nconst VeilederStartdatoPermisjon: React.FunctionComponent<Props> = ({\n    startdato,\n    antallDager,\n    antallDagerFørFødselIhtRegler,\n    skalIkkeHaUttakFørTermin,\n    førsteMuligeStartdato,\n    visKunFeil,\n}) => {\n    const intl = useIntl();\n\n    const ugyldigDatoÅrsak = startdato && getÅrsakDersomUgyldigStartdato(startdato, førsteMuligeStartdato);\n\n    const msg = React.useMemo(() => {\n        if (ugyldigDatoÅrsak && førsteMuligeStartdato) {\n            return ugyldigDatoÅrsak === 'fortidlig'\n                ? intlUtils(intl, 'uttaksplaninfo.veileder.forTidligStartdato', {\n                      dato: formaterDato(førsteMuligeStartdato),\n                  })\n                : intlUtils(intl, 'uttaksplaninfo.veileder.helgedag');\n        }\n        if (visKunFeil) {\n            return undefined;\n        }\n        if (skalIkkeHaUttakFørTermin === true) {\n            return <FormattedMessage id=\"uttaksplaninfo.informasjon.foreldrepengerFørFødselSkalIkkeHa\" />;\n        } else if (antallDager < antallDagerFørFødselIhtRegler) {\n            return (\n                <FormattedMessage\n                    id=\"uttaksplaninfo.informasjon.foreldrepengerFørFødselMindreEnnTreUker\"\n                    values={{\n                        varighet: getVarighetString(antallDagerFørFødselIhtRegler - antallDager, intl),\n                    }}\n                />\n            );\n        } else if (antallDager > antallDagerFørFødselIhtRegler) {\n            return (\n                <FormattedMessage\n                    id=\"uttaksplaninfo.informasjon.foreldrepengerFørFødselMerEnnTreUker\"\n                    values={{\n                        varighet: getVarighetString(antallDager - antallDagerFørFødselIhtRegler, intl),\n                    }}\n                />\n            );\n        }\n        return undefined;\n    }, [\n        ugyldigDatoÅrsak,\n        antallDager,\n        antallDagerFørFødselIhtRegler,\n        førsteMuligeStartdato,\n        intl,\n        skalIkkeHaUttakFørTermin,\n        visKunFeil,\n    ]);\n\n    return (\n        <Block margin=\"none\" visible={msg !== undefined}>\n            <GuidePanel>{msg}</GuidePanel>\n        </Block>\n    );\n};\n\nexport default VeilederStartdatoPermisjon;\n","import { FunctionComponent } from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\nimport dayjs from 'dayjs';\nimport {\n    Block,\n    intlUtils,\n    bemUtils,\n    getVarighetString,\n    isFødtBarn,\n    Uttaksdagen,\n    getValidTidsperiode,\n    ISOStringToDate,\n    Tidsperioden,\n    uttaksConstants,\n    uttaksplanDatoavgrensninger,\n} from '@navikt/fp-common';\nimport { MorFødselFormComponents, MorFødselFormField } from './morFødselFormConfig';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport { getFamiliehendelsedato } from 'app/utils/barnUtils';\nimport { validateErStartdatoFørTermindato } from './validation/morFodselValidering';\nimport VeilederStartdatoPermisjon from './VeilederStartdatoPermisjon';\n\nimport './startdatoPermisjonMor.less';\n\nconst getVarighetForStartdato = (antallDager: number, barnetErFødt: boolean, intl: IntlShape): string | undefined =>\n    antallDager > 0\n        ? barnetErFødt\n            ? intlUtils(intl, 'uttaksplaninfo.spørsmål.startdatoPermisjon.barnetErFødt.varighet', {\n                  varighet: getVarighetString(antallDager, intl),\n              })\n            : intlUtils(intl, 'uttaksplaninfo.spørsmål.startdatoPermisjon.varighet', {\n                  varighet: getVarighetString(antallDager, intl),\n              })\n        : undefined;\n\ninterface Props {\n    permisjonStartdato: string;\n    skalIkkeHaUttakFørTermin: boolean;\n    termindato: Date | undefined;\n}\n\nconst StartdatoPermisjonMor: FunctionComponent<Props> = ({\n    permisjonStartdato,\n    skalIkkeHaUttakFørTermin,\n    termindato,\n}) => {\n    const intl = useIntl();\n    const { barn } = useSøknad();\n    const bem = bemUtils('datoInput');\n\n    const erBarnFødt = isFødtBarn(barn);\n    const spørsmålNår = erBarnFødt\n        ? intlUtils(intl, 'uttaksplaninfo.spørsmål.startdatoPermisjon.barnetErFødt.label')\n        : intlUtils(intl, 'uttaksplaninfo.spørsmål.startdatoPermisjon.label');\n\n    const spørsmålHaddeIkke = erBarnFødt\n        ? intlUtils(intl, 'uttaksplaninfo.spørsmål.startdatoPermisjon.skalIkkeHaUttak.barnetErFødt.label')\n        : intlUtils(intl, 'uttaksplaninfo.spørsmål.startdatoPermisjon.skalIkkeHaUttak.label');\n\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const familiehendelsesdatoDate = dayjs(familiehendelsesdato).toDate();\n    const sisteUttaksdagFørTermin = Uttaksdagen(familiehendelsesdatoDate).forrige();\n    const startdato = skalIkkeHaUttakFørTermin !== true ? permisjonStartdato : undefined;\n    const tidsperiode = getValidTidsperiode({\n        fom: ISOStringToDate(startdato)!,\n        tom: sisteUttaksdagFørTermin,\n    });\n    const antallDager = tidsperiode ? Tidsperioden(tidsperiode).getAntallUttaksdager() : 0;\n    const antallDagerFørFødselIhtRegler = uttaksConstants.ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5;\n    const visVeileder = antallDager !== antallDagerFørFødselIhtRegler;\n\n    const datoAvgrensninger = uttaksplanDatoavgrensninger.startdatoFørTermin(familiehendelsesdatoDate, termindato);\n    const maksDato = Uttaksdagen(familiehendelsesdatoDate).forrige();\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <div className={bem.block}>\n                    <MorFødselFormComponents.DatePicker\n                        name={MorFødselFormField.permisjonStartdato}\n                        label={spørsmålNår}\n                        disabled={skalIkkeHaUttakFørTermin}\n                        maxDate={maksDato}\n                        dayPickerProps={{\n                            defaultMonth: ISOStringToDate(permisjonStartdato) || familiehendelsesdatoDate,\n                        }}\n                        validate={validateErStartdatoFørTermindato(\n                            intl,\n                            familiehendelsesdatoDate,\n                            skalIkkeHaUttakFørTermin,\n                            termindato,\n                        )}\n                        disableWeekend\n                        placeholder={'dd.mm.åååå'}\n                    />\n                    <div className={bem.element('postfix')}>\n                        {getVarighetForStartdato(antallDager, erBarnFødt, intl)}\n                    </div>\n                </div>\n            </Block>\n            <Block padBottom={visVeileder ? 'l' : 'm'}>\n                <MorFødselFormComponents.Checkbox\n                    name={MorFødselFormField.skalIkkeHaUttakFørTermin}\n                    label={spørsmålHaddeIkke}\n                    autoComplete=\"off\"\n                />\n            </Block>\n            <Block padBottom={visVeileder ? 'l' : 'm'} visible={visVeileder}>\n                <VeilederStartdatoPermisjon\n                    startdato={ISOStringToDate(startdato)}\n                    antallDager={antallDager}\n                    skalIkkeHaUttakFørTermin={skalIkkeHaUttakFørTermin === true}\n                    antallDagerFørFødselIhtRegler={antallDagerFørFødselIhtRegler}\n                    førsteMuligeStartdato={datoAvgrensninger.minDate ? new Date(datoAvgrensninger.minDate) : undefined}\n                />\n            </Block>\n        </>\n    );\n};\n\nexport default StartdatoPermisjonMor;\n","import * as React from 'react';\nimport RangeIcon from './RangeIcon';\nimport Sirkelknapp from './sirkelknapp/Sirkelknapp';\n\nimport './rangeStepper.less';\n\nexport type Direction = 'next' | 'previous';\n\nexport interface Props {\n    onClick: () => void;\n    direction: Direction;\n    label: string;\n    disabled?: boolean;\n}\n\nconst RangeStepper: React.FunctionComponent<Props> = ({ direction, onClick, label, disabled }) => (\n    <Sirkelknapp\n        stil=\"hvit\"\n        onClick={() => onClick()}\n        ariaLabel={label}\n        disabled={disabled}\n        ikon={direction === 'previous' ? <RangeIcon type=\"minus\" /> : <RangeIcon type=\"plus\" />}\n    />\n);\n\nexport default RangeStepper;\n","import classnames from 'classnames';\nimport { Fieldset, bemUtils, guid } from '@navikt/fp-common';\nimport RangeStepper from './RangeStepper';\nimport { BodyShort, ReadMore } from '@navikt/ds-react';\nimport './rangeInput.less';\nimport { Component } from 'react';\nimport AriaText from './AriaText';\n\nexport interface RangeInputElementRendererOptions {\n    value: number;\n    min: number;\n    max: number;\n}\n\nexport type RangeInputElementRenderer = (options: RangeInputElementRendererOptions) => React.ReactElement<any>;\n\nexport type RangeValueLabelPlacement = 'above' | 'below';\n\ninterface Props {\n    label: string;\n    hjelpetekst?: React.ReactNode;\n    ariaLabelText: string;\n    hjelpetekstApneLabel: string;\n    value: number;\n    min: number;\n    max: number;\n    step?: number;\n    inputId?: string;\n    bottomContentRenderer?: RangeInputElementRenderer;\n    valueLabelRenderer?: RangeInputElementRenderer;\n    valueLabelPlacement?: RangeValueLabelPlacement;\n    ariaValueChangedMessage?: (value: number) => string;\n    steppers?: {\n        increaseLabel: string;\n        reduceLabel: string;\n    };\n    onChange: (value: number) => void;\n}\n\ninterface State {\n    active: boolean;\n}\n\nconst defaultValueLabelRenderer: RangeInputElementRenderer = (options: RangeInputElementRendererOptions) => (\n    <div className=\"rangeInput__valueLabels\">\n        <div className=\"rangeInput__valueLabels__left\">{options.min}</div>\n        <div className=\"rangeInput__valueLabels__right\">{options.max}</div>\n    </div>\n);\n\nconst defaultBottomContentRenderer: RangeInputElementRenderer = (options: RangeInputElementRendererOptions) => (\n    <div className=\"rangeInput__bottomContent\">\n        <BodyShort>{options.max - options.min}</BodyShort>\n    </div>\n);\n\nclass RangeInput extends Component<Props, State> {\n    container: HTMLDivElement | null = null;\n\n    constructor(props: Props) {\n        super(props);\n        this.handleBlur = this.handleBlur.bind(this);\n        this.handleFocus = this.handleFocus.bind(this);\n        this.deactivateIfOutside = this.deactivateIfOutside.bind(this);\n        this.state = {\n            active: false,\n        };\n    }\n    handleBlur(_e: React.FocusEvent<HTMLDivElement>) {\n        if (!this.container) {\n            return;\n        }\n        setTimeout(() => this.deactivateIfOutside(), 0);\n    }\n    handleFocus(_e: React.FocusEvent<HTMLDivElement>) {\n        this.setState({\n            active: true,\n        });\n    }\n    deactivateIfOutside() {\n        if (\n            this.container &&\n            window.document.activeElement &&\n            !this.container.contains(window.document.activeElement)\n        ) {\n            this.setState({\n                active: false,\n            });\n        }\n    }\n    render() {\n        const {\n            label,\n            hjelpetekst,\n            ariaLabelText,\n            inputId,\n            valueLabelRenderer,\n            steppers,\n            ariaValueChangedMessage,\n            bottomContentRenderer,\n            hjelpetekstApneLabel,\n            valueLabelPlacement = 'above',\n            ...rest\n        } = this.props;\n\n        const { value, min, max, onChange } = this.props;\n        const id = inputId || guid();\n        const labelRenderer = valueLabelRenderer || defaultValueLabelRenderer;\n        const ariaLabelId = `${id}_label`;\n        const bottomRenderer = bottomContentRenderer || defaultBottomContentRenderer;\n\n        const bemWrapper = bemUtils('rangeInputWrapper');\n        const bemRangeInput = bemUtils('rangeInput');\n        const bemStepper = bemUtils('rangeInput__stepper');\n\n        return (\n            <div className={bemWrapper.block}>\n                <Fieldset legend={<>{label}</>} className={'uttakfordeler'}>\n                    <div aria-live=\"polite\">\n                        {valueLabelPlacement === 'above' && labelRenderer({ value, min, max })}\n                    </div>\n                    <div\n                        className={classnames(bemRangeInput.block, {\n                            [bemRangeInput.modifier('withSteppers')]: steppers !== undefined,\n                        })}\n                        ref={(c) => (this.container = c)}\n                        onBlur={this.handleBlur}\n                        onFocus={this.handleFocus}\n                    >\n                        {steppers && (\n                            <div className={`${bemStepper.block} ${bemStepper.modifier('previous')}`}>\n                                <RangeStepper\n                                    direction=\"previous\"\n                                    onClick={() => (value > min ? onChange(value - 1) : null)}\n                                    label={steppers ? steppers.reduceLabel : 'Mindre'}\n                                />\n                            </div>\n                        )}\n                        <div className={bemRangeInput.element('range')}>\n                            <AriaText id={ariaLabelId}>{ariaLabelText}</AriaText>\n                            <input\n                                {...rest}\n                                id={id}\n                                aria-labelledby={ariaLabelId}\n                                type=\"range\"\n                                onChange={(e) => onChange(parseInt(e.target.value, 10))}\n                            />\n                            <div role=\"alert\" aria-live=\"assertive\" className=\"sr-only\">\n                                {ariaValueChangedMessage && this.state.active\n                                    ? ariaValueChangedMessage(value)\n                                    : undefined}\n                            </div>\n                        </div>\n                        {steppers && (\n                            <div className={`${bemStepper.block} ${bemStepper.modifier('next')}`}>\n                                <RangeStepper\n                                    direction=\"next\"\n                                    onClick={() => (value < max ? onChange(value + 1) : null)}\n                                    label={steppers ? steppers.increaseLabel : 'Mer'}\n                                />\n                            </div>\n                        )}\n                    </div>\n                    <div aria-live=\"polite\">\n                        {valueLabelPlacement === 'below' && labelRenderer({ value, min, max })}\n                    </div>\n                    {bottomRenderer({ value, min, max })}\n                    <ReadMore header={hjelpetekstApneLabel}>{hjelpetekst}</ReadMore>\n                </Fieldset>\n            </div>\n        );\n    }\n}\n\nexport default RangeInput;\n","import { useEffect } from 'react';\nimport { useIntl, FormattedMessage } from 'react-intl';\nimport { Block, TilgjengeligStønadskonto, intlUtils, links } from '@navikt/fp-common';\nimport RangeInput from './range-input/RangeInput';\nimport {\n    getAntallUkerFedrekvote,\n    getAntallUkerFellesperiode,\n    getAntallUkerMødrekvote,\n} from '../../utils/stønadskontoer';\nimport { BodyShort, Ingress, Link } from '@navikt/ds-react';\n\nimport './fordelingFellesperiodeSpørsmål.less';\n\nexport interface OwnProps {\n    setFieldValue: (field: string, value: any, shouldValidate?: boolean | undefined) => void;\n    valgtFellesperiodeukerMor: number | undefined;\n    mor: string;\n    farMedmor: string;\n    annenForelderErFarEllerMedmor: boolean;\n    valgtStønadskonto: TilgjengeligStønadskonto[] | undefined;\n}\n\nconst FordelingFellesperiodeSpørsmål: React.FunctionComponent<OwnProps> = ({\n    setFieldValue,\n    valgtFellesperiodeukerMor,\n    annenForelderErFarEllerMedmor,\n    mor,\n    farMedmor,\n    valgtStønadskonto,\n}) => {\n    const intl = useIntl();\n\n    const fellesperiodeukerMor =\n        valgtFellesperiodeukerMor !== undefined || !valgtStønadskonto\n            ? valgtFellesperiodeukerMor\n            : Math.round((getAntallUkerFellesperiode(valgtStønadskonto) || 0) / 2);\n\n    useEffect(() => {\n        setFieldValue('fellesperiodeukerMor', fellesperiodeukerMor);\n    }, [setFieldValue, fellesperiodeukerMor]);\n\n    if (!valgtStønadskonto) {\n        return null;\n    }\n\n    const ukerFellesperiode = Math.floor(getAntallUkerFellesperiode(valgtStønadskonto));\n    const antallUkerFedreKvote = getAntallUkerFedrekvote(valgtStønadskonto);\n    const antallUkerMødreKvote = getAntallUkerMødrekvote(valgtStønadskonto);\n\n    const infotekst = intlUtils(intl, 'uttaksplaninfo.fordeling.veiledning', {\n        pakrevdForelder1: antallUkerMødreKvote,\n        pakrevdForelder2: antallUkerFedreKvote,\n        navnForelder1: mor,\n        navnForelder2: farMedmor,\n    });\n\n    const annenForeldersNavn = annenForelderErFarEllerMedmor ? farMedmor : mor;\n    return (\n        <RangeInput\n            label={intlUtils(intl, 'uttaksplaninfo.spørsmål.fordeling')}\n            hjelpetekst={\n                <BodyShort as=\"div\">\n                    <Block padBottom=\"l\">{infotekst}</Block>\n                    <Link href={links.nav_aktivitetskrav} target=\"_blank\">\n                        <FormattedMessage id=\"uttaksplaninfo.fordeling.veiledning.lenketekst\" />\n                    </Link>\n                </BodyShort>\n            }\n            hjelpetekstApneLabel={intlUtils(intl, 'uttaksplaninfo.fordeling.veiledning.lenketekst.apneLabel')}\n            ariaLabelText={intlUtils(intl, 'uttaksplaninfo.spørsmål.fordeling')}\n            value={fellesperiodeukerMor!}\n            min={0}\n            max={ukerFellesperiode}\n            onChange={(fellesperiodeukerMor) => setFieldValue('fellesperiodeukerMor', fellesperiodeukerMor)}\n            steppers={{\n                reduceLabel: intl.formatMessage({ id: 'uttaksplaninfo.fordeling.reduser.tooltip' }),\n                increaseLabel: intl.formatMessage({ id: 'uttaksplaninfo.fordeling.øk.tooltip' }),\n            }}\n            ariaValueChangedMessage={(value) =>\n                intl.formatMessage(\n                    { id: 'uttaksplaninfo.fordeling.valgtVerdi' },\n                    {\n                        ukerForelder: value,\n                        ukerTotalt: ukerFellesperiode,\n                        navnForelder: mor || intl.formatMessage({ id: 'uttaksplan.mor' }),\n                    },\n                )\n            }\n            valueLabelRenderer={(options) => (\n                <Ingress as=\"p\" className=\"m-text-center fordelingFellesperiode--valgtVerdi\">\n                    <FormattedMessage\n                        id=\"uttaksplaninfo.fordeling.valgtVerdi\"\n                        values={{\n                            ukerForelder: options.value,\n                            ukerTotalt: options.max,\n                            navnForelder: mor || intl.formatMessage({ id: 'uttaksplan.mor' }),\n                        }}\n                    />\n                </Ingress>\n            )}\n            valueLabelPlacement=\"above\"\n            bottomContentRenderer={(options) => (\n                <BodyShort className=\"m-text-center fordelingFellesperiode--bottomContent\">\n                    <FormattedMessage\n                        id=\"uttaksplaninfo.fordeling.annenForeldersFellesperiode\"\n                        values={{ annenForeldersNavn, antallUker: options.max - options.value }}\n                    />\n                </BodyShort>\n            )}\n        />\n    );\n};\n\nexport default FordelingFellesperiodeSpørsmål;\n","import { QuestionConfig, Questions } from '@navikt/sif-common-question-config';\nimport { hasValue } from '@navikt/fp-common';\nimport { MorFødselFormData, MorFødselFormField } from './morFødselFormConfig';\n\nexport interface MorFødselQuestionsPayload extends MorFødselFormData {\n    harRettPåForeldrepengerINorge: boolean | undefined;\n    erAleneOmOmsorg: boolean | undefined;\n}\n\nconst MorFødselFormConfig: QuestionConfig<MorFødselQuestionsPayload, MorFødselFormField> = {\n    [MorFødselFormField.dekningsgrad]: {\n        isAnswered: ({ dekningsgrad }) => hasValue(dekningsgrad),\n        isIncluded: () => true,\n    },\n    [MorFødselFormField.permisjonStartdato]: {\n        isAnswered: ({ permisjonStartdato }) => hasValue(permisjonStartdato),\n        isIncluded: () => true,\n        visibilityFilter: ({ dekningsgrad }) => hasValue(dekningsgrad),\n    },\n    [MorFødselFormField.skalIkkeHaUttakFørTermin]: {\n        isAnswered: ({ skalIkkeHaUttakFørTermin }) => hasValue(skalIkkeHaUttakFørTermin),\n        isIncluded: () => true,\n        visibilityFilter: ({ dekningsgrad }) => hasValue(dekningsgrad),\n    },\n    [MorFødselFormField.fellesperiodeukerMor]: {\n        isAnswered: ({ fellesperiodeukerMor }) => hasValue(fellesperiodeukerMor),\n        isIncluded: ({ harRettPåForeldrepengerINorge, erAleneOmOmsorg }) =>\n            !!harRettPåForeldrepengerINorge && erAleneOmOmsorg === false,\n        visibilityFilter: ({ dekningsgrad, permisjonStartdato, skalIkkeHaUttakFørTermin }) =>\n            hasValue(dekningsgrad) && (hasValue(permisjonStartdato) || skalIkkeHaUttakFørTermin === true),\n    },\n};\n\nexport const morFødselQuestionsConfig = Questions<MorFødselQuestionsPayload, MorFødselFormField>(MorFødselFormConfig);\n","import { Situasjon } from '@navikt/fp-common';\nimport dayjs from 'dayjs';\n\nexport const skalViseInfoOmPrematuruker = (\n    fødselsdato: Date | undefined,\n    termindato: Date | undefined,\n    situasjon: Situasjon,\n): boolean => {\n    if (fødselsdato === undefined || termindato === undefined || situasjon !== 'fødsel') {\n        return false;\n    }\n    const fødselsdatoEtterEllerLikFørsteJuli = dayjs(fødselsdato).isSameOrAfter(dayjs(new Date('2019-07-01')), 'day');\n    return (\n        dayjs(fødselsdato).add(7, 'weeks').add(3, 'days').isBefore(dayjs(termindato), 'days') &&\n        fødselsdatoEtterEllerLikFørsteJuli\n    );\n};\n\nexport const getSamtidigUttaksprosent = (\n    gradertPeriode: boolean | undefined,\n    stillingsprosent: string | undefined,\n): string => {\n    return gradertPeriode && stillingsprosent ? (100 - parseInt(stillingsprosent, 10)).toString() : '100';\n};\n","import { Periode, Periodene, isUttakAnnenPart, isUttaksperiode } from '@navikt/fp-common';\nimport {\n    finnOgSettInnHull,\n    normaliserPerioder,\n    settInnAnnenPartsUttak,\n} from '@navikt/uttaksplan/src/builder/uttaksplanbuilderUtils';\nimport { getSamtidigUttaksprosent } from 'app/utils/uttaksplanInfoUtils';\n\nexport const leggTilAnnenPartsPerioderISøkerenesUttaksplan = (\n    annenPartsPerioder: Periode[],\n    uttaksplan: Periode[],\n    familiehendelsedato: Date,\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n): Periode[] => {\n    const { normaliserteEgnePerioder, normaliserteAnnenPartsPerioder } = normaliserPerioder(\n        uttaksplan,\n        annenPartsPerioder,\n    );\n\n    if (normaliserteAnnenPartsPerioder.length > 0) {\n        normaliserteEgnePerioder.forEach((p) => {\n            if (isUttaksperiode(p)) {\n                const overlappendePerioderAnnenPart =\n                    Periodene(normaliserteAnnenPartsPerioder).finnOverlappendePerioder(p);\n                const overlappendePeriodeAnnenPart =\n                    overlappendePerioderAnnenPart.length > 0 ? overlappendePerioderAnnenPart[0] : undefined;\n\n                if (overlappendePeriodeAnnenPart !== undefined && isUttakAnnenPart(overlappendePeriodeAnnenPart)) {\n                    if (!p.ønskerSamtidigUttak) {\n                        p.ønskerSamtidigUttak = true;\n                        p.samtidigUttakProsent = getSamtidigUttaksprosent(p.gradert, p.stillingsprosent);\n                    }\n                    if (!overlappendePeriodeAnnenPart.ønskerSamtidigUttak) {\n                        overlappendePeriodeAnnenPart.ønskerSamtidigUttak = true;\n                        overlappendePeriodeAnnenPart.samtidigUttakProsent = getSamtidigUttaksprosent(\n                            overlappendePeriodeAnnenPart.gradert,\n                            overlappendePeriodeAnnenPart.stillingsprosent,\n                        );\n                    }\n                }\n            }\n        });\n        return finnOgSettInnHull(\n            settInnAnnenPartsUttak(\n                normaliserteEgnePerioder,\n                normaliserteAnnenPartsPerioder,\n                familiehendelsedato,\n                førsteUttaksdagNesteBarnsSak,\n            ),\n            harAktivitetskravIPeriodeUtenUttak,\n            familiehendelsedato,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak,\n        );\n    }\n\n    return uttaksplan;\n};\n","import { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport {\n    Block,\n    EksisterendeSak,\n    Forelder,\n    ISOStringToDate,\n    StepButtonWrapper,\n    Tidsperioden,\n    Uttaksdagen,\n    formaterNavn,\n    getFlerbarnsuker,\n    intlUtils,\n    isAnnenForelderOppgitt,\n    isFarEllerMedmor,\n    uttaksConstants,\n} from '@navikt/fp-common';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport actionCreator from 'app/context/action/actionCreator';\nimport { getFamiliehendelsedato, getFødselsdato, getTermindato } from 'app/utils/barnUtils';\nimport { getValgtStønadskontoFor80Og100Prosent } from 'app/utils/stønadskontoUtils';\nimport { TilgjengeligeStønadskontoerDTO } from 'app/types/TilgjengeligeStønadskontoerDTO';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport { MorFødselFormComponents, MorFødselFormData, MorFødselFormField } from './morFødselFormConfig';\nimport { getTilgjengeligeDager } from '../../tilgjengeligeDagerGraf/tilgjengeligeDagerUtils';\nimport TilgjengeligeDagerGraf from '../../tilgjengeligeDagerGraf/TilgjengeligeDagerGraf';\nimport { getInitialMorFødselValues, mapMorFødselFormToState } from './morFødselUtils';\nimport StartdatoPermisjonMor from './StartdatoPermisjonMor';\nimport FordelingFellesperiodeSpørsmål from '../../fordelingFellesperiode/FordelingFellesperiodeSpørsmål';\nimport useOnValidSubmit from 'app/utils/hooks/useOnValidSubmit';\nimport SøknadRoutes from 'app/routes/routes';\nimport { MorFødselUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport { MorFødselQuestionsPayload, morFødselQuestionsConfig } from './morFødselQuestionsConfig';\nimport useUttaksplanInfo from 'app/utils/hooks/useUttaksplanInfo';\nimport DekningsgradSpørsmål from '../spørsmål/DekningsgradSpørsmål';\nimport { getDekningsgradFromString } from 'app/utils/getDekningsgradFromString';\nimport { lagUttaksplan } from 'app/utils/uttaksplan/lagUttaksplan';\nimport { storeAppState } from 'app/utils/submitUtils';\nimport { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport { getAntallUker } from 'app/steps/uttaksplan-info/utils/stønadskontoer';\nimport { skalViseInfoOmPrematuruker } from 'app/utils/uttaksplanInfoUtils';\nimport { leggTilAnnenPartsPerioderISøkerenesUttaksplan } from 'app/steps/uttaksplan-info/utils/leggTilAnnenPartsPerioderISøkerensUttaksplan';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport { Button, GuidePanel } from '@navikt/ds-react';\nimport { Link } from 'react-router-dom';\nimport { getPreviousStepHref } from 'app/steps/stepsConfig';\nimport { getHarAktivitetskravIPeriodeUtenUttak } from '@navikt/uttaksplan';\n\ninterface Props {\n    tilgjengeligeStønadskontoer100DTO: TilgjengeligeStønadskontoerDTO;\n    tilgjengeligeStønadskontoer80DTO: TilgjengeligeStønadskontoerDTO;\n    eksisterendeSakFar: EksisterendeSak | undefined;\n}\n\nconst MorFødsel: FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer100DTO,\n    tilgjengeligeStønadskontoer80DTO,\n    eksisterendeSakFar,\n}) => {\n    const intl = useIntl();\n    const { state } = useForeldrepengesøknadContext();\n    const {\n        annenForelder,\n        søkersituasjon,\n        barn,\n        søker: { erAleneOmOmsorg },\n        dekningsgrad,\n        erEndringssøknad,\n    } = useSøknad();\n    const {\n        person: { fornavn, mellomnavn, etternavn },\n    } = useSøkerinfo();\n    const lagretUttaksplanInfo = useUttaksplanInfo<MorFødselUttaksplanInfo>();\n\n    const antallBarn = barn.antallBarn;\n\n    const fødselsdato = getFødselsdato(barn);\n    const termindato = getTermindato(barn);\n    const visInfoOmPrematuruker = skalViseInfoOmPrematuruker(fødselsdato, termindato, søkersituasjon.situasjon);\n    const ekstraDagerGrunnetPrematurFødsel = visInfoOmPrematuruker\n        ? Tidsperioden({ fom: fødselsdato!, tom: termindato! }).getAntallUttaksdager() - 1\n        : undefined;\n    const førsteUttaksdagNesteBarnsSak =\n        state.barnFraNesteSak !== undefined ? state.barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n    const oppgittAnnenForelder = isAnnenForelderOppgitt(annenForelder) ? annenForelder : undefined;\n    const erMorUfør = !!oppgittAnnenForelder?.erUfør;\n    const harRettPåForeldrepengerINorge = !!oppgittAnnenForelder?.harRettPåForeldrepengerINorge;\n    const navnFarMedmor = oppgittAnnenForelder\n        ? formaterNavn(oppgittAnnenForelder.fornavn, oppgittAnnenForelder.etternavn, true)\n        : '';\n\n    const navnMor = formaterNavn(fornavn, etternavn, true, mellomnavn);\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const førsteUttaksdag = Uttaksdagen(ISOStringToDate(familiehendelsesdato)!).denneEllerNeste();\n    const defaultPermisjonStartdato = Uttaksdagen(førsteUttaksdag).trekkFra(\n        uttaksConstants.ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5,\n    );\n    const erFødsel = søkersituasjon.situasjon === 'fødsel';\n    const erAdopsjon = søkersituasjon.situasjon === 'adopsjon';\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n\n    const erDeltUttak = isAnnenForelderOppgitt(annenForelder) ? !!annenForelder.harRettPåForeldrepengerINorge : false;\n\n    const tilgjengeligeStønadskontoer = getValgtStønadskontoFor80Og100Prosent(\n        tilgjengeligeStønadskontoer80DTO,\n        tilgjengeligeStønadskontoer100DTO,\n    );\n    const familiehendelsesdatoDate = ISOStringToDate(familiehendelsesdato);\n\n    const onValidSubmitHandler = (values: Partial<MorFødselFormData>) => {\n        const submissionValues = mapMorFødselFormToState(values);\n        const uttaksplanforslag = lagUttaksplan({\n            annenForelderErUfør: erMorUfør,\n            erDeltUttak,\n            erEndringssøknad,\n            erEnkelEndringssøknad: erEndringssøknad,\n            familiehendelsesdato: familiehendelsesdatoDate!,\n            førsteUttaksdagEtterSeksUker: Uttaksdagen(Uttaksdagen(familiehendelsesdatoDate!).denneEllerNeste()).leggTil(\n                30,\n            ),\n            situasjon: erFødsel ? 'fødsel' : 'adopsjon',\n            søkerErFarEllerMedmor: erFarEllerMedmor,\n            søkerHarMidlertidigOmsorg: false,\n            tilgjengeligeStønadskontoer: tilgjengeligeStønadskontoer[getDekningsgradFromString(values.dekningsgrad)],\n            uttaksplanSkjema: {\n                fellesperiodeukerMor: submissionValues.fellesperiodeukerMor,\n                startdatoPermisjon: submissionValues.skalIkkeHaUttakFørTermin\n                    ? undefined\n                    : submissionValues.permisjonStartdato,\n                skalIkkeHaUttakFørTermin: submissionValues.skalIkkeHaUttakFørTermin,\n            },\n            bareFarMedmorHarRett: false,\n            termindato,\n            harAktivitetskravIPeriodeUtenUttak: false,\n            førsteUttaksdagNesteBarnsSak,\n        });\n        const antallUker = getAntallUker(tilgjengeligeStønadskontoer[values.dekningsgrad! === '100' ? 100 : 80]);\n        const harAktivitetskravIPeriodeUtenUttak = getHarAktivitetskravIPeriodeUtenUttak({\n            erDeltUttak,\n            morHarRett: true,\n            søkerErAleneOmOmsorg: false,\n        });\n\n        let uttaksplanMedAnnenPart;\n\n        if (eksisterendeSakFar && uttaksplanforslag.length > 0) {\n            uttaksplanMedAnnenPart = leggTilAnnenPartsPerioderISøkerenesUttaksplan(\n                eksisterendeSakFar.uttaksplan,\n                uttaksplanforslag,\n                familiehendelsesdatoDate!,\n                harAktivitetskravIPeriodeUtenUttak,\n                erAdopsjon,\n                false,\n                false,\n                førsteUttaksdagNesteBarnsSak,\n            );\n        } else if (eksisterendeSakFar) {\n            uttaksplanMedAnnenPart = eksisterendeSakFar.uttaksplan;\n        } else {\n            uttaksplanMedAnnenPart = uttaksplanforslag;\n        }\n        return [\n            actionCreator.setAntallUkerIUttaksplan(antallUker),\n            actionCreator.setUttaksplanInfo(submissionValues),\n            actionCreator.setDekningsgrad(getDekningsgradFromString(values.dekningsgrad)),\n            actionCreator.lagUttaksplanforslag(uttaksplanMedAnnenPart),\n        ];\n    };\n    const { handleSubmit, isSubmitting } = useOnValidSubmit(\n        onValidSubmitHandler,\n        SøknadRoutes.UTTAKSPLAN,\n        (state: ForeldrepengesøknadContextState) => storeAppState(state),\n    );\n\n    return (\n        <MorFødselFormComponents.FormikWrapper\n            initialValues={getInitialMorFødselValues(defaultPermisjonStartdato, lagretUttaksplanInfo, dekningsgrad)}\n            onSubmit={handleSubmit}\n            renderForm={({ values: formValues, setFieldValue }) => {\n                const visibility = morFødselQuestionsConfig.getVisbility({\n                    ...formValues,\n                    harRettPåForeldrepengerINorge,\n                    erAleneOmOmsorg,\n                } as MorFødselQuestionsPayload);\n\n                const valgtStønadskonto = tilgjengeligeStønadskontoer[formValues.dekningsgrad === '100' ? 100 : 80];\n\n                return (\n                    <MorFødselFormComponents.Form includeButtons={false} includeValidationSummary={true}>\n                        <Block padBottom=\"l\">\n                            <DekningsgradSpørsmål\n                                FormKomponent={MorFødselFormComponents}\n                                dekningsgradFeltNavn={MorFødselFormField.dekningsgrad}\n                                tilgjengeligeStønadskontoer={tilgjengeligeStønadskontoer}\n                                erDeltUttak={erDeltUttak}\n                            />\n                        </Block>\n                        <Block padBottom=\"xl\" visible={visibility.isAnswered(MorFødselFormField.dekningsgrad)}>\n                            {valgtStønadskonto && (\n                                <TilgjengeligeDagerGraf\n                                    erDeltUttak={erDeltUttak}\n                                    erFarEllerMedmor={false}\n                                    navnFarMedmor={navnFarMedmor}\n                                    navnMor={navnMor}\n                                    tilgjengeligeDager={getTilgjengeligeDager(\n                                        valgtStønadskonto,\n                                        false,\n                                        Forelder.farMedmor,\n                                    )}\n                                />\n                            )}\n                        </Block>\n                        <Block padBottom=\"xl\" visible={visInfoOmPrematuruker === true}>\n                            <GuidePanel>\n                                <FormattedMessage\n                                    id=\"uttaksplaninfo.veileder.informasjonPrematuruker\"\n                                    values={{\n                                        antallprematuruker: Math.floor(ekstraDagerGrunnetPrematurFødsel! / 5),\n                                        antallprematurdager: ekstraDagerGrunnetPrematurFødsel! % 5,\n                                    }}\n                                />\n                            </GuidePanel>\n                        </Block>\n                        <Block visible={visibility.isAnswered(MorFødselFormField.dekningsgrad)}>\n                            <StartdatoPermisjonMor\n                                permisjonStartdato={formValues.permisjonStartdato!}\n                                skalIkkeHaUttakFørTermin={formValues.skalIkkeHaUttakFørTermin!}\n                                termindato={termindato}\n                            />\n                        </Block>\n                        <Block\n                            visible={\n                                erAleneOmOmsorg === false &&\n                                harRettPåForeldrepengerINorge &&\n                                visibility.isAnswered(MorFødselFormField.dekningsgrad)\n                            }\n                        >\n                            <Block\n                                padBottom=\"xl\"\n                                visible={\n                                    antallBarn > 1 &&\n                                    (formValues.permisjonStartdato !== undefined ||\n                                        formValues.skalIkkeHaUttakFørTermin === true)\n                                }\n                            >\n                                <GuidePanel>\n                                    <FormattedMessage\n                                        id=\"uttaksplaninfo.veileder.flerbarnsInformasjon\"\n                                        values={{\n                                            uker: getFlerbarnsuker(formValues.dekningsgrad!, antallBarn),\n                                            navnFar: navnFarMedmor,\n                                            navnMor: navnMor,\n                                        }}\n                                    />\n                                </GuidePanel>\n                            </Block>\n                            <Block\n                                padBottom=\"xl\"\n                                visible={visibility.isVisible(MorFødselFormField.fellesperiodeukerMor)}\n                            >\n                                <FordelingFellesperiodeSpørsmål\n                                    setFieldValue={setFieldValue}\n                                    valgtStønadskonto={valgtStønadskonto}\n                                    valgtFellesperiodeukerMor={formValues.fellesperiodeukerMor}\n                                    mor={navnMor}\n                                    farMedmor={navnFarMedmor}\n                                    annenForelderErFarEllerMedmor={!erFarEllerMedmor}\n                                />\n                            </Block>\n                        </Block>\n                        <Block>\n                            <StepButtonWrapper>\n                                <Button variant=\"secondary\" as={Link} to={getPreviousStepHref('uttaksplanInfo')}>\n                                    <FormattedMessage id=\"backlink.label\" />\n                                </Button>\n                                {visibility.areAllQuestionsAnswered() && (\n                                    <Button type=\"submit\" disabled={isSubmitting} loading={isSubmitting}>\n                                        {intlUtils(intl, 'søknad.gåVidere')}\n                                    </Button>\n                                )}\n                            </StepButtonWrapper>\n                        </Block>\n                    </MorFødselFormComponents.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default MorFødsel;\n","enum AdopsjonStartdatoValg {\n    ANKOMST = 'ankomst',\n    OMSORGSOVERTAKELSE = 'omsorgsovertakelse',\n    ANNEN = 'annen',\n}\n\nexport const finnEnum = (valg?: string): AdopsjonStartdatoValg | undefined => {\n    if (valg === AdopsjonStartdatoValg.ANKOMST) {\n        return AdopsjonStartdatoValg.ANKOMST;\n    }\n    if (valg === AdopsjonStartdatoValg.OMSORGSOVERTAKELSE) {\n        return AdopsjonStartdatoValg.OMSORGSOVERTAKELSE;\n    }\n    if (valg === AdopsjonStartdatoValg.ANNEN) {\n        return AdopsjonStartdatoValg.ANNEN;\n    }\n    return undefined;\n};\n\nexport default AdopsjonStartdatoValg;\n","import { YesOrNo, getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\nimport AdopsjonStartdatoValg from './adopsjonStartdatoValg';\n\nexport enum MorFarAdopsjonFormField {\n    harAnnenForelderSøktFP = 'harAnnenForelderSøktFP',\n    dekningsgrad = 'dekningsgrad',\n    startdatoAdopsjonValg = 'startdatoAdopsjonValg',\n    annenStartdatoAdopsjon = 'annenStartdatoAdopsjon',\n    annenForeldersSisteDag = 'annenForeldersSisteDag',\n    søkersFørsteDag = 'søkersFørsteDag',\n    antallUkerFellesperiode = 'antallUkerFellesperiode',\n    antallDagerFellesperiode = 'antallDagerFellesperiode',\n    fellesperiodeukerMor = 'fellesperiodeukerMor',\n}\n\nexport interface MorFarAdopsjonFormData {\n    [MorFarAdopsjonFormField.harAnnenForelderSøktFP]: YesOrNo;\n    [MorFarAdopsjonFormField.dekningsgrad]: string;\n    [MorFarAdopsjonFormField.startdatoAdopsjonValg]: AdopsjonStartdatoValg | undefined;\n    [MorFarAdopsjonFormField.annenStartdatoAdopsjon]: string;\n    [MorFarAdopsjonFormField.annenForeldersSisteDag]: string;\n    [MorFarAdopsjonFormField.søkersFørsteDag]: string;\n    [MorFarAdopsjonFormField.antallUkerFellesperiode]: string;\n    [MorFarAdopsjonFormField.antallDagerFellesperiode]: string;\n    [MorFarAdopsjonFormField.fellesperiodeukerMor]: number | undefined;\n}\n\nexport const MorFarAdopsjonFormComponents = getTypedFormComponents<MorFarAdopsjonFormField, MorFarAdopsjonFormData>();\n","import { MorFarAdopsjonUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport { finnEnum } from './adopsjonStartdatoValg';\nimport { MorFarAdopsjonFormData, MorFarAdopsjonFormField } from './morFarAdopsjonFormConfig';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\nimport { Dekningsgrad, convertYesOrNoOrUndefinedToBoolean } from '@navikt/fp-common';\n\nconst initialMorFarAdopsjonValues: MorFarAdopsjonFormData = {\n    [MorFarAdopsjonFormField.harAnnenForelderSøktFP]: YesOrNo.UNANSWERED,\n    [MorFarAdopsjonFormField.dekningsgrad]: '',\n    [MorFarAdopsjonFormField.startdatoAdopsjonValg]: undefined,\n    [MorFarAdopsjonFormField.annenStartdatoAdopsjon]: '',\n    [MorFarAdopsjonFormField.annenForeldersSisteDag]: '',\n    [MorFarAdopsjonFormField.søkersFørsteDag]: '',\n    [MorFarAdopsjonFormField.antallUkerFellesperiode]: '0',\n    [MorFarAdopsjonFormField.antallDagerFellesperiode]: '0',\n    [MorFarAdopsjonFormField.fellesperiodeukerMor]: undefined,\n};\n\nexport const mapMorFarAdopsjonFormToState = (values: Partial<MorFarAdopsjonFormData>): MorFarAdopsjonUttaksplanInfo => {\n    return {\n        harAnnenForelderSøktFP: convertYesOrNoOrUndefinedToBoolean(values.harAnnenForelderSøktFP)!,\n        startdatoAdopsjonValg: values.startdatoAdopsjonValg!,\n        annenStartdatoAdopsjon: values.annenStartdatoAdopsjon!,\n        annenForeldersSisteDag: values.annenForeldersSisteDag!,\n        søkersFørsteDag: values.søkersFørsteDag!,\n        antallUkerFellesperiode: values.antallUkerFellesperiode!,\n        antallDagerFellesperiode: values.antallDagerFellesperiode!,\n        fellesperiodeukerMor: values.fellesperiodeukerMor,\n    };\n};\n\nexport const getInitialMorFarAdopsjonValues = (\n    lagretUttaksplanInfo: MorFarAdopsjonUttaksplanInfo | undefined,\n    dekningsgrad: Dekningsgrad,\n): MorFarAdopsjonFormData => {\n    if (lagretUttaksplanInfo) {\n        return {\n            ...lagretUttaksplanInfo,\n            [MorFarAdopsjonFormField.dekningsgrad]: dekningsgrad,\n            [MorFarAdopsjonFormField.startdatoAdopsjonValg]: finnEnum(lagretUttaksplanInfo.startdatoAdopsjonValg),\n            [MorFarAdopsjonFormField.harAnnenForelderSøktFP]: lagretUttaksplanInfo.harAnnenForelderSøktFP\n                ? YesOrNo.YES\n                : YesOrNo.NO,\n        };\n    }\n\n    return initialMorFarAdopsjonValues;\n};\n","import { QuestionConfig, Questions } from '@navikt/sif-common-question-config';\nimport { hasValue } from '@navikt/fp-common';\nimport { MorFarAdopsjonFormData, MorFarAdopsjonFormField } from './morFarAdopsjonFormConfig';\nimport AdopsjonStartdatoValg from './adopsjonStartdatoValg';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\n\nexport interface MorFarAdopsjonQuestionsPayload extends MorFarAdopsjonFormData {\n    harAnnenForelderRettPåForeldrepengerINorge: boolean | undefined;\n    erAleneOmOmsorg: boolean | undefined;\n}\n\nconst MorFarAdopsjonFormConfig: QuestionConfig<MorFarAdopsjonQuestionsPayload, MorFarAdopsjonFormField> = {\n    [MorFarAdopsjonFormField.harAnnenForelderSøktFP]: {\n        isAnswered: ({ harAnnenForelderSøktFP }) => harAnnenForelderSøktFP !== YesOrNo.UNANSWERED,\n        isIncluded: ({ harAnnenForelderRettPåForeldrepengerINorge }) => !!harAnnenForelderRettPåForeldrepengerINorge,\n    },\n    [MorFarAdopsjonFormField.dekningsgrad]: {\n        isAnswered: ({ dekningsgrad }) => hasValue(dekningsgrad),\n        isIncluded: ({ harAnnenForelderSøktFP, harAnnenForelderRettPåForeldrepengerINorge }) =>\n            harAnnenForelderSøktFP !== YesOrNo.UNANSWERED || !harAnnenForelderRettPåForeldrepengerINorge,\n    },\n    [MorFarAdopsjonFormField.startdatoAdopsjonValg]: {\n        isAnswered: ({ startdatoAdopsjonValg }) => hasValue(startdatoAdopsjonValg),\n        isIncluded: ({ dekningsgrad, harAnnenForelderSøktFP }) =>\n            hasValue(dekningsgrad) && harAnnenForelderSøktFP !== YesOrNo.YES,\n    },\n    [MorFarAdopsjonFormField.annenStartdatoAdopsjon]: {\n        isAnswered: ({ annenStartdatoAdopsjon }) => hasValue(annenStartdatoAdopsjon),\n        isIncluded: ({ dekningsgrad, harAnnenForelderSøktFP, startdatoAdopsjonValg }) =>\n            startdatoAdopsjonValg === AdopsjonStartdatoValg.ANNEN &&\n            hasValue(dekningsgrad) &&\n            harAnnenForelderSøktFP !== YesOrNo.YES,\n    },\n    [MorFarAdopsjonFormField.annenForeldersSisteDag]: {\n        isAnswered: ({ annenForeldersSisteDag }) => hasValue(annenForeldersSisteDag),\n        isIncluded: ({ dekningsgrad, harAnnenForelderSøktFP }) =>\n            hasValue(dekningsgrad) && harAnnenForelderSøktFP === YesOrNo.YES,\n    },\n    [MorFarAdopsjonFormField.søkersFørsteDag]: {\n        isAnswered: ({ søkersFørsteDag }) => hasValue(søkersFørsteDag),\n        isIncluded: ({ annenForeldersSisteDag, harAnnenForelderSøktFP }) =>\n            hasValue(annenForeldersSisteDag) && harAnnenForelderSøktFP === YesOrNo.YES,\n    },\n    [MorFarAdopsjonFormField.antallDagerFellesperiode]: {\n        isAnswered: ({ antallDagerFellesperiode }) => hasValue(antallDagerFellesperiode),\n        isIncluded: ({ søkersFørsteDag }) => hasValue(søkersFørsteDag),\n    },\n    [MorFarAdopsjonFormField.antallUkerFellesperiode]: {\n        isAnswered: ({ antallUkerFellesperiode }) => hasValue(antallUkerFellesperiode),\n        isIncluded: ({ søkersFørsteDag }) => hasValue(søkersFørsteDag),\n    },\n    [MorFarAdopsjonFormField.fellesperiodeukerMor]: {\n        isAnswered: ({ fellesperiodeukerMor }) => hasValue(fellesperiodeukerMor),\n        isIncluded: ({\n            startdatoAdopsjonValg,\n            harAnnenForelderSøktFP,\n            harAnnenForelderRettPåForeldrepengerINorge,\n            erAleneOmOmsorg,\n        }) =>\n            startdatoAdopsjonValg !== undefined &&\n            harAnnenForelderSøktFP !== YesOrNo.YES &&\n            !!harAnnenForelderRettPåForeldrepengerINorge &&\n            erAleneOmOmsorg === false,\n    },\n};\n\nexport const morFarAdopsjonQuestionsConfig = Questions<MorFarAdopsjonQuestionsPayload, MorFarAdopsjonFormField>(\n    MorFarAdopsjonFormConfig,\n);\n","import { isISODateString } from '@navikt/ds-datepicker';\nimport { intlUtils } from '@navikt/fp-common';\nimport { IntlShape } from 'react-intl';\n\nexport const validateErAnnenStartdatoAdopsjonGyldig = (intl: IntlShape) => (annenStartdatoAdopsjon: string) => {\n    if (!isISODateString(annenStartdatoAdopsjon)) {\n        return intlUtils(intl, 'valideringsfeil.uttaksplaninfo.startdatoAdopsjon.annenDato.gyldigDato');\n    }\n\n    return undefined;\n};\n","import { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport {\n    Block,\n    ISOStringToDate,\n    formaterDatoUtenDag,\n    hasValue,\n    intlUtils,\n    isAdoptertAnnetBarn,\n    isAdoptertBarn,\n    uttaksplanDatoavgrensninger,\n} from '@navikt/fp-common';\nimport { MorFarAdopsjonFormComponents, MorFarAdopsjonFormField } from './morFarAdopsjonFormConfig';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport { getFamiliehendelsedato } from 'app/utils/barnUtils';\nimport { validateErAnnenStartdatoAdopsjonGyldig } from './validation/morFarAdopsjonValidering';\nimport AdopsjonStartdatoValg from './adopsjonStartdatoValg';\nimport { DatepickerDateRange } from '@navikt/ds-datepicker';\nimport { DateRange } from '@navikt/sif-common-formik-ds/lib';\nimport { assertUnreachable } from '@navikt/fp-common/src/common/utils/globalUtil';\n\nexport const finnStartdatoAdopsjon = (\n    startdatoAdopsjonValg: AdopsjonStartdatoValg,\n    annenStartdatoAdopsjon?: string,\n    adopsjonsdato?: string,\n    ankomstdato?: string,\n    søkersFørsteDag?: string,\n): string => {\n    if (hasValue(søkersFørsteDag)) {\n        return søkersFørsteDag!;\n    }\n\n    switch (startdatoAdopsjonValg) {\n        case AdopsjonStartdatoValg.ANKOMST:\n            return ankomstdato!;\n        case AdopsjonStartdatoValg.OMSORGSOVERTAKELSE:\n            return adopsjonsdato!;\n        case AdopsjonStartdatoValg.ANNEN:\n            return annenStartdatoAdopsjon!;\n        default:\n            return assertUnreachable(startdatoAdopsjonValg, 'Startdato for adopsjon er ikke valgt');\n    }\n};\n\nconst konverterStringTilDate = (invalidDateRanges?: DatepickerDateRange[]): DateRange[] | undefined => {\n    if (!invalidDateRanges) {\n        return undefined;\n    }\n\n    return invalidDateRanges.map((r) => ({\n        from: ISOStringToDate(r.from)!,\n        to: ISOStringToDate(r.to)!,\n    }));\n};\n\ninterface Props {\n    valgtStartdatoAdopsjon?: AdopsjonStartdatoValg;\n}\n\nconst StartdatoAdopsjon: FunctionComponent<Props> = ({ valgtStartdatoAdopsjon }) => {\n    const intl = useIntl();\n    const { barn } = useSøknad();\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n\n    const radios = [];\n    if (isAdoptertAnnetBarn(barn) && barn.ankomstdato) {\n        radios.push({\n            label: intlUtils(intl, 'uttaksplaninfo.startdatoAdopsjon.alternativ.ankomst', {\n                dato: formaterDatoUtenDag(barn.ankomstdato),\n            }),\n            value: AdopsjonStartdatoValg.ANKOMST,\n        });\n    }\n\n    if (isAdoptertBarn(barn)) {\n        radios.push({\n            label: intlUtils(intl, 'uttaksplaninfo.startdatoAdopsjon.alternativ.omsorgsovertakelse', {\n                dato: formaterDatoUtenDag(barn.adopsjonsdato),\n            }),\n            value: AdopsjonStartdatoValg.OMSORGSOVERTAKELSE,\n        });\n    }\n\n    radios.push({\n        label: intlUtils(intl, 'uttaksplaninfo.startdatoAdopsjon.alternativ.annen'),\n        value: AdopsjonStartdatoValg.ANNEN,\n    });\n\n    const datoAvgrensninger = uttaksplanDatoavgrensninger.startdatoPermisjonAdopsjon(familiehendelsesdato);\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <MorFarAdopsjonFormComponents.RadioGroup\n                    name={MorFarAdopsjonFormField.startdatoAdopsjonValg}\n                    radios={radios}\n                    legend={intlUtils(intl, 'uttaksplaninfo.startdatoAdopsjon.spørsmål')}\n                />\n            </Block>\n            <Block padBottom=\"l\" visible={valgtStartdatoAdopsjon === AdopsjonStartdatoValg.ANNEN}>\n                <MorFarAdopsjonFormComponents.DatePicker\n                    name={MorFarAdopsjonFormField.annenStartdatoAdopsjon}\n                    label={intlUtils(intl, 'uttaksplaninfo.startdatoAdopsjon.annenDato.spørsmål')}\n                    minDate={datoAvgrensninger.minDate ? ISOStringToDate(datoAvgrensninger.minDate) : undefined}\n                    maxDate={datoAvgrensninger.maxDate ? ISOStringToDate(datoAvgrensninger.maxDate) : undefined}\n                    disabledDateRanges={konverterStringTilDate(datoAvgrensninger.invalidDateRanges)}\n                    disableWeekend={datoAvgrensninger.weekendsNotSelectable}\n                    validate={validateErAnnenStartdatoAdopsjonGyldig(intl)}\n                    placeholder={'dd.mm.åååå'}\n                />\n            </Block>\n        </>\n    );\n};\n\nexport default StartdatoAdopsjon;\n","import { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport dayjs from 'dayjs';\nimport {\n    Block,\n    Forelder,\n    ISOStringToDate,\n    StepButtonWrapper,\n    Uttaksdagen,\n    formaterNavn,\n    getFlerbarnsuker,\n    getNavnGenitivEierform,\n    intlUtils,\n    isAdoptertAnnetBarn,\n    isAdoptertBarn,\n    isAdoptertStebarn,\n    isAnnenForelderOppgitt,\n    isFarEllerMedmor,\n} from '@navikt/fp-common';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport { getFamiliehendelsedato } from 'app/utils/barnUtils';\nimport { getValgtStønadskontoFor80Og100Prosent } from 'app/utils/stønadskontoUtils';\nimport { TilgjengeligeStønadskontoerDTO } from 'app/types/TilgjengeligeStønadskontoerDTO';\nimport { getInitialMorFarAdopsjonValues, mapMorFarAdopsjonFormToState } from './morFarAdopsjonUtils';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport { dateIsSameOrAfter, findEldsteDato } from 'app/utils/dateUtils';\nimport {\n    MorFarAdopsjonFormComponents,\n    MorFarAdopsjonFormData,\n    MorFarAdopsjonFormField,\n} from './morFarAdopsjonFormConfig';\nimport { MorFarAdopsjonQuestionsPayload, morFarAdopsjonQuestionsConfig } from './morFarAdopsjonQuestionsConfig';\nimport { getTilgjengeligeDager } from '../../tilgjengeligeDagerGraf/tilgjengeligeDagerUtils';\nimport TilgjengeligeDagerGraf from '../../tilgjengeligeDagerGraf/TilgjengeligeDagerGraf';\nimport StartdatoAdopsjon, { finnStartdatoAdopsjon } from './StartdatoAdopsjon';\nimport MorsSisteDagSpørsmål from '../spørsmål/MorsSisteDagSpørsmål';\nimport FarMedmorsFørsteDag from '../spørsmål/FarMedmorsFørsteDag';\nimport AntallUkerOgDagerFellesperiodeFarMedmorSpørsmål from '../spørsmål/AntallUkerOgDagerFellesperiodeFarMedmorSpørsmål';\nimport FordelingFellesperiodeSpørsmål from '../../fordelingFellesperiode/FordelingFellesperiodeSpørsmål';\nimport SøknadRoutes from 'app/routes/routes';\nimport useOnValidSubmit from 'app/utils/hooks/useOnValidSubmit';\nimport actionCreator from 'app/context/action/actionCreator';\nimport useUttaksplanInfo from 'app/utils/hooks/useUttaksplanInfo';\nimport { MorFarAdopsjonUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport DekningsgradSpørsmål from '../spørsmål/DekningsgradSpørsmål';\nimport { getDekningsgradFromString } from 'app/utils/getDekningsgradFromString';\nimport { lagUttaksplan } from 'app/utils/uttaksplan/lagUttaksplan';\nimport { storeAppState } from 'app/utils/submitUtils';\nimport { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport { getAntallUker } from 'app/steps/uttaksplan-info/utils/stønadskontoer';\nimport AdopsjonStartdatoValg from './adopsjonStartdatoValg';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport { YesOrNo, dateToISOString } from '@navikt/sif-common-formik-ds/lib';\nimport { Button, GuidePanel } from '@navikt/ds-react';\nimport { Link } from 'react-router-dom';\nimport { getPreviousStepHref } from 'app/steps/stepsConfig';\nimport { getHarAktivitetskravIPeriodeUtenUttak } from '@navikt/uttaksplan';\n\ninterface Props {\n    tilgjengeligeStønadskontoer100DTO: TilgjengeligeStønadskontoerDTO;\n    tilgjengeligeStønadskontoer80DTO: TilgjengeligeStønadskontoerDTO;\n}\n\nconst MorFarAdopsjon: FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer80DTO,\n    tilgjengeligeStønadskontoer100DTO,\n}) => {\n    const intl = useIntl();\n    const { state } = useForeldrepengesøknadContext();\n    const {\n        søkersituasjon,\n        annenForelder,\n        barn,\n        søker: { erAleneOmOmsorg },\n        dekningsgrad,\n        erEndringssøknad,\n    } = useSøknad();\n    const {\n        person: { fornavn, mellomnavn, etternavn },\n    } = useSøkerinfo();\n    const lagretUttaksplanInfo = useUttaksplanInfo<MorFarAdopsjonUttaksplanInfo>();\n\n    const erAdopsjon = søkersituasjon.situasjon === 'adopsjon';\n    const søkerErAleneOmOmsorg = !!erAleneOmOmsorg;\n    const annenForelderOppgittIkkeAleneOmOmsorg = isAnnenForelderOppgitt(annenForelder)\n        ? annenForelder.harRettPåForeldrepengerINorge !== undefined ||\n          annenForelder.harRettPåForeldrepengerIEØS !== undefined\n        : false;\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const bareFarMedmorHarRett =\n        erFarEllerMedmor &&\n        isAnnenForelderOppgitt(annenForelder) &&\n        !søkerErAleneOmOmsorg &&\n        !annenForelder.harRettPåForeldrepengerINorge &&\n        !annenForelder.harRettPåForeldrepengerIEØS;\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const familiehendelsesdatoDate = ISOStringToDate(familiehendelsesdato);\n    const førsteUttaksdagNesteBarnsSak =\n        state.barnFraNesteSak !== undefined ? state.barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n\n    const shouldRender =\n        erAdopsjon && (annenForelderOppgittIkkeAleneOmOmsorg || annenForelder.kanIkkeOppgis || søkerErAleneOmOmsorg);\n\n    const onValidSubmitHandler = (values: Partial<MorFarAdopsjonFormData>) => {\n        const submissionValues = mapMorFarAdopsjonFormToState(values);\n        const barnAdopsjonsdato = isAdoptertBarn(barn) ? barn.adopsjonsdato : undefined;\n        const antallUker = getAntallUker(tilgjengeligeStønadskontoer[values.dekningsgrad! === '100' ? 100 : 80]);\n\n        const startdato = finnStartdatoAdopsjon(\n            values.startdatoAdopsjonValg!,\n            values.annenStartdatoAdopsjon,\n            dateToISOString(barnAdopsjonsdato),\n            dateToISOString(ankomstdato),\n            values.søkersFørsteDag,\n        );\n\n        return [\n            actionCreator.setAntallUkerIUttaksplan(antallUker),\n            actionCreator.setUttaksplanInfo(submissionValues),\n            actionCreator.setDekningsgrad(getDekningsgradFromString(values.dekningsgrad)),\n            actionCreator.lagUttaksplanforslag(\n                lagUttaksplan({\n                    annenForelderErUfør: erMorUfør,\n                    erDeltUttak,\n                    erEndringssøknad,\n                    erEnkelEndringssøknad: erEndringssøknad,\n                    familiehendelsesdato: familiehendelsesdatoDate!,\n                    førsteUttaksdagEtterSeksUker: Uttaksdagen(\n                        Uttaksdagen(familiehendelsesdatoDate!).denneEllerNeste(),\n                    ).leggTil(30),\n                    situasjon: søkersituasjon.situasjon,\n                    søkerErFarEllerMedmor: erFarEllerMedmor,\n                    søkerHarMidlertidigOmsorg: false,\n                    tilgjengeligeStønadskontoer:\n                        tilgjengeligeStønadskontoer[getDekningsgradFromString(values.dekningsgrad)],\n                    uttaksplanSkjema: {\n                        fellesperiodeukerMor: submissionValues.fellesperiodeukerMor,\n                        startdatoPermisjon: startdato,\n                        antallDagerFellesperiodeFarMedmor: parseInt(submissionValues.antallDagerFellesperiode),\n                        antallUkerFellesperiodeFarMedmor: parseInt(submissionValues.antallUkerFellesperiode),\n                        harAnnenForelderSøktFP: submissionValues.harAnnenForelderSøktFP,\n                        morSinSisteUttaksdag: submissionValues.annenForeldersSisteDag,\n                        farSinFørsteUttaksdag: submissionValues.søkersFørsteDag,\n                    },\n                    bareFarMedmorHarRett: bareFarMedmorHarRett,\n                    termindato: undefined,\n                    harAktivitetskravIPeriodeUtenUttak: getHarAktivitetskravIPeriodeUtenUttak({\n                        erDeltUttak,\n                        morHarRett: !bareFarMedmorHarRett,\n                        søkerErAleneOmOmsorg,\n                    }),\n                    førsteUttaksdagNesteBarnsSak,\n                }),\n            ),\n        ];\n    };\n\n    const { handleSubmit, isSubmitting } = useOnValidSubmit(\n        onValidSubmitHandler,\n        SøknadRoutes.UTTAKSPLAN,\n        (state: ForeldrepengesøknadContextState) => storeAppState(state),\n    );\n\n    if (!shouldRender || !isAdoptertBarn(barn)) {\n        return null;\n    }\n\n    const erSøkerMor = !erFarEllerMedmor;\n\n    const oppgittAnnenForelder = isAnnenForelderOppgitt(annenForelder) ? annenForelder : undefined;\n    const harAnnenForelderRettPåForeldrepengerINorge = !!oppgittAnnenForelder?.harRettPåForeldrepengerINorge;\n    const fornavnAnnenForeldre = oppgittAnnenForelder?.fornavn;\n    const erAnnenPartUfør = !!oppgittAnnenForelder?.erUfør;\n    const navnAnnenPart = oppgittAnnenForelder\n        ? formaterNavn(oppgittAnnenForelder.fornavn, oppgittAnnenForelder.etternavn, true)\n        : '';\n\n    const erDeltUttak = isAnnenForelderOppgitt(annenForelder)\n        ? !!annenForelder.harRettPåForeldrepengerINorge || !!annenForelder.harRettPåForeldrepengerIEØS\n        : false;\n\n    const erMorUfør = erSøkerMor ? false : erAnnenPartUfør;\n\n    const navnSøker = formaterNavn(fornavn, etternavn, true, mellomnavn);\n    const navnMor = erSøkerMor ? navnSøker : navnAnnenPart;\n    const navnFarMedmor = erSøkerMor ? navnAnnenPart : navnSøker;\n\n    const erAdoptertIUtlandet = isAdoptertAnnetBarn(barn) ? barn.adoptertIUtlandet : false;\n    const ankomstdato = isAdoptertAnnetBarn(barn) ? barn.ankomstdato : undefined;\n    const antallBarn = barn.antallBarn;\n    const latestDate =\n        ankomstdato !== undefined && barn.adopsjonsdato !== undefined\n            ? dateToISOString(findEldsteDato([ankomstdato, barn.adopsjonsdato])) // todo - sjekk logikk her\n            : barn.adopsjonsdato;\n\n    const tilgjengeligeStønadskontoer = getValgtStønadskontoFor80Og100Prosent(\n        tilgjengeligeStønadskontoer80DTO,\n        tilgjengeligeStønadskontoer100DTO,\n    );\n\n    return (\n        <MorFarAdopsjonFormComponents.FormikWrapper\n            initialValues={getInitialMorFarAdopsjonValues(lagretUttaksplanInfo, dekningsgrad)}\n            onSubmit={handleSubmit}\n            renderForm={({ values: formValues, setFieldValue }) => {\n                const visibility = morFarAdopsjonQuestionsConfig.getVisbility({\n                    ...formValues,\n                    harAnnenForelderRettPåForeldrepengerINorge,\n                    erAleneOmOmsorg,\n                } as MorFarAdopsjonQuestionsPayload);\n\n                const valgtStønadskonto = tilgjengeligeStønadskontoer[formValues.dekningsgrad === '100' ? 100 : 80];\n\n                const tilgjengeligeDager = valgtStønadskonto\n                    ? getTilgjengeligeDager(valgtStønadskonto, false, Forelder.farMedmor)\n                    : undefined;\n\n                return (\n                    <MorFarAdopsjonFormComponents.Form includeButtons={false} includeValidationSummary={true}>\n                        <Block\n                            padBottom=\"xl\"\n                            visible={visibility.isIncluded(MorFarAdopsjonFormField.harAnnenForelderSøktFP)}\n                        >\n                            <MorFarAdopsjonFormComponents.YesOrNoQuestion\n                                name={MorFarAdopsjonFormField.harAnnenForelderSøktFP}\n                                legend={intlUtils(intl, 'uttaksplaninfo.spørsmål.harAnnenForelderSøktFP.label', {\n                                    navnAnnenForelder: fornavnAnnenForeldre,\n                                })}\n                            />\n                        </Block>\n                        {formValues.harAnnenForelderSøktFP === YesOrNo.YES && (\n                            <Block padBottom=\"xl\">\n                                <GuidePanel>\n                                    <FormattedMessage\n                                        id=\"uttaksplaninfo.informasjon.tilAnnenForelder\"\n                                        values={{\n                                            navn: getNavnGenitivEierform(fornavnAnnenForeldre!, intl.locale),\n                                        }}\n                                    />\n                                </GuidePanel>\n                            </Block>\n                        )}\n                        <Block padBottom=\"xl\" visible={visibility.isIncluded(MorFarAdopsjonFormField.dekningsgrad)}>\n                            <DekningsgradSpørsmål\n                                FormKomponent={MorFarAdopsjonFormComponents}\n                                dekningsgradFeltNavn={MorFarAdopsjonFormField.dekningsgrad}\n                                tilgjengeligeStønadskontoer={tilgjengeligeStønadskontoer}\n                                erDeltUttak={erDeltUttak}\n                            />\n                        </Block>\n                        <Block padBottom=\"xl\" visible={visibility.isAnswered(MorFarAdopsjonFormField.dekningsgrad)}>\n                            {tilgjengeligeDager && (\n                                <TilgjengeligeDagerGraf\n                                    erDeltUttak={erDeltUttak}\n                                    erFarEllerMedmor={!erSøkerMor}\n                                    navnFarMedmor={navnFarMedmor}\n                                    navnMor={navnMor}\n                                    tilgjengeligeDager={tilgjengeligeDager}\n                                />\n                            )}\n                        </Block>\n                        <Block visible={visibility.isIncluded(MorFarAdopsjonFormField.startdatoAdopsjonValg)}>\n                            <StartdatoAdopsjon valgtStartdatoAdopsjon={formValues.startdatoAdopsjonValg} />\n                        </Block>\n                        <Block\n                            padBottom=\"xl\"\n                            visible={visibility.isIncluded(MorFarAdopsjonFormField.annenForeldersSisteDag)}\n                        >\n                            <MorsSisteDagSpørsmål\n                                FormComponents={MorFarAdopsjonFormComponents}\n                                fieldName={MorFarAdopsjonFormField.annenForeldersSisteDag}\n                                navnMor={navnAnnenPart}\n                                familiehendelsesdato={familiehendelsesdato}\n                            />\n                        </Block>\n                        <Block padBottom=\"xl\" visible={visibility.isIncluded(MorFarAdopsjonFormField.søkersFørsteDag)}>\n                            <FarMedmorsFørsteDag\n                                FormComponents={MorFarAdopsjonFormComponents}\n                                fieldName={MorFarAdopsjonFormField.søkersFørsteDag}\n                                familiehendelsesdato={familiehendelsesdatoDate!}\n                                setFieldValue={setFieldValue}\n                                morsSisteDag={ISOStringToDate(formValues.annenForeldersSisteDag)}\n                                navnMor={navnMor}\n                                termindato={undefined}\n                                situasjon={søkersituasjon.situasjon}\n                                morHarRettTilForeldrepengerIEØS={false}\n                            />\n                        </Block>\n                        <Block\n                            padBottom=\"xl\"\n                            visible={\n                                visibility.isAnswered(MorFarAdopsjonFormField.søkersFørsteDag) &&\n                                !dateIsSameOrAfter(\n                                    ISOStringToDate(formValues.annenForeldersSisteDag),\n                                    ISOStringToDate(formValues.søkersFørsteDag),\n                                ) &&\n                                formValues.harAnnenForelderSøktFP === YesOrNo.YES\n                            }\n                        >\n                            {tilgjengeligeDager && (\n                                <AntallUkerOgDagerFellesperiodeFarMedmorSpørsmål\n                                    FormComponents={MorFarAdopsjonFormComponents}\n                                    ukerFieldName={MorFarAdopsjonFormField.antallUkerFellesperiode}\n                                    dagerFieldName={MorFarAdopsjonFormField.antallDagerFellesperiode}\n                                    antallDager={formValues.antallDagerFellesperiode!}\n                                    antallUker={formValues.antallUkerFellesperiode!}\n                                    setFieldValue={setFieldValue}\n                                    ukerMedFellesperiode={tilgjengeligeDager.dagerFelles / 5}\n                                />\n                            )}\n                        </Block>\n                        <Block\n                            padBottom=\"xl\"\n                            visible={\n                                formValues.startdatoAdopsjonValg === AdopsjonStartdatoValg.ANNEN &&\n                                dayjs(latestDate).isBefore(\n                                    dayjs(\n                                        finnStartdatoAdopsjon(\n                                            formValues.startdatoAdopsjonValg,\n                                            formValues.annenStartdatoAdopsjon,\n                                            dateToISOString(barn.adopsjonsdato),\n                                            dateToISOString(ankomstdato),\n                                            formValues.søkersFørsteDag,\n                                        ),\n                                    ),\n                                    'day',\n                                ) &&\n                                !isAdoptertStebarn(barn) &&\n                                !erDeltUttak\n                            }\n                        >\n                            <GuidePanel>\n                                <FormattedMessage\n                                    id={\n                                        erAdoptertIUtlandet === false\n                                            ? 'uttaksplaninfo.info.ikkeAdoptertIUtlandet'\n                                            : 'uttaksplaninfo.info.adoptertIUtlandet'\n                                    }\n                                />\n                            </GuidePanel>\n                        </Block>\n                        <Block visible={erAleneOmOmsorg === false && harAnnenForelderRettPåForeldrepengerINorge}>\n                            <Block\n                                padBottom=\"xl\"\n                                visible={\n                                    antallBarn > 1 &&\n                                    formValues.startdatoAdopsjonValg !== undefined &&\n                                    formValues.harAnnenForelderSøktFP !== YesOrNo.YES\n                                }\n                            >\n                                <GuidePanel>\n                                    <FormattedMessage\n                                        id=\"uttaksplaninfo.veileder.flerbarnsInformasjon\"\n                                        values={{\n                                            uker: getFlerbarnsuker(formValues.dekningsgrad!, antallBarn),\n                                            navnFar: navnFarMedmor,\n                                            navnMor: navnMor,\n                                        }}\n                                    />\n                                </GuidePanel>\n                            </Block>\n                            <Block\n                                padBottom=\"xl\"\n                                visible={visibility.isIncluded(MorFarAdopsjonFormField.fellesperiodeukerMor)}\n                            >\n                                <FordelingFellesperiodeSpørsmål\n                                    setFieldValue={setFieldValue}\n                                    valgtStønadskonto={valgtStønadskonto}\n                                    valgtFellesperiodeukerMor={formValues.fellesperiodeukerMor}\n                                    mor={navnMor}\n                                    farMedmor={navnFarMedmor}\n                                    annenForelderErFarEllerMedmor={!erSøkerMor}\n                                />\n                            </Block>\n                        </Block>\n                        <Block>\n                            <StepButtonWrapper>\n                                <Button variant=\"secondary\" as={Link} to={getPreviousStepHref('uttaksplanInfo')}>\n                                    <FormattedMessage id=\"backlink.label\" />\n                                </Button>\n                                {visibility.areAllQuestionsAnswered() && (\n                                    <Button type=\"submit\" disabled={isSubmitting} loading={isSubmitting}>\n                                        {intlUtils(intl, 'søknad.gåVidere')}\n                                    </Button>\n                                )}\n                            </StepButtonWrapper>\n                        </Block>\n                    </MorFarAdopsjonFormComponents.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default MorFarAdopsjon;\n","import { getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\nimport AdopsjonStartdatoValg from '../mor-far-adopsjon/adopsjonStartdatoValg';\n\nexport enum MorFarAdopsjonAnnenForelderHarRettIEØSFormField {\n    dekningsgrad = 'dekningsgrad',\n    startdatoAdopsjonValg = 'startdatoAdopsjonValg',\n    annenStartdatoAdopsjon = 'annenStartdatoAdopsjon',\n}\n\nexport interface MorFarAdopsjonAnnenForelderHarRettIEØSFormData {\n    [MorFarAdopsjonAnnenForelderHarRettIEØSFormField.dekningsgrad]: string;\n    [MorFarAdopsjonAnnenForelderHarRettIEØSFormField.startdatoAdopsjonValg]: AdopsjonStartdatoValg | undefined;\n    [MorFarAdopsjonAnnenForelderHarRettIEØSFormField.annenStartdatoAdopsjon]: string | undefined;\n}\n\nexport const MorFarAdopsjonAnnenForelderHarRettIEØSFormComponents = getTypedFormComponents<\n    MorFarAdopsjonAnnenForelderHarRettIEØSFormField,\n    MorFarAdopsjonAnnenForelderHarRettIEØSFormData\n>();\n","import { QuestionConfig, Questions } from '@navikt/sif-common-question-config';\nimport { hasValue } from '@navikt/fp-common';\nimport {\n    MorFarAdopsjonAnnenForelderHarRettIEØSFormData,\n    MorFarAdopsjonAnnenForelderHarRettIEØSFormField,\n} from './morFarAdopsjonAnnenForelderHarRettIEØSFormConfig';\nimport AdopsjonStartdatoValg from '../mor-far-adopsjon/adopsjonStartdatoValg';\nexport interface MorFarAdopsjonAnnenForelderHarRettIEØSQuestionsPayload\n    extends MorFarAdopsjonAnnenForelderHarRettIEØSFormData {\n    erFarEllerMedmor: boolean;\n}\nconst MorFarAdopsjonAnnenForelderHarRettIEØSFormConfig: QuestionConfig<\n    MorFarAdopsjonAnnenForelderHarRettIEØSQuestionsPayload,\n    MorFarAdopsjonAnnenForelderHarRettIEØSFormField\n> = {\n    [MorFarAdopsjonAnnenForelderHarRettIEØSFormField.dekningsgrad]: {\n        isAnswered: ({ dekningsgrad }) => hasValue(dekningsgrad),\n        isIncluded: () => true,\n    },\n    [MorFarAdopsjonAnnenForelderHarRettIEØSFormField.startdatoAdopsjonValg]: {\n        isAnswered: ({ startdatoAdopsjonValg }) => hasValue(startdatoAdopsjonValg),\n        isIncluded: ({ dekningsgrad }) => hasValue(dekningsgrad),\n    },\n    [MorFarAdopsjonAnnenForelderHarRettIEØSFormField.annenStartdatoAdopsjon]: {\n        isAnswered: ({ annenStartdatoAdopsjon }) => hasValue(annenStartdatoAdopsjon),\n        isIncluded: ({ dekningsgrad, startdatoAdopsjonValg }) =>\n            startdatoAdopsjonValg === AdopsjonStartdatoValg.ANNEN && hasValue(dekningsgrad),\n    },\n};\nexport const morFarAdopsjonAnnenForelderHarRettIEØSQuestionsConfig = Questions<\n    MorFarAdopsjonAnnenForelderHarRettIEØSQuestionsPayload,\n    MorFarAdopsjonAnnenForelderHarRettIEØSFormField\n>(MorFarAdopsjonAnnenForelderHarRettIEØSFormConfig);\n","import { MorFarAdopsjonAnnenForelderHarRettIEØSUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport { finnEnum } from '../mor-far-adopsjon/adopsjonStartdatoValg';\nimport {\n    MorFarAdopsjonAnnenForelderHarRettIEØSFormField,\n    MorFarAdopsjonAnnenForelderHarRettIEØSFormData,\n} from './morFarAdopsjonAnnenForelderHarRettIEØSFormConfig';\nimport { Dekningsgrad } from '@navikt/fp-common';\n\nconst initialMorFarAdopsjonAnnenForelderHarRettIEØSValues: MorFarAdopsjonAnnenForelderHarRettIEØSFormData = {\n    [MorFarAdopsjonAnnenForelderHarRettIEØSFormField.dekningsgrad]: '',\n    [MorFarAdopsjonAnnenForelderHarRettIEØSFormField.startdatoAdopsjonValg]: undefined,\n    [MorFarAdopsjonAnnenForelderHarRettIEØSFormField.annenStartdatoAdopsjon]: '',\n};\nexport const mapMorFarAdopsjonAnnenForelderHarRettIEØSFormToState = (\n    values: Partial<MorFarAdopsjonAnnenForelderHarRettIEØSFormData>,\n): MorFarAdopsjonAnnenForelderHarRettIEØSUttaksplanInfo => {\n    return {\n        dekningsgrad: values.dekningsgrad!,\n        startdatoAdopsjonValg: values.startdatoAdopsjonValg!,\n        annenStartdatoAdopsjon: values.annenStartdatoAdopsjon!,\n    };\n};\nexport const getInitialMorFarAdopsjonAnnenForelderHarRettIEØSValues = (\n    lagretUttaksplanInfo: MorFarAdopsjonAnnenForelderHarRettIEØSUttaksplanInfo | undefined,\n    dekningsgrad: Dekningsgrad,\n): MorFarAdopsjonAnnenForelderHarRettIEØSFormData => {\n    if (lagretUttaksplanInfo) {\n        return {\n            ...lagretUttaksplanInfo,\n            [MorFarAdopsjonAnnenForelderHarRettIEØSFormField.dekningsgrad]: dekningsgrad,\n            [MorFarAdopsjonAnnenForelderHarRettIEØSFormField.startdatoAdopsjonValg]: finnEnum(\n                lagretUttaksplanInfo.startdatoAdopsjonValg,\n            ),\n        };\n    }\n    return initialMorFarAdopsjonAnnenForelderHarRettIEØSValues;\n};\n","import { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport dayjs from 'dayjs';\nimport {\n    Block,\n    ISOStringToDate,\n    StepButtonWrapper,\n    Uttaksdagen,\n    formaterNavn,\n    getFlerbarnsuker,\n    intlUtils,\n    isAdoptertAnnetBarn,\n    isAdoptertBarn,\n    isAdoptertStebarn,\n    isAnnenForelderOppgitt,\n    isFarEllerMedmor,\n} from '@navikt/fp-common';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport { getFamiliehendelsedato } from 'app/utils/barnUtils';\nimport { getValgtStønadskontoFor80Og100Prosent } from 'app/utils/stønadskontoUtils';\nimport { TilgjengeligeStønadskontoerDTO } from 'app/types/TilgjengeligeStønadskontoerDTO';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport { findEldsteDato } from 'app/utils/dateUtils';\nimport SøknadRoutes from 'app/routes/routes';\nimport useOnValidSubmit from 'app/utils/hooks/useOnValidSubmit';\nimport actionCreator from 'app/context/action/actionCreator';\nimport useUttaksplanInfo from 'app/utils/hooks/useUttaksplanInfo';\nimport { MorFarAdopsjonAnnenForelderHarRettIEØSUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport DekningsgradSpørsmål from '../spørsmål/DekningsgradSpørsmål';\nimport { getDekningsgradFromString } from 'app/utils/getDekningsgradFromString';\nimport { lagUttaksplan } from 'app/utils/uttaksplan/lagUttaksplan';\nimport { storeAppState } from 'app/utils/submitUtils';\nimport { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport { getAntallUker } from 'app/steps/uttaksplan-info/utils/stønadskontoer';\nimport StartdatoAdopsjon, { finnStartdatoAdopsjon } from '../mor-far-adopsjon/StartdatoAdopsjon';\nimport {\n    morFarAdopsjonAnnenForelderHarRettIEØSQuestionsConfig,\n    MorFarAdopsjonAnnenForelderHarRettIEØSQuestionsPayload,\n} from './morFarAdopsjonAnnenForelderHarRettIEØSQuestionsConfig';\nimport {\n    MorFarAdopsjonAnnenForelderHarRettIEØSFormComponents,\n    MorFarAdopsjonAnnenForelderHarRettIEØSFormData,\n    MorFarAdopsjonAnnenForelderHarRettIEØSFormField,\n} from './morFarAdopsjonAnnenForelderHarRettIEØSFormConfig';\nimport {\n    getInitialMorFarAdopsjonAnnenForelderHarRettIEØSValues,\n    mapMorFarAdopsjonAnnenForelderHarRettIEØSFormToState,\n} from './morFarAdopsjonAnnenForelderHarRettIEØSUtils';\nimport AdopsjonStartdatoValg from '../mor-far-adopsjon/adopsjonStartdatoValg';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport { dateToISOString } from '@navikt/sif-common-formik-ds/lib';\nimport { Button, GuidePanel } from '@navikt/ds-react';\nimport { Link } from 'react-router-dom';\nimport { getPreviousStepHref } from 'app/steps/stepsConfig';\nimport { getHarAktivitetskravIPeriodeUtenUttak } from '@navikt/uttaksplan';\n\ninterface Props {\n    tilgjengeligeStønadskontoer100DTO: TilgjengeligeStønadskontoerDTO;\n    tilgjengeligeStønadskontoer80DTO: TilgjengeligeStønadskontoerDTO;\n}\n\nconst MorFarAdopsjonAnnenForelderHarRettIEØS: FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer80DTO,\n    tilgjengeligeStønadskontoer100DTO,\n}) => {\n    const intl = useIntl();\n    const { state } = useForeldrepengesøknadContext();\n    const { søkersituasjon, annenForelder, barn, dekningsgrad, erEndringssøknad } = useSøknad();\n    const {\n        person: { fornavn, mellomnavn, etternavn },\n    } = useSøkerinfo();\n    const lagretUttaksplanInfo = useUttaksplanInfo<MorFarAdopsjonAnnenForelderHarRettIEØSUttaksplanInfo>();\n    const erDeltUttak = true;\n    const erAdopsjon = søkersituasjon.situasjon === 'adopsjon';\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const familiehendelsesdatoDate = ISOStringToDate(familiehendelsesdato);\n    const førsteUttaksdagNesteBarnsSak =\n        state.barnFraNesteSak !== undefined ? state.barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n\n    const onValidSubmitHandler = (values: Partial<MorFarAdopsjonAnnenForelderHarRettIEØSFormData>) => {\n        const submissionValues = mapMorFarAdopsjonAnnenForelderHarRettIEØSFormToState(values);\n        const barnAdopsjonsdato = isAdoptertBarn(barn) ? barn.adopsjonsdato : undefined;\n        const antallUker = getAntallUker(tilgjengeligeStønadskontoer[values.dekningsgrad! === '100' ? 100 : 80]);\n\n        const startdato = finnStartdatoAdopsjon(\n            values.startdatoAdopsjonValg!,\n            values.annenStartdatoAdopsjon,\n            dateToISOString(barnAdopsjonsdato),\n            dateToISOString(ankomstdato),\n        );\n\n        return [\n            actionCreator.setAntallUkerIUttaksplan(antallUker),\n            actionCreator.setUttaksplanInfo(submissionValues),\n            actionCreator.setDekningsgrad(getDekningsgradFromString(values.dekningsgrad)),\n            actionCreator.lagUttaksplanforslag(\n                lagUttaksplan({\n                    annenForelderErUfør: false,\n                    erDeltUttak,\n                    erEndringssøknad,\n                    erEnkelEndringssøknad: erEndringssøknad,\n                    familiehendelsesdato: familiehendelsesdatoDate!,\n                    førsteUttaksdagEtterSeksUker: Uttaksdagen(\n                        Uttaksdagen(familiehendelsesdatoDate!).denneEllerNeste(),\n                    ).leggTil(30),\n                    situasjon: søkersituasjon.situasjon,\n                    søkerErFarEllerMedmor: erFarEllerMedmor,\n                    søkerHarMidlertidigOmsorg: false,\n                    tilgjengeligeStønadskontoer:\n                        tilgjengeligeStønadskontoer[getDekningsgradFromString(values.dekningsgrad)],\n                    uttaksplanSkjema: {\n                        startdatoPermisjon: startdato,\n                        farSinFørsteUttaksdag: erFarEllerMedmor ? startdato : undefined,\n                    },\n                    bareFarMedmorHarRett: false,\n                    termindato: undefined,\n                    harAktivitetskravIPeriodeUtenUttak: getHarAktivitetskravIPeriodeUtenUttak({\n                        erDeltUttak,\n                        morHarRett: true,\n                        søkerErAleneOmOmsorg: false,\n                    }),\n                    annenForelderHarRettPåForeldrepengerIEØS: true,\n                    førsteUttaksdagNesteBarnsSak,\n                }),\n            ),\n        ];\n    };\n\n    const { handleSubmit, isSubmitting } = useOnValidSubmit(\n        onValidSubmitHandler,\n        SøknadRoutes.UTTAKSPLAN,\n        (state: ForeldrepengesøknadContextState) => storeAppState(state),\n    );\n\n    if (!erAdopsjon || !isAdoptertBarn(barn)) {\n        return null;\n    }\n\n    const erSøkerMor = !erFarEllerMedmor;\n    const oppgittAnnenForelder = isAnnenForelderOppgitt(annenForelder) ? annenForelder : undefined;\n    const navnAnnenPart = oppgittAnnenForelder\n        ? formaterNavn(oppgittAnnenForelder.fornavn, oppgittAnnenForelder.etternavn, true)\n        : '';\n\n    const erDeltUttakINorge = false;\n    const navnSøker = formaterNavn(fornavn, etternavn, true, mellomnavn);\n    const navnMor = erSøkerMor ? navnSøker : navnAnnenPart;\n    const navnFarMedmor = erSøkerMor ? navnAnnenPart : navnSøker;\n    const erAdoptertIUtlandet = isAdoptertAnnetBarn(barn) ? barn.adoptertIUtlandet : false;\n    const ankomstdato = isAdoptertAnnetBarn(barn) ? barn.ankomstdato : undefined;\n    const antallBarn = barn.antallBarn;\n    const latestDate =\n        ankomstdato !== undefined && barn.adopsjonsdato !== undefined\n            ? dateToISOString(findEldsteDato([ankomstdato, barn.adopsjonsdato]))\n            : barn.adopsjonsdato;\n\n    const tilgjengeligeStønadskontoer = getValgtStønadskontoFor80Og100Prosent(\n        tilgjengeligeStønadskontoer80DTO,\n        tilgjengeligeStønadskontoer100DTO,\n    );\n\n    return (\n        <MorFarAdopsjonAnnenForelderHarRettIEØSFormComponents.FormikWrapper\n            initialValues={getInitialMorFarAdopsjonAnnenForelderHarRettIEØSValues(lagretUttaksplanInfo, dekningsgrad)}\n            onSubmit={handleSubmit}\n            renderForm={({ values: formValues }) => {\n                const visibility = morFarAdopsjonAnnenForelderHarRettIEØSQuestionsConfig.getVisbility({\n                    ...formValues,\n                    erFarEllerMedmor,\n                } as MorFarAdopsjonAnnenForelderHarRettIEØSQuestionsPayload);\n\n                return (\n                    <MorFarAdopsjonAnnenForelderHarRettIEØSFormComponents.Form\n                        includeButtons={false}\n                        includeValidationSummary={true}\n                    >\n                        <Block\n                            padBottom=\"xl\"\n                            visible={visibility.isIncluded(\n                                MorFarAdopsjonAnnenForelderHarRettIEØSFormField.dekningsgrad,\n                            )}\n                        >\n                            <DekningsgradSpørsmål\n                                FormKomponent={MorFarAdopsjonAnnenForelderHarRettIEØSFormComponents}\n                                dekningsgradFeltNavn={MorFarAdopsjonAnnenForelderHarRettIEØSFormField.dekningsgrad}\n                                tilgjengeligeStønadskontoer={tilgjengeligeStønadskontoer}\n                                erDeltUttak={erDeltUttakINorge}\n                            />\n                        </Block>\n                        <Block\n                            visible={visibility.isIncluded(\n                                MorFarAdopsjonAnnenForelderHarRettIEØSFormField.startdatoAdopsjonValg,\n                            )}\n                        >\n                            <StartdatoAdopsjon valgtStartdatoAdopsjon={formValues.startdatoAdopsjonValg} />\n                        </Block>\n                        <Block\n                            padBottom=\"xl\"\n                            visible={\n                                erAdopsjon &&\n                                isAdoptertBarn(barn) &&\n                                formValues.startdatoAdopsjonValg === AdopsjonStartdatoValg.ANNEN &&\n                                dayjs(latestDate).isBefore(\n                                    dayjs(\n                                        finnStartdatoAdopsjon(\n                                            formValues.startdatoAdopsjonValg!,\n                                            undefined,\n                                            dateToISOString(barn.adopsjonsdato),\n                                            dateToISOString(ankomstdato),\n                                        ),\n                                    ),\n                                    'day',\n                                ) &&\n                                !isAdoptertStebarn(barn) &&\n                                !erDeltUttak\n                            }\n                        >\n                            <GuidePanel>\n                                <FormattedMessage\n                                    id={\n                                        erAdoptertIUtlandet === false\n                                            ? 'uttaksplaninfo.info.ikkeAdoptertIUtlandet'\n                                            : 'uttaksplaninfo.info.adoptertIUtlandet'\n                                    }\n                                />\n                            </GuidePanel>\n                        </Block>\n                        <Block\n                            padBottom=\"xl\"\n                            visible={antallBarn > 1 && formValues.startdatoAdopsjonValg !== undefined}\n                        >\n                            <GuidePanel>\n                                <FormattedMessage\n                                    id=\"uttaksplaninfo.veileder.flerbarnsInformasjon.annenForelderHarRettIEØS\"\n                                    values={{\n                                        uker: getFlerbarnsuker(formValues.dekningsgrad!, antallBarn),\n                                        navnFar: navnFarMedmor,\n                                        navnMor: navnMor,\n                                    }}\n                                />\n                            </GuidePanel>\n                        </Block>\n                        <Block>\n                            <StepButtonWrapper>\n                                <Button variant=\"secondary\" as={Link} to={getPreviousStepHref('uttaksplanInfo')}>\n                                    <FormattedMessage id=\"backlink.label\" />\n                                </Button>\n                                {visibility.areAllQuestionsAnswered() && (\n                                    <Button type=\"submit\" disabled={isSubmitting} loading={isSubmitting}>\n                                        {intlUtils(intl, 'søknad.gåVidere')}\n                                    </Button>\n                                )}\n                            </StepButtonWrapper>\n                        </Block>\n                    </MorFarAdopsjonAnnenForelderHarRettIEØSFormComponents.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default MorFarAdopsjonAnnenForelderHarRettIEØS;\n","import { getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\n\nexport enum MorFarFødselAnnenForelderHarRettIEØSFormField {\n    dekningsgrad = 'dekningsgrad',\n    permisjonStartdato = 'permisjonStartdato',\n    skalIkkeHaUttakFørTermin = 'skalIkkeHaUttakFørTermin',\n}\n\nexport interface MorFarFødselAnnenForelderHarRettIEØSFormData {\n    [MorFarFødselAnnenForelderHarRettIEØSFormField.dekningsgrad]: string;\n    [MorFarFødselAnnenForelderHarRettIEØSFormField.permisjonStartdato]: string;\n    [MorFarFødselAnnenForelderHarRettIEØSFormField.skalIkkeHaUttakFørTermin]: boolean | undefined;\n}\n\nexport const MorFarFødselAnnenForelderHarRettIEØSFormComponents = getTypedFormComponents<\n    MorFarFødselAnnenForelderHarRettIEØSFormField,\n    MorFarFødselAnnenForelderHarRettIEØSFormData\n>();\n","import { QuestionConfig, Questions } from '@navikt/sif-common-question-config';\nimport { hasValue } from '@navikt/fp-common';\nimport {\n    MorFarFødselAnnenForelderHarRettIEØSFormData,\n    MorFarFødselAnnenForelderHarRettIEØSFormField,\n} from './morFarFødselAnnenForelderHarRettIEØSFormConfig';\nexport interface MorFarFødselAnnenForelderHarRettIEØSQuestionsPayload\n    extends MorFarFødselAnnenForelderHarRettIEØSFormData {\n    erFarEllerMedmor: boolean;\n}\n\nconst MorFarFødselAnnenForelderHarRettIEØSFormConfig: QuestionConfig<\n    MorFarFødselAnnenForelderHarRettIEØSQuestionsPayload,\n    MorFarFødselAnnenForelderHarRettIEØSFormField\n> = {\n    [MorFarFødselAnnenForelderHarRettIEØSFormField.dekningsgrad]: {\n        isAnswered: ({ dekningsgrad }) => hasValue(dekningsgrad),\n        isIncluded: () => true,\n    },\n    [MorFarFødselAnnenForelderHarRettIEØSFormField.permisjonStartdato]: {\n        isAnswered: ({ permisjonStartdato }) => hasValue(permisjonStartdato),\n        isIncluded: ({ dekningsgrad }) => hasValue(dekningsgrad),\n    },\n};\n\nexport const morFarFødselAnnenForelderHarRettIEØSQuestionsConfig = Questions<\n    MorFarFødselAnnenForelderHarRettIEØSQuestionsPayload,\n    MorFarFødselAnnenForelderHarRettIEØSFormField\n>(MorFarFødselAnnenForelderHarRettIEØSFormConfig);\n","import { MorFarFødselAnnenForelderHarRettIEØSUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport {\n    MorFarFødselAnnenForelderHarRettIEØSFormField,\n    MorFarFødselAnnenForelderHarRettIEØSFormData,\n} from './morFarFødselAnnenForelderHarRettIEØSFormConfig';\nimport { dateToISOString } from '@navikt/sif-common-formik-ds/lib';\nimport { Dekningsgrad } from '@navikt/fp-common';\n\nconst initialMorFarFødselAnnenForelderHarRettIEØSValues: MorFarFødselAnnenForelderHarRettIEØSFormData = {\n    [MorFarFødselAnnenForelderHarRettIEØSFormField.dekningsgrad]: '',\n    [MorFarFødselAnnenForelderHarRettIEØSFormField.permisjonStartdato]: '',\n    [MorFarFødselAnnenForelderHarRettIEØSFormField.skalIkkeHaUttakFørTermin]: undefined,\n};\nexport const mapMorFarFødselAnnenForelderHarRettIEØSFormToState = (\n    values: Partial<MorFarFødselAnnenForelderHarRettIEØSFormData>,\n): MorFarFødselAnnenForelderHarRettIEØSUttaksplanInfo => {\n    return {\n        dekningsgrad: values.dekningsgrad!,\n        permisjonStartdato: values.permisjonStartdato!,\n        skalIkkeHaUttakFørTermin: values.skalIkkeHaUttakFørTermin,\n    };\n};\nexport const getInitialMorFarFødselAnnenForelderHarRettIEØSValues = (\n    defaultPermisjonStartdato: Date,\n    lagretUttaksplanInfo: MorFarFødselAnnenForelderHarRettIEØSUttaksplanInfo | undefined,\n    dekningsgrad: Dekningsgrad,\n): MorFarFødselAnnenForelderHarRettIEØSFormData => {\n    if (lagretUttaksplanInfo) {\n        return {\n            ...lagretUttaksplanInfo,\n            [MorFarFødselAnnenForelderHarRettIEØSFormField.dekningsgrad]: dekningsgrad,\n        };\n    }\n    return {\n        ...initialMorFarFødselAnnenForelderHarRettIEØSValues,\n        [MorFarFødselAnnenForelderHarRettIEØSFormField.permisjonStartdato]: dateToISOString(defaultPermisjonStartdato),\n    };\n};\n","import { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport {\n    Block,\n    ISOStringToDate,\n    StepButtonWrapper,\n    Tidsperioden,\n    Uttaksdagen,\n    formaterNavn,\n    getFlerbarnsuker,\n    hasValue,\n    intlUtils,\n    isAnnenForelderOppgitt,\n    isFarEllerMedmor,\n    uttaksConstants,\n} from '@navikt/fp-common';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport { getFamiliehendelsedato, getFødselsdato, getTermindato } from 'app/utils/barnUtils';\nimport { getValgtStønadskontoFor80Og100Prosent } from 'app/utils/stønadskontoUtils';\nimport { TilgjengeligeStønadskontoerDTO } from 'app/types/TilgjengeligeStønadskontoerDTO';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport FarMedmorsFørsteDag from '../spørsmål/FarMedmorsFørsteDag';\nimport SøknadRoutes from 'app/routes/routes';\nimport useOnValidSubmit from 'app/utils/hooks/useOnValidSubmit';\nimport actionCreator from 'app/context/action/actionCreator';\nimport useUttaksplanInfo from 'app/utils/hooks/useUttaksplanInfo';\nimport { MorFarFødselAnnenForelderHarRettIEØSUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport DekningsgradSpørsmål from '../spørsmål/DekningsgradSpørsmål';\nimport { getDekningsgradFromString } from 'app/utils/getDekningsgradFromString';\nimport { lagUttaksplan } from 'app/utils/uttaksplan/lagUttaksplan';\nimport { storeAppState } from 'app/utils/submitUtils';\nimport { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport { getAntallUker } from 'app/steps/uttaksplan-info/utils/stønadskontoer';\nimport {\n    morFarFødselAnnenForelderHarRettIEØSQuestionsConfig,\n    MorFarFødselAnnenForelderHarRettIEØSQuestionsPayload,\n} from './morFarFødselAnnenForelderHarRettIEØSQuestionsConfig';\nimport {\n    MorFarFødselAnnenForelderHarRettIEØSFormComponents as MorFarFødselAnnenForelderHarRettIEØSFormComponents,\n    MorFarFødselAnnenForelderHarRettIEØSFormData,\n    MorFarFødselAnnenForelderHarRettIEØSFormField,\n} from './morFarFødselAnnenForelderHarRettIEØSFormConfig';\nimport {\n    getInitialMorFarFødselAnnenForelderHarRettIEØSValues,\n    mapMorFarFødselAnnenForelderHarRettIEØSFormToState,\n} from './morFarFødselAnnenForelderHarRettIEØSUtils';\nimport { skalViseInfoOmPrematuruker } from 'app/utils/uttaksplanInfoUtils';\nimport StartdatoPermisjonMor from '../mor-fodsel/StartdatoPermisjonMor';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport { Button, GuidePanel } from '@navikt/ds-react';\nimport { Link } from 'react-router-dom';\nimport { getPreviousStepHref } from 'app/steps/stepsConfig';\nimport { getHarAktivitetskravIPeriodeUtenUttak } from '@navikt/uttaksplan';\n\ninterface Props {\n    tilgjengeligeStønadskontoer100DTO: TilgjengeligeStønadskontoerDTO;\n    tilgjengeligeStønadskontoer80DTO: TilgjengeligeStønadskontoerDTO;\n}\n\nconst MorFarFødselAnnenForelderHarRettIEØS: FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer80DTO,\n    tilgjengeligeStønadskontoer100DTO,\n}) => {\n    const intl = useIntl();\n    const { state } = useForeldrepengesøknadContext();\n    const { søkersituasjon, annenForelder, barn, dekningsgrad, erEndringssøknad } = useSøknad();\n    const {\n        person: { fornavn, mellomnavn, etternavn },\n    } = useSøkerinfo();\n    const fødselsdato = getFødselsdato(barn);\n    const termindato = getTermindato(barn);\n    const lagretUttaksplanInfo = useUttaksplanInfo<MorFarFødselAnnenForelderHarRettIEØSUttaksplanInfo>();\n    const erDeltUttak = true;\n    const erFødsel = søkersituasjon.situasjon === 'fødsel';\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const familiehendelsesdatoDate = ISOStringToDate(familiehendelsesdato);\n    const førsteUttaksdagNesteBarnsSak =\n        state.barnFraNesteSak !== undefined ? state.barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n\n    const shouldRender = erFødsel;\n\n    const onValidSubmitHandler = (values: Partial<MorFarFødselAnnenForelderHarRettIEØSFormData>) => {\n        const submissionValues = mapMorFarFødselAnnenForelderHarRettIEØSFormToState(values);\n        const antallUker = getAntallUker(tilgjengeligeStønadskontoer[values.dekningsgrad! === '100' ? 100 : 80]);\n        const startdato = hasValue(values.permisjonStartdato) ? values.permisjonStartdato : undefined;\n\n        return [\n            actionCreator.setAntallUkerIUttaksplan(antallUker),\n            actionCreator.setUttaksplanInfo(submissionValues),\n            actionCreator.setDekningsgrad(getDekningsgradFromString(values.dekningsgrad)),\n            actionCreator.lagUttaksplanforslag(\n                lagUttaksplan({\n                    annenForelderErUfør: false,\n                    erDeltUttak,\n                    erEndringssøknad,\n                    erEnkelEndringssøknad: erEndringssøknad,\n                    familiehendelsesdato: familiehendelsesdatoDate!,\n                    førsteUttaksdagEtterSeksUker: Uttaksdagen(\n                        Uttaksdagen(familiehendelsesdatoDate!).denneEllerNeste(),\n                    ).leggTil(30),\n                    situasjon: søkersituasjon.situasjon,\n                    søkerErFarEllerMedmor: erFarEllerMedmor,\n                    søkerHarMidlertidigOmsorg: false,\n                    tilgjengeligeStønadskontoer:\n                        tilgjengeligeStønadskontoer[getDekningsgradFromString(values.dekningsgrad)],\n                    uttaksplanSkjema: {\n                        startdatoPermisjon: submissionValues.skalIkkeHaUttakFørTermin ? undefined : startdato,\n                        farSinFørsteUttaksdag: erFarEllerMedmor ? startdato : undefined,\n                    },\n                    bareFarMedmorHarRett: false,\n                    termindato: undefined,\n                    harAktivitetskravIPeriodeUtenUttak: getHarAktivitetskravIPeriodeUtenUttak({\n                        erDeltUttak,\n                        morHarRett: true,\n                        søkerErAleneOmOmsorg: false,\n                    }),\n                    annenForelderHarRettPåForeldrepengerIEØS: true,\n                    førsteUttaksdagNesteBarnsSak,\n                }),\n            ),\n        ];\n    };\n\n    const { handleSubmit, isSubmitting } = useOnValidSubmit(\n        onValidSubmitHandler,\n        SøknadRoutes.UTTAKSPLAN,\n        (state: ForeldrepengesøknadContextState) => storeAppState(state),\n    );\n\n    if (!shouldRender) {\n        return null;\n    }\n\n    const erSøkerMor = !erFarEllerMedmor;\n    const oppgittAnnenForelder = isAnnenForelderOppgitt(annenForelder) ? annenForelder : undefined;\n\n    const navnAnnenPart = oppgittAnnenForelder\n        ? formaterNavn(oppgittAnnenForelder.fornavn, oppgittAnnenForelder.etternavn, true)\n        : '';\n\n    const erDeltUttakINorge = false;\n\n    const navnSøker = formaterNavn(fornavn, etternavn, true, mellomnavn);\n    const navnMor = erSøkerMor ? navnSøker : navnAnnenPart;\n    const navnFarMedmor = erSøkerMor ? navnAnnenPart : navnSøker;\n    const antallBarn = barn.antallBarn;\n    const tilgjengeligeStønadskontoer = getValgtStønadskontoFor80Og100Prosent(\n        tilgjengeligeStønadskontoer80DTO,\n        tilgjengeligeStønadskontoer100DTO,\n    );\n\n    const visInfoOmPrematuruker =\n        !erFarEllerMedmor && skalViseInfoOmPrematuruker(fødselsdato, termindato, søkersituasjon.situasjon);\n    const ekstraDagerGrunnetPrematurFødsel = visInfoOmPrematuruker\n        ? Tidsperioden({ fom: fødselsdato!, tom: termindato! }).getAntallUttaksdager() - 1\n        : undefined;\n    const førsteUttaksdag = Uttaksdagen(ISOStringToDate(familiehendelsesdato)!).denneEllerNeste();\n    const defaultPermisjonStartdato = erFarEllerMedmor\n        ? førsteUttaksdag\n        : Uttaksdagen(førsteUttaksdag).trekkFra(uttaksConstants.ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5);\n    return (\n        <MorFarFødselAnnenForelderHarRettIEØSFormComponents.FormikWrapper\n            initialValues={getInitialMorFarFødselAnnenForelderHarRettIEØSValues(\n                defaultPermisjonStartdato,\n                lagretUttaksplanInfo,\n                dekningsgrad,\n            )}\n            onSubmit={handleSubmit}\n            renderForm={({ values: formValues, setFieldValue }) => {\n                const visibility = morFarFødselAnnenForelderHarRettIEØSQuestionsConfig.getVisbility({\n                    ...formValues,\n                    erFarEllerMedmor,\n                } as MorFarFødselAnnenForelderHarRettIEØSQuestionsPayload);\n\n                return (\n                    <MorFarFødselAnnenForelderHarRettIEØSFormComponents.Form\n                        includeButtons={false}\n                        includeValidationSummary={true}\n                    >\n                        <Block\n                            padBottom=\"xl\"\n                            visible={visibility.isIncluded(MorFarFødselAnnenForelderHarRettIEØSFormField.dekningsgrad)}\n                        >\n                            <DekningsgradSpørsmål\n                                FormKomponent={MorFarFødselAnnenForelderHarRettIEØSFormComponents}\n                                dekningsgradFeltNavn={MorFarFødselAnnenForelderHarRettIEØSFormField.dekningsgrad}\n                                tilgjengeligeStønadskontoer={tilgjengeligeStønadskontoer}\n                                erDeltUttak={erDeltUttakINorge}\n                            />\n                        </Block>\n                        <Block padBottom=\"xl\" visible={visInfoOmPrematuruker === true}>\n                            <GuidePanel>\n                                <FormattedMessage\n                                    id=\"uttaksplaninfo.veileder.informasjonPrematuruker\"\n                                    values={{\n                                        antallprematuruker: Math.floor(ekstraDagerGrunnetPrematurFødsel! / 5),\n                                        antallprematurdager: ekstraDagerGrunnetPrematurFødsel! % 5,\n                                    }}\n                                />\n                            </GuidePanel>\n                        </Block>\n                        <Block\n                            visible={\n                                !erFarEllerMedmor &&\n                                visibility.isIncluded(MorFarFødselAnnenForelderHarRettIEØSFormField.permisjonStartdato)\n                            }\n                        >\n                            <StartdatoPermisjonMor\n                                permisjonStartdato={formValues.permisjonStartdato!}\n                                skalIkkeHaUttakFørTermin={formValues.skalIkkeHaUttakFørTermin!}\n                                termindato={termindato}\n                            />\n                        </Block>\n                        <Block\n                            padBottom=\"xl\"\n                            visible={\n                                erFarEllerMedmor &&\n                                visibility.isIncluded(MorFarFødselAnnenForelderHarRettIEØSFormField.permisjonStartdato)\n                            }\n                        >\n                            <FarMedmorsFørsteDag\n                                FormComponents={MorFarFødselAnnenForelderHarRettIEØSFormComponents}\n                                fieldName={MorFarFødselAnnenForelderHarRettIEØSFormField.permisjonStartdato}\n                                familiehendelsesdato={familiehendelsesdatoDate!}\n                                setFieldValue={setFieldValue}\n                                morsSisteDag={undefined}\n                                navnMor={navnMor}\n                                termindato={undefined}\n                                situasjon={søkersituasjon.situasjon}\n                                morHarRettTilForeldrepengerIEØS={true}\n                            />\n                        </Block>\n                        <Block\n                            padBottom=\"xl\"\n                            visible={\n                                visibility.isAnswered(MorFarFødselAnnenForelderHarRettIEØSFormField.dekningsgrad) &&\n                                antallBarn > 1 &&\n                                (formValues.permisjonStartdato !== undefined ||\n                                    formValues.skalIkkeHaUttakFørTermin === true)\n                            }\n                        >\n                            <GuidePanel>\n                                <FormattedMessage\n                                    id=\"uttaksplaninfo.veileder.flerbarnsInformasjon.annenForelderHarRettIEØS\"\n                                    values={{\n                                        uker: getFlerbarnsuker(formValues.dekningsgrad!, antallBarn),\n                                        navnFar: navnFarMedmor,\n                                        navnMor: navnMor,\n                                    }}\n                                />\n                            </GuidePanel>\n                        </Block>\n                        <Block>\n                            <StepButtonWrapper>\n                                <Button variant=\"secondary\" as={Link} to={getPreviousStepHref('uttaksplanInfo')}>\n                                    <FormattedMessage id=\"backlink.label\" />\n                                </Button>\n                                {visibility.areAllQuestionsAnswered() && (\n                                    <Button type=\"submit\" disabled={isSubmitting} loading={isSubmitting}>\n                                        {intlUtils(intl, 'søknad.gåVidere')}\n                                    </Button>\n                                )}\n                            </StepButtonWrapper>\n                        </Block>\n                    </MorFarFødselAnnenForelderHarRettIEØSFormComponents.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default MorFarFødselAnnenForelderHarRettIEØS;\n","import { getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\n\nexport enum FarMedmorAleneomsorgFødselFormField {\n    dekningsgrad = 'dekningsgrad',\n    startPåOmsorgsovertakelse = 'startPåOmsorgsovertakelse',\n    startdatoUttak = 'startdatoUttak',\n}\n\nexport interface FarMedmorAleneomsorgFødselFormData {\n    [FarMedmorAleneomsorgFødselFormField.dekningsgrad]: string;\n    [FarMedmorAleneomsorgFødselFormField.startPåOmsorgsovertakelse]: string;\n    [FarMedmorAleneomsorgFødselFormField.startdatoUttak]: string;\n}\n\nexport const FarMedmorAleneomsorgFødselFormComponents = getTypedFormComponents<\n    FarMedmorAleneomsorgFødselFormField,\n    FarMedmorAleneomsorgFødselFormData\n>();\n","import { hasValue } from '@navikt/fp-common';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport {\n    FarMedmorAleneomsorgFødselFormData,\n    FarMedmorAleneomsorgFødselFormField,\n} from './farMedmorAleneomsorgFødselFormConfig';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\n\nconst FarMedmorAleneomsorgFødselFormConfig: QuestionConfig<\n    FarMedmorAleneomsorgFødselFormData,\n    FarMedmorAleneomsorgFødselFormField\n> = {\n    [FarMedmorAleneomsorgFødselFormField.dekningsgrad]: {\n        isIncluded: () => true,\n        isAnswered: ({ dekningsgrad }) => hasValue(dekningsgrad),\n    },\n    [FarMedmorAleneomsorgFødselFormField.startPåOmsorgsovertakelse]: {\n        isIncluded: () => true,\n        isAnswered: ({ startPåOmsorgsovertakelse }) => startPåOmsorgsovertakelse !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ dekningsgrad }) => hasValue(dekningsgrad),\n    },\n    [FarMedmorAleneomsorgFødselFormField.startdatoUttak]: {\n        isIncluded: ({ startPåOmsorgsovertakelse }) => startPåOmsorgsovertakelse === YesOrNo.NO,\n        isAnswered: ({ startdatoUttak }) => hasValue(startdatoUttak),\n        visibilityFilter: ({ startPåOmsorgsovertakelse }) => startPåOmsorgsovertakelse === YesOrNo.NO,\n    },\n};\n\nconst farMedmorAleneomsorgFødselQuestionsConfig = Questions<\n    FarMedmorAleneomsorgFødselFormData,\n    FarMedmorAleneomsorgFødselFormField\n>(FarMedmorAleneomsorgFødselFormConfig);\n\nexport default farMedmorAleneomsorgFødselQuestionsConfig;\n","import { FarMedmorAleneomsorgFødselUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport dayjs from 'dayjs';\nimport {\n    FarMedmorAleneomsorgFødselFormData,\n    FarMedmorAleneomsorgFødselFormField,\n} from './farMedmorAleneomsorgFødselFormConfig';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\nimport { Dekningsgrad } from '@navikt/fp-common';\n\nconst initialFarMedmorAleneomsorgFødselValues: FarMedmorAleneomsorgFødselFormData = {\n    [FarMedmorAleneomsorgFødselFormField.dekningsgrad]: '',\n    [FarMedmorAleneomsorgFødselFormField.startPåOmsorgsovertakelse]: YesOrNo.UNANSWERED,\n    [FarMedmorAleneomsorgFødselFormField.startdatoUttak]: '',\n};\n\nexport const mapFarMedmorAleneomsorgFødselFormToState = (\n    values: Partial<FarMedmorAleneomsorgFødselFormData>,\n    datoForAleneomsorg: string,\n): FarMedmorAleneomsorgFødselUttaksplanInfo => {\n    return {\n        fellesperiodeukerMor: undefined,\n        startdatoUttak: values.startPåOmsorgsovertakelse === YesOrNo.YES ? datoForAleneomsorg : values.startdatoUttak!,\n    };\n};\n\nexport const getInitialFarMedmorAleneomsorgFødselValues = (\n    lagretUttaksplanInfo: FarMedmorAleneomsorgFødselUttaksplanInfo | undefined,\n    datoForAleneomsorg: string,\n    dekningsgrad: Dekningsgrad,\n): FarMedmorAleneomsorgFødselFormData => {\n    if (lagretUttaksplanInfo) {\n        const startetPåOmsorgsovertakelse = dayjs(lagretUttaksplanInfo.startdatoUttak).isSame(\n            dayjs(datoForAleneomsorg),\n            'day',\n        );\n\n        return {\n            dekningsgrad,\n            startPåOmsorgsovertakelse: startetPåOmsorgsovertakelse ? YesOrNo.YES : YesOrNo.NO,\n            startdatoUttak: startetPåOmsorgsovertakelse ? '' : lagretUttaksplanInfo.startdatoUttak,\n        };\n    }\n\n    return initialFarMedmorAleneomsorgFødselValues;\n};\n","import { isISODateString } from '@navikt/ds-datepicker';\nimport { formatDate, hasValue, intlUtils } from '@navikt/fp-common';\nimport { isDateABeforeDateB } from 'app/utils/dateUtils';\nimport { IntlShape } from 'react-intl';\n\nexport const validateStartdatoUttakFarMedmorAleneomsorgFødsel =\n    (intl: IntlShape, familiehendelsesdato: string) => (startdatoUttak: string) => {\n        if (!hasValue(startdatoUttak)) {\n            return intlUtils(intl, 'valideringsfeil.uttaksplaninfo.farMedmorAleneomsorgFødsel.startdatoUttak.påkrevd');\n        }\n\n        if (!isISODateString(startdatoUttak)) {\n            return intlUtils(\n                intl,\n                'valideringsfeil.uttaksplaninfo.farMedmorAleneomsorgFødsel.startdatoUttak.gyldigDato',\n            );\n        }\n\n        if (isDateABeforeDateB(startdatoUttak, familiehendelsesdato)) {\n            return intlUtils(\n                intl,\n                'valideringsfeil.uttaksplaninfo.farMedmorAleneomsorgFødsel.startdatoUttak.etterFamiliehendelsesdato',\n                { familiehendelsesdato: formatDate(familiehendelsesdato) },\n            );\n        }\n\n        return undefined;\n    };\n","import {\n    Block,\n    Forelder,\n    ISOStringToDate,\n    StepButtonWrapper,\n    Uttaksdagen,\n    formaterDatoUtenDag,\n    getErMorUfør,\n    intlUtils,\n    isAnnenForelderOppgitt,\n    isFarEllerMedmor,\n} from '@navikt/fp-common';\nimport actionCreator from 'app/context/action/actionCreator';\nimport { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport { FarMedmorAleneomsorgFødselUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport SøknadRoutes from 'app/routes/routes';\nimport { getAntallUker } from 'app/steps/uttaksplan-info/utils/stønadskontoer';\nimport { TilgjengeligeStønadskontoerDTO } from 'app/types/TilgjengeligeStønadskontoerDTO';\nimport { getFamiliehendelsedato, getTermindato } from 'app/utils/barnUtils';\nimport { getDekningsgradFromString } from 'app/utils/getDekningsgradFromString';\nimport useOnValidSubmit from 'app/utils/hooks/useOnValidSubmit';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport useUttaksplanInfo from 'app/utils/hooks/useUttaksplanInfo';\nimport { getValgtStønadskontoFor80Og100Prosent } from 'app/utils/stønadskontoUtils';\nimport { storeAppState } from 'app/utils/submitUtils';\nimport { lagUttaksplan } from 'app/utils/uttaksplan/lagUttaksplan';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport TilgjengeligeDagerGraf from '../../tilgjengeligeDagerGraf/TilgjengeligeDagerGraf';\nimport { getTilgjengeligeDager } from '../../tilgjengeligeDagerGraf/tilgjengeligeDagerUtils';\nimport DekningsgradSpørsmål from '../spørsmål/DekningsgradSpørsmål';\nimport {\n    FarMedmorAleneomsorgFødselFormComponents,\n    FarMedmorAleneomsorgFødselFormData,\n    FarMedmorAleneomsorgFødselFormField,\n} from './farMedmorAleneomsorgFødselFormConfig';\nimport farMedmorAleneomsorgFødselAdopsjonQuestionsConfig from './farMedmorAleneomsorgFødselQuestionsConfig';\nimport {\n    getInitialFarMedmorAleneomsorgFødselValues,\n    mapFarMedmorAleneomsorgFødselFormToState,\n} from './farMedmorAleneomsorgFødselUtils';\nimport { validateStartdatoUttakFarMedmorAleneomsorgFødsel } from './validation/farMedmorAleneomsorgFødselValidation';\nimport { Button } from '@navikt/ds-react';\nimport { dateToISOString } from '@navikt/sif-common-formik-ds/lib';\nimport { Link } from 'react-router-dom';\nimport { getPreviousStepHref } from 'app/steps/stepsConfig';\nimport { getHarAktivitetskravIPeriodeUtenUttak } from '@navikt/uttaksplan';\n\ninterface Props {\n    tilgjengeligeStønadskontoer100DTO: TilgjengeligeStønadskontoerDTO;\n    tilgjengeligeStønadskontoer80DTO: TilgjengeligeStønadskontoerDTO;\n}\n\nconst FarMedmorAleneomsorgFødsel: FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer100DTO,\n    tilgjengeligeStønadskontoer80DTO,\n}) => {\n    const { state } = useForeldrepengesøknadContext();\n    const { søkersituasjon, søker, annenForelder, barn, dekningsgrad, erEndringssøknad } = useSøknad();\n    const { person } = useSøkerinfo();\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const familiehendelsesdatoDate = ISOStringToDate(familiehendelsesdato);\n    const datoForAleneomsorg = annenForelder.kanIkkeOppgis ? familiehendelsesdatoDate : barn.datoForAleneomsorg;\n    const intl = useIntl();\n\n    const erFødsel = søkersituasjon.situasjon === 'fødsel';\n    const lagretUttaksplanInfo = useUttaksplanInfo<FarMedmorAleneomsorgFødselUttaksplanInfo>();\n    const erMorUfør = getErMorUfør(annenForelder, erFarEllerMedmor);\n    const tilgjengeligeStønadskontoer = getValgtStønadskontoFor80Og100Prosent(\n        tilgjengeligeStønadskontoer80DTO,\n        tilgjengeligeStønadskontoer100DTO,\n    );\n    const termindato = getTermindato(barn);\n    const førsteUttaksdagNesteBarnsSak =\n        state.barnFraNesteSak !== undefined ? state.barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n    const onValidSubmitHandler = (values: Partial<FarMedmorAleneomsorgFødselFormData>) => {\n        const uttaksplanInfo: FarMedmorAleneomsorgFødselUttaksplanInfo = mapFarMedmorAleneomsorgFødselFormToState(\n            values,\n            dateToISOString(datoForAleneomsorg),\n        );\n        const kontoerForValgtDekningsgrad = tilgjengeligeStønadskontoer[getDekningsgradFromString(values.dekningsgrad)];\n        const antallUker = getAntallUker(kontoerForValgtDekningsgrad);\n\n        return [\n            actionCreator.setAntallUkerIUttaksplan(antallUker),\n            actionCreator.setUttaksplanInfo(uttaksplanInfo),\n            actionCreator.setDekningsgrad(getDekningsgradFromString(values.dekningsgrad)),\n            actionCreator.lagUttaksplanforslag(\n                lagUttaksplan({\n                    annenForelderErUfør: erMorUfør,\n                    erDeltUttak: false,\n                    erEndringssøknad,\n                    erEnkelEndringssøknad: erEndringssøknad,\n                    familiehendelsesdato: familiehendelsesdatoDate!,\n                    førsteUttaksdagEtterSeksUker: Uttaksdagen(\n                        Uttaksdagen(familiehendelsesdatoDate!).denneEllerNeste(),\n                    ).leggTil(30),\n                    situasjon: erFødsel ? 'fødsel' : 'adopsjon',\n                    søkerErFarEllerMedmor: erFarEllerMedmor,\n                    søkerHarMidlertidigOmsorg: false,\n                    tilgjengeligeStønadskontoer:\n                        tilgjengeligeStønadskontoer[getDekningsgradFromString(values.dekningsgrad)],\n                    uttaksplanSkjema: {\n                        startdatoPermisjon: uttaksplanInfo.startdatoUttak,\n                    },\n                    bareFarMedmorHarRett: false,\n                    termindato,\n                    harAktivitetskravIPeriodeUtenUttak: getHarAktivitetskravIPeriodeUtenUttak({\n                        erDeltUttak: false,\n                        morHarRett: false,\n                        søkerErAleneOmOmsorg: true,\n                    }),\n                    førsteUttaksdagNesteBarnsSak,\n                }),\n            ),\n        ];\n    };\n\n    const { handleSubmit, isSubmitting } = useOnValidSubmit(\n        onValidSubmitHandler,\n        SøknadRoutes.UTTAKSPLAN,\n        (state: ForeldrepengesøknadContextState) => storeAppState(state),\n    );\n\n    const shouldRender = erFødsel && erFarEllerMedmor && (!!søker.erAleneOmOmsorg || annenForelder.kanIkkeOppgis);\n\n    if (!shouldRender) {\n        return null;\n    }\n\n    const navnFar = erFarEllerMedmor\n        ? person.fornavn\n        : isAnnenForelderOppgitt(annenForelder)\n        ? annenForelder.fornavn\n        : '';\n\n    return (\n        <FarMedmorAleneomsorgFødselFormComponents.FormikWrapper\n            initialValues={getInitialFarMedmorAleneomsorgFødselValues(\n                lagretUttaksplanInfo,\n                dateToISOString(datoForAleneomsorg),\n                dekningsgrad,\n            )}\n            onSubmit={handleSubmit}\n            renderForm={({ values: formValues }) => {\n                const visibility = farMedmorAleneomsorgFødselAdopsjonQuestionsConfig.getVisbility(\n                    formValues as FarMedmorAleneomsorgFødselFormData,\n                );\n\n                const valgtStønadskonto = tilgjengeligeStønadskontoer[formValues.dekningsgrad === '100' ? 100 : 80];\n\n                return (\n                    <FarMedmorAleneomsorgFødselFormComponents.Form\n                        includeButtons={false}\n                        includeValidationSummary={true}\n                    >\n                        <Block\n                            padBottom=\"xl\"\n                            visible={visibility.isVisible(FarMedmorAleneomsorgFødselFormField.dekningsgrad)}\n                        >\n                            <DekningsgradSpørsmål\n                                FormKomponent={FarMedmorAleneomsorgFødselFormComponents}\n                                dekningsgradFeltNavn={FarMedmorAleneomsorgFødselFormField.dekningsgrad}\n                                tilgjengeligeStønadskontoer={tilgjengeligeStønadskontoer}\n                                erDeltUttak={false}\n                            />\n                        </Block>\n                        <Block visible={formValues.dekningsgrad !== ''}>\n                            {valgtStønadskonto && (\n                                <TilgjengeligeDagerGraf\n                                    erDeltUttak={false}\n                                    erFarEllerMedmor={true}\n                                    navnFarMedmor={navnFar}\n                                    navnMor=\"\"\n                                    tilgjengeligeDager={getTilgjengeligeDager(\n                                        valgtStønadskonto,\n                                        false,\n                                        Forelder.farMedmor,\n                                    )}\n                                />\n                            )}\n                        </Block>\n                        <Block\n                            padBottom=\"xl\"\n                            visible={visibility.isVisible(\n                                FarMedmorAleneomsorgFødselFormField.startPåOmsorgsovertakelse,\n                            )}\n                        >\n                            <FarMedmorAleneomsorgFødselFormComponents.YesOrNoQuestion\n                                name={FarMedmorAleneomsorgFødselFormField.startPåOmsorgsovertakelse}\n                                legend={intlUtils(intl, 'uttaksplaninfo.startdatoAleneomsorgFarMedmor.spørsmål')}\n                                labels={{\n                                    yes: intlUtils(\n                                        intl,\n                                        'uttaksplaninfo.startdatoAdopsjon.alternativ.omsorgsovertakelse',\n                                        {\n                                            dato: formaterDatoUtenDag(datoForAleneomsorg!),\n                                        },\n                                    ),\n                                    no: intlUtils(intl, 'uttaksplaninfo.startdatoAleneomsorgFarMedmor.annenDato'),\n                                }}\n                            />\n                        </Block>\n                        <Block\n                            padBottom=\"xl\"\n                            visible={visibility.isVisible(FarMedmorAleneomsorgFødselFormField.startdatoUttak)}\n                        >\n                            <FarMedmorAleneomsorgFødselFormComponents.DatePicker\n                                name={FarMedmorAleneomsorgFødselFormField.startdatoUttak}\n                                label=\"Startdato\"\n                                validate={validateStartdatoUttakFarMedmorAleneomsorgFødsel(intl, familiehendelsesdato)}\n                                minDate={ISOStringToDate(familiehendelsesdato)}\n                                placeholder={'dd.mm.åååå'}\n                            />\n                        </Block>\n                        <Block>\n                            <StepButtonWrapper>\n                                <Button variant=\"secondary\" as={Link} to={getPreviousStepHref('uttaksplanInfo')}>\n                                    <FormattedMessage id=\"backlink.label\" />\n                                </Button>\n                                {visibility.areAllQuestionsAnswered() && (\n                                    <Button type=\"submit\" disabled={isSubmitting} loading={isSubmitting}>\n                                        {intlUtils(intl, 'søknad.gåVidere')}\n                                    </Button>\n                                )}\n                            </StepButtonWrapper>\n                        </Block>\n                    </FarMedmorAleneomsorgFødselFormComponents.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default FarMedmorAleneomsorgFødsel;\n","import { getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\n\nexport enum FarMedmorFødselOgMorHarIkkeRettFormField {\n    dekningsgrad = 'dekningsgrad',\n    permisjonStartdato = 'permisjonStartdato',\n}\n\nexport interface FarMedmorFødselOgMorHarIkkeRettFormData {\n    [FarMedmorFødselOgMorHarIkkeRettFormField.dekningsgrad]: string;\n    [FarMedmorFødselOgMorHarIkkeRettFormField.permisjonStartdato]: string;\n}\n\nexport const FarMedmorFødselOgMorHarIkkeRettFormComponents = getTypedFormComponents<\n    FarMedmorFødselOgMorHarIkkeRettFormField,\n    FarMedmorFødselOgMorHarIkkeRettFormData\n>();\n","import { FarMedmorFødselOgMorHarIkkeRettUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\n\nimport {\n    FarMedmorFødselOgMorHarIkkeRettFormData,\n    FarMedmorFødselOgMorHarIkkeRettFormField,\n} from './farMedmorFødselOgMorHarIkkeRettFormConfig';\nimport { Dekningsgrad } from '@navikt/fp-common';\n\nconst initialFarMedmorFødselOgMorHarIkkeRettValues: FarMedmorFødselOgMorHarIkkeRettFormData = {\n    [FarMedmorFødselOgMorHarIkkeRettFormField.dekningsgrad]: '',\n    [FarMedmorFødselOgMorHarIkkeRettFormField.permisjonStartdato]: '',\n};\n\nexport const mapFarMedmorFødselOgMorHarIkkeRettFormToState = (\n    values: Partial<FarMedmorFødselOgMorHarIkkeRettFormData>,\n): FarMedmorFødselOgMorHarIkkeRettUttaksplanInfo => {\n    return {\n        permisjonStartdato: values.permisjonStartdato!,\n    };\n};\n\nexport const getInitialFarMedmorFødselOgMorHarIkkeRettValues = (\n    dekningsgrad: Dekningsgrad,\n    lagretUttaksplanInfo: FarMedmorFødselOgMorHarIkkeRettUttaksplanInfo | undefined,\n): FarMedmorFødselOgMorHarIkkeRettFormData => {\n    if (lagretUttaksplanInfo) {\n        return {\n            ...lagretUttaksplanInfo,\n            [FarMedmorFødselOgMorHarIkkeRettFormField.dekningsgrad]: dekningsgrad,\n        };\n    }\n\n    return initialFarMedmorFødselOgMorHarIkkeRettValues;\n};\n","import { QuestionConfig, Questions } from '@navikt/sif-common-question-config';\nimport { hasValue } from '@navikt/fp-common';\nimport {\n    FarMedmorFødselOgMorHarIkkeRettFormData,\n    FarMedmorFødselOgMorHarIkkeRettFormField,\n} from './farMedmorFødselOgMorHarIkkeRettFormConfig';\nimport { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\n\nexport interface FarMedmorFødselOgMorHarIkkeRettQuestionsPayload extends FarMedmorFødselOgMorHarIkkeRettFormData {\n    erMorUfør: boolean;\n    familiehendelsesdato: Date;\n}\n\nconst FarMedmorFødselOgMorHarIkkeRettFormConfig: QuestionConfig<\n    FarMedmorFødselOgMorHarIkkeRettQuestionsPayload,\n    FarMedmorFødselOgMorHarIkkeRettFormField\n> = {\n    [FarMedmorFødselOgMorHarIkkeRettFormField.dekningsgrad]: {\n        isAnswered: ({ dekningsgrad }) => hasValue(dekningsgrad),\n        isIncluded: () => true,\n    },\n    [FarMedmorFødselOgMorHarIkkeRettFormField.permisjonStartdato]: {\n        isAnswered: ({ permisjonStartdato }) => hasValue(permisjonStartdato),\n        isIncluded: ({ dekningsgrad, erMorUfør, familiehendelsesdato }) =>\n            andreAugust2022ReglerGjelder(familiehendelsesdato) || (hasValue(dekningsgrad) && erMorUfør),\n    },\n};\n\nexport const farMedmorFødselOgMorHarIkkeRettQuestionsConfig = Questions<\n    FarMedmorFødselOgMorHarIkkeRettQuestionsPayload,\n    FarMedmorFødselOgMorHarIkkeRettFormField\n>(FarMedmorFødselOgMorHarIkkeRettFormConfig);\n","import { FunctionComponent } from 'react';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport { getFamiliehendelsedato, getFødselsdato, getTermindato } from 'app/utils/barnUtils';\nimport {\n    FarMedmorFødselOgMorHarIkkeRettFormComponents,\n    FarMedmorFødselOgMorHarIkkeRettFormData,\n    FarMedmorFødselOgMorHarIkkeRettFormField,\n} from './farMedmorFødselOgMorHarIkkeRettFormConfig';\nimport { getValgtStønadskontoFor80Og100Prosent } from 'app/utils/stønadskontoUtils';\nimport {\n    getInitialFarMedmorFødselOgMorHarIkkeRettValues,\n    mapFarMedmorFødselOgMorHarIkkeRettFormToState,\n} from './farMedmorFødselOgMorHarIkkeRettUtils';\nimport { FarMedmorFødselOgMorHarIkkeRettUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport actionCreator from 'app/context/action/actionCreator';\nimport useOnValidSubmit from 'app/utils/hooks/useOnValidSubmit';\nimport SøknadRoutes from 'app/routes/routes';\nimport useUttaksplanInfo from 'app/utils/hooks/useUttaksplanInfo';\nimport {\n    Block,\n    Forelder,\n    ISOStringToDate,\n    StepButtonWrapper,\n    Tidsperioden,\n    Uttaksdagen,\n    andreAugust2022ReglerGjelder,\n    formaterNavn,\n    getErMorUfør,\n    intlUtils,\n    isAnnenForelderOppgitt,\n    isFarEllerMedmor,\n    uttaksplanDatoavgrensninger,\n} from '@navikt/fp-common';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport {\n    FarMedmorFødselOgMorHarIkkeRettQuestionsPayload,\n    farMedmorFødselOgMorHarIkkeRettQuestionsConfig,\n} from './farMedmorFødselOgMorHarIkkeRettQuestionsConfig';\nimport { TilgjengeligeStønadskontoerDTO } from 'app/types/TilgjengeligeStønadskontoerDTO';\nimport TilgjengeligeDagerGraf from '../../tilgjengeligeDagerGraf/TilgjengeligeDagerGraf';\nimport { getTilgjengeligeDager } from '../../tilgjengeligeDagerGraf/tilgjengeligeDagerUtils';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport { validateStartdatoFarMedmor } from './validation/farMedmorFødselOgMorHarIkkeRettValidering';\nimport DekningsgradSpørsmål from '../spørsmål/DekningsgradSpørsmål';\nimport { getDekningsgradFromString } from 'app/utils/getDekningsgradFromString';\nimport { lagUttaksplan } from 'app/utils/uttaksplan/lagUttaksplan';\nimport { storeAppState } from 'app/utils/submitUtils';\nimport { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport { skalViseInfoOmPrematuruker } from 'app/utils/uttaksplanInfoUtils';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport { DatepickerDateRange } from '@navikt/ds-datepicker';\nimport { DateRange, dateToISOString } from '@navikt/sif-common-formik-ds/lib';\nimport { Button, GuidePanel } from '@navikt/ds-react';\nimport { Link } from 'react-router-dom';\nimport { getPreviousStepHref } from 'app/steps/stepsConfig';\nimport { getHarAktivitetskravIPeriodeUtenUttak } from '@navikt/uttaksplan';\n\nconst konverterStringTilDate = (invalidDateRanges?: DatepickerDateRange[]): DateRange[] | undefined => {\n    if (!invalidDateRanges) {\n        return undefined;\n    }\n\n    return invalidDateRanges.map((r) => ({\n        from: ISOStringToDate(r.from)!,\n        to: ISOStringToDate(r.to)!,\n    }));\n};\n\nexport interface Props {\n    tilgjengeligeStønadskontoer100DTO: TilgjengeligeStønadskontoerDTO;\n    tilgjengeligeStønadskontoer80DTO: TilgjengeligeStønadskontoerDTO;\n}\n\nconst FarMedmorFødselOgMorHarIkkeRett: FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer80DTO,\n    tilgjengeligeStønadskontoer100DTO,\n}) => {\n    const intl = useIntl();\n    const { state } = useForeldrepengesøknadContext();\n    const { søkersituasjon, annenForelder, barn, dekningsgrad, erEndringssøknad } = useSøknad();\n    const {\n        person: { fornavn, mellomnavn, etternavn },\n    } = useSøkerinfo();\n    const lagretUttaksplanInfo = useUttaksplanInfo<FarMedmorFødselOgMorHarIkkeRettUttaksplanInfo>();\n\n    const førsteUttaksdagNesteBarnsSak =\n        state.barnFraNesteSak !== undefined ? state.barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const erFødsel = søkersituasjon.situasjon === 'fødsel';\n    const annenForelderHarIkkeRett = isAnnenForelderOppgitt(annenForelder)\n        ? annenForelder.harRettPåForeldrepengerINorge === false && annenForelder.harRettPåForeldrepengerIEØS === false\n        : false;\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const familiehendelsesdatoDate = ISOStringToDate(familiehendelsesdato);\n    const termindato = getTermindato(barn);\n\n    const onValidSubmitHandler = (values: Partial<FarMedmorFødselOgMorHarIkkeRettFormData>) => {\n        const startDatoUttaksplan =\n            andreAugust2022ReglerGjelder(familiehendelsesdatoDate!) || getErMorUfør(annenForelder, erFarEllerMedmor)\n                ? values.permisjonStartdato\n                : dateToISOString(Uttaksdagen(Uttaksdagen(familiehendelsesdatoDate!).denneEllerNeste()).leggTil(30));\n\n        return [\n            actionCreator.setUttaksplanInfo(mapFarMedmorFødselOgMorHarIkkeRettFormToState(values)),\n            actionCreator.setDekningsgrad(getDekningsgradFromString(values.dekningsgrad)),\n            actionCreator.lagUttaksplanforslag(\n                lagUttaksplan({\n                    annenForelderErUfør: erMorUfør,\n                    erDeltUttak: false,\n                    erEndringssøknad,\n                    erEnkelEndringssøknad: erEndringssøknad,\n                    familiehendelsesdato: familiehendelsesdatoDate!,\n                    førsteUttaksdagEtterSeksUker: Uttaksdagen(\n                        Uttaksdagen(familiehendelsesdatoDate!).denneEllerNeste(),\n                    ).leggTil(30),\n                    situasjon: søkersituasjon.situasjon,\n                    søkerErFarEllerMedmor: erFarEllerMedmor,\n                    søkerHarMidlertidigOmsorg: false,\n                    tilgjengeligeStønadskontoer:\n                        tilgjengeligeStønadskontoer[getDekningsgradFromString(values.dekningsgrad)],\n                    uttaksplanSkjema: {\n                        startdatoPermisjon: startDatoUttaksplan,\n                    },\n                    bareFarMedmorHarRett: true,\n                    termindato,\n                    harAktivitetskravIPeriodeUtenUttak: getHarAktivitetskravIPeriodeUtenUttak({\n                        erDeltUttak: false,\n                        morHarRett: false,\n                        søkerErAleneOmOmsorg: false,\n                    }),\n                    førsteUttaksdagNesteBarnsSak,\n                }),\n            ),\n        ];\n    };\n\n    const { handleSubmit, isSubmitting } = useOnValidSubmit(\n        onValidSubmitHandler,\n        SøknadRoutes.UTTAKSPLAN,\n        (state: ForeldrepengesøknadContextState) => storeAppState(state),\n    );\n\n    const shouldRender = erFarEllerMedmor && erFødsel && annenForelderHarIkkeRett;\n\n    if (!shouldRender) {\n        return null;\n    }\n\n    const erDeltUttak = !annenForelderHarIkkeRett;\n    const erMorUfør = isAnnenForelderOppgitt(annenForelder) ? !!annenForelder.erUfør : false;\n    const navnMor = isAnnenForelderOppgitt(annenForelder)\n        ? formaterNavn(annenForelder.fornavn, annenForelder.etternavn, true)\n        : '';\n    const navnFarMedmor = formaterNavn(fornavn, etternavn, true, mellomnavn);\n    const datoAvgrensinger = uttaksplanDatoavgrensninger.startdatoPermisjonFarMedmor(\n        familiehendelsesdatoDate!,\n        termindato,\n        søkersituasjon.situasjon,\n    );\n    const fødselsdato = getFødselsdato(barn);\n    const visInfoOmPrematuruker = skalViseInfoOmPrematuruker(fødselsdato, termindato, søkersituasjon.situasjon);\n    const ekstraDagerGrunnetPrematurFødsel = visInfoOmPrematuruker\n        ? Tidsperioden({ fom: fødselsdato!, tom: termindato! }).getAntallUttaksdager() - 1\n        : undefined;\n\n    const tilgjengeligeStønadskontoer = getValgtStønadskontoFor80Og100Prosent(\n        tilgjengeligeStønadskontoer80DTO,\n        tilgjengeligeStønadskontoer100DTO,\n    );\n\n    return (\n        <FarMedmorFødselOgMorHarIkkeRettFormComponents.FormikWrapper\n            initialValues={getInitialFarMedmorFødselOgMorHarIkkeRettValues(dekningsgrad, lagretUttaksplanInfo)}\n            onSubmit={handleSubmit}\n            renderForm={({ values: formValues }) => {\n                const visibility = farMedmorFødselOgMorHarIkkeRettQuestionsConfig.getVisbility({\n                    ...formValues,\n                    erMorUfør,\n                    familiehendelsesdato: familiehendelsesdatoDate!,\n                } as FarMedmorFødselOgMorHarIkkeRettQuestionsPayload);\n\n                const valgtStønadskonto = tilgjengeligeStønadskontoer[formValues.dekningsgrad === '100' ? 100 : 80];\n\n                return (\n                    <FarMedmorFødselOgMorHarIkkeRettFormComponents.Form\n                        includeButtons={false}\n                        includeValidationSummary={true}\n                    >\n                        <Block\n                            padBottom=\"l\"\n                            visible={visibility.isIncluded(FarMedmorFødselOgMorHarIkkeRettFormField.dekningsgrad)}\n                        >\n                            <DekningsgradSpørsmål\n                                FormKomponent={FarMedmorFødselOgMorHarIkkeRettFormComponents}\n                                dekningsgradFeltNavn={FarMedmorFødselOgMorHarIkkeRettFormField.dekningsgrad}\n                                tilgjengeligeStønadskontoer={tilgjengeligeStønadskontoer}\n                                erDeltUttak={erDeltUttak}\n                            />\n                        </Block>\n                        <Block\n                            padBottom=\"xl\"\n                            visible={visibility.isAnswered(FarMedmorFødselOgMorHarIkkeRettFormField.dekningsgrad)}\n                        >\n                            {valgtStønadskonto && (\n                                <TilgjengeligeDagerGraf\n                                    erDeltUttak={erDeltUttak}\n                                    erFarEllerMedmor\n                                    navnFarMedmor={navnFarMedmor}\n                                    navnMor={navnMor}\n                                    tilgjengeligeDager={getTilgjengeligeDager(\n                                        valgtStønadskonto,\n                                        erDeltUttak,\n                                        Forelder.farMedmor,\n                                    )}\n                                />\n                            )}\n                        </Block>\n                        <Block padBottom=\"xl\" visible={visInfoOmPrematuruker === true}>\n                            <GuidePanel>\n                                <FormattedMessage\n                                    id=\"uttaksplaninfo.veileder.informasjonPrematuruker\"\n                                    values={{\n                                        antallprematuruker: Math.floor(ekstraDagerGrunnetPrematurFødsel! / 5),\n                                        antallprematurdager: ekstraDagerGrunnetPrematurFødsel! % 5,\n                                    }}\n                                />\n                            </GuidePanel>\n                        </Block>\n                        <Block\n                            padBottom=\"xl\"\n                            visible={visibility.isIncluded(FarMedmorFødselOgMorHarIkkeRettFormField.permisjonStartdato)}\n                        >\n                            <FarMedmorFødselOgMorHarIkkeRettFormComponents.DatePicker\n                                name={FarMedmorFødselOgMorHarIkkeRettFormField.permisjonStartdato}\n                                label={intlUtils(intl, 'uttaksplaninfo.spørsmål.startdatoPermisjonFarMedmor.label')}\n                                minDate={ISOStringToDate(datoAvgrensinger.minDate)}\n                                maxDate={ISOStringToDate(datoAvgrensinger.maxDate)}\n                                disabledDateRanges={konverterStringTilDate(datoAvgrensinger.invalidDateRanges)}\n                                disableWeekend={datoAvgrensinger.weekendsNotSelectable}\n                                validate={validateStartdatoFarMedmor(\n                                    intl,\n                                    ISOStringToDate(datoAvgrensinger.minDate)!,\n                                    ISOStringToDate(datoAvgrensinger.maxDate)!,\n                                )}\n                                placeholder={'dd.mm.åååå'}\n                            />\n                        </Block>\n                        <Block>\n                            <StepButtonWrapper>\n                                <Button variant=\"secondary\" as={Link} to={getPreviousStepHref('uttaksplanInfo')}>\n                                    <FormattedMessage id=\"backlink.label\" />\n                                </Button>\n                                {visibility.areAllQuestionsAnswered() && (\n                                    <Button type=\"submit\" disabled={isSubmitting} loading={isSubmitting}>\n                                        {intlUtils(intl, 'søknad.gåVidere')}\n                                    </Button>\n                                )}\n                            </StepButtonWrapper>\n                        </Block>\n                    </FarMedmorFødselOgMorHarIkkeRettFormComponents.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default FarMedmorFødselOgMorHarIkkeRett;\n","import { getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\n\nexport enum FarMedmorFørstegangssøknadMedAnnenPartFormField {\n    permisjonStartdato = 'permisjonStartdato',\n}\n\nexport interface FarMedmorFørstegangssøknadMedAnnenPartFormData {\n    [FarMedmorFørstegangssøknadMedAnnenPartFormField.permisjonStartdato]: string;\n}\n\nexport const FarMedmorFørstegangssøknadMedAnnenPartFormComponents = getTypedFormComponents<\n    FarMedmorFørstegangssøknadMedAnnenPartFormField,\n    FarMedmorFørstegangssøknadMedAnnenPartFormData\n>();\n","import { QuestionConfig, Questions } from '@navikt/sif-common-question-config';\nimport { hasValue } from '@navikt/fp-common';\nimport {\n    FarMedmorFørstegangssøknadMedAnnenPartFormData,\n    FarMedmorFørstegangssøknadMedAnnenPartFormField,\n} from './farMedmorFørstegangssøknadMedAnnenPartFormConfig';\n\nconst FarMedmorFørstegangssøknadMedAnnenPartFormConfig: QuestionConfig<\n    FarMedmorFørstegangssøknadMedAnnenPartFormData,\n    FarMedmorFørstegangssøknadMedAnnenPartFormField\n> = {\n    [FarMedmorFørstegangssøknadMedAnnenPartFormField.permisjonStartdato]: {\n        isIncluded: () => true,\n        isAnswered: ({ permisjonStartdato }) => hasValue(permisjonStartdato),\n    },\n};\n\nexport const farMedmorFørstegangssøknadMedAnnenPartQuestionsConfig = Questions<\n    FarMedmorFørstegangssøknadMedAnnenPartFormData,\n    FarMedmorFørstegangssøknadMedAnnenPartFormField\n>(FarMedmorFørstegangssøknadMedAnnenPartFormConfig);\n","import { FarMedmorFørstegangssøknadMedAnnenPartUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport { FarMedmorFørstegangssøknadMedAnnenPartFormData } from './farMedmorFørstegangssøknadMedAnnenPartFormConfig';\n\nexport const getFarMedmorFørstegangssøknadMedAnnenPartInitialValues = (\n    state: FarMedmorFørstegangssøknadMedAnnenPartUttaksplanInfo | undefined,\n): FarMedmorFørstegangssøknadMedAnnenPartFormData => {\n    if (!state) {\n        return {\n            permisjonStartdato: '',\n        };\n    }\n\n    return {\n        permisjonStartdato: state.permisjonStartdato,\n    };\n};\n","import {\n    Block,\n    EksisterendeSak,\n    Forelder,\n    ISOStringToDate,\n    StepButtonWrapper,\n    Uttaksdagen,\n    getErMorUfør,\n    getMorHarRettPåForeldrepengerINorgeEllerEØS,\n    intlUtils,\n    isAnnenForelderOppgitt,\n    isFarEllerMedmor,\n    isInfoPeriode,\n} from '@navikt/fp-common';\nimport InfoOmSøknaden from 'app/components/info-eksisterende-sak/InfoOmSøknaden';\nimport actionCreator from 'app/context/action/actionCreator';\nimport { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport { FarMedmorFørstegangssøknadMedAnnenPartUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport SøknadRoutes from 'app/routes/routes';\nimport { getAntallUker } from 'app/steps/uttaksplan-info/utils/stønadskontoer';\nimport { TilgjengeligeStønadskontoerDTO } from 'app/types/TilgjengeligeStønadskontoerDTO';\nimport { getFamiliehendelsedato, getTermindato } from 'app/utils/barnUtils';\nimport { getDekningsgradFromString } from 'app/utils/getDekningsgradFromString';\nimport useOnValidSubmit from 'app/utils/hooks/useOnValidSubmit';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport useUttaksplanInfo from 'app/utils/hooks/useUttaksplanInfo';\nimport { getValgtStønadskontoFor80Og100Prosent } from 'app/utils/stønadskontoUtils';\nimport { storeAppState } from 'app/utils/submitUtils';\nimport { lagUttaksplan } from 'app/utils/uttaksplan/lagUttaksplan';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport FarMedmorsFørsteDag from '../spørsmål/FarMedmorsFørsteDag';\nimport {\n    FarMedmorFørstegangssøknadMedAnnenPartFormComponents,\n    FarMedmorFørstegangssøknadMedAnnenPartFormData,\n    FarMedmorFørstegangssøknadMedAnnenPartFormField,\n} from './farMedmorFørstegangssøknadMedAnnenPartFormConfig';\nimport { farMedmorFørstegangssøknadMedAnnenPartQuestionsConfig } from './farMedmorFørstegangssøknadMedAnnenPartQuestionsConfig';\nimport { getFarMedmorFørstegangssøknadMedAnnenPartInitialValues } from './farMedmorFørstegangssøknadMedAnnenPartUtils';\nimport { leggTilAnnenPartsPerioderISøkerenesUttaksplan } from 'app/steps/uttaksplan-info/utils/leggTilAnnenPartsPerioderISøkerensUttaksplan';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport { Button } from '@navikt/ds-react';\nimport { dateToISOString } from '@navikt/sif-common-formik-ds/lib';\nimport { Link } from 'react-router-dom';\nimport { getPreviousStepHref } from 'app/steps/stepsConfig';\nimport { getHarAktivitetskravIPeriodeUtenUttak } from '@navikt/uttaksplan';\n\ninterface Props {\n    tilgjengeligeStønadskontoer100DTO: TilgjengeligeStønadskontoerDTO;\n    tilgjengeligeStønadskontoer80DTO: TilgjengeligeStønadskontoerDTO;\n    eksisterendeSakAnnenPart: EksisterendeSak | undefined;\n}\n\nconst FarMedmorFørstegangssøknadMedAnnenPart: FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer100DTO,\n    tilgjengeligeStønadskontoer80DTO,\n    eksisterendeSakAnnenPart,\n}) => {\n    const søknad = useSøknad();\n    const { state } = useForeldrepengesøknadContext();\n    const intl = useIntl();\n    const { barn, søkersituasjon, annenForelder, erEndringssøknad } = søknad;\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const lagretUttaksplanInfo = useUttaksplanInfo<FarMedmorFørstegangssøknadMedAnnenPartUttaksplanInfo>();\n    const familiehendelsedato = getFamiliehendelsedato(barn);\n    const familiehendelsedatoDate = ISOStringToDate(familiehendelsedato);\n    const erFødsel = søkersituasjon.situasjon === 'fødsel';\n    const erAdopsjon = søkersituasjon.situasjon === 'adopsjon';\n    const erMorUfør = getErMorUfør(annenForelder, erFarEllerMedmor);\n    const bareFarHarRett = !getMorHarRettPåForeldrepengerINorgeEllerEØS(\n        søkersituasjon.rolle,\n        erFarEllerMedmor,\n        annenForelder,\n    );\n    const førsteUttaksdagNesteBarnsSak =\n        state.barnFraNesteSak !== undefined ? state.barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n    const erDeltUttak = true;\n    const termindato = getTermindato(barn);\n    const harAktivitetskravIPeriodeUtenUttak = getHarAktivitetskravIPeriodeUtenUttak({\n        erDeltUttak,\n        morHarRett: true,\n        søkerErAleneOmOmsorg: false,\n    });\n\n    const morsSisteUttaksdag =\n        eksisterendeSakAnnenPart && eksisterendeSakAnnenPart.uttaksplan.length > 0\n            ? dateToISOString(\n                  eksisterendeSakAnnenPart.uttaksplan[eksisterendeSakAnnenPart.uttaksplan.length - 1].tidsperiode.tom,\n              )\n            : undefined;\n    const onValidSubmitHandler = (values: Partial<FarMedmorFørstegangssøknadMedAnnenPartFormData>) => {\n        const uttaksplanInfo: FarMedmorFørstegangssøknadMedAnnenPartUttaksplanInfo = {\n            permisjonStartdato: values.permisjonStartdato!,\n        };\n        const stønadskontoer = tilgjengeligeStønadskontoer[getDekningsgradFromString(grunnlag.dekningsgrad)];\n        const antallUker = getAntallUker(tilgjengeligeStønadskontoer[grunnlag.dekningsgrad]);\n        const farMedmorSinePerioder = lagUttaksplan({\n            annenForelderErUfør: erMorUfør,\n            erDeltUttak,\n            erEndringssøknad,\n            erEnkelEndringssøknad: erEndringssøknad,\n            familiehendelsesdato: familiehendelsedatoDate!,\n            førsteUttaksdagEtterSeksUker: Uttaksdagen(Uttaksdagen(familiehendelsedatoDate!).denneEllerNeste()).leggTil(\n                30,\n            ),\n            situasjon: erFødsel ? 'fødsel' : 'adopsjon',\n            søkerErFarEllerMedmor: erFarEllerMedmor,\n            søkerHarMidlertidigOmsorg: false,\n            tilgjengeligeStønadskontoer: stønadskontoer,\n            uttaksplanSkjema: {\n                morSinSisteUttaksdag: morsSisteUttaksdag,\n                farSinFørsteUttaksdag: values.permisjonStartdato,\n                antallDagerFellesperiodeFarMedmor: undefined,\n                antallUkerFellesperiodeFarMedmor: undefined,\n            },\n            bareFarMedmorHarRett: bareFarHarRett,\n            termindato,\n            harAktivitetskravIPeriodeUtenUttak,\n            førsteUttaksdagNesteBarnsSak,\n        });\n        let uttaksplanMedAnnenPart;\n\n        if (eksisterendeSakAnnenPart && farMedmorSinePerioder.length > 0) {\n            uttaksplanMedAnnenPart = leggTilAnnenPartsPerioderISøkerenesUttaksplan(\n                eksisterendeSakAnnenPart.uttaksplan,\n                farMedmorSinePerioder,\n                familiehendelsedatoDate!,\n                harAktivitetskravIPeriodeUtenUttak,\n                erAdopsjon,\n                bareFarHarRett,\n                erFarEllerMedmor,\n                førsteUttaksdagNesteBarnsSak,\n            );\n        } else if (eksisterendeSakAnnenPart) {\n            uttaksplanMedAnnenPart = eksisterendeSakAnnenPart.uttaksplan;\n        } else {\n            uttaksplanMedAnnenPart = farMedmorSinePerioder;\n        }\n\n        return [\n            actionCreator.setAntallUkerIUttaksplan(antallUker),\n            actionCreator.setUttaksplanInfo(uttaksplanInfo),\n            actionCreator.setDekningsgrad(grunnlag.dekningsgrad),\n            actionCreator.lagUttaksplanforslag(uttaksplanMedAnnenPart),\n        ];\n    };\n\n    const { handleSubmit, isSubmitting } = useOnValidSubmit(\n        onValidSubmitHandler,\n        SøknadRoutes.UTTAKSPLAN,\n        (state: ForeldrepengesøknadContextState) => storeAppState(state),\n    );\n\n    if (!eksisterendeSakAnnenPart || !erFarEllerMedmor) {\n        return null;\n    }\n\n    const navnMor = isAnnenForelderOppgitt(annenForelder) ? annenForelder.fornavn : '';\n    const { grunnlag, uttaksplan } = eksisterendeSakAnnenPart;\n    const morsPerioder = uttaksplan.filter((p) => isInfoPeriode(p) && p.forelder === Forelder.mor);\n    const morsSisteDag = morsPerioder.reverse()[0].tidsperiode.tom;\n\n    const tilgjengeligeStønadskontoer = getValgtStønadskontoFor80Og100Prosent(\n        tilgjengeligeStønadskontoer80DTO,\n        tilgjengeligeStønadskontoer100DTO,\n    );\n\n    return (\n        <FarMedmorFørstegangssøknadMedAnnenPartFormComponents.FormikWrapper\n            initialValues={getFarMedmorFørstegangssøknadMedAnnenPartInitialValues(lagretUttaksplanInfo)}\n            onSubmit={handleSubmit}\n            renderForm={({ values: formValues, setFieldValue }) => {\n                const visibility = farMedmorFørstegangssøknadMedAnnenPartQuestionsConfig.getVisbility(\n                    formValues as FarMedmorFørstegangssøknadMedAnnenPartFormData,\n                );\n                const valgtMengdeStønadskonto = tilgjengeligeStønadskontoer[grunnlag.dekningsgrad];\n\n                return (\n                    <FarMedmorFørstegangssøknadMedAnnenPartFormComponents.Form\n                        includeButtons={false}\n                        includeValidationSummary={true}\n                    >\n                        <Block padBottom=\"xl\">\n                            <InfoOmSøknaden\n                                eksisterendeSak={eksisterendeSakAnnenPart}\n                                erIUttaksplanenSteg={false}\n                                tilgjengeligeStønadskontoer={valgtMengdeStønadskonto}\n                            />\n                        </Block>\n                        <Block padBottom=\"xl\">\n                            <FarMedmorsFørsteDag\n                                FormComponents={FarMedmorFørstegangssøknadMedAnnenPartFormComponents}\n                                fieldName={FarMedmorFørstegangssøknadMedAnnenPartFormField.permisjonStartdato}\n                                familiehendelsesdato={familiehendelsedatoDate!}\n                                setFieldValue={setFieldValue}\n                                morsSisteDag={morsSisteDag}\n                                navnMor={navnMor}\n                                termindato={termindato}\n                                situasjon={søkersituasjon.situasjon}\n                                morHarRettTilForeldrepengerIEØS={false}\n                            />\n                        </Block>\n                        <Block>\n                            <StepButtonWrapper>\n                                <Button variant=\"secondary\" as={Link} to={getPreviousStepHref('uttaksplanInfo')}>\n                                    <FormattedMessage id=\"backlink.label\" />\n                                </Button>\n                                {visibility.areAllQuestionsAnswered() && (\n                                    <Button type=\"submit\" disabled={isSubmitting} loading={isSubmitting}>\n                                        {intlUtils(intl, 'søknad.gåVidere')}\n                                    </Button>\n                                )}\n                            </StepButtonWrapper>\n                        </Block>\n                    </FarMedmorFørstegangssøknadMedAnnenPartFormComponents.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default FarMedmorFørstegangssøknadMedAnnenPart;\n","import { EksisterendeSak } from '@navikt/fp-common';\n\nexport type UttaksplanInfoScenario =\n    | 'farMedmorAleneomsorgFødselAdopsjon'\n    | 'farMedmorFødselBeggeHarRett'\n    | 'farMedmorFødselMorHarIkkeRett'\n    | 'farMedmorFørstegangssøknadMedAnnenPart'\n    | 'morFarAdopsjon'\n    | 'morFødsel'\n    | 'morFarFødselAnnenForelderHarRettIEØS'\n    | 'morFarAdopsjonAnnenForelderHarRettIEØS';\n\ninterface UttaksplanScenarioParams {\n    erFødsel: boolean;\n    erFarEllerMedmor: boolean;\n    søkerErAleneOmOmsorg: boolean;\n    annenForelderKanIkkeOppgis: boolean;\n    annenForelderHarRett: boolean;\n    erAdopsjon: boolean;\n    eksisterendeSakAnnenPart: EksisterendeSak | undefined;\n    annenForelderOppgittIkkeAleneOmOmsorg: boolean;\n    annenForelderHarRettIEØS: boolean;\n}\n\nexport const getUttaksplanScenario = ({\n    erFødsel,\n    erFarEllerMedmor,\n    søkerErAleneOmOmsorg,\n    annenForelderKanIkkeOppgis,\n    annenForelderHarRett,\n    eksisterendeSakAnnenPart,\n    erAdopsjon,\n    annenForelderOppgittIkkeAleneOmOmsorg,\n    annenForelderHarRettIEØS,\n}: UttaksplanScenarioParams): UttaksplanInfoScenario => {\n    if (erFødsel && erFarEllerMedmor && (søkerErAleneOmOmsorg || annenForelderKanIkkeOppgis)) {\n        return 'farMedmorAleneomsorgFødselAdopsjon';\n    }\n    if (annenForelderHarRettIEØS) {\n        return erFødsel ? 'morFarFødselAnnenForelderHarRettIEØS' : 'morFarAdopsjonAnnenForelderHarRettIEØS';\n    }\n\n    if (\n        erFarEllerMedmor &&\n        erFødsel &&\n        annenForelderHarRett &&\n        (eksisterendeSakAnnenPart === undefined || eksisterendeSakAnnenPart.uttaksplan.length === 0)\n    ) {\n        return 'farMedmorFødselBeggeHarRett';\n    }\n\n    if (erFarEllerMedmor && erFødsel && !annenForelderHarRett) {\n        return 'farMedmorFødselMorHarIkkeRett';\n    }\n\n    if (eksisterendeSakAnnenPart && erFarEllerMedmor) {\n        return 'farMedmorFørstegangssøknadMedAnnenPart';\n    }\n\n    if (erAdopsjon && (annenForelderOppgittIkkeAleneOmOmsorg || annenForelderKanIkkeOppgis || søkerErAleneOmOmsorg)) {\n        return 'morFarAdopsjon';\n    }\n\n    return 'morFødsel';\n};\n","import { TilgjengeligeStønadskontoerDTO } from 'app/types/TilgjengeligeStønadskontoerDTO';\nimport { FunctionComponent } from 'react';\nimport FarMedmorFødselFørsteganggsøknadBeggeHarRett from './scenarios/far-medmor-fødsel-begge-har-rett/FarMedmorFødselBeggeHarRett';\nimport MorFødsel from './scenarios/mor-fodsel/MorFødsel';\nimport MorFarAdopsjon from './scenarios/mor-far-adopsjon/MorFarAdopsjon';\nimport MorFarAdopsjonAnnenForelderHarRettIEØS from './scenarios/mor-far-adopsjon-annen-part-har-rett-i-eøs/MorFarAdopsjonAnnenForelderHarRettIEØS';\nimport MorFarFødselAnnenForelderHarRettIEØS from './scenarios/mor-far-fødsel-annen-part-har-rett-i-eøs/MorFarFødselAnnenForelderHarRettIEØS';\nimport FarMedmorAleneomsorgFødselAdopsjon from './scenarios/far-medmor-aleneomsorg-fødsel/FarMedmorAleneomsorgFødsel';\nimport FarMedmorFødselOgMorHarIkkeRett from './scenarios/far-medmor-fødsel-og-mor-har-ikke-rett/FarMedmorFødselOgMorHarIkkeRett';\nimport FarMedmorFørstegangssøknadMedAnnenPart from './scenarios/farMedmor-førstegangssøknad-med-annen-part/FarMedmorFørstegangssøknadMedAnnenPart';\nimport { getUttaksplanScenario } from './scenarios/scenarios';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport { EksisterendeSak, harAnnenForelderRettIEØS, isAnnenForelderOppgitt, isFarEllerMedmor } from '@navikt/fp-common';\ninterface Props {\n    tilgjengeligeStønadskontoer100DTO: TilgjengeligeStønadskontoerDTO;\n    tilgjengeligeStønadskontoer80DTO: TilgjengeligeStønadskontoerDTO;\n    eksisterendeSakAnnenPart: EksisterendeSak | undefined;\n}\n\nconst UttaksplanInfoScenarios: FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer100DTO,\n    tilgjengeligeStønadskontoer80DTO,\n    eksisterendeSakAnnenPart,\n}) => {\n    const { søkersituasjon, søker, annenForelder } = useSøknad();\n    const erFødsel = søkersituasjon.situasjon === 'fødsel';\n    const erAdopsjon = søkersituasjon.situasjon === 'adopsjon';\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const annenForelderHarRett = isAnnenForelderOppgitt(annenForelder)\n        ? !!annenForelder.harRettPåForeldrepengerINorge || !!annenForelder.harRettPåForeldrepengerIEØS\n        : false;\n    const annenForelderOppgittIkkeAleneOmOmsorg = isAnnenForelderOppgitt(annenForelder)\n        ? annenForelder.harRettPåForeldrepengerINorge !== undefined\n        : false;\n    const annenForelderHarRettIEØS = harAnnenForelderRettIEØS(annenForelder);\n\n    const scenario = getUttaksplanScenario({\n        erFødsel,\n        erFarEllerMedmor,\n        søkerErAleneOmOmsorg: !!søker.erAleneOmOmsorg,\n        annenForelderKanIkkeOppgis: annenForelder.kanIkkeOppgis,\n        annenForelderHarRett: annenForelderHarRett,\n        erAdopsjon,\n        eksisterendeSakAnnenPart,\n        annenForelderOppgittIkkeAleneOmOmsorg,\n        annenForelderHarRettIEØS,\n    });\n\n    switch (scenario) {\n        case 'farMedmorAleneomsorgFødselAdopsjon':\n            return (\n                <FarMedmorAleneomsorgFødselAdopsjon\n                    tilgjengeligeStønadskontoer100DTO={tilgjengeligeStønadskontoer100DTO}\n                    tilgjengeligeStønadskontoer80DTO={tilgjengeligeStønadskontoer80DTO}\n                />\n            );\n        case 'farMedmorFødselBeggeHarRett':\n            return (\n                <FarMedmorFødselFørsteganggsøknadBeggeHarRett\n                    tilgjengeligeStønadskontoer100DTO={tilgjengeligeStønadskontoer100DTO}\n                    tilgjengeligeStønadskontoer80DTO={tilgjengeligeStønadskontoer80DTO}\n                    eksisterendeSakAnnenPart={eksisterendeSakAnnenPart}\n                />\n            );\n        case 'farMedmorFødselMorHarIkkeRett':\n            return (\n                <FarMedmorFødselOgMorHarIkkeRett\n                    tilgjengeligeStønadskontoer100DTO={tilgjengeligeStønadskontoer100DTO}\n                    tilgjengeligeStønadskontoer80DTO={tilgjengeligeStønadskontoer80DTO}\n                />\n            );\n        case 'farMedmorFørstegangssøknadMedAnnenPart':\n            return (\n                <FarMedmorFørstegangssøknadMedAnnenPart\n                    tilgjengeligeStønadskontoer100DTO={tilgjengeligeStønadskontoer100DTO}\n                    tilgjengeligeStønadskontoer80DTO={tilgjengeligeStønadskontoer80DTO}\n                    eksisterendeSakAnnenPart={eksisterendeSakAnnenPart}\n                />\n            );\n        case 'morFarAdopsjon':\n            return (\n                <MorFarAdopsjon\n                    tilgjengeligeStønadskontoer100DTO={tilgjengeligeStønadskontoer100DTO}\n                    tilgjengeligeStønadskontoer80DTO={tilgjengeligeStønadskontoer80DTO}\n                />\n            );\n        case 'morFødsel':\n            return (\n                <MorFødsel\n                    tilgjengeligeStønadskontoer100DTO={tilgjengeligeStønadskontoer100DTO}\n                    tilgjengeligeStønadskontoer80DTO={tilgjengeligeStønadskontoer80DTO}\n                    eksisterendeSakFar={eksisterendeSakAnnenPart}\n                />\n            );\n        case 'morFarFødselAnnenForelderHarRettIEØS':\n            return (\n                <MorFarFødselAnnenForelderHarRettIEØS\n                    tilgjengeligeStønadskontoer100DTO={tilgjengeligeStønadskontoer100DTO}\n                    tilgjengeligeStønadskontoer80DTO={tilgjengeligeStønadskontoer80DTO}\n                />\n            );\n        case 'morFarAdopsjonAnnenForelderHarRettIEØS':\n            return (\n                <MorFarAdopsjonAnnenForelderHarRettIEØS\n                    tilgjengeligeStønadskontoer100DTO={tilgjengeligeStønadskontoer100DTO}\n                    tilgjengeligeStønadskontoer80DTO={tilgjengeligeStønadskontoer80DTO}\n                />\n            );\n    }\n};\n\nexport default UttaksplanInfoScenarios;\n","import { getFamiliehendelsedato } from 'app/utils/barnUtils';\nimport { TilgjengeligeStønadskontoerParams } from './api';\nimport { dateToISOString } from '@navikt/sif-common-formik-ds/lib';\nimport {\n    AnnenForelder,\n    Barn,\n    Dekningsgrad,\n    ISOStringToDate,\n    Søkersituasjon,\n    andreAugust2022ReglerGjelder,\n    getErMorUfør,\n    isAdoptertAnnetBarn,\n    isAdoptertStebarn,\n    isAnnenForelderOppgitt,\n    isFarEllerMedmor,\n    isFødtBarn,\n    isUfødtBarn,\n} from '@navikt/fp-common';\n\nconst getFarHarRettINorge = (erFarMedmor: boolean, annenForelder: AnnenForelder): boolean => {\n    if (erFarMedmor) {\n        return true;\n    }\n\n    if (isAnnenForelderOppgitt(annenForelder)) {\n        return !!annenForelder.harRettPåForeldrepengerINorge;\n    }\n\n    return false;\n};\n\nconst getMorHarRettINorge = (erFarMedmor: boolean, annenForelder: AnnenForelder): boolean => {\n    if (!erFarMedmor) {\n        return true;\n    }\n\n    if (isAnnenForelderOppgitt(annenForelder)) {\n        return !!annenForelder.harRettPåForeldrepengerINorge;\n    }\n\n    return false;\n};\n\nconst getAnnenForelderHarRettIEØS = (annenForelder: AnnenForelder): boolean => {\n    if (isAnnenForelderOppgitt(annenForelder)) {\n        return !!annenForelder.harRettPåForeldrepengerIEØS;\n    }\n\n    return false;\n};\n\nconst getTermindatoSomSkalBrukes = (barn: Barn, termindatoSaksgrunnlag?: string) => {\n    if (isFødtBarn(barn) || isUfødtBarn(barn)) {\n        return termindatoSaksgrunnlag ? termindatoSaksgrunnlag : dateToISOString(barn.termindato);\n    }\n\n    return undefined;\n};\n\nexport const getTermindatoSomSkalBrukesFraSaksgrunnlagBeggeParter = (\n    termindatoSaksgrunnlag?: string,\n    termindatoSaksgrunnlagAnnenPart?: string,\n) => {\n    if (termindatoSaksgrunnlagAnnenPart) {\n        return termindatoSaksgrunnlagAnnenPart;\n    }\n\n    return termindatoSaksgrunnlag ? termindatoSaksgrunnlag : undefined;\n};\n\nexport const getAntallBarnSomSkalBrukesFraSaksgrunnlagBeggeParter = (\n    erFarEllerMedmor: boolean,\n    antallBarnSaksgrunnlag: number,\n    antallBarnSaksgrunnlagAnnenPart?: number,\n): number => {\n    if (erFarEllerMedmor && antallBarnSaksgrunnlagAnnenPart) {\n        return antallBarnSaksgrunnlagAnnenPart;\n    }\n\n    return antallBarnSaksgrunnlag;\n};\n\nconst getStønadskontoParams = (\n    dekningsgrad: Dekningsgrad,\n    barn: Barn,\n    annenForelder: AnnenForelder,\n    søkersituasjon: Søkersituasjon,\n    farHarAleneomsorg: boolean,\n    morHarAleneomsorg: boolean,\n    familieHendelseDatoNesteSak: string | undefined,\n    antallBarn: number,\n    oppgittTermindato?: string,\n): TilgjengeligeStønadskontoerParams => {\n    const erFarMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const familiehendelsesdato = ISOStringToDate(getFamiliehendelsedato(barn));\n    const søkerErFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    return {\n        antallBarn: antallBarn.toString(),\n        startdatoUttak: getFamiliehendelsedato(barn),\n        dekningsgrad: dekningsgrad,\n        farHarRettINorge: getFarHarRettINorge(erFarMedmor, annenForelder),\n        morHarRettINorge: getMorHarRettINorge(erFarMedmor, annenForelder),\n        harAnnenForelderTilsvarendeRettEØS: getAnnenForelderHarRettIEØS(annenForelder),\n        morHarAleneomsorg,\n        farHarAleneomsorg,\n        fødselsdato: isFødtBarn(barn) ? dateToISOString(barn.fødselsdatoer[0]) : undefined,\n        omsorgsovertakelsesdato:\n            isAdoptertAnnetBarn(barn) || isAdoptertStebarn(barn) ? dateToISOString(barn.adopsjonsdato) : undefined,\n        termindato: getTermindatoSomSkalBrukes(barn, oppgittTermindato),\n        minsterett: andreAugust2022ReglerGjelder(familiehendelsesdato!),\n        erMor: !søkerErFarEllerMedmor,\n        morHarUføretrygd: getErMorUfør(annenForelder, søkerErFarEllerMedmor),\n        familieHendelseDatoNesteSak: familieHendelseDatoNesteSak,\n    };\n};\n\nexport default getStønadskontoParams;\n","import {\n    Dekningsgrad,\n    getFarMedmorErAleneOmOmsorg,\n    getMorErAleneOmOmsorg,\n    intlUtils,\n    isAnnenForelderOppgitt,\n    isFarEllerMedmor,\n    isFødtBarn,\n    Step,\n} from '@navikt/fp-common';\nimport useAvbrytSøknad from 'app/utils/hooks/useAvbrytSøknad';\nimport { useEffect, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\nimport stepConfig from '../stepsConfig';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport Api from 'app/api/api';\nimport UttaksplanInfoScenarios from './components/UttaksplanInfoScenarios';\nimport getStønadskontoParams, {\n    getAntallBarnSomSkalBrukesFraSaksgrunnlagBeggeParter,\n    getTermindatoSomSkalBrukesFraSaksgrunnlagBeggeParter,\n} from 'app/api/getStønadskontoParams';\nimport { getFamiliehendelsedato } from 'app/utils/barnUtils';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport actionCreator from 'app/context/action/actionCreator';\nimport useFortsettSøknadSenere from 'app/utils/hooks/useFortsettSøknadSenere';\nimport { RequestStatus } from 'app/types/RequestState';\nimport { mapAnnenPartsEksisterendeSakFromDTO } from 'app/utils/eksisterendeSakUtils';\nimport { sendErrorMessageToSentry } from 'app/api/apiUtils';\nimport SøknadRoutes from 'app/routes/routes';\nimport useSaveLoadedRoute from 'app/utils/hooks/useSaveLoadedRoute';\nimport { Loader } from '@navikt/ds-react';\nimport { dateToISOString } from '@navikt/sif-common-formik-ds/lib';\n\nconst UttaksplanInfo = () => {\n    const intl = useIntl();\n\n    const søknad = useSøknad();\n    const { dispatch, state } = useForeldrepengesøknadContext();\n\n    const { barn, annenForelder, søkersituasjon, søker } = søknad;\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const { erAleneOmOmsorg } = søker;\n    const { barnFraNesteSak, eksisterendeSak } = state;\n\n    const familieHendelseDatoNesteSak =\n        barnFraNesteSak !== undefined ? barnFraNesteSak.familiehendelsesdato : undefined;\n    const førsteUttaksdagNesteBarnsSak =\n        state.barnFraNesteSak !== undefined ? state.barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n\n    const annenPartFnr =\n        isAnnenForelderOppgitt(annenForelder) && annenForelder.utenlandskFnr === false ? annenForelder.fnr : undefined;\n    const eksisterendeSakAnnenPartRequestIsSuspended = annenPartFnr !== undefined && annenPartFnr !== '' ? false : true;\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const barnFnr = isFødtBarn(barn) && barn.fnr !== undefined && barn.fnr?.length > 0 ? barn.fnr[0] : undefined;\n    const { eksisterendeSakAnnenPartData, eksisterendeSakAnnenPartError, eksisterendeSakAnnenPartRequestStatus } =\n        Api.useGetAnnenPartsVedtak(\n            annenPartFnr,\n            barnFnr,\n            familiehendelsesdato,\n            eksisterendeSakAnnenPartRequestIsSuspended,\n        );\n\n    const farMedmorErAleneOmOmsorg = getFarMedmorErAleneOmOmsorg(erFarEllerMedmor, erAleneOmOmsorg, annenForelder);\n    const morErAleneOmOmsorg = getMorErAleneOmOmsorg(!erFarEllerMedmor, erAleneOmOmsorg, annenForelder);\n\n    const eksisterendeVedtakAnnenPart = useMemo(\n        () =>\n            mapAnnenPartsEksisterendeSakFromDTO(\n                eksisterendeSakAnnenPartData,\n                barn,\n                erFarEllerMedmor,\n                familiehendelsesdato,\n                førsteUttaksdagNesteBarnsSak,\n            ),\n        [eksisterendeSakAnnenPartData, barn, erFarEllerMedmor, familiehendelsesdato, førsteUttaksdagNesteBarnsSak],\n    );\n\n    useSaveLoadedRoute(SøknadRoutes.UTTAKSPLAN_INFO);\n\n    const saksgrunnlagsTermindato = getTermindatoSomSkalBrukesFraSaksgrunnlagBeggeParter(\n        eksisterendeSak?.grunnlag.termindato,\n        eksisterendeVedtakAnnenPart?.grunnlag.termindato,\n    );\n\n    const saksgrunnlagsAntallBarn = getAntallBarnSomSkalBrukesFraSaksgrunnlagBeggeParter(\n        erFarEllerMedmor,\n        barn.antallBarn,\n        eksisterendeVedtakAnnenPart?.grunnlag.antallBarn,\n    );\n\n    useEffect(() => {\n        if (erFarEllerMedmor && søknad.barn.antallBarn !== saksgrunnlagsAntallBarn) {\n            const søknadMedOppdatertAntallBarn = {\n                ...søknad,\n                barn: { ...søknad.barn, antallBarn: saksgrunnlagsAntallBarn },\n            };\n            dispatch(actionCreator.setSøknad(søknadMedOppdatertAntallBarn));\n        }\n    }, [erFarEllerMedmor, saksgrunnlagsAntallBarn, dispatch, søknad]);\n\n    //Uttaksplaninfo vises ikke hvis endringssøknad, så det er nok å sette annen parts sak og uttaksplan her\n    useEffect(() => {\n        if (eksisterendeVedtakAnnenPart !== undefined) {\n            dispatch(actionCreator.setUttaksplan(eksisterendeVedtakAnnenPart.uttaksplan));\n            dispatch(actionCreator.setEksisterendeSak(eksisterendeVedtakAnnenPart));\n            dispatch(actionCreator.setAnnenPartsUttakErLagtTilIPlan(true));\n        }\n    }, [eksisterendeVedtakAnnenPart, dispatch]);\n\n    useEffect(() => {\n        dispatch(actionCreator.setUttaksplanSlettet(false));\n    }, [dispatch]);\n\n    const { tilgjengeligeStønadskontoerData: stønadskontoer100, tilgjengeligeStønadskontoerError } =\n        Api.useGetUttakskontoer(\n            getStønadskontoParams(\n                Dekningsgrad.HUNDRE_PROSENT,\n                barn,\n                annenForelder,\n                søkersituasjon,\n                farMedmorErAleneOmOmsorg,\n                morErAleneOmOmsorg,\n                dateToISOString(familieHendelseDatoNesteSak),\n                saksgrunnlagsAntallBarn,\n                saksgrunnlagsTermindato,\n            ),\n            eksisterendeSakAnnenPartRequestIsSuspended\n                ? false\n                : eksisterendeSakAnnenPartRequestStatus !== RequestStatus.FINISHED,\n        );\n    const { tilgjengeligeStønadskontoerData: stønadskontoer80 } = Api.useGetUttakskontoer(\n        getStønadskontoParams(\n            Dekningsgrad.ÅTTI_PROSENT,\n            barn,\n            annenForelder,\n            søkersituasjon,\n            farMedmorErAleneOmOmsorg,\n            morErAleneOmOmsorg,\n            dateToISOString(familieHendelseDatoNesteSak),\n            saksgrunnlagsAntallBarn,\n            saksgrunnlagsTermindato,\n        ),\n        eksisterendeSakAnnenPartRequestIsSuspended\n            ? false\n            : eksisterendeSakAnnenPartRequestStatus !== RequestStatus.FINISHED,\n    );\n    const onAvbrytSøknad = useAvbrytSøknad();\n    const onFortsettSøknadSenere = useFortsettSøknadSenere();\n\n    useEffect(() => {\n        if (tilgjengeligeStønadskontoerError) {\n            sendErrorMessageToSentry(tilgjengeligeStønadskontoerError);\n            throw new Error(\n                `Vi klarte ikke å hente opp stønadskontoer. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`,\n            );\n        }\n        if (eksisterendeSakAnnenPartError) {\n            sendErrorMessageToSentry(eksisterendeSakAnnenPartError);\n            throw new Error(\n                `Vi klarte ikke å hente informasjon om saken til annen forelder. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`,\n            );\n        }\n    }, [tilgjengeligeStønadskontoerError, eksisterendeSakAnnenPartError]);\n\n    if (\n        !stønadskontoer100 ||\n        !stønadskontoer80 ||\n        (eksisterendeSakAnnenPartRequestStatus !== RequestStatus.FINISHED &&\n            !eksisterendeSakAnnenPartRequestIsSuspended)\n    ) {\n        return (\n            <div style={{ textAlign: 'center', padding: '12rem 0' }}>\n                <Loader size=\"2xlarge\" />\n            </div>\n        );\n    }\n\n    return (\n        <Step\n            bannerTitle={intlUtils(intl, 'søknad.pageheading')}\n            activeStepId=\"uttaksplanInfo\"\n            pageTitle={intlUtils(intl, 'søknad.uttaksplanInfo')}\n            onCancel={onAvbrytSøknad}\n            onContinueLater={onFortsettSøknadSenere}\n            steps={stepConfig(intl, false)}\n        >\n            <UttaksplanInfoScenarios\n                tilgjengeligeStønadskontoer100DTO={stønadskontoer100}\n                tilgjengeligeStønadskontoer80DTO={stønadskontoer80}\n                eksisterendeSakAnnenPart={eksisterendeVedtakAnnenPart}\n            />\n        </Step>\n    );\n};\n\nexport default UttaksplanInfo;\n"],"names":["UttaksplanHexColor","FarMedmorFødselBeggeHarRettFormField","FarMedmorFødselBeggeHarRettFormComponents","getTypedFormComponents","initialFarMedmorFødselBeggeHarRettValues","mapFarMedmorFødselBeggeHarRettToState","values","getInitialFarMedmorFødselBeggeHarRettValues","state","dekningsgrad","getBarStyle","width","color","color2","Multibar","leftBar","rightBar","centerBar","borderColor","bem","bemUtils","jsxs","jsx","getProsentFordelingPerDel","tilgjengeligeDager","inkluderForeldrepengerFørTermin","pstMultiplikator","pstMor","pstFarMedmor","pstFelles","DeltOmsorgGraf","navnFarMedmor","navnMor","erFarEllerMedmor","intl","useIntl","fordeling","txtMor","intlUtils","getVarighetString","Personkort","FormattedMessage","getNavnGenitivEierform","Label","AleneomsorgGraf","txt","TilgjengeligeDagerGraf","props","summerAntallDagerIKontoer","kontoer","dager","konto","getMorsStønadskontoer","StønadskontoType","getFarsStønadskontoer","getForeldrepengeKontoer","getFellesStønadskontoer","kontoErFørTermin","kontoErEtterTermin","getTilgjengeligeDager","erDeltUttak","forelderVedAleneomsorg","kontoerEtterTermin","dagerTotalt","dagerForeldrepengerFørFødsel","dagerEtterTermin","dagerForeldrepenger","dagerMor","dagerFar","dagerFelles","dagerKunTilMor","Forelder","maksDagerFar","maksDagerMor","opprettAktivitetsFriKonto","generellMinsterett","nyeKontoer","mapTilgjengeligStønadskontoDTOToTilgjengeligStønadskonto","stønadskontoerDTO","tilgjengeligeStønadskontoer","getValgtStønadskontoFor80Og100Prosent","kontoer80","kontoer100","åttiProsent","hundreProsent","Dekningsgrad","includeFellesperiodeSpørsmål","farMedmorsFørsteDag","familiehendelsesdato","hasValue","andreAugust2022ReglerGjelder","dayjs","ISOStringToDate","getSisteUttaksdag6UkerEtterFødsel","FarMedmorFødselBeggeHarRettFormConfig","morsSisteDag","farMedmorFødselBeggeHarRettQuestionsConfig","Questions","MorsSisteDagSpørsmål","FormComponents","fieldName","maxDate","uttaksplanDatoavgrensninger","minDate","validateStartdatoFarMedmor","minDato","maxDato","permisjonStartdato","isISODateString","Uttaksdagen","formatDateExtended","FarMedmorsFørsteDag","setFieldValue","termindato","situasjon","morHarRettTilForeldrepengerIEØS","Fragment","Block","LenkeKnapp","formatDate","farSinFørsteUttaksdag","dateToISOString","RangeIcon","Component","type","icon","delay","minZoomTouchDelta","lastTapAt","lastClientX","lastClientY","preventDoubleTapZoom","event","tapAt","timeDiff","clientX","clientY","xDiff","yDiff","AriaText","id","children","tag","tagName","createElement","Sirkelknapp","onClick","ariaLabel","ikon","toggle","disabled","stil","size","posisjoneringFraHøyre","labelId","guid","classnames","getNumberFromStringInput","input","getNumberFromNumberInputValue","leggTil","currentAntall","max","number","trekkFra","min","AntallUkerOgDagerFellesperiodeFarMedmorSpørsmål","ukerFieldName","dagerFieldName","antallDager","antallUker","ukerMedFellesperiode","ReadMore","DekningsgradSpørsmål","FormKomponent","dekningsgradFeltNavn","spørsmålTekst","getAntallUker","useUttaksplanInfo","useForeldrepengesøknadContext","getDekningsgradFromString","deltUttakAdopsjonSøktFørst","famDato","startdatoPermisjon","fellesperiodeukerMor","harAnnenForelderSøktFP","førsteUttaksdagNesteBarnsSak","førsteUttaksdag","perioder","kontoType","forelder","k","currentTomDate","periodeMødrekvote","Periodetype","getTidsperiode","tidperiodeOverlapperDato","splittPeriodePåDato","periode","periodeFellesperiode","sorterPerioder","deltUttakAdopsjonSøktSist","antallDagerFellesperiodeFarMedmor","antallUkerFellesperiodeFarMedmor","morSinSisteUttaksdag","begrunnelseForUtsettelse","deltUttakFødselFarMedmor","isUttaksperiode","deltUttakAdopsjon","deltUttakFødselMor","ønsketStartdatoPermisjon","skalHaForeldrePengerFørFødsel","fpFørFødselKonto","mkKonto","dagerFørFødsel","merEnnTreUkerPermisjonFørFødsel","startdatoFpFørFødsel","ekstraPeriodeFørFødsel","periodeFørFødsel","ekstraPermisjonFørFødsel","p","trekkEkstraPermisjonDager","Tidsperioden","periodeFellesperiodeMor","morHarRettPåForeldrepengerIEØS","dateIsSameOrAfter","startDatoUttak","sisteUttaksDag","fedrekvoteKonto","fellesKonto","morHarRett","skalFarUtsetteEtterMorSinSisteUttaksdag","erPeriodeWLBRundtFødsel","starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel","lengdePåForeslåttUttak","getLengdePåForeslåttWLBUttakFarMedmor","fedrekvotePeriode","farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato","splittUttaksperiodePåFamiliehendelsesdato","antallDagerFellesperiode","fellesPeriode","deltUttakFødsel","annenForelderHarRettPåForeldrepengerIEØS","tilgjengeligeStønadskontoerUtenFPP","deltUttak","params","ikkeDeltUttakAdopsjonFarMedmor","foreldrepengerKonto","erMorUfør","aktivitetsfriKvote","bareFarMedmorHarRett","startDatoNestePeriode","aktivitetsFriPeriode","sp","aktivitetskravPeriode","ikkeDeltUttakAdopsjonMor","ikkeDeltUttakAdopsjon","ikkeDeltUttakFødselMor","foreldrePengerFørFødselKonto","antallDagerIForeldrepenger","foreldrepengerPeriode","ikkeDeltUttakFødselFarMedmor","startDato","ikkeDeltUttakFødsel","ikkeDeltUttak","lagUttaksplan","erEndringssøknad","søkerErFarEllerMedmor","annenForelderErUfør","uttaksplanSkjema","harAktivitetskravIPeriodeUtenUttak","erAdopsjon","morSinSisteUttaksdagDate","forslag","finnOgSettInnHull","FarMedmorFødselFørsteganggsøknadBeggeHarRett","tilgjengeligeStønadskontoer100DTO","tilgjengeligeStønadskontoer80DTO","annenForelder","søkersituasjon","barn","useSøknad","person","useSøkerinfo","isFarEllerMedmor","erFødsel","lagretUttaksplanInfo","navnFar","isAnnenForelderOppgitt","getFamiliehendelsedato","getErMorUfør","familiehendelsesdatoDate","getTermindato","onValidSubmitHandler","actionCreator","handleSubmit","isSubmitting","useOnValidSubmit","SøknadRoutes","state2","storeAppState","formValues","visibility","valgtStønadskonto","GuidePanel","StepButtonWrapper","Button","Link","getPreviousStepHref","MorFødselFormField","MorFødselFormComponents","initialMorFødselValues","mapMorFødselFormToState","getInitialMorFødselValues","defaultPermisjonStartdato","validateErStartdatoFørTermindato","familiehendelsedato","skalIkkeHaUttakFørTermin","avgrensninger","uttaksConstants","getÅrsakDersomUgyldigStartdato","startdato","førsteMuligeStartdato","VeilederStartdatoPermisjon","antallDagerFørFødselIhtRegler","visKunFeil","ugyldigDatoÅrsak","msg","React.useMemo","formaterDato","getVarighetForStartdato","barnetErFødt","StartdatoPermisjonMor","erBarnFødt","isFødtBarn","spørsmålNår","spørsmålHaddeIkke","sisteUttaksdagFørTermin","tidsperiode","getValidTidsperiode","visVeileder","datoAvgrensninger","maksDato","RangeStepper","direction","label","defaultValueLabelRenderer","options","defaultBottomContentRenderer","BodyShort","RangeInput","__publicField","_e","hjelpetekst","ariaLabelText","inputId","valueLabelRenderer","steppers","ariaValueChangedMessage","bottomContentRenderer","hjelpetekstApneLabel","valueLabelPlacement","rest","value","onChange","labelRenderer","ariaLabelId","bottomRenderer","bemWrapper","bemRangeInput","bemStepper","Fieldset","c","e","FordelingFellesperiodeSpørsmål","valgtFellesperiodeukerMor","annenForelderErFarEllerMedmor","mor","farMedmor","getAntallUkerFellesperiode","useEffect","ukerFellesperiode","antallUkerFedreKvote","getAntallUkerFedrekvote","antallUkerMødreKvote","getAntallUkerMødrekvote","infotekst","annenForeldersNavn","links","fellesperiodeukerMor2","Ingress","MorFødselFormConfig","harRettPåForeldrepengerINorge","erAleneOmOmsorg","morFødselQuestionsConfig","skalViseInfoOmPrematuruker","fødselsdato","fødselsdatoEtterEllerLikFørsteJuli","getSamtidigUttaksprosent","gradertPeriode","stillingsprosent","leggTilAnnenPartsPerioderISøkerenesUttaksplan","annenPartsPerioder","uttaksplan","bareFarHarRett","normaliserteEgnePerioder","normaliserteAnnenPartsPerioder","normaliserPerioder","overlappendePerioderAnnenPart","Periodene","overlappendePeriodeAnnenPart","isUttakAnnenPart","settInnAnnenPartsUttak","MorFødsel","eksisterendeSakFar","fornavn","mellomnavn","etternavn","antallBarn","getFødselsdato","visInfoOmPrematuruker","ekstraDagerGrunnetPrematurFødsel","oppgittAnnenForelder","formaterNavn","submissionValues","uttaksplanforslag","getHarAktivitetskravIPeriodeUtenUttak","uttaksplanMedAnnenPart","getFlerbarnsuker","AdopsjonStartdatoValg","finnEnum","valg","MorFarAdopsjonFormField","MorFarAdopsjonFormComponents","initialMorFarAdopsjonValues","YesOrNo","mapMorFarAdopsjonFormToState","convertYesOrNoOrUndefinedToBoolean","getInitialMorFarAdopsjonValues","MorFarAdopsjonFormConfig","harAnnenForelderRettPåForeldrepengerINorge","startdatoAdopsjonValg","annenStartdatoAdopsjon","annenForeldersSisteDag","søkersFørsteDag","antallUkerFellesperiode","morFarAdopsjonQuestionsConfig","validateErAnnenStartdatoAdopsjonGyldig","finnStartdatoAdopsjon","adopsjonsdato","ankomstdato","assertUnreachable","konverterStringTilDate","invalidDateRanges","StartdatoAdopsjon","valgtStartdatoAdopsjon","radios","isAdoptertAnnetBarn","formaterDatoUtenDag","isAdoptertBarn","MorFarAdopsjon","søkerErAleneOmOmsorg","annenForelderOppgittIkkeAleneOmOmsorg","shouldRender","barnAdopsjonsdato","erSøkerMor","fornavnAnnenForeldre","erAnnenPartUfør","navnAnnenPart","navnSøker","erAdoptertIUtlandet","latestDate","findEldsteDato","isAdoptertStebarn","MorFarAdopsjonAnnenForelderHarRettIEØSFormField","MorFarAdopsjonAnnenForelderHarRettIEØSFormComponents","MorFarAdopsjonAnnenForelderHarRettIEØSFormConfig","morFarAdopsjonAnnenForelderHarRettIEØSQuestionsConfig","initialMorFarAdopsjonAnnenForelderHarRettIEØSValues","mapMorFarAdopsjonAnnenForelderHarRettIEØSFormToState","getInitialMorFarAdopsjonAnnenForelderHarRettIEØSValues","MorFarAdopsjonAnnenForelderHarRettIEØS","erDeltUttakINorge","MorFarFødselAnnenForelderHarRettIEØSFormField","MorFarFødselAnnenForelderHarRettIEØSFormComponents","MorFarFødselAnnenForelderHarRettIEØSFormConfig","morFarFødselAnnenForelderHarRettIEØSQuestionsConfig","initialMorFarFødselAnnenForelderHarRettIEØSValues","mapMorFarFødselAnnenForelderHarRettIEØSFormToState","getInitialMorFarFødselAnnenForelderHarRettIEØSValues","MorFarFødselAnnenForelderHarRettIEØS","FarMedmorAleneomsorgFødselFormField","FarMedmorAleneomsorgFødselFormComponents","FarMedmorAleneomsorgFødselFormConfig","startPåOmsorgsovertakelse","startdatoUttak","farMedmorAleneomsorgFødselQuestionsConfig","initialFarMedmorAleneomsorgFødselValues","mapFarMedmorAleneomsorgFødselFormToState","datoForAleneomsorg","getInitialFarMedmorAleneomsorgFødselValues","startetPåOmsorgsovertakelse","validateStartdatoUttakFarMedmorAleneomsorgFødsel","isDateABeforeDateB","FarMedmorAleneomsorgFødsel","søker","uttaksplanInfo","kontoerForValgtDekningsgrad","farMedmorAleneomsorgFødselAdopsjonQuestionsConfig","FarMedmorFødselOgMorHarIkkeRettFormField","FarMedmorFødselOgMorHarIkkeRettFormComponents","initialFarMedmorFødselOgMorHarIkkeRettValues","mapFarMedmorFødselOgMorHarIkkeRettFormToState","getInitialFarMedmorFødselOgMorHarIkkeRettValues","FarMedmorFødselOgMorHarIkkeRettFormConfig","farMedmorFødselOgMorHarIkkeRettQuestionsConfig","FarMedmorFødselOgMorHarIkkeRett","annenForelderHarIkkeRett","startDatoUttaksplan","datoAvgrensinger","FarMedmorFødselOgMorHarIkkeRett$1","FarMedmorFørstegangssøknadMedAnnenPartFormField","FarMedmorFørstegangssøknadMedAnnenPartFormComponents","FarMedmorFørstegangssøknadMedAnnenPartFormConfig","farMedmorFørstegangssøknadMedAnnenPartQuestionsConfig","getFarMedmorFørstegangssøknadMedAnnenPartInitialValues","FarMedmorFørstegangssøknadMedAnnenPart","eksisterendeSakAnnenPart","søknad","familiehendelsedatoDate","getMorHarRettPåForeldrepengerINorgeEllerEØS","morsSisteUttaksdag","stønadskontoer","grunnlag","farMedmorSinePerioder","isInfoPeriode","valgtMengdeStønadskonto","InfoOmSøknaden","getUttaksplanScenario","annenForelderKanIkkeOppgis","annenForelderHarRett","annenForelderHarRettIEØS","UttaksplanInfoScenarios","harAnnenForelderRettIEØS","FarMedmorAleneomsorgFødselAdopsjon","getFarHarRettINorge","erFarMedmor","getMorHarRettINorge","getAnnenForelderHarRettIEØS","getTermindatoSomSkalBrukes","termindatoSaksgrunnlag","isUfødtBarn","getTermindatoSomSkalBrukesFraSaksgrunnlagBeggeParter","termindatoSaksgrunnlagAnnenPart","getAntallBarnSomSkalBrukesFraSaksgrunnlagBeggeParter","antallBarnSaksgrunnlag","antallBarnSaksgrunnlagAnnenPart","getStønadskontoParams","farHarAleneomsorg","morHarAleneomsorg","familieHendelseDatoNesteSak","oppgittTermindato","UttaksplanInfo","dispatch","barnFraNesteSak","eksisterendeSak","annenPartFnr","eksisterendeSakAnnenPartRequestIsSuspended","barnFnr","_a","eksisterendeSakAnnenPartData","eksisterendeSakAnnenPartError","eksisterendeSakAnnenPartRequestStatus","Api","farMedmorErAleneOmOmsorg","getFarMedmorErAleneOmOmsorg","morErAleneOmOmsorg","getMorErAleneOmOmsorg","eksisterendeVedtakAnnenPart","useMemo","mapAnnenPartsEksisterendeSakFromDTO","useSaveLoadedRoute","saksgrunnlagsTermindato","saksgrunnlagsAntallBarn","søknadMedOppdatertAntallBarn","stønadskontoer100","tilgjengeligeStønadskontoerError","RequestStatus","stønadskontoer80","onAvbrytSøknad","useAvbrytSøknad","onFortsettSøknadSenere","useFortsettSøknadSenere","sendErrorMessageToSentry","Loader","Step","stepConfig","UttaksplanInfo$1"],"mappings":"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"}