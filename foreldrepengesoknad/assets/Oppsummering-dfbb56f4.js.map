{"version":3,"file":"Oppsummering-dfbb56f4.js","sources":["../../src/app/steps/oppsummering/components/OppsummeringsPunkt.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/InnholdMedLedetekst.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/kompleks-feltoppsummering/KompleksFeltoppsummering.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/oppsummering-av-dokumentasjon/OppsummeringAvDokumentasjon.tsx","../../src/app/steps/oppsummering/components/annen-forelder-oppsummering/AnnenForelderOppsummering.tsx","../../src/app/steps/oppsummering/components/barn-oppsummering/BarnAdoptertIUtlandetDetaljer.tsx","../../src/app/steps/oppsummering/components/barn-oppsummering/BarnOppsummering.tsx","../../src/app/steps/oppsummering/components/OppsummeringsPanel.tsx","../../src/app/steps/oppsummering/components/Personalia.tsx","../../src/app/steps/oppsummering/components/utenlandsopphold-oppsummering/UtenlandsoppholdOppsummeringListe.tsx","../../src/app/steps/oppsummering/components/utenlandsopphold-oppsummering/UtenlandsoppholdOppsummering.tsx","../../src/app/steps/oppsummering/oppsummeringFormConfig.ts","../../src/app/steps/oppsummering/validation/oppsummeringValidation.ts","../../src/app/steps/oppsummering/components/andre-inntekter-oppsummering/AnnenInntektDetaljer.tsx","../../src/app/steps/oppsummering/components/andre-inntekter-oppsummering/InntekterTabell.tsx","../../src/app/steps/oppsummering/components/andre-inntekter-oppsummering/AndreInntekterOppsummering.tsx","../../src/app/steps/oppsummering/components/andre-inntekter-oppsummering/FrilansOppsummering.tsx","../../src/app/steps/oppsummering/components/andre-inntekter-oppsummering/Næringsdetaljer.tsx","../../src/app/steps/oppsummering/components/andre-inntekter-oppsummering/SelvstendigNæringsdrivendeOppsummering.tsx","../../src/app/steps/oppsummering/components/andre-inntekter-oppsummering/ArbeidsforholdOgAndreInntekterOppsummering.tsx","../../src/app/utils/tilleggsopplysningerUtils.ts","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/feltoppsummering/Feltoppsummering.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/oppsummeringsliste/list/List.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/oppsummeringsliste/Oppsummeringsliste.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/OppsummeringUtils.ts","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/detaljer/Overføringsperiodedetaljer.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/detaljer/MorsaktiviteterDetaljer.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/detaljer/Uttaksperiodedetaljer.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/detaljer/Uttsettelsesperiodedetaljer.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/UttaksplanOppsummeringsliste.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/UttaksplanOppsummering.tsx","../../src/app/utils/hooks/useAbortSignal.ts","../../src/app/steps/oppsummering/Oppsummering.tsx"],"sourcesContent":["import { Label } from '@navikt/ds-react';\nimport { Block } from '@navikt/fp-common';\nimport { FunctionComponent, ReactNode } from 'react';\n\ninterface Props {\n    title: string;\n    visible?: boolean;\n    children?: ReactNode;\n}\n\nconst OppsummeringsPunkt: FunctionComponent<Props> = ({ title, visible, children }) => {\n    return (\n        <Block padBottom=\"l\" visible={visible}>\n            <Label>{title}</Label>\n            {children}\n        </Block>\n    );\n};\n\nexport default OppsummeringsPunkt;\n","import * as React from 'react';\nimport { BodyShort, Label } from '@navikt/ds-react';\nimport { guid } from '@navikt/fp-common';\n\ninterface InnholdMedLedetekstProps {\n    ledetekst: string;\n    children: JSX.Element | JSX.Element[];\n    className?: string;\n}\n\nconst hasListOfChildren = (children: string | string[]): boolean => Array.isArray(children);\n\nconst InnholdMedLedetekst: React.FunctionComponent<InnholdMedLedetekstProps> = ({ ledetekst, children, className }) => {\n    return (\n        <div className={className}>\n            <Label>{ledetekst}</Label>\n            {!Array.isArray(children) && hasListOfChildren((children as JSX.Element).props.children)\n                ? (children as JSX.Element).props.children.map((child: string) => (\n                      <BodyShort className=\"feltoppsummering__verdi\" key={guid()}>\n                          {child}\n                      </BodyShort>\n                  ))\n                : children}\n        </div>\n    );\n};\n\nexport default InnholdMedLedetekst;\n","import * as React from 'react';\nimport InnholdMedLedetekst from '../InnholdMedLedetekst';\n\ninterface Props {\n    className?: string;\n    ledetekst: string;\n    children: JSX.Element | JSX.Element[];\n}\n\nconst KompleksFeltoppsummering: React.FunctionComponent<Props> = ({ ledetekst, children, className }) => (\n    <InnholdMedLedetekst className={`feltoppsummering ${className}`} ledetekst={ledetekst}>\n        {children}\n    </InnholdMedLedetekst>\n);\n\nexport default KompleksFeltoppsummering;\n","import { Attachment, intlUtils, isAttachmentWithError } from '@navikt/fp-common';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport KompleksFeltoppsummering from '../kompleks-feltoppsummering/KompleksFeltoppsummering';\nimport { Link, Tag } from '@navikt/ds-react';\n\nimport './oppsummeringAvDokumentasjon.less';\n\ninterface OppsummeringAvDokumentasjonProps {\n    ledetekst?: string;\n    vedlegg: Attachment[];\n}\n\ntype Props = OppsummeringAvDokumentasjonProps;\n\nconst OppsummeringAvDokumentasjon: React.FunctionComponent<Props> = (props) => {\n    const { ledetekst, vedlegg } = props;\n    const intl = useIntl();\n\n    const renderListOfAttachmentPreviewLinks = () => {\n        return vedlegg\n            .filter((a: Attachment) => !isAttachmentWithError(a))\n            .map(({ url, id, filename }) => (\n                <Link href={url!} key={id} target=\"_blank\">\n                    {filename}\n                </Link>\n            ));\n    };\n\n    return (\n        <KompleksFeltoppsummering\n            className=\"oppsummeringAvDokumentasjon\"\n            ledetekst={ledetekst || intlUtils(intl, 'vedlagtdokumentasjon')}\n        >\n            {vedlegg && vedlegg.filter((a: Attachment) => !isAttachmentWithError(a)).length > 0 ? (\n                <div>{renderListOfAttachmentPreviewLinks()}</div>\n            ) : (\n                <div>\n                    <Tag variant=\"warning\">{intlUtils(intl, 'oppsummering.andreInntekter.dokumentasjon.mangler')}</Tag>\n                </div>\n            )}\n        </KompleksFeltoppsummering>\n    );\n};\n\nexport default OppsummeringAvDokumentasjon;\n","import {\n    AnnenForelder,\n    Barn,\n    Søkerrolle,\n    intlUtils,\n    isAnnenForelderIkkeOppgitt,\n    isAnnenForelderOppgitt,\n    isFarEllerMedmor,\n} from '@navikt/fp-common';\nimport Søker from 'app/context/types/Søker';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport OppsummeringAvDokumentasjon from '../uttaksplan-oppsummering/oppsummering-av-dokumentasjon/OppsummeringAvDokumentasjon';\nimport { BodyShort } from '@navikt/ds-react';\n\ninterface Props {\n    annenForelder: AnnenForelder;\n    søker: Søker;\n    søkerrolle: Søkerrolle;\n    barn: Barn;\n    farMedmorErAleneOmOmsorg: boolean;\n}\n\nconst AnnenForelderOppsummering: FunctionComponent<Props> = ({\n    annenForelder,\n    søker,\n    søkerrolle,\n    barn,\n    farMedmorErAleneOmOmsorg,\n}) => {\n    const intl = useIntl();\n    const erFarEllerMedmor = isFarEllerMedmor(søkerrolle);\n    const { dokumentasjonAvAleneomsorg } = barn;\n\n    return (\n        <>\n            {isAnnenForelderIkkeOppgitt(annenForelder) && (\n                <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.annenForelder.ikkeOppgitt')} />\n            )}\n            {isAnnenForelderOppgitt(annenForelder) && (\n                <>\n                    <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.annenForelder.navn')}>\n                        <BodyShort>{`${annenForelder.fornavn} ${annenForelder.etternavn}`}</BodyShort>\n                    </OppsummeringsPunkt>\n                    <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.annenForelder.fnr')}>\n                        <BodyShort>{annenForelder.fnr}</BodyShort>\n                    </OppsummeringsPunkt>\n                    <OppsummeringsPunkt\n                        title={\n                            !søker.erAleneOmOmsorg\n                                ? intlUtils(intl, 'oppsummering.annenForelder.fellesOmsorg.tittel')\n                                : intlUtils(intl, 'oppsummering.annenForelder.aleneOmOmsorg.tittel')\n                        }\n                    >\n                        <BodyShort>\n                            <FormattedMessage\n                                id={\n                                    !søker.erAleneOmOmsorg\n                                        ? 'oppsummering.annenForelder.fellesOmsorg.tekst'\n                                        : 'oppsummering.annenForelder.aleneOmOmsorg.tekst'\n                                }\n                            />\n                        </BodyShort>\n                    </OppsummeringsPunkt>\n                    {!søker.erAleneOmOmsorg && (\n                        <OppsummeringsPunkt\n                            title={intlUtils(intl, 'oppsummering.annenForelder.rettPåForeldrepengerINorge', {\n                                navn: annenForelder.fornavn,\n                            })}\n                        >\n                            <BodyShort>\n                                <FormattedMessage id={annenForelder.harRettPåForeldrepengerINorge ? 'ja' : 'nei'} />\n                            </BodyShort>\n                        </OppsummeringsPunkt>\n                    )}\n                    {!søker.erAleneOmOmsorg && !annenForelder.harRettPåForeldrepengerINorge && (\n                        <OppsummeringsPunkt\n                            title={intlUtils(intl, 'oppsummering.annenForelder.harOppholdtSegIEØS', {\n                                navn: annenForelder.fornavn,\n                            })}\n                        >\n                            <BodyShort>\n                                <FormattedMessage id={annenForelder.harOppholdtSegIEØS ? 'ja' : 'nei'} />\n                            </BodyShort>\n                        </OppsummeringsPunkt>\n                    )}\n                    {!søker.erAleneOmOmsorg && annenForelder.harOppholdtSegIEØS === true && (\n                        <OppsummeringsPunkt\n                            title={intlUtils(intl, 'oppsummering.annenForelder.rettPåForeldrepengerIEØS', {\n                                navn: annenForelder.fornavn,\n                            })}\n                        >\n                            <BodyShort>\n                                <FormattedMessage id={annenForelder.harRettPåForeldrepengerIEØS ? 'ja' : 'nei'} />\n                            </BodyShort>\n                        </OppsummeringsPunkt>\n                    )}\n                    {erFarEllerMedmor &&\n                        !søker.erAleneOmOmsorg &&\n                        !annenForelder.harRettPåForeldrepengerINorge &&\n                        !annenForelder.harRettPåForeldrepengerIEØS && (\n                            <OppsummeringsPunkt\n                                title={intlUtils(intl, 'annenForelder.erMorUfør', {\n                                    navn: annenForelder.fornavn,\n                                })}\n                            >\n                                <BodyShort>\n                                    <FormattedMessage id={annenForelder.erUfør ? 'ja' : 'nei'} />\n                                </BodyShort>\n                            </OppsummeringsPunkt>\n                        )}\n                </>\n            )}\n            {farMedmorErAleneOmOmsorg && erFarEllerMedmor && (\n                <OppsummeringAvDokumentasjon\n                    vedlegg={dokumentasjonAvAleneomsorg || []}\n                    ledetekst={intlUtils(intl, 'oppsummering.annenForelder.dokumentasjonAvAleneomsorg')}\n                />\n            )}\n        </>\n    );\n};\n\nexport default AnnenForelderOppsummering;\n","import {\n    AdoptertAnnetBarn,\n    AdoptertStebarn,\n    formatDate,\n    hasValue,\n    intlUtils,\n    isAdoptertStebarn,\n} from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport { BodyShort } from '@navikt/ds-react';\nimport { førsteOktober2021ReglerGjelder } from 'app/utils/dateUtils';\n\ninterface Props {\n    barn: AdoptertAnnetBarn | AdoptertStebarn;\n    familiehendelsesdato: Date;\n}\n\nconst BarnAdoptertIUtlandetDetaljer: FunctionComponent<Props> = ({ barn, familiehendelsesdato }) => {\n    const intl = useIntl();\n\n    if (isAdoptertStebarn(barn) || førsteOktober2021ReglerGjelder(familiehendelsesdato)) {\n        return null;\n    }\n\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.barn.adoptertIUtlandet')}>\n                <BodyShort>\n                    <FormattedMessage id={barn.adoptertIUtlandet ? 'ja' : 'nei'} />\n                </BodyShort>\n            </OppsummeringsPunkt>\n            <OppsummeringsPunkt\n                title={intlUtils(intl, 'oppsummering.barn.ankomstdato')}\n                visible={hasValue(barn.ankomstdato)}\n            >\n                <BodyShort>{formatDate(barn.ankomstdato!)}</BodyShort>\n            </OppsummeringsPunkt>\n        </>\n    );\n};\n\nexport default BarnAdoptertIUtlandetDetaljer;\n","import {\n    Barn,\n    BarnType,\n    formatDate,\n    intlUtils,\n    isAdoptertAnnetBarn,\n    isAdoptertStebarn,\n    isUfødtBarn,\n} from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport BarnAdoptertIUtlandetDetaljer from './BarnAdoptertIUtlandetDetaljer';\nimport { BodyShort } from '@navikt/ds-react';\n\ninterface Props {\n    barn: Barn;\n    familiehendelsesdato: Date;\n}\n\nconst getAntallBarnTekst = (antallBarn: number, intl: IntlShape): string => {\n    if (antallBarn === 1) {\n        return intlUtils(intl, 'oppsummering.barn.antallBarn.ettBarn');\n    }\n\n    if (antallBarn === 2) {\n        return intlUtils(intl, 'oppsummering.barn.antallBarn.toBarn');\n    }\n\n    return intlUtils(intl, 'oppsummering.barn.antallBarn.flere', { antallBarn });\n};\n\nconst getTerminEllerFødselTittel = (type: BarnType) => {\n    if (type === BarnType.UFØDT) {\n        return 'Termin';\n    }\n\n    return 'Fødselsdato';\n};\n\nconst getTerminEllerFødselsdato = (barn: Barn) => {\n    if (isUfødtBarn(barn)) {\n        return formatDate(barn.termindato);\n    }\n\n    return formatDate(barn.fødselsdatoer[0]);\n};\n\nconst BarnOppsummering: FunctionComponent<Props> = ({ barn, familiehendelsesdato }) => {\n    const intl = useIntl();\n\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.barn.søknadenGjelder')}>\n                <BodyShort>{getAntallBarnTekst(barn.antallBarn, intl)}</BodyShort>\n            </OppsummeringsPunkt>\n            <OppsummeringsPunkt title={getTerminEllerFødselTittel(barn.type)}>\n                <BodyShort>{getTerminEllerFødselsdato(barn)}</BodyShort>\n            </OppsummeringsPunkt>\n            {(isAdoptertAnnetBarn(barn) || isAdoptertStebarn(barn)) && (\n                <>\n                    <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.barn.gjelderSøknadenStebarnsadopsjon')}>\n                        <BodyShort>\n                            <FormattedMessage id={barn.type === BarnType.ADOPTERT_STEBARN ? 'ja' : 'nei'} />\n                        </BodyShort>\n                    </OppsummeringsPunkt>\n                    <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.barn.adopsjonsdato')}>\n                        <BodyShort>{formatDate(barn.adopsjonsdato)}</BodyShort>\n                    </OppsummeringsPunkt>\n                    <BarnAdoptertIUtlandetDetaljer barn={barn} familiehendelsesdato={familiehendelsesdato} />\n                </>\n            )}\n        </>\n    );\n};\n\nexport default BarnOppsummering;\n","import { FunctionComponent, ReactNode } from 'react';\nimport { bemUtils } from '@navikt/fp-common';\nimport { Accordion } from '@navikt/ds-react';\n\nimport './oppsummeringsPanel.less';\n\ninterface Props {\n    title: string;\n    children: ReactNode;\n}\n\nconst OppsummeringsPanel: FunctionComponent<Props> = ({ title, children }) => {\n    const bem = bemUtils('oppsummeringsPanel');\n\n    return (\n        <Accordion>\n            <Accordion.Item className={bem.element('specificity')}>\n                <Accordion.Header className={bem.element('header')}>{title}</Accordion.Header>\n                <Accordion.Content>{children}</Accordion.Content>\n            </Accordion.Item>\n        </Accordion>\n    );\n};\n\nexport default OppsummeringsPanel;\n","import { FunctionComponent } from 'react';\nimport { BodyShort } from '@navikt/ds-react';\nimport OppsummeringsPunkt from './OppsummeringsPunkt';\nimport { Søkerinfo } from '@navikt/fp-common';\n\nimport './personalia.less';\n\ninterface Props {\n    søkerinfo: Søkerinfo;\n}\n\nconst Personalia: FunctionComponent<Props> = ({ søkerinfo }) => {\n    return (\n        <OppsummeringsPunkt title={`${søkerinfo.person.fornavn} ${søkerinfo.person.etternavn}`}>\n            <BodyShort>{søkerinfo.person.fnr}</BodyShort>\n        </OppsummeringsPunkt>\n    );\n};\n\nexport default Personalia;\n","import { bemUtils, formatDate, intlUtils } from '@navikt/fp-common';\nimport { Utenlandsopphold } from 'app/context/types/InformasjonOmUtenlandsopphold';\nimport countries from 'i18n-iso-countries';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport './utenlandsoppholdOppsummeringListe.less';\nimport { BodyShort } from '@navikt/ds-react';\n\ninterface Props {\n    utenlandsopphold: Utenlandsopphold[];\n    tidligereOpphold: boolean;\n}\n\nconst UtenlandsoppholdOppsummeringListe: FunctionComponent<Props> = ({ utenlandsopphold, tidligereOpphold }) => {\n    const intl = useIntl();\n    const bem = bemUtils('utenlandsoppholdOppsummeringListe');\n\n    return (\n        <ul className={bem.block}>\n            {utenlandsopphold.map((opphold) => {\n                return (\n                    <li\n                        className={bem.element('listElement')}\n                        key={`${opphold.land}${opphold.tidsperiode.fom}${opphold.tidsperiode.tom}`}\n                    >\n                        <BodyShort>\n                            {tidligereOpphold\n                                ? intlUtils(intl, 'oppsummering.utenlandsopphold.harBoddINorge.utenlands', {\n                                      land: countries.getName(opphold.land, 'nb'),\n                                  })\n                                : intlUtils(intl, 'oppsummering.utenlandsopphold.skalBoINorge.utenlands', {\n                                      land: countries.getName(opphold.land, 'nb'),\n                                  })}\n                        </BodyShort>\n                        <BodyShort>\n                            {formatDate(opphold.tidsperiode.fom)} - {formatDate(opphold.tidsperiode.tom)}\n                        </BodyShort>\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n\nexport default UtenlandsoppholdOppsummeringListe;\n","import { Barn, doesTidsperiodeContainDate, intlUtils, isAdoptertAnnetBarn, isAdoptertStebarn } from '@navikt/fp-common';\nimport InformasjonOmUtenlandsopphold, { Utenlandsopphold } from 'app/context/types/InformasjonOmUtenlandsopphold';\nimport { getFamiliehendelsedato } from 'app/utils/barnUtils';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport UtenlandsoppholdListe from './UtenlandsoppholdOppsummeringListe';\nimport { BodyShort } from '@navikt/ds-react';\n\ninterface Props {\n    informasjonOmUtenlandsopphold: InformasjonOmUtenlandsopphold;\n    barn: Barn;\n}\n\nconst getErINorgePåFamiliehendelsedato = (\n    familiehendelsedato: string,\n    tidligereOpphold: Utenlandsopphold[],\n    senereOpphold: Utenlandsopphold[],\n): boolean => {\n    let erINorge = true;\n\n    tidligereOpphold.forEach((tidOpphold) => {\n        if (doesTidsperiodeContainDate(tidOpphold.tidsperiode, familiehendelsedato)) {\n            erINorge = false;\n        }\n    });\n\n    senereOpphold.forEach((senOpphold) => {\n        if (doesTidsperiodeContainDate(senOpphold.tidsperiode, familiehendelsedato)) {\n            erINorge = false;\n        }\n    });\n\n    return erINorge;\n};\n\nconst erAdoptertBarn = (barn: Barn): boolean => {\n    return isAdoptertAnnetBarn(barn) || isAdoptertStebarn(barn);\n};\n\nconst UtenlandsoppholdOppsummering: FunctionComponent<Props> = ({ informasjonOmUtenlandsopphold, barn }) => {\n    const intl = useIntl();\n    const { senereOpphold, tidligereOpphold } = informasjonOmUtenlandsopphold;\n    const familiehendelsedato = getFamiliehendelsedato(barn);\n    const erINorgePåFamiliehendelsedato = getErINorgePåFamiliehendelsedato(\n        familiehendelsedato,\n        tidligereOpphold,\n        senereOpphold,\n    );\n\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.utenlandsopphold.harBoddINorge')}>\n                {informasjonOmUtenlandsopphold.iNorgeSiste12Mnd ? (\n                    <BodyShort>{intlUtils(intl, 'oppsummering.utenlandsopphold.harBoddINorge.norge')}</BodyShort>\n                ) : null}\n\n                <UtenlandsoppholdListe\n                    utenlandsopphold={informasjonOmUtenlandsopphold.tidligereOpphold}\n                    tidligereOpphold={true}\n                />\n            </OppsummeringsPunkt>\n\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.utenlandsopphold.skalBoINorge')}>\n                {informasjonOmUtenlandsopphold.iNorgeNeste12Mnd ? (\n                    <BodyShort>{intlUtils(intl, 'oppsummering.utenlandsopphold.skalBoINorge.norge')}</BodyShort>\n                ) : null}\n\n                <UtenlandsoppholdListe\n                    utenlandsopphold={informasjonOmUtenlandsopphold.senereOpphold}\n                    tidligereOpphold={false}\n                />\n            </OppsummeringsPunkt>\n\n            <OppsummeringsPunkt\n                title={\n                    erAdoptertBarn(barn)\n                        ? intlUtils(intl, 'oppsummering.utenlandsopphold.erINorgeOmsorgsovertakelsesdato')\n                        : intlUtils(intl, 'oppsummering.utenlandsopphold.erINorgePåFødselstidspunkt')\n                }\n            >\n                <BodyShort>\n                    <FormattedMessage id={erINorgePåFamiliehendelsedato ? 'ja' : 'nei'} />\n                </BodyShort>\n            </OppsummeringsPunkt>\n        </>\n    );\n};\n\nexport default UtenlandsoppholdOppsummering;\n","import { getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\n\nexport enum OppsummeringFormField {\n    harGodkjentOppsummering = 'harGodkjentOppsummering',\n}\n\nexport interface OppsummeringFormData {\n    [OppsummeringFormField.harGodkjentOppsummering]: boolean;\n}\n\nconst initialOppsummeringValues: OppsummeringFormData = {\n    [OppsummeringFormField.harGodkjentOppsummering]: false,\n};\n\nexport const getInitialOppsummeringValues = (): OppsummeringFormData => {\n    return initialOppsummeringValues;\n};\n\nexport const OppsummeringFormComponents = getTypedFormComponents<OppsummeringFormField, OppsummeringFormData>();\n","import { intlUtils } from '@navikt/fp-common';\nimport { IntlShape } from 'react-intl';\n\nexport const validateHarGodkjentOppsummering = (intl: IntlShape) => (value: boolean) => {\n    if (value !== true) {\n        return intlUtils(intl, 'valideringsfeil.oppsummering.harGodkjentOppsummering.påkrevd');\n    }\n\n    return undefined;\n};\n","import { FunctionComponent } from 'react';\nimport * as countries from 'i18n-iso-countries';\nimport { AnnenInntekt, AnnenInntektType, JobbIUtlandetInntekt } from 'app/context/types/AnnenInntekt';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport { useIntl } from 'react-intl';\nimport { Attachment, intlUtils, isAttachmentWithError } from '@navikt/fp-common';\nimport { BodyShort, Link, Tag } from '@navikt/ds-react';\n\ninterface Props {\n    annenInntekt: AnnenInntekt;\n}\n\nconst AnnenInntektDetaljer: FunctionComponent<Props> = ({ annenInntekt }) => {\n    const intl = useIntl();\n    const { type, vedlegg } = annenInntekt;\n    if (type === AnnenInntektType.JOBB_I_UTLANDET) {\n        const jobbIUtlandetInntekt = annenInntekt as JobbIUtlandetInntekt;\n        return (\n            <>\n                <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.andreInntekter.arbeidsgiverNavn')}>\n                    <BodyShort>{jobbIUtlandetInntekt.arbeidsgiverNavn}</BodyShort>\n                </OppsummeringsPunkt>\n                <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.andreInntekter.arbeidsgiverLand')}>\n                    <BodyShort>{countries.getName(jobbIUtlandetInntekt.land, 'nb')}</BodyShort>\n                </OppsummeringsPunkt>\n            </>\n        );\n    }\n    if (\n        type === AnnenInntektType.VENTELØNN ||\n        type === AnnenInntektType.SLUTTPAKKE ||\n        type === AnnenInntektType.MILITÆRTJENESTE\n    ) {\n        const renderListOfAttachmentPreviewLinks = () => {\n            return vedlegg\n                .filter((a: Attachment) => !isAttachmentWithError(a))\n                .map(({ url, id, filename }) => (\n                    <Link href={url!} key={id} target=\"_blank\">\n                        {filename}\n                    </Link>\n                ));\n        };\n        return (\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.andreInntekter.vedlagtdokumentasjon')}>\n                {(vedlegg || []).filter((a: Attachment) => !isAttachmentWithError(a)).length > 0 ? (\n                    renderListOfAttachmentPreviewLinks()\n                ) : (\n                    <Tag variant=\"warning\">{intlUtils(intl, 'oppsummering.andreInntekter.dokumentasjon.mangler')}</Tag>\n                )}\n            </OppsummeringsPunkt>\n        );\n    }\n    return null;\n};\n\nexport default AnnenInntektDetaljer;\n","import { FunctionComponent, ReactElement } from 'react';\nimport { BodyShort, Label } from '@navikt/ds-react';\n\nimport './inntekterTabell.less';\n\ninterface Props {\n    list: Array<{\n        key: string;\n        headerVenstre: string;\n        headerHøyre: string;\n        content?: ReactElement;\n    }>;\n}\n\nconst InntekterTabell: FunctionComponent<Props> = ({ list }) => {\n    return (\n        <ul className=\"oppsummeringsliste\">\n            {list.map((l) => (\n                <li key={l.key} className=\"oppsummeringsliste__element\">\n                    <div className=\"oppsummeringsliste__element__heading\">\n                        <Label>{l.headerVenstre}</Label>\n                        <div className=\"høyrestiltTekst\">\n                            <BodyShort>{l.headerHøyre}</BodyShort>\n                        </div>\n                    </div>\n                    {l.content && <div className=\"oppsummeringsliste__element__content\">{l.content}</div>}\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nexport default InntekterTabell;\n","import { ISOStringToDate, formatDate, intlUtils } from '@navikt/fp-common';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\n\nimport AnnenInntektDetaljer from './AnnenInntektDetaljer';\nimport InntekterTabell from './InntekterTabell';\nimport { BodyShort } from '@navikt/ds-react';\n\nconst AndreInntekterOppsummering: FunctionComponent = () => {\n    const intl = useIntl();\n    const {\n        søker: { harHattAnnenInntektSiste10Mnd, andreInntekterSiste10Mnd },\n    } = useSøknad();\n\n    if (!harHattAnnenInntektSiste10Mnd || !andreInntekterSiste10Mnd) {\n        return (\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.andreInntekter.tittel')}>\n                <BodyShort>{intlUtils(intl, 'oppsummering.andreInntekter.ikkeHattAndreInntekter')}</BodyShort>\n            </OppsummeringsPunkt>\n        );\n    }\n\n    return (\n        <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.andreInntekter.tittel')}>\n            <InntekterTabell\n                list={andreInntekterSiste10Mnd.map((annenInntekt) => ({\n                    key: annenInntekt.type + annenInntekt.tidsperiode,\n                    headerVenstre: intlUtils(intl, `inntektstype.${annenInntekt.type.toLowerCase()}`),\n                    headerHøyre: intlUtils(intl, 'tidsintervall', {\n                        fom: formatDate(ISOStringToDate(annenInntekt.tidsperiode.fom)!),\n                        tom: annenInntekt.pågående\n                            ? 'pågående'\n                            : formatDate(ISOStringToDate(annenInntekt.tidsperiode.tom)!),\n                    }),\n                    content: <AnnenInntektDetaljer annenInntekt={annenInntekt} />,\n                }))}\n            />\n        </OppsummeringsPunkt>\n    );\n};\n\nexport default AndreInntekterOppsummering;\n","import { Block, formatDate, intlUtils } from '@navikt/fp-common';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport InntekterTabell from './InntekterTabell';\nimport { BodyShort } from '@navikt/ds-react';\n\nconst FrilansOppsummering: FunctionComponent = () => {\n    const intl = useIntl();\n    const {\n        søker: { frilansInformasjon, harJobbetSomFrilansSiste10Mnd },\n    } = useSøknad();\n\n    if (!frilansInformasjon || !harJobbetSomFrilansSiste10Mnd) {\n        return (\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.frilans.tittel')}>\n                <BodyShort>{intlUtils(intl, 'oppsummering.frilans.ikkeFrilans')}</BodyShort>\n            </OppsummeringsPunkt>\n        );\n    }\n    const {\n        oppstart,\n        jobberFremdelesSomFrilans,\n        driverFosterhjem,\n        harJobbetForNærVennEllerFamilieSiste10Mnd,\n        oppdragForNæreVennerEllerFamilieSiste10Mnd,\n    } = frilansInformasjon;\n\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.frilans.tittel')} />\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.frilans.oppstartsdato')}>\n                <BodyShort>{formatDate(oppstart)}</BodyShort>\n            </OppsummeringsPunkt>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.frilans.fremdelesFrilans')}>\n                <BodyShort>{jobberFremdelesSomFrilans ? intlUtils(intl, 'ja') : intlUtils(intl, 'nei')}</BodyShort>\n            </OppsummeringsPunkt>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.frilans.driverFosterhjem')}>\n                <BodyShort>{driverFosterhjem ? intlUtils(intl, 'ja') : intlUtils(intl, 'nei')}</BodyShort>\n            </OppsummeringsPunkt>\n            <OppsummeringsPunkt\n                title={intlUtils(intl, 'oppsummering.frilans.frilansArbeidForNæreVennerEllerFamilieSiste10Mnd')}\n            >\n                <Block visible={!harJobbetForNærVennEllerFamilieSiste10Mnd} margin=\"none\">\n                    <BodyShort>\n                        {intlUtils(\n                            intl,\n                            'oppsummering.frilans.harIkkeUtførtFrilansArbeidForNæreVennerEllerFamilieSiste10Mnd',\n                        )}\n                    </BodyShort>\n                </Block>\n                <Block visible={harJobbetForNærVennEllerFamilieSiste10Mnd} margin=\"none\">\n                    <InntekterTabell\n                        list={oppdragForNæreVennerEllerFamilieSiste10Mnd.map(\n                            ({ navnPåArbeidsgiver, tidsperiode, pågående }) => ({\n                                key: navnPåArbeidsgiver + tidsperiode,\n                                headerVenstre: navnPåArbeidsgiver,\n                                headerHøyre: intlUtils(intl, 'tidsintervall', {\n                                    fom: formatDate(tidsperiode.fom!),\n                                    tom: pågående ? 'pågående' : formatDate(tidsperiode.tom!),\n                                }),\n                            }),\n                        )}\n                    />\n                </Block>\n            </OppsummeringsPunkt>\n        </>\n    );\n};\n\nexport default FrilansOppsummering;\n","import { formatDate, intlUtils } from '@navikt/fp-common';\nimport { Næring } from 'app/context/types/Næring';\nimport * as countries from 'i18n-iso-countries';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport { BodyShort } from '@navikt/ds-react';\n\ninterface Props {\n    næring: Næring;\n}\n\nconst Næringsdetaljer: FunctionComponent<Props> = ({ næring }) => {\n    const intl = useIntl();\n    const {\n        næringstyper,\n        organisasjonsnummer,\n        næringsinntekt,\n        registrertINorge,\n        registrertILand,\n        harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene,\n        hattVarigEndringAvNæringsinntektSiste4Kalenderår,\n        endringAvNæringsinntektInformasjon,\n        harRegnskapsfører,\n        regnskapsfører,\n    } = næring;\n\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.næringstype')}>\n                <BodyShort>{intlUtils(intl, `næringstype.${næringstyper[0].toLowerCase()}`)}</BodyShort>\n            </OppsummeringsPunkt>\n            {organisasjonsnummer && (\n                <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.orgnr')}>\n                    <BodyShort>{organisasjonsnummer}</BodyShort>\n                </OppsummeringsPunkt>\n            )}\n            {næringsinntekt && (\n                <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.næringsinntekt')}>\n                    <BodyShort>{næringsinntekt}</BodyShort>\n                </OppsummeringsPunkt>\n            )}\n            {registrertINorge ||\n                (registrertILand && (\n                    <OppsummeringsPunkt\n                        title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.registrertLand')}\n                    >\n                        <BodyShort>{registrertINorge ? 'Norge' : countries.getName(registrertILand, 'nb')}</BodyShort>\n                    </OppsummeringsPunkt>\n                ))}\n            {harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene && (\n                <OppsummeringsPunkt\n                    title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.blittYrkesaktivSiste3År')}\n                >\n                    <BodyShort>\n                        {harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene\n                            ? intlUtils(intl, 'ja')\n                            : intlUtils(intl, 'nei')}\n                    </BodyShort>\n                </OppsummeringsPunkt>\n            )}\n            {hattVarigEndringAvNæringsinntektSiste4Kalenderår === true && (\n                <>\n                    <OppsummeringsPunkt\n                        title={intlUtils(\n                            intl,\n                            'oppsummering.selvstendigNæringsdrivende.datoForEndringAvNæringsinntekt',\n                        )}\n                    >\n                        <BodyShort>{formatDate(endringAvNæringsinntektInformasjon!.dato)}</BodyShort>\n                    </OppsummeringsPunkt>\n                    <OppsummeringsPunkt\n                        title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.næringsinntektEtterEndring')}\n                    >\n                        <BodyShort>{endringAvNæringsinntektInformasjon!.næringsinntektEtterEndring}</BodyShort>\n                    </OppsummeringsPunkt>\n                    <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.forklaring')}>\n                        <BodyShort>{endringAvNæringsinntektInformasjon!.forklaring}</BodyShort>\n                    </OppsummeringsPunkt>\n                </>\n            )}\n            {harRegnskapsfører === true && regnskapsfører && (\n                <>\n                    <OppsummeringsPunkt\n                        title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.regnskapsførerNavn')}\n                    >\n                        <BodyShort>{regnskapsfører.navn}</BodyShort>\n                    </OppsummeringsPunkt>\n                    <OppsummeringsPunkt\n                        title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.regnskapsførerTlf')}\n                    >\n                        <BodyShort>{regnskapsfører.telefonnummer}</BodyShort>\n                    </OppsummeringsPunkt>\n                    <OppsummeringsPunkt\n                        title={intlUtils(\n                            intl,\n                            'oppsummering.selvstendigNæringsdrivende.regnskapsførerNærVennEllerFamilie',\n                        )}\n                    >\n                        <BodyShort>\n                            {regnskapsfører.erNærVennEllerFamilie ? intlUtils(intl, 'ja') : intlUtils(intl, 'nei')}\n                        </BodyShort>\n                    </OppsummeringsPunkt>\n                </>\n            )}\n            {harRegnskapsfører === false && (\n                <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.regnskapsfører')}>\n                    <BodyShort>\n                        {intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.harIkkeRegnskapsfører')}\n                    </BodyShort>\n                </OppsummeringsPunkt>\n            )}\n        </>\n    );\n};\n\nexport default Næringsdetaljer;\n","import { formatDate, intlUtils } from '@navikt/fp-common';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport InntekterTabell from './InntekterTabell';\nimport Næringsdetaljer from './Næringsdetaljer';\nimport { BodyShort } from '@navikt/ds-react';\n\nconst SelvstendigNæringsdrivendeOppsummering: FunctionComponent = () => {\n    const intl = useIntl();\n    const {\n        søker: { selvstendigNæringsdrivendeInformasjon, harJobbetSomSelvstendigNæringsdrivendeSiste10Mnd },\n    } = useSøknad();\n\n    if (!selvstendigNæringsdrivendeInformasjon || !harJobbetSomSelvstendigNæringsdrivendeSiste10Mnd) {\n        return (\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.tittel')}>\n                <BodyShort>\n                    {intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.ikkeSelvstendigNæringsdrivende')}\n                </BodyShort>\n            </OppsummeringsPunkt>\n        );\n    }\n\n    return (\n        <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.tittel')}>\n            <InntekterTabell\n                list={selvstendigNæringsdrivendeInformasjon.map((næring) => ({\n                    key: næring.navnPåNæringen + næring.tidsperiode,\n                    headerVenstre: næring.navnPåNæringen,\n                    headerHøyre: intlUtils(intl, 'tidsintervall', {\n                        fom: formatDate(næring.tidsperiode.fom)!,\n                        tom: næring.pågående ? 'pågående' : formatDate(næring.tidsperiode.tom!),\n                    }),\n                    content: <Næringsdetaljer næring={næring} />,\n                }))}\n            />\n        </OppsummeringsPunkt>\n    );\n};\n\nexport default SelvstendigNæringsdrivendeOppsummering;\n","import { ISOStringToDate, getAktiveArbeidsforhold, intlUtils, isFarEllerMedmor } from '@navikt/fp-common';\nimport HarArbeidsforhold from 'app/steps/inntektsinformasjon/components/arbeidsforhold-informasjon/HarArbeidsforhold';\nimport HarIkkeArbeidsforhold from 'app/steps/inntektsinformasjon/components/arbeidsforhold-informasjon/HarIkkeArbeidsforhold';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport AndreInntekterOppsummering from './AndreInntekterOppsummering';\nimport FrilansOppsummering from './FrilansOppsummering';\nimport SelvstendigNæringsdrivendeOppsummering from './SelvstendigNæringsdrivendeOppsummering';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport { getFamiliehendelsedato } from 'app/utils/barnUtils';\n\nconst ArbeidsforholdOgAndreInntekterOppsummering: FunctionComponent = () => {\n    const intl = useIntl();\n    const { arbeidsforhold } = useSøkerinfo();\n    const { barn, søkersituasjon } = useSøknad();\n    const erAdopsjon = søkersituasjon.situasjon === 'adopsjon';\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const aktiveArbeidsForhold = getAktiveArbeidsforhold(\n        arbeidsforhold,\n        erAdopsjon,\n        erFarEllerMedmor,\n        ISOStringToDate(familiehendelsesdato),\n    );\n    const harArbeidsforhold = aktiveArbeidsForhold !== undefined && aktiveArbeidsForhold.length > 0;\n\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.inntekt.registrerteArbeidsforhold')}>\n                <HarIkkeArbeidsforhold harArbeidsforhold={harArbeidsforhold} />\n                <HarArbeidsforhold harArbeidsforhold={harArbeidsforhold} arbeidsforhold={aktiveArbeidsForhold} />\n            </OppsummeringsPunkt>\n            <FrilansOppsummering />\n            <SelvstendigNæringsdrivendeOppsummering />\n            <AndreInntekterOppsummering />\n        </>\n    );\n};\n\nexport default ArbeidsforholdOgAndreInntekterOppsummering;\n","import { Tilleggsopplysning, Tilleggsopplysninger } from '@navikt/fp-common';\nimport { replaceInvisibleCharsWithSpace } from '@navikt/fp-common/src/common/utils/stringUtils';\n\nconst TIL_SAKSBEHANDLER = {\n    'tilleggsopplysning.begrunnelseForSenEndring': 'Begrunnelse for å søke om utsettelse',\n    'tilleggsopplysning.begrunnelseForSenEndring.SYKDOM': 'på grunn av sykdom tilbake i tid',\n    'tilleggsopplysning.begrunnelseForSenEndring.UTTAK': 'på grunn av uttak mer enn tre måneder tilbake i tid',\n    'tilleggsopplysning.begrunnelseForSenEndring.SYKDOM_OG_UTTAK':\n        'på grunn av sykdom tilbake i tid og uttak mer enn tre måneder tilbake i tid',\n};\n\nexport interface TilleggsopplysningMedBeskrivelse {\n    beskrivelse: string;\n    tekst: string;\n    ekstraInformasjon?: string;\n}\n\nexport const beskrivTilleggsopplysning = (tilleggsopplysning: Tilleggsopplysning): TilleggsopplysningMedBeskrivelse => {\n    const { tekst, ekstraInformasjon } = tilleggsopplysning;\n    const beskrivelseMessageId = `tilleggsopplysning.begrunnelseForSenEndring`;\n    const beskrivelseAvOpplysning = TIL_SAKSBEHANDLER[beskrivelseMessageId];\n    const ekstraMessageId = `tilleggsopplysning.begrunnelseForSenEndring.${ekstraInformasjon}`;\n    const ekstraInfoTilSaksbehandling = (TIL_SAKSBEHANDLER as any)[ekstraMessageId];\n\n    return {\n        beskrivelse: beskrivelseAvOpplysning,\n        ekstraInformasjon: ekstraInfoTilSaksbehandling,\n        tekst,\n    };\n};\n\nexport const cleanupInvisibleCharsFromTilleggsopplysninger = (\n    tilleggsopplysninger: Tilleggsopplysninger,\n): Tilleggsopplysninger => {\n    return tilleggsopplysninger.begrunnelseForSenEndring\n        ? {\n              ...tilleggsopplysninger,\n              begrunnelseForSenEndring: {\n                  ...tilleggsopplysninger.begrunnelseForSenEndring,\n                  tekst: replaceInvisibleCharsWithSpace(tilleggsopplysninger.begrunnelseForSenEndring.tekst),\n              },\n          }\n        : tilleggsopplysninger;\n};\n","import * as React from 'react';\nimport './feltoppsummering.less';\nimport InnholdMedLedetekst from '../InnholdMedLedetekst';\n\ninterface Props {\n    feltnavn: string;\n    verdi: string | string[];\n}\n\nconst Feltoppsummering: React.FunctionComponent<Props> = ({ feltnavn, verdi }) => (\n    <InnholdMedLedetekst className=\"feltoppsummering\" ledetekst={feltnavn}>\n        <div className=\"feltoppsummering__verdi\">{verdi}</div>\n    </InnholdMedLedetekst>\n);\n\nexport default Feltoppsummering;\n","import * as React from 'react';\nimport './list.less';\nimport { bemUtils } from '@navikt/fp-common';\n\ninterface ListProps {\n    data: any[];\n    renderElement: (data: any, index: number) => JSX.Element;\n    className?: string;\n}\n\nconst bem = bemUtils('list');\nconst List: React.FunctionComponent<ListProps> = (props: ListProps) => {\n    const { data, renderElement, className } = props;\n    return (\n        <ul className={`${bem.block} ${className}`}>\n            {data.map((dataObject: any, i: number) => renderElement(dataObject, i))}\n        </ul>\n    );\n};\n\nexport default List;\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport List from './list/List';\nimport { BodyShort, Label } from '@navikt/ds-react';\nimport { guid } from '@navikt/fp-common';\nimport './oppsummeringsliste.less';\n\nexport interface OppsummeringslisteelementProps {\n    venstrestiltTekst: string;\n    høyrestiltTekst: string;\n    content?: React.ReactNode;\n    kompakt?: boolean;\n}\n\ninterface OppsummeringslisteProps {\n    data: OppsummeringslisteelementProps[];\n    kompakt?: boolean;\n}\n\nconst Oppsummeringsliste: React.FunctionComponent<OppsummeringslisteProps> = (props: OppsummeringslisteProps) => {\n    const { data, kompakt } = props;\n    return (\n        <List\n            className=\"oppsummeringsliste\"\n            data={data}\n            renderElement={(elementProps: OppsummeringslisteelementProps) => (\n                <Oppsummeringslisteelement {...elementProps} kompakt={kompakt} key={guid()} />\n            )}\n        />\n    );\n};\n\nconst Oppsummeringslisteelement: React.FunctionComponent<OppsummeringslisteelementProps> = ({\n    venstrestiltTekst,\n    høyrestiltTekst,\n    content,\n    kompakt,\n}: OppsummeringslisteelementProps) => (\n    <li\n        className={classNames('oppsummeringsliste__element', {\n            'oppsummeringsliste__element--kompakt': kompakt === true,\n        })}\n    >\n        <div className=\"oppsummeringsliste__element__heading\">\n            <Label as=\"h4\">{venstrestiltTekst}</Label>\n            <div className=\"høyrestiltTekst\">\n                <BodyShort>{høyrestiltTekst}</BodyShort>\n            </div>\n        </div>\n        {content && <div className=\"oppsummeringsliste__element__content\">{content}</div>}\n    </li>\n);\n\nexport default Oppsummeringsliste;\n","import {\n    Arbeidsforhold,\n    Arbeidsform,\n    Overføringsperiode,\n    PeriodeUtenUttakUtsettelse,\n    Periodetype,\n    Utsettelsesperiode,\n    intlUtils,\n} from '@navikt/fp-common';\nimport { IntlShape } from 'react-intl';\n\ntype MessageValue = string | number | boolean | Date | null | undefined;\n\nconst getValgtArbeidsgiverNavn = (arbeidsforhold: Arbeidsforhold[], orgnr?: string) => {\n    if (orgnr) {\n        const valgtArbeidsgiver = arbeidsforhold.find(\n            ({ arbeidsgiverId, arbeidsgiverIdType }) => arbeidsgiverIdType === 'orgnr' && arbeidsgiverId === orgnr,\n        );\n        if (valgtArbeidsgiver) {\n            return valgtArbeidsgiver.arbeidsgiverNavn;\n        }\n    }\n    return '';\n};\n\nexport const getArbeidsformTekst = (\n    intl: IntlShape,\n    arbeidsformer: Arbeidsform[],\n    orgnumre?: string[],\n    arbeidsforhold?: Arbeidsforhold[],\n) => {\n    let arbeidstakerTekster: string[] = [];\n    let arbeidsformerTekster: string[] = [];\n\n    if (orgnumre !== undefined && orgnumre.length > 0 && arbeidsforhold && arbeidsforhold.length > 0) {\n        arbeidstakerTekster = orgnumre.map((orgnr) => {\n            const arbeidsgiverNavn = getValgtArbeidsgiverNavn(arbeidsforhold, orgnr);\n            return intlUtils(intl, `oppsummering.uttak.arbeidstaker`, { orgnr, arbeidsgiverNavn });\n        });\n    }\n\n    if (arbeidsformer !== undefined && arbeidsformer.length > 0) {\n        arbeidsformerTekster = arbeidsformer\n            .filter((arbeidsform) => arbeidsform !== Arbeidsform.arbeidstaker)\n            .map((arbeidsform) => {\n                return intlUtils(intl, `oppsummering.uttak.${arbeidsform.toLowerCase()}`);\n            });\n    }\n\n    return arbeidstakerTekster.concat(arbeidsformerTekster);\n};\n\nexport const getÅrsakTekst = (\n    intl: IntlShape,\n    { type, årsak }: Utsettelsesperiode | Overføringsperiode | PeriodeUtenUttakUtsettelse,\n    messageValues?: { [key: string]: MessageValue },\n) => {\n    const intlKeyPrefix = type === Periodetype.Utsettelse ? 'utsettelsesårsak.' : 'overføringsårsaktype.';\n    return intlUtils(intl, `uttaksplan.${intlKeyPrefix + årsak}`, messageValues);\n};\n","import * as React from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\nimport Feltoppsummering from '../feltoppsummering/Feltoppsummering';\nimport { NavnPåForeldre, Overføringsperiode, StønadskontoType, intlUtils } from '@navikt/fp-common';\nimport OppsummeringAvDokumentasjon from '../oppsummering-av-dokumentasjon/OppsummeringAvDokumentasjon';\nimport { getÅrsakTekst } from '../OppsummeringUtils';\nimport { dokumentasjonBehøvesForOverføringsperiode } from '@navikt/uttaksplan';\n\ninterface OverføringsperiodedetaljerProps {\n    periode: Overføringsperiode;\n    navnPåForeldre: NavnPåForeldre;\n    erFarEllerMedmor: boolean;\n    periodeErNyEllerEndret: boolean;\n}\n\ntype Props = OverføringsperiodedetaljerProps;\n\nconst getNavnPåAnnenForelder = (navnPåForeldre: NavnPåForeldre, konto: StønadskontoType, intl: IntlShape) => {\n    if (konto === StønadskontoType.Fedrekvote) {\n        return navnPåForeldre.farMedmor;\n    } else if (konto === StønadskontoType.Mødrekvote) {\n        return navnPåForeldre.mor;\n    }\n    return intlUtils(intl, 'annen.forelder');\n};\n\nconst Overføringsperiodedetaljer: React.FunctionComponent<Props> = ({\n    periode,\n    navnPåForeldre,\n    erFarEllerMedmor,\n    periodeErNyEllerEndret,\n}) => {\n    const { vedlegg } = periode;\n    const intl = useIntl();\n    const navnAnnenForelder = getNavnPåAnnenForelder(navnPåForeldre, periode.konto, intl);\n    return (\n        <>\n            <Feltoppsummering\n                feltnavn={intlUtils(intl, 'oppsummering.uttak.årsak')}\n                verdi={getÅrsakTekst(intl, periode, { navnAnnenForelder })}\n            />\n\n            {dokumentasjonBehøvesForOverføringsperiode(erFarEllerMedmor, periode) && periodeErNyEllerEndret && (\n                <OppsummeringAvDokumentasjon vedlegg={vedlegg || []} />\n            )}\n        </>\n    );\n};\n\nexport default Overføringsperiodedetaljer;\n","import * as React from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\nimport OppsummeringAvDokumentasjon from '../oppsummering-av-dokumentasjon/OppsummeringAvDokumentasjon';\nimport Feltoppsummering from '../feltoppsummering/Feltoppsummering';\nimport { Attachment, MorsAktivitet, assertUnreachable, intlUtils } from '@navikt/fp-common';\n\ninterface MorsAktivitetDetaljerProps {\n    morsAktivitet: MorsAktivitet;\n    dokumentasjonAvMorsAktivitet: Attachment[];\n    visOppsummeringAvDokumentasjon: boolean;\n}\n\ntype Props = MorsAktivitetDetaljerProps;\n\nconst getMorsAktivitetTekst = (intl: IntlShape, aktivitet: MorsAktivitet): string => {\n    switch (aktivitet) {\n        case MorsAktivitet.Arbeid:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.Arbeid');\n        case MorsAktivitet.ArbeidOgUtdanning:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.ArbeidOgUtdanning');\n        case MorsAktivitet.Innlagt:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.Innlagt');\n        case MorsAktivitet.Introduksjonsprogrammet:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.Introduksjonsprogrammet');\n        case MorsAktivitet.Kvalifiseringsprogrammet:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.Kvalifiseringsprogrammet');\n        case MorsAktivitet.TrengerHjelp:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.TrengerHjelp');\n        case MorsAktivitet.Uføre:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.Uføre');\n        case MorsAktivitet.Utdanning:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.Utdanning');\n        case MorsAktivitet.IkkeOppgitt:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.UtenAktivitetsKrav');\n        default:\n            return assertUnreachable(aktivitet, 'Mor har ingen aktivitet');\n    }\n};\n\nconst MorsAktivitetDetaljer: React.FunctionComponent<Props> = ({\n    morsAktivitet,\n    dokumentasjonAvMorsAktivitet,\n    visOppsummeringAvDokumentasjon,\n}) => {\n    const intl = useIntl();\n\n    return (\n        <>\n            <Feltoppsummering\n                feltnavn={intlUtils(intl, 'oppsummering.morsAktivitet')}\n                verdi={getMorsAktivitetTekst(intl, morsAktivitet)}\n            />\n            {visOppsummeringAvDokumentasjon && (\n                <OppsummeringAvDokumentasjon\n                    ledetekst={intlUtils(intl, 'oppsummering.morsAktivitet.dokumentasjon')}\n                    vedlegg={dokumentasjonAvMorsAktivitet}\n                />\n            )}\n        </>\n    );\n};\n\nexport default MorsAktivitetDetaljer;\n","import {\n    AnnenForelder,\n    Arbeidsforhold,\n    StønadskontoType,\n    UttaksperiodeBase,\n    intlUtils,\n    isAnnenForelderOppgitt,\n} from '@navikt/fp-common';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport Feltoppsummering from '../feltoppsummering/Feltoppsummering';\nimport MorsAktivitetDetaljer from './MorsaktiviteterDetaljer';\nimport { getArbeidsformTekst } from '../OppsummeringUtils';\nimport { shouldPeriodeHaveAttachment } from '@navikt/uttaksplan';\n\ninterface UttaksperiodedetaljerProps {\n    periode: UttaksperiodeBase;\n    registrerteArbeidsforhold: Arbeidsforhold[] | undefined;\n    periodeErNyEllerEndret: boolean;\n    søkerErFarEllerMedmor: boolean;\n    annenForelder: AnnenForelder;\n}\n\ntype Props = UttaksperiodedetaljerProps;\n\nconst Uttaksperiodedetaljer: React.FunctionComponent<Props> = ({\n    periode,\n    registrerteArbeidsforhold,\n    periodeErNyEllerEndret,\n    søkerErFarEllerMedmor,\n    annenForelder,\n}) => {\n    const {\n        konto,\n        morsAktivitetIPerioden,\n        ønskerSamtidigUttak,\n        gradert,\n        stillingsprosent,\n        orgnumre,\n        arbeidsformer,\n        vedlegg,\n        ønskerFlerbarnsdager,\n    } = periode;\n    const intl = useIntl();\n\n    let arbeidsformTekst = '';\n    if (arbeidsformer) {\n        arbeidsformTekst = getArbeidsformTekst(intl, arbeidsformer, orgnumre, registrerteArbeidsforhold).join('\\r\\n');\n    }\n\n    const erDeltUttakINorge = isAnnenForelderOppgitt(annenForelder) && annenForelder.harRettPåForeldrepengerINorge;\n\n    return (\n        <>\n            {ønskerFlerbarnsdager !== undefined && erDeltUttakINorge && (\n                <Feltoppsummering\n                    feltnavn={intlUtils(intl, 'oppsummering.uttak.ønskerFlerbarnsdager')}\n                    verdi={ønskerFlerbarnsdager ? intlUtils(intl, 'ja') : intlUtils(intl, 'nei')}\n                />\n            )}\n            {ønskerSamtidigUttak !== undefined && erDeltUttakINorge && (\n                <Feltoppsummering\n                    feltnavn={intlUtils(intl, 'oppsummering.uttak.samtidigUttak')}\n                    verdi={ønskerSamtidigUttak ? intlUtils(intl, 'ja') : intlUtils(intl, 'nei')}\n                />\n            )}\n            {konto !== StønadskontoType.ForeldrepengerFørFødsel && ønskerSamtidigUttak !== true && (\n                <Feltoppsummering\n                    feltnavn={intlUtils(intl, 'oppsummering.uttak.kombineresMedarbeid')}\n                    verdi={gradert ? intlUtils(intl, 'ja') : intlUtils(intl, 'nei')}\n                />\n            )}\n\n            {gradert === true && stillingsprosent && (\n                <Feltoppsummering\n                    feltnavn={intlUtils(intl, 'oppsummering.uttak.stillingsprosent')}\n                    verdi={stillingsprosent}\n                />\n            )}\n\n            {arbeidsformer && (\n                <Feltoppsummering\n                    feltnavn={intlUtils(intl, 'oppsummering.uttak.arbeidstaker.label')}\n                    verdi={arbeidsformTekst}\n                />\n            )}\n            {shouldPeriodeHaveAttachment(periode, søkerErFarEllerMedmor, annenForelder) && morsAktivitetIPerioden && (\n                <MorsAktivitetDetaljer\n                    morsAktivitet={morsAktivitetIPerioden}\n                    dokumentasjonAvMorsAktivitet={vedlegg || []}\n                    visOppsummeringAvDokumentasjon={periodeErNyEllerEndret}\n                />\n            )}\n        </>\n    );\n};\n\nexport default Uttaksperiodedetaljer;\n","import {\n    AnnenForelder,\n    Arbeidsforhold,\n    AttachmentType,\n    PeriodeUtenUttakUtsettelse,\n    Utsettelsesperiode,\n    UtsettelseÅrsakType,\n    intlUtils,\n} from '@navikt/fp-common';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport Feltoppsummering from '../feltoppsummering/Feltoppsummering';\nimport OppsummeringAvDokumentasjon from '../oppsummering-av-dokumentasjon/OppsummeringAvDokumentasjon';\nimport { getÅrsakTekst } from '../OppsummeringUtils';\nimport MorsAktivitetDetaljer from './MorsaktiviteterDetaljer';\nimport { shouldPeriodeHaveAttachment } from '@navikt/uttaksplan';\n\ninterface UtsettelsesperiodedetaljerProps {\n    periode: Utsettelsesperiode | PeriodeUtenUttakUtsettelse;\n    registrerteArbeidsforhold: Arbeidsforhold[];\n    søkerErFarEllerMedmor: boolean;\n    annenForelder: AnnenForelder;\n    periodeErNyEllerEndret: boolean;\n}\n\nconst Utsettelsesperiodedetaljer: React.FunctionComponent<UtsettelsesperiodedetaljerProps> = ({\n    periode,\n    søkerErFarEllerMedmor,\n    annenForelder,\n    periodeErNyEllerEndret,\n}) => {\n    const { årsak, morsAktivitetIPerioden, vedlegg, bekrefterArbeidIPerioden } = periode;\n    const intl = useIntl();\n    const bekreftErIArbeidSvar = bekrefterArbeidIPerioden === true ? intlUtils(intl, 'ja') : intlUtils(intl, 'nei');\n\n    return (\n        <>\n            <Feltoppsummering\n                feltnavn={intlUtils(intl, 'oppsummering.uttak.årsak')}\n                verdi={getÅrsakTekst(intl, periode)}\n            />\n            {shouldPeriodeHaveAttachment(periode, søkerErFarEllerMedmor, annenForelder) &&\n                periodeErNyEllerEndret &&\n                periode.årsak !== UtsettelseÅrsakType.Fri && (\n                    <OppsummeringAvDokumentasjon\n                        vedlegg={(vedlegg || []).filter(\n                            (currentVedlegg) => currentVedlegg.type !== AttachmentType.MORS_AKTIVITET_DOKUMENTASJON,\n                        )}\n                    />\n                )}\n            {årsak === UtsettelseÅrsakType.Arbeid && (\n                <Feltoppsummering\n                    feltnavn={intlUtils(intl, 'oppsummering.uttak.bekreft100ProsentIArbeid.label')}\n                    verdi={bekreftErIArbeidSvar}\n                />\n            )}\n            {shouldPeriodeHaveAttachment(periode, søkerErFarEllerMedmor, annenForelder) && morsAktivitetIPerioden && (\n                <MorsAktivitetDetaljer\n                    morsAktivitet={morsAktivitetIPerioden}\n                    dokumentasjonAvMorsAktivitet={(vedlegg || []).filter(\n                        (currentVedlegg) => currentVedlegg.type === AttachmentType.MORS_AKTIVITET_DOKUMENTASJON,\n                    )}\n                    visOppsummeringAvDokumentasjon={periodeErNyEllerEndret}\n                />\n            )}\n        </>\n    );\n};\n\nexport default Utsettelsesperiodedetaljer;\n","import { FunctionComponent } from 'react';\nimport {\n    AnnenForelder,\n    appendPeriodeNavnHvisUttakRundtFødselFarMedmor,\n    Arbeidsforhold,\n    finnesPeriodeIOpprinneligPlan,\n    formatDate,\n    getPeriodeTittel,\n    getStønadskontoNavn,\n    intlUtils,\n    NavnPåForeldre,\n    Oppholdsperiode,\n    Overføringsperiode,\n    Periode,\n    Periodetype,\n    PeriodeUtenUttakUtsettelse,\n    Situasjon,\n    StønadskontoType,\n    TidsperiodeDate,\n    Tilleggsopplysning,\n    Utsettelsesperiode,\n    Uttaksperiode,\n    uttaksperiodeKanJusteresVedFødsel,\n} from '@navikt/fp-common';\nimport { beskrivTilleggsopplysning, TilleggsopplysningMedBeskrivelse } from 'app/utils/tilleggsopplysningerUtils';\nimport { useIntl } from 'react-intl';\nimport Feltoppsummering from './feltoppsummering/Feltoppsummering';\nimport Oppsummeringsliste, { OppsummeringslisteelementProps } from './oppsummeringsliste/Oppsummeringsliste';\nimport Overføringsperiodedetaljer from './detaljer/Overføringsperiodedetaljer';\nimport Uttaksperiodedetaljer from './detaljer/Uttaksperiodedetaljer';\nimport Utsettelsesperiodedetaljer from './detaljer/Uttsettelsesperiodedetaljer';\n\ninterface UttaksplanOppsummeringslisteProps {\n    perioder: Periode[];\n    navnPåForeldre: NavnPåForeldre;\n    erFarEllerMedmor: boolean;\n    registrerteArbeidsforhold: Arbeidsforhold[];\n    annenForelder: AnnenForelder;\n    begrunnelseForSenEndring?: Tilleggsopplysning;\n    eksisterendeUttaksplan?: Periode[];\n    familiehendelsesdato: Date;\n    termindato: Date | undefined;\n    situasjon: Situasjon;\n    erAleneOmOmsorg: boolean;\n    ønskerJustertUttakVedFødsel: boolean | undefined;\n}\n\nconst UttaksplanOppsummeringsliste: FunctionComponent<UttaksplanOppsummeringslisteProps> = ({\n    perioder,\n    navnPåForeldre,\n    erFarEllerMedmor,\n    registrerteArbeidsforhold,\n    annenForelder,\n    begrunnelseForSenEndring,\n    eksisterendeUttaksplan,\n    familiehendelsesdato,\n    termindato,\n    situasjon,\n    erAleneOmOmsorg,\n    ønskerJustertUttakVedFødsel,\n}) => {\n    const intl = useIntl();\n\n    const getStønadskontoNavnFromKonto = (konto: StønadskontoType) => {\n        return getStønadskontoNavn(intl, konto, navnPåForeldre, erFarEllerMedmor, erAleneOmOmsorg);\n    };\n\n    const getUttaksperiodeNavn = (periode: Uttaksperiode) => {\n        const tittel = getStønadskontoNavnFromKonto(periode.konto);\n        return appendPeriodeNavnHvisUttakRundtFødselFarMedmor(\n            intl,\n            tittel,\n            periode,\n            situasjon,\n            familiehendelsesdato,\n            termindato,\n        );\n    };\n\n    const formatTidsperiode = (tidsperiode: TidsperiodeDate): string => {\n        const formatertTidsperiode = intlUtils(intl, 'tidsintervall', {\n            fom: formatDate(tidsperiode.fom),\n            tom: formatDate(tidsperiode.tom),\n        });\n        if (uttaksperiodeKanJusteresVedFødsel(ønskerJustertUttakVedFødsel, termindato, tidsperiode.fom)) {\n            const justeringTekst = intlUtils(intl, 'oppsummering.uttak.periodenBlirAutomatiskJustert');\n            return justeringTekst.concat(formatertTidsperiode);\n        }\n        return formatertTidsperiode;\n    };\n    const createOppsummeringslisteelementPropsForUttaksperiode = (\n        periode: Uttaksperiode,\n        periodeErNyEllerEndret = true,\n    ): OppsummeringslisteelementProps => {\n        return {\n            venstrestiltTekst: getUttaksperiodeNavn(periode),\n            høyrestiltTekst: formatTidsperiode(periode.tidsperiode),\n            content: (\n                <Uttaksperiodedetaljer\n                    periode={periode}\n                    registrerteArbeidsforhold={registrerteArbeidsforhold}\n                    periodeErNyEllerEndret={periodeErNyEllerEndret}\n                    søkerErFarEllerMedmor={erFarEllerMedmor}\n                    annenForelder={annenForelder}\n                />\n            ),\n        };\n    };\n\n    const createOppsummeringslisteelementPropsForOppholdsperiode = (\n        periode: Oppholdsperiode,\n    ): OppsummeringslisteelementProps => {\n        return {\n            venstrestiltTekst: getPeriodeTittel(\n                intl,\n                periode,\n                navnPåForeldre,\n                familiehendelsesdato,\n                termindato,\n                situasjon,\n            ),\n            høyrestiltTekst: formatTidsperiode(periode.tidsperiode),\n        };\n    };\n\n    const createOppsummeringslisteelementPropsForUtsettelsesperiode = (\n        periode: Utsettelsesperiode | PeriodeUtenUttakUtsettelse,\n        periodeErNyEllerEndret: boolean,\n    ): OppsummeringslisteelementProps => {\n        return {\n            venstrestiltTekst: intlUtils(intl, 'oppsummering.utsettelse.pga'),\n            høyrestiltTekst: formatTidsperiode(periode.tidsperiode),\n            content: (\n                <Utsettelsesperiodedetaljer\n                    periode={periode}\n                    registrerteArbeidsforhold={registrerteArbeidsforhold}\n                    søkerErFarEllerMedmor={erFarEllerMedmor}\n                    annenForelder={annenForelder}\n                    periodeErNyEllerEndret={periodeErNyEllerEndret}\n                />\n            ),\n        };\n    };\n\n    const createOppsummeringslisteelementPropsForOverføringsperiode = (\n        periode: Overføringsperiode,\n        periodeErNyEllerEndret: boolean,\n    ): OppsummeringslisteelementProps => {\n        const kontonavn = getStønadskontoNavnFromKonto(periode.konto);\n        return {\n            venstrestiltTekst: intlUtils(intl, 'oppsummering.overtakelse.pga', {\n                konto: kontonavn,\n            }),\n            høyrestiltTekst: formatTidsperiode(periode.tidsperiode),\n            content: (\n                <Overføringsperiodedetaljer\n                    periode={periode}\n                    navnPåForeldre={navnPåForeldre}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    periodeErNyEllerEndret={periodeErNyEllerEndret}\n                />\n            ),\n        };\n    };\n\n    const createOppsummeringslisteelementPropsForBegrunnelseForSenEndring = (\n        begrunnelse: TilleggsopplysningMedBeskrivelse,\n    ): OppsummeringslisteelementProps => {\n        return {\n            venstrestiltTekst: begrunnelse.beskrivelse,\n            høyrestiltTekst: '',\n            content: (\n                <>\n                    <Feltoppsummering feltnavn={begrunnelse.ekstraInformasjon || ''} verdi={begrunnelse.tekst} />\n                </>\n            ),\n        };\n    };\n\n    const createOppsummeringslisteelementProps = (periode: Periode) => {\n        const periodeErNyEllerEndret = eksisterendeUttaksplan\n            ? finnesPeriodeIOpprinneligPlan(periode, eksisterendeUttaksplan) === false\n            : true;\n        switch (periode.type) {\n            case Periodetype.Uttak:\n                return createOppsummeringslisteelementPropsForUttaksperiode(periode, periodeErNyEllerEndret);\n            case Periodetype.Utsettelse:\n                return createOppsummeringslisteelementPropsForUtsettelsesperiode(periode, periodeErNyEllerEndret);\n            case Periodetype.Overføring:\n                return createOppsummeringslisteelementPropsForOverføringsperiode(periode, periodeErNyEllerEndret);\n            case Periodetype.Opphold:\n                return createOppsummeringslisteelementPropsForOppholdsperiode(periode);\n            default:\n                return null;\n        }\n    };\n\n    const oppsummeringslisteData = (): OppsummeringslisteelementProps[] => {\n        const periodeliste = perioder\n            .map((periode) => createOppsummeringslisteelementProps(periode))\n            .filter((v) => v !== null) as OppsummeringslisteelementProps[];\n        if (begrunnelseForSenEndring) {\n            const begrunnelse = beskrivTilleggsopplysning(begrunnelseForSenEndring);\n            const begrunnelseForSenEndringList =\n                createOppsummeringslisteelementPropsForBegrunnelseForSenEndring(begrunnelse);\n            return periodeliste.concat(begrunnelseForSenEndringList);\n        }\n\n        return periodeliste;\n    };\n\n    return <Oppsummeringsliste data={oppsummeringslisteData()} />;\n};\n\nexport default UttaksplanOppsummeringsliste;\n","import {\n    AnnenForelder,\n    Arbeidsforhold,\n    Dekningsgrad,\n    NavnPåForeldre,\n    Periode,\n    Situasjon,\n    Tilleggsopplysning,\n    intlUtils,\n} from '@navikt/fp-common';\n\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport UttaksplanOppsummeringsliste from './UttaksplanOppsummeringsliste';\nimport { BodyShort } from '@navikt/ds-react';\n\ninterface Props {\n    perioder: Periode[];\n    navnPåForeldre: NavnPåForeldre;\n    erFarEllerMedmor: boolean;\n    registrerteArbeidsforhold: Arbeidsforhold[];\n    dekningsgrad: Dekningsgrad;\n    antallUkerUttaksplan: number;\n    annenForelder: AnnenForelder;\n    familiehendelsesdato: Date;\n    termindato: Date | undefined;\n    situasjon: Situasjon;\n    erAleneOmOmsorg: boolean;\n    antallBarn: number;\n    ønskerJustertUttakVedFødsel: boolean | undefined;\n    begrunnelseForSenEndring?: Tilleggsopplysning;\n    eksisterendeUttaksplan?: Periode[];\n}\n\nconst UttaksplanOppsummering: React.FunctionComponent<Props> = ({\n    dekningsgrad,\n    antallUkerUttaksplan,\n    ønskerJustertUttakVedFødsel,\n    antallBarn,\n    ...rest\n}) => {\n    const intl = useIntl();\n\n    const dekningsgradTekst =\n        dekningsgrad === Dekningsgrad.HUNDRE_PROSENT\n            ? intlUtils(intl, 'oppsummering.uttak.dekningsgrad.verdi100', { antallUker: antallUkerUttaksplan })\n            : intlUtils(intl, 'oppsummering.uttak.dekningsgrad.verdi80', { antallUker: antallUkerUttaksplan });\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.uttak.dekningsgrad.label')}>\n                <BodyShort>{dekningsgradTekst}</BodyShort>\n            </OppsummeringsPunkt>\n            <UttaksplanOppsummeringsliste\n                ønskerJustertUttakVedFødsel={ønskerJustertUttakVedFødsel}\n                {...rest}\n            ></UttaksplanOppsummeringsliste>\n            {ønskerJustertUttakVedFødsel !== undefined && (\n                <OppsummeringsPunkt\n                    title={intlUtils(intl, 'oppsummering.uttak.ønskerAutomatiskJustering.label', {\n                        antallBarn,\n                    })}\n                >\n                    <BodyShort>\n                        <FormattedMessage id={ønskerJustertUttakVedFødsel ? 'ja' : 'nei'} />\n                    </BodyShort>\n                </OppsummeringsPunkt>\n            )}\n        </>\n    );\n};\n\nexport default UttaksplanOppsummering;\n","import { useEffect, useRef } from 'react';\n\nconst useAbortSignal = () => {\n    const controller = useRef<AbortController>(new AbortController());\n\n    useEffect(() => {\n        return () => {\n            controller.current.abort();\n        };\n    }, []);\n\n    return controller.current.signal;\n};\n\nexport default useAbortSignal;\n","import {\n    bemUtils,\n    Block,\n    getErSøkerFarEllerMedmor,\n    getFarMedmorErAleneOmOmsorg,\n    getNavnPåForeldre,\n    intlUtils,\n    isAnnenForelderOppgitt,\n    ISOStringToDate,\n    Step,\n    StepButtonWrapper,\n} from '@navikt/fp-common';\nimport { useEffect, useMemo, useState } from 'react';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport useAvbrytSøknad from 'app/utils/hooks/useAvbrytSøknad';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport stepConfig, { getPreviousStepHref, getPreviousStepHrefEndringssøknad } from '../stepsConfig';\nimport AnnenForelderOppsummering from './components/annen-forelder-oppsummering/AnnenForelderOppsummering';\nimport BarnOppsummering from './components/barn-oppsummering/BarnOppsummering';\nimport OppsummeringsPanel from './components/OppsummeringsPanel';\nimport Personalia from './components/Personalia';\nimport UtenlandsoppholdOppsummering from './components/utenlandsopphold-oppsummering/UtenlandsoppholdOppsummering';\nimport {\n    getInitialOppsummeringValues,\n    OppsummeringFormComponents,\n    OppsummeringFormData,\n    OppsummeringFormField,\n} from './oppsummeringFormConfig';\nimport { validateHarGodkjentOppsummering } from './validation/oppsummeringValidation';\nimport ArbeidsforholdOgAndreInntekterOppsummering from './components/andre-inntekter-oppsummering/ArbeidsforholdOgAndreInntekterOppsummering';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport Api from 'app/api/api';\nimport actionCreator from 'app/context/action/actionCreator';\nimport {\n    FEIL_VED_INNSENDING,\n    FOR_MANGE_VEDLEGG_ERROR,\n    getErrorCallId,\n    getSøknadsdataForInnsending,\n    UKJENT_UUID,\n} from 'app/api/apiUtils';\nimport { Link, useNavigate } from 'react-router-dom';\n\nimport SøknadRoutes from 'app/routes/routes';\nimport UttaksplanOppsummering from './components/uttaksplan-oppsummering/UttaksplanOppsummering';\nimport { beskrivTilleggsopplysning } from 'app/utils/tilleggsopplysningerUtils';\nimport { getFamiliehendelsedato, getTermindato } from 'app/utils/barnUtils';\nimport { redirectToLogin } from 'app/utils/redirectToLogin';\nimport useFortsettSøknadSenere from 'app/utils/hooks/useFortsettSøknadSenere';\nimport { sendErrorMessageToSentry } from '../../api/apiUtils';\nimport useSaveLoadedRoute from 'app/utils/hooks/useSaveLoadedRoute';\nimport { Button } from '@navikt/ds-react';\nimport useAbortSignal from 'app/utils/hooks/useAbortSignal';\nimport { PaperplaneIcon } from '@navikt/aksel-icons';\n\nimport './oppsummering.less';\n\nconst Oppsummering = () => {\n    const intl = useIntl();\n    const { dispatch, state } = useForeldrepengesøknadContext();\n    const navigate = useNavigate();\n    const { kvittering, eksisterendeSak } = state;\n    const bem = bemUtils('oppsummering');\n\n    const [submitError, setSubmitError] = useState<any>(undefined);\n    const [formSubmitted, setFormSubmitted] = useState(false);\n    const [isSendingSøknad, setIsSendingSøknad] = useState(false);\n    const {\n        barn,\n        annenForelder,\n        søker,\n        informasjonOmUtenlandsopphold,\n        søkersituasjon,\n        dekningsgrad,\n        uttaksplan,\n        tilleggsopplysninger,\n        erEndringssøknad,\n    } = useSøknad();\n    const abortSignal = useAbortSignal();\n\n    const onFortsettSøknadSenere = useFortsettSøknadSenere();\n    const søkerinfo = useSøkerinfo();\n    const { person, arbeidsforhold } = søkerinfo;\n    const { erAleneOmOmsorg } = søker;\n    const søknad = useSøknad();\n    const onAvbrytSøknad = useAvbrytSøknad();\n    const søkerErFarEllerMedmor = getErSøkerFarEllerMedmor(søkersituasjon.rolle);\n    const navnPåForeldre = getNavnPåForeldre(person, annenForelder, søkerErFarEllerMedmor, intl);\n    const antallUkerUttaksplan = state.antallUkerIUttaksplan;\n    const begrunnelseForSenEndring = tilleggsopplysninger.begrunnelseForSenEndring\n        ? beskrivTilleggsopplysning(tilleggsopplysninger.begrunnelseForSenEndring)\n        : undefined;\n    const farMedmorErAleneOmOmsorg = getFarMedmorErAleneOmOmsorg(søkerErFarEllerMedmor, erAleneOmOmsorg, annenForelder);\n    const familiehendelsesdato = ISOStringToDate(getFamiliehendelsedato(søknad.barn));\n    const termindato = getTermindato(søknad.barn);\n    const erEndringssøknadOgAnnenForelderHarRett =\n        erEndringssøknad && isAnnenForelderOppgitt(annenForelder) && annenForelder.harRettPåForeldrepengerINorge;\n    const erklæringOmAnnenForelderInformert = erEndringssøknadOgAnnenForelderHarRett\n        ? intlUtils(intl, 'oppsummering.harGodkjentOppsummering.endringssøknadMedAnnenForelder', {\n              navnAnnenForelder: annenForelder.fornavn,\n          })\n        : '';\n    const egenerklæringTekst = intlUtils(intl, 'oppsummering.harGodkjentOppsummering').concat(\n        erklæringOmAnnenForelderInformert,\n    );\n    const cleanedSøknad = useMemo(\n        () =>\n            getSøknadsdataForInnsending(\n                søknad,\n                state.perioderSomSkalSendesInn,\n                familiehendelsesdato!,\n                state.endringstidspunkt,\n            ),\n        [søknad, state.perioderSomSkalSendesInn, familiehendelsesdato, state.endringstidspunkt],\n    );\n    useSaveLoadedRoute(SøknadRoutes.OPPSUMMERING, state.kvittering);\n\n    useEffect(() => {\n        if (formSubmitted && !isSendingSøknad) {\n            setIsSendingSøknad(true);\n            if (cleanedSøknad.uttaksplan.length === 0 && cleanedSøknad.erEndringssøknad) {\n                throw new Error('Søknaden din inneholder ingen nye perioder.');\n            }\n            Api.sendSøknad(cleanedSøknad, søkerinfo.person.fnr, abortSignal)\n                .then((response) => {\n                    dispatch(actionCreator.setKvittering(response.data));\n                })\n                .catch((error) => {\n                    if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n                        redirectToLogin();\n                    } else {\n                        setSubmitError(error);\n                    }\n                });\n        }\n    }, [dispatch, søkerinfo.person.fnr, formSubmitted, cleanedSøknad, isSendingSøknad]);\n\n    useEffect(() => {\n        if (kvittering !== undefined) {\n            setFormSubmitted(false);\n            navigate(SøknadRoutes.SØKNAD_SENDT);\n        }\n    }, [kvittering, navigate]);\n\n    useEffect(() => {\n        if (submitError !== undefined) {\n            sendErrorMessageToSentry(submitError);\n            if (\n                submitError.response &&\n                submitError.response.status === 400 &&\n                submitError.response.data &&\n                submitError.response.data.messages &&\n                submitError.response.data.messages.includes(\n                    'Vedleggslisten kan ikke inneholde flere enn 40 opplastede vedlegg',\n                )\n            ) {\n                throw new Error(FOR_MANGE_VEDLEGG_ERROR);\n            }\n            sendErrorMessageToSentry(submitError);\n            const submitErrorCallId = getErrorCallId(submitError);\n            const callIdForBruker =\n                submitErrorCallId !== UKJENT_UUID ? submitErrorCallId.slice(0, 8) : submitErrorCallId;\n            throw new Error(FEIL_VED_INNSENDING + callIdForBruker);\n        }\n    }, [submitError]);\n\n    const handleSubmit = (values: Partial<OppsummeringFormData>) => {\n        dispatch(actionCreator.setGodkjentOppsummering(values.harGodkjentOppsummering!));\n        setFormSubmitted(true);\n    };\n\n    const submitKnappTekst = formSubmitted\n        ? intlUtils(intl, 'oppsummering.senderInnSøknad')\n        : intlUtils(intl, 'oppsummering.sendInnSøknad');\n\n    return (\n        <OppsummeringFormComponents.FormikWrapper\n            initialValues={getInitialOppsummeringValues()}\n            onSubmit={handleSubmit}\n            renderForm={() => {\n                return (\n                    <OppsummeringFormComponents.Form includeButtons={false}>\n                        <Step\n                            bannerTitle={intlUtils(intl, 'søknad.pageheading')}\n                            activeStepId=\"oppsummering\"\n                            pageTitle={intlUtils(intl, 'søknad.oppsummering')}\n                            onCancel={onAvbrytSøknad}\n                            onContinueLater={onFortsettSøknadSenere}\n                            steps={stepConfig(intl, erEndringssøknad)}\n                        >\n                            <Block padBottom=\"l\">\n                                <div className={bem.block}>\n                                    <OppsummeringsPanel title=\"Deg\">\n                                        <Personalia søkerinfo={søkerinfo} />\n                                    </OppsummeringsPanel>\n                                    {!erEndringssøknad && (\n                                        <OppsummeringsPanel title=\"Barnet\">\n                                            <BarnOppsummering\n                                                barn={barn}\n                                                familiehendelsesdato={familiehendelsesdato!}\n                                            />\n                                        </OppsummeringsPanel>\n                                    )}\n                                    {!erEndringssøknad && (\n                                        <OppsummeringsPanel title=\"Den andre forelderen\">\n                                            <AnnenForelderOppsummering\n                                                annenForelder={annenForelder}\n                                                søker={søker}\n                                                søkerrolle={søkersituasjon.rolle}\n                                                barn={barn}\n                                                farMedmorErAleneOmOmsorg={farMedmorErAleneOmOmsorg}\n                                            />\n                                        </OppsummeringsPanel>\n                                    )}\n                                    {!erEndringssøknad && (\n                                        <OppsummeringsPanel title=\"Utenlandsopphold\">\n                                            <UtenlandsoppholdOppsummering\n                                                informasjonOmUtenlandsopphold={informasjonOmUtenlandsopphold}\n                                                barn={barn}\n                                            />\n                                        </OppsummeringsPanel>\n                                    )}\n                                    {!erEndringssøknad && (\n                                        <OppsummeringsPanel title=\"Arbeidsforhold og andre inntektskilder\">\n                                            <ArbeidsforholdOgAndreInntekterOppsummering />\n                                        </OppsummeringsPanel>\n                                    )}\n                                    <OppsummeringsPanel title={intlUtils(intl, 'oppsummering.uttak')}>\n                                        <UttaksplanOppsummering\n                                            perioder={uttaksplan}\n                                            navnPåForeldre={navnPåForeldre}\n                                            annenForelder={annenForelder}\n                                            erFarEllerMedmor={søkerErFarEllerMedmor}\n                                            registrerteArbeidsforhold={arbeidsforhold}\n                                            dekningsgrad={dekningsgrad}\n                                            antallUkerUttaksplan={antallUkerUttaksplan}\n                                            begrunnelseForSenEndring={begrunnelseForSenEndring}\n                                            //begrunnelseForSenEndringVedlegg={søknad.vedleggForSenEndring}\n                                            eksisterendeUttaksplan={\n                                                eksisterendeSak ? eksisterendeSak.uttaksplan : undefined\n                                            }\n                                            familiehendelsesdato={familiehendelsesdato!}\n                                            termindato={termindato}\n                                            situasjon={søkersituasjon.situasjon}\n                                            erAleneOmOmsorg={erAleneOmOmsorg}\n                                            antallBarn={søknad.barn.antallBarn}\n                                            ønskerJustertUttakVedFødsel={søknad.ønskerJustertUttakVedFødsel}\n                                        />\n                                    </OppsummeringsPanel>\n                                </div>\n                            </Block>\n                            <Block padBottom=\"l\">\n                                <OppsummeringFormComponents.ConfirmationCheckbox\n                                    name={OppsummeringFormField.harGodkjentOppsummering}\n                                    label={egenerklæringTekst}\n                                    validate={validateHarGodkjentOppsummering(intl)}\n                                />\n                            </Block>\n                            <Block margin=\"l\" padBottom=\"l\">\n                                <StepButtonWrapper lastStep={true}>\n                                    <Button\n                                        variant=\"secondary\"\n                                        as={Link}\n                                        to={\n                                            søknad.erEndringssøknad\n                                                ? getPreviousStepHrefEndringssøknad('oppsummering')\n                                                : getPreviousStepHref('oppsummering')\n                                        }\n                                    >\n                                        <FormattedMessage id=\"backlink.label\" />\n                                    </Button>\n                                    <Button\n                                        icon={<PaperplaneIcon />}\n                                        iconPosition=\"right\"\n                                        type=\"submit\"\n                                        disabled={formSubmitted}\n                                        loading={formSubmitted}\n                                    >\n                                        {submitKnappTekst}\n                                    </Button>\n                                </StepButtonWrapper>\n                            </Block>\n                        </Step>\n                    </OppsummeringFormComponents.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default Oppsummering;\n"],"names":["OppsummeringsPunkt","title","visible","children","jsxs","Block","jsx","Label","hasListOfChildren","InnholdMedLedetekst","ledetekst","className","child","BodyShort","guid","KompleksFeltoppsummering","OppsummeringAvDokumentasjon","props","vedlegg","intl","useIntl","renderListOfAttachmentPreviewLinks","isAttachmentWithError","url","id","filename","Link","intlUtils","Tag","AnnenForelderOppsummering","annenForelder","søker","søkerrolle","barn","farMedmorErAleneOmOmsorg","erFarEllerMedmor","isFarEllerMedmor","dokumentasjonAvAleneomsorg","Fragment","isAnnenForelderIkkeOppgitt","isAnnenForelderOppgitt","FormattedMessage","BarnAdoptertIUtlandetDetaljer","familiehendelsesdato","isAdoptertStebarn","førsteOktober2021ReglerGjelder","hasValue","formatDate","getAntallBarnTekst","antallBarn","getTerminEllerFødselTittel","type","BarnType","getTerminEllerFødselsdato","isUfødtBarn","BarnOppsummering","isAdoptertAnnetBarn","OppsummeringsPanel","bem","bemUtils","Accordion","Personalia","søkerinfo","UtenlandsoppholdOppsummeringListe","utenlandsopphold","tidligereOpphold","opphold","countries","getErINorgePåFamiliehendelsedato","familiehendelsedato","senereOpphold","erINorge","tidOpphold","doesTidsperiodeContainDate","senOpphold","erAdoptertBarn","UtenlandsoppholdOppsummering","informasjonOmUtenlandsopphold","getFamiliehendelsedato","erINorgePåFamiliehendelsedato","UtenlandsoppholdListe","OppsummeringFormField","initialOppsummeringValues","getInitialOppsummeringValues","OppsummeringFormComponents","getTypedFormComponents","validateHarGodkjentOppsummering","value","AnnenInntektDetaljer","annenInntekt","AnnenInntektType","jobbIUtlandetInntekt","countries.getName","InntekterTabell","list","l","AndreInntekterOppsummering","harHattAnnenInntektSiste10Mnd","andreInntekterSiste10Mnd","useSøknad","ISOStringToDate","FrilansOppsummering","frilansInformasjon","harJobbetSomFrilansSiste10Mnd","oppstart","jobberFremdelesSomFrilans","driverFosterhjem","harJobbetForNærVennEllerFamilieSiste10Mnd","oppdragForNæreVennerEllerFamilieSiste10Mnd","navnPåArbeidsgiver","tidsperiode","pågående","Næringsdetaljer","næring","næringstyper","organisasjonsnummer","næringsinntekt","registrertINorge","registrertILand","harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene","hattVarigEndringAvNæringsinntektSiste4Kalenderår","endringAvNæringsinntektInformasjon","harRegnskapsfører","regnskapsfører","SelvstendigNæringsdrivendeOppsummering","selvstendigNæringsdrivendeInformasjon","harJobbetSomSelvstendigNæringsdrivendeSiste10Mnd","ArbeidsforholdOgAndreInntekterOppsummering","arbeidsforhold","useSøkerinfo","søkersituasjon","erAdopsjon","aktiveArbeidsForhold","getAktiveArbeidsforhold","harArbeidsforhold","HarIkkeArbeidsforhold","HarArbeidsforhold","TIL_SAKSBEHANDLER","beskrivTilleggsopplysning","tilleggsopplysning","tekst","ekstraInformasjon","beskrivelseAvOpplysning","ekstraMessageId","ekstraInfoTilSaksbehandling","cleanupInvisibleCharsFromTilleggsopplysninger","tilleggsopplysninger","replaceInvisibleCharsWithSpace","Feltoppsummering","feltnavn","verdi","List","data","renderElement","dataObject","i","Oppsummeringsliste","kompakt","elementProps","createElement","Oppsummeringslisteelement","venstrestiltTekst","høyrestiltTekst","content","classNames","getValgtArbeidsgiverNavn","orgnr","valgtArbeidsgiver","arbeidsgiverId","arbeidsgiverIdType","getArbeidsformTekst","arbeidsformer","orgnumre","arbeidstakerTekster","arbeidsformerTekster","arbeidsgiverNavn","arbeidsform","Arbeidsform","getÅrsakTekst","årsak","messageValues","intlKeyPrefix","Periodetype","getNavnPåAnnenForelder","navnPåForeldre","konto","StønadskontoType","Overføringsperiodedetaljer","periode","periodeErNyEllerEndret","navnAnnenForelder","dokumentasjonBehøvesForOverføringsperiode","getMorsAktivitetTekst","aktivitet","MorsAktivitet","assertUnreachable","MorsAktivitetDetaljer","morsAktivitet","dokumentasjonAvMorsAktivitet","visOppsummeringAvDokumentasjon","Uttaksperiodedetaljer","registrerteArbeidsforhold","søkerErFarEllerMedmor","morsAktivitetIPerioden","ønskerSamtidigUttak","gradert","stillingsprosent","ønskerFlerbarnsdager","arbeidsformTekst","erDeltUttakINorge","shouldPeriodeHaveAttachment","Utsettelsesperiodedetaljer","bekrefterArbeidIPerioden","bekreftErIArbeidSvar","UtsettelseÅrsakType","currentVedlegg","AttachmentType","UttaksplanOppsummeringsliste","perioder","begrunnelseForSenEndring","eksisterendeUttaksplan","termindato","situasjon","erAleneOmOmsorg","ønskerJustertUttakVedFødsel","getStønadskontoNavnFromKonto","getStønadskontoNavn","getUttaksperiodeNavn","tittel","appendPeriodeNavnHvisUttakRundtFødselFarMedmor","formatTidsperiode","formatertTidsperiode","uttaksperiodeKanJusteresVedFødsel","createOppsummeringslisteelementPropsForUttaksperiode","createOppsummeringslisteelementPropsForOppholdsperiode","getPeriodeTittel","createOppsummeringslisteelementPropsForUtsettelsesperiode","createOppsummeringslisteelementPropsForOverføringsperiode","kontonavn","createOppsummeringslisteelementPropsForBegrunnelseForSenEndring","begrunnelse","createOppsummeringslisteelementProps","finnesPeriodeIOpprinneligPlan","oppsummeringslisteData","periodeliste","v","begrunnelseForSenEndringList","UttaksplanOppsummering","dekningsgrad","antallUkerUttaksplan","rest","dekningsgradTekst","Dekningsgrad","useAbortSignal","controller","useRef","useEffect","Oppsummering","dispatch","state","useForeldrepengesøknadContext","navigate","useNavigate","kvittering","eksisterendeSak","submitError","setSubmitError","useState","formSubmitted","setFormSubmitted","isSendingSøknad","setIsSendingSøknad","uttaksplan","erEndringssøknad","abortSignal","onFortsettSøknadSenere","useFortsettSøknadSenere","person","søknad","onAvbrytSøknad","useAvbrytSøknad","getErSøkerFarEllerMedmor","getNavnPåForeldre","getFarMedmorErAleneOmOmsorg","getTermindato","erklæringOmAnnenForelderInformert","egenerklæringTekst","cleanedSøknad","useMemo","getSøknadsdataForInnsending","useSaveLoadedRoute","SøknadRoutes","Api","response","actionCreator","error","redirectToLogin","sendErrorMessageToSentry","FOR_MANGE_VEDLEGG_ERROR","submitErrorCallId","getErrorCallId","callIdForBruker","UKJENT_UUID","FEIL_VED_INNSENDING","handleSubmit","values","submitKnappTekst","Step","stepConfig","StepButtonWrapper","Button","getPreviousStepHrefEndringssøknad","getPreviousStepHref","PaperplaneIcon","Oppsummering$1"],"mappings":"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"}