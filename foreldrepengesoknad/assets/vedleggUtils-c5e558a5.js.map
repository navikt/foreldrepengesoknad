{"version":3,"file":"vedleggUtils-c5e558a5.js","sources":["../../src/app/utils/vedleggUtils.ts"],"sourcesContent":["import { guid } from '@navikt/fp-common';\nimport { EndringssøknadForInnsending, SøknadForInnsending } from 'app/api/apiUtils';\nimport { Attachment, InnsendingsType } from 'app/types/Attachment';\nimport { AttachmentType } from 'app/types/AttachmentType';\nimport { Skjemanummer } from 'app/types/Skjemanummer';\nimport { Periode } from 'uttaksplan/types/Periode';\n\nconst generateAttachmentId = () => 'V'.concat(guid().replace(/-/g, ''));\n\nexport const mapFilTilVedlegg = (\n    file: File,\n    type: AttachmentType,\n    skjemanummer: Skjemanummer,\n    innsendingsType?: InnsendingsType\n): Attachment => ({\n    id: generateAttachmentId(),\n    file,\n    filename: file.name,\n    filesize: file.size,\n    uploaded: false,\n    pending: false,\n    type,\n    skjemanummer,\n    innsendingsType,\n});\n\nexport const isAttachmentWithError = ({ pending, uploaded, filesize }: Attachment) =>\n    (pending === false && uploaded === false) || filesize === 0;\n\nexport const lagSendSenereDokument = (type: AttachmentType, skjemanummer: Skjemanummer) => {\n    return mapFilTilVedlegg({ name: '', size: '' } as any, type, skjemanummer, InnsendingsType.SEND_SENERE);\n};\n\nexport const lagSendSenereDokumentNårIngenAndreFinnes = (\n    dokumenter: Attachment[],\n    type: AttachmentType,\n    skjema: Skjemanummer\n): Attachment[] => {\n    if (dokumenter.length === 0) {\n        return [lagSendSenereDokument(type, skjema)];\n    }\n    if (dokumenter.length === 1) {\n        return dokumenter;\n    }\n    return dokumenter.filter((dok) => dok.innsendingsType !== InnsendingsType.SEND_SENERE);\n};\n\nexport const isArrayOfAttachments = (object: any): object is readonly Attachment[] => {\n    return (\n        Array.isArray(object) &&\n        object[0] !== null &&\n        object.every(\n            (element) => element && (element.filename || element.innsendingsType === InnsendingsType.SEND_SENERE)\n        )\n    );\n};\n\nexport const removeAttachmentsWithUploadError = (attachments: readonly Attachment[]) =>\n    attachments.filter(\n        (a: Attachment) => !isAttachmentWithError(a) || a.innsendingsType === InnsendingsType.SEND_SENERE\n    );\n\nconst isPOJO = (arg: unknown): arg is Record<string, unknown> => {\n    if (arg == null || typeof arg !== 'object') {\n        return false;\n    }\n\n    const proto = Object.getPrototypeOf(arg);\n\n    if (proto == null) {\n        return true; // Object.create(null)\n    }\n\n    return proto === Object.prototype;\n};\n\nconst extractAttachments = (søknad: unknown, foundAttachments: Attachment[]): any => {\n    if (Array.isArray(søknad)) {\n        return søknad.map((v) => extractAttachments(v, foundAttachments));\n    }\n\n    if (!isPOJO(søknad)) {\n        return søknad;\n    }\n\n    const ret: any = {};\n\n    Object.keys(søknad).forEach((key: string) => {\n        const value = søknad[key];\n        if (typeof value === 'object') {\n            if (isArrayOfAttachments(value)) {\n                const attachmentWithoutUploadError = removeAttachmentsWithUploadError(value);\n                foundAttachments.push(...attachmentWithoutUploadError);\n                ret[key] = (value as Attachment[])\n                    .filter((attachment: Attachment) => attachmentWithoutUploadError.includes(attachment))\n                    .map((attachment: Attachment) => attachment.id);\n            } else if (Array.isArray(value)) {\n                ret[key] = value.map((v) => extractAttachments(v, foundAttachments));\n            } else {\n                ret[key] = extractAttachments(value, foundAttachments);\n            }\n        } else {\n            ret[key] = value;\n        }\n    });\n\n    return ret;\n};\n\nexport const mapAttachmentsToSøknadForInnsending = (\n    søknad: SøknadForInnsending | EndringssøknadForInnsending\n): SøknadForInnsending | EndringssøknadForInnsending => {\n    const vedlegg: Attachment[] = [];\n    const søknadCopy = extractAttachments(søknad, vedlegg);\n\n    const vedleggWithoutDuplicates = vedlegg.reduce((result, current) => {\n        if (result.find((att) => att.id === current.id)) {\n            return result;\n        }\n\n        result.push(current);\n        return result;\n    }, [] as Attachment[]);\n\n    return {\n        ...søknadCopy,\n        vedlegg: vedleggWithoutDuplicates,\n    };\n};\n\nexport const removeDuplicateAttachments = (uttaksplan: Periode[]) => {\n    uttaksplan.forEach((p1: Periode) => {\n        if (p1.vedlegg) {\n            const vedleggIdRefs = p1.vedlegg.map((a: Attachment) => a.id);\n            uttaksplan.forEach((p2) => {\n                if (p1 !== p2 && p1.vedlegg && p2.vedlegg) {\n                    p2.vedlegg.forEach((a2) => {\n                        if (vedleggIdRefs.includes(a2.id)) {\n                            p2.vedlegg!.splice(p2.vedlegg!.indexOf(a2), 1);\n                        }\n                    });\n                }\n            });\n        }\n    });\n};\n"],"names":["generateAttachmentId","guid","mapFilTilVedlegg","file","type","skjemanummer","innsendingsType","isAttachmentWithError","pending","uploaded","filesize","lagSendSenereDokument","InnsendingsType","lagSendSenereDokumentNårIngenAndreFinnes","dokumenter","skjema","dok","isArrayOfAttachments","object","element","removeAttachmentsWithUploadError","attachments","a","isPOJO","arg","proto","extractAttachments","søknad","foundAttachments","v","ret","key","value","attachmentWithoutUploadError","attachment","mapAttachmentsToSøknadForInnsending","vedlegg","søknadCopy","vedleggWithoutDuplicates","result","current","att","removeDuplicateAttachments","uttaksplan","p1","vedleggIdRefs","p2","a2"],"mappings":"yLAOA,MAAMA,EAAuB,IAAM,IAAI,OAAOC,EAAO,EAAA,QAAQ,KAAM,EAAE,CAAC,EAEzDC,EAAmB,CAC5BC,EACAC,EACAC,EACAC,KACc,CACd,GAAIN,EAAqB,EACzB,KAAAG,EACA,SAAUA,EAAK,KACf,SAAUA,EAAK,KACf,SAAU,GACV,QAAS,GACT,KAAAC,EACA,aAAAC,EACA,gBAAAC,CACJ,GAEaC,EAAwB,CAAC,CAAE,QAAAC,EAAS,SAAAC,EAAU,SAAAC,CAAS,IAC/DF,IAAY,IAASC,IAAa,IAAUC,IAAa,EAEjDC,EAAwB,CAACP,EAAsBC,IACjDH,EAAiB,CAAE,KAAM,GAAI,KAAM,EAAa,EAAAE,EAAMC,EAAcO,EAAgB,WAAW,EAG7FC,EAA2C,CACpDC,EACAV,EACAW,IAEID,EAAW,SAAW,EACf,CAACH,EAAsBP,EAAMW,CAAM,CAAC,EAE3CD,EAAW,SAAW,EACfA,EAEJA,EAAW,OAAQE,GAAQA,EAAI,kBAAoBJ,EAAgB,WAAW,EAG5EK,EAAwBC,GAE7B,MAAM,QAAQA,CAAM,GACpBA,EAAO,CAAC,IAAM,MACdA,EAAO,MACFC,GAAYA,IAAYA,EAAQ,UAAYA,EAAQ,kBAAoBP,EAAgB,YAAA,EAKxFQ,EAAoCC,GAC7CA,EAAY,OACPC,GAAkB,CAACf,EAAsBe,CAAC,GAAKA,EAAE,kBAAoBV,EAAgB,WAC1F,EAEEW,EAAUC,GAAiD,CAC7D,GAAIA,GAAO,MAAQ,OAAOA,GAAQ,SACvB,MAAA,GAGL,MAAAC,EAAQ,OAAO,eAAeD,CAAG,EAEvC,OAAIC,GAAS,KACF,GAGJA,IAAU,OAAO,SAC5B,EAEMC,EAAqB,CAACC,EAAiBC,IAAwC,CAC7E,GAAA,MAAM,QAAQD,CAAM,EACpB,OAAOA,EAAO,IAAKE,GAAMH,EAAmBG,EAAGD,CAAgB,CAAC,EAGhE,GAAA,CAACL,EAAOI,CAAM,EACP,OAAAA,EAGX,MAAMG,EAAW,CAAA,EAEjB,cAAO,KAAKH,CAAM,EAAE,QAASI,GAAgB,CACnC,MAAAC,EAAQL,EAAOI,CAAG,EACpB,GAAA,OAAOC,GAAU,SACb,GAAAf,EAAqBe,CAAK,EAAG,CACvB,MAAAC,EAA+Bb,EAAiCY,CAAK,EAC1DJ,EAAA,KAAK,GAAGK,CAA4B,EACrDH,EAAIC,CAAG,EAAKC,EACP,OAAQE,GAA2BD,EAA6B,SAASC,CAAU,CAAC,EACpF,IAAKA,GAA2BA,EAAW,EAAE,OAC3C,MAAM,QAAQF,CAAK,EACtBF,EAAAC,CAAG,EAAIC,EAAM,IAAKH,GAAMH,EAAmBG,EAAGD,CAAgB,CAAC,EAEnEE,EAAIC,CAAG,EAAIL,EAAmBM,EAAOJ,CAAgB,OAGzDE,EAAIC,CAAG,EAAIC,CACf,CACH,EAEMF,CACX,EAEaK,EACTR,GACoD,CACpD,MAAMS,EAAwB,CAAA,EACxBC,EAAaX,EAAmBC,EAAQS,CAAO,EAE/CE,EAA2BF,EAAQ,OAAO,CAACG,EAAQC,KACjDD,EAAO,KAAME,GAAQA,EAAI,KAAOD,EAAQ,EAAE,GAI9CD,EAAO,KAAKC,CAAO,EACZD,GACR,CAAkB,CAAA,EAEd,MAAA,CACH,GAAGF,EACH,QAASC,CAAA,CAEjB,EAEaI,EAA8BC,GAA0B,CACtDA,EAAA,QAASC,GAAgB,CAChC,GAAIA,EAAG,QAAS,CACZ,MAAMC,EAAgBD,EAAG,QAAQ,IAAKtB,GAAkBA,EAAE,EAAE,EACjDqB,EAAA,QAASG,GAAO,CACnBF,IAAOE,GAAMF,EAAG,SAAWE,EAAG,SAC3BA,EAAA,QAAQ,QAASC,GAAO,CACnBF,EAAc,SAASE,EAAG,EAAE,GAC5BD,EAAG,QAAS,OAAOA,EAAG,QAAS,QAAQC,CAAE,EAAG,CAAC,CACjD,CACH,CACL,CACH,EACL,CACH,CACL"}