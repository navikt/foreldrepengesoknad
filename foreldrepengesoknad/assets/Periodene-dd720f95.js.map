{"version":3,"file":"Periodene-dd720f95.js","sources":["../../src/uttaksplan/types/SenEndringÅrsak.ts","../../src/app/steps/uttaksplan-info/utils/Periodene.ts"],"sourcesContent":["export enum SenEndringÅrsak {\n    'Sykdom' = 'SYKDOM',\n    'Uttak' = 'UTTAK',\n    'SykdomOgUttak' = 'SYKDOM_OG_UTTAK',\n    'InstitusjonSøker' = 'INSTITUSJONSOPPHOLD_SØKER',\n    'InstitusjonBarnet' = 'INSTITUSJONSOPPHOLD_BARNET',\n    'Arbeid' = 'ARBEID',\n    'ArbeidOgUttak' = 'ARBEID_OG_UTTAK',\n    'Ingen' = 'INGEN',\n}\n","import { Forelder } from 'app/types/Forelder';\nimport dayjs from 'dayjs';\nimport {\n    ForeldrepengerFørFødselUttaksperiode,\n    InfoPeriode,\n    isForeldrepengerFørFødselUttaksperiode,\n    isHull,\n    isInfoPeriode,\n    isOppholdsperiode,\n    isOverføringsperiode,\n    isPeriodeUtenUttak,\n    isPeriodeUtenUttakUtsettelse,\n    isUtsettelsePgaFerie,\n    isUtsettelsesperiode,\n    isUttaksperiode,\n    Oppholdsperiode,\n    Overføringsperiode,\n    Periode,\n    PeriodeHull,\n    Periodetype,\n    PeriodeUtenUttak,\n    Utsettelsesperiode,\n    Uttaksperiode,\n} from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport {\n    erUtsettelse,\n    erUtsettelseGrunnetPgaArbeid,\n    erUtsettelsePgaSykdom,\n    erUtsettelseTilbakeITid,\n    erUttakEllerOppholdMerEnnTreMånederSiden,\n    erUttakGrunnetSykdom,\n    erUttakTilbakeITid,\n} from 'uttaksplan/utils/periodeUtils';\nimport { Perioden } from './Perioden';\nimport { datoErInnenforTidsperiode, isValidTidsperiode, Tidsperioden } from './Tidsperioden';\nimport { Uttaksdagen } from './Uttaksdagen';\nimport { SenEndringÅrsak } from 'uttaksplan/types/SenEndringÅrsak';\nimport { finnAntallDagerÅTrekke } from './uttaksPlanStatus';\n\nexport const Periodene = (perioder: Periode[]) => ({\n    getPeriode: (id: string) => getPeriode(perioder, id),\n    getOpphold: () => getOpphold(perioder),\n    getUttak: () => getUttaksperioder(perioder),\n    getOverføringer: () => getOverføringer(perioder),\n    getHull: () => getHull(perioder),\n    getHullOgInfoOgPerioderUtenUttak: () => getHullOgInfoOgPerioderUtenUttak(perioder),\n    getInfoperioder: () => getInfoperioder(perioder),\n    getUtsettelser: () => getUtsettelser(perioder),\n    getPerioderEtterFamiliehendelsesdato: (dato: Date) => getPerioderEtterFamiliehendelsesdato(perioder, dato),\n    getPerioderFørFamiliehendelsesdato: (dato: Date) => getPerioderFørFamiliehendelsesdato(perioder, dato),\n    getPerioderMedUgyldigTidsperiode: () => getPeriodeMedUgyldigTidsperiode(perioder),\n    getPerioderMedFerieForForelder: (forelder: Forelder) => getPerioderMedFerieForForelder(perioder, forelder),\n    getFørstePerioderEtterFamiliehendelsesdato: (dato: Date) =>\n        getFørstePeriodeEtterFamiliehendelsesdato(perioder, dato),\n    getForeldrepengerFørTermin: () => getForeldrepengerFørTermin(perioder),\n    getFørsteUttaksdag: () => getFørsteUttaksdag(perioder),\n    getFørsteUttaksdagEtterSistePeriode: () => getFørsteUttaksdagEtterSistePeriode(perioder),\n    getFørsteUttaksdagEksluderInfoperioderOgFrittUttak: () =>\n        getFørsteUttaksdagEksluderInfoperioderOgFrittUttak(perioder),\n    getAntallUttaksdager: () => getAntallUttaksdager(perioder),\n    getAntallFeriedager: (forelder?: Forelder) => getAntallFeriedager(perioder, forelder),\n    finnOverlappendePerioder: (periode: Periode) => finnOverlappendePerioder(perioder, periode),\n    finnPeriodeMedDato: (dato: Date) => finnPeriodeMedDato(perioder, dato),\n    finnFørstePeriodeEtterDato: (dato: Date) => finnFørstePeriodeEtterDato(perioder, dato),\n    finnAlleForegåendePerioder: (periode: Periode) => finnPerioderFørPeriode(perioder, periode),\n    finnAllePåfølgendePerioder: (periode: Periode) => finnPerioderEtterPeriode(perioder, periode),\n    finnDenForegåendePerioden: (periode: Periode) => finnForrigePeriode(perioder, periode),\n    finnPåfølgendePeriode: (periode: Periode) => finnPåfølgendePeriode(perioder, periode),\n    forskyvPerioder: (uttaksdager: number) => forskyvPerioder(perioder, uttaksdager),\n    sort: () => [...perioder].sort(sorterPerioder),\n    finnSisteInfoperiode: () => finnSisteInfoperiode(perioder),\n});\n\nexport function sorterPerioder(p1: Periode, p2: Periode) {\n    if (isValidTidsperiode(p1.tidsperiode) === false || isValidTidsperiode(p2.tidsperiode) === false) {\n        if (isForeldrepengerFørFødselUttaksperiode(p1) && p1.skalIkkeHaUttakFørTermin) {\n            return -1;\n        }\n        return isValidTidsperiode(p1.tidsperiode) ? 1 : -1;\n    }\n    if (dayjs(p1.tidsperiode.fom).isSame(p2.tidsperiode.fom, 'day')) {\n        return isInfoPeriode(p1) ? -1 : 1;\n    }\n\n    if (Tidsperioden(p2.tidsperiode).erOmsluttetAv(p1.tidsperiode)) {\n        return 1;\n    }\n\n    return dayjs(p1.tidsperiode.fom).isBefore(p2.tidsperiode.fom, 'day') ? -1 : 1;\n}\n\nfunction getPeriode(perioder: Periode[], id: string): Periode | undefined {\n    return perioder.find((p) => p.id === id);\n}\n\nfunction getUttaksperioder(perioder: Periode[]): Uttaksperiode[] {\n    return perioder.filter((periode) => isUttaksperiode(periode)) as Uttaksperiode[];\n}\n\nfunction getUtsettelser(perioder: Periode[]): Utsettelsesperiode[] {\n    return perioder.filter((periode) => isUtsettelsesperiode(periode)) as Utsettelsesperiode[];\n}\n\nfunction getFerieUtsettelser(perioder: Periode[]): Utsettelsesperiode[] {\n    return perioder.filter((periode) => isUtsettelsePgaFerie(periode)) as Utsettelsesperiode[];\n}\n\nfunction getOverføringer(perioder: Periode[]): Overføringsperiode[] {\n    return perioder.filter((periode) => isOverføringsperiode(periode)) as Overføringsperiode[];\n}\n\nfunction getHull(perioder: Periode[]): PeriodeHull[] {\n    return perioder.filter((periode) => isHull(periode)) as PeriodeHull[];\n}\n\nfunction getHullOgInfoOgPerioderUtenUttak(perioder: Periode[]): Array<PeriodeHull | InfoPeriode | PeriodeUtenUttak> {\n    return perioder.filter(\n        (periode) => isHull(periode) || isInfoPeriode(periode) || isPeriodeUtenUttak(periode)\n    ) as Array<PeriodeHull | InfoPeriode | PeriodeUtenUttak>;\n}\n\nfunction getInfoperioder(perioder: Periode[]): InfoPeriode[] {\n    return perioder.filter((periode) => isInfoPeriode(periode)) as InfoPeriode[];\n}\n\nfunction getOpphold(perioder: Periode[]): Oppholdsperiode[] {\n    return perioder.filter((periode) => isOppholdsperiode(periode)) as Oppholdsperiode[];\n}\n\nfunction finnOverlappendePerioder(perioder: Periode[], periode: Periode): Periode[] {\n    return perioder.filter((p) => {\n        if (p.id === periode.id || !isValidTidsperiode(periode.tidsperiode)) {\n            return false;\n        }\n        const { fom, tom } = p.tidsperiode;\n        if (!fom || !tom) {\n            return false;\n        }\n        const fomEllerTomErInnenforTidsperiode =\n            datoErInnenforTidsperiode(fom, periode.tidsperiode) || datoErInnenforTidsperiode(tom, periode.tidsperiode);\n\n        const fomTomOmkranserTidsperiode =\n            dayjs(periode.tidsperiode.fom).isSameOrAfter(fom, 'day') &&\n            dayjs(periode.tidsperiode.tom).isSameOrBefore(tom, 'day');\n\n        return fomEllerTomErInnenforTidsperiode || fomTomOmkranserTidsperiode;\n    });\n}\n\nfunction finnPeriodeMedDato(perioder: Periode[], dato: Date): Periode | undefined {\n    return perioder.find((periode) => {\n        return dayjs(dato).isBetween(periode.tidsperiode.fom, periode.tidsperiode.tom, 'day', '[]');\n    });\n}\n\nfunction finnFørstePeriodeEtterDato(perioder: Periode[], dato: Date): Periode | undefined {\n    return perioder.find((periode) => {\n        return dayjs(periode.tidsperiode.fom).isAfter(dato, 'day');\n    });\n}\n\nfunction finnPerioderFørPeriode(perioder: Periode[], periode: Periode): Periode[] {\n    return perioder.filter((p) => dayjs(p.tidsperiode.tom).isBefore(periode.tidsperiode.fom, 'day'));\n}\n\nfunction finnPerioderEtterPeriode(perioder: Periode[], periode: Periode): Periode[] {\n    return perioder.filter((p) => dayjs(p.tidsperiode.fom).isAfter(periode.tidsperiode.tom, 'day'));\n}\n\nfunction finnForrigePeriode(perioder: Periode[], periode: Periode): Periode | undefined {\n    const foregåendePerioder = finnPerioderFørPeriode(perioder, periode);\n    if (foregåendePerioder.length > 0) {\n        return foregåendePerioder.pop();\n    }\n    return undefined;\n}\nfunction finnPåfølgendePeriode(perioder: Periode[], periode: Periode): Periode | undefined {\n    const påfølgendePerioder = finnPerioderEtterPeriode(perioder, periode);\n    if (påfølgendePerioder.length > 0) {\n        return påfølgendePerioder[0];\n    }\n    return undefined;\n}\nfunction forskyvPerioder(perioder: Periode[], uttaksdager: number): Periode[] {\n    let uttaksdagerCurrent = uttaksdager;\n\n    return perioder.reduce((result: Periode[], periode: Periode) => {\n        if (isUtsettelsesperiode(periode)) {\n            result.push(periode);\n\n            const dagerIPerioden = Perioden(periode).getAntallUttaksdager();\n\n            if (dagerIPerioden >= uttaksdagerCurrent) {\n                uttaksdagerCurrent = 0;\n            } else {\n                uttaksdagerCurrent -= dagerIPerioden;\n            }\n\n            return result;\n        }\n\n        if (\n            isInfoPeriode(periode) ||\n            isHull(periode) ||\n            isPeriodeUtenUttak(periode) ||\n            isPeriodeUtenUttakUtsettelse(periode)\n        ) {\n            const dagerIPerioden = Perioden(periode).getAntallUttaksdager();\n\n            if (dagerIPerioden > uttaksdagerCurrent) {\n                const forskyvetStartdato = Uttaksdagen(Uttaksdagen(periode.tidsperiode.fom).denneEllerNeste()).leggTil(\n                    uttaksdagerCurrent\n                );\n                const justertPeriode: Periode = {\n                    ...periode,\n                    tidsperiode: {\n                        fom: forskyvetStartdato,\n                        tom: periode.tidsperiode.tom,\n                    },\n                };\n\n                uttaksdagerCurrent = 0;\n\n                result.push(justertPeriode);\n                return result;\n            } else if (dagerIPerioden === uttaksdagerCurrent) {\n                uttaksdagerCurrent = 0;\n                return result;\n            } else {\n                uttaksdagerCurrent -= dagerIPerioden;\n                return result;\n            }\n        }\n\n        result.push(forskyvPeriode(periode, uttaksdagerCurrent));\n        return result;\n    }, []);\n}\n\nfunction forskyvPeriode(periode: Periode, uttaksdager: number): Periode {\n    if (uttaksdager === 0) {\n        return periode;\n    }\n\n    const forskyvetStartdato = Uttaksdagen(Uttaksdagen(periode.tidsperiode.fom).denneEllerNeste()).leggTil(uttaksdager);\n    return Perioden(periode).setStartdato(forskyvetStartdato);\n}\n\nfunction getPerioderFørFamiliehendelsesdato(perioder: Periode[], familiehendelsesdato: Date) {\n    return perioder.filter(\n        (periode) =>\n            isForeldrepengerFørFødselUttaksperiode(periode) ||\n            (isValidTidsperiode(periode.tidsperiode) &&\n                dayjs(periode.tidsperiode.fom).isBefore(familiehendelsesdato, 'day'))\n    );\n}\n\nfunction getPerioderEtterFamiliehendelsesdato(perioder: Periode[], familiehendelsesdato: Date) {\n    return perioder.filter(\n        (periode) =>\n            isValidTidsperiode(periode.tidsperiode) &&\n            dayjs(periode.tidsperiode.fom).isSameOrAfter(familiehendelsesdato, 'day') &&\n            isForeldrepengerFørFødselUttaksperiode(periode) === false\n    );\n}\n\nfunction getFørstePeriodeEtterFamiliehendelsesdato(\n    perioder: Periode[],\n    familiehendelsesdato: Date\n): Periode | undefined {\n    const aktuellePerioder = getPerioderEtterFamiliehendelsesdato(perioder, familiehendelsesdato).sort(sorterPerioder);\n    return aktuellePerioder.length > 0 ? aktuellePerioder[0] : undefined;\n}\n\nfunction getPeriodeMedUgyldigTidsperiode(perioder: Periode[]) {\n    return perioder.filter(\n        (periode) =>\n            isValidTidsperiode(periode.tidsperiode) === false &&\n            isForeldrepengerFørFødselUttaksperiode(periode) === false\n    );\n}\n\nfunction getFørsteUttaksdag(perioder: Periode[]): Date | undefined {\n    const førstePeriode = perioder\n        .filter((p) => p.tidsperiode.fom !== undefined)\n        .sort(sorterPerioder)\n        .shift();\n    if (førstePeriode) {\n        return førstePeriode.tidsperiode.fom;\n    }\n    return undefined;\n}\n\nfunction getFørsteUttaksdagEksluderInfoperioderOgFrittUttak(perioder: Periode[]): Date | undefined {\n    const førstePeriode = perioder\n        .filter(\n            (p) =>\n                p.tidsperiode.fom !== undefined &&\n                !isInfoPeriode(p) &&\n                !isPeriodeUtenUttak(p) &&\n                !isPeriodeUtenUttakUtsettelse(p)\n        )\n        .sort(sorterPerioder)\n        .shift();\n    if (førstePeriode) {\n        return førstePeriode.tidsperiode.fom;\n    }\n    return undefined;\n}\n\nfunction getAntallUttaksdager(perioder: Periode[]): number {\n    return perioder.reduce((dager, periode) => {\n        return dager + Perioden(periode).getAntallUttaksdager();\n    }, 0);\n}\n\nfunction getAntallFeriedager(perioder: Periode[], forelder?: Forelder): number {\n    return getFerieUtsettelser(perioder)\n        .filter((p) => (isValidTidsperiode(p.tidsperiode) && forelder ? p.forelder === forelder : true))\n        .map((p) => Tidsperioden(p.tidsperiode).getAntallUttaksdager())\n        .reduce((tot, curr) => tot + curr, 0);\n}\n\nfunction getPerioderMedFerieForForelder(perioder: Periode[], forelder: Forelder): Periode[] {\n    return perioder.filter((periode) => erPeriodeMedFerieForForelder(periode, forelder));\n}\n\nfunction getForeldrepengerFørTermin(perioder: Periode[]): ForeldrepengerFørFødselUttaksperiode | undefined {\n    const periode: Periode | undefined = perioder.find(\n        (p) => isUttaksperiode(p) && p.konto === StønadskontoType.ForeldrepengerFørFødsel\n    );\n    return periode ? (periode as ForeldrepengerFørFødselUttaksperiode) : undefined;\n}\n\nfunction getFørsteUttaksdagEtterSistePeriode(perioder: Periode[]): Date | undefined {\n    if (perioder.length === 0) {\n        return undefined;\n    }\n    return Uttaksdagen(perioder[perioder.length - 1].tidsperiode.tom).neste();\n}\n\nexport const erPeriodeMedFerieForForelder = (periode: Periode, forelder: Forelder): boolean => {\n    return isUtsettelsePgaFerie(periode) && periode.forelder === forelder;\n};\n\nfunction finnSisteInfoperiode(perioder: Periode[]) {\n    return perioder\n        .filter((p) => isInfoPeriode(p))\n        .sort(sorterPerioder)\n        .reverse()[0];\n}\n\nexport const getSeneEndringerSomKreverBegrunnelse = (uttaksplan: Periode[]): SenEndringÅrsak => {\n    const utsettelsesPerioder = uttaksplan.filter(erUtsettelse) as Utsettelsesperiode[];\n    const utsettelseSykdomKreverBegrunnelse = utsettelsesPerioder.some(erUtsettelsePgaSykdom);\n    const uttakSykdomKreverBegrunnelse = uttaksplan.some(erUttakGrunnetSykdom);\n    const utsettelseSykdomKreverBegrunnelsePgaSøktSent = utsettelsesPerioder\n        .filter(erUtsettelseTilbakeITid)\n        .some(erUtsettelsePgaSykdom);\n    const uttakSykdomKreverBegrunnelsePgaSøktSent = uttaksplan.filter(erUttakTilbakeITid).some(erUttakGrunnetSykdom);\n    const utsettelseArbeidKreverBegrunnelsePgaSøktSent = utsettelsesPerioder\n        .filter(erUtsettelseTilbakeITid)\n        .some(erUtsettelseGrunnetPgaArbeid);\n    const uttakKreverBegrunnelsePgaSøktSent = uttaksplan.some(erUttakEllerOppholdMerEnnTreMånederSiden);\n\n    if (utsettelseArbeidKreverBegrunnelsePgaSøktSent) {\n        return uttakKreverBegrunnelsePgaSøktSent ? SenEndringÅrsak.ArbeidOgUttak : SenEndringÅrsak.Arbeid;\n    }\n\n    if (\n        utsettelseSykdomKreverBegrunnelse ||\n        utsettelseSykdomKreverBegrunnelsePgaSøktSent ||\n        uttakSykdomKreverBegrunnelsePgaSøktSent ||\n        uttakSykdomKreverBegrunnelse\n    ) {\n        return uttakKreverBegrunnelsePgaSøktSent ? SenEndringÅrsak.SykdomOgUttak : SenEndringÅrsak.Sykdom;\n    }\n\n    return uttakKreverBegrunnelsePgaSøktSent ? SenEndringÅrsak.Uttak : SenEndringÅrsak.Ingen;\n};\n\nexport const uttaksplanErBareOpphold = (perioder: Periode[]): boolean => {\n    const perioderUtenInfoPerioder = perioder.filter((p) => !isInfoPeriode(p));\n\n    if (perioderUtenInfoPerioder.length === 0) {\n        return false;\n    }\n\n    return perioderUtenInfoPerioder.every((periode) => periode.type === Periodetype.Opphold);\n};\n\nexport const uttaksplanSlutterMedOpphold = (perioder: Periode[]): boolean => {\n    return (\n        perioder\n            .filter((p) => !isInfoPeriode(p))\n            .slice()\n            .reverse()\n            .findIndex((periode) => periode.type === Periodetype.Opphold) === 0\n    );\n};\n\nexport const uttaksplanStarterMedOpphold = (perioder: Periode[]): boolean => {\n    return perioder.filter((p) => !isInfoPeriode(p)).findIndex((periode) => periode.type === Periodetype.Opphold) === 0;\n};\n\nexport const getSumUttaksdagerÅTrekkeIPeriodene = (perioder: Periode[]) => {\n    return Math.floor(perioder.map((p) => finnAntallDagerÅTrekke(p)).reduce((prev, curr) => prev + curr, 0));\n};\n"],"names":["SenEndringÅrsak","Periodene","perioder","id","getPeriode","getOpphold","getUttaksperioder","getOverføringer","getHull","getHullOgInfoOgPerioderUtenUttak","getInfoperioder","getUtsettelser","dato","getPerioderEtterFamiliehendelsesdato","getPerioderFørFamiliehendelsesdato","getPeriodeMedUgyldigTidsperiode","forelder","getPerioderMedFerieForForelder","getFørstePeriodeEtterFamiliehendelsesdato","getForeldrepengerFørTermin","getFørsteUttaksdag","getFørsteUttaksdagEtterSistePeriode","getFørsteUttaksdagEksluderInfoperioderOgFrittUttak","getAntallUttaksdager","getAntallFeriedager","periode","finnOverlappendePerioder","finnPeriodeMedDato","finnFørstePeriodeEtterDato","finnPerioderFørPeriode","finnPerioderEtterPeriode","finnForrigePeriode","finnPåfølgendePeriode","uttaksdager","forskyvPerioder","sorterPerioder","finnSisteInfoperiode","p1","p2","isValidTidsperiode","isForeldrepengerFørFødselUttaksperiode","dayjs","isInfoPeriode","Tidsperioden","p","isUttaksperiode","isUtsettelsesperiode","getFerieUtsettelser","isUtsettelsePgaFerie","isOverføringsperiode","isHull","isPeriodeUtenUttak","isOppholdsperiode","fom","tom","fomEllerTomErInnenforTidsperiode","datoErInnenforTidsperiode","fomTomOmkranserTidsperiode","foregåendePerioder","påfølgendePerioder","uttaksdagerCurrent","result","dagerIPerioden","Perioden","isPeriodeUtenUttakUtsettelse","forskyvetStartdato","Uttaksdagen","justertPeriode","forskyvPeriode","familiehendelsesdato","aktuellePerioder","førstePeriode","dager","tot","curr","erPeriodeMedFerieForForelder","StønadskontoType","getSeneEndringerSomKreverBegrunnelse","uttaksplan","utsettelsesPerioder","erUtsettelse","utsettelseSykdomKreverBegrunnelse","erUtsettelsePgaSykdom","uttakSykdomKreverBegrunnelse","erUttakGrunnetSykdom","utsettelseSykdomKreverBegrunnelsePgaSøktSent","erUtsettelseTilbakeITid","uttakSykdomKreverBegrunnelsePgaSøktSent","erUttakTilbakeITid","utsettelseArbeidKreverBegrunnelsePgaSøktSent","erUtsettelseGrunnetPgaArbeid","uttakKreverBegrunnelsePgaSøktSent","erUttakEllerOppholdMerEnnTreMånederSiden","uttaksplanErBareOpphold","perioderUtenInfoPerioder","Periodetype","uttaksplanSlutterMedOpphold","uttaksplanStarterMedOpphold","getSumUttaksdagerÅTrekkeIPeriodene","finnAntallDagerÅTrekke","prev"],"mappings":"ySAAY,IAAAA,GAAAA,IACRA,EAAA,OAAW,SACXA,EAAA,MAAU,QACVA,EAAA,cAAkB,kBAClBA,EAAA,iBAAqB,4BACrBA,EAAA,kBAAsB,6BACtBA,EAAA,OAAW,SACXA,EAAA,cAAkB,kBAClBA,EAAA,MAAU,QARFA,IAAAA,GAAA,CAAA,CAAA,ECwCC,MAAAC,GAAaC,IAAyB,CAC/C,WAAaC,GAAeC,EAAWF,EAAUC,CAAE,EACnD,WAAY,IAAME,EAAWH,CAAQ,EACrC,SAAU,IAAMI,EAAkBJ,CAAQ,EAC1C,gBAAiB,IAAMK,EAAgBL,CAAQ,EAC/C,QAAS,IAAMM,EAAQN,CAAQ,EAC/B,iCAAkC,IAAMO,EAAiCP,CAAQ,EACjF,gBAAiB,IAAMQ,EAAgBR,CAAQ,EAC/C,eAAgB,IAAMS,EAAeT,CAAQ,EAC7C,qCAAuCU,GAAeC,EAAqCX,EAAUU,CAAI,EACzG,mCAAqCA,GAAeE,GAAmCZ,EAAUU,CAAI,EACrG,iCAAkC,IAAMG,GAAgCb,CAAQ,EAChF,+BAAiCc,GAAuBC,GAA+Bf,EAAUc,CAAQ,EACzG,2CAA6CJ,GACzCM,GAA0ChB,EAAUU,CAAI,EAC5D,2BAA4B,IAAMO,GAA2BjB,CAAQ,EACrE,mBAAoB,IAAMkB,GAAmBlB,CAAQ,EACrD,oCAAqC,IAAMmB,GAAoCnB,CAAQ,EACvF,mDAAoD,IAChDoB,GAAmDpB,CAAQ,EAC/D,qBAAsB,IAAMqB,GAAqBrB,CAAQ,EACzD,oBAAsBc,GAAwBQ,GAAoBtB,EAAUc,CAAQ,EACpF,yBAA2BS,GAAqBC,EAAyBxB,EAAUuB,CAAO,EAC1F,mBAAqBb,GAAee,EAAmBzB,EAAUU,CAAI,EACrE,2BAA6BA,GAAegB,EAA2B1B,EAAUU,CAAI,EACrF,2BAA6Ba,GAAqBI,EAAuB3B,EAAUuB,CAAO,EAC1F,2BAA6BA,GAAqBK,EAAyB5B,EAAUuB,CAAO,EAC5F,0BAA4BA,GAAqBM,EAAmB7B,EAAUuB,CAAO,EACrF,sBAAwBA,GAAqBO,EAAsB9B,EAAUuB,CAAO,EACpF,gBAAkBQ,GAAwBC,EAAgBhC,EAAU+B,CAAW,EAC/E,KAAM,IAAM,CAAC,GAAG/B,CAAQ,EAAE,KAAKiC,CAAc,EAC7C,qBAAsB,IAAMC,GAAqBlC,CAAQ,CAC7D,GAEgB,SAAAiC,EAAeE,EAAaC,EAAa,CACjD,OAAAC,EAAmBF,EAAG,WAAW,IAAM,IAASE,EAAmBD,EAAG,WAAW,IAAM,GACnFE,EAAuCH,CAAE,GAAKA,EAAG,yBAC1C,GAEJE,EAAmBF,EAAG,WAAW,EAAI,EAAI,GAEhDI,EAAMJ,EAAG,YAAY,GAAG,EAAE,OAAOC,EAAG,YAAY,IAAK,KAAK,EACnDI,EAAcL,CAAE,EAAI,GAAK,EAGhCM,EAAaL,EAAG,WAAW,EAAE,cAAcD,EAAG,WAAW,EAClD,EAGJI,EAAMJ,EAAG,YAAY,GAAG,EAAE,SAASC,EAAG,YAAY,IAAK,KAAK,EAAI,GAAK,CAChF,CAEA,SAASlC,EAAWF,EAAqBC,EAAiC,CACtE,OAAOD,EAAS,KAAM0C,GAAMA,EAAE,KAAOzC,CAAE,CAC3C,CAEA,SAASG,EAAkBJ,EAAsC,CAC7D,OAAOA,EAAS,OAAQuB,GAAYoB,EAAgBpB,CAAO,CAAC,CAChE,CAEA,SAASd,EAAeT,EAA2C,CAC/D,OAAOA,EAAS,OAAQuB,GAAYqB,EAAqBrB,CAAO,CAAC,CACrE,CAEA,SAASsB,EAAoB7C,EAA2C,CACpE,OAAOA,EAAS,OAAQuB,GAAYuB,EAAqBvB,CAAO,CAAC,CACrE,CAEA,SAASlB,EAAgBL,EAA2C,CAChE,OAAOA,EAAS,OAAQuB,GAAYwB,EAAqBxB,CAAO,CAAC,CACrE,CAEA,SAASjB,EAAQN,EAAoC,CACjD,OAAOA,EAAS,OAAQuB,GAAYyB,EAAOzB,CAAO,CAAC,CACvD,CAEA,SAAShB,EAAiCP,EAA0E,CAChH,OAAOA,EAAS,OACXuB,GAAYyB,EAAOzB,CAAO,GAAKiB,EAAcjB,CAAO,GAAK0B,EAAmB1B,CAAO,CAAA,CAE5F,CAEA,SAASf,EAAgBR,EAAoC,CACzD,OAAOA,EAAS,OAAQuB,GAAYiB,EAAcjB,CAAO,CAAC,CAC9D,CAEA,SAASpB,EAAWH,EAAwC,CACxD,OAAOA,EAAS,OAAQuB,GAAY2B,EAAkB3B,CAAO,CAAC,CAClE,CAEA,SAASC,EAAyBxB,EAAqBuB,EAA6B,CACzE,OAAAvB,EAAS,OAAQ0C,GAAM,CACtB,GAAAA,EAAE,KAAOnB,EAAQ,IAAM,CAACc,EAAmBd,EAAQ,WAAW,EACvD,MAAA,GAEX,KAAM,CAAE,IAAA4B,EAAK,IAAAC,GAAQV,EAAE,YACnB,GAAA,CAACS,GAAO,CAACC,EACF,MAAA,GAEL,MAAAC,EACFC,EAA0BH,EAAK5B,EAAQ,WAAW,GAAK+B,EAA0BF,EAAK7B,EAAQ,WAAW,EAEvGgC,EACFhB,EAAMhB,EAAQ,YAAY,GAAG,EAAE,cAAc4B,EAAK,KAAK,GACvDZ,EAAMhB,EAAQ,YAAY,GAAG,EAAE,eAAe6B,EAAK,KAAK,EAE5D,OAAOC,GAAoCE,CAAA,CAC9C,CACL,CAEA,SAAS9B,EAAmBzB,EAAqBU,EAAiC,CACvE,OAAAV,EAAS,KAAMuB,GACXgB,EAAM7B,CAAI,EAAE,UAAUa,EAAQ,YAAY,IAAKA,EAAQ,YAAY,IAAK,MAAO,IAAI,CAC7F,CACL,CAEA,SAASG,EAA2B1B,EAAqBU,EAAiC,CAC/E,OAAAV,EAAS,KAAMuB,GACXgB,EAAMhB,EAAQ,YAAY,GAAG,EAAE,QAAQb,EAAM,KAAK,CAC5D,CACL,CAEA,SAASiB,EAAuB3B,EAAqBuB,EAA6B,CAC9E,OAAOvB,EAAS,OAAQ0C,GAAMH,EAAMG,EAAE,YAAY,GAAG,EAAE,SAASnB,EAAQ,YAAY,IAAK,KAAK,CAAC,CACnG,CAEA,SAASK,EAAyB5B,EAAqBuB,EAA6B,CAChF,OAAOvB,EAAS,OAAQ0C,GAAMH,EAAMG,EAAE,YAAY,GAAG,EAAE,QAAQnB,EAAQ,YAAY,IAAK,KAAK,CAAC,CAClG,CAEA,SAASM,EAAmB7B,EAAqBuB,EAAuC,CAC9E,MAAAiC,EAAqB7B,EAAuB3B,EAAUuB,CAAO,EAC/D,GAAAiC,EAAmB,OAAS,EAC5B,OAAOA,EAAmB,KAGlC,CACA,SAAS1B,EAAsB9B,EAAqBuB,EAAuC,CACjF,MAAAkC,EAAqB7B,EAAyB5B,EAAUuB,CAAO,EACjE,GAAAkC,EAAmB,OAAS,EAC5B,OAAOA,EAAmB,CAAC,CAGnC,CACA,SAASzB,EAAgBhC,EAAqB+B,EAAgC,CAC1E,IAAI2B,EAAqB3B,EAEzB,OAAO/B,EAAS,OAAO,CAAC2D,EAAmBpC,IAAqB,CACxD,GAAAqB,EAAqBrB,CAAO,EAAG,CAC/BoC,EAAO,KAAKpC,CAAO,EAEnB,MAAMqC,EAAiBC,EAAStC,CAAO,EAAE,qBAAqB,EAE9D,OAAIqC,GAAkBF,EACGA,EAAA,EAECA,GAAAE,EAGnBD,EAIP,GAAAnB,EAAcjB,CAAO,GACrByB,EAAOzB,CAAO,GACd0B,EAAmB1B,CAAO,GAC1BuC,EAA6BvC,CAAO,EACtC,CACE,MAAMqC,EAAiBC,EAAStC,CAAO,EAAE,qBAAqB,EAE9D,GAAIqC,EAAiBF,EAAoB,CAC/B,MAAAK,EAAqBC,EAAYA,EAAYzC,EAAQ,YAAY,GAAG,EAAE,gBAAiB,CAAA,EAAE,QAC3FmC,CAAA,EAEEO,EAA0B,CAC5B,GAAG1C,EACH,YAAa,CACT,IAAKwC,EACL,IAAKxC,EAAQ,YAAY,GAC7B,CAAA,EAGiB,OAAAmC,EAAA,EAErBC,EAAO,KAAKM,CAAc,EACnBN,MACX,QAAWC,IAAmBF,GACLA,EAAA,EACdC,IAEeD,GAAAE,EACfD,GAIf,OAAAA,EAAO,KAAKO,GAAe3C,EAASmC,CAAkB,CAAC,EAChDC,CACX,EAAG,CAAE,CAAA,CACT,CAEA,SAASO,GAAe3C,EAAkBQ,EAA8B,CACpE,GAAIA,IAAgB,EACT,OAAAR,EAGL,MAAAwC,EAAqBC,EAAYA,EAAYzC,EAAQ,YAAY,GAAG,EAAE,gBAAiB,CAAA,EAAE,QAAQQ,CAAW,EAClH,OAAO8B,EAAStC,CAAO,EAAE,aAAawC,CAAkB,CAC5D,CAEA,SAASnD,GAAmCZ,EAAqBmE,EAA4B,CACzF,OAAOnE,EAAS,OACXuB,GACGe,EAAuCf,CAAO,GAC7Cc,EAAmBd,EAAQ,WAAW,GACnCgB,EAAMhB,EAAQ,YAAY,GAAG,EAAE,SAAS4C,EAAsB,KAAK,CAAA,CAEnF,CAEA,SAASxD,EAAqCX,EAAqBmE,EAA4B,CAC3F,OAAOnE,EAAS,OACXuB,GACGc,EAAmBd,EAAQ,WAAW,GACtCgB,EAAMhB,EAAQ,YAAY,GAAG,EAAE,cAAc4C,EAAsB,KAAK,GACxE7B,EAAuCf,CAAO,IAAM,EAAA,CAEhE,CAEA,SAASP,GACLhB,EACAmE,EACmB,CACnB,MAAMC,EAAmBzD,EAAqCX,EAAUmE,CAAoB,EAAE,KAAKlC,CAAc,EACjH,OAAOmC,EAAiB,OAAS,EAAIA,EAAiB,CAAC,EAAI,MAC/D,CAEA,SAASvD,GAAgCb,EAAqB,CAC1D,OAAOA,EAAS,OACXuB,GACGc,EAAmBd,EAAQ,WAAW,IAAM,IAC5Ce,EAAuCf,CAAO,IAAM,EAAA,CAEhE,CAEA,SAASL,GAAmBlB,EAAuC,CAC/D,MAAMqE,EAAgBrE,EACjB,OAAQ0C,GAAMA,EAAE,YAAY,MAAQ,MAAS,EAC7C,KAAKT,CAAc,EACnB,MAAM,EACX,GAAIoC,EACA,OAAOA,EAAc,YAAY,GAGzC,CAEA,SAASjD,GAAmDpB,EAAuC,CAC/F,MAAMqE,EAAgBrE,EACjB,OACI0C,GACGA,EAAE,YAAY,MAAQ,QACtB,CAACF,EAAcE,CAAC,GAChB,CAACO,EAAmBP,CAAC,GACrB,CAACoB,EAA6BpB,CAAC,CAEtC,EAAA,KAAKT,CAAc,EACnB,QACL,GAAIoC,EACA,OAAOA,EAAc,YAAY,GAGzC,CAEA,SAAShD,GAAqBrB,EAA6B,CACvD,OAAOA,EAAS,OAAO,CAACsE,EAAO/C,IACpB+C,EAAQT,EAAStC,CAAO,EAAE,qBAAqB,EACvD,CAAC,CACR,CAEA,SAASD,GAAoBtB,EAAqBc,EAA6B,CAC3E,OAAO+B,EAAoB7C,CAAQ,EAC9B,OAAQ0C,GAAOL,EAAmBK,EAAE,WAAW,GAAK5B,EAAW4B,EAAE,WAAa5B,EAAW,EAAK,EAC9F,IAAK4B,GAAMD,EAAaC,EAAE,WAAW,EAAE,qBAAsB,CAAA,EAC7D,OAAO,CAAC6B,EAAKC,IAASD,EAAMC,EAAM,CAAC,CAC5C,CAEA,SAASzD,GAA+Bf,EAAqBc,EAA+B,CACxF,OAAOd,EAAS,OAAQuB,GAAYkD,GAA6BlD,EAAST,CAAQ,CAAC,CACvF,CAEA,SAASG,GAA2BjB,EAAuE,CACvG,MAAMuB,EAA+BvB,EAAS,KACzC0C,GAAMC,EAAgBD,CAAC,GAAKA,EAAE,QAAUgC,EAAiB,uBAAA,EAE9D,OAAOnD,GAA8D,MACzE,CAEA,SAASJ,GAAoCnB,EAAuC,CAC5E,GAAAA,EAAS,SAAW,EAGjB,OAAAgE,EAAYhE,EAASA,EAAS,OAAS,CAAC,EAAE,YAAY,GAAG,EAAE,OACtE,CAEa,MAAAyE,GAA+B,CAAClD,EAAkBT,IACpDgC,EAAqBvB,CAAO,GAAKA,EAAQ,WAAaT,EAGjE,SAASoB,GAAqBlC,EAAqB,CAC/C,OAAOA,EACF,OAAQ0C,GAAMF,EAAcE,CAAC,CAAC,EAC9B,KAAKT,CAAc,EACnB,UAAU,CAAC,CACpB,CAEa,MAAA0C,GAAwCC,GAA2C,CACtF,MAAAC,EAAsBD,EAAW,OAAOE,CAAY,EACpDC,EAAoCF,EAAoB,KAAKG,CAAqB,EAClFC,EAA+BL,EAAW,KAAKM,CAAoB,EACnEC,EAA+CN,EAChD,OAAOO,CAAuB,EAC9B,KAAKJ,CAAqB,EACzBK,EAA0CT,EAAW,OAAOU,CAAkB,EAAE,KAAKJ,CAAoB,EACzGK,EAA+CV,EAChD,OAAOO,CAAuB,EAC9B,KAAKI,CAA4B,EAChCC,EAAoCb,EAAW,KAAKc,CAAwC,EAElG,OAAIH,EACOE,EAAoC3F,EAAgB,cAAgBA,EAAgB,OAI3FiF,GACAI,GACAE,GACAJ,EAEOQ,EAAoC3F,EAAgB,cAAgBA,EAAgB,OAGxF2F,EAAoC3F,EAAgB,MAAQA,EAAgB,KACvF,EAEa6F,GAA2B3F,GAAiC,CAC/D,MAAA4F,EAA2B5F,EAAS,OAAQ0C,GAAM,CAACF,EAAcE,CAAC,CAAC,EAErE,OAAAkD,EAAyB,SAAW,EAC7B,GAGJA,EAAyB,MAAOrE,GAAYA,EAAQ,OAASsE,EAAY,OAAO,CAC3F,EAEaC,GAA+B9F,GAEpCA,EACK,OAAQ0C,GAAM,CAACF,EAAcE,CAAC,CAAC,EAC/B,QACA,QAAQ,EACR,UAAWnB,GAAYA,EAAQ,OAASsE,EAAY,OAAO,IAAM,EAIjEE,GAA+B/F,GACjCA,EAAS,OAAQ0C,GAAM,CAACF,EAAcE,CAAC,CAAC,EAAE,UAAWnB,GAAYA,EAAQ,OAASsE,EAAY,OAAO,IAAM,EAGzGG,GAAsChG,GACxC,KAAK,MAAMA,EAAS,IAAK0C,GAAMuD,EAAuBvD,CAAC,CAAC,EAAE,OAAO,CAACwD,EAAM1B,IAAS0B,EAAO1B,EAAM,CAAC,CAAC"}