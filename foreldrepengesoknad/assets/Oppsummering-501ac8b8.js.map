{"version":3,"file":"Oppsummering-501ac8b8.js","sources":["../../../../packages/api/src/useAbortSignal.ts","../../../../packages/api/src/attachmentApi.ts","../../src/app/steps/oppsummering/components/OppsummeringsPunkt.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/InnholdMedLedetekst.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/kompleks-feltoppsummering/KompleksFeltoppsummering.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/oppsummering-av-dokumentasjon/OppsummeringAvDokumentasjon.tsx","../../src/app/steps/oppsummering/components/annen-forelder-oppsummering/AnnenForelderOppsummering.tsx","../../src/app/steps/oppsummering/components/barn-oppsummering/BarnAdoptertIUtlandetDetaljer.tsx","../../src/app/steps/oppsummering/components/barn-oppsummering/BarnOppsummering.tsx","../../src/app/steps/oppsummering/components/OppsummeringsPanel.tsx","../../src/app/steps/oppsummering/components/Personalia.tsx","../../src/app/steps/oppsummering/components/utenlandsopphold-oppsummering/UtenlandsoppholdOppsummeringListe.tsx","../../src/app/steps/oppsummering/components/utenlandsopphold-oppsummering/UtenlandsoppholdOppsummering.tsx","../../src/app/steps/oppsummering/oppsummeringFormConfig.ts","../../src/app/steps/oppsummering/validation/oppsummeringValidation.ts","../../src/app/steps/oppsummering/components/andre-inntekter-oppsummering/AnnenInntektDetaljer.tsx","../../src/app/steps/oppsummering/components/andre-inntekter-oppsummering/InntekterTabell.tsx","../../src/app/steps/oppsummering/components/andre-inntekter-oppsummering/AndreInntekterOppsummering.tsx","../../src/app/steps/oppsummering/components/andre-inntekter-oppsummering/FrilansOppsummering.tsx","../../src/app/steps/oppsummering/components/andre-inntekter-oppsummering/Næringsdetaljer.tsx","../../src/app/steps/oppsummering/components/andre-inntekter-oppsummering/SelvstendigNæringsdrivendeOppsummering.tsx","../../src/app/steps/oppsummering/components/andre-inntekter-oppsummering/ArbeidsforholdOgAndreInntekterOppsummering.tsx","../../src/app/utils/tilleggsopplysningerUtils.ts","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/feltoppsummering/Feltoppsummering.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/oppsummeringsliste/list/List.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/oppsummeringsliste/Oppsummeringsliste.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/OppsummeringUtils.ts","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/detaljer/Overføringsperiodedetaljer.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/detaljer/MorsaktiviteterDetaljer.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/detaljer/Uttaksperiodedetaljer.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/detaljer/Uttsettelsesperiodedetaljer.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/UttaksplanOppsummeringsliste.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/UttaksplanOppsummering.tsx","../../src/app/steps/oppsummering/Oppsummering.tsx"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\nconst useAbortSignal = () => {\n    const controller = useRef<AbortController>(new AbortController());\n\n    useEffect(() => {\n        return () => {\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            controller.current.abort();\n        };\n    }, []);\n\n    return controller.current.signal;\n};\n\nexport default useAbortSignal;\n","import axios from 'axios';\nimport { Attachment } from '@navikt/fp-types';\n\nexport const attachmentApi = axios.create();\n\nconst getSaveAttachment =\n    (restApiUrl: string, type: 'foreldrepenger' | 'svangerskapspenger' | 'engangsstonad') =>\n    (attachment: Attachment) => {\n        const config = {\n            withCredentials: true,\n            timeout: 45 * 1000,\n            headers: {\n                'content-type': 'multipart/form-data',\n            },\n        };\n\n        const formData = new FormData();\n        formData.append('id', attachment.id);\n        formData.append('vedlegg', attachment.file, attachment.filename);\n\n        const url = `${restApiUrl}/storage/${type}/vedlegg`;\n        return attachmentApi.post(url, formData, config);\n    };\n\nexport default getSaveAttachment;\n","import { Label } from '@navikt/ds-react';\nimport { Block } from '@navikt/fp-common';\nimport { FunctionComponent, ReactNode } from 'react';\n\ninterface Props {\n    title: string;\n    visible?: boolean;\n    children?: ReactNode;\n}\n\nconst OppsummeringsPunkt: FunctionComponent<Props> = ({ title, visible, children }) => {\n    return (\n        <Block padBottom=\"l\" visible={visible}>\n            <Label>{title}</Label>\n            {children}\n        </Block>\n    );\n};\n\nexport default OppsummeringsPunkt;\n","import * as React from 'react';\nimport { BodyShort, Label } from '@navikt/ds-react';\nimport { guid } from '@navikt/fp-common';\n\ninterface InnholdMedLedetekstProps {\n    ledetekst: string;\n    children: JSX.Element | JSX.Element[];\n    className?: string;\n}\n\nconst hasListOfChildren = (children: string | string[]): boolean => Array.isArray(children);\n\nconst InnholdMedLedetekst: React.FunctionComponent<InnholdMedLedetekstProps> = ({ ledetekst, children, className }) => {\n    return (\n        <div className={className}>\n            <Label>{ledetekst}</Label>\n            {!Array.isArray(children) && hasListOfChildren((children as JSX.Element).props.children)\n                ? (children as JSX.Element).props.children.map((child: string) => (\n                      <BodyShort className=\"feltoppsummering__verdi\" key={guid()}>\n                          {child}\n                      </BodyShort>\n                  ))\n                : children}\n        </div>\n    );\n};\n\nexport default InnholdMedLedetekst;\n","import * as React from 'react';\nimport InnholdMedLedetekst from '../InnholdMedLedetekst';\n\ninterface Props {\n    className?: string;\n    ledetekst: string;\n    children: JSX.Element | JSX.Element[];\n}\n\nconst KompleksFeltoppsummering: React.FunctionComponent<Props> = ({ ledetekst, children, className }) => (\n    <InnholdMedLedetekst className={`feltoppsummering ${className}`} ledetekst={ledetekst}>\n        {children}\n    </InnholdMedLedetekst>\n);\n\nexport default KompleksFeltoppsummering;\n","import { Attachment, intlUtils, isAttachmentWithError } from '@navikt/fp-common';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport KompleksFeltoppsummering from '../kompleks-feltoppsummering/KompleksFeltoppsummering';\nimport { Link, Tag } from '@navikt/ds-react';\n\nimport './oppsummeringAvDokumentasjon.less';\n\ninterface OppsummeringAvDokumentasjonProps {\n    ledetekst?: string;\n    vedlegg: Attachment[];\n}\n\ntype Props = OppsummeringAvDokumentasjonProps;\n\nconst OppsummeringAvDokumentasjon: React.FunctionComponent<Props> = (props) => {\n    const { ledetekst, vedlegg } = props;\n    const intl = useIntl();\n\n    const renderListOfAttachmentPreviewLinks = () => {\n        return vedlegg\n            .filter((a: Attachment) => !isAttachmentWithError(a))\n            .map(({ url, id, filename }) => (\n                <Link href={url!} key={id} target=\"_blank\">\n                    {filename}\n                </Link>\n            ));\n    };\n\n    return (\n        <KompleksFeltoppsummering\n            className=\"oppsummeringAvDokumentasjon\"\n            ledetekst={ledetekst || intlUtils(intl, 'vedlagtdokumentasjon')}\n        >\n            {vedlegg && vedlegg.filter((a: Attachment) => !isAttachmentWithError(a)).length > 0 ? (\n                <div>{renderListOfAttachmentPreviewLinks()}</div>\n            ) : (\n                <div>\n                    <Tag variant=\"warning\">{intlUtils(intl, 'oppsummering.andreInntekter.dokumentasjon.mangler')}</Tag>\n                </div>\n            )}\n        </KompleksFeltoppsummering>\n    );\n};\n\nexport default OppsummeringAvDokumentasjon;\n","import {\n    AnnenForelder,\n    Barn,\n    Søkerrolle,\n    intlUtils,\n    isAnnenForelderIkkeOppgitt,\n    isAnnenForelderOppgitt,\n    isFarEllerMedmor,\n} from '@navikt/fp-common';\nimport Søker from 'app/context/types/Søker';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport OppsummeringAvDokumentasjon from '../uttaksplan-oppsummering/oppsummering-av-dokumentasjon/OppsummeringAvDokumentasjon';\nimport { BodyShort } from '@navikt/ds-react';\n\ninterface Props {\n    annenForelder: AnnenForelder;\n    søker: Søker;\n    søkerrolle: Søkerrolle;\n    barn: Barn;\n    farMedmorErAleneOmOmsorg: boolean;\n}\n\nconst AnnenForelderOppsummering: FunctionComponent<Props> = ({\n    annenForelder,\n    søker,\n    søkerrolle,\n    barn,\n    farMedmorErAleneOmOmsorg,\n}) => {\n    const intl = useIntl();\n    const erFarEllerMedmor = isFarEllerMedmor(søkerrolle);\n    const { dokumentasjonAvAleneomsorg } = barn;\n\n    return (\n        <>\n            {isAnnenForelderIkkeOppgitt(annenForelder) && (\n                <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.annenForelder.ikkeOppgitt')} />\n            )}\n            {isAnnenForelderOppgitt(annenForelder) && (\n                <>\n                    <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.annenForelder.navn')}>\n                        <BodyShort>{`${annenForelder.fornavn} ${annenForelder.etternavn}`}</BodyShort>\n                    </OppsummeringsPunkt>\n                    <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.annenForelder.fnr')}>\n                        <BodyShort>{annenForelder.fnr}</BodyShort>\n                    </OppsummeringsPunkt>\n                    <OppsummeringsPunkt\n                        title={\n                            !søker.erAleneOmOmsorg\n                                ? intlUtils(intl, 'oppsummering.annenForelder.fellesOmsorg.tittel')\n                                : intlUtils(intl, 'oppsummering.annenForelder.aleneOmOmsorg.tittel')\n                        }\n                    >\n                        <BodyShort>\n                            <FormattedMessage\n                                id={\n                                    !søker.erAleneOmOmsorg\n                                        ? 'oppsummering.annenForelder.fellesOmsorg.tekst'\n                                        : 'oppsummering.annenForelder.aleneOmOmsorg.tekst'\n                                }\n                            />\n                        </BodyShort>\n                    </OppsummeringsPunkt>\n                    {!søker.erAleneOmOmsorg && (\n                        <OppsummeringsPunkt\n                            title={intlUtils(intl, 'oppsummering.annenForelder.rettPåForeldrepengerINorge', {\n                                navn: annenForelder.fornavn,\n                            })}\n                        >\n                            <BodyShort>\n                                <FormattedMessage id={annenForelder.harRettPåForeldrepengerINorge ? 'ja' : 'nei'} />\n                            </BodyShort>\n                        </OppsummeringsPunkt>\n                    )}\n                    {!søker.erAleneOmOmsorg && !annenForelder.harRettPåForeldrepengerINorge && (\n                        <OppsummeringsPunkt\n                            title={intlUtils(intl, 'oppsummering.annenForelder.harOppholdtSegIEØS', {\n                                navn: annenForelder.fornavn,\n                            })}\n                        >\n                            <BodyShort>\n                                <FormattedMessage id={annenForelder.harOppholdtSegIEØS ? 'ja' : 'nei'} />\n                            </BodyShort>\n                        </OppsummeringsPunkt>\n                    )}\n                    {!søker.erAleneOmOmsorg && annenForelder.harOppholdtSegIEØS === true && (\n                        <OppsummeringsPunkt\n                            title={intlUtils(intl, 'oppsummering.annenForelder.rettPåForeldrepengerIEØS', {\n                                navn: annenForelder.fornavn,\n                            })}\n                        >\n                            <BodyShort>\n                                <FormattedMessage id={annenForelder.harRettPåForeldrepengerIEØS ? 'ja' : 'nei'} />\n                            </BodyShort>\n                        </OppsummeringsPunkt>\n                    )}\n                    {erFarEllerMedmor &&\n                        !søker.erAleneOmOmsorg &&\n                        !annenForelder.harRettPåForeldrepengerINorge &&\n                        !annenForelder.harRettPåForeldrepengerIEØS && (\n                            <OppsummeringsPunkt\n                                title={intlUtils(intl, 'annenForelder.erMorUfør', {\n                                    navn: annenForelder.fornavn,\n                                })}\n                            >\n                                <BodyShort>\n                                    <FormattedMessage id={annenForelder.erUfør ? 'ja' : 'nei'} />\n                                </BodyShort>\n                            </OppsummeringsPunkt>\n                        )}\n                </>\n            )}\n            {farMedmorErAleneOmOmsorg && erFarEllerMedmor && (\n                <OppsummeringAvDokumentasjon\n                    vedlegg={dokumentasjonAvAleneomsorg || []}\n                    ledetekst={intlUtils(intl, 'oppsummering.annenForelder.dokumentasjonAvAleneomsorg')}\n                />\n            )}\n        </>\n    );\n};\n\nexport default AnnenForelderOppsummering;\n","import {\n    AdoptertAnnetBarn,\n    AdoptertStebarn,\n    formatDate,\n    hasValue,\n    intlUtils,\n    isAdoptertStebarn,\n} from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport { BodyShort } from '@navikt/ds-react';\nimport { førsteOktober2021ReglerGjelder } from 'app/utils/dateUtils';\n\ninterface Props {\n    barn: AdoptertAnnetBarn | AdoptertStebarn;\n    familiehendelsesdato: Date;\n}\n\nconst BarnAdoptertIUtlandetDetaljer: FunctionComponent<Props> = ({ barn, familiehendelsesdato }) => {\n    const intl = useIntl();\n\n    if (isAdoptertStebarn(barn) || førsteOktober2021ReglerGjelder(familiehendelsesdato)) {\n        return null;\n    }\n\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.barn.adoptertIUtlandet')}>\n                <BodyShort>\n                    <FormattedMessage id={barn.adoptertIUtlandet ? 'ja' : 'nei'} />\n                </BodyShort>\n            </OppsummeringsPunkt>\n            <OppsummeringsPunkt\n                title={intlUtils(intl, 'oppsummering.barn.ankomstdato')}\n                visible={hasValue(barn.ankomstdato)}\n            >\n                <BodyShort>{formatDate(barn.ankomstdato!)}</BodyShort>\n            </OppsummeringsPunkt>\n        </>\n    );\n};\n\nexport default BarnAdoptertIUtlandetDetaljer;\n","import {\n    Barn,\n    BarnType,\n    formatDate,\n    intlUtils,\n    isAdoptertAnnetBarn,\n    isAdoptertStebarn,\n    isUfødtBarn,\n} from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport BarnAdoptertIUtlandetDetaljer from './BarnAdoptertIUtlandetDetaljer';\nimport { BodyShort } from '@navikt/ds-react';\n\ninterface Props {\n    barn: Barn;\n    familiehendelsesdato: Date;\n}\n\nconst getAntallBarnTekst = (antallBarn: number, intl: IntlShape): string => {\n    if (antallBarn === 1) {\n        return intlUtils(intl, 'oppsummering.barn.antallBarn.ettBarn');\n    }\n\n    if (antallBarn === 2) {\n        return intlUtils(intl, 'oppsummering.barn.antallBarn.toBarn');\n    }\n\n    return intlUtils(intl, 'oppsummering.barn.antallBarn.flere', { antallBarn });\n};\n\nconst getTerminEllerFødselTittel = (type: BarnType) => {\n    if (type === BarnType.UFØDT) {\n        return 'Termin';\n    }\n\n    return 'Fødselsdato';\n};\n\nconst getTerminEllerFødselsdato = (barn: Barn) => {\n    if (isUfødtBarn(barn)) {\n        return formatDate(barn.termindato);\n    }\n\n    return formatDate(barn.fødselsdatoer[0]);\n};\n\nconst BarnOppsummering: FunctionComponent<Props> = ({ barn, familiehendelsesdato }) => {\n    const intl = useIntl();\n\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.barn.søknadenGjelder')}>\n                <BodyShort>{getAntallBarnTekst(barn.antallBarn, intl)}</BodyShort>\n            </OppsummeringsPunkt>\n            <OppsummeringsPunkt title={getTerminEllerFødselTittel(barn.type)}>\n                <BodyShort>{getTerminEllerFødselsdato(barn)}</BodyShort>\n            </OppsummeringsPunkt>\n            {(isAdoptertAnnetBarn(barn) || isAdoptertStebarn(barn)) && (\n                <>\n                    <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.barn.gjelderSøknadenStebarnsadopsjon')}>\n                        <BodyShort>\n                            <FormattedMessage id={barn.type === BarnType.ADOPTERT_STEBARN ? 'ja' : 'nei'} />\n                        </BodyShort>\n                    </OppsummeringsPunkt>\n                    <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.barn.adopsjonsdato')}>\n                        <BodyShort>{formatDate(barn.adopsjonsdato)}</BodyShort>\n                    </OppsummeringsPunkt>\n                    <BarnAdoptertIUtlandetDetaljer barn={barn} familiehendelsesdato={familiehendelsesdato} />\n                </>\n            )}\n        </>\n    );\n};\n\nexport default BarnOppsummering;\n","import { FunctionComponent, ReactNode } from 'react';\nimport { bemUtils } from '@navikt/fp-common';\nimport { Accordion } from '@navikt/ds-react';\n\nimport './oppsummeringsPanel.less';\n\ninterface Props {\n    title: string;\n    children: ReactNode;\n}\n\nconst OppsummeringsPanel: FunctionComponent<Props> = ({ title, children }) => {\n    const bem = bemUtils('oppsummeringsPanel');\n\n    return (\n        <Accordion>\n            <Accordion.Item className={bem.element('specificity')}>\n                <Accordion.Header className={bem.element('header')}>{title}</Accordion.Header>\n                <Accordion.Content>{children}</Accordion.Content>\n            </Accordion.Item>\n        </Accordion>\n    );\n};\n\nexport default OppsummeringsPanel;\n","import { FunctionComponent } from 'react';\nimport { BodyShort } from '@navikt/ds-react';\nimport OppsummeringsPunkt from './OppsummeringsPunkt';\nimport { Søkerinfo } from '@navikt/fp-common';\n\nimport './personalia.less';\n\ninterface Props {\n    søkerinfo: Søkerinfo;\n}\n\nconst Personalia: FunctionComponent<Props> = ({ søkerinfo }) => {\n    return (\n        <OppsummeringsPunkt title={`${søkerinfo.person.fornavn} ${søkerinfo.person.etternavn}`}>\n            <BodyShort>{søkerinfo.person.fnr}</BodyShort>\n        </OppsummeringsPunkt>\n    );\n};\n\nexport default Personalia;\n","import { bemUtils, formatDate, intlUtils } from '@navikt/fp-common';\nimport { Utenlandsopphold } from 'app/context/types/InformasjonOmUtenlandsopphold';\nimport countries from 'i18n-iso-countries';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport './utenlandsoppholdOppsummeringListe.less';\nimport { BodyShort } from '@navikt/ds-react';\nimport dayjs from 'dayjs';\n\nconst sortOpphold = (d1: Utenlandsopphold, d2: Utenlandsopphold) => {\n    return dayjs(d1.tidsperiode.fom).isBefore(d2.tidsperiode.fom, 'day') ? -1 : 1;\n};\n\ninterface Props {\n    utenlandsopphold: Utenlandsopphold[];\n    tidligereOpphold: boolean;\n}\n\nconst UtenlandsoppholdOppsummeringListe: FunctionComponent<Props> = ({ utenlandsopphold, tidligereOpphold }) => {\n    const intl = useIntl();\n    const bem = bemUtils('utenlandsoppholdOppsummeringListe');\n\n    return (\n        <ul className={bem.block}>\n            {[...utenlandsopphold].sort(sortOpphold).map((opphold) => {\n                return (\n                    <li\n                        className={bem.element('listElement')}\n                        key={`${opphold.land}${opphold.tidsperiode.fom}${opphold.tidsperiode.tom}`}\n                    >\n                        <BodyShort>\n                            {tidligereOpphold\n                                ? intlUtils(intl, 'oppsummering.utenlandsopphold.harBoddINorge.utenlands', {\n                                      land: countries.getName(opphold.land, 'nb'),\n                                  })\n                                : intlUtils(intl, 'oppsummering.utenlandsopphold.skalBoINorge.utenlands', {\n                                      land: countries.getName(opphold.land, 'nb'),\n                                  })}\n                        </BodyShort>\n                        <BodyShort>\n                            {formatDate(opphold.tidsperiode.fom)} - {formatDate(opphold.tidsperiode.tom)}\n                        </BodyShort>\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n\nexport default UtenlandsoppholdOppsummeringListe;\n","import { Barn, doesTidsperiodeContainDate, intlUtils, isAdoptertAnnetBarn, isAdoptertStebarn } from '@navikt/fp-common';\nimport { Opphold, Utenlandsopphold } from 'app/context/types/InformasjonOmUtenlandsopphold';\nimport { getFamiliehendelsedato } from 'app/utils/barnUtils';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport UtenlandsoppholdListe from './UtenlandsoppholdOppsummeringListe';\nimport { BodyShort } from '@navikt/ds-react';\n\ninterface Props {\n    utenlandsopphold: Opphold;\n    tidligereUtenlandsopphold?: Utenlandsopphold[];\n    senereUtenlandsopphold?: Utenlandsopphold[];\n    barn: Barn;\n}\n\nconst getErINorgePåFamiliehendelsedato = (\n    familiehendelsedato: string,\n    tidligereOpphold: Utenlandsopphold[],\n    senereOpphold: Utenlandsopphold[],\n): boolean => {\n    let erINorge = true;\n\n    tidligereOpphold.forEach((tidOpphold) => {\n        if (doesTidsperiodeContainDate(tidOpphold.tidsperiode, familiehendelsedato)) {\n            erINorge = false;\n        }\n    });\n\n    senereOpphold.forEach((senOpphold) => {\n        if (doesTidsperiodeContainDate(senOpphold.tidsperiode, familiehendelsedato)) {\n            erINorge = false;\n        }\n    });\n\n    return erINorge;\n};\n\nconst erAdoptertBarn = (barn: Barn): boolean => {\n    return isAdoptertAnnetBarn(barn) || isAdoptertStebarn(barn);\n};\n\nconst EMPTY_ARRAY = [] as Utenlandsopphold[];\n\nconst UtenlandsoppholdOppsummering: FunctionComponent<Props> = ({\n    utenlandsopphold,\n    tidligereUtenlandsopphold = EMPTY_ARRAY,\n    senereUtenlandsopphold = EMPTY_ARRAY,\n    barn,\n}) => {\n    const intl = useIntl();\n    const familiehendelsedato = getFamiliehendelsedato(barn);\n    const erINorgePåFamiliehendelsedato = getErINorgePåFamiliehendelsedato(\n        familiehendelsedato,\n        tidligereUtenlandsopphold,\n        senereUtenlandsopphold,\n    );\n\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.utenlandsopphold.harBoddINorge')}>\n                {utenlandsopphold.iNorgeSiste12Mnd ? (\n                    <BodyShort>{intlUtils(intl, 'oppsummering.utenlandsopphold.harBoddINorge.norge')}</BodyShort>\n                ) : null}\n\n                <UtenlandsoppholdListe utenlandsopphold={tidligereUtenlandsopphold} tidligereOpphold={true} />\n            </OppsummeringsPunkt>\n\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.utenlandsopphold.skalBoINorge')}>\n                {utenlandsopphold.iNorgeNeste12Mnd ? (\n                    <BodyShort>{intlUtils(intl, 'oppsummering.utenlandsopphold.skalBoINorge.norge')}</BodyShort>\n                ) : null}\n\n                <UtenlandsoppholdListe utenlandsopphold={senereUtenlandsopphold} tidligereOpphold={false} />\n            </OppsummeringsPunkt>\n\n            <OppsummeringsPunkt\n                title={\n                    erAdoptertBarn(barn)\n                        ? intlUtils(intl, 'oppsummering.utenlandsopphold.erINorgeOmsorgsovertakelsesdato')\n                        : intlUtils(intl, 'oppsummering.utenlandsopphold.erINorgePåFødselstidspunkt')\n                }\n            >\n                <BodyShort>\n                    <FormattedMessage id={erINorgePåFamiliehendelsedato ? 'ja' : 'nei'} />\n                </BodyShort>\n            </OppsummeringsPunkt>\n        </>\n    );\n};\n\nexport default UtenlandsoppholdOppsummering;\n","import { getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\n\nexport enum OppsummeringFormField {\n    harGodkjentOppsummering = 'harGodkjentOppsummering',\n}\n\nexport interface OppsummeringFormData {\n    [OppsummeringFormField.harGodkjentOppsummering]: boolean;\n}\n\nconst initialOppsummeringValues: OppsummeringFormData = {\n    [OppsummeringFormField.harGodkjentOppsummering]: false,\n};\n\nexport const getInitialOppsummeringValues = (): OppsummeringFormData => {\n    return initialOppsummeringValues;\n};\n\nexport const OppsummeringFormComponents = getTypedFormComponents<OppsummeringFormField, OppsummeringFormData>();\n","import { intlUtils } from '@navikt/fp-common';\nimport { IntlShape } from 'react-intl';\n\nexport const validateHarGodkjentOppsummering = (intl: IntlShape) => (value: boolean) => {\n    if (value !== true) {\n        return intlUtils(intl, 'valideringsfeil.oppsummering.harGodkjentOppsummering.påkrevd');\n    }\n\n    return undefined;\n};\n","import { FunctionComponent } from 'react';\nimport * as countries from 'i18n-iso-countries';\nimport { AnnenInntekt, AnnenInntektType, JobbIUtlandetInntekt } from 'app/context/types/AnnenInntekt';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport { useIntl } from 'react-intl';\nimport { Attachment, intlUtils, isAttachmentWithError } from '@navikt/fp-common';\nimport { BodyShort, Link, Tag } from '@navikt/ds-react';\n\ninterface Props {\n    annenInntekt: AnnenInntekt;\n}\n\nconst AnnenInntektDetaljer: FunctionComponent<Props> = ({ annenInntekt }) => {\n    const intl = useIntl();\n    const { type, vedlegg } = annenInntekt;\n    if (type === AnnenInntektType.JOBB_I_UTLANDET) {\n        const jobbIUtlandetInntekt = annenInntekt as JobbIUtlandetInntekt;\n        return (\n            <>\n                <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.andreInntekter.arbeidsgiverNavn')}>\n                    <BodyShort>{jobbIUtlandetInntekt.arbeidsgiverNavn}</BodyShort>\n                </OppsummeringsPunkt>\n                <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.andreInntekter.arbeidsgiverLand')}>\n                    <BodyShort>{countries.getName(jobbIUtlandetInntekt.land, 'nb')}</BodyShort>\n                </OppsummeringsPunkt>\n            </>\n        );\n    }\n    if (type === AnnenInntektType.SLUTTPAKKE || type === AnnenInntektType.MILITÆRTJENESTE) {\n        const renderListOfAttachmentPreviewLinks = () => {\n            return vedlegg\n                .filter((a: Attachment) => !isAttachmentWithError(a))\n                .map(({ url, id, filename }) => (\n                    <Link href={url!} key={id} target=\"_blank\">\n                        {filename}\n                    </Link>\n                ));\n        };\n        return (\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.andreInntekter.vedlagtdokumentasjon')}>\n                {(vedlegg || []).filter((a: Attachment) => !isAttachmentWithError(a)).length > 0 ? (\n                    renderListOfAttachmentPreviewLinks()\n                ) : (\n                    <Tag variant=\"warning\">{intlUtils(intl, 'oppsummering.andreInntekter.dokumentasjon.mangler')}</Tag>\n                )}\n            </OppsummeringsPunkt>\n        );\n    }\n    return null;\n};\n\nexport default AnnenInntektDetaljer;\n","import { FunctionComponent, ReactElement } from 'react';\nimport { BodyShort, Label } from '@navikt/ds-react';\n\nimport './inntekterTabell.less';\n\ninterface Props {\n    list: Array<{\n        key: string;\n        headerVenstre: string;\n        headerHøyre: string;\n        content?: ReactElement;\n    }>;\n}\n\nconst InntekterTabell: FunctionComponent<Props> = ({ list }) => {\n    return (\n        <ul className=\"oppsummeringsliste\">\n            {list.map((l) => (\n                <li key={l.key} className=\"oppsummeringsliste__element\">\n                    <div className=\"oppsummeringsliste__element__heading\">\n                        <Label>{l.headerVenstre}</Label>\n                        <div className=\"høyrestiltTekst\">\n                            <BodyShort>{l.headerHøyre}</BodyShort>\n                        </div>\n                    </div>\n                    {l.content && <div className=\"oppsummeringsliste__element__content\">{l.content}</div>}\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nexport default InntekterTabell;\n","import { ISOStringToDate, formatDate, intlUtils } from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\n\nimport AnnenInntektDetaljer from './AnnenInntektDetaljer';\nimport InntekterTabell from './InntekterTabell';\nimport { BodyShort } from '@navikt/ds-react';\nimport Søker from 'app/context/types/Søker';\n\ninterface Props {\n    søker: Søker;\n}\n\nconst AndreInntekterOppsummering: FunctionComponent<Props> = ({ søker }) => {\n    const intl = useIntl();\n\n    if (!søker.harHattAnnenInntektSiste10Mnd || !søker.andreInntekterSiste10Mnd) {\n        return (\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.andreInntekter.tittel')}>\n                <BodyShort>{intlUtils(intl, 'oppsummering.andreInntekter.ikkeHattAndreInntekter')}</BodyShort>\n            </OppsummeringsPunkt>\n        );\n    }\n\n    return (\n        <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.andreInntekter.tittel')}>\n            <InntekterTabell\n                list={søker.andreInntekterSiste10Mnd.map((annenInntekt) => ({\n                    key: annenInntekt.type + annenInntekt.tidsperiode,\n                    headerVenstre: intlUtils(intl, `inntektstype.${annenInntekt.type.toLowerCase()}`),\n                    headerHøyre: intlUtils(intl, 'tidsintervall', {\n                        fom: formatDate(ISOStringToDate(annenInntekt.tidsperiode.fom)!),\n                        tom: annenInntekt.pågående\n                            ? 'pågående'\n                            : formatDate(ISOStringToDate(annenInntekt.tidsperiode.tom)!),\n                    }),\n                    content: <AnnenInntektDetaljer annenInntekt={annenInntekt} />,\n                }))}\n            />\n        </OppsummeringsPunkt>\n    );\n};\n\nexport default AndreInntekterOppsummering;\n","import { formatDate, intlUtils } from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport { BodyShort } from '@navikt/ds-react';\nimport Søker from 'app/context/types/Søker';\n\ninterface Props {\n    søker: Søker;\n}\n\nconst FrilansOppsummering: FunctionComponent<Props> = ({ søker }) => {\n    const intl = useIntl();\n\n    if (!søker.frilansInformasjon || !søker.harJobbetSomFrilansSiste10Mnd) {\n        return (\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.frilans.tittel')}>\n                <BodyShort>{intlUtils(intl, 'oppsummering.frilans.ikkeFrilans')}</BodyShort>\n            </OppsummeringsPunkt>\n        );\n    }\n    const { oppstart, jobberFremdelesSomFrilans } = søker.frilansInformasjon;\n\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.frilans.tittel')} />\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.frilans.oppstartsdato')}>\n                <BodyShort>{formatDate(oppstart)}</BodyShort>\n            </OppsummeringsPunkt>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.frilans.fremdelesFrilans')}>\n                <BodyShort>{jobberFremdelesSomFrilans ? intlUtils(intl, 'ja') : intlUtils(intl, 'nei')}</BodyShort>\n            </OppsummeringsPunkt>\n        </>\n    );\n};\n\nexport default FrilansOppsummering;\n","import { formatDate, intlUtils } from '@navikt/fp-common';\nimport { Næring } from 'app/context/types/Næring';\nimport * as countries from 'i18n-iso-countries';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport { BodyShort } from '@navikt/ds-react';\n\ninterface Props {\n    næring: Næring;\n}\n\nconst Næringsdetaljer: FunctionComponent<Props> = ({ næring }) => {\n    const intl = useIntl();\n    const {\n        næringstyper,\n        organisasjonsnummer,\n        næringsinntekt,\n        registrertINorge,\n        registrertILand,\n        harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene,\n        hattVarigEndringAvNæringsinntektSiste4Kalenderår,\n        endringAvNæringsinntektInformasjon,\n    } = næring;\n\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.næringstype')}>\n                <BodyShort>{intlUtils(intl, `næringstype.${næringstyper[0].toLowerCase()}`)}</BodyShort>\n            </OppsummeringsPunkt>\n            {organisasjonsnummer && (\n                <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.orgnr')}>\n                    <BodyShort>{organisasjonsnummer}</BodyShort>\n                </OppsummeringsPunkt>\n            )}\n            {næringsinntekt && (\n                <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.næringsinntekt')}>\n                    <BodyShort>{næringsinntekt}</BodyShort>\n                </OppsummeringsPunkt>\n            )}\n            {registrertINorge ||\n                (registrertILand && (\n                    <OppsummeringsPunkt\n                        title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.registrertLand')}\n                    >\n                        <BodyShort>{registrertINorge ? 'Norge' : countries.getName(registrertILand, 'nb')}</BodyShort>\n                    </OppsummeringsPunkt>\n                ))}\n            {harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene && (\n                <OppsummeringsPunkt\n                    title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.blittYrkesaktivSiste3År')}\n                >\n                    <BodyShort>\n                        {harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene\n                            ? intlUtils(intl, 'ja')\n                            : intlUtils(intl, 'nei')}\n                    </BodyShort>\n                </OppsummeringsPunkt>\n            )}\n            {hattVarigEndringAvNæringsinntektSiste4Kalenderår === true && (\n                <>\n                    <OppsummeringsPunkt\n                        title={intlUtils(\n                            intl,\n                            'oppsummering.selvstendigNæringsdrivende.datoForEndringAvNæringsinntekt',\n                        )}\n                    >\n                        <BodyShort>{formatDate(endringAvNæringsinntektInformasjon!.dato)}</BodyShort>\n                    </OppsummeringsPunkt>\n                    <OppsummeringsPunkt\n                        title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.næringsinntektEtterEndring')}\n                    >\n                        <BodyShort>{endringAvNæringsinntektInformasjon!.næringsinntektEtterEndring}</BodyShort>\n                    </OppsummeringsPunkt>\n                    <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.forklaring')}>\n                        <BodyShort>{endringAvNæringsinntektInformasjon!.forklaring}</BodyShort>\n                    </OppsummeringsPunkt>\n                </>\n            )}\n        </>\n    );\n};\n\nexport default Næringsdetaljer;\n","import { formatDate, intlUtils } from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport InntekterTabell from './InntekterTabell';\nimport Næringsdetaljer from './Næringsdetaljer';\nimport { BodyShort } from '@navikt/ds-react';\nimport Søker from 'app/context/types/Søker';\n\ninterface Props {\n    søker: Søker;\n}\n\nconst SelvstendigNæringsdrivendeOppsummering: FunctionComponent<Props> = ({ søker }) => {\n    const intl = useIntl();\n\n    if (!søker.selvstendigNæringsdrivendeInformasjon || !søker.harJobbetSomSelvstendigNæringsdrivendeSiste10Mnd) {\n        return (\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.tittel')}>\n                <BodyShort>\n                    {intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.ikkeSelvstendigNæringsdrivende')}\n                </BodyShort>\n            </OppsummeringsPunkt>\n        );\n    }\n\n    return (\n        <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.tittel')}>\n            <InntekterTabell\n                list={søker.selvstendigNæringsdrivendeInformasjon.map((næring) => ({\n                    key: næring.navnPåNæringen + næring.tidsperiode,\n                    headerVenstre: næring.navnPåNæringen,\n                    headerHøyre: intlUtils(intl, 'tidsintervall', {\n                        fom: formatDate(næring.tidsperiode.fom)!,\n                        tom: næring.pågående ? 'pågående' : formatDate(næring.tidsperiode.tom!),\n                    }),\n                    content: <Næringsdetaljer næring={næring} />,\n                }))}\n            />\n        </OppsummeringsPunkt>\n    );\n};\n\nexport default SelvstendigNæringsdrivendeOppsummering;\n","import {\n    Arbeidsforhold,\n    Barn,\n    ISOStringToDate,\n    getAktiveArbeidsforhold,\n    intlUtils,\n    isFarEllerMedmor,\n} from '@navikt/fp-common';\nimport HarArbeidsforhold from 'app/steps/inntektsinformasjon/components/arbeidsforhold-informasjon/HarArbeidsforhold';\nimport HarIkkeArbeidsforhold from 'app/steps/inntektsinformasjon/components/arbeidsforhold-informasjon/HarIkkeArbeidsforhold';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport AndreInntekterOppsummering from './AndreInntekterOppsummering';\nimport FrilansOppsummering from './FrilansOppsummering';\nimport SelvstendigNæringsdrivendeOppsummering from './SelvstendigNæringsdrivendeOppsummering';\nimport { getFamiliehendelsedato } from 'app/utils/barnUtils';\nimport { SøkersituasjonFp } from '@navikt/fp-types';\nimport Søker from 'app/context/types/Søker';\n\ninterface Props {\n    arbeidsforhold: Arbeidsforhold[];\n    barn: Barn;\n    søkersituasjon: SøkersituasjonFp;\n    søker: Søker;\n}\n\nconst ArbeidsforholdOgAndreInntekterOppsummering: FunctionComponent<Props> = ({\n    arbeidsforhold,\n    barn,\n    søkersituasjon,\n    søker,\n}) => {\n    const intl = useIntl();\n    const erAdopsjon = søkersituasjon.situasjon === 'adopsjon';\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const aktiveArbeidsForhold = getAktiveArbeidsforhold(\n        arbeidsforhold,\n        erAdopsjon,\n        erFarEllerMedmor,\n        ISOStringToDate(familiehendelsesdato),\n    );\n    const harArbeidsforhold = aktiveArbeidsForhold !== undefined && aktiveArbeidsForhold.length > 0;\n\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.inntekt.registrerteArbeidsforhold')}>\n                <HarIkkeArbeidsforhold harArbeidsforhold={harArbeidsforhold} />\n                <HarArbeidsforhold harArbeidsforhold={harArbeidsforhold} arbeidsforhold={aktiveArbeidsForhold} />\n            </OppsummeringsPunkt>\n            <FrilansOppsummering søker={søker} />\n            <SelvstendigNæringsdrivendeOppsummering søker={søker} />\n            <AndreInntekterOppsummering søker={søker} />\n        </>\n    );\n};\n\nexport default ArbeidsforholdOgAndreInntekterOppsummering;\n","import { Tilleggsopplysning, Tilleggsopplysninger } from '@navikt/fp-common';\nimport { replaceInvisibleCharsWithSpace } from '@navikt/fp-common/src/common/utils/stringUtils';\n\nconst TIL_SAKSBEHANDLER = {\n    'tilleggsopplysning.begrunnelseForSenEndring': 'Begrunnelse for å søke om utsettelse',\n    'tilleggsopplysning.begrunnelseForSenEndring.SYKDOM': 'på grunn av sykdom tilbake i tid',\n    'tilleggsopplysning.begrunnelseForSenEndring.UTTAK': 'på grunn av uttak mer enn tre måneder tilbake i tid',\n    'tilleggsopplysning.begrunnelseForSenEndring.SYKDOM_OG_UTTAK':\n        'på grunn av sykdom tilbake i tid og uttak mer enn tre måneder tilbake i tid',\n};\n\nexport interface TilleggsopplysningMedBeskrivelse {\n    beskrivelse: string;\n    tekst: string;\n    ekstraInformasjon?: string;\n}\n\nexport const beskrivTilleggsopplysning = (tilleggsopplysning: Tilleggsopplysning): TilleggsopplysningMedBeskrivelse => {\n    const { tekst, ekstraInformasjon } = tilleggsopplysning;\n    const beskrivelseMessageId = `tilleggsopplysning.begrunnelseForSenEndring`;\n    const beskrivelseAvOpplysning = TIL_SAKSBEHANDLER[beskrivelseMessageId];\n    const ekstraMessageId = `tilleggsopplysning.begrunnelseForSenEndring.${ekstraInformasjon}`;\n    const ekstraInfoTilSaksbehandling = (TIL_SAKSBEHANDLER as any)[ekstraMessageId];\n\n    return {\n        beskrivelse: beskrivelseAvOpplysning,\n        ekstraInformasjon: ekstraInfoTilSaksbehandling,\n        tekst,\n    };\n};\n\nexport const cleanupInvisibleCharsFromTilleggsopplysninger = (\n    tilleggsopplysninger?: Tilleggsopplysninger,\n): Tilleggsopplysninger => {\n    if (!tilleggsopplysninger) {\n        return {};\n    }\n    return tilleggsopplysninger.begrunnelseForSenEndring\n        ? {\n              ...tilleggsopplysninger,\n              begrunnelseForSenEndring: {\n                  ...tilleggsopplysninger.begrunnelseForSenEndring,\n                  tekst: replaceInvisibleCharsWithSpace(tilleggsopplysninger.begrunnelseForSenEndring.tekst),\n              },\n          }\n        : tilleggsopplysninger;\n};\n","import * as React from 'react';\nimport './feltoppsummering.less';\nimport InnholdMedLedetekst from '../InnholdMedLedetekst';\n\ninterface Props {\n    feltnavn: string;\n    verdi: string | string[];\n}\n\nconst Feltoppsummering: React.FunctionComponent<Props> = ({ feltnavn, verdi }) => (\n    <InnholdMedLedetekst className=\"feltoppsummering\" ledetekst={feltnavn}>\n        <div className=\"feltoppsummering__verdi\">{verdi}</div>\n    </InnholdMedLedetekst>\n);\n\nexport default Feltoppsummering;\n","import * as React from 'react';\nimport './list.less';\nimport { bemUtils } from '@navikt/fp-common';\n\ninterface ListProps {\n    data: any[];\n    renderElement: (data: any, index: number) => JSX.Element;\n    className?: string;\n}\n\nconst bem = bemUtils('list');\nconst List: React.FunctionComponent<ListProps> = (props: ListProps) => {\n    const { data, renderElement, className } = props;\n    return (\n        <ul className={`${bem.block} ${className}`}>\n            {data.map((dataObject: any, i: number) => renderElement(dataObject, i))}\n        </ul>\n    );\n};\n\nexport default List;\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport List from './list/List';\nimport { BodyShort, Label } from '@navikt/ds-react';\nimport { guid } from '@navikt/fp-common';\nimport './oppsummeringsliste.less';\n\nexport interface OppsummeringslisteelementProps {\n    venstrestiltTekst: string;\n    høyrestiltTekst: string;\n    content?: React.ReactNode;\n    kompakt?: boolean;\n}\n\ninterface OppsummeringslisteProps {\n    data: OppsummeringslisteelementProps[];\n    kompakt?: boolean;\n}\n\nconst Oppsummeringsliste: React.FunctionComponent<OppsummeringslisteProps> = (props: OppsummeringslisteProps) => {\n    const { data, kompakt } = props;\n    return (\n        <List\n            className=\"oppsummeringsliste\"\n            data={data}\n            renderElement={(elementProps: OppsummeringslisteelementProps) => (\n                <Oppsummeringslisteelement {...elementProps} kompakt={kompakt} key={guid()} />\n            )}\n        />\n    );\n};\n\nconst Oppsummeringslisteelement: React.FunctionComponent<OppsummeringslisteelementProps> = ({\n    venstrestiltTekst,\n    høyrestiltTekst,\n    content,\n    kompakt,\n}: OppsummeringslisteelementProps) => (\n    <li\n        className={classNames('oppsummeringsliste__element', {\n            'oppsummeringsliste__element--kompakt': kompakt === true,\n        })}\n    >\n        <div className=\"oppsummeringsliste__element__heading\">\n            <Label as=\"h4\">{venstrestiltTekst}</Label>\n            <div className=\"høyrestiltTekst\">\n                <BodyShort>{høyrestiltTekst}</BodyShort>\n            </div>\n        </div>\n        {content && <div className=\"oppsummeringsliste__element__content\">{content}</div>}\n    </li>\n);\n\nexport default Oppsummeringsliste;\n","import {\n    Arbeidsforhold,\n    Arbeidsform,\n    Overføringsperiode,\n    PeriodeUtenUttakUtsettelse,\n    Periodetype,\n    Utsettelsesperiode,\n    intlUtils,\n} from '@navikt/fp-common';\nimport { IntlShape } from 'react-intl';\n\ntype MessageValue = string | number | boolean | Date | null | undefined;\n\nconst getValgtArbeidsgiverNavn = (arbeidsforhold: Arbeidsforhold[], orgnr?: string) => {\n    if (orgnr) {\n        const valgtArbeidsgiver = arbeidsforhold.find(\n            ({ arbeidsgiverId, arbeidsgiverIdType }) => arbeidsgiverIdType === 'orgnr' && arbeidsgiverId === orgnr,\n        );\n        if (valgtArbeidsgiver) {\n            return valgtArbeidsgiver.arbeidsgiverNavn;\n        }\n    }\n    return '';\n};\n\nexport const getArbeidsformTekst = (\n    intl: IntlShape,\n    arbeidsformer: Arbeidsform[],\n    orgnumre?: string[],\n    arbeidsforhold?: Arbeidsforhold[],\n) => {\n    let arbeidstakerTekster: string[] = [];\n    let arbeidsformerTekster: string[] = [];\n\n    if (orgnumre !== undefined && orgnumre.length > 0 && arbeidsforhold && arbeidsforhold.length > 0) {\n        arbeidstakerTekster = orgnumre.map((orgnr) => {\n            const arbeidsgiverNavn = getValgtArbeidsgiverNavn(arbeidsforhold, orgnr);\n            return intlUtils(intl, `oppsummering.uttak.arbeidstaker`, { orgnr, arbeidsgiverNavn });\n        });\n    }\n\n    if (arbeidsformer !== undefined && arbeidsformer.length > 0) {\n        arbeidsformerTekster = arbeidsformer\n            .filter((arbeidsform) => arbeidsform !== Arbeidsform.arbeidstaker)\n            .map((arbeidsform) => {\n                return intlUtils(intl, `oppsummering.uttak.${arbeidsform.toLowerCase()}`);\n            });\n    }\n\n    return arbeidstakerTekster.concat(arbeidsformerTekster);\n};\n\nexport const getÅrsakTekst = (\n    intl: IntlShape,\n    { type, årsak }: Utsettelsesperiode | Overføringsperiode | PeriodeUtenUttakUtsettelse,\n    messageValues?: { [key: string]: MessageValue },\n) => {\n    const intlKeyPrefix = type === Periodetype.Utsettelse ? 'utsettelsesårsak.' : 'overføringsårsaktype.';\n    return intlUtils(intl, `uttaksplan.${intlKeyPrefix + årsak}`, messageValues);\n};\n","import * as React from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\nimport Feltoppsummering from '../feltoppsummering/Feltoppsummering';\nimport { NavnPåForeldre, Overføringsperiode, StønadskontoType, intlUtils } from '@navikt/fp-common';\nimport OppsummeringAvDokumentasjon from '../oppsummering-av-dokumentasjon/OppsummeringAvDokumentasjon';\nimport { getÅrsakTekst } from '../OppsummeringUtils';\nimport { dokumentasjonBehøvesForOverføringsperiode } from '@navikt/uttaksplan';\n\ninterface OverføringsperiodedetaljerProps {\n    periode: Overføringsperiode;\n    navnPåForeldre: NavnPåForeldre;\n    erFarEllerMedmor: boolean;\n    periodeErNyEllerEndret: boolean;\n}\n\ntype Props = OverføringsperiodedetaljerProps;\n\nconst getNavnPåAnnenForelder = (navnPåForeldre: NavnPåForeldre, konto: StønadskontoType, intl: IntlShape) => {\n    if (konto === StønadskontoType.Fedrekvote) {\n        return navnPåForeldre.farMedmor;\n    } else if (konto === StønadskontoType.Mødrekvote) {\n        return navnPåForeldre.mor;\n    }\n    return intlUtils(intl, 'annen.forelder');\n};\n\nconst Overføringsperiodedetaljer: React.FunctionComponent<Props> = ({\n    periode,\n    navnPåForeldre,\n    erFarEllerMedmor,\n    periodeErNyEllerEndret,\n}) => {\n    const { vedlegg } = periode;\n    const intl = useIntl();\n    const navnAnnenForelder = getNavnPåAnnenForelder(navnPåForeldre, periode.konto, intl);\n    return (\n        <>\n            <Feltoppsummering\n                feltnavn={intlUtils(intl, 'oppsummering.uttak.årsak')}\n                verdi={getÅrsakTekst(intl, periode, { navnAnnenForelder })}\n            />\n\n            {dokumentasjonBehøvesForOverføringsperiode(erFarEllerMedmor, periode) && periodeErNyEllerEndret && (\n                <OppsummeringAvDokumentasjon vedlegg={vedlegg || []} />\n            )}\n        </>\n    );\n};\n\nexport default Overføringsperiodedetaljer;\n","import * as React from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\nimport OppsummeringAvDokumentasjon from '../oppsummering-av-dokumentasjon/OppsummeringAvDokumentasjon';\nimport Feltoppsummering from '../feltoppsummering/Feltoppsummering';\nimport { Attachment, MorsAktivitet, assertUnreachable, intlUtils } from '@navikt/fp-common';\n\ninterface MorsAktivitetDetaljerProps {\n    morsAktivitet: MorsAktivitet;\n    dokumentasjonAvMorsAktivitet: Attachment[];\n    visOppsummeringAvDokumentasjon: boolean;\n}\n\ntype Props = MorsAktivitetDetaljerProps;\n\nconst getMorsAktivitetTekst = (intl: IntlShape, aktivitet: MorsAktivitet): string => {\n    switch (aktivitet) {\n        case MorsAktivitet.Arbeid:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.Arbeid');\n        case MorsAktivitet.ArbeidOgUtdanning:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.ArbeidOgUtdanning');\n        case MorsAktivitet.Innlagt:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.Innlagt');\n        case MorsAktivitet.Introduksjonsprogrammet:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.Introduksjonsprogrammet');\n        case MorsAktivitet.Kvalifiseringsprogrammet:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.Kvalifiseringsprogrammet');\n        case MorsAktivitet.TrengerHjelp:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.TrengerHjelp');\n        case MorsAktivitet.Uføre:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.Uføre');\n        case MorsAktivitet.Utdanning:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.Utdanning');\n        case MorsAktivitet.IkkeOppgitt:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.UtenAktivitetsKrav');\n        default:\n            return assertUnreachable(aktivitet, 'Mor har ingen aktivitet');\n    }\n};\n\nconst MorsAktivitetDetaljer: React.FunctionComponent<Props> = ({\n    morsAktivitet,\n    dokumentasjonAvMorsAktivitet,\n    visOppsummeringAvDokumentasjon,\n}) => {\n    const intl = useIntl();\n\n    return (\n        <>\n            <Feltoppsummering\n                feltnavn={intlUtils(intl, 'oppsummering.morsAktivitet')}\n                verdi={getMorsAktivitetTekst(intl, morsAktivitet)}\n            />\n            {visOppsummeringAvDokumentasjon && (\n                <OppsummeringAvDokumentasjon\n                    ledetekst={intlUtils(intl, 'oppsummering.morsAktivitet.dokumentasjon')}\n                    vedlegg={dokumentasjonAvMorsAktivitet}\n                />\n            )}\n        </>\n    );\n};\n\nexport default MorsAktivitetDetaljer;\n","import {\n    AnnenForelder,\n    Arbeidsforhold,\n    StønadskontoType,\n    UttaksperiodeBase,\n    intlUtils,\n    isAnnenForelderOppgitt,\n} from '@navikt/fp-common';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport Feltoppsummering from '../feltoppsummering/Feltoppsummering';\nimport MorsAktivitetDetaljer from './MorsaktiviteterDetaljer';\nimport { getArbeidsformTekst } from '../OppsummeringUtils';\nimport { shouldPeriodeHaveAttachment } from '@navikt/uttaksplan';\n\ninterface UttaksperiodedetaljerProps {\n    periode: UttaksperiodeBase;\n    registrerteArbeidsforhold: Arbeidsforhold[] | undefined;\n    periodeErNyEllerEndret: boolean;\n    søkerErFarEllerMedmor: boolean;\n    annenForelder: AnnenForelder;\n}\n\ntype Props = UttaksperiodedetaljerProps;\n\nconst Uttaksperiodedetaljer: React.FunctionComponent<Props> = ({\n    periode,\n    registrerteArbeidsforhold,\n    periodeErNyEllerEndret,\n    søkerErFarEllerMedmor,\n    annenForelder,\n}) => {\n    const {\n        konto,\n        morsAktivitetIPerioden,\n        ønskerSamtidigUttak,\n        gradert,\n        stillingsprosent,\n        orgnumre,\n        arbeidsformer,\n        vedlegg,\n        ønskerFlerbarnsdager,\n    } = periode;\n    const intl = useIntl();\n\n    let arbeidsformTekst = '';\n    if (arbeidsformer) {\n        arbeidsformTekst = getArbeidsformTekst(intl, arbeidsformer, orgnumre, registrerteArbeidsforhold).join('\\r\\n');\n    }\n\n    const erDeltUttakINorge = isAnnenForelderOppgitt(annenForelder) && annenForelder.harRettPåForeldrepengerINorge;\n\n    return (\n        <>\n            {ønskerFlerbarnsdager !== undefined && erDeltUttakINorge && (\n                <Feltoppsummering\n                    feltnavn={intlUtils(intl, 'oppsummering.uttak.ønskerFlerbarnsdager')}\n                    verdi={ønskerFlerbarnsdager ? intlUtils(intl, 'ja') : intlUtils(intl, 'nei')}\n                />\n            )}\n            {ønskerSamtidigUttak !== undefined && erDeltUttakINorge && (\n                <Feltoppsummering\n                    feltnavn={intlUtils(intl, 'oppsummering.uttak.samtidigUttak')}\n                    verdi={ønskerSamtidigUttak ? intlUtils(intl, 'ja') : intlUtils(intl, 'nei')}\n                />\n            )}\n            {konto !== StønadskontoType.ForeldrepengerFørFødsel && ønskerSamtidigUttak !== true && (\n                <Feltoppsummering\n                    feltnavn={intlUtils(intl, 'oppsummering.uttak.kombineresMedarbeid')}\n                    verdi={gradert ? intlUtils(intl, 'ja') : intlUtils(intl, 'nei')}\n                />\n            )}\n\n            {gradert === true && stillingsprosent && (\n                <Feltoppsummering\n                    feltnavn={intlUtils(intl, 'oppsummering.uttak.stillingsprosent')}\n                    verdi={stillingsprosent}\n                />\n            )}\n\n            {arbeidsformer && (\n                <Feltoppsummering\n                    feltnavn={intlUtils(intl, 'oppsummering.uttak.arbeidstaker.label')}\n                    verdi={arbeidsformTekst}\n                />\n            )}\n            {shouldPeriodeHaveAttachment(periode, søkerErFarEllerMedmor, annenForelder) && morsAktivitetIPerioden && (\n                <MorsAktivitetDetaljer\n                    morsAktivitet={morsAktivitetIPerioden}\n                    dokumentasjonAvMorsAktivitet={vedlegg || []}\n                    visOppsummeringAvDokumentasjon={periodeErNyEllerEndret}\n                />\n            )}\n        </>\n    );\n};\n\nexport default Uttaksperiodedetaljer;\n","import {\n    AnnenForelder,\n    Arbeidsforhold,\n    AttachmentType,\n    PeriodeUtenUttakUtsettelse,\n    Utsettelsesperiode,\n    UtsettelseÅrsakType,\n    intlUtils,\n} from '@navikt/fp-common';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport Feltoppsummering from '../feltoppsummering/Feltoppsummering';\nimport OppsummeringAvDokumentasjon from '../oppsummering-av-dokumentasjon/OppsummeringAvDokumentasjon';\nimport { getÅrsakTekst } from '../OppsummeringUtils';\nimport MorsAktivitetDetaljer from './MorsaktiviteterDetaljer';\nimport { shouldPeriodeHaveAttachment } from '@navikt/uttaksplan';\n\ninterface UtsettelsesperiodedetaljerProps {\n    periode: Utsettelsesperiode | PeriodeUtenUttakUtsettelse;\n    registrerteArbeidsforhold: Arbeidsforhold[];\n    søkerErFarEllerMedmor: boolean;\n    annenForelder: AnnenForelder;\n    periodeErNyEllerEndret: boolean;\n}\n\nconst Utsettelsesperiodedetaljer: React.FunctionComponent<UtsettelsesperiodedetaljerProps> = ({\n    periode,\n    søkerErFarEllerMedmor,\n    annenForelder,\n    periodeErNyEllerEndret,\n}) => {\n    const { årsak, morsAktivitetIPerioden, vedlegg, bekrefterArbeidIPerioden } = periode;\n    const intl = useIntl();\n    const bekreftErIArbeidSvar = bekrefterArbeidIPerioden === true ? intlUtils(intl, 'ja') : intlUtils(intl, 'nei');\n\n    return (\n        <>\n            <Feltoppsummering\n                feltnavn={intlUtils(intl, 'oppsummering.uttak.årsak')}\n                verdi={getÅrsakTekst(intl, periode)}\n            />\n            {shouldPeriodeHaveAttachment(periode, søkerErFarEllerMedmor, annenForelder) &&\n                periodeErNyEllerEndret &&\n                periode.årsak !== UtsettelseÅrsakType.Fri && (\n                    <OppsummeringAvDokumentasjon\n                        vedlegg={(vedlegg || []).filter(\n                            (currentVedlegg) => currentVedlegg.type !== AttachmentType.MORS_AKTIVITET_DOKUMENTASJON,\n                        )}\n                    />\n                )}\n            {årsak === UtsettelseÅrsakType.Arbeid && (\n                <Feltoppsummering\n                    feltnavn={intlUtils(intl, 'oppsummering.uttak.bekreft100ProsentIArbeid.label')}\n                    verdi={bekreftErIArbeidSvar}\n                />\n            )}\n            {shouldPeriodeHaveAttachment(periode, søkerErFarEllerMedmor, annenForelder) && morsAktivitetIPerioden && (\n                <MorsAktivitetDetaljer\n                    morsAktivitet={morsAktivitetIPerioden}\n                    dokumentasjonAvMorsAktivitet={(vedlegg || []).filter(\n                        (currentVedlegg) => currentVedlegg.type === AttachmentType.MORS_AKTIVITET_DOKUMENTASJON,\n                    )}\n                    visOppsummeringAvDokumentasjon={periodeErNyEllerEndret}\n                />\n            )}\n        </>\n    );\n};\n\nexport default Utsettelsesperiodedetaljer;\n","import { FunctionComponent } from 'react';\nimport {\n    AnnenForelder,\n    appendPeriodeNavnHvisUttakRundtFødselFarMedmor,\n    Arbeidsforhold,\n    finnesPeriodeIOpprinneligPlan,\n    formatDate,\n    getPeriodeTittel,\n    getStønadskontoNavn,\n    intlUtils,\n    NavnPåForeldre,\n    Oppholdsperiode,\n    Overføringsperiode,\n    Periode,\n    Periodetype,\n    PeriodeUtenUttakUtsettelse,\n    Situasjon,\n    StønadskontoType,\n    TidsperiodeDate,\n    Tilleggsopplysning,\n    Utsettelsesperiode,\n    Uttaksperiode,\n    uttaksperiodeKanJusteresVedFødsel,\n} from '@navikt/fp-common';\nimport { beskrivTilleggsopplysning, TilleggsopplysningMedBeskrivelse } from 'app/utils/tilleggsopplysningerUtils';\nimport { useIntl } from 'react-intl';\nimport Feltoppsummering from './feltoppsummering/Feltoppsummering';\nimport Oppsummeringsliste, { OppsummeringslisteelementProps } from './oppsummeringsliste/Oppsummeringsliste';\nimport Overføringsperiodedetaljer from './detaljer/Overføringsperiodedetaljer';\nimport Uttaksperiodedetaljer from './detaljer/Uttaksperiodedetaljer';\nimport Utsettelsesperiodedetaljer from './detaljer/Uttsettelsesperiodedetaljer';\n\ninterface UttaksplanOppsummeringslisteProps {\n    perioder: Periode[];\n    navnPåForeldre: NavnPåForeldre;\n    erFarEllerMedmor: boolean;\n    registrerteArbeidsforhold: Arbeidsforhold[];\n    annenForelder: AnnenForelder;\n    begrunnelseForSenEndring?: Tilleggsopplysning;\n    eksisterendeUttaksplan?: Periode[];\n    familiehendelsesdato: Date;\n    termindato: Date | undefined;\n    situasjon: Situasjon;\n    erAleneOmOmsorg: boolean;\n    ønskerJustertUttakVedFødsel: boolean | undefined;\n}\n\nconst UttaksplanOppsummeringsliste: FunctionComponent<UttaksplanOppsummeringslisteProps> = ({\n    perioder,\n    navnPåForeldre,\n    erFarEllerMedmor,\n    registrerteArbeidsforhold,\n    annenForelder,\n    begrunnelseForSenEndring,\n    eksisterendeUttaksplan,\n    familiehendelsesdato,\n    termindato,\n    situasjon,\n    erAleneOmOmsorg,\n    ønskerJustertUttakVedFødsel,\n}) => {\n    const intl = useIntl();\n\n    const getStønadskontoNavnFromKonto = (konto: StønadskontoType) => {\n        return getStønadskontoNavn(intl, konto, navnPåForeldre, erFarEllerMedmor, erAleneOmOmsorg);\n    };\n\n    const getUttaksperiodeNavn = (periode: Uttaksperiode) => {\n        const tittel = getStønadskontoNavnFromKonto(periode.konto);\n        return appendPeriodeNavnHvisUttakRundtFødselFarMedmor(\n            intl,\n            tittel,\n            periode,\n            situasjon,\n            familiehendelsesdato,\n            termindato,\n        );\n    };\n\n    const formatTidsperiode = (tidsperiode: TidsperiodeDate): string => {\n        const formatertTidsperiode = intlUtils(intl, 'tidsintervall', {\n            fom: formatDate(tidsperiode.fom),\n            tom: formatDate(tidsperiode.tom),\n        });\n        if (uttaksperiodeKanJusteresVedFødsel(ønskerJustertUttakVedFødsel, termindato, tidsperiode.fom)) {\n            const justeringTekst = intlUtils(intl, 'oppsummering.uttak.periodenBlirAutomatiskJustert');\n            return justeringTekst.concat(formatertTidsperiode);\n        }\n        return formatertTidsperiode;\n    };\n    const createOppsummeringslisteelementPropsForUttaksperiode = (\n        periode: Uttaksperiode,\n        periodeErNyEllerEndret = true,\n    ): OppsummeringslisteelementProps => {\n        return {\n            venstrestiltTekst: getUttaksperiodeNavn(periode),\n            høyrestiltTekst: formatTidsperiode(periode.tidsperiode),\n            content: (\n                <Uttaksperiodedetaljer\n                    periode={periode}\n                    registrerteArbeidsforhold={registrerteArbeidsforhold}\n                    periodeErNyEllerEndret={periodeErNyEllerEndret}\n                    søkerErFarEllerMedmor={erFarEllerMedmor}\n                    annenForelder={annenForelder}\n                />\n            ),\n        };\n    };\n\n    const createOppsummeringslisteelementPropsForOppholdsperiode = (\n        periode: Oppholdsperiode,\n    ): OppsummeringslisteelementProps => {\n        return {\n            venstrestiltTekst: getPeriodeTittel(\n                intl,\n                periode,\n                navnPåForeldre,\n                familiehendelsesdato,\n                termindato,\n                situasjon,\n            ),\n            høyrestiltTekst: formatTidsperiode(periode.tidsperiode),\n        };\n    };\n\n    const createOppsummeringslisteelementPropsForUtsettelsesperiode = (\n        periode: Utsettelsesperiode | PeriodeUtenUttakUtsettelse,\n        periodeErNyEllerEndret: boolean,\n    ): OppsummeringslisteelementProps => {\n        return {\n            venstrestiltTekst: intlUtils(intl, 'oppsummering.utsettelse.pga'),\n            høyrestiltTekst: formatTidsperiode(periode.tidsperiode),\n            content: (\n                <Utsettelsesperiodedetaljer\n                    periode={periode}\n                    registrerteArbeidsforhold={registrerteArbeidsforhold}\n                    søkerErFarEllerMedmor={erFarEllerMedmor}\n                    annenForelder={annenForelder}\n                    periodeErNyEllerEndret={periodeErNyEllerEndret}\n                />\n            ),\n        };\n    };\n\n    const createOppsummeringslisteelementPropsForOverføringsperiode = (\n        periode: Overføringsperiode,\n        periodeErNyEllerEndret: boolean,\n    ): OppsummeringslisteelementProps => {\n        const kontonavn = getStønadskontoNavnFromKonto(periode.konto);\n        return {\n            venstrestiltTekst: intlUtils(intl, 'oppsummering.overtakelse.pga', {\n                konto: kontonavn,\n            }),\n            høyrestiltTekst: formatTidsperiode(periode.tidsperiode),\n            content: (\n                <Overføringsperiodedetaljer\n                    periode={periode}\n                    navnPåForeldre={navnPåForeldre}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    periodeErNyEllerEndret={periodeErNyEllerEndret}\n                />\n            ),\n        };\n    };\n\n    const createOppsummeringslisteelementPropsForBegrunnelseForSenEndring = (\n        begrunnelse: TilleggsopplysningMedBeskrivelse,\n    ): OppsummeringslisteelementProps => {\n        return {\n            venstrestiltTekst: begrunnelse.beskrivelse,\n            høyrestiltTekst: '',\n            content: (\n                <>\n                    <Feltoppsummering feltnavn={begrunnelse.ekstraInformasjon || ''} verdi={begrunnelse.tekst} />\n                </>\n            ),\n        };\n    };\n\n    const createOppsummeringslisteelementProps = (periode: Periode) => {\n        const periodeErNyEllerEndret = eksisterendeUttaksplan\n            ? finnesPeriodeIOpprinneligPlan(periode, eksisterendeUttaksplan) === false\n            : true;\n        switch (periode.type) {\n            case Periodetype.Uttak:\n                return createOppsummeringslisteelementPropsForUttaksperiode(periode, periodeErNyEllerEndret);\n            case Periodetype.Utsettelse:\n                return createOppsummeringslisteelementPropsForUtsettelsesperiode(periode, periodeErNyEllerEndret);\n            case Periodetype.Overføring:\n                return createOppsummeringslisteelementPropsForOverføringsperiode(periode, periodeErNyEllerEndret);\n            case Periodetype.Opphold:\n                return createOppsummeringslisteelementPropsForOppholdsperiode(periode);\n            default:\n                return null;\n        }\n    };\n\n    const oppsummeringslisteData = (): OppsummeringslisteelementProps[] => {\n        const periodeliste = perioder\n            .map((periode) => createOppsummeringslisteelementProps(periode))\n            .filter((v) => v !== null) as OppsummeringslisteelementProps[];\n        if (begrunnelseForSenEndring) {\n            const begrunnelse = beskrivTilleggsopplysning(begrunnelseForSenEndring);\n            const begrunnelseForSenEndringList =\n                createOppsummeringslisteelementPropsForBegrunnelseForSenEndring(begrunnelse);\n            return periodeliste.concat(begrunnelseForSenEndringList);\n        }\n\n        return periodeliste;\n    };\n\n    return <Oppsummeringsliste data={oppsummeringslisteData()} />;\n};\n\nexport default UttaksplanOppsummeringsliste;\n","import {\n    AnnenForelder,\n    Arbeidsforhold,\n    Dekningsgrad,\n    NavnPåForeldre,\n    Periode,\n    Situasjon,\n    Tilleggsopplysning,\n    intlUtils,\n} from '@navikt/fp-common';\n\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport UttaksplanOppsummeringsliste from './UttaksplanOppsummeringsliste';\nimport { BodyShort } from '@navikt/ds-react';\n\ninterface Props {\n    perioder: Periode[];\n    navnPåForeldre: NavnPåForeldre;\n    erFarEllerMedmor: boolean;\n    registrerteArbeidsforhold: Arbeidsforhold[];\n    dekningsgrad: Dekningsgrad;\n    antallUkerUttaksplan: number;\n    annenForelder: AnnenForelder;\n    familiehendelsesdato: Date;\n    termindato: Date | undefined;\n    situasjon: Situasjon;\n    erAleneOmOmsorg: boolean;\n    antallBarn: number;\n    ønskerJustertUttakVedFødsel: boolean | undefined;\n    begrunnelseForSenEndring?: Tilleggsopplysning;\n    eksisterendeUttaksplan?: Periode[];\n}\n\nconst UttaksplanOppsummering: React.FunctionComponent<Props> = ({\n    dekningsgrad,\n    antallUkerUttaksplan,\n    ønskerJustertUttakVedFødsel,\n    antallBarn,\n    ...rest\n}) => {\n    const intl = useIntl();\n\n    const dekningsgradTekst =\n        dekningsgrad === Dekningsgrad.HUNDRE_PROSENT\n            ? intlUtils(intl, 'oppsummering.uttak.dekningsgrad.verdi100', { antallUker: antallUkerUttaksplan })\n            : intlUtils(intl, 'oppsummering.uttak.dekningsgrad.verdi80', { antallUker: antallUkerUttaksplan });\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.uttak.dekningsgrad.label')}>\n                <BodyShort>{dekningsgradTekst}</BodyShort>\n            </OppsummeringsPunkt>\n            <UttaksplanOppsummeringsliste\n                ønskerJustertUttakVedFødsel={ønskerJustertUttakVedFødsel}\n                {...rest}\n            ></UttaksplanOppsummeringsliste>\n            {ønskerJustertUttakVedFødsel !== undefined && (\n                <OppsummeringsPunkt\n                    title={intlUtils(intl, 'oppsummering.uttak.ønskerAutomatiskJustering.label', {\n                        antallBarn,\n                    })}\n                >\n                    <BodyShort>\n                        <FormattedMessage id={ønskerJustertUttakVedFødsel ? 'ja' : 'nei'} />\n                    </BodyShort>\n                </OppsummeringsPunkt>\n            )}\n        </>\n    );\n};\n\nexport default UttaksplanOppsummering;\n","import { FormattedMessage, useIntl } from 'react-intl';\nimport { FunctionComponent, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Button } from '@navikt/ds-react';\nimport { PaperplaneIcon } from '@navikt/aksel-icons';\nimport { notEmpty } from '@navikt/fp-validation';\nimport { useAbortSignal } from '@navikt/fp-api';\nimport {\n    bemUtils,\n    Block,\n    getErSøkerFarEllerMedmor,\n    getFarMedmorErAleneOmOmsorg,\n    getNavnPåForeldre,\n    intlUtils,\n    isAnnenForelderOppgitt,\n    ISOStringToDate,\n    Step,\n    StepButtonWrapper,\n    Søkerinfo,\n} from '@navikt/fp-common';\nimport stepConfig, { getPreviousStepHref, getPreviousStepHrefEndringssøknad } from '../stepsConfig';\nimport AnnenForelderOppsummering from './components/annen-forelder-oppsummering/AnnenForelderOppsummering';\nimport BarnOppsummering from './components/barn-oppsummering/BarnOppsummering';\nimport OppsummeringsPanel from './components/OppsummeringsPanel';\nimport Personalia from './components/Personalia';\nimport UtenlandsoppholdOppsummering from './components/utenlandsopphold-oppsummering/UtenlandsoppholdOppsummering';\nimport {\n    getInitialOppsummeringValues,\n    OppsummeringFormComponents,\n    OppsummeringFormData,\n    OppsummeringFormField,\n} from './oppsummeringFormConfig';\nimport { validateHarGodkjentOppsummering } from './validation/oppsummeringValidation';\nimport ArbeidsforholdOgAndreInntekterOppsummering from './components/andre-inntekter-oppsummering/ArbeidsforholdOgAndreInntekterOppsummering';\nimport SøknadRoutes from 'app/routes/routes';\nimport UttaksplanOppsummering from './components/uttaksplan-oppsummering/UttaksplanOppsummering';\nimport { beskrivTilleggsopplysning } from 'app/utils/tilleggsopplysningerUtils';\nimport { getFamiliehendelsedato, getTermindato } from 'app/utils/barnUtils';\nimport useFortsettSøknadSenere from 'app/utils/hooks/useFortsettSøknadSenere';\nimport { ContextDataType, useContextGetData } from 'app/context/FpDataContext';\n\nimport './oppsummering.less';\nimport BackButton from '../BackButton';\n\nexport interface Props {\n    søkerInfo: Søkerinfo;\n    erEndringssøknad: boolean;\n    sendSøknad: (abortSignal: AbortSignal) => Promise<void>;\n    mellomlagreSøknadOgNaviger: () => Promise<void>;\n    avbrytSøknad: () => void;\n}\n\nconst Oppsummering: FunctionComponent<Props> = ({\n    søkerInfo,\n    erEndringssøknad,\n    sendSøknad,\n    avbrytSøknad,\n    mellomlagreSøknadOgNaviger,\n}) => {\n    const bem = bemUtils('oppsummering');\n    const intl = useIntl();\n    const navigate = useNavigate();\n    const onFortsettSøknadSenere = useFortsettSøknadSenere();\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const abortSignal = useAbortSignal();\n\n    const barn = notEmpty(useContextGetData(ContextDataType.OM_BARNET));\n    const annenForelder = notEmpty(useContextGetData(ContextDataType.ANNEN_FORELDER));\n    const søker = notEmpty(useContextGetData(ContextDataType.SØKER));\n    const søkersituasjon = notEmpty(useContextGetData(ContextDataType.SØKERSITUASJON));\n    const uttaksplan = notEmpty(useContextGetData(ContextDataType.UTTAKSPLAN));\n    const uttaksplanMetadata = notEmpty(useContextGetData(ContextDataType.UTTAKSPLAN_METADATA));\n    const utenlandsopphold = useContextGetData(ContextDataType.UTENLANDSOPPHOLD);\n    const senereUtenlandsopphold = useContextGetData(ContextDataType.UTENLANDSOPPHOLD_SENERE);\n    const tidligereUtenlandsopphold = useContextGetData(ContextDataType.UTENLANDSOPPHOLD_TIDLIGERE);\n    const eksisterendeSak = useContextGetData(ContextDataType.EKSISTERENDE_SAK);\n\n    const tilleggsopplysninger = uttaksplanMetadata.tilleggsopplysninger;\n\n    const søkerErFarEllerMedmor = getErSøkerFarEllerMedmor(søkersituasjon.rolle);\n    const navnPåForeldre = getNavnPåForeldre(søkerInfo.person, annenForelder, søkerErFarEllerMedmor, intl);\n    const begrunnelseForSenEndring = tilleggsopplysninger?.begrunnelseForSenEndring\n        ? beskrivTilleggsopplysning(tilleggsopplysninger.begrunnelseForSenEndring)\n        : undefined;\n    const farMedmorErAleneOmOmsorg = getFarMedmorErAleneOmOmsorg(\n        søkerErFarEllerMedmor,\n        søker.erAleneOmOmsorg,\n        annenForelder,\n    );\n    const familiehendelsesdato = ISOStringToDate(getFamiliehendelsedato(barn));\n    const termindato = getTermindato(barn);\n    const erEndringssøknadOgAnnenForelderHarRett =\n        erEndringssøknad && isAnnenForelderOppgitt(annenForelder) && annenForelder.harRettPåForeldrepengerINorge;\n    const erklæringOmAnnenForelderInformert = erEndringssøknadOgAnnenForelderHarRett\n        ? intlUtils(intl, 'oppsummering.harGodkjentOppsummering.endringssøknadMedAnnenForelder', {\n              navnAnnenForelder: annenForelder.fornavn,\n          })\n        : '';\n    const egenerklæringTekst = intlUtils(intl, 'oppsummering.harGodkjentOppsummering').concat(\n        erklæringOmAnnenForelderInformert,\n    );\n\n    const sendInn = async (values: Partial<OppsummeringFormData>) => {\n        if (values.harGodkjentOppsummering) {\n            setIsSubmitting(true);\n            await sendSøknad(abortSignal);\n            navigate(SøknadRoutes.SØKNAD_SENDT);\n        }\n    };\n\n    return (\n        <OppsummeringFormComponents.FormikWrapper\n            initialValues={getInitialOppsummeringValues()}\n            onSubmit={sendInn}\n            renderForm={() => {\n                return (\n                    <OppsummeringFormComponents.Form includeButtons={false}>\n                        <Step\n                            bannerTitle={intlUtils(intl, 'søknad.pageheading')}\n                            activeStepId=\"oppsummering\"\n                            pageTitle={intlUtils(intl, 'søknad.oppsummering')}\n                            onCancel={avbrytSøknad}\n                            onContinueLater={onFortsettSøknadSenere}\n                            steps={stepConfig(intl, erEndringssøknad)}\n                        >\n                            <Block padBottom=\"l\">\n                                <div className={bem.block}>\n                                    <OppsummeringsPanel title=\"Deg\">\n                                        <Personalia søkerinfo={søkerInfo} />\n                                    </OppsummeringsPanel>\n                                    {!erEndringssøknad && (\n                                        <OppsummeringsPanel title=\"Barnet\">\n                                            <BarnOppsummering\n                                                barn={barn}\n                                                familiehendelsesdato={familiehendelsesdato!}\n                                            />\n                                        </OppsummeringsPanel>\n                                    )}\n                                    {!erEndringssøknad && (\n                                        <OppsummeringsPanel title=\"Den andre forelderen\">\n                                            <AnnenForelderOppsummering\n                                                annenForelder={annenForelder}\n                                                søker={søker}\n                                                søkerrolle={søkersituasjon.rolle}\n                                                barn={barn}\n                                                farMedmorErAleneOmOmsorg={farMedmorErAleneOmOmsorg}\n                                            />\n                                        </OppsummeringsPanel>\n                                    )}\n                                    {!erEndringssøknad && (\n                                        <OppsummeringsPanel title=\"Utenlandsopphold\">\n                                            <UtenlandsoppholdOppsummering\n                                                utenlandsopphold={notEmpty(utenlandsopphold)}\n                                                tidligereUtenlandsopphold={tidligereUtenlandsopphold?.tidligereOpphold}\n                                                senereUtenlandsopphold={senereUtenlandsopphold?.senereOpphold}\n                                                barn={barn}\n                                            />\n                                        </OppsummeringsPanel>\n                                    )}\n                                    {!erEndringssøknad && (\n                                        <OppsummeringsPanel title=\"Arbeidsforhold og andre inntektskilder\">\n                                            <ArbeidsforholdOgAndreInntekterOppsummering\n                                                arbeidsforhold={søkerInfo.arbeidsforhold}\n                                                barn={barn}\n                                                søkersituasjon={søkersituasjon}\n                                                søker={søker}\n                                            />\n                                        </OppsummeringsPanel>\n                                    )}\n                                    <OppsummeringsPanel title={intlUtils(intl, 'oppsummering.uttak')}>\n                                        <UttaksplanOppsummering\n                                            perioder={uttaksplan}\n                                            navnPåForeldre={navnPåForeldre}\n                                            annenForelder={annenForelder}\n                                            erFarEllerMedmor={søkerErFarEllerMedmor}\n                                            registrerteArbeidsforhold={søkerInfo.arbeidsforhold}\n                                            dekningsgrad={uttaksplanMetadata.dekningsgrad!}\n                                            antallUkerUttaksplan={uttaksplanMetadata.antallUkerIUttaksplan!}\n                                            begrunnelseForSenEndring={begrunnelseForSenEndring}\n                                            eksisterendeUttaksplan={\n                                                eksisterendeSak ? eksisterendeSak.uttaksplan : undefined\n                                            }\n                                            familiehendelsesdato={familiehendelsesdato!}\n                                            termindato={termindato}\n                                            situasjon={søkersituasjon.situasjon}\n                                            erAleneOmOmsorg={søker.erAleneOmOmsorg}\n                                            antallBarn={barn.antallBarn}\n                                            ønskerJustertUttakVedFødsel={uttaksplanMetadata.ønskerJustertUttakVedFødsel}\n                                        />\n                                    </OppsummeringsPanel>\n                                </div>\n                            </Block>\n                            <Block padBottom=\"l\">\n                                <OppsummeringFormComponents.ConfirmationCheckbox\n                                    name={OppsummeringFormField.harGodkjentOppsummering}\n                                    label={egenerklæringTekst}\n                                    validate={validateHarGodkjentOppsummering(intl)}\n                                />\n                            </Block>\n                            <Block margin=\"l\" padBottom=\"l\">\n                                <StepButtonWrapper lastStep={true}>\n                                    <BackButton\n                                        mellomlagreSøknadOgNaviger={mellomlagreSøknadOgNaviger}\n                                        route={\n                                            erEndringssøknad\n                                                ? getPreviousStepHrefEndringssøknad('oppsummering')\n                                                : getPreviousStepHref('oppsummering')\n                                        }\n                                    />\n                                    <Button\n                                        icon={<PaperplaneIcon />}\n                                        iconPosition=\"right\"\n                                        type=\"submit\"\n                                        disabled={isSubmitting}\n                                        loading={isSubmitting}\n                                    >\n                                        <FormattedMessage id=\"oppsummering.sendInnSøknad\" />\n                                    </Button>\n                                </StepButtonWrapper>\n                            </Block>\n                        </Step>\n                    </OppsummeringFormComponents.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default Oppsummering;\n"],"names":["useAbortSignal","controller","useRef","useEffect","axios","OppsummeringsPunkt","title","visible","children","jsxs","Block","jsx","Label","hasListOfChildren","InnholdMedLedetekst","ledetekst","className","child","BodyShort","guid","KompleksFeltoppsummering","OppsummeringAvDokumentasjon","props","vedlegg","intl","useIntl","renderListOfAttachmentPreviewLinks","a","isAttachmentWithError","url","id","filename","Link","intlUtils","Tag","AnnenForelderOppsummering","annenForelder","søker","søkerrolle","barn","farMedmorErAleneOmOmsorg","erFarEllerMedmor","isFarEllerMedmor","dokumentasjonAvAleneomsorg","Fragment","isAnnenForelderIkkeOppgitt","isAnnenForelderOppgitt","FormattedMessage","BarnAdoptertIUtlandetDetaljer","familiehendelsesdato","isAdoptertStebarn","førsteOktober2021ReglerGjelder","hasValue","formatDate","getAntallBarnTekst","antallBarn","getTerminEllerFødselTittel","type","BarnType","getTerminEllerFødselsdato","isUfødtBarn","BarnOppsummering","isAdoptertAnnetBarn","OppsummeringsPanel","bem","bemUtils","Accordion","Personalia","søkerinfo","sortOpphold","d1","d2","dayjs","UtenlandsoppholdOppsummeringListe","utenlandsopphold","tidligereOpphold","opphold","countries","getErINorgePåFamiliehendelsedato","familiehendelsedato","senereOpphold","erINorge","tidOpphold","doesTidsperiodeContainDate","senOpphold","erAdoptertBarn","EMPTY_ARRAY","UtenlandsoppholdOppsummering","tidligereUtenlandsopphold","senereUtenlandsopphold","getFamiliehendelsedato","erINorgePåFamiliehendelsedato","UtenlandsoppholdListe","OppsummeringFormField","initialOppsummeringValues","getInitialOppsummeringValues","OppsummeringFormComponents","getTypedFormComponents","validateHarGodkjentOppsummering","value","AnnenInntektDetaljer","annenInntekt","AnnenInntektType","jobbIUtlandetInntekt","countries.getName","InntekterTabell","list","l","AndreInntekterOppsummering","ISOStringToDate","FrilansOppsummering","oppstart","jobberFremdelesSomFrilans","Næringsdetaljer","næring","næringstyper","organisasjonsnummer","næringsinntekt","registrertINorge","registrertILand","harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene","hattVarigEndringAvNæringsinntektSiste4Kalenderår","endringAvNæringsinntektInformasjon","SelvstendigNæringsdrivendeOppsummering","ArbeidsforholdOgAndreInntekterOppsummering","arbeidsforhold","søkersituasjon","erAdopsjon","aktiveArbeidsForhold","getAktiveArbeidsforhold","harArbeidsforhold","HarIkkeArbeidsforhold","HarArbeidsforhold","TIL_SAKSBEHANDLER","beskrivTilleggsopplysning","tilleggsopplysning","tekst","ekstraInformasjon","beskrivelseAvOpplysning","ekstraMessageId","ekstraInfoTilSaksbehandling","cleanupInvisibleCharsFromTilleggsopplysninger","tilleggsopplysninger","replaceInvisibleCharsWithSpace","Feltoppsummering","feltnavn","verdi","List","data","renderElement","dataObject","i","Oppsummeringsliste","kompakt","elementProps","createElement","Oppsummeringslisteelement","venstrestiltTekst","høyrestiltTekst","content","classNames","getValgtArbeidsgiverNavn","orgnr","valgtArbeidsgiver","arbeidsgiverId","arbeidsgiverIdType","getArbeidsformTekst","arbeidsformer","orgnumre","arbeidstakerTekster","arbeidsformerTekster","arbeidsgiverNavn","arbeidsform","Arbeidsform","getÅrsakTekst","årsak","messageValues","intlKeyPrefix","Periodetype","getNavnPåAnnenForelder","navnPåForeldre","konto","StønadskontoType","Overføringsperiodedetaljer","periode","periodeErNyEllerEndret","navnAnnenForelder","dokumentasjonBehøvesForOverføringsperiode","getMorsAktivitetTekst","aktivitet","MorsAktivitet","assertUnreachable","MorsAktivitetDetaljer","morsAktivitet","dokumentasjonAvMorsAktivitet","visOppsummeringAvDokumentasjon","Uttaksperiodedetaljer","registrerteArbeidsforhold","søkerErFarEllerMedmor","morsAktivitetIPerioden","ønskerSamtidigUttak","gradert","stillingsprosent","ønskerFlerbarnsdager","arbeidsformTekst","erDeltUttakINorge","shouldPeriodeHaveAttachment","Utsettelsesperiodedetaljer","bekrefterArbeidIPerioden","bekreftErIArbeidSvar","UtsettelseÅrsakType","currentVedlegg","AttachmentType","UttaksplanOppsummeringsliste","perioder","begrunnelseForSenEndring","eksisterendeUttaksplan","termindato","situasjon","erAleneOmOmsorg","ønskerJustertUttakVedFødsel","getStønadskontoNavnFromKonto","getStønadskontoNavn","getUttaksperiodeNavn","tittel","appendPeriodeNavnHvisUttakRundtFødselFarMedmor","formatTidsperiode","tidsperiode","formatertTidsperiode","uttaksperiodeKanJusteresVedFødsel","createOppsummeringslisteelementPropsForUttaksperiode","createOppsummeringslisteelementPropsForOppholdsperiode","getPeriodeTittel","createOppsummeringslisteelementPropsForUtsettelsesperiode","createOppsummeringslisteelementPropsForOverføringsperiode","kontonavn","createOppsummeringslisteelementPropsForBegrunnelseForSenEndring","begrunnelse","createOppsummeringslisteelementProps","finnesPeriodeIOpprinneligPlan","oppsummeringslisteData","periodeliste","v","begrunnelseForSenEndringList","UttaksplanOppsummering","dekningsgrad","antallUkerUttaksplan","rest","dekningsgradTekst","Dekningsgrad","Oppsummering","søkerInfo","erEndringssøknad","sendSøknad","avbrytSøknad","mellomlagreSøknadOgNaviger","navigate","useNavigate","onFortsettSøknadSenere","useFortsettSøknadSenere","isSubmitting","setIsSubmitting","useState","abortSignal","notEmpty","useContextGetData","ContextDataType","uttaksplan","uttaksplanMetadata","eksisterendeSak","getErSøkerFarEllerMedmor","getNavnPåForeldre","getFarMedmorErAleneOmOmsorg","getTermindato","erklæringOmAnnenForelderInformert","egenerklæringTekst","sendInn","values","SøknadRoutes","Step","stepConfig","StepButtonWrapper","BackButton","getPreviousStepHrefEndringssøknad","getPreviousStepHref","Button","PaperplaneIcon","Oppsummering$1"],"mappings":"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"}