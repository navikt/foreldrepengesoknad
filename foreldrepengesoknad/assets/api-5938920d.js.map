{"version":3,"file":"api-5938920d.js","sources":["../../src/app/utils/redirectToLogin.ts","../../src/app/types/RequestState.ts","../../src/app/utils/hooks/useRequest.ts","../../src/app/api/storageParser.ts","../../src/app/api/api.ts"],"sourcesContent":["import Environment from 'app/Environment';\n\nexport const redirectToLogin = () => {\n    window.location.href = Environment.LOGIN_URL + '?redirect=' + window.location.origin;\n};\n","export enum RequestStatus {\n    'UNFETCHED' = 'Unfetched',\n    'IN_PROGRESS' = 'InProgress',\n    'FINISHED' = 'Finished',\n}\n","import { useState, useEffect } from 'react';\nimport { AxiosError, AxiosRequestConfig } from 'axios';\nimport getAxiosInstance from 'app/api/apiInterceptor';\nimport { redirectToLogin } from './../../utils/redirectToLogin';\nimport { RequestStatus } from 'app/types/RequestState';\n\ntype Options = {\n    config?: AxiosRequestConfig;\n    fnr?: string;\n    isSuspended?: boolean;\n};\n\nconst DEFAULT_OPTIONS: Options = {\n    config: {},\n    isSuspended: false,\n};\n\nexport const useGetRequest = <T>(url: string, options: Options = DEFAULT_OPTIONS) => {\n    const [data, setData] = useState<T>();\n    const [error, setError] = useState<AxiosError<any> | null>(null);\n    const [requestStatus, setRequestStatus] = useState<RequestStatus>(RequestStatus.UNFETCHED);\n    const axiosInstance = options.fnr ? getAxiosInstance(options.fnr) : getAxiosInstance();\n\n    useEffect(() => {\n        if (!options.isSuspended && requestStatus === RequestStatus.UNFETCHED) {\n            setRequestStatus(RequestStatus.IN_PROGRESS);\n\n            axiosInstance\n                .get(url, options.config)\n                .then((res) => {\n                    res.data === '' ? setData(undefined) : setData(res.data);\n                    setRequestStatus(RequestStatus.FINISHED);\n                })\n                .catch((err) => {\n                    if (err.response && (err.response.status === 401 || err.response.status === 403)) {\n                        redirectToLogin();\n                    } else {\n                        setError(err);\n                    }\n                    setRequestStatus(RequestStatus.FINISHED);\n                });\n        }\n    }, [options, url, axiosInstance, requestStatus]);\n\n    return { data, error, requestStatus };\n};\n\nexport const usePostRequest = <T>(url: string, body: any, options: Options = DEFAULT_OPTIONS) => {\n    const [data, setData] = useState<T>();\n    const [error, setError] = useState<AxiosError<any> | null>(null);\n    const [requestStatus, setRequestStatus] = useState<RequestStatus>(RequestStatus.UNFETCHED);\n    const axiosInstance = options.fnr ? getAxiosInstance(options.fnr) : getAxiosInstance();\n\n    useEffect(() => {\n        if (!options.isSuspended && requestStatus === RequestStatus.UNFETCHED) {\n            setRequestStatus(RequestStatus.IN_PROGRESS);\n\n            axiosInstance\n                .post(url, body, options.config)\n                .then((res) => {\n                    res.data === '' ? setData(undefined) : setData(res.data);\n                    setRequestStatus(RequestStatus.FINISHED);\n                })\n                .catch((err) => {\n                    if (err.response && (err.response.status === 401 || err.response.status === 403)) {\n                        redirectToLogin();\n                    } else {\n                        setError(err);\n                    }\n                    setRequestStatus(RequestStatus.FINISHED);\n                });\n        }\n    }, [options, url, axiosInstance, requestStatus, body]);\n\n    return { data, error, requestStatus };\n};\n","import { isISODateString } from '@navikt/ds-datepicker';\nimport moment from 'moment';\n\nexport const dateStringToDateObjectMapper = (_key: string, value: string) => {\n    if (isISODateString(value)) {\n        return value;\n    }\n    if (!Array.isArray(value) && moment(value, [moment.HTML5_FMT.DATE, 'YYYY-MM-DDTHH:mm:ss.SSSZ'], true).isValid()) {\n        return new Date(value);\n    }\n    return value;\n};\nexport const storageParser = (storageResponse: string) => {\n    if (storageResponse) {\n        return JSON.parse(storageResponse, dateStringToDateObjectMapper);\n    }\n};\n","import { Kvittering } from 'app/types/Kvittering';\nimport { SøkerinfoDTO } from 'app/types/SøkerinfoDTO';\nimport { useGetRequest, usePostRequest } from 'app/utils/hooks/useRequest';\nimport { AxiosResponse } from 'axios';\nimport getAxiosInstance from './apiInterceptor';\nimport { storageParser } from './storageParser';\nimport Environment from 'app/Environment';\nimport { TilgjengeligeStønadskontoerDTO } from 'app/types/TilgjengeligeStønadskontoerDTO';\nimport { EndringssøknadForInnsending, SøknadForInnsending } from './apiUtils';\nimport {\n    Attachment,\n    BarnFraNesteSak,\n    Dekningsgrad,\n    EksisterendeSak,\n    Periode,\n    formaterDato,\n    hasValue,\n} from '@navikt/fp-common';\nimport { SakerOppslag } from 'app/types/SakerOppslag';\nimport { AnnenPartVedtakDTO } from 'app/types/AnnenPartVedtakDTO';\nimport { RequestStatus } from 'app/types/RequestState';\nimport SøknadRoutes from 'app/routes/routes';\nimport { Søknad } from 'app/context/types/Søknad';\nimport UttaksplanInfo from 'app/context/types/UttaksplanInfo';\n\nexport interface TilgjengeligeStønadskontoerParams {\n    antallBarn: string;\n    morHarRettINorge: boolean;\n    farHarRettINorge: boolean;\n    dekningsgrad: Dekningsgrad.HUNDRE_PROSENT | Dekningsgrad.ÅTTI_PROSENT;\n    termindato: string | undefined;\n    fødselsdato: string | undefined;\n    omsorgsovertakelsesdato: string | undefined;\n    morHarAleneomsorg: boolean | undefined;\n    farHarAleneomsorg: boolean | undefined;\n    startdatoUttak: string;\n    minsterett: boolean;\n    erMor: boolean;\n    morHarUføretrygd: boolean;\n    harAnnenForelderTilsvarendeRettEØS: boolean;\n    familieHendelseDatoNesteSak: string | undefined;\n}\n\nconst formaterStønadskontoParamsDatoer = (dato: string | undefined, datoformat?: string): string | undefined => {\n    return hasValue(dato) ? formaterDato(dato, datoformat) : undefined;\n};\n\nconst uttakBaseUrl = Environment.REST_API_URL;\nconst sendSøknadUrl = '/soknad';\nconst sendEndringssøknadUrl = '/soknad/endre';\n\nconst useSøkerinfo = () => {\n    const { data, error } = useGetRequest<SøkerinfoDTO>('/sokerinfo', { config: { withCredentials: true } });\n\n    return {\n        søkerinfoData: data,\n        søkerinfoError: error,\n    };\n};\n\nconst useGetSaker = () => {\n    const { data, error } = useGetRequest<SakerOppslag>('/innsyn/v2/saker', {\n        config: { withCredentials: true },\n    });\n\n    return {\n        sakerData: data,\n        sakerError: error,\n    };\n};\n\nconst useGetAnnenPartsVedtak = (\n    annenPartFnr: string | undefined,\n    barnFnr: string | undefined,\n    familiehendelsesdato: string | undefined,\n    isSuspended: boolean,\n) => {\n    const body = {\n        annenPartFødselsnummer: annenPartFnr,\n        barnFødselsnummer: barnFnr,\n        familiehendelse: familiehendelsesdato,\n    };\n    const { data, error, requestStatus } = usePostRequest<AnnenPartVedtakDTO>('/innsyn/v2/annenPartVedtak', body, {\n        config: {\n            withCredentials: true,\n        },\n        isSuspended,\n    });\n\n    if (error && error.message.includes('Ugyldig ident')) {\n        return {\n            eksisterendeSakAnnenPartData: undefined,\n            eksisterendeSakAnnenPartError: undefined,\n            eksisterendeSakAnnenPartRequestStatus: RequestStatus.FINISHED,\n        };\n    }\n    return {\n        eksisterendeSakAnnenPartData: data,\n        eksisterendeSakAnnenPartError: error,\n        eksisterendeSakAnnenPartRequestStatus: requestStatus,\n    };\n};\n\nexport interface FpMellomlagretData {\n    version: number;\n    currentRoute: SøknadRoutes;\n    søknad?: Partial<Søknad>;\n    antallUkerIUttaksplan?: number;\n    perioderSomSkalSendesInn?: Periode[];\n    harUttaksplanBlittSlettet?: boolean;\n    søknadGjelderEtNyttBarn?: boolean;\n    uttaksplanInfo?: UttaksplanInfo;\n    eksisterendeSak?: EksisterendeSak;\n    endringstidspunkt?: Date;\n    barnFraNesteSak?: BarnFraNesteSak;\n    annenPartsUttakErLagtTilIPlan?: boolean;\n}\n\nconst useStoredAppState = () => {\n    const { data, error, requestStatus } = useGetRequest<FpMellomlagretData>('/storage/foreldrepenger', {\n        config: { transformResponse: storageParser, withCredentials: true },\n    });\n\n    return {\n        storageData: data,\n        storageError: error,\n        storageStatus: requestStatus,\n    };\n};\n\nconst storeAppState = (dataSomSkalMellomlagres: FpMellomlagretData, fnr: string) => {\n    return getAxiosInstance(fnr).post('/storage/foreldrepenger', dataSomSkalMellomlagres, { withCredentials: true });\n};\n\nconst getStorageKvittering = (fnr: string): Promise<AxiosResponse<Kvittering>> => {\n    return getAxiosInstance(fnr).get('/storage/kvittering/foreldrepenger', {\n        withCredentials: true,\n        timeout: 15 * 1000,\n    });\n};\n\nconst useGetUttakskontoer = (params: TilgjengeligeStønadskontoerParams, isSuspended = false) => {\n    const {\n        antallBarn,\n        farHarRettINorge,\n        morHarRettINorge,\n        harAnnenForelderTilsvarendeRettEØS,\n        dekningsgrad,\n        fødselsdato,\n        termindato,\n        omsorgsovertakelsesdato,\n        morHarAleneomsorg,\n        farHarAleneomsorg,\n        startdatoUttak,\n        minsterett,\n        erMor,\n        morHarUføretrygd,\n        familieHendelseDatoNesteSak,\n    } = params;\n\n    const fpUttakServiceDateFormat = 'YYYYMMDD';\n\n    const urlParams = {\n        farHarRett: farHarRettINorge,\n        morHarRett: morHarRettINorge,\n        harAnnenForelderTilsvarendeRettEØS,\n        morHarAleneomsorg: morHarAleneomsorg || false,\n        farHarAleneomsorg: farHarAleneomsorg || false,\n        dekningsgrad,\n        antallBarn,\n        fødselsdato: formaterStønadskontoParamsDatoer(fødselsdato, fpUttakServiceDateFormat),\n        termindato: formaterStønadskontoParamsDatoer(termindato, fpUttakServiceDateFormat),\n        omsorgsovertakelseDato: formaterStønadskontoParamsDatoer(omsorgsovertakelsesdato, fpUttakServiceDateFormat),\n        startdatoUttak: formaterStønadskontoParamsDatoer(startdatoUttak, fpUttakServiceDateFormat),\n        minsterett,\n        erMor,\n        morHarUføretrygd,\n        familieHendelseDatoNesteSak: formaterStønadskontoParamsDatoer(\n            familieHendelseDatoNesteSak,\n            fpUttakServiceDateFormat,\n        ),\n    };\n\n    const { data, error } = useGetRequest<TilgjengeligeStønadskontoerDTO>(`${uttakBaseUrl}/konto`, {\n        config: {\n            timeout: 15 * 1000,\n            params: urlParams,\n            withCredentials: false,\n        },\n        isSuspended,\n    });\n\n    return {\n        tilgjengeligeStønadskontoerData: data,\n        tilgjengeligeStønadskontoerError: error,\n    };\n};\n\nconst sendSøknad = (søknad: SøknadForInnsending | EndringssøknadForInnsending, fnr: string, signal: AbortSignal) => {\n    const url = søknad.erEndringssøknad ? sendEndringssøknadUrl : sendSøknadUrl;\n\n    return getAxiosInstance(fnr).post(url, søknad, {\n        withCredentials: true,\n        timeout: 120 * 1000,\n        headers: {\n            'content-type': 'application/json;',\n        },\n        signal,\n    });\n};\n\nconst deleteMellomlagretSøknad = (fnr: string, signal?: AbortSignal) => {\n    return getAxiosInstance(fnr).delete('/storage/foreldrepenger', { withCredentials: true, signal });\n};\n\nconst deleteMellomlagredeVedlegg = (fnr: string, vedlegg: Attachment[], signal: AbortSignal) => {\n    const attachmentUUIDs = vedlegg.reduce((result: string[], current: Attachment) => {\n        if (current.uuid) {\n            result.push(current.uuid);\n        }\n\n        return result;\n    }, []);\n    return getAxiosInstance(fnr).delete('/storage/vedlegg', { withCredentials: true, data: attachmentUUIDs, signal });\n};\n\nconst Api = {\n    useGetUttakskontoer,\n    storeAppState,\n    getStorageKvittering,\n    useGetAnnenPartsVedtak,\n    useStoredAppState,\n    useSøkerinfo,\n    sendSøknad,\n    useGetSaker,\n    deleteMellomlagretSøknad,\n    deleteMellomlagredeVedlegg,\n};\n\nexport default Api;\n"],"names":["redirectToLogin","Environment","RequestStatus","DEFAULT_OPTIONS","useGetRequest","url","options","data","setData","useState","error","setError","requestStatus","setRequestStatus","axiosInstance","getAxiosInstance","useEffect","res","err","usePostRequest","body","dateStringToDateObjectMapper","_key","value","isISODateString","moment","storageParser","storageResponse","formaterStønadskontoParamsDatoer","dato","datoformat","hasValue","formaterDato","uttakBaseUrl","sendSøknadUrl","sendEndringssøknadUrl","useSøkerinfo","useGetSaker","useGetAnnenPartsVedtak","annenPartFnr","barnFnr","familiehendelsesdato","isSuspended","useStoredAppState","storeAppState","dataSomSkalMellomlagres","fnr","getStorageKvittering","useGetUttakskontoer","params","antallBarn","farHarRettINorge","morHarRettINorge","harAnnenForelderTilsvarendeRettEØS","dekningsgrad","fødselsdato","termindato","omsorgsovertakelsesdato","morHarAleneomsorg","farHarAleneomsorg","startdatoUttak","minsterett","erMor","morHarUføretrygd","familieHendelseDatoNesteSak","fpUttakServiceDateFormat","urlParams","sendSøknad","søknad","signal","deleteMellomlagretSøknad","deleteMellomlagredeVedlegg","vedlegg","attachmentUUIDs","result","current","Api"],"mappings":"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"}