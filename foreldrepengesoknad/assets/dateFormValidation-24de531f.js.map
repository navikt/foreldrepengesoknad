{"version":3,"file":"dateFormValidation-24de531f.js","sources":["../../../../packages/constants/src/dates.ts","../../../../packages/utils/src/countryUtils.ts","../../../../packages/utils/src/dateUtils.ts","../../../../packages/validation/src/form/generalFormValidation.ts","../../../../packages/validation/src/form/dateFormValidation.ts"],"sourcesContent":["import dayjs from 'dayjs';\n\nexport const ISO_DATE_FORMAT = 'YYYY-MM-DD';\nexport const DDMMYYYY_DATE_FORMAT = 'DD.MM.YYYY';\nexport const TIME_FORMAT = 'HH:mm';\n\n// TODO Er dette greie datoar eller bør ein velga noko anna?\nexport const TIDENES_MORGEN = dayjs('1000-01-01').toDate();\nexport const TIDENES_ENDE = dayjs('9999-31-12').toDate();\n\nexport const DATE_TODAY = dayjs().toDate();\nexport const SIX_MONTHS_AGO = dayjs().subtract(6, 'month').startOf('day').toDate();\nexport const DATE_1_YEAR_FROM_NOW = dayjs().add(1, 'years').toDate();\nexport const DATE_1_YEAR_AGO = dayjs().subtract(1, 'years').toDate();\n","import * as countries from 'i18n-iso-countries';\nimport * as langNB from 'i18n-iso-countries/langs/nb.json';\nimport * as langNN from 'i18n-iso-countries/langs/nn.json';\n\ncountries.registerLocale(langNB);\ncountries.registerLocale(langNN);\n\n/** Kilde:\n * https://www.nav.no/no/person/flere-tema/arbeid-og-opphold-i-utlandet/relatert-informasjon/eos-landene\n */\nexport const filteredListEØSCountries = (countryOptionValue: string, shouldFilter?: boolean) => {\n    if (shouldFilter) {\n        switch (countryOptionValue) {\n            case 'BE': // Belgia\n            case 'BG': // Bulgaria\n            case 'DK': // Danmark\n            case 'EE': // Estland\n            case 'FI': // Finland\n            case 'FR': // Frankrike\n            case 'GR': // Hellas\n            case 'IE': // Irland\n            case 'IS': // Island\n            case 'IT': // Italia\n            case 'HR': // Kroatia\n            case 'CY': // Kypros\n            case 'LV': // Latvia\n            case 'LI': // Liechtenstein\n            case 'LT': // Litauen\n            case 'LU': // Luxembourg\n            case 'MT': // Malta\n            case 'NL': // Nederland\n            case 'NO': // Norge\n            case 'PL': // Polen\n            case 'PT': // Portugal\n            case 'RO': // Romania\n            case 'SK': // Slovakia\n            case 'SI': // Slovenia\n            case 'ES': // Spania\n            case 'CH': // Sveits\n            case 'SE': // Sverige\n            case 'CZ': // Tsjekkia\n            case 'DE': // Tyskland\n            case 'HU': // Ungarn\n            case 'AT': // Østerrike\n                return true;\n            default:\n                return false;\n        }\n    } else {\n        // Filter ut Antarktis\n        return countryOptionValue !== 'AQ';\n    }\n};\n\nexport const getLocaleKey = (locale: string): string => {\n    switch (locale) {\n        case 'nn':\n        case 'no-NN':\n            return 'nn';\n        default:\n            return 'nb';\n    }\n};\n\nexport const getCountryName = (alphaCode: string, locale: string): string => {\n    // i18n-iso-countries 7.5.0 bruker 'XKX' 'alpha3Code' for Kosovo. 'XXK' kode brukes i NAV.\n    // Endrer NAV sin landkode av Kosovo til i18n-iso-countries sin landkode for å hente riktig landsnavn.\n    if (alphaCode === 'XXK') {\n        alphaCode = 'XKX';\n    }\n    return countries.getName(alphaCode, getLocaleKey(locale));\n};\n\nexport const getAlpha3Code = (alpha2Code: string) => {\n    const countryAlpha3Code = countries.alpha2ToAlpha3(alpha2Code).toUpperCase();\n\n    // i18n-iso-countries 7.5.0 bruker 'XKX' 'alpha3Code' for Kosovo. 'XXK' kode brukes i NAV.\n    // Endrer i18n-iso-countries sin landkode til landkode som brukes i NAV for å sende riktig kode videre.\n    return countryAlpha3Code === 'XKX' ? 'XXK' : countryAlpha3Code;\n};\n\nexport const countryIsMemberOfEøsOrEfta = (isoCode: string) => {\n    let isoCodeToUse = isoCode.toUpperCase();\n    if (isoCodeToUse === 'XXK') {\n        isoCodeToUse = 'XKX';\n    }\n    isoCodeToUse = isoCodeToUse.length === 2 ? isoCodeToUse : countries.alpha3ToAlpha2(isoCodeToUse);\n    return filteredListEØSCountries(isoCodeToUse.toUpperCase(), true) === true;\n};\n\nexport const getCountries = () => countries;\n\nexport const createCountryOptions = (): Record<string, any> => {\n    const lang = 'nb';\n    const countries = getCountries();\n\n    const names: Array<[string, any]> = Object.entries(countries.getNames(lang));\n    return names\n        .sort((a: string[], b: string[]) => a[1].localeCompare(b[1], lang))\n        .filter((countryOptionValue: string[]) => filteredListEØSCountries(countryOptionValue[0], false));\n};\n","import dayjs from 'dayjs';\nimport { DATE_TODAY, DDMMYYYY_DATE_FORMAT, ISO_DATE_FORMAT } from '@navikt/fp-constants';\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore';\nimport isSameOrAfter from 'dayjs/plugin/isSameOrAfter';\nimport isBetween from 'dayjs/plugin/isBetween';\nimport { TIME_FORMAT } from '@navikt/fp-constants/src/dates';\n\ndayjs.extend(isBetween);\ndayjs.extend(isSameOrBefore);\ndayjs.extend(isSameOrAfter);\n\ntype Period = { from: Date; to: Date };\n\ntype DateTypes = string | Date | dayjs.Dayjs;\nexport const formatDate = (date: Date | string) => dayjs(date).format(DDMMYYYY_DATE_FORMAT);\nexport const formatDateIso = (date: Date | string) => dayjs(date).format(ISO_DATE_FORMAT);\nexport const formatTime = (date: Date | string) => dayjs(date).format(TIME_FORMAT);\n\nexport const isToday = (date: DateTypes): boolean => dayjs(date).isSame(DATE_TODAY, 'day');\nexport const isAfterToday = (date: DateTypes): boolean => dayjs(date).isAfter(DATE_TODAY, 'day');\nexport const isBeforeToday = (date: DateTypes): boolean => dayjs(date).isBefore(DATE_TODAY, 'day');\nexport const isSameOrAfterToday = (date: DateTypes): boolean => dayjs(date).isSameOrAfter(DATE_TODAY, 'day');\nexport const isSameOrBeforeToday = (date: DateTypes): boolean => dayjs(date).isSameOrBefore(DATE_TODAY, 'day');\nexport const isDateASameOrBeforeDateB = (dateA: DateTypes, dateB: DateTypes): boolean =>\n    dayjs(dateA).isSameOrBefore(dateB, 'day');\nexport const isDateAAfterDateB = (dateA: DateTypes, dateB: DateTypes): boolean => dayjs(dateA).isAfter(dateB, 'day');\nexport const isDateWithinRange = (date: Date, minDate: Date, maxDate: Date): boolean =>\n    dayjs(date).isBetween(minDate, maxDate, 'day', '[]');\n\nexport const erMyndig = (fødselsdato: string) => {\n    const now = dayjs();\n    const momentDate = dayjs(fødselsdato);\n    return now.diff(momentDate, 'years') >= 18;\n};\n\nconst sortDateRange = (d1: Period, d2: Period) => {\n    return dayjs(d1.from).isSameOrBefore(d2.from) ? -1 : 1;\n};\n\nexport const isDateRangesOverlapping = (ranges: Period[]) => {\n    if (ranges.length > 0) {\n        const sortedDates = [...ranges].sort(sortDateRange);\n        const hasOverlap = sortedDates.find((d, idx) => {\n            if (idx < sortedDates.length - 1) {\n                return dayjs(d.to).isSameOrAfter(sortedDates[idx + 1].from);\n            }\n            return false;\n        });\n        return hasOverlap !== undefined;\n    }\n    return false;\n};\n","import dayjs from 'dayjs';\n\nexport const isEmpty = (text?: string | number | boolean | dayjs.Dayjs | null) =>\n    text === null || text === undefined || text.toString().trim().length === 0;\n\nexport type FormValidationResult = string | null;\n\nexport const isRequired =\n    (i18nText: string) =>\n    (value?: string | number): FormValidationResult =>\n        isEmpty(value) ? i18nText : null;\n","import dayjs from 'dayjs';\nimport { DATE_TODAY, SIX_MONTHS_AGO, TIDENES_ENDE } from '@navikt/fp-constants';\nimport { isDateRangesOverlapping, isDateWithinRange as isDateWithinRangeUtil } from '@navikt/fp-utils';\nimport isBetween from 'dayjs/plugin/isBetween';\nimport { FormValidationResult, isEmpty } from './generalFormValidation';\n\ndayjs.extend(isBetween);\n\nconst ATTEN_UKER_TRE_DAGER = dayjs().add(18, 'week').add(3, 'day').startOf('day').toDate();\nconst DATO_FOR_3_UKER_SIDEN = dayjs().startOf('day').subtract(21, 'days');\nconst ONE_YEAR_AFTER_TODAY = dayjs().add(1, 'year').startOf('day').toDate();\n\nconst ISO_DATE_REGEX = /(19|20)\\d{2}-(0?[1-9]|1[0-2])-(0?[1-9]|1\\d|2\\d|3[01])$/;\n\nexport const isValidDate =\n    (i18nText: string) =>\n    (date: string): FormValidationResult =>\n        isEmpty(date) || ISO_DATE_REGEX.test(date) ? null : i18nText;\n\nexport const isBeforeTodayOrToday =\n    (i18nText: string) =>\n    (date: string): FormValidationResult =>\n        dayjs(date).isAfter(DATE_TODAY) ? i18nText : null;\n\nexport const isBeforeOrSame =\n    (i18nText: string, endDate: string) =>\n    (startDate: string): FormValidationResult =>\n        endDate && dayjs(startDate).isAfter(endDate, 'day') ? i18nText : null;\n\nexport const isAfterOrSameAsSixMonthsAgo =\n    (i18nText: string) =>\n    (date: string): FormValidationResult =>\n        dayjs(date).isBefore(SIX_MONTHS_AGO) ? i18nText : null;\n\nexport const isAfterOrSame =\n    (i18nText: string, fromDate: string) =>\n    (endDate: string): FormValidationResult =>\n        fromDate && dayjs(endDate).isBefore(fromDate, 'day') ? i18nText : null;\n\nexport const isDatesNotTheSame =\n    (i18nText: string, date1?: string) =>\n    (date2?: string): FormValidationResult =>\n        date1 && date2 && dayjs(date1).isSame(date2, 'day') ? i18nText : null;\n\nexport const isLessThanThreeWeeksAgo =\n    (i18nText: string) =>\n    (date: string): FormValidationResult => {\n        return dayjs(date).isBefore(DATO_FOR_3_UKER_SIDEN) ? i18nText : null;\n    };\n\nexport const erI22SvangerskapsukeEllerSenere =\n    (i18nText: string) =>\n    (date: string): FormValidationResult =>\n        dayjs(date).isAfter(ATTEN_UKER_TRE_DAGER) ? i18nText : null;\n\nexport const isMaxOneYearIntoTheFuture =\n    (i18nText: string) =>\n    (date: string): FormValidationResult =>\n        dayjs(date).isAfter(ONE_YEAR_AFTER_TODAY) ? i18nText : null;\n\nexport const isDateWithinRange =\n    (i18nText: string, start: Date, end: Date) =>\n    (date: string): FormValidationResult =>\n        isDateWithinRangeUtil(dayjs(date).toDate(), start, end) ? null : i18nText;\n\nexport const isPeriodNotOverlappingOthers =\n    (\n        i18nText: string,\n        otherDateInfo: { date: Date | string; isStartDate: boolean },\n        otherPeriods: Array<{ fom: Date | string; tom: Date | string }>,\n    ) =>\n    (date: string): FormValidationResult => {\n        const dateRanges = otherPeriods\n            .filter((u) => u.fom)\n            .map((u) => ({\n                from: dayjs(u.fom).toDate(),\n                to: u.tom ? dayjs(u.tom).toDate() : TIDENES_ENDE,\n            }));\n\n        const toDate = otherDateInfo.isStartDate ? date : otherDateInfo.date;\n\n        const allDateRanges = dateRanges.concat({\n            from: dayjs(otherDateInfo.isStartDate ? otherDateInfo.date : date).toDate(),\n            to: toDate ? dayjs(toDate).toDate() : TIDENES_ENDE,\n        });\n\n        return isDateRangesOverlapping(allDateRanges) ? i18nText : null;\n    };\n"],"names":["ISO_DATE_FORMAT","DDMMYYYY_DATE_FORMAT","TIDENES_MORGEN","dayjs","TIDENES_ENDE","DATE_TODAY","DATE_1_YEAR_FROM_NOW","DATE_1_YEAR_AGO","countries.registerLocale","langNB","langNN","filteredListEØSCountries","countryOptionValue","shouldFilter","getCountries","countries","createCountryOptions","lang","a","b","isBetween","isSameOrBefore","isSameOrAfter","formatDate","date","isSameOrAfterToday","isDateAAfterDateB","dateA","dateB","isDateWithinRange","minDate","maxDate","sortDateRange","d1","d2","isDateRangesOverlapping","ranges","sortedDates","d","idx","isEmpty","text","isRequired","i18nText","value","ISO_DATE_REGEX","isValidDate","isBeforeOrSame","endDate","startDate","isAfterOrSame","fromDate","isDatesNotTheSame","date1","date2","start","end","isDateWithinRangeUtil","isPeriodNotOverlappingOthers","otherDateInfo","otherPeriods","dateRanges","u","toDate","allDateRanges"],"mappings":"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"}