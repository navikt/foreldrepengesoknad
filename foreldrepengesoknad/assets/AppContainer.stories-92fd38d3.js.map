{"version":3,"file":"AppContainer.stories-92fd38d3.js","sources":["../../../../packages/fp-common/src/common/utils/localeUtils.ts","../../../../node_modules/.pnpm/detect-browser@5.3.0/node_modules/detect-browser/es/index.js","../../../../packages/utils/src/loginUtils.ts","../../src/app/pages/ikkeMyndig/IkkeMyndig.tsx","../../src/app/utils/hooks/useDebounce.ts","../../src/app/utils/submitUtils.ts","../../src/app/steps/uttaksplan/components/vil-du-gå-tilbake-modal/VilDuGåTilbakeModal.tsx","../../src/app/steps/uttaksplan/UttaksplanFormConfig.ts","../../src/app/steps/uttaksplan/UttaksplanFormUtils.ts","../../src/app/steps/uttaksplan/automatisk-justering-form/automatiskJusteringUtils.ts","../../src/app/steps/uttaksplan/automatisk-justering-form/AutomatiskJusteringForm.tsx","../../src/app/steps/uttaksplan/uttaksplanQuestionConfig.ts","../../src/app/steps/uttaksplan/UttaksplanStep.tsx","../../src/app/routes/isAvailable.ts","../../src/app/context/useMellomlagreSøknad.ts","../../src/app/context/useSendSøknad.ts","../../src/app/context/useAvbrytSøknad.ts","../../src/app/routes/ForeldrepengesøknadRoutes.tsx","../../src/app/utils/mellomlagringUtils.ts","../../src/app/context/konverterMellomlagretDataTilAppData.ts","../../src/app/errorBoundary/ErrorBoundary.tsx","../../src/app/Foreldrepengesøknad.tsx","../../src/app/utils/browserUtils.ts","../../src/app/AppContainer.tsx"],"sourcesContent":["import { LocaleAll } from '@navikt/fp-types';\n\nconst LocaleSessionKey = 'selectedLocale';\n\nexport const getLocaleFromSessionStorage = <T extends LocaleAll>(): T => {\n    return (sessionStorage.getItem(LocaleSessionKey) as T) || 'nb';\n};\n\nexport const setLocaleInSessionStorage = (locale: LocaleAll): void => {\n    sessionStorage.setItem(LocaleSessionKey, locale);\n};\n\nexport const getNynorskLocale = () => {\n    if (Intl.NumberFormat.supportedLocalesOf('no-NN').length > 0) {\n        return 'no-NN';\n    }\n    return 'nn';\n};\n\nexport const getBokmålLocale = () => {\n    if (Intl.NumberFormat.supportedLocalesOf('no-NB').length > 0) {\n        return 'no-NB';\n    }\n    return 'nb';\n};\n\nexport const getLocaleForApi = (locale: string): LocaleAll => {\n    switch (locale) {\n        case 'nn':\n        case 'no-NN':\n            return 'nn';\n        default:\n            return 'nb';\n    }\n};\n","var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar BrowserInfo = /** @class */ (function () {\n    function BrowserInfo(name, version, os) {\n        this.name = name;\n        this.version = version;\n        this.os = os;\n        this.type = 'browser';\n    }\n    return BrowserInfo;\n}());\nexport { BrowserInfo };\nvar NodeInfo = /** @class */ (function () {\n    function NodeInfo(version) {\n        this.version = version;\n        this.type = 'node';\n        this.name = 'node';\n        this.os = process.platform;\n    }\n    return NodeInfo;\n}());\nexport { NodeInfo };\nvar SearchBotDeviceInfo = /** @class */ (function () {\n    function SearchBotDeviceInfo(name, version, os, bot) {\n        this.name = name;\n        this.version = version;\n        this.os = os;\n        this.bot = bot;\n        this.type = 'bot-device';\n    }\n    return SearchBotDeviceInfo;\n}());\nexport { SearchBotDeviceInfo };\nvar BotInfo = /** @class */ (function () {\n    function BotInfo() {\n        this.type = 'bot';\n        this.bot = true; // NOTE: deprecated test name instead\n        this.name = 'bot';\n        this.version = null;\n        this.os = null;\n    }\n    return BotInfo;\n}());\nexport { BotInfo };\nvar ReactNativeInfo = /** @class */ (function () {\n    function ReactNativeInfo() {\n        this.type = 'react-native';\n        this.name = 'react-native';\n        this.version = null;\n        this.os = null;\n    }\n    return ReactNativeInfo;\n}());\nexport { ReactNativeInfo };\n// tslint:disable-next-line:max-line-length\nvar SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;\nvar SEARCHBOT_OS_REGEX = /(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\\ Jeeves\\/Teoma|ia_archiver)/;\nvar REQUIRED_VERSION_PARTS = 3;\nvar userAgentRules = [\n    ['aol', /AOLShield\\/([0-9\\._]+)/],\n    ['edge', /Edge\\/([0-9\\._]+)/],\n    ['edge-ios', /EdgiOS\\/([0-9\\._]+)/],\n    ['yandexbrowser', /YaBrowser\\/([0-9\\._]+)/],\n    ['kakaotalk', /KAKAOTALK\\s([0-9\\.]+)/],\n    ['samsung', /SamsungBrowser\\/([0-9\\.]+)/],\n    ['silk', /\\bSilk\\/([0-9._-]+)\\b/],\n    ['miui', /MiuiBrowser\\/([0-9\\.]+)$/],\n    ['beaker', /BeakerBrowser\\/([0-9\\.]+)/],\n    ['edge-chromium', /EdgA?\\/([0-9\\.]+)/],\n    [\n        'chromium-webview',\n        /(?!Chrom.*OPR)wv\\).*Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/,\n    ],\n    ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9\\.]+)(:?\\s|$)/],\n    ['phantomjs', /PhantomJS\\/([0-9\\.]+)(:?\\s|$)/],\n    ['crios', /CriOS\\/([0-9\\.]+)(:?\\s|$)/],\n    ['firefox', /Firefox\\/([0-9\\.]+)(?:\\s|$)/],\n    ['fxios', /FxiOS\\/([0-9\\.]+)/],\n    ['opera-mini', /Opera Mini.*Version\\/([0-9\\.]+)/],\n    ['opera', /Opera\\/([0-9\\.]+)(?:\\s|$)/],\n    ['opera', /OPR\\/([0-9\\.]+)(:?\\s|$)/],\n    ['pie', /^Microsoft Pocket Internet Explorer\\/(\\d+\\.\\d+)$/],\n    ['pie', /^Mozilla\\/\\d\\.\\d+\\s\\(compatible;\\s(?:MSP?IE|MSInternet Explorer) (\\d+\\.\\d+);.*Windows CE.*\\)$/],\n    ['netfront', /^Mozilla\\/\\d\\.\\d+.*NetFront\\/(\\d.\\d)/],\n    ['ie', /Trident\\/7\\.0.*rv\\:([0-9\\.]+).*\\).*Gecko$/],\n    ['ie', /MSIE\\s([0-9\\.]+);.*Trident\\/[4-7].0/],\n    ['ie', /MSIE\\s(7\\.0)/],\n    ['bb10', /BB10;\\sTouch.*Version\\/([0-9\\.]+)/],\n    ['android', /Android\\s([0-9\\.]+)/],\n    ['ios', /Version\\/([0-9\\._]+).*Mobile.*Safari.*/],\n    ['safari', /Version\\/([0-9\\._]+).*Safari/],\n    ['facebook', /FB[AS]V\\/([0-9\\.]+)/],\n    ['instagram', /Instagram\\s([0-9\\.]+)/],\n    ['ios-webview', /AppleWebKit\\/([0-9\\.]+).*Mobile/],\n    ['ios-webview', /AppleWebKit\\/([0-9\\.]+).*Gecko\\)$/],\n    ['curl', /^curl\\/([0-9\\.]+)$/],\n    ['searchbot', SEARCHBOX_UA_REGEX],\n];\nvar operatingSystemRules = [\n    ['iOS', /iP(hone|od|ad)/],\n    ['Android OS', /Android/],\n    ['BlackBerry OS', /BlackBerry|BB10/],\n    ['Windows Mobile', /IEMobile/],\n    ['Amazon OS', /Kindle/],\n    ['Windows 3.11', /Win16/],\n    ['Windows 95', /(Windows 95)|(Win95)|(Windows_95)/],\n    ['Windows 98', /(Windows 98)|(Win98)/],\n    ['Windows 2000', /(Windows NT 5.0)|(Windows 2000)/],\n    ['Windows XP', /(Windows NT 5.1)|(Windows XP)/],\n    ['Windows Server 2003', /(Windows NT 5.2)/],\n    ['Windows Vista', /(Windows NT 6.0)/],\n    ['Windows 7', /(Windows NT 6.1)/],\n    ['Windows 8', /(Windows NT 6.2)/],\n    ['Windows 8.1', /(Windows NT 6.3)/],\n    ['Windows 10', /(Windows NT 10.0)/],\n    ['Windows ME', /Windows ME/],\n    ['Windows CE', /Windows CE|WinCE|Microsoft Pocket Internet Explorer/],\n    ['Open BSD', /OpenBSD/],\n    ['Sun OS', /SunOS/],\n    ['Chrome OS', /CrOS/],\n    ['Linux', /(Linux)|(X11)/],\n    ['Mac OS', /(Mac_PowerPC)|(Macintosh)/],\n    ['QNX', /QNX/],\n    ['BeOS', /BeOS/],\n    ['OS/2', /OS\\/2/],\n];\nexport function detect(userAgent) {\n    if (!!userAgent) {\n        return parseUserAgent(userAgent);\n    }\n    if (typeof document === 'undefined' &&\n        typeof navigator !== 'undefined' &&\n        navigator.product === 'ReactNative') {\n        return new ReactNativeInfo();\n    }\n    if (typeof navigator !== 'undefined') {\n        return parseUserAgent(navigator.userAgent);\n    }\n    return getNodeVersion();\n}\nfunction matchUserAgent(ua) {\n    // opted for using reduce here rather than Array#first with a regex.test call\n    // this is primarily because using the reduce we only perform the regex\n    // execution once rather than once for the test and for the exec again below\n    // probably something that needs to be benchmarked though\n    return (ua !== '' &&\n        userAgentRules.reduce(function (matched, _a) {\n            var browser = _a[0], regex = _a[1];\n            if (matched) {\n                return matched;\n            }\n            var uaMatch = regex.exec(ua);\n            return !!uaMatch && [browser, uaMatch];\n        }, false));\n}\nexport function browserName(ua) {\n    var data = matchUserAgent(ua);\n    return data ? data[0] : null;\n}\nexport function parseUserAgent(ua) {\n    var matchedRule = matchUserAgent(ua);\n    if (!matchedRule) {\n        return null;\n    }\n    var name = matchedRule[0], match = matchedRule[1];\n    if (name === 'searchbot') {\n        return new BotInfo();\n    }\n    // Do not use RegExp for split operation as some browser do not support it (See: http://blog.stevenlevithan.com/archives/cross-browser-split)\n    var versionParts = match[1] && match[1].split('.').join('_').split('_').slice(0, 3);\n    if (versionParts) {\n        if (versionParts.length < REQUIRED_VERSION_PARTS) {\n            versionParts = __spreadArray(__spreadArray([], versionParts, true), createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length), true);\n        }\n    }\n    else {\n        versionParts = [];\n    }\n    var version = versionParts.join('.');\n    var os = detectOS(ua);\n    var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua);\n    if (searchBotMatch && searchBotMatch[1]) {\n        return new SearchBotDeviceInfo(name, version, os, searchBotMatch[1]);\n    }\n    return new BrowserInfo(name, version, os);\n}\nexport function detectOS(ua) {\n    for (var ii = 0, count = operatingSystemRules.length; ii < count; ii++) {\n        var _a = operatingSystemRules[ii], os = _a[0], regex = _a[1];\n        var match = regex.exec(ua);\n        if (match) {\n            return os;\n        }\n    }\n    return null;\n}\nexport function getNodeVersion() {\n    var isNode = typeof process !== 'undefined' && process.version;\n    return isNode ? new NodeInfo(process.version.slice(1)) : null;\n}\nfunction createVersionParts(count) {\n    var output = [];\n    for (var ii = 0; ii < count; ii++) {\n        output.push('0');\n    }\n    return output;\n}\n","export const redirect = (url: string) => {\n    window.location.href = url;\n};\n\nexport const redirectToLogin = (loginUrl: string) => {\n    redirect(loginUrl + '?redirect=' + window.location.origin);\n};\n","import { Søkerinfo, intlUtils, links } from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport Feilside from '../feilside/Feilside';\n\ninterface Props {\n    søkerInfo: Søkerinfo;\n}\n\nconst IkkeMyndig: FunctionComponent<Props> = ({ søkerInfo }) => {\n    const intl = useIntl();\n    return (\n        <Feilside\n            dokumenttittel=\"NAV Foreldrepengesøknad\"\n            ingress={intlUtils(intl, 'velkommen.ingress')}\n            tittel={intlUtils(intl, 'velkommen.tittel')}\n            søkerInfo={søkerInfo}\n            illustrasjon={{\n                tittel: intlUtils(intl, 'velkommen.ikkeMyndig.tittel', {\n                    navn: søkerInfo.person.fornavn.toLowerCase(),\n                }),\n                tekst: intlUtils(intl, 'velkommen.ikkeMyndig.ingress'),\n                lenke: {\n                    tekst: intlUtils(intl, 'velkommen.ikkeMyndig.boblelenketekst'),\n                    url: links.papirsøknad,\n                },\n            }}\n            skalKunneGåTilbakeTilSøknad={false}\n        />\n    );\n};\n\nexport default IkkeMyndig;\n","import { useState, useEffect } from 'react';\n\nconst useDebounce = (value: any, delay: number) => {\n    const [debouncedValue, setDebouncedValue] = useState(value);\n\n    useEffect(() => {\n        const handler = setTimeout(() => {\n            setDebouncedValue(value);\n        }, delay);\n\n        return () => {\n            clearTimeout(handler);\n        };\n    }, [value, delay]);\n\n    return debouncedValue;\n};\n\nexport default useDebounce;\n","import dayjs from 'dayjs';\nimport {\n    Forelder,\n    Periode,\n    Periodetype,\n    Utsettelsesperiode,\n    UtsettelseÅrsakType,\n    dateIsWithinRange,\n    guid,\n    isOppholdsperiode,\n    isOverføringsperiode,\n    isUtsettelsesperiode,\n    isUttaksperiode,\n} from '@navikt/fp-common';\n\nexport const erPeriodeSomSkalSendesInn = (periode: Periode): boolean => {\n    return (\n        isUttaksperiode(periode) ||\n        isOverføringsperiode(periode) ||\n        isUtsettelsesperiode(periode) ||\n        isOppholdsperiode(periode)\n    );\n};\n\nexport const getPerioderSomSkalSendesInn = (\n    nyPlan: Periode[],\n    erEndringssøknad: boolean,\n    erFarEllerMedmor: boolean,\n    opprinneligPlan?: Periode[],\n    endringstidspunkt?: Date,\n): Periode[] => {\n    if (opprinneligPlan) {\n        return erEndringssøknad\n            ? getEndretUttaksplanForInnsending(opprinneligPlan, nyPlan, endringstidspunkt, erFarEllerMedmor)\n            : nyPlan.filter(erPeriodeSomSkalSendesInn);\n    }\n    return nyPlan;\n};\n\nexport const finnEndringerIUttaksplan = (\n    opprinneligPlan: Periode[],\n    nyPlan: Periode[],\n    endringstidspunkt: Date,\n    erFarEllerMedmor: boolean,\n): Periode[] => {\n    const nyPlanForInnsending = nyPlan\n        .filter(\n            (p) =>\n                dateIsWithinRange(endringstidspunkt, p.tidsperiode.fom, p.tidsperiode.tom) ||\n                dayjs(p.tidsperiode.fom).isSameOrAfter(dayjs(endringstidspunkt), 'day'),\n        )\n        .filter(erPeriodeSomSkalSendesInn);\n\n    if (nyPlanForInnsending.length === 0 && opprinneligPlan.length > nyPlan.length) {\n        const førsteSlettedePeriode = opprinneligPlan.find((p) =>\n            dayjs(p.tidsperiode.fom).isSame(endringstidspunkt, 'day'),\n        );\n        const utsettelseForSlettedePerioder = {\n            id: guid(),\n            type: Periodetype.Utsettelse,\n            tidsperiode: {\n                fom: førsteSlettedePeriode!.tidsperiode.fom,\n                tom: førsteSlettedePeriode!.tidsperiode.tom,\n            },\n            årsak: UtsettelseÅrsakType.Fri,\n            forelder: erFarEllerMedmor ? Forelder.farMedmor : Forelder.mor,\n            erArbeidstaker: false,\n        } as Utsettelsesperiode;\n        return [utsettelseForSlettedePerioder];\n    } else {\n        return nyPlanForInnsending;\n    }\n};\n\nconst getEndretUttaksplanForInnsending = (\n    opprinneligPlan: Periode[],\n    nyPlan: Periode[],\n    endringstidspunkt: Date | undefined,\n    erSøkerFarEllerMedmor: boolean,\n): Periode[] => {\n    if (endringstidspunkt === undefined) {\n        return [];\n    }\n\n    return finnEndringerIUttaksplan(opprinneligPlan, nyPlan, endringstidspunkt, erSøkerFarEllerMedmor);\n};\n","import { bemUtils, Block, intlUtils } from '@navikt/fp-common';\nimport { Dispatch, FunctionComponent, SetStateAction } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { BodyShort, Button, Heading, Modal } from '@navikt/ds-react';\n\nimport './vilDuGåTilbakeModal.less';\n\ninterface Props {\n    isOpen: boolean;\n    setIsOpen: Dispatch<SetStateAction<boolean>>;\n    goToPreviousStep: () => void;\n}\n\nconst VilDuGåTilbakeModal: FunctionComponent<Props> = ({ isOpen, setIsOpen, goToPreviousStep }) => {\n    const intl = useIntl();\n    const bem = bemUtils('vilDuGåTilbakeModal');\n\n    return (\n        <Modal\n            className={bem.block}\n            aria-label={'Vil du gå tilbake'}\n            closeButton={false}\n            open={isOpen}\n            onClose={() => setIsOpen(false)}\n        >\n            <Block padBottom=\"l\">\n                <Heading size=\"small\" as=\"h1\">\n                    {intlUtils(intl, 'uttaksplan.vilDuGåTilbakeModal.tittel')}\n                </Heading>\n            </Block>\n            <Block padBottom=\"l\">\n                <BodyShort>{intlUtils(intl, 'uttaksplan.vilDuGåTilbakeModal.intro')}</BodyShort>\n            </Block>\n            <Block padBottom=\"l\">\n                <BodyShort>{intlUtils(intl, 'uttaksplan.vilDuGåTilbakeModal.spørsmål')}</BodyShort>\n            </Block>\n            <div className={bem.element('knapperad')}>\n                <Button onClick={goToPreviousStep}>\n                    <FormattedMessage id=\"uttaksplan.vilDuGåTilbakeModal.okLabel\" />\n                </Button>\n                <Button variant=\"secondary\" onClick={() => setIsOpen(false)}>\n                    <FormattedMessage id=\"uttaksplan.vilDuGåTilbakeModal.avbrytLabel\" />\n                </Button>\n            </div>\n        </Modal>\n    );\n};\n\nexport default VilDuGåTilbakeModal;\n","import { YesOrNo, getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\n\nexport enum UttaksplanFormField {\n    ønskerAutomatiskJustering = 'ønskerAutomatiskJustering',\n}\n\nexport interface UttaksplanFormData {\n    [UttaksplanFormField.ønskerAutomatiskJustering]: YesOrNo;\n}\n\nexport const UttaksplanFormComponents = getTypedFormComponents<UttaksplanFormField, UttaksplanFormData>();\n","import { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { UttaksplanFormData, UttaksplanFormField } from './UttaksplanFormConfig';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\nimport { convertBooleanOrUndefinedToYesOrNo, convertYesOrNoOrUndefinedToBoolean } from '@navikt/fp-common';\n\nexport const cleanUttaksplanFormData = (\n    values: UttaksplanFormData,\n    visibility: QuestionVisibility<UttaksplanFormField, undefined>,\n): UttaksplanFormData => {\n    const cleanedData: UttaksplanFormData = {\n        ønskerAutomatiskJustering: visibility.isVisible(UttaksplanFormField.ønskerAutomatiskJustering)\n            ? values.ønskerAutomatiskJustering\n            : YesOrNo.UNANSWERED,\n    };\n\n    return cleanedData;\n};\n\nexport const mapUttaksplanFormToState = (values: Partial<UttaksplanFormData>): boolean | undefined => {\n    return convertYesOrNoOrUndefinedToBoolean(values.ønskerAutomatiskJustering);\n};\n\nexport const mapUttaksplanFormValueToState = (value: YesOrNo): boolean | undefined => {\n    return convertYesOrNoOrUndefinedToBoolean(value);\n};\n\nexport const getUttaksplanFormInitialValues = (ønskerAutomatiskJustering: boolean | undefined): UttaksplanFormData => {\n    return {\n        ønskerAutomatiskJustering:\n            ønskerAutomatiskJustering !== undefined\n                ? convertBooleanOrUndefinedToYesOrNo(ønskerAutomatiskJustering)\n                : YesOrNo.UNANSWERED,\n    };\n};\n","import {\n    Barn,\n    BarnType,\n    Forelder,\n    Periode,\n    Situasjon,\n    StønadskontoType,\n    Uttaksdagen,\n    andreAugust2022ReglerGjelder,\n    isUfødtBarn,\n    isUttaksperiode,\n} from '@navikt/fp-common';\nimport dayjs from 'dayjs';\n\nexport const getKanPeriodenRundtFødselJusteres = (\n    periodeRundtFødsel: Periode,\n    termindato: Date | undefined,\n): boolean => {\n    return (\n        termindato !== undefined &&\n        isUttaksperiode(periodeRundtFødsel) &&\n        dayjs(periodeRundtFødsel.tidsperiode.fom).isSame(Uttaksdagen(termindato).denneEllerNeste(), 'day') &&\n        periodeRundtFødsel.forelder === Forelder.farMedmor &&\n        periodeRundtFødsel.konto === StønadskontoType.Fedrekvote &&\n        periodeRundtFødsel.ønskerSamtidigUttak === true &&\n        periodeRundtFødsel.ønskerFlerbarnsdager !== true\n    );\n};\n\nexport const getKanJustereAutomatiskVedFødsel = (\n    perioderMedUttakRundtFødsel: Periode[],\n    termindato: Date | undefined,\n    erFarEllerMedmor: boolean,\n    barn: Barn,\n): boolean => {\n    return (\n        barn.type === BarnType.UFØDT &&\n        erFarEllerMedmor &&\n        perioderMedUttakRundtFødsel.length === 1 &&\n        getKanPeriodenRundtFødselJusteres(perioderMedUttakRundtFødsel[0], termindato)\n    );\n};\n\nexport const getVisAutomatiskJusteringForm = (\n    erFarEllerMedmor: boolean,\n    familiehendelsesdato: Date,\n    situasjon: Situasjon,\n    perioderMedUttakRundtFødsel: Periode[],\n    barn: Barn,\n    termindato: Date | undefined,\n    bareFarHarRett: boolean,\n): boolean => {\n    return (\n        erFarEllerMedmor &&\n        andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n        situasjon === 'fødsel' &&\n        perioderMedUttakRundtFødsel.length !== 0 &&\n        isUfødtBarn(barn) &&\n        termindato !== undefined &&\n        !bareFarHarRett\n    );\n};\n","import { FunctionComponent } from 'react';\nimport dayjs from 'dayjs';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Alert } from '@navikt/ds-react';\nimport { Block, Periode, StønadskontoType, intlUtils, isOverføringsperiode, isUttaksperiode } from '@navikt/fp-common';\nimport { Uttaksdagen } from '@navikt/fp-common/src/common/utils/Uttaksdagen';\nimport { notEmpty } from '@navikt/fp-validation';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { ContextDataType, useContextGetData, useContextSaveData } from 'app/context/FpDataContext';\nimport { UttaksplanFormComponents, UttaksplanFormField } from 'app/steps/uttaksplan/UttaksplanFormConfig';\nimport { mapUttaksplanFormValueToState } from 'app/steps/uttaksplan/UttaksplanFormUtils';\n\ninterface Props {\n    termindato: Date;\n    perioderMedUttakRundtFødsel: Periode[];\n    antallBarn: number;\n    visibility: QuestionVisibility<UttaksplanFormField, undefined>;\n}\nconst AutomatiskJusteringForm: FunctionComponent<Props> = ({\n    termindato,\n    perioderMedUttakRundtFødsel,\n    antallBarn,\n    visibility,\n}) => {\n    const intl = useIntl();\n    const uttaksdagPåEllerEtterTermin = Uttaksdagen(termindato).denneEllerNeste();\n\n    const uttaksplanMetadata = notEmpty(useContextGetData(ContextDataType.UTTAKSPLAN_METADATA));\n\n    const oppdaterUttaksplanMetadata = useContextSaveData(ContextDataType.UTTAKSPLAN_METADATA);\n    const brukerSvarteJaPåAutoJustering = uttaksplanMetadata.ønskerJustertUttakVedFødsel;\n\n    const svarteJaMenFlerePerioderInnen6Uker = brukerSvarteJaPåAutoJustering && perioderMedUttakRundtFødsel.length > 1;\n    const svarteJaMenStarterIkkeLengerPåTermin =\n        brukerSvarteJaPåAutoJustering &&\n        perioderMedUttakRundtFødsel.length === 1 &&\n        !dayjs(perioderMedUttakRundtFødsel[0].tidsperiode.fom).isSame(uttaksdagPåEllerEtterTermin, 'day');\n    const svarteJaMenEndretPeriodenPåTermin =\n        brukerSvarteJaPåAutoJustering &&\n        perioderMedUttakRundtFødsel.length === 1 &&\n        dayjs(perioderMedUttakRundtFødsel[0].tidsperiode.fom).isSame(uttaksdagPåEllerEtterTermin, 'day') &&\n        ((isUttaksperiode(perioderMedUttakRundtFødsel[0]) &&\n            (perioderMedUttakRundtFødsel[0].konto !== StønadskontoType.Fedrekvote ||\n                !perioderMedUttakRundtFødsel[0].ønskerSamtidigUttak)) ||\n            isOverføringsperiode(perioderMedUttakRundtFødsel[0]));\n    const svarteJaMenEndretPeriodenTilØnskerFlerbarnsdager =\n        brukerSvarteJaPåAutoJustering &&\n        perioderMedUttakRundtFødsel.length === 1 &&\n        dayjs(perioderMedUttakRundtFødsel[0].tidsperiode.fom).isSame(uttaksdagPåEllerEtterTermin, 'day') &&\n        isUttaksperiode(perioderMedUttakRundtFødsel[0]) &&\n        perioderMedUttakRundtFødsel[0].konto === StønadskontoType.Fedrekvote &&\n        perioderMedUttakRundtFødsel[0].ønskerFlerbarnsdager === true;\n\n    let infoTekstId = '';\n    if (svarteJaMenFlerePerioderInnen6Uker) {\n        infoTekstId = 'uttaksplan.automatiskJustering.info.hvisFlerePerioder';\n    }\n    if (svarteJaMenStarterIkkeLengerPåTermin) {\n        infoTekstId = 'uttaksplan.automatiskJustering.info.hvisIkkeLengerStarterPåTermin';\n    }\n\n    if (svarteJaMenEndretPeriodenPåTermin) {\n        infoTekstId = 'uttaksplan.automatiskJustering.info.hvisEndretPeriodePåTermin';\n    }\n    if (svarteJaMenEndretPeriodenTilØnskerFlerbarnsdager) {\n        infoTekstId = 'uttaksplan.automatiskJustering.info.hvisEndretPeriodeTilØnskerFlerbarnsdager';\n    }\n\n    const handleOnChange = (value: string) => {\n        const ønskerJustertUttakVedFødsel = mapUttaksplanFormValueToState(value as YesOrNo);\n        oppdaterUttaksplanMetadata({\n            ...uttaksplanMetadata,\n            ønskerJustertUttakVedFødsel: ønskerJustertUttakVedFødsel,\n        });\n    };\n\n    return (\n        <UttaksplanFormComponents.Form includeButtons={false}>\n            <div style={{ paddingTop: '1rem', paddingBottom: '1rem' }}>\n                {infoTekstId !== '' && (\n                    <Block padBottom=\"l\">\n                        <Alert variant=\"info\">\n                            <FormattedMessage id={infoTekstId} />\n                        </Alert>\n                    </Block>\n                )}\n                <Block visible={visibility.isVisible(UttaksplanFormField.ønskerAutomatiskJustering)} padBottom=\"l\">\n                    <UttaksplanFormComponents.YesOrNoQuestion\n                        name={UttaksplanFormField.ønskerAutomatiskJustering}\n                        legend={intlUtils(intl, 'uttaksplan.automatiskJustering.spørsmål', {\n                            antallBarn,\n                        })}\n                        validate={(value: YesOrNo) => {\n                            if (value === YesOrNo.UNANSWERED) {\n                                return intlUtils(intl, 'uttaksplan.automatiskJustering.svar.påkrevd');\n                            }\n\n                            return undefined;\n                        }}\n                        afterOnChange={(value: string) => handleOnChange(value)}\n                    />\n                </Block>\n            </div>\n        </UttaksplanFormComponents.Form>\n    );\n};\n\nexport default AutomatiskJusteringForm;\n","import { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport { UttaksplanFormData, UttaksplanFormField } from './UttaksplanFormConfig';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\nimport { Periode } from '@navikt/fp-common';\nimport { getKanPeriodenRundtFødselJusteres } from './automatisk-justering-form/automatiskJusteringUtils';\n\nexport interface UttaksplanQuestionPayload extends UttaksplanFormData {\n    termindato: Date | undefined;\n    perioderMedUttakRundtFødsel: Periode[];\n}\nconst includeAutomatiskJusteringSpørsmål = (\n    perioderMedUttakRundtFødsel: Periode[],\n    termindato: Date | undefined,\n): boolean => {\n    if (perioderMedUttakRundtFødsel.length !== 1 || termindato === undefined) {\n        return false;\n    }\n\n    return getKanPeriodenRundtFødselJusteres(perioderMedUttakRundtFødsel[0], termindato);\n};\n\nconst UttaksplanFormConfig: QuestionConfig<UttaksplanQuestionPayload, UttaksplanFormField> = {\n    [UttaksplanFormField.ønskerAutomatiskJustering]: {\n        isIncluded: ({ perioderMedUttakRundtFødsel, termindato }) =>\n            includeAutomatiskJusteringSpørsmål(perioderMedUttakRundtFødsel, termindato),\n        isAnswered: ({ ønskerAutomatiskJustering }) => ønskerAutomatiskJustering !== YesOrNo.UNANSWERED,\n    },\n};\n\nconst uttaksplanQuestionsConfig = Questions<UttaksplanQuestionPayload, UttaksplanFormField>(UttaksplanFormConfig);\n\nexport default uttaksplanQuestionsConfig;\n","import {\n    Block,\n    Dekningsgrad,\n    Forelder,\n    getAktiveArbeidsforhold,\n    getErMorUfør,\n    getFarMedmorErAleneOmOmsorg,\n    getForeldreparSituasjon,\n    getKjønnFromFnr,\n    getMorErAleneOmOmsorg,\n    getMorHarRettPåForeldrepengerINorgeEllerEØS,\n    getNavnPåForeldre,\n    getPerioderMedUttakRundtFødsel,\n    intlUtils,\n    isAnnenForelderOppgitt,\n    isFarEllerMedmor,\n    ISOStringToDate,\n    isUfødtBarn,\n    isUttakAnnenPart,\n    isUttakAvForeldrepengerFørFødsel,\n    isUttaksperiode,\n    Periode,\n    Periodene,\n    SenEndringÅrsak,\n    Step,\n    StepButtonWrapper,\n    Søkerinfo,\n} from '@navikt/fp-common';\nimport SøknadRoutes from 'app/routes/routes';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport stepConfig, { getPreviousStepHref } from '../stepsConfig';\nimport { getFamiliehendelsedato, getTermindato } from 'app/utils/barnUtils';\nimport Api from 'app/api/api';\nimport getStønadskontoParams, {\n    getAntallBarnSomSkalBrukesFraSaksgrunnlagBeggeParter,\n    getTermindatoSomSkalBrukesFraSaksgrunnlagBeggeParter,\n} from 'app/api/getStønadskontoParams';\nimport { getValgtStønadskontoFor80Og100Prosent } from 'app/utils/stønadskontoUtils';\nimport useDebounce from 'app/utils/hooks/useDebounce';\nimport { getPerioderSomSkalSendesInn } from 'app/utils/submitUtils';\nimport useFortsettSøknadSenere from 'app/utils/hooks/useFortsettSøknadSenere';\nimport { getEndringstidspunkt, getMorsSisteDag } from 'app/utils/dateUtils';\nimport { cleanupInvisibleCharsFromTilleggsopplysninger } from 'app/utils/tilleggsopplysningerUtils';\nimport VilDuGåTilbakeModal from './components/vil-du-gå-tilbake-modal/VilDuGåTilbakeModal';\nimport { UttaksplanFormComponents, UttaksplanFormField } from 'app/steps/uttaksplan/UttaksplanFormConfig';\nimport { getUttaksplanFormInitialValues } from './UttaksplanFormUtils';\nimport { FormikValues } from 'formik';\nimport {\n    getStartdatoFørstePeriodeAnnenPart,\n    mapAnnenPartsEksisterendeSakFromDTO,\n} from 'app/utils/eksisterendeSakUtils';\nimport { RequestStatus } from 'app/types/RequestState';\nimport dayjs from 'dayjs';\nimport { getAntallUkerMinsterett } from '../uttaksplan-info/utils/stønadskontoer';\nimport { sendErrorMessageToSentry } from 'app/api/apiUtils';\nimport { Alert, Button, Loader } from '@navikt/ds-react';\nimport { dateToISOString, YesOrNo } from '@navikt/sif-common-formik-ds/lib';\nimport { Link } from 'react-router-dom';\nimport InfoOmSøknaden from 'app/components/info-eksisterende-sak/InfoOmSøknaden';\nimport { getHarAktivitetskravIPeriodeUtenUttak, Uttaksplan } from '@navikt/uttaksplan';\nimport AttachmentApi from '../../api/attachmentApi';\nimport { finnOgSettInnHull, settInnAnnenPartsUttak } from '@navikt/uttaksplan/src/builder/uttaksplanbuilderUtils';\nimport {\n    getKanJustereAutomatiskVedFødsel,\n    getVisAutomatiskJusteringForm,\n} from './automatisk-justering-form/automatiskJusteringUtils';\nimport { getSamtidigUttaksprosent } from '../../utils/uttaksplanInfoUtils';\nimport AutomatiskJusteringForm from './automatisk-justering-form/AutomatiskJusteringForm';\nimport uttaksplanQuestionsConfig from './uttaksplanQuestionConfig';\nimport { ContextDataType, useContextComplete, useContextGetData, useContextSaveData } from 'app/context/FpDataContext';\nimport { notEmpty } from '@navikt/fp-validation';\n\nconst EMPTY_PERIOD_ARRAY: Periode[] = [];\n\ntype Props = {\n    søkerInfo: Søkerinfo;\n    erEndringssøknad: boolean;\n    mellomlagreSøknadOgNaviger: () => void;\n    avbrytSøknad: () => void;\n};\n\nconst UttaksplanStep: React.FunctionComponent<Props> = ({\n    søkerInfo,\n    erEndringssøknad,\n    mellomlagreSøknadOgNaviger,\n    avbrytSøknad,\n}) => {\n    const intl = useIntl();\n    const onFortsettSøknadSenere = useFortsettSøknadSenere();\n\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [submitIsClicked, setSubmitIsClicked] = useState(false);\n\n    const [gåTilbakeIsOpen, setGåTilbakeIsOpen] = useState(false);\n    const [uttaksplanErGyldig, setUttaksplanErGyldig] = useState(true);\n\n    const søkersituasjon = notEmpty(useContextGetData(ContextDataType.SØKERSITUASJON));\n    const barn = notEmpty(useContextGetData(ContextDataType.OM_BARNET));\n    const annenForelder = notEmpty(useContextGetData(ContextDataType.ANNEN_FORELDER));\n    const søker = notEmpty(useContextGetData(ContextDataType.SØKER));\n    const uttaksplanMetadata = notEmpty(useContextGetData(ContextDataType.UTTAKSPLAN_METADATA));\n    const uttaksplanInfo = useContextGetData(ContextDataType.UTTAKSPLAN_INFO);\n    const uttaksplan = useContextGetData(ContextDataType.UTTAKSPLAN) || EMPTY_PERIOD_ARRAY;\n    const barnFraNesteSak = useContextGetData(ContextDataType.BARN_FRA_NESTE_SAK);\n    const eksisterendeSak = useContextGetData(ContextDataType.EKSISTERENDE_SAK);\n\n    const oppdaterBarn = useContextSaveData(ContextDataType.OM_BARNET);\n    const oppdaterBarnFraNesteSak = useContextSaveData(ContextDataType.BARN_FRA_NESTE_SAK);\n    const oppdaterUttaksplan = useContextSaveData(ContextDataType.UTTAKSPLAN);\n    const oppdaterEksisterendeSak = useContextSaveData(ContextDataType.EKSISTERENDE_SAK);\n    const oppdaterUttaksplanMetadata = useContextSaveData(ContextDataType.UTTAKSPLAN_METADATA);\n    const oppdaterAppRoute = useContextSaveData(ContextDataType.APP_ROUTE);\n\n    const [endringstidspunkt, setEndringstidspunkt] = useState(uttaksplanMetadata.endringstidspunkt);\n    const [perioderSomSkalSendesInn, setPerioderSomSkalSendesInn] = useState(\n        uttaksplanMetadata.perioderSomSkalSendesInn || [],\n    );\n\n    const nextRoute = erEndringssøknad ? SøknadRoutes.OPPSUMMERING : SøknadRoutes.UTENLANDSOPPHOLD;\n    const { person, arbeidsforhold } = søkerInfo;\n    const { erAleneOmOmsorg } = søker;\n    const { situasjon } = søkersituasjon;\n    const { rolle } = søkersituasjon;\n    const annenForelderKjønn = getKjønnFromFnr(annenForelder);\n    const erDeltUttak = isAnnenForelderOppgitt(annenForelder)\n        ? !!annenForelder.harRettPåForeldrepengerINorge || !!annenForelder.harRettPåForeldrepengerIEØS\n        : false;\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const morErAleneOmOmsorg = getMorErAleneOmOmsorg(!erFarEllerMedmor, erAleneOmOmsorg, annenForelder);\n    const farMedmorErAleneOmOmsorg = getFarMedmorErAleneOmOmsorg(erFarEllerMedmor, erAleneOmOmsorg, annenForelder);\n    const søkerErAleneOmOmsorg = morErAleneOmOmsorg || farMedmorErAleneOmOmsorg;\n    const forelderVedAleneomsorg = erDeltUttak ? undefined : erFarEllerMedmor ? Forelder.farMedmor : Forelder.mor;\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const familiehendelsesdatoDate = ISOStringToDate(familiehendelsesdato);\n    const erMorUfør = getErMorUfør(annenForelder, erFarEllerMedmor);\n    const navnPåForeldre = getNavnPåForeldre(person, annenForelder, erFarEllerMedmor, intl);\n    const antallBarn = barn.antallBarn;\n    const erFlerbarnssøknad = antallBarn > 1;\n    const morHarRett = getMorHarRettPåForeldrepengerINorgeEllerEØS(rolle, erFarEllerMedmor, annenForelder);\n    const opprinneligPlan = eksisterendeSak?.uttaksplan;\n    const harKomplettUttaksplan = eksisterendeSak ? eksisterendeSak.uttaksplan !== undefined : false;\n    const harMidlertidigOmsorg = false; //TODO søkerHarMidlertidigOmsorg\n    const morsSisteDag = getMorsSisteDag(uttaksplanInfo);\n    const termindato = getTermindato(barn);\n    const annenForelderFnr =\n        isAnnenForelderOppgitt(annenForelder) && !!annenForelder.utenlandskFnr === false\n            ? annenForelder.fnr\n            : undefined;\n    const erAdopsjon = situasjon === 'adopsjon';\n    const annenForelderFnrNesteSak = barnFraNesteSak !== undefined ? barnFraNesteSak.annenForelderFnr : undefined;\n    const førsteBarnFraNesteSakFnr =\n        barnFraNesteSak !== undefined && barnFraNesteSak.fnr !== undefined && barnFraNesteSak.fnr.length > 0\n            ? barnFraNesteSak.fnr[0]\n            : undefined;\n    const familieHendelseDatoNesteSak =\n        barnFraNesteSak !== undefined ? barnFraNesteSak.familiehendelsesdato : undefined;\n    const førsteUttaksdagNesteBarnsSak =\n        barnFraNesteSak !== undefined ? barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n\n    const bareFarMedmorHarRett = !getMorHarRettPåForeldrepengerINorgeEllerEØS(\n        søkersituasjon.rolle,\n        erFarEllerMedmor,\n        annenForelder,\n    );\n\n    const barnFnr = !isUfødtBarn(barn) && barn.fnr !== undefined && barn.fnr.length > 0 ? barn.fnr[0] : undefined;\n    const eksisterendeSakAnnenPartRequestIsSuspended =\n        !søkerErAleneOmOmsorg &&\n        annenForelderFnr !== undefined &&\n        annenForelderFnr !== '' &&\n        (barnFnr !== undefined || familiehendelsesdato !== undefined)\n            ? false\n            : true;\n\n    const debouncedState = useDebounce(useContextComplete(), 3000);\n    const initialRender = useRef(true);\n    useEffect(() => {\n        if (initialRender.current === false) {\n            mellomlagreSøknadOgNaviger();\n        }\n        initialRender.current = false;\n    }, [debouncedState, mellomlagreSøknadOgNaviger]);\n\n    const { eksisterendeSakAnnenPartData, eksisterendeSakAnnenPartError, eksisterendeSakAnnenPartRequestStatus } =\n        Api.useGetAnnenPartsVedtak(\n            annenForelderFnr,\n            barnFnr,\n            familiehendelsesdato,\n            eksisterendeSakAnnenPartRequestIsSuspended,\n        );\n\n    const eksisterendeVedtakAnnenPart = useMemo(\n        () =>\n            mapAnnenPartsEksisterendeSakFromDTO(\n                eksisterendeSakAnnenPartData,\n                barn,\n                erFarEllerMedmor,\n                familiehendelsesdato,\n                førsteUttaksdagNesteBarnsSak,\n            ),\n        [eksisterendeSakAnnenPartData, barn, erFarEllerMedmor, familiehendelsesdato, førsteUttaksdagNesteBarnsSak],\n    );\n\n    const goToPreviousStep = () => {\n        setGåTilbakeIsOpen(false);\n\n        oppdaterAppRoute(SøknadRoutes.UTTAKSPLAN_INFO);\n        mellomlagreSøknadOgNaviger();\n    };\n\n    const saksgrunnlagsTermindato = getTermindatoSomSkalBrukesFraSaksgrunnlagBeggeParter(\n        eksisterendeSak?.grunnlag.termindato,\n        eksisterendeVedtakAnnenPart?.grunnlag.termindato,\n    );\n    const saksgrunnlagsAntallBarn = getAntallBarnSomSkalBrukesFraSaksgrunnlagBeggeParter(\n        erFarEllerMedmor,\n        barn.antallBarn,\n        eksisterendeVedtakAnnenPart?.grunnlag.antallBarn,\n    );\n    useEffect(() => {\n        if (erFarEllerMedmor && barn.antallBarn !== saksgrunnlagsAntallBarn) {\n            oppdaterBarn({ ...barn, antallBarn: saksgrunnlagsAntallBarn });\n        }\n    }, [erFarEllerMedmor, saksgrunnlagsAntallBarn, barn, oppdaterBarn]);\n\n    const nesteBarnsSakAnnenPartRequestIsSuspended =\n        annenForelderFnrNesteSak !== undefined &&\n        annenForelderFnrNesteSak !== '' &&\n        (førsteBarnFraNesteSakFnr !== undefined || familieHendelseDatoNesteSak !== undefined) &&\n        (eksisterendeSakAnnenPartRequestIsSuspended || eksisterendeSakAnnenPartRequestStatus === RequestStatus.FINISHED)\n            ? false\n            : true;\n\n    const {\n        eksisterendeSakAnnenPartData: nesteSakAnnenPartData,\n        eksisterendeSakAnnenPartError: nesteSakAnnenPartError,\n        eksisterendeSakAnnenPartRequestStatus: nesteSakAnnenPartRequestStatus,\n    } = Api.useGetAnnenPartsVedtak(\n        annenForelderFnrNesteSak,\n        førsteBarnFraNesteSakFnr,\n        dateToISOString(familieHendelseDatoNesteSak),\n        nesteBarnsSakAnnenPartRequestIsSuspended,\n    );\n\n    const førsteUttaksdagAnnenPart = getStartdatoFørstePeriodeAnnenPart(nesteSakAnnenPartData);\n\n    useEffect(() => {\n        if (\n            førsteUttaksdagAnnenPart !== undefined &&\n            barnFraNesteSak !== undefined &&\n            (dayjs(førsteUttaksdagAnnenPart).isBefore(barnFraNesteSak.startdatoFørsteStønadsperiode, 'd') ||\n                barnFraNesteSak.startdatoFørsteStønadsperiode === undefined)\n        ) {\n            const oppdatertBarnNesteSak = {\n                ...barnFraNesteSak,\n                startdatoFørsteStønadsperiode: førsteUttaksdagAnnenPart,\n            };\n            oppdaterBarnFraNesteSak(oppdatertBarnNesteSak);\n        }\n    }, [førsteUttaksdagNesteBarnsSak, førsteUttaksdagAnnenPart, barnFraNesteSak, oppdaterBarnFraNesteSak]);\n\n    const harAktivitetskravIPeriodeUtenUttak = getHarAktivitetskravIPeriodeUtenUttak({\n        erDeltUttak,\n        morHarRett,\n        søkerErAleneOmOmsorg,\n    });\n\n    //Legg til annen parts perioder i planen til bruker\n    useEffect(() => {\n        if (\n            eksisterendeSak !== undefined &&\n            opprinneligPlan !== undefined &&\n            eksisterendeVedtakAnnenPart !== undefined &&\n            !uttaksplanMetadata.annenPartsUttakErLagtTilIPlan\n        ) {\n            //Sett samtidigUttak på søkerens perioder hvis de overlapper med annen parts samtidig uttak:\n            opprinneligPlan.forEach((p) => {\n                if (isUttaksperiode(p)) {\n                    const overlappendePerioderAnnenPart = Periodene(\n                        eksisterendeVedtakAnnenPart.uttaksplan,\n                    ).finnOverlappendePerioder(p);\n\n                    if (\n                        overlappendePerioderAnnenPart.length !== 0 &&\n                        overlappendePerioderAnnenPart.find(\n                            (periode) => isUttakAnnenPart(periode) && periode.ønskerSamtidigUttak === true,\n                        )\n                    ) {\n                        if (!p.ønskerSamtidigUttak) {\n                            p.ønskerSamtidigUttak = true;\n                            p.samtidigUttakProsent = getSamtidigUttaksprosent(p.gradert, p.stillingsprosent);\n                        }\n                    }\n                }\n            });\n\n            const uttaksplanMedAnnenPart = finnOgSettInnHull(\n                settInnAnnenPartsUttak(\n                    opprinneligPlan,\n                    eksisterendeVedtakAnnenPart.uttaksplan,\n                    familiehendelsesdatoDate!,\n                    førsteUttaksdagNesteBarnsSak,\n                    true,\n                ),\n                harAktivitetskravIPeriodeUtenUttak,\n                familiehendelsesdatoDate!,\n                erAdopsjon,\n                bareFarMedmorHarRett,\n                erFarEllerMedmor,\n                førsteUttaksdagNesteBarnsSak,\n            );\n            const eksisterendeSakMedAnnenPartsPlan = {\n                ...eksisterendeSak,\n                uttaksplan: uttaksplanMedAnnenPart,\n            };\n            oppdaterUttaksplan(uttaksplanMedAnnenPart);\n            oppdaterEksisterendeSak(eksisterendeSakMedAnnenPartsPlan);\n\n            oppdaterUttaksplanMetadata({\n                ...uttaksplanMetadata,\n                annenPartsUttakErLagtTilIPlan: true,\n            });\n        }\n    }, [\n        eksisterendeVedtakAnnenPart,\n        opprinneligPlan,\n        familiehendelsesdatoDate,\n        harAktivitetskravIPeriodeUtenUttak,\n        erAdopsjon,\n        bareFarMedmorHarRett,\n        erFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak,\n        eksisterendeSak,\n        uttaksplanMetadata,\n        oppdaterUttaksplan,\n        oppdaterEksisterendeSak,\n        oppdaterUttaksplanMetadata,\n    ]);\n\n    const handleBegrunnelseChange = (årsak: SenEndringÅrsak, begrunnelse: string) => {\n        const ekstraInformasjon = årsak !== SenEndringÅrsak.Ingen ? årsak : undefined;\n        const opplysninger = {\n            ...(uttaksplanMetadata.tilleggsopplysninger || {}),\n            begrunnelseForSenEndring: {\n                ...(uttaksplanMetadata.tilleggsopplysninger || {}).begrunnelseForSenEndring,\n                tekst: begrunnelse,\n                ekstraInformasjon: ekstraInformasjon,\n            },\n        };\n\n        oppdaterUttaksplanMetadata({\n            ...uttaksplanMetadata,\n            tilleggsopplysninger: opplysninger,\n        });\n    };\n\n    useEffect(() => {\n        const periodeAngittAvAnnenPart = opprinneligPlan?.find((p) => isUttaksperiode(p) && p.angittAvAnnenPart);\n\n        if (periodeAngittAvAnnenPart && endringstidspunkt === undefined) {\n            const tidspunktForEndring = periodeAngittAvAnnenPart.tidsperiode.fom;\n\n            const perioderForÅSendeInn = getPerioderSomSkalSendesInn(\n                uttaksplan,\n                erEndringssøknad,\n                erFarEllerMedmor,\n                opprinneligPlan,\n                tidspunktForEndring,\n            );\n            setPerioderSomSkalSendesInn(perioderForÅSendeInn);\n\n            oppdaterUttaksplanMetadata({\n                ...uttaksplanMetadata,\n                perioderSomSkalSendesInn: perioderForÅSendeInn,\n                endringstidspunkt,\n            });\n        }\n    }, [\n        opprinneligPlan,\n        endringstidspunkt,\n        erFarEllerMedmor,\n        uttaksplan,\n        erEndringssøknad,\n        oppdaterUttaksplanMetadata,\n        uttaksplanMetadata,\n    ]);\n\n    const onSubmit = async () => {\n        setIsSubmitting(true);\n        setSubmitIsClicked(true);\n\n        const cleanedTilleggsopplysninger = cleanupInvisibleCharsFromTilleggsopplysninger(\n            uttaksplanMetadata.tilleggsopplysninger,\n        );\n\n        oppdaterUttaksplanMetadata({\n            ...uttaksplanMetadata,\n            endringstidspunkt,\n            perioderSomSkalSendesInn,\n            tilleggsopplysninger: cleanedTilleggsopplysninger,\n        });\n\n        oppdaterAppRoute(nextRoute);\n\n        mellomlagreSøknadOgNaviger();\n    };\n\n    const perioderMedUttakRundtFødsel = getPerioderMedUttakRundtFødsel(\n        uttaksplan,\n        familiehendelsesdatoDate!,\n        termindato,\n    );\n\n    const visAutomatiskJusteringForm = getVisAutomatiskJusteringForm(\n        erFarEllerMedmor,\n        familiehendelsesdatoDate!,\n        situasjon,\n        perioderMedUttakRundtFødsel,\n        barn,\n        termindato,\n        bareFarMedmorHarRett,\n    );\n\n    const kanJustereAutomatiskVedFødsel = getKanJustereAutomatiskVedFødsel(\n        perioderMedUttakRundtFødsel,\n        termindato,\n        erFarEllerMedmor,\n        barn,\n    );\n\n    const setØnskerJustertUttakVedFødselTilUndefinedHvisUgyldig = () => {\n        if ((visAutomatiskJusteringForm || erEndringssøknad) && !kanJustereAutomatiskVedFødsel) {\n            oppdaterUttaksplanMetadata({\n                ...uttaksplanMetadata,\n                ønskerJustertUttakVedFødsel: undefined,\n            });\n        }\n    };\n\n    const ønskerJustertUttakVedFødselErBesvart = (ønskerAutomatiskJusteringSvar: boolean | undefined) => {\n        return (\n            visAutomatiskJusteringForm && kanJustereAutomatiskVedFødsel && ønskerAutomatiskJusteringSvar !== undefined\n        );\n    };\n\n    const ref = useRef<FormikValues>(null);\n    const clickHandler = async (values: any) => {\n        setSubmitIsClicked(true);\n        if (uttaksplanErGyldig && !erTomEndringssøknad) {\n            setIsSubmitting(true);\n            if (ref.current) {\n                ref.current.handleSubmit();\n            }\n\n            setØnskerJustertUttakVedFødselTilUndefinedHvisUgyldig();\n\n            if (ønskerJustertUttakVedFødselErBesvart(values.ønskerAutomatiskJustering)) {\n                await onSubmit();\n            }\n        }\n    };\n\n    const foreldreSituasjon = getForeldreparSituasjon(\n        person.kjønn,\n        annenForelderKjønn,\n        erDeltUttak,\n        morErAleneOmOmsorg,\n        farMedmorErAleneOmOmsorg,\n        rolle,\n    );\n    const kontoRequestIsSuspended =\n        (eksisterendeSakAnnenPartRequestIsSuspended\n            ? false\n            : eksisterendeSakAnnenPartRequestStatus !== RequestStatus.FINISHED) ||\n        (nesteBarnsSakAnnenPartRequestIsSuspended ? false : nesteSakAnnenPartRequestStatus !== RequestStatus.FINISHED);\n\n    const { tilgjengeligeStønadskontoerData: stønadskontoer100, tilgjengeligeStønadskontoerError } =\n        Api.useGetUttakskontoer(\n            getStønadskontoParams(\n                Dekningsgrad.HUNDRE_PROSENT,\n                barn,\n                annenForelder,\n                søkersituasjon,\n                farMedmorErAleneOmOmsorg,\n                morErAleneOmOmsorg,\n                dateToISOString(familieHendelseDatoNesteSak),\n                saksgrunnlagsAntallBarn,\n                saksgrunnlagsTermindato,\n            ),\n            kontoRequestIsSuspended,\n        );\n    const { tilgjengeligeStønadskontoerData: stønadskontoer80 } = Api.useGetUttakskontoer(\n        getStønadskontoParams(\n            Dekningsgrad.ÅTTI_PROSENT,\n            barn,\n            annenForelder,\n            søkersituasjon,\n            farMedmorErAleneOmOmsorg,\n            morErAleneOmOmsorg,\n            dateToISOString(familieHendelseDatoNesteSak),\n            saksgrunnlagsAntallBarn,\n            saksgrunnlagsTermindato,\n        ),\n        kontoRequestIsSuspended,\n    );\n\n    const handleOnPlanChange = (nyPlan: Periode[]) => {\n        setSubmitIsClicked(false);\n        setIsSubmitting(false);\n\n        oppdaterUttaksplan(nyPlan);\n\n        const tidspunktForEndring = getEndringstidspunkt(opprinneligPlan, nyPlan, erEndringssøknad);\n\n        setEndringstidspunkt(endringstidspunkt);\n\n        const perioderForÅSendeInn = getPerioderSomSkalSendesInn(\n            nyPlan,\n            erEndringssøknad,\n            erFarEllerMedmor,\n            opprinneligPlan,\n            tidspunktForEndring,\n        );\n        setPerioderSomSkalSendesInn(perioderForÅSendeInn);\n\n        oppdaterUttaksplanMetadata({\n            ...uttaksplanMetadata,\n            perioderSomSkalSendesInn: perioderForÅSendeInn,\n        });\n    };\n\n    useEffect(() => {\n        if (tilgjengeligeStønadskontoerError) {\n            sendErrorMessageToSentry(tilgjengeligeStønadskontoerError);\n            throw new Error(\n                `Vi klarte ikke å hente opp stønadskontoer. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`,\n            );\n        }\n        if (eksisterendeSakAnnenPartError) {\n            sendErrorMessageToSentry(eksisterendeSakAnnenPartError);\n            throw new Error(\n                `Vi klarte ikke å hente informasjon om saken til annen forelder. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`,\n            );\n        }\n\n        if (nesteSakAnnenPartError) {\n            sendErrorMessageToSentry(nesteSakAnnenPartError);\n            throw new Error(\n                `Vi klarte ikke å hente informasjon om saken til annen forelder for neste barn. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`,\n            );\n        }\n    }, [tilgjengeligeStønadskontoerError, eksisterendeSakAnnenPartError, nesteSakAnnenPartError]);\n\n    if (\n        !stønadskontoer100 ||\n        !stønadskontoer80 ||\n        (eksisterendeSakAnnenPartRequestStatus !== RequestStatus.FINISHED &&\n            !eksisterendeSakAnnenPartRequestIsSuspended) ||\n        (nesteSakAnnenPartRequestStatus !== RequestStatus.FINISHED && !nesteBarnsSakAnnenPartRequestIsSuspended)\n    ) {\n        return (\n            <div style={{ textAlign: 'center', padding: '12rem 0' }}>\n                <Loader size=\"2xlarge\" />\n            </div>\n        );\n    }\n\n    const stønadskontoer = getValgtStønadskontoFor80Og100Prosent(stønadskontoer80, stønadskontoer100);\n    const minsterettUkerToTette = getAntallUkerMinsterett(stønadskontoer100.minsteretter.toTette);\n\n    const valgteStønadskontoer =\n        uttaksplanMetadata.dekningsgrad === Dekningsgrad.HUNDRE_PROSENT ? stønadskontoer[100] : stønadskontoer[80];\n\n    const erTomEndringssøknad =\n        erEndringssøknad && (perioderSomSkalSendesInn === undefined || perioderSomSkalSendesInn.length === 0);\n\n    const handleSlettUttaksplan = () => {\n        const slettetPlanUtenomFpFørFødsel = uttaksplan.filter((periode) => isUttakAvForeldrepengerFørFødsel(periode));\n        oppdaterUttaksplan(slettetPlanUtenomFpFørFødsel);\n        oppdaterUttaksplanMetadata({\n            ...uttaksplanMetadata,\n            harUttaksplanBlittSlettet: true,\n        });\n    };\n\n    const handleResetUttaksplan = () => {\n        if (eksisterendeSak) {\n            oppdaterUttaksplan(eksisterendeSak.uttaksplan);\n\n            oppdaterUttaksplanMetadata({\n                ...uttaksplanMetadata,\n                perioderSomSkalSendesInn: [],\n            });\n            setPerioderSomSkalSendesInn([]);\n        }\n    };\n\n    return (\n        <UttaksplanFormComponents.FormikWrapper\n            initialValues={getUttaksplanFormInitialValues(uttaksplanMetadata.ønskerJustertUttakVedFødsel)}\n            onSubmit={onSubmit}\n            innerRef={ref}\n            renderForm={({ values }) => {\n                const visibility = uttaksplanQuestionsConfig.getVisbility({\n                    ønskerAutomatiskJustering: values[UttaksplanFormField.ønskerAutomatiskJustering] ?? YesOrNo.NO,\n                    termindato,\n                    perioderMedUttakRundtFødsel,\n                });\n\n                return (\n                    <Step\n                        bannerTitle={intlUtils(intl, 'søknad.pageheading')}\n                        activeStepId=\"uttaksplan\"\n                        pageTitle={intlUtils(intl, 'søknad.uttaksplan')}\n                        onCancel={avbrytSøknad}\n                        onContinueLater={onFortsettSøknadSenere}\n                        steps={stepConfig(intl, erEndringssøknad)}\n                    >\n                        <Block padBottom=\"l\">\n                            <InfoOmSøknaden\n                                eksisterendeSak={eksisterendeSak}\n                                erIUttaksplanenSteg={true}\n                                tilgjengeligeStønadskontoer={valgteStønadskontoer}\n                                minsterettUkerToTette={minsterettUkerToTette}\n                                person={søkerInfo.person}\n                            />\n                        </Block>\n                        <Uttaksplan\n                            foreldreSituasjon={foreldreSituasjon}\n                            forelderVedAleneomsorg={forelderVedAleneomsorg}\n                            erDeltUttak={erDeltUttak}\n                            uttaksplan={uttaksplan}\n                            familiehendelsesdato={familiehendelsesdato}\n                            handleOnPlanChange={handleOnPlanChange}\n                            stønadskontoer={valgteStønadskontoer}\n                            navnPåForeldre={navnPåForeldre}\n                            annenForelder={annenForelder}\n                            arbeidsforhold={getAktiveArbeidsforhold(\n                                arbeidsforhold,\n                                erAdopsjon,\n                                erFarEllerMedmor,\n                                ISOStringToDate(familiehendelsesdato),\n                            )}\n                            erEndringssøknad={erEndringssøknad}\n                            erFarEllerMedmor={erFarEllerMedmor}\n                            erFlerbarnssøknad={erFlerbarnssøknad}\n                            erAleneOmOmsorg={søkerErAleneOmOmsorg}\n                            harMidlertidigOmsorg={harMidlertidigOmsorg}\n                            situasjon={situasjon}\n                            erMorUfør={erMorUfør}\n                            morHarRett={morHarRett}\n                            søkersituasjon={søkersituasjon}\n                            dekningsgrad={uttaksplanMetadata.dekningsgrad!}\n                            antallBarn={antallBarn}\n                            tilleggsopplysninger={uttaksplanMetadata.tilleggsopplysninger || {}}\n                            setUttaksplanErGyldig={setUttaksplanErGyldig}\n                            handleBegrunnelseChange={handleBegrunnelseChange}\n                            eksisterendeSak={eksisterendeSak}\n                            perioderSomSkalSendesInn={perioderSomSkalSendesInn}\n                            morsSisteDag={morsSisteDag}\n                            harKomplettUttaksplan={harKomplettUttaksplan}\n                            opprinneligPlan={uttaksplanMetadata.harUttaksplanBlittSlettet ? undefined : opprinneligPlan}\n                            handleSlettUttaksplan={handleSlettUttaksplan}\n                            handleResetUttaksplan={handleResetUttaksplan}\n                            termindato={termindato}\n                            barn={barn}\n                            saveAttachment={AttachmentApi.saveAttachment}\n                            visAutomatiskJusteringForm={visAutomatiskJusteringForm}\n                            perioderMedUttakRundtFødsel={perioderMedUttakRundtFødsel}\n                            barnFraNesteSak={barnFraNesteSak}\n                            familiehendelsesdatoNesteSak={familieHendelseDatoNesteSak}\n                            førsteUttaksdagNesteBarnsSak={førsteUttaksdagNesteBarnsSak}\n                            minsterettUkerToTette={minsterettUkerToTette}\n                        />\n                        {visAutomatiskJusteringForm && (\n                            <Block padBottom=\"l\">\n                                <AutomatiskJusteringForm\n                                    termindato={termindato!}\n                                    perioderMedUttakRundtFødsel={perioderMedUttakRundtFødsel}\n                                    antallBarn={barn.antallBarn}\n                                    visibility={visibility}\n                                />\n                            </Block>\n                        )}\n                        <VilDuGåTilbakeModal\n                            isOpen={gåTilbakeIsOpen}\n                            setIsOpen={setGåTilbakeIsOpen}\n                            goToPreviousStep={goToPreviousStep}\n                        />\n                        {!uttaksplanErGyldig && submitIsClicked && (\n                            <Block textAlignCenter={true} padBottom=\"l\">\n                                <Alert variant=\"error\">\n                                    <FormattedMessage id=\"uttaksplan.validering.kanIkkeGåVidere\" />\n                                </Alert>\n                            </Block>\n                        )}\n                        {erTomEndringssøknad && submitIsClicked && (\n                            <Block textAlignCenter={true} padBottom=\"l\">\n                                <Alert variant=\"error\">\n                                    <FormattedMessage id=\"uttaksplan.validering.kanIkkeGåVidereEndringssøknad\" />\n                                </Alert>\n                            </Block>\n                        )}\n                        <Block textAlignCenter={true} padBottom=\"l\">\n                            <StepButtonWrapper>\n                                {!erEndringssøknad && (\n                                    <Button\n                                        variant=\"secondary\"\n                                        as={Link}\n                                        onClick={(event) => {\n                                            event.preventDefault();\n                                            setGåTilbakeIsOpen(true);\n                                        }}\n                                        to={getPreviousStepHref('uttaksplan')}\n                                    >\n                                        <FormattedMessage id=\"backlink.label\" />\n                                    </Button>\n                                )}\n                                <Button\n                                    type=\"submit\"\n                                    onClick={clickHandler}\n                                    disabled={isSubmitting}\n                                    loading={isSubmitting}\n                                >\n                                    {intlUtils(intl, 'søknad.gåVidere')}\n                                </Button>\n                            </StepButtonWrapper>\n                        </Block>\n                    </Step>\n                );\n            }}\n        />\n    );\n};\nexport default UttaksplanStep;\n","import { Periode } from '@navikt/fp-common';\nimport SøknadRoutes from './routes';\nimport { uttaksplanInneholderPerioderUtenKonto } from '@navikt/uttaksplan';\n\nconst isAvailable = (route: SøknadRoutes, harGodkjentVilkår: boolean, uttaksplan: Periode[] = []): boolean => {\n    switch (route) {\n        case SøknadRoutes.SØKERSITUASJON:\n            return harGodkjentVilkår === true;\n        case SøknadRoutes.OPPSUMMERING:\n            return uttaksplanInneholderPerioderUtenKonto(uttaksplan) === false && uttaksplan.length > 0;\n        default:\n            return true;\n    }\n};\n\nexport default isAvailable;\n","import Api from 'app/api/api';\nimport { ContextDataMap, ContextDataType, useContextGetAnyData } from './FpDataContext';\nimport { useCallback, useEffect, useState } from 'react';\nimport { notEmpty } from '@navikt/fp-validation';\nimport { useNavigate } from 'react-router-dom';\nimport { redirectToLogin } from 'app/utils/redirectToLogin';\nimport { sendErrorMessageToSentry } from 'app/api/apiUtils';\nimport { LocaleNo } from '@navikt/fp-types';\nimport Søker from './types/Søker';\n\nconst mellomlagre = (\n    locale: LocaleNo,\n    getDataFromState: <TYPE extends ContextDataType>(key: TYPE) => ContextDataMap[TYPE],\n    fødselsnr: string,\n    erEndringssøknad: boolean,\n    harGodkjentVilkår: boolean,\n    søknadGjelderEtNyttBarn?: boolean,\n) => {\n    const currentRoute = notEmpty(getDataFromState(ContextDataType.APP_ROUTE));\n\n    const søkersituasjon = getDataFromState(ContextDataType.SØKERSITUASJON);\n    const barn = getDataFromState(ContextDataType.OM_BARNET);\n    const annenForelder = getDataFromState(ContextDataType.ANNEN_FORELDER);\n    const søker = getDataFromState(ContextDataType.SØKER);\n    const utenlandsopphold = getDataFromState(ContextDataType.UTENLANDSOPPHOLD);\n    const senereUtenlandsopphold = getDataFromState(ContextDataType.UTENLANDSOPPHOLD_SENERE);\n    const tidligereUtenlandsopphold = getDataFromState(ContextDataType.UTENLANDSOPPHOLD_TIDLIGERE);\n    const uttaksplanMetadata = getDataFromState(ContextDataType.UTTAKSPLAN_METADATA);\n    const barnFraNesteSak = getDataFromState(ContextDataType.BARN_FRA_NESTE_SAK);\n    const eksisterendeSak = getDataFromState(ContextDataType.EKSISTERENDE_SAK);\n    const uttaksplan = getDataFromState(ContextDataType.UTTAKSPLAN);\n    const uttaksplanInfo = getDataFromState(ContextDataType.UTTAKSPLAN_INFO);\n\n    // TODO (TOR) Dropp mapping her og lagre context rått\n    const dataSomSkalMellomlagres = {\n        version: 5,\n        currentRoute,\n        søknadGjelderEtNyttBarn,\n        søknad: {\n            harGodkjentVilkår,\n            søkersituasjon,\n            barn,\n            annenForelder,\n            søker: {\n                ...søker,\n                språkkode: locale,\n            } as Søker,\n            informasjonOmUtenlandsopphold: utenlandsopphold\n                ? {\n                      ...utenlandsopphold,\n                      senereOpphold: senereUtenlandsopphold?.senereOpphold || [],\n                      tidligereOpphold: tidligereUtenlandsopphold?.tidligereOpphold || [],\n                  }\n                : undefined,\n            erEndringssøknad,\n            dekningsgrad: uttaksplanMetadata?.dekningsgrad,\n            uttaksplan,\n            vedlegg: [],\n            tilleggsopplysninger: uttaksplanMetadata?.tilleggsopplysninger,\n            ønskerJustertUttakVedFødsel: uttaksplanMetadata?.ønskerJustertUttakVedFødsel,\n        },\n        eksisterendeSak,\n        barnFraNesteSak,\n        uttaksplanInfo,\n        endringstidspunkt: uttaksplanMetadata?.endringstidspunkt,\n        antallUkerIUttaksplan: uttaksplanMetadata?.antallUkerIUttaksplan,\n        perioderSomSkalSendesInn: uttaksplanMetadata?.perioderSomSkalSendesInn,\n        harUttaksplanBlittSlettet: uttaksplanMetadata?.harUttaksplanBlittSlettet,\n        annenPartsUttakErLagtTilIPlan: uttaksplanMetadata?.annenPartsUttakErLagtTilIPlan,\n    };\n\n    return Api.storeAppState(dataSomSkalMellomlagres, fødselsnr);\n};\n\nconst useMellomlagreSøknad = (\n    locale: LocaleNo,\n    fødselsnr: string,\n    erEndringssøknad: boolean,\n    harGodkjentVilkår: boolean,\n    søknadGjelderEtNyttBarn?: boolean,\n) => {\n    const navigate = useNavigate();\n    const getDataFromState = useContextGetAnyData();\n\n    const [skalMellomlagre, setSkalMellomlagre] = useState(false);\n\n    useEffect(() => {\n        if (skalMellomlagre) {\n            const lagre = async () => {\n                setSkalMellomlagre(false);\n\n                await mellomlagre(\n                    locale,\n                    getDataFromState,\n                    fødselsnr,\n                    erEndringssøknad,\n                    harGodkjentVilkår,\n                    søknadGjelderEtNyttBarn,\n                );\n\n                const currentRoute = notEmpty(getDataFromState(ContextDataType.APP_ROUTE));\n                navigate(currentRoute);\n            };\n\n            lagre().catch((error) => {\n                // TODO (TOR) Bør heller returnere error og håndtere feil frå API-kall på same måte\n                if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n                    redirectToLogin();\n                } else {\n                    sendErrorMessageToSentry(error);\n                }\n            });\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [skalMellomlagre]);\n\n    const mellomlagreSøknadOgNaviger = useCallback(() => {\n        //Må gå via state change sidan ein må få oppdatert context før ein mellomlagrar\n        setSkalMellomlagre(true);\n    }, []);\n\n    return mellomlagreSøknadOgNaviger;\n};\n\nexport default useMellomlagreSøknad;\n","import { AxiosError } from 'axios';\nimport { notEmpty } from '@navikt/fp-validation';\nimport {\n    FEIL_VED_INNSENDING,\n    FOR_MANGE_VEDLEGG_ERROR,\n    UKJENT_UUID,\n    getErrorCallId,\n    getSøknadsdataForInnsending,\n    sendErrorMessageToSentry,\n} from 'app/api/apiUtils';\nimport { ContextDataType, useContextGetAnyData } from './FpDataContext';\nimport { getFamiliehendelsedato } from 'app/utils/barnUtils';\nimport { ISOStringToDate } from '@navikt/fp-common';\nimport Api from 'app/api/api';\nimport { Kvittering } from 'app/types/Kvittering';\nimport { redirectToLogin } from 'app/utils/redirectToLogin';\nimport { LocaleNo } from '@navikt/fp-types';\n\nexport const isAxiosError = (candidate: unknown): candidate is AxiosError<any> => {\n    if (candidate && typeof candidate === 'object' && 'isAxiosError' in candidate) {\n        return true;\n    }\n    return false;\n};\n\nconst useSendSøknad = (\n    fødselsnr: string,\n    erEndringssøknad: boolean,\n    setKvittering: (kvittering: Kvittering) => void,\n    locale: LocaleNo,\n) => {\n    const hentData = useContextGetAnyData();\n\n    const sendSøknad = async (abortSignal: AbortSignal) => {\n        const uttaksplanMetadata = notEmpty(hentData(ContextDataType.UTTAKSPLAN_METADATA));\n        const barn = notEmpty(hentData(ContextDataType.OM_BARNET));\n\n        const cleanedSøknad = getSøknadsdataForInnsending(\n            erEndringssøknad,\n            hentData,\n            uttaksplanMetadata.perioderSomSkalSendesInn!,\n            ISOStringToDate(getFamiliehendelsedato(barn))!,\n            locale,\n            uttaksplanMetadata.endringstidspunkt,\n        );\n\n        //TODO (TOR) Denne bør vel håndterast på eit tidligare tidspunkt?\n        if (cleanedSøknad.uttaksplan.length === 0 && cleanedSøknad.erEndringssøknad) {\n            throw new Error('Søknaden din inneholder ingen nye perioder.');\n        }\n\n        let kvittering;\n\n        try {\n            const response = await Api.sendSøknad(cleanedSøknad, fødselsnr, abortSignal);\n            kvittering = response.data;\n        } catch (error: unknown) {\n            //TODO (TOR) Håndter dette utanfor denne hook'en (På same måte i alle appane)\n\n            if (isAxiosError(error)) {\n                if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n                    redirectToLogin();\n                }\n\n                sendErrorMessageToSentry(error);\n\n                if (\n                    error.response &&\n                    error.response.status === 400 &&\n                    error.response.data &&\n                    error.response.data.messages &&\n                    error.response.data.messages.includes(\n                        'Vedleggslisten kan ikke inneholde flere enn 40 opplastede vedlegg',\n                    )\n                ) {\n                    throw new Error(FOR_MANGE_VEDLEGG_ERROR);\n                }\n\n                const submitErrorCallId = getErrorCallId(error);\n                const callIdForBruker =\n                    submitErrorCallId !== UKJENT_UUID ? submitErrorCallId.slice(0, 8) : submitErrorCallId;\n                throw new Error(FEIL_VED_INNSENDING + callIdForBruker);\n            }\n            throw new Error(String(error));\n        }\n\n        try {\n            await Api.deleteMellomlagretSøknad(fødselsnr, abortSignal);\n        } catch (error) {\n            // Vi bryr oss ikke om feil her. Logges bare i backend\n        }\n\n        setKvittering(kvittering);\n    };\n\n    return sendSøknad;\n};\n\nexport default useSendSøknad;\n","import { useNavigate } from 'react-router-dom';\nimport { logAmplitudeEvent } from 'app/amplitude/amplitude';\nimport Api from 'app/api/api';\nimport { useContextReset } from 'app/context/FpDataContext';\nimport { useCallback } from 'react';\n\nexport const useAvbrytSøknad = (\n    fødselsnr: string,\n    setErEndringssøknad: (erEndringssøknad: boolean) => void,\n    setHarGodkjentVilkår: (harGodkjentVilkår: boolean) => void,\n    setSøknadGjelderNyttBarn: (søknadGjelderNyttBarn?: boolean) => void,\n) => {\n    const navigate = useNavigate();\n    const reset = useContextReset();\n\n    const avbrytSøknadHandler = useCallback(() => {\n        logAmplitudeEvent('applikasjon-hendelse', {\n            app: 'foreldrepengesoknad',\n            team: 'foreldrepenger',\n            hendelse: 'avbrutt',\n        });\n\n        reset();\n\n        setErEndringssøknad(false);\n        setHarGodkjentVilkår(false);\n        setSøknadGjelderNyttBarn(undefined);\n\n        Api.deleteMellomlagretSøknad(fødselsnr);\n        //TODO (TOR) Slett vedlegg. Men vent til Andreas har fått inn vedleggsendringa si\n\n        navigate('/');\n    }, [fødselsnr, navigate, reset, setErEndringssøknad, setHarGodkjentVilkår, setSøknadGjelderNyttBarn]);\n\n    return avbrytSøknadHandler;\n};\n","import { LocaleNo } from '@navikt/fp-types';\nimport IkkeMyndig from 'app/pages/ikkeMyndig/IkkeMyndig';\nimport Velkommen from 'app/pages/velkommen/Velkommen';\nimport AnnenForelder from 'app/steps/annen-forelder/AnnenForelder';\nimport Inntektsinformasjon from 'app/steps/inntektsinformasjon/Inntektsinformasjon';\nimport OmBarnet from 'app/steps/om-barnet/OmBarnet';\nimport Oppsummering from 'app/steps/oppsummering/Oppsummering';\nimport SøkersituasjonSteg from 'app/steps/søkersituasjon/SøkersituasjonSteg';\nimport UttaksplanInfo from 'app/steps/uttaksplan-info/UttaksplanInfo';\nimport UttaksplanStep from 'app/steps/uttaksplan/UttaksplanStep';\nimport { FunctionComponent, useEffect, useState } from 'react';\nimport { Route, useNavigate, Navigate, Routes, useLocation } from 'react-router-dom';\nimport isAvailable from './isAvailable';\nimport SøknadRoutes from './routes';\nimport UtenlandsoppholdSteg from 'app/steps/utenlandsopphold/UtenlandsoppholdSteg';\nimport TidligereUtenlandsoppholdSteg from 'app/steps/utenlandsoppholdTidligere/TidligereUtenlandsoppholdSteg';\nimport SenereUtenlandsoppholdSteg from 'app/steps/utenlandsoppholdSenere/SenereUtenlandsoppholdSteg';\nimport { Sak, Søkerinfo } from '@navikt/fp-common';\nimport useMellomlagreSøknad from 'app/context/useMellomlagreSøknad';\nimport useSendSøknad from 'app/context/useSendSøknad';\nimport { ContextDataType, useContextGetData } from 'app/context/FpDataContext';\nimport { Kvittering } from 'app/types/Kvittering';\nimport { useAvbrytSøknad } from 'app/context/useAvbrytSøknad';\n\nconst renderSøknadRoutes = (\n    harGodkjentVilkår: boolean,\n    erEndringssøknad: boolean,\n    søkerErMyndig: boolean,\n    søkerInfo: Søkerinfo,\n    mellomlagreSøknadOgNaviger: () => void,\n    sendSøknad: (abortSignal: AbortSignal) => Promise<void>,\n    avbrytSøknad: () => void,\n    søknadGjelderNyttBarn?: boolean,\n) => {\n    if (!harGodkjentVilkår || søknadGjelderNyttBarn === undefined) {\n        return <Route path=\"*\" element={<Navigate to={SøknadRoutes.VELKOMMEN} />} />;\n    }\n\n    if (!søkerErMyndig) {\n        return <Route path=\"*\" element={<Navigate to={SøknadRoutes.IKKE_MYNDIG} />} />;\n    }\n\n    if (erEndringssøknad) {\n        return (\n            <>\n                <Route\n                    path={SøknadRoutes.UTTAKSPLAN}\n                    element={\n                        <UttaksplanStep\n                            søkerInfo={søkerInfo}\n                            erEndringssøknad={erEndringssøknad}\n                            mellomlagreSøknadOgNaviger={mellomlagreSøknadOgNaviger}\n                            avbrytSøknad={avbrytSøknad}\n                        />\n                    }\n                />\n                <Route\n                    path={SøknadRoutes.OPPSUMMERING}\n                    element={\n                        <Oppsummering\n                            erEndringssøknad={erEndringssøknad}\n                            søkerInfo={søkerInfo}\n                            sendSøknad={sendSøknad}\n                            avbrytSøknad={avbrytSøknad}\n                            mellomlagreSøknadOgNaviger={mellomlagreSøknadOgNaviger}\n                        />\n                    }\n                />\n            </>\n        );\n    }\n\n    return (\n        <>\n            <Route\n                path={SøknadRoutes.SØKERSITUASJON}\n                element={\n                    <SøkersituasjonSteg\n                        kjønn={søkerInfo.person.kjønn}\n                        mellomlagreSøknadOgNaviger={mellomlagreSøknadOgNaviger}\n                        avbrytSøknad={avbrytSøknad}\n                    />\n                }\n            />\n            <Route\n                path={SøknadRoutes.OM_BARNET}\n                element={\n                    <OmBarnet\n                        søkerInfo={søkerInfo}\n                        søknadGjelderNyttBarn={søknadGjelderNyttBarn}\n                        mellomlagreSøknadOgNaviger={mellomlagreSøknadOgNaviger}\n                        avbrytSøknad={avbrytSøknad}\n                    />\n                }\n            />\n            <Route\n                path={SøknadRoutes.ANNEN_FORELDER}\n                element={\n                    <AnnenForelder\n                        søkerInfo={søkerInfo}\n                        mellomlagreSøknadOgNaviger={mellomlagreSøknadOgNaviger}\n                        avbrytSøknad={avbrytSøknad}\n                    />\n                }\n            />\n            <Route\n                path={SøknadRoutes.UTTAKSPLAN_INFO}\n                element={\n                    <UttaksplanInfo\n                        søkerInfo={søkerInfo}\n                        erEndringssøknad={erEndringssøknad}\n                        mellomlagreSøknadOgNaviger={mellomlagreSøknadOgNaviger}\n                        avbrytSøknad={avbrytSøknad}\n                    />\n                }\n            />\n            <Route\n                path={SøknadRoutes.UTTAKSPLAN}\n                element={\n                    <UttaksplanStep\n                        søkerInfo={søkerInfo}\n                        erEndringssøknad={erEndringssøknad}\n                        mellomlagreSøknadOgNaviger={mellomlagreSøknadOgNaviger}\n                        avbrytSøknad={avbrytSøknad}\n                    />\n                }\n            />\n            <Route\n                path={SøknadRoutes.UTENLANDSOPPHOLD}\n                element={\n                    <UtenlandsoppholdSteg\n                        mellomlagreSøknadOgNaviger={mellomlagreSøknadOgNaviger}\n                        avbrytSøknad={avbrytSøknad}\n                    />\n                }\n            />\n            <Route\n                path={SøknadRoutes.TIDLIGERE_UTENLANDSOPPHOLD}\n                element={\n                    <TidligereUtenlandsoppholdSteg\n                        mellomlagreSøknadOgNaviger={mellomlagreSøknadOgNaviger}\n                        avbrytSøknad={avbrytSøknad}\n                    />\n                }\n            />\n            <Route\n                path={SøknadRoutes.SENERE_UTENLANDSOPPHOLD}\n                element={\n                    <SenereUtenlandsoppholdSteg\n                        mellomlagreSøknadOgNaviger={mellomlagreSøknadOgNaviger}\n                        avbrytSøknad={avbrytSøknad}\n                    />\n                }\n            />\n            <Route\n                path={SøknadRoutes.INNTEKTSINFORMASJON}\n                element={\n                    <Inntektsinformasjon\n                        søkerInfo={søkerInfo}\n                        mellomlagreSøknadOgNaviger={mellomlagreSøknadOgNaviger}\n                        avbrytSøknad={avbrytSøknad}\n                    />\n                }\n            />\n            <Route\n                path={SøknadRoutes.OPPSUMMERING}\n                element={\n                    <Oppsummering\n                        erEndringssøknad={erEndringssøknad}\n                        søkerInfo={søkerInfo}\n                        sendSøknad={sendSøknad}\n                        avbrytSøknad={avbrytSøknad}\n                        mellomlagreSøknadOgNaviger={mellomlagreSøknadOgNaviger}\n                    />\n                }\n            />\n        </>\n    );\n};\n\ninterface Props {\n    locale: LocaleNo;\n    onChangeLocale: (locale: LocaleNo) => void;\n    currentRoute: SøknadRoutes;\n    søkerInfo: Søkerinfo;\n    saker: Sak[];\n    lagretErEndringssøknad?: boolean;\n    lagretHarGodkjentVilkår?: boolean;\n    lagretSøknadGjelderNyttBarn?: boolean;\n    setKvittering: (kvittering: Kvittering) => void;\n}\n\nconst ForeldrepengesøknadRoutes: FunctionComponent<Props> = ({\n    locale,\n    onChangeLocale,\n    currentRoute,\n    søkerInfo,\n    saker,\n    lagretErEndringssøknad,\n    lagretHarGodkjentVilkår,\n    lagretSøknadGjelderNyttBarn,\n    setKvittering,\n}) => {\n    const navigate = useNavigate();\n    const location = useLocation();\n    const [isFirstTimeLoadingApp, setIsFirstTimeLoadingApp] = useState(true);\n\n    const [harGodkjentVilkår, setHarGodkjentVilkår] = useState(lagretHarGodkjentVilkår || false);\n    const [erEndringssøknad, setErEndringssøknad] = useState(lagretErEndringssøknad || false);\n    const [søknadGjelderNyttBarn, setSøknadGjelderNyttBarn] = useState(lagretSøknadGjelderNyttBarn);\n\n    const sendSøknad = useSendSøknad(søkerInfo.person.fnr, erEndringssøknad, setKvittering, locale);\n\n    const mellomlagreSøknadOgNaviger = useMellomlagreSøknad(\n        locale,\n        søkerInfo.person.fnr,\n        erEndringssøknad,\n        harGodkjentVilkår,\n        søknadGjelderNyttBarn,\n    );\n\n    const avbrytSøknad = useAvbrytSøknad(\n        søkerInfo.person.fnr,\n        setErEndringssøknad,\n        setHarGodkjentVilkår,\n        setSøknadGjelderNyttBarn,\n    );\n\n    const uttaksplan = useContextGetData(ContextDataType.UTTAKSPLAN);\n\n    const erMyndig = søkerInfo.person.erMyndig;\n\n    useEffect(() => {\n        if (currentRoute && erMyndig && lagretHarGodkjentVilkår && isFirstTimeLoadingApp) {\n            setIsFirstTimeLoadingApp(false);\n            if (isAvailable(currentRoute, lagretHarGodkjentVilkår, uttaksplan)) {\n                navigate(currentRoute);\n            } else {\n                if (location.pathname === SøknadRoutes.OPPSUMMERING) {\n                    navigate(SøknadRoutes.UTTAKSPLAN);\n                }\n            }\n        }\n    }, [\n        currentRoute,\n        erMyndig,\n        lagretHarGodkjentVilkår,\n        navigate,\n        isFirstTimeLoadingApp,\n        location.pathname,\n        uttaksplan,\n    ]);\n\n    return (\n        <Routes>\n            <Route\n                path={SøknadRoutes.VELKOMMEN}\n                element={\n                    <Velkommen\n                        fornavn={søkerInfo.person.fornavn}\n                        locale={locale}\n                        saker={saker}\n                        onChangeLocale={onChangeLocale}\n                        fnr={søkerInfo.person.fnr}\n                        harGodkjentVilkår={harGodkjentVilkår}\n                        søkerInfo={søkerInfo}\n                        setHarGodkjentVilkår={setHarGodkjentVilkår}\n                        setErEndringssøknad={setErEndringssøknad}\n                        setSøknadGjelderNyttBarn={setSøknadGjelderNyttBarn}\n                        mellomlagreSøknadOgNaviger={mellomlagreSøknadOgNaviger}\n                    />\n                }\n            />\n            <Route path={SøknadRoutes.IKKE_MYNDIG} element={<IkkeMyndig søkerInfo={søkerInfo} />} />\n\n            {renderSøknadRoutes(\n                harGodkjentVilkår,\n                erEndringssøknad,\n                erMyndig,\n                søkerInfo,\n                mellomlagreSøknadOgNaviger,\n                sendSøknad,\n                avbrytSøknad,\n                søknadGjelderNyttBarn,\n            )}\n        </Routes>\n    );\n};\n\nexport default ForeldrepengesøknadRoutes;\n","import { FpMellomlagretData } from 'app/api/api';\nimport SøknadRoutes from 'app/routes/routes';\n\nconst isEndringssøknadRoute = (route: SøknadRoutes): boolean => {\n    switch (route) {\n        case SøknadRoutes.UTTAKSPLAN:\n        case SøknadRoutes.OPPSUMMERING:\n        case SøknadRoutes.SØKNAD_SENDT:\n            return true;\n        default:\n            return false;\n    }\n};\n\nexport const shouldApplyStorage = (storedState: FpMellomlagretData): boolean => {\n    if (storedState.søknad && storedState.søknad.erEndringssøknad) {\n        if (!isEndringssøknadRoute(storedState.currentRoute)) {\n            return false;\n        }\n    }\n\n    return storedState.version === 5;\n};\n","import { FpMellomlagretData } from 'app/api/api';\nimport { ContextDataMap, ContextDataType } from './FpDataContext';\n\n// TODO (TOR) Reduser mappingbehov. Målbilde: Form-verdiar === mellomlagra data === lagra søknad\nexport const konverterMellomlagretDataTilAppData = (mellomlagretState: FpMellomlagretData): ContextDataMap => {\n    const søknad = mellomlagretState.søknad;\n\n    return {\n        [ContextDataType.APP_ROUTE]: mellomlagretState.currentRoute,\n        [ContextDataType.EKSISTERENDE_SAK]: mellomlagretState.eksisterendeSak,\n        [ContextDataType.BARN_FRA_NESTE_SAK]: mellomlagretState.barnFraNesteSak,\n        [ContextDataType.SØKERSITUASJON]: søknad?.søkersituasjon,\n        [ContextDataType.OM_BARNET]: søknad?.barn,\n        [ContextDataType.ANNEN_FORELDER]: søknad?.annenForelder,\n        [ContextDataType.SØKER]: søknad?.søker,\n        [ContextDataType.UTENLANDSOPPHOLD]: søknad?.informasjonOmUtenlandsopphold\n            ? {\n                  iNorgeNeste12Mnd: søknad.informasjonOmUtenlandsopphold.iNorgeNeste12Mnd,\n                  iNorgeSiste12Mnd: søknad.informasjonOmUtenlandsopphold.iNorgeSiste12Mnd,\n              }\n            : undefined,\n        [ContextDataType.UTENLANDSOPPHOLD_SENERE]: søknad?.informasjonOmUtenlandsopphold\n            ? {\n                  senereOpphold: søknad.informasjonOmUtenlandsopphold.senereOpphold,\n              }\n            : undefined,\n        [ContextDataType.UTENLANDSOPPHOLD_TIDLIGERE]: søknad?.informasjonOmUtenlandsopphold\n            ? {\n                  tidligereOpphold: søknad.informasjonOmUtenlandsopphold.tidligereOpphold,\n              }\n            : undefined,\n        [ContextDataType.UTTAKSPLAN_INFO]: mellomlagretState.uttaksplanInfo,\n        [ContextDataType.UTTAKSPLAN]: søknad?.uttaksplan,\n        [ContextDataType.UTTAKSPLAN_METADATA]: {\n            dekningsgrad: søknad?.dekningsgrad,\n            tilleggsopplysninger: søknad?.tilleggsopplysninger,\n            ønskerJustertUttakVedFødsel: søknad?.ønskerJustertUttakVedFødsel,\n            perioderSomSkalSendesInn: mellomlagretState.perioderSomSkalSendesInn,\n            antallUkerIUttaksplan: mellomlagretState.antallUkerIUttaksplan,\n            harUttaksplanBlittSlettet: mellomlagretState.harUttaksplanBlittSlettet,\n            annenPartsUttakErLagtTilIPlan: mellomlagretState.annenPartsUttakErLagtTilIPlan,\n            endringstidspunkt: mellomlagretState.endringstidspunkt,\n        },\n    };\n};\n","import * as Sentry from '@sentry/browser';\nimport Feilside from 'app/pages/feilside/Feilside';\nimport { FOR_MANGE_VEDLEGG_ERROR } from 'app/api/apiUtils';\nimport { Component, ReactElement } from 'react';\nimport { Søkerinfo, links } from '@navikt/fp-common';\n\ninterface Props {\n    søkerInfo?: Søkerinfo;\n    children: ReactElement;\n}\n\ninterface State {\n    hasError: boolean;\n    error: Error | null;\n}\n\nclass ErrorBoundary extends Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = { hasError: false, error: null };\n    }\n\n    componentDidCatch(error: Error | null, errorInfo: any): void {\n        if (error && error.message !== 'window.hasFocus is not a function') {\n            this.setState({ ...this.state, hasError: true, error });\n\n            Sentry.withScope((scope) => {\n                scope.setExtras(errorInfo);\n                Sentry.captureException(error);\n            });\n        }\n    }\n\n    render() {\n        if (this.state.hasError) {\n            const feilPgaForMangeVedlegg =\n                !!this.state.error &&\n                !!this.state.error.message &&\n                this.state.error.message === FOR_MANGE_VEDLEGG_ERROR;\n            const feilsideTittel = feilPgaForMangeVedlegg ? 'Feil: for mange vedlegg' : 'Informasjon om feilen';\n            return (\n                <Feilside\n                    dokumenttittel=\"NAV Foreldrepengesøknad\"\n                    ingress={`${this.state.error?.message}`}\n                    tittel={feilsideTittel}\n                    søkerInfo={this.props.søkerInfo}\n                    illustrasjon={{\n                        tittel: 'Hei!',\n                        tekst: 'Noe har gått galt med søknaden.',\n                        lenke: { tekst: 'Her finner du en lenke til brukerstøtte', url: links.brukerstøtte },\n                    }}\n                    skalKunneGåTilbakeTilSøknad={feilPgaForMangeVedlegg}\n                />\n            );\n        }\n\n        return this.props.children;\n    }\n}\nexport default ErrorBoundary;\n","import { useEffect, useMemo, useState } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Loader } from '@navikt/ds-react';\nimport { LocaleNo } from '@navikt/fp-types';\nimport { redirect } from '@navikt/fp-utils';\nimport Api from './api/api';\nimport { sendErrorMessageToSentry } from './api/apiUtils';\nimport ForeldrepengesøknadRoutes from './routes/ForeldrepengesøknadRoutes';\nimport SøknadRoutes from './routes/routes';\nimport mapSøkerinfoDTOToSøkerinfo from './utils/mapSøkerinfoDTO';\nimport { shouldApplyStorage } from './utils/mellomlagringUtils';\nimport { RequestStatus } from './types/RequestState';\nimport { FpDataContext } from './context/FpDataContext';\nimport { konverterMellomlagretDataTilAppData } from './context/konverterMellomlagretDataTilAppData';\nimport ErrorBoundary from './errorBoundary/ErrorBoundary';\nimport { Kvittering } from './types/Kvittering';\nimport Environment from './Environment';\n\nconst Spinner: React.FunctionComponent = () => (\n    <div style={{ textAlign: 'center', padding: '12rem 0' }}>\n        <Loader size=\"2xlarge\" />\n    </div>\n);\n\ninterface Props {\n    locale: LocaleNo;\n    onChangeLocale: (locale: LocaleNo) => void;\n}\n\nconst Foreldrepengesøknad: React.FunctionComponent<Props> = ({ locale, onChangeLocale }) => {\n    const { søkerinfoData, søkerinfoError } = Api.useSøkerinfo();\n    const { sakerData, sakerError } = Api.useGetSaker();\n    const { storageData, storageStatus } = Api.useStoredAppState();\n\n    const [kvittering, setKvittering] = useState<Kvittering>();\n\n    useEffect(() => {\n        if (søkerinfoError) {\n            sendErrorMessageToSentry(søkerinfoError);\n            throw new Error(\n                `Vi klarte ikke å hente informasjon om deg. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`,\n            );\n        }\n        if (sakerError) {\n            sendErrorMessageToSentry(sakerError);\n            throw new Error(\n                `Vi klarte ikke å hente informasjon om sakene dine. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`,\n            );\n        }\n    }, [søkerinfoError, sakerError]);\n\n    // TODO (TOR) Dropp mapping her og dytt mellomlagra data inn i context rått\n    const initialState = useMemo(\n        () =>\n            storageData && shouldApplyStorage(storageData)\n                ? konverterMellomlagretDataTilAppData(storageData)\n                : undefined,\n        [storageData],\n    );\n\n    const søkerInfo = useMemo(\n        () => (søkerinfoData ? mapSøkerinfoDTOToSøkerinfo(søkerinfoData) : undefined),\n        [søkerinfoData],\n    );\n\n    useEffect(() => {\n        if (storageData?.søknad?.søker?.språkkode && storageData.søknad.søker.språkkode !== locale) {\n            onChangeLocale(storageData.søknad?.søker?.språkkode);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [storageData]);\n\n    if (kvittering) {\n        if (Environment.INNSYN) {\n            redirect(\n                kvittering.saksNr\n                    ? `${Environment.INNSYN}/sak/${kvittering.saksNr}/redirectFromSoknad`\n                    : `${Environment.INNSYN}/redirectFromSoknad`,\n            );\n            return <Spinner />;\n        }\n        return <div>Redirected to Innsyn</div>;\n    }\n\n    if (!sakerData || !søkerInfo || storageStatus === RequestStatus.IN_PROGRESS) {\n        return <Spinner />;\n    }\n\n    return (\n        <ErrorBoundary søkerInfo={søkerInfo}>\n            <FpDataContext initialState={initialState}>\n                <BrowserRouter>\n                    <ForeldrepengesøknadRoutes\n                        locale={locale}\n                        onChangeLocale={onChangeLocale}\n                        søkerInfo={søkerInfo}\n                        saker={sakerData.foreldrepenger}\n                        currentRoute={storageData ? storageData.currentRoute : SøknadRoutes.VELKOMMEN}\n                        lagretErEndringssøknad={storageData?.søknad?.erEndringssøknad}\n                        lagretHarGodkjentVilkår={storageData?.søknad?.harGodkjentVilkår}\n                        lagretSøknadGjelderNyttBarn={storageData?.søknadGjelderEtNyttBarn}\n                        setKvittering={setKvittering}\n                    />\n                </BrowserRouter>\n            </FpDataContext>\n        </ErrorBoundary>\n    );\n};\n\nexport default Foreldrepengesøknad;\n","import { detect } from 'detect-browser';\n\nexport const shouldChangeBrowser = () => {\n    const browserInfo = detect();\n    return browserInfo ? browserInfo.name === 'ie' : false;\n};\n","import { useEffect, useState } from 'react';\nimport dayjs from 'dayjs';\nimport { Modal } from '@navikt/ds-react';\nimport { IntlProvider } from '@navikt/fp-ui';\nimport { LocaleNo } from '@navikt/fp-types';\nimport { allCommonMessages, getLocaleFromSessionStorage, setLocaleInSessionStorage } from '@navikt/fp-common';\nimport Foreldrepengesøknad from './Foreldrepengesøknad';\nimport ByttBrowserModal from 'app/pages/byttBrowserModal/ByttBrowserModal';\nimport ErrorBoundary from './errorBoundary/ErrorBoundary';\nimport { shouldChangeBrowser } from './utils/browserUtils';\nimport nnMessages from './intl/nn_NO.json';\nimport nbMessages from './intl/nb_NO.json';\n\nconst localeFromSessionStorage = getLocaleFromSessionStorage<LocaleNo>();\n\nconst MESSAGES_GROUPED_BY_LOCALE = {\n    nb: { ...nbMessages, ...allCommonMessages.nb },\n    nn: { ...nnMessages, ...allCommonMessages.nn },\n};\n\ndayjs.locale(localeFromSessionStorage);\n\nconst AppContainer = () => {\n    const [locale, setLocale] = useState<LocaleNo>(localeFromSessionStorage);\n\n    useEffect(() => {\n        if (Modal.setAppElement) {\n            Modal.setAppElement('#app');\n        }\n    });\n\n    return (\n        <ErrorBoundary>\n            <IntlProvider locale={locale} messagesGroupedByLocale={MESSAGES_GROUPED_BY_LOCALE}>\n                <ByttBrowserModal skalEndreNettleser={shouldChangeBrowser()} />\n                <Foreldrepengesøknad\n                    locale={locale}\n                    onChangeLocale={(activeLocale: LocaleNo) => {\n                        setLocaleInSessionStorage(activeLocale);\n                        setLocale(activeLocale);\n                    }}\n                />\n            </IntlProvider>\n        </ErrorBoundary>\n    );\n};\n\nexport default AppContainer;\n"],"names":["LocaleSessionKey","getLocaleFromSessionStorage","setLocaleInSessionStorage","locale","__spreadArray","this","to","from","pack","i","l","ar","BrowserInfo","name","version","os","NodeInfo","SearchBotDeviceInfo","bot","BotInfo","ReactNativeInfo","SEARCHBOX_UA_REGEX","SEARCHBOT_OS_REGEX","REQUIRED_VERSION_PARTS","userAgentRules","operatingSystemRules","detect","userAgent","parseUserAgent","getNodeVersion","matchUserAgent","ua","matched","_a","browser","regex","uaMatch","matchedRule","match","versionParts","createVersionParts","detectOS","searchBotMatch","ii","count","isNode","output","redirect","url","IkkeMyndig","søkerInfo","intl","useIntl","jsx","Feilside","intlUtils","links","useDebounce","value","delay","debouncedValue","setDebouncedValue","useState","useEffect","handler","erPeriodeSomSkalSendesInn","periode","isUttaksperiode","isOverføringsperiode","isUtsettelsesperiode","isOppholdsperiode","getPerioderSomSkalSendesInn","nyPlan","erEndringssøknad","erFarEllerMedmor","opprinneligPlan","endringstidspunkt","getEndretUttaksplanForInnsending","finnEndringerIUttaksplan","nyPlanForInnsending","p","dateIsWithinRange","dayjs","førsteSlettedePeriode","guid","Periodetype","UtsettelseÅrsakType","Forelder","erSøkerFarEllerMedmor","VilDuGåTilbakeModal","isOpen","setIsOpen","goToPreviousStep","bem","bemUtils","jsxs","Modal","Block","Heading","BodyShort","Button","FormattedMessage","UttaksplanFormField","UttaksplanFormComponents","getTypedFormComponents","mapUttaksplanFormValueToState","convertYesOrNoOrUndefinedToBoolean","getUttaksplanFormInitialValues","ønskerAutomatiskJustering","convertBooleanOrUndefinedToYesOrNo","YesOrNo","getKanPeriodenRundtFødselJusteres","periodeRundtFødsel","termindato","Uttaksdagen","StønadskontoType","getKanJustereAutomatiskVedFødsel","perioderMedUttakRundtFødsel","barn","BarnType","getVisAutomatiskJusteringForm","familiehendelsesdato","situasjon","bareFarHarRett","andreAugust2022ReglerGjelder","isUfødtBarn","AutomatiskJusteringForm","antallBarn","visibility","uttaksdagPåEllerEtterTermin","uttaksplanMetadata","notEmpty","useContextGetData","ContextDataType","oppdaterUttaksplanMetadata","useContextSaveData","brukerSvarteJaPåAutoJustering","svarteJaMenFlerePerioderInnen6Uker","svarteJaMenStarterIkkeLengerPåTermin","svarteJaMenEndretPeriodenPåTermin","svarteJaMenEndretPeriodenTilØnskerFlerbarnsdager","infoTekstId","handleOnChange","ønskerJustertUttakVedFødsel","Alert","includeAutomatiskJusteringSpørsmål","UttaksplanFormConfig","uttaksplanQuestionsConfig","Questions","EMPTY_PERIOD_ARRAY","UttaksplanStep","mellomlagreSøknadOgNaviger","avbrytSøknad","onFortsettSøknadSenere","useFortsettSøknadSenere","isSubmitting","setIsSubmitting","submitIsClicked","setSubmitIsClicked","gåTilbakeIsOpen","setGåTilbakeIsOpen","uttaksplanErGyldig","setUttaksplanErGyldig","søkersituasjon","annenForelder","søker","uttaksplanInfo","uttaksplan","barnFraNesteSak","eksisterendeSak","oppdaterBarn","oppdaterBarnFraNesteSak","oppdaterUttaksplan","oppdaterEksisterendeSak","oppdaterAppRoute","setEndringstidspunkt","perioderSomSkalSendesInn","setPerioderSomSkalSendesInn","nextRoute","SøknadRoutes","person","arbeidsforhold","erAleneOmOmsorg","rolle","annenForelderKjønn","getKjønnFromFnr","erDeltUttak","isAnnenForelderOppgitt","isFarEllerMedmor","morErAleneOmOmsorg","getMorErAleneOmOmsorg","farMedmorErAleneOmOmsorg","getFarMedmorErAleneOmOmsorg","søkerErAleneOmOmsorg","forelderVedAleneomsorg","getFamiliehendelsedato","familiehendelsesdatoDate","ISOStringToDate","erMorUfør","getErMorUfør","navnPåForeldre","getNavnPåForeldre","erFlerbarnssøknad","morHarRett","getMorHarRettPåForeldrepengerINorgeEllerEØS","harKomplettUttaksplan","harMidlertidigOmsorg","morsSisteDag","getMorsSisteDag","getTermindato","annenForelderFnr","erAdopsjon","annenForelderFnrNesteSak","førsteBarnFraNesteSakFnr","familieHendelseDatoNesteSak","førsteUttaksdagNesteBarnsSak","bareFarMedmorHarRett","barnFnr","eksisterendeSakAnnenPartRequestIsSuspended","debouncedState","useContextComplete","initialRender","useRef","eksisterendeSakAnnenPartData","eksisterendeSakAnnenPartError","eksisterendeSakAnnenPartRequestStatus","Api","eksisterendeVedtakAnnenPart","useMemo","mapAnnenPartsEksisterendeSakFromDTO","saksgrunnlagsTermindato","getTermindatoSomSkalBrukesFraSaksgrunnlagBeggeParter","saksgrunnlagsAntallBarn","getAntallBarnSomSkalBrukesFraSaksgrunnlagBeggeParter","nesteBarnsSakAnnenPartRequestIsSuspended","RequestStatus","nesteSakAnnenPartData","nesteSakAnnenPartError","nesteSakAnnenPartRequestStatus","dateToISOString","førsteUttaksdagAnnenPart","getStartdatoFørstePeriodeAnnenPart","oppdatertBarnNesteSak","harAktivitetskravIPeriodeUtenUttak","getHarAktivitetskravIPeriodeUtenUttak","overlappendePerioderAnnenPart","Periodene","isUttakAnnenPart","getSamtidigUttaksprosent","uttaksplanMedAnnenPart","finnOgSettInnHull","settInnAnnenPartsUttak","eksisterendeSakMedAnnenPartsPlan","handleBegrunnelseChange","årsak","begrunnelse","ekstraInformasjon","SenEndringÅrsak","opplysninger","periodeAngittAvAnnenPart","tidspunktForEndring","perioderForÅSendeInn","onSubmit","cleanedTilleggsopplysninger","cleanupInvisibleCharsFromTilleggsopplysninger","getPerioderMedUttakRundtFødsel","visAutomatiskJusteringForm","kanJustereAutomatiskVedFødsel","setØnskerJustertUttakVedFødselTilUndefinedHvisUgyldig","ønskerJustertUttakVedFødselErBesvart","ønskerAutomatiskJusteringSvar","ref","clickHandler","values","erTomEndringssøknad","foreldreSituasjon","getForeldreparSituasjon","kontoRequestIsSuspended","stønadskontoer100","tilgjengeligeStønadskontoerError","getStønadskontoParams","Dekningsgrad","stønadskontoer80","handleOnPlanChange","getEndringstidspunkt","sendErrorMessageToSentry","Loader","stønadskontoer","getValgtStønadskontoFor80Og100Prosent","minsterettUkerToTette","getAntallUkerMinsterett","valgteStønadskontoer","handleSlettUttaksplan","slettetPlanUtenomFpFørFødsel","isUttakAvForeldrepengerFørFødsel","handleResetUttaksplan","Step","stepConfig","InfoOmSøknaden","Uttaksplan","getAktiveArbeidsforhold","AttachmentApi","StepButtonWrapper","Link","event","getPreviousStepHref","isAvailable","route","harGodkjentVilkår","uttaksplanInneholderPerioderUtenKonto","mellomlagre","getDataFromState","fødselsnr","søknadGjelderEtNyttBarn","currentRoute","utenlandsopphold","senereUtenlandsopphold","tidligereUtenlandsopphold","dataSomSkalMellomlagres","useMellomlagreSøknad","navigate","useNavigate","useContextGetAnyData","skalMellomlagre","setSkalMellomlagre","error","redirectToLogin","useCallback","isAxiosError","candidate","useSendSøknad","setKvittering","hentData","abortSignal","cleanedSøknad","getSøknadsdataForInnsending","kvittering","FOR_MANGE_VEDLEGG_ERROR","submitErrorCallId","getErrorCallId","callIdForBruker","UKJENT_UUID","FEIL_VED_INNSENDING","useAvbrytSøknad","setErEndringssøknad","setHarGodkjentVilkår","setSøknadGjelderNyttBarn","reset","useContextReset","logAmplitudeEvent","renderSøknadRoutes","søkerErMyndig","sendSøknad","søknadGjelderNyttBarn","Route","Navigate","Fragment","Oppsummering","SøkersituasjonSteg","OmBarnet","AnnenForelder","UttaksplanInfo","UtenlandsoppholdSteg","TidligereUtenlandsoppholdSteg","SenereUtenlandsoppholdSteg","Inntektsinformasjon","ForeldrepengesøknadRoutes","onChangeLocale","saker","lagretErEndringssøknad","lagretHarGodkjentVilkår","lagretSøknadGjelderNyttBarn","location","useLocation","isFirstTimeLoadingApp","setIsFirstTimeLoadingApp","erMyndig","Routes","Velkommen","isEndringssøknadRoute","shouldApplyStorage","storedState","konverterMellomlagretDataTilAppData","mellomlagretState","søknad","ErrorBoundary","Component","props","errorInfo","Sentry.withScope","scope","Sentry.captureException","feilPgaForMangeVedlegg","feilsideTittel","Spinner","Foreldrepengesøknad","søkerinfoData","søkerinfoError","sakerData","sakerError","storageData","storageStatus","initialState","mapSøkerinfoDTOToSøkerinfo","_b","_d","_c","Environment","FpDataContext","BrowserRouter","shouldChangeBrowser","browserInfo","localeFromSessionStorage","MESSAGES_GROUPED_BY_LOCALE","nbMessages","allCommonMessages","nnMessages","AppContainer","setLocale","IntlProvider","ByttBrowserModal","activeLocale","AppContainer$1"],"mappings":"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","x_google_ignoreList":[1]}