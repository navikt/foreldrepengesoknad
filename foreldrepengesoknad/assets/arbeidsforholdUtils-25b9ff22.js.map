{"version":3,"file":"arbeidsforholdUtils-25b9ff22.js","sources":["../../../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/uniqBy.js","../../../../packages/fp-common/src/common/utils/arbeidsforholdUtils.ts"],"sourcesContent":["var baseIteratee = require('./_baseIteratee'),\n    baseUniq = require('./_baseUniq');\n\n/**\n * This method is like `_.uniq` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * uniqueness is computed. The order of result values is determined by the\n * order they occur in the array. The iteratee is invoked with one argument:\n * (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n * // => [2.1, 1.2]\n *\n * // The `_.property` iteratee shorthand.\n * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }, { 'x': 2 }]\n */\nfunction uniqBy(array, iteratee) {\n  return (array && array.length) ? baseUniq(array, baseIteratee(iteratee, 2)) : [];\n}\n\nmodule.exports = uniqBy;\n","import dayjs from 'dayjs';\nimport { getFørsteUttaksdag2UkerFørFødsel } from './wlbUtils';\nimport { dateIsBetween, getFørsteUttaksdagForeldrepengerFørFødsel } from './dateUtils';\nimport uniqBy from 'lodash/uniqBy';\nimport { Arbeidsforhold, TidsperiodeDate } from '../types';\n\nconst getArbeidsforholdFromOrgnummer = (\n    orgnummer: string,\n    arbeidsforhold: Arbeidsforhold[],\n): Arbeidsforhold | undefined => {\n    return arbeidsforhold.find((forhold) => forhold.arbeidsgiverId === orgnummer);\n};\n\nexport const getSamletStillingsprosentForArbeidsforhold = (\n    orgnumre: string[],\n    arbeidsforhold: Arbeidsforhold[],\n): number => {\n    return orgnumre\n        .map((orgnr) => getArbeidsforholdFromOrgnummer(orgnr, arbeidsforhold))\n        .filter((forhold) => forhold !== undefined)\n        .reduce((stillingsprosent, forhold) => {\n            return stillingsprosent + (forhold ? forhold.stillingsprosent : 0);\n        }, 0);\n};\n\nexport const getFraDatoForAktiveArbeidsforhold = (\n    erAdopsjon: boolean,\n    erFarEllerMedmor: boolean,\n    familiehendelsesdato: Date | undefined,\n): Date | undefined => {\n    if (familiehendelsesdato === undefined) {\n        return undefined;\n    }\n    if (erAdopsjon) {\n        return familiehendelsesdato;\n    }\n    if (erFarEllerMedmor) {\n        return getFørsteUttaksdag2UkerFørFødsel(familiehendelsesdato, undefined);\n    }\n    return getFørsteUttaksdagForeldrepengerFørFødsel(familiehendelsesdato);\n};\n\nexport const getAktiveArbeidsforhold = (\n    arbeidsforhold: Arbeidsforhold[],\n    erAdopsjon: boolean,\n    erFarEllerMedmor: boolean,\n    familiehendelsesdato?: Date,\n): Arbeidsforhold[] => {\n    const fraDato = getFraDatoForAktiveArbeidsforhold(erAdopsjon, erFarEllerMedmor, familiehendelsesdato);\n    return arbeidsforhold.filter(\n        (a) =>\n            a.tom === undefined ||\n            a.tom === null ||\n            (fraDato !== undefined && dayjs(fraDato).isSameOrBefore(a.tom, 'days')),\n    );\n};\n\nconst containsDuplicates = (arbeidsforhold: Arbeidsforhold[]): boolean => {\n    if (arbeidsforhold.length > 1) {\n        const arbeidsgiverIds = arbeidsforhold.map((a) => a.arbeidsgiverId);\n        const uniqueIds = new Set(arbeidsgiverIds);\n\n        return uniqueIds.size !== arbeidsgiverIds.length;\n    }\n\n    return false;\n};\n\nconst getArbeidsgiverId = (arbeidsforhold: Arbeidsforhold): string => {\n    return arbeidsforhold.arbeidsgiverId;\n};\n\nexport const getKunArbeidsforholdForValgtTidsperiode = (\n    arbeidsforhold: Arbeidsforhold[],\n    tidsperiode: TidsperiodeDate,\n): Arbeidsforhold[] => {\n    if (tidsperiode.tom && tidsperiode.fom) {\n        const kunArbeidsforholdForValgtTidsperiode = arbeidsforhold.filter((a) => {\n            if (a.tom === undefined) {\n                if (dayjs(tidsperiode.fom).isSameOrAfter(dayjs(a.fom), 'day')) {\n                    return true;\n                }\n\n                return false;\n            }\n\n            if (dateIsBetween(tidsperiode.fom, a.fom, a.tom) || dateIsBetween(tidsperiode.tom, a.fom, a.tom)) {\n                return true;\n            }\n\n            return false;\n        });\n\n        if (containsDuplicates(kunArbeidsforholdForValgtTidsperiode)) {\n            return uniqBy(kunArbeidsforholdForValgtTidsperiode, getArbeidsgiverId);\n        }\n\n        return kunArbeidsforholdForValgtTidsperiode;\n    }\n\n    return arbeidsforhold;\n};\n"],"names":["baseIteratee","require$$0","baseUniq","require$$1","uniqBy","array","iteratee","uniqBy_1","getFraDatoForAktiveArbeidsforhold","erAdopsjon","erFarEllerMedmor","familiehendelsesdato","getFørsteUttaksdag2UkerFørFødsel","getFørsteUttaksdagForeldrepengerFørFødsel","getAktiveArbeidsforhold","arbeidsforhold","fraDato","a","dayjs","containsDuplicates","arbeidsgiverIds","getArbeidsgiverId","getKunArbeidsforholdForValgtTidsperiode","tidsperiode","kunArbeidsforholdForValgtTidsperiode","dateIsBetween"],"mappings":"oPAAA,IAAIA,EAAeC,EACfC,EAAWC,EAyBf,SAASC,EAAOC,EAAOC,EAAU,CAC/B,OAAQD,GAASA,EAAM,OAAUH,EAASG,EAAOL,EAAaM,CAAW,CAAC,EAAI,EAChF,CAEA,IAAAC,EAAiBH,eCLJI,EAAoC,CAC7CC,EACAC,EACAC,IACmB,CACnB,GAAIA,IAAyB,OAG7B,OAAIF,EACOE,EAEPD,EACOE,EAAiCD,EAAsB,MAAS,EAEpEE,EAA0CF,CAAoB,CACzE,EAEaG,EAA0B,CACnCC,EACAN,EACAC,EACAC,IACmB,CACnB,MAAMK,EAAUR,EAAkCC,EAAYC,EAAkBC,CAAoB,EACpG,OAAOI,EAAe,OACjBE,GACGA,EAAE,MAAQ,QACVA,EAAE,MAAQ,MACTD,IAAY,QAAaE,EAAMF,CAAO,EAAE,eAAeC,EAAE,IAAK,MAAM,CAAA,CAEjF,EAEME,EAAsBJ,GAA8C,CAClE,GAAAA,EAAe,OAAS,EAAG,CAC3B,MAAMK,EAAkBL,EAAe,IAAKE,GAAMA,EAAE,cAAc,EAG3D,OAFW,IAAI,IAAIG,CAAe,EAExB,OAASA,EAAgB,MAC9C,CAEO,MAAA,EACX,EAEMC,EAAqBN,GAChBA,EAAe,eAGbO,EAA0C,CACnDP,EACAQ,IACmB,CACf,GAAAA,EAAY,KAAOA,EAAY,IAAK,CACpC,MAAMC,EAAuCT,EAAe,OAAQE,GAC5DA,EAAE,MAAQ,OACN,EAAAC,EAAMK,EAAY,GAAG,EAAE,cAAcL,EAAMD,EAAE,GAAG,EAAG,KAAK,EAO5D,GAAAQ,EAAcF,EAAY,IAAKN,EAAE,IAAKA,EAAE,GAAG,GAAKQ,EAAcF,EAAY,IAAKN,EAAE,IAAKA,EAAE,GAAG,EAKlG,EAEG,OAAAE,EAAmBK,CAAoC,EAChDpB,EAAOoB,EAAsCH,CAAiB,EAGlEG,CACX,CAEO,OAAAT,CACX","x_google_ignoreList":[0]}