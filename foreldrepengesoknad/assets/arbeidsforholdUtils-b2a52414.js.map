{"version":3,"file":"arbeidsforholdUtils-b2a52414.js","sources":["../../../../node_modules/.pnpm/lodash@4.17.21/node_modules/lodash/uniqBy.js","../../src/uttaksplan/utils/uttaksdatoerUtils.ts","../../src/app/utils/arbeidsforholdUtils.ts"],"sourcesContent":["var baseIteratee = require('./_baseIteratee'),\n    baseUniq = require('./_baseUniq');\n\n/**\n * This method is like `_.uniq` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * uniqueness is computed. The order of result values is determined by the\n * order they occur in the array. The iteratee is invoked with one argument:\n * (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n * // => [2.1, 1.2]\n *\n * // The `_.property` iteratee shorthand.\n * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }, { 'x': 2 }]\n */\nfunction uniqBy(array, iteratee) {\n  return (array && array.length) ? baseUniq(array, baseIteratee(iteratee, 2)) : [];\n}\n\nmodule.exports = uniqBy;\n","import { TidsperiodeDate } from '@navikt/fp-common';\nimport uttaksConstants from 'app/constants';\nimport { getTidsperiode, isValidTidsperiode } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\nimport { getFørsteUttaksdag2UkerFørFødsel } from 'app/utils/wlbUtils';\nimport dayjs from 'dayjs';\n\nexport interface Uttaksdatoer {\n    førsteUttaksdag: Date;\n    førFødsel: {\n        førsteMuligeUttaksdag: Date;\n        førsteUttaksdagForeldrepengerFørFødsel: Date;\n        sisteUttaksdagFørFødsel: Date;\n    };\n    etterFødsel: {\n        sisteUttaksdagInnenforSeksUker: Date;\n        førsteUttaksdagEtterSeksUker: Date;\n        sisteMuligeUttaksdag: Date;\n    };\n}\n\nexport const uttaksdatoer = (familiehendelsesdato: Date, erFarEllerMedmor: boolean, termindato: Date | undefined) => ({\n    førsteUttaksdagForeldrepengerFørFødsel: getFørsteUttaksdagForeldrepengerFørFødsel(familiehendelsesdato),\n    førsteUttaksdagPåEllerEtterFødsel: Uttaksdagen(familiehendelsesdato).denneEllerNeste(),\n    førsteMuligeUttaksdagFørTermin: getFørsteMuligeUttaksdag(familiehendelsesdato, erFarEllerMedmor, termindato),\n    sisteMuligeUttaksdagEtterTermin: getSisteMuligeUttaksdag(familiehendelsesdato),\n});\n\nexport const getUttaksdatoer = (\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined\n): Uttaksdatoer => {\n    const førsteUttaksdag = Uttaksdagen(familiehendelsesdato).denneEllerNeste();\n\n    const førsteUttaksdagForeldrepengerFørFødsel = getFørsteUttaksdagForeldrepengerFørFødsel(familiehendelsesdato);\n    const førsteMuligeUttaksdag = getFørsteMuligeUttaksdag(familiehendelsesdato, erFarEllerMedmor, termindato);\n    const sisteUttaksdagFørFødsel = Uttaksdagen(førsteUttaksdag).forrige();\n    const sisteMuligeUttaksdag = getSisteMuligeUttaksdag(familiehendelsesdato);\n\n    const sisteUttaksdagInnenforSeksUker = getTidsperiode(førsteUttaksdag, 30).tom;\n    return {\n        førsteUttaksdag,\n        førFødsel: {\n            førsteMuligeUttaksdag,\n            sisteUttaksdagFørFødsel,\n            førsteUttaksdagForeldrepengerFørFødsel,\n        },\n        etterFødsel: {\n            sisteUttaksdagInnenforSeksUker,\n            førsteUttaksdagEtterSeksUker: Uttaksdagen(sisteUttaksdagInnenforSeksUker).neste(),\n            sisteMuligeUttaksdag,\n        },\n    };\n};\n\nexport function getFørsteUttaksdagPåEllerEtterFødsel(familiehendelsesdato: Date) {\n    return Uttaksdagen(familiehendelsesdato).denneEllerNeste();\n}\n\nexport function getFørsteUttaksdagForeldrepengerFørFødsel(familiehendelsesdato: Date): Date {\n    return Uttaksdagen(getFørsteUttaksdagPåEllerEtterFødsel(familiehendelsesdato)).trekkFra(\n        uttaksConstants.ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5\n    );\n}\n\nexport function getFørsteMuligeUttaksdag(\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined\n): Date {\n    if (erFarEllerMedmor) {\n        if (andreAugust2022ReglerGjelder(familiehendelsesdato)) {\n            return getFørsteUttaksdag2UkerFørFødsel(familiehendelsesdato, termindato);\n        } else {\n            return Uttaksdagen(familiehendelsesdato).denneEllerNeste();\n        }\n    }\n    return Uttaksdagen(getFørsteUttaksdagPåEllerEtterFødsel(familiehendelsesdato)).trekkFra(\n        uttaksConstants.MAKS_ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5\n    );\n}\n\nexport function getSisteMuligeUttaksdag(familiehendelsesdato: Date): Date {\n    return Uttaksdagen(\n        dayjs(getFørsteUttaksdagPåEllerEtterFødsel(familiehendelsesdato))\n            .add(uttaksConstants.MAKS_PERMISJONSLENGDE_I_ÅR, 'year')\n            .subtract(1, 'day')\n            .toDate()\n    ).denneEllerNeste();\n}\n\nexport const erInnenFørsteSeksUkerFødselFarMedmor = (\n    tidsperiode: TidsperiodeDate,\n    situasjon: Situasjon,\n    søkerErFarEllerMedmor: boolean,\n    førsteUttaksdagEtterSeksUker: Date\n): boolean => {\n    if (\n        situasjon !== 'fødsel' ||\n        !søkerErFarEllerMedmor ||\n        tidsperiode === undefined ||\n        isValidTidsperiode(tidsperiode) === false\n    ) {\n        return false;\n    }\n    return dayjs(tidsperiode.fom).isBefore(dayjs(førsteUttaksdagEtterSeksUker), 'day');\n};\n","import { TidsperiodeDate } from '@navikt/fp-common';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport dayjs from 'dayjs';\nimport uniqBy from 'lodash/uniqBy';\nimport { dateIsBetween } from './dateUtils';\nimport { getFørsteUttaksdag2UkerFørFødsel } from './wlbUtils';\nimport { getFørsteUttaksdagForeldrepengerFørFødsel } from 'uttaksplan/utils/uttaksdatoerUtils';\n\nconst getArbeidsforholdFromOrgnummer = (\n    orgnummer: string,\n    arbeidsforhold: Arbeidsforhold[]\n): Arbeidsforhold | undefined => {\n    return arbeidsforhold.find((forhold) => forhold.arbeidsgiverId === orgnummer);\n};\n\nexport const getSamletStillingsprosentForArbeidsforhold = (\n    orgnumre: string[],\n    arbeidsforhold: Arbeidsforhold[]\n): number => {\n    return orgnumre\n        .map((orgnr) => getArbeidsforholdFromOrgnummer(orgnr, arbeidsforhold))\n        .filter((forhold) => forhold !== undefined)\n        .reduce((stillingsprosent, forhold) => {\n            return stillingsprosent + (forhold ? forhold.stillingsprosent : 0);\n        }, 0);\n};\n\nexport const getFraDatoForAktiveArbeidsforhold = (\n    erAdopsjon: boolean,\n    erFarEllerMedmor: boolean,\n    familiehendelsesdato: Date | undefined\n): Date | undefined => {\n    if (familiehendelsesdato === undefined) {\n        return undefined;\n    }\n    if (erAdopsjon) {\n        return familiehendelsesdato;\n    }\n    if (erFarEllerMedmor) {\n        return getFørsteUttaksdag2UkerFørFødsel(familiehendelsesdato, undefined);\n    }\n    return getFørsteUttaksdagForeldrepengerFørFødsel(familiehendelsesdato);\n};\n\nexport const getAktiveArbeidsforhold = (\n    arbeidsforhold: Arbeidsforhold[],\n    erAdopsjon: boolean,\n    erFarEllerMedmor: boolean,\n    familiehendelsesdato?: Date\n): Arbeidsforhold[] => {\n    const fraDato = getFraDatoForAktiveArbeidsforhold(erAdopsjon, erFarEllerMedmor, familiehendelsesdato);\n    return arbeidsforhold.filter(\n        (a) =>\n            a.tom === undefined ||\n            a.tom === null ||\n            (fraDato !== undefined && dayjs(fraDato).isSameOrBefore(a.tom, 'days'))\n    );\n};\n\nconst containsDuplicates = (arbeidsforhold: Arbeidsforhold[]): boolean => {\n    if (arbeidsforhold.length > 1) {\n        const arbeidsgiverIds = arbeidsforhold.map((a) => a.arbeidsgiverId);\n        const uniqueIds = new Set(arbeidsgiverIds);\n\n        return uniqueIds.size !== arbeidsgiverIds.length;\n    }\n\n    return false;\n};\n\nconst getArbeidsgiverId = (arbeidsforhold: Arbeidsforhold): string => {\n    return arbeidsforhold.arbeidsgiverId;\n};\n\nexport const getKunArbeidsforholdForValgtTidsperiode = (\n    arbeidsforhold: Arbeidsforhold[],\n    tidsperiode: TidsperiodeDate\n): Arbeidsforhold[] => {\n    if (tidsperiode.tom && tidsperiode.fom) {\n        const kunArbeidsforholdForValgtTidsperiode = arbeidsforhold.filter((a) => {\n            if (a.tom === undefined) {\n                if (dayjs(tidsperiode.fom).isSameOrAfter(dayjs(a.fom), 'day')) {\n                    return true;\n                }\n\n                return false;\n            }\n\n            if (dateIsBetween(tidsperiode.fom, a.fom, a.tom) || dateIsBetween(tidsperiode.tom, a.fom, a.tom)) {\n                return true;\n            }\n\n            return false;\n        });\n\n        if (containsDuplicates(kunArbeidsforholdForValgtTidsperiode)) {\n            return uniqBy(kunArbeidsforholdForValgtTidsperiode, getArbeidsgiverId);\n        }\n\n        return kunArbeidsforholdForValgtTidsperiode;\n    }\n\n    return arbeidsforhold;\n};\n"],"names":["baseIteratee","require$$0","baseUniq","require$$1","uniqBy","array","iteratee","uniqBy_1","uttaksdatoer","familiehendelsesdato","erFarEllerMedmor","termindato","getFørsteUttaksdagForeldrepengerFørFødsel","Uttaksdagen","getFørsteMuligeUttaksdag","getSisteMuligeUttaksdag","getUttaksdatoer","førsteUttaksdag","førsteUttaksdagForeldrepengerFørFødsel","førsteMuligeUttaksdag","sisteUttaksdagFørFødsel","sisteMuligeUttaksdag","sisteUttaksdagInnenforSeksUker","getTidsperiode","getFørsteUttaksdagPåEllerEtterFødsel","uttaksConstants","andreAugust2022ReglerGjelder","getFørsteUttaksdag2UkerFørFødsel","dayjs","erInnenFørsteSeksUkerFødselFarMedmor","tidsperiode","situasjon","søkerErFarEllerMedmor","førsteUttaksdagEtterSeksUker","isValidTidsperiode","getFraDatoForAktiveArbeidsforhold","erAdopsjon","getAktiveArbeidsforhold","arbeidsforhold","fraDato","containsDuplicates","arbeidsgiverIds","a","getArbeidsgiverId","getKunArbeidsforholdForValgtTidsperiode","kunArbeidsforholdForValgtTidsperiode","dateIsBetween"],"mappings":"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","x_google_ignoreList":[0]}