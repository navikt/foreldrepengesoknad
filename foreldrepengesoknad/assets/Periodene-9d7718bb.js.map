{"version":3,"file":"Periodene-9d7718bb.js","sources":["../../../../packages/fp-common/src/common/types/AnnenForelder.ts","../../../../packages/fp-common/src/common/types/MorsAktivitet.ts","../../../../packages/fp-common/src/common/types/OppholdÅrsakType.ts","../../../../packages/fp-common/src/common/types/OverføringÅrsakType.ts","../../../../packages/fp-common/src/common/types/PeriodeInfoType.ts","../../../../packages/fp-common/src/common/types/StønadskontoType.ts","../../../../packages/fp-common/src/common/types/UtsettelseÅrsakType.ts","../../../../packages/fp-common/src/common/types/Periode.ts","../../../../packages/fp-common/src/common/types/SenEndringÅrsak.ts","../../../../packages/fp-common/src/common/utils/Perioden.ts","../../../../packages/fp-common/src/common/utils/numberUtils.ts","../../../../packages/fp-common/src/common/utils/stringUtils.ts","../../../../packages/fp-common/src/common/utils/personUtils.ts","../../../../packages/fp-common/src/common/utils/stønadskontoerUtils.ts","../../../../packages/fp-common/src/common/utils/wlbUtils.ts","../../../../packages/fp-common/src/common/utils/periodeUtils.ts","../../../../packages/fp-common/src/common/utils/uttaksPlanStatus.ts","../../../../packages/fp-common/src/common/utils/Periodene.ts"],"sourcesContent":["interface Common {\n    kanIkkeOppgis: boolean;\n}\n\nexport interface AnnenForelderOppgitt extends Common {\n    fornavn: string;\n    etternavn: string;\n    fnr: string;\n    utenlandskFnr?: boolean;\n    bostedsland?: string;\n    harRettPåForeldrepengerINorge?: boolean;\n    harOppholdtSegIEØS?: boolean;\n    harRettPåForeldrepengerIEØS?: boolean;\n    erInformertOmSøknaden?: boolean;\n    erForSyk?: boolean;\n    erUfør?: boolean;\n}\n\nexport type AnnenForelderIkkeOppgitt = Common;\n\nexport type AnnenForelder = AnnenForelderIkkeOppgitt | AnnenForelderOppgitt;\n\nexport const isAnnenForelderOppgitt = (annenForelder: AnnenForelder): annenForelder is AnnenForelderOppgitt => {\n    return annenForelder.kanIkkeOppgis === false;\n};\n\nexport const isAnnenForelderIkkeOppgitt = (annenForelder: AnnenForelder): annenForelder is AnnenForelderIkkeOppgitt => {\n    return annenForelder.kanIkkeOppgis === true;\n};\n","export enum MorsAktivitet {\n    Arbeid = 'ARBEID',\n    Utdanning = 'UTDANNING',\n    Kvalifiseringsprogrammet = 'KVALPROG',\n    Introduksjonsprogrammet = 'INTROPROG',\n    TrengerHjelp = 'TRENGER_HJELP',\n    Innlagt = 'INNLAGT',\n    ArbeidOgUtdanning = 'ARBEID_OG_UTDANNING',\n    Uføre = 'UFØRE',\n    IkkeOppgitt = 'IKKE_OPPGITT',\n}\n","export enum OppholdÅrsakType {\n    UttakFellesperiodeAnnenForelder = 'UTTAK_FELLESP_ANNEN_FORELDER',\n    UttakFedrekvoteAnnenForelder = 'UTTAK_FEDREKVOTE_ANNEN_FORELDER',\n    UttakMødrekvoteAnnenForelder = 'UTTAK_MØDREKVOTE_ANNEN_FORELDER',\n    UttakForeldrepengerAnnenForelder = 'UTTAK_FORELDREPENGER_ANNEN_FORELDER',\n    ForeldrepengerFørFødsel = 'UTTAK_FORELDREPENGER_FØR_FØDSEL_ANNEN_FORELDER',\n    Ingen = 'INGEN',\n}\n","export enum OverføringÅrsakType {\n    institusjonsoppholdAnnenForelder = 'INSTITUSJONSOPPHOLD_ANNEN_FORELDER',\n    sykdomAnnenForelder = 'SYKDOM_ANNEN_FORELDER',\n    aleneomsorg = 'ALENEOMSORG',\n    ikkeRettAnnenForelder = 'IKKE_RETT_ANNEN_FORELDER',\n}\n","export enum PeriodeInfoType {\n    avslåttPeriode = 'avslåttPeriode',\n    uttakAnnenPart = 'uttakAnnenPart',\n    utsettelseAnnenPart = 'utsettelseAnnenPart',\n}\n","export enum StønadskontoType {\n    Mødrekvote = 'MØDREKVOTE',\n    Fedrekvote = 'FEDREKVOTE',\n    Fellesperiode = 'FELLESPERIODE',\n    Foreldrepenger = 'FORELDREPENGER',\n    ForeldrepengerFørFødsel = 'FORELDREPENGER_FØR_FØDSEL',\n    Flerbarnsdager = 'FLERBARNSDAGER', // Ikke brukt som egen type i periodene\n    AktivitetsfriKvote = 'AKTIVITETSFRI_KVOTE', // Foreldrepenger\n}\n","export enum UtsettelseÅrsakType {\n    Ferie = 'LOVBESTEMT_FERIE',\n    Arbeid = 'ARBEID',\n    Sykdom = 'SYKDOM',\n    InstitusjonSøker = 'INSTITUSJONSOPPHOLD_SØKER',\n    InstitusjonBarnet = 'INSTITUSJONSOPPHOLD_BARNET',\n    HvØvelse = 'HV_OVELSE',\n    NavTiltak = 'NAV_TILTAK',\n    Fri = 'FRI',\n}\n","import { Arbeidsform } from './Arbeidsform';\nimport { Attachment } from './Attachment';\nimport { Forelder } from './Forelder';\nimport { MorsAktivitet } from './MorsAktivitet';\nimport { OppholdÅrsakType } from './OppholdÅrsakType';\nimport { OverføringÅrsakType } from './OverføringÅrsakType';\nimport { PeriodeHullÅrsak } from './PeriodeHullÅrsak';\nimport { PeriodeInfoType } from './PeriodeInfoType';\nimport { StønadskontoType } from './StønadskontoType';\nimport { TidsperiodeDate } from './TidsperiodeDate';\nimport { UtsettelseÅrsakType } from './UtsettelseÅrsakType';\n\nexport enum Periodetype {\n    Uttak = 'uttak',\n    Utsettelse = 'utsettelse',\n    Opphold = 'opphold',\n    Overføring = 'overføring',\n    Hull = 'ubegrunnetOpphold',\n    Info = 'info',\n    PeriodeUtenUttak = 'periodeUtenUttak',\n}\n\nexport interface PeriodeBase {\n    id: string;\n    type: Periodetype;\n    tidsperiode: TidsperiodeDate;\n    vedlegg?: Attachment[];\n}\n\nexport interface ForeldrepengerFørFødselUttaksperiode extends UttaksperiodeBase {\n    konto: StønadskontoType.ForeldrepengerFørFødsel;\n    skalIkkeHaUttakFørTermin: boolean;\n}\n\nexport interface UttaksperiodeBase extends PeriodeBase {\n    type: Periodetype.Uttak;\n    konto: StønadskontoType;\n    forelder: Forelder;\n    morsAktivitetIPerioden?: MorsAktivitet;\n    ønskerSamtidigUttak?: boolean;\n    samtidigUttakProsent?: string;\n    gradert?: boolean;\n    stillingsprosent?: string;\n    orgnumre?: string[];\n    arbeidsformer?: Arbeidsform[];\n    erArbeidstaker?: boolean;\n    harIkkeAktivitetskrav?: boolean;\n    vedlegg?: Attachment[];\n    ønskerFlerbarnsdager?: boolean;\n    erMorForSyk?: boolean;\n    angittAvAnnenPart?: boolean;\n}\n\nexport type Uttaksperiode = UttaksperiodeBase | ForeldrepengerFørFødselUttaksperiode;\n\nexport type UtsettelseFormPeriodeType = Utsettelsesperiode | Oppholdsperiode;\nexport interface Utsettelsesperiode extends PeriodeBase {\n    type: Periodetype.Utsettelse;\n    årsak: UtsettelseÅrsakType;\n    forelder: Forelder;\n    morsAktivitetIPerioden?: MorsAktivitet;\n    erArbeidstaker: boolean;\n    bekrefterArbeidIPerioden?: boolean;\n}\n\nexport interface Oppholdsperiode extends PeriodeBase {\n    type: Periodetype.Opphold;\n    årsak: OppholdÅrsakType;\n    forelder: Forelder;\n}\n\nexport interface Overføringsperiode extends PeriodeBase {\n    type: Periodetype.Overføring;\n    konto: StønadskontoType;\n    forelder: Forelder;\n    årsak: OverføringÅrsakType;\n}\n\nexport interface PeriodeHull extends PeriodeBase {\n    type: Periodetype.Hull;\n    tidsperiode: TidsperiodeDate;\n    årsak?: PeriodeHullÅrsak;\n}\n\ninterface InfoPeriodeBase extends PeriodeBase {\n    type: Periodetype.Info;\n    infotype: PeriodeInfoType;\n    overskrives: boolean;\n    visPeriodeIPlan: boolean;\n}\n\nexport interface AvslåttPeriode extends InfoPeriodeBase {\n    type: Periodetype.Info;\n    infotype: PeriodeInfoType.avslåttPeriode;\n    avslåttPeriodeType?: Periodetype;\n    kontoType: StønadskontoType | undefined;\n    forelder: Forelder;\n    overskrives: true;\n    visPeriodeIPlan: boolean;\n    kanSlettes: boolean;\n}\n\nexport interface UttakAnnenPartInfoPeriode extends InfoPeriodeBase {\n    type: Periodetype.Info;\n    infotype: PeriodeInfoType.uttakAnnenPart;\n    årsak: OppholdÅrsakType;\n    forelder: Forelder;\n    overskrives: true;\n    visPeriodeIPlan: boolean;\n    ønskerSamtidigUttak?: boolean;\n    samtidigUttakProsent?: string;\n    gradert?: boolean;\n    stillingsprosent?: string;\n}\n\nexport interface UtsettelseAnnenPartInfoPeriode extends InfoPeriodeBase {\n    type: Periodetype.Info;\n    infotype: PeriodeInfoType.utsettelseAnnenPart;\n    årsak: UtsettelseÅrsakType;\n    forelder: Forelder;\n    overskrives: true;\n    visPeriodeIPlan: boolean;\n}\n\nexport type InfoPeriode = AvslåttPeriode | UttakAnnenPartInfoPeriode | UtsettelseAnnenPartInfoPeriode;\n\nexport interface PeriodeUtenUttak extends PeriodeBase {\n    type: Periodetype.PeriodeUtenUttak;\n}\n\nexport interface PeriodeUtenUttakUtsettelse extends Omit<Utsettelsesperiode, 'forelder'> {\n    type: Periodetype.Utsettelse;\n    morsAktivitetIPerioden?: MorsAktivitet;\n    årsak: UtsettelseÅrsakType.Fri;\n    erArbeidstaker: boolean;\n    forelder: Forelder;\n}\n\nexport type Periode =\n    | Uttaksperiode\n    | Utsettelsesperiode\n    | Oppholdsperiode\n    | Overføringsperiode\n    | PeriodeHull\n    | PeriodeUtenUttakUtsettelse\n    | PeriodeUtenUttak\n    | InfoPeriode;\n\nexport function isUttaksperiode(periode: Periode): periode is Uttaksperiode {\n    return periode.type === Periodetype.Uttak;\n}\n\nexport const isForeldrepengerFørFødselUttaksperiode = (\n    periode: Periode,\n): periode is ForeldrepengerFørFødselUttaksperiode => {\n    return periode.type === Periodetype.Uttak && periode.konto === StønadskontoType.ForeldrepengerFørFødsel;\n};\n\nexport const isUttakAvFellesperiode = (periode: Periode): periode is Uttaksperiode => {\n    return periode.type === Periodetype.Uttak && periode.konto === StønadskontoType.Fellesperiode;\n};\n\nexport const isUttakAvForeldrepengerFørFødsel = (periode: Periode): periode is ForeldrepengerFørFødselUttaksperiode => {\n    return periode.type === Periodetype.Uttak && periode.konto === StønadskontoType.ForeldrepengerFørFødsel;\n};\n\nexport const isUtsettelsesperiode = (periode: Periode): periode is Utsettelsesperiode => {\n    return periode.type === Periodetype.Utsettelse;\n};\n\nexport const isUtsettelsePgaFerie = (periode: Periode): periode is Utsettelsesperiode => {\n    return isUtsettelsesperiode(periode) && periode.årsak === UtsettelseÅrsakType.Ferie;\n};\n\nexport const isUtsettelsePgaArbeid = (periode: Periode): periode is Utsettelsesperiode => {\n    return isUtsettelsesperiode(periode) && periode.årsak === UtsettelseÅrsakType.Arbeid;\n};\n\nexport const isOverføringsperiode = (periode: Periode): periode is Overføringsperiode => {\n    return periode.type === Periodetype.Overføring;\n};\n\nexport const isOppholdsperiode = (periode: Periode): periode is Oppholdsperiode => {\n    return periode.type === Periodetype.Opphold;\n};\n\nexport const isInfoPeriode = (periode: Periode): periode is InfoPeriode => {\n    return periode.type === Periodetype.Info && periode.overskrives === true;\n};\n\nexport const isInfoPeriodeAnnenPart = (periode: Periode): periode is InfoPeriode => {\n    return (\n        periode.type === Periodetype.Info &&\n        (periode.infotype === PeriodeInfoType.uttakAnnenPart ||\n            periode.infotype === PeriodeInfoType.utsettelseAnnenPart)\n    );\n};\n\nexport const isHull = (periode: Periode): periode is PeriodeHull => {\n    return periode.type === Periodetype.Hull;\n};\n\nexport const isUtsettelseAnnenPart = (periode: Periode): periode is UtsettelseAnnenPartInfoPeriode => {\n    return periode.type === Periodetype.Info && periode.infotype === PeriodeInfoType.utsettelseAnnenPart;\n};\n\nexport const isAvslåttPeriode = (periode: Periode): periode is AvslåttPeriode => {\n    return periode.type === Periodetype.Info && periode.infotype === PeriodeInfoType.avslåttPeriode;\n};\n\nexport const isSlettbarAvslåttPeriode = (periode: Periode): periode is AvslåttPeriode => {\n    return isAvslåttPeriode(periode) && periode.kanSlettes;\n};\n\nexport const isUttakAnnenPart = (periode: Periode): periode is UttakAnnenPartInfoPeriode => {\n    return periode.type === Periodetype.Info && periode.infotype === PeriodeInfoType.uttakAnnenPart;\n};\n\nexport const isPeriodeUtenUttakUtsettelse = (periode: Periode): periode is PeriodeUtenUttakUtsettelse => {\n    return periode.type === Periodetype.Utsettelse && periode.årsak === UtsettelseÅrsakType.Fri;\n};\n\nexport const isPeriodeUtenUttak = (periode: Periode): periode is PeriodeUtenUttak => {\n    return periode.type === Periodetype.PeriodeUtenUttak;\n};\n\nexport const isOverskrivbarPeriode = (periode: Periode): boolean => {\n    return (\n        (periode.type === Periodetype.Info && periode.overskrives === true) ||\n        periode.type === Periodetype.Hull ||\n        isPeriodeUtenUttak(periode) ||\n        isPeriodeUtenUttakUtsettelse(periode)\n    );\n};\n\nconst isAnnenPartInfoPeriodeOppholdUttak = (periode: InfoPeriode) => {\n    return periode.infotype === PeriodeInfoType.uttakAnnenPart;\n};\n\nconst isAnnenPartInfoPeriodeOppholdUtsettelse = (periode: InfoPeriode) => {\n    return periode.infotype === PeriodeInfoType.utsettelseAnnenPart;\n};\n\nexport const isAnnenPartInfoPeriode = (periode: Periode): periode is UttakAnnenPartInfoPeriode => {\n    return (\n        periode.type === Periodetype.Info &&\n        (isAnnenPartInfoPeriodeOppholdUttak(periode) || isAnnenPartInfoPeriodeOppholdUtsettelse(periode))\n    );\n};\n","export enum SenEndringÅrsak {\n    'Sykdom' = 'SYKDOM',\n    'Uttak' = 'UTTAK',\n    'SykdomOgUttak' = 'SYKDOM_OG_UTTAK',\n    'InstitusjonSøker' = 'INSTITUSJONSOPPHOLD_SØKER',\n    'InstitusjonBarnet' = 'INSTITUSJONSOPPHOLD_BARNET',\n    'Arbeid' = 'ARBEID',\n    'ArbeidOgUttak' = 'ARBEID_OG_UTTAK',\n    'Ingen' = 'INGEN',\n}\n","import dayjs from 'dayjs';\nimport { getTidsperiode, Tidsperioden } from './Tidsperioden';\nimport { Uttaksdagen } from './Uttaksdagen';\nimport { formaterDatoKompakt } from './dateUtils';\nimport { isForeldrepengerFørFødselUttaksperiode, Periode, Periodetype } from '../types';\n\nexport const Perioden = (periode: Periode) => ({\n    setStartdato: (fom: Date) => flyttPeriode(periode, fom),\n    setUttaksdager: (uttaksdager: number) =>\n        (periode.tidsperiode = getTidsperiode(periode.tidsperiode.fom, uttaksdager)),\n    getAntallUttaksdager: () => Tidsperioden(periode.tidsperiode).getAntallUttaksdager(),\n    getAntallFridager: () => Tidsperioden(periode.tidsperiode).getAntallFridager(),\n    erLik: (periode2: Periode, inkluderTidsperiode = false, inkluderUtsettelser = false) =>\n        erPerioderLike(periode, periode2, inkluderTidsperiode, inkluderUtsettelser),\n    erSammenhengende: (periode2: Periode) => erPerioderSammenhengende(periode, periode2),\n    inneholderFridager: () => Tidsperioden(periode.tidsperiode).getAntallFridager() > 0,\n    starterFør: (dato: Date) => dayjs(periode.tidsperiode.fom).isBefore(dato, 'day'),\n    slutterEtter: (dato: Date) => dayjs(periode.tidsperiode.tom).isAfter(dato, 'day'),\n    slutterSammeDagEllerEtter: (dato: Date) => dayjs(periode.tidsperiode.tom).isSameOrAfter(dato, 'day'),\n});\n\nfunction erPerioderSammenhengende(p1: Periode, p2: Periode) {\n    const p1NesteUttaksdato = Uttaksdagen(dayjs(p1.tidsperiode.tom).toDate()).neste();\n    const p2Startdato = p2.tidsperiode.fom;\n    return dayjs(p1NesteUttaksdato).isSame(p2Startdato, 'day');\n}\n\nfunction erPerioderLike(p1: Periode, p2: Periode, inkluderTidsperiode = false, inkluderUtsettelser = false) {\n    if (p1.type !== p2.type) {\n        return false;\n    }\n    if (inkluderUtsettelser === false && (p1.type === Periodetype.Utsettelse || p2.type === Periodetype.Utsettelse)) {\n        return false;\n    }\n    if (p1.type === Periodetype.Hull && p2.type === Periodetype.Hull) {\n        return true;\n    }\n    if (isForeldrepengerFørFødselUttaksperiode(p1) && isForeldrepengerFørFødselUttaksperiode(p2)) {\n        const fff1 = getPeriodeFootprint(\n            { ...p1, skalIkkeHaUttakFørTermin: p1.skalIkkeHaUttakFørTermin || false },\n            inkluderTidsperiode,\n        );\n        const fff2 = getPeriodeFootprint(\n            { ...p2, skalIkkeHaUttakFørTermin: p2.skalIkkeHaUttakFørTermin || false },\n            inkluderTidsperiode,\n        );\n        return fff1 === fff2;\n    }\n    const k1 = getPeriodeFootprint(p1, inkluderTidsperiode);\n    const k2 = getPeriodeFootprint(p2, inkluderTidsperiode);\n    return k1 === k2;\n}\n\nfunction getPeriodeFootprint(periode: Periode, inkluderTidsperiode = false) {\n    const { tidsperiode, id, ...rest } = periode;\n    const sortedPeriode: any = {};\n    Object.keys(rest)\n        .sort((a, b) => a.localeCompare(b))\n        .filter((key) => (rest as any)[key] !== undefined)\n        .forEach((key) => {\n            sortedPeriode[key] = (rest as any)[key];\n        });\n    if (inkluderTidsperiode && tidsperiode) {\n        sortedPeriode.tidsperiode = {\n            fom: tidsperiode.fom ? formaterDatoKompakt(tidsperiode.fom) : undefined,\n            tom: tidsperiode.tom ? formaterDatoKompakt(tidsperiode.tom) : undefined,\n        };\n    }\n    return JSON.stringify({ ...sortedPeriode });\n}\n\nfunction flyttPeriode(periode: Periode, fom: Date): Periode {\n    const { tidsperiode } = periode;\n\n    return {\n        ...periode,\n        tidsperiode: Tidsperioden({\n            fom: tidsperiode.fom,\n            tom: tidsperiode.tom,\n        }).setStartdato(fom),\n    };\n}\n","import { hasValue } from './validationUtils';\n\nconst onlyNumbersRegExp = /^[0-9]*$/;\n\nexport const getMod11 = (strValue: string): number => {\n    let checkNbr = 2;\n    let mod = 0;\n\n    for (let i = strValue.length - 2; i >= 0; --i) {\n        mod += parseInt(strValue.charAt(i), 10) * checkNbr;\n        if (++checkNbr > 7) {\n            checkNbr = 2;\n        }\n    }\n    const result = 11 - (mod % 11);\n    return result === 11 ? 0 : result;\n};\n\nconst er9Tall = (orgnr: string): boolean => {\n    return onlyNumbersRegExp.test(orgnr) && orgnr.length === 9;\n};\n\nconst starterPå8Eller9 = (orgnr: string): boolean => {\n    return orgnr.charAt(0) === '8' || orgnr.charAt(0) === '9';\n};\n\nexport const erGyldigNorskOrgnummer = (orgnr: string): boolean => {\n    if (!orgnr || er9Tall(orgnr) === false || starterPå8Eller9(orgnr) === false || orgnr === '999999999') {\n        return false;\n    }\n    return getMod11(orgnr) === parseInt(orgnr.charAt(8), 10);\n};\n\nexport const numberHasValue = (num: string): boolean => {\n    if (!hasValue(num) || num.trim().length === 0) {\n        return false;\n    }\n\n    return true;\n};\n\nconst numberRegExp = RegExp(/^[-]?[0-9,.\\s]*$/);\n\nexport const trimNumberValue = (value: string): string => {\n    return value.replace(/,/g, '.').replace(/\\s/g, '').replace(/%/g, '');\n};\n\nexport const getFloatFromString = (value: string | undefined): number | undefined => {\n    if (value !== undefined && value !== null && value.length > 0 && numberRegExp.test(value)) {\n        const trimmedValue = trimNumberValue(value);\n        const numberOfPoints = (trimmedValue.match(/\\./g) || []).length;\n        if (numberOfPoints > 1) {\n            return undefined;\n        }\n        return parseFloat(trimmedValue);\n    }\n    return undefined;\n};\n","import { usynligeCharsRegex } from './validationUtils';\n\nexport const replaceInvisibleCharsWithSpace = (inputString: string): string => {\n    return inputString.replace(usynligeCharsRegex, '\\u0020');\n};\n\nexport const capitalizeFirstLetter = (s: string): string => {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n};\n","import dayjs from 'dayjs';\nimport { IntlShape } from 'react-intl';\nimport { AnnenForelder, Kjønn, NavnPåForeldre, Søkerrolle, isAnnenForelderOppgitt } from '../types';\nimport Person from '../types/Person';\nimport intlUtils from './intlUtils';\n\nexport const formaterNavn = (fornavn: string, etternavn: string, visEtternavn: boolean, mellomnavn?: string) => {\n    if (visEtternavn) {\n        return mellomnavn ? `${fornavn} ${mellomnavn} ${etternavn}` : `${fornavn} ${etternavn}`;\n    }\n    return mellomnavn ? `${fornavn} ${mellomnavn}` : `${fornavn}`;\n};\n\nconst navnSlutterPåSLyd = (navn: string): boolean => {\n    const sisteBokstav = navn.charAt(navn.length - 1).toLowerCase();\n    return sisteBokstav === 's' || sisteBokstav === 'x' || sisteBokstav === 'z';\n};\n\nexport const getNavnGenitivEierform = (navn: string, locale: string): string => {\n    if (locale !== 'nb') {\n        return navn;\n    }\n    if (navnSlutterPåSLyd(navn)) {\n        return `${navn}'`;\n    }\n    return `${navn}s`;\n};\n\nexport const getKjønnFromFnr = (annenForelder: AnnenForelder): Kjønn | undefined => {\n    if (isAnnenForelderOppgitt(annenForelder)) {\n        const { fnr } = annenForelder;\n\n        if (fnr === undefined || fnr.length !== 11) {\n            return undefined;\n        }\n        return parseInt(fnr.charAt(8), 10) % 2 === 0 ? 'K' : 'M';\n    }\n\n    return undefined;\n};\n\nexport const getKjønnFromFnrString = (fnr: string): Kjønn | undefined => {\n    if (fnr.length !== 11) {\n        return undefined;\n    }\n    return parseInt(fnr.charAt(8), 10) % 2 === 0 ? 'K' : 'M';\n};\n\nexport const getMorErAleneOmOmsorg = (\n    søkerErMor: boolean,\n    søkerErAleneOmOmsorg: boolean,\n    annenForelder: AnnenForelder,\n) => {\n    return søkerErMor && (søkerErAleneOmOmsorg || annenForelder.kanIkkeOppgis === true);\n};\n\nexport const getMorHarRettPåForeldrepengerINorgeEllerEØS = (\n    rolle: Søkerrolle,\n    søkerErFarEllerMedmor: boolean,\n    annenForelder: AnnenForelder,\n) => {\n    if (søkerErFarEllerMedmor === true && isAnnenForelderOppgitt(annenForelder)) {\n        return (\n            annenForelder.harRettPåForeldrepengerINorge === true || annenForelder.harRettPåForeldrepengerIEØS === true\n        );\n    }\n    return rolle === 'mor';\n};\n\nexport const getMorHarRettPåForeldrepengerIEØS = (\n    rolle: Søkerrolle,\n    søkerErFarEllerMedmor: boolean,\n    annenForelder: AnnenForelder,\n) => {\n    if (søkerErFarEllerMedmor === true && isAnnenForelderOppgitt(annenForelder)) {\n        return annenForelder.harRettPåForeldrepengerINorge === true;\n    }\n    return rolle === 'mor';\n};\n\nexport const getFarMedmorErAleneOmOmsorg = (\n    søkerErFarMedmor: boolean,\n    søkerErAleneOmOmsorg: boolean,\n    annenForelder: AnnenForelder,\n) => {\n    return søkerErFarMedmor && (søkerErAleneOmOmsorg || annenForelder.kanIkkeOppgis === true);\n};\n\nexport const getNavnPåForeldre = (\n    person: Person,\n    annenForelder: AnnenForelder,\n    erFarEllerMedmor: boolean,\n    intl: IntlShape,\n): NavnPåForeldre => {\n    const navnSøker = person.fornavn;\n    const navnAnnenForelder =\n        isAnnenForelderOppgitt(annenForelder) && annenForelder.fornavn !== undefined && annenForelder.fornavn !== ''\n            ? annenForelder.fornavn\n            : intlUtils(intl, 'annen.forelder');\n    const navnMor = erFarEllerMedmor ? navnAnnenForelder : navnSøker;\n    const navnFarMedmor = erFarEllerMedmor ? navnSøker : navnAnnenForelder;\n\n    return {\n        mor: navnMor,\n        farMedmor: navnFarMedmor,\n    };\n};\n\nexport const getErSøkerFarEllerMedmor = (søkerRolle: Søkerrolle): boolean =>\n    søkerRolle === 'far' || søkerRolle === 'medmor';\n\nexport const erEldreEnn3ÅrOg3Måneder = (fødselsdato: Date) => {\n    return dayjs(fødselsdato).add(3, 'year').add(3, 'month').isBefore(dayjs(), 'day');\n};\n","import { IntlShape } from 'react-intl';\nimport { getForelderNavn } from './periodeUtils';\nimport { capitalizeFirstLetter } from './stringUtils';\nimport { Forelder, NavnPåForeldre, StønadskontoType, TilgjengeligStønadskonto } from '../types';\nimport { getNavnGenitivEierform } from './personUtils';\nimport intlUtils from './intlUtils';\n\nexport const getVelgbareStønadskontotyper = (stønadskontoTyper: TilgjengeligStønadskonto[]): StønadskontoType[] =>\n    stønadskontoTyper\n        .filter(\n            (kontoType) =>\n                kontoType.konto === StønadskontoType.Fellesperiode ||\n                kontoType.konto === StønadskontoType.Fedrekvote ||\n                kontoType.konto === StønadskontoType.Mødrekvote ||\n                kontoType.konto === StønadskontoType.Foreldrepenger ||\n                kontoType.konto === StønadskontoType.AktivitetsfriKvote,\n        )\n        .map((kontoType) => kontoType.konto);\n\nexport const getStønadskontoNavn = (\n    intl: IntlShape,\n    konto: StønadskontoType,\n    navnPåForeldre: NavnPåForeldre,\n    erFarEllerMedmor?: boolean,\n    erAleneOmOmsorg?: boolean,\n) => {\n    let navn;\n\n    switch (konto) {\n        case StønadskontoType.Mødrekvote:\n            navn = navnPåForeldre.mor;\n            break;\n        case StønadskontoType.Fedrekvote:\n            navn = navnPåForeldre.farMedmor;\n            break;\n        default:\n            navn = undefined;\n    }\n\n    if (navn) {\n        return intl.formatMessage(\n            { id: 'uttaksplan.stønadskontotype.foreldernavn.kvote' },\n            { navn: getNavnGenitivEierform(capitalizeFirstLetter(navn), intl.locale) },\n        );\n    }\n\n    if (erFarEllerMedmor === true && erAleneOmOmsorg === false) {\n        if (konto === StønadskontoType.AktivitetsfriKvote) {\n            return intl.formatMessage({ id: 'uttaksplan.stønadskontotype.AKTIVITETSFRI_KVOTE_BFHR' });\n        }\n        if (konto === StønadskontoType.Foreldrepenger) {\n            return intl.formatMessage({ id: 'uttaksplan.stønadskontotype.AKTIVITETSKRAV_KVOTE_BFHR' });\n        }\n    }\n    return intl.formatMessage({ id: `uttaksplan.stønadskontotype.${konto}` });\n};\n\nexport const getUttakAnnenPartStønadskontoNavn = (\n    intl: IntlShape,\n    konto: StønadskontoType,\n    periodeForelder: Forelder,\n    navnPåForeldre: NavnPåForeldre,\n    samtidigUttakProsent: string | undefined,\n    erFarEllerMedmor?: boolean,\n    erAleneOmOmsorg?: boolean,\n) => {\n    const forelderNavn = getForelderNavn(periodeForelder, navnPåForeldre);\n    if (samtidigUttakProsent !== undefined) {\n        const navn = getNavnGenitivEierform(forelderNavn, intl.locale);\n        const intlTekst =\n            konto === StønadskontoType.Fellesperiode\n                ? 'uttaksplan.periodeAnnenPart.tittel.gradertEllerSamtidigUttakFellesperiode'\n                : 'uttaksplan.periodeAnnenPart.tittel.gradertEllerSamtidigUttak';\n        return intlUtils(intl, intlTekst, {\n            navn: capitalizeFirstLetter(navn),\n            prosent: samtidigUttakProsent,\n        });\n    }\n    return getStønadskontoNavn(intl, konto, navnPåForeldre, erFarEllerMedmor, erAleneOmOmsorg);\n};\n","import dayjs from 'dayjs';\nimport { andreAugust2022ReglerGjelder, tidperiodeOverlapperDato } from './dateUtils';\nimport { IntlShape } from 'react-intl';\nimport {\n    Forelder,\n    Periode,\n    Periodetype,\n    Situasjon,\n    StønadskontoType,\n    TidsperiodeDate,\n    Uttaksperiode,\n    isOverføringsperiode,\n    isUttaksperiode,\n} from './../types';\nimport { Uttaksdagen } from './Uttaksdagen';\nimport { isValidTidsperiode } from './Tidsperioden';\nimport { finnAntallDagerÅTrekke } from './uttaksPlanStatus';\nimport intlUtils from './intlUtils';\n\nexport const ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL = 10;\nconst ANTALL_DAGER_TO_UKER = 2 * 7;\nconst ANTALL_DAGER_SEKS_UKER = 6 * 7;\n\nexport const gjelderWLBReglerFarMedmorRundtFødsel = (\n    familiehendelsesdato: Date,\n    søkerErFarEllerMedmor: boolean,\n    morHarRett: boolean,\n    situasjon: Situasjon,\n) => {\n    const gjelderWLB = andreAugust2022ReglerGjelder(familiehendelsesdato);\n    return gjelderWLB && søkerErFarEllerMedmor && morHarRett && situasjon === 'fødsel';\n};\n\nexport const isUttaksperiodeFarMedmorMedValgForUttakRundtFødsel = (periode: Periode): boolean => {\n    return (\n        isUttaksperiode(periode) &&\n        periode.forelder === Forelder.farMedmor &&\n        periode.konto === StønadskontoType.Fedrekvote &&\n        !!periode.erMorForSyk === false &&\n        periode.morsAktivitetIPerioden === undefined &&\n        !!periode.ønskerFlerbarnsdager === false &&\n        periode.ønskerSamtidigUttak === true\n    );\n};\n\nexport const isUttaksperiodeFarMedmorPgaFødsel = (\n    periode: Periode,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n): boolean => {\n    return (\n        isUttaksperiodeFarMedmorMedValgForUttakRundtFødsel(periode) &&\n        starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel(\n            periode.tidsperiode,\n            familiehendelsesdato,\n            termindato,\n        )\n    );\n};\n\nexport const isUttaksperiodeBareFarMedmorHarRett = (periode: Periode, morHarRett: boolean): boolean => {\n    return isUttaksperiode(periode) && periode.forelder === Forelder.farMedmor && !morHarRett;\n};\n\nexport const getFørsteUttaksdag2UkerFørFødsel = (familiehendelsesdato: Date, termindato: Date | undefined): Date => {\n    const terminEllerFamHendelsesdatoMinusToUker =\n        termindato !== undefined\n            ? dayjs(termindato).subtract(ANTALL_DAGER_TO_UKER, 'day')\n            : dayjs(familiehendelsesdato).subtract(ANTALL_DAGER_TO_UKER, 'day');\n    const datoÅRegneFra = dayjs.min(terminEllerFamHendelsesdatoMinusToUker, dayjs(familiehendelsesdato))!;\n    return Uttaksdagen(datoÅRegneFra.toDate()).denneEllerNeste();\n};\n\nexport const getSisteUttaksdag6UkerEtterFødsel = (familiehendelsesdato: Date): Date => {\n    const førsteUttaksdagForPeriodeEtterFødsel = Uttaksdagen(familiehendelsesdato).denneEllerNeste();\n    return Uttaksdagen(\n        dayjs(førsteUttaksdagForPeriodeEtterFødsel).add(ANTALL_DAGER_SEKS_UKER, 'day').toDate(),\n    ).forrige();\n};\n\nexport const starterTidsperiodeEtter2UkerFørFødsel = (\n    tidsperiode: any,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n): boolean => {\n    const førsteUttaksdagToUkerFørFødsel = getFørsteUttaksdag2UkerFørFødsel(familiehendelsesdato, termindato);\n    return dayjs(tidsperiode.fom).isSameOrAfter(førsteUttaksdagToUkerFørFødsel, 'day');\n};\n\nexport const starterUttaksperiodeFørFødsel = (periode: Periode, familiehendelsesdato: Date): boolean => {\n    return isUttaksperiode(periode) && dayjs(periode.tidsperiode.fom).isBefore(familiehendelsesdato, 'day');\n};\n\nexport const slutterTidsperiodeInnen6UkerEtterFødsel = (tidsperiode: any, familiehendelsesdato: Date): boolean => {\n    const sisteUttaksdag6UkerEtterFødsel = getSisteUttaksdag6UkerEtterFødsel(familiehendelsesdato);\n    return dayjs(tidsperiode.tom).isSameOrBefore(sisteUttaksdag6UkerEtterFødsel, 'day');\n};\n\nexport const starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel = (\n    tidsperiode: TidsperiodeDate,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n) => {\n    return (\n        starterTidsperiodeEtter2UkerFørFødsel(tidsperiode, familiehendelsesdato, termindato) &&\n        dayjs(tidsperiode.fom).isSameOrBefore(getSisteUttaksdag6UkerEtterFødsel(familiehendelsesdato), 'day')\n    );\n};\n\nexport const getFarMedmorUttakRundtFødsel = (\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n): Periode[] => {\n    return perioder.filter((p) => isUttaksperiodeFarMedmorPgaFødsel(p, familiehendelsesdato, termindato));\n};\n\nexport const erFarMedmorSinWLBTidsperiodeRundtFødsel = (\n    tidsperiode: TidsperiodeDate,\n    familiehendelsesdato: Date,\n    periodetype: Periodetype,\n    konto: StønadskontoType,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n    situasjon: Situasjon,\n): boolean => {\n    return (\n        tidsperiode !== undefined &&\n        isValidTidsperiode(tidsperiode) &&\n        erFarEllerMedmor &&\n        situasjon === 'fødsel' &&\n        andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n        periodetype === Periodetype.Uttak &&\n        (konto === StønadskontoType.Fedrekvote ||\n            konto === StønadskontoType.Foreldrepenger ||\n            konto === StønadskontoType.AktivitetsfriKvote) &&\n        starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel(tidsperiode, familiehendelsesdato, termindato)\n    );\n};\n\nexport const getLengdePåForeslåttWLBUttakFarMedmor = (familiehendelsesdato: Date, startDatoUttak: Date): number => {\n    const sisteUttaksDagFørFødsel = getSisteUttaksdag6UkerEtterFødsel(familiehendelsesdato);\n    const antallUttaksdagerFraStartDato = finnAntallDagerÅTrekke({\n        tidsperiode: { fom: startDatoUttak, tom: sisteUttaksDagFørFødsel },\n    } as Periode);\n    return Math.min(antallUttaksdagerFraStartDato, ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL);\n};\n\nexport const appendPeriodeNavnHvisUttakRundtFødselFarMedmor = (\n    intl: IntlShape,\n    periodeNavn: string,\n    periode: Periode,\n    situasjon: Situasjon,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n): string => {\n    return situasjon === 'fødsel' && isUttaksperiodeFarMedmorPgaFødsel(periode, familiehendelsesdato, termindato)\n        ? periodeNavn + intlUtils(intl, 'rundtFødsel')\n        : periodeNavn;\n};\n\nexport const farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato = (\n    periode: Periode,\n    familiehendelsesdato: Date,\n    morHarRett: boolean,\n    termindato: Date | undefined,\n) => {\n    return (\n        (isUttaksperiodeFarMedmorPgaFødsel(periode, familiehendelsesdato, termindato) ||\n            isUttaksperiodeBareFarMedmorHarRett(periode, morHarRett)) &&\n        tidperiodeOverlapperDato(periode.tidsperiode, familiehendelsesdato)\n    );\n};\n\nexport const getPerioderMedUttakRundtFødsel = (\n    uttaksplan: Periode[],\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n): Uttaksperiode[] => {\n    return uttaksplan.filter(\n        (p) =>\n            (isUttaksperiode(p) || isOverføringsperiode(p)) &&\n            starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel(\n                p.tidsperiode,\n                familiehendelsesdato,\n                termindato,\n            ),\n    ) as [];\n};\n\nexport const uttaksperiodeKanJusteresVedFødsel = (\n    ønskerJustertUttakVedFødsel: boolean | undefined,\n    termindato: Date | undefined,\n    uttaksperiodeFom: Date,\n) => {\n    return !!ønskerJustertUttakVedFødsel && termindato !== undefined && dayjs(uttaksperiodeFom).isSame(termindato, 'd');\n};\n","import { IntlShape } from 'react-intl';\nimport { PeriodeInfoType } from '../types/PeriodeInfoType';\nimport dayjs from 'dayjs';\nimport { dateToISOString } from '@navikt/sif-common-formik-ds/lib';\nimport { getFloatFromString } from './numberUtils';\nimport { capitalizeFirstLetter } from './stringUtils';\nimport { getStønadskontoNavn, getUttakAnnenPartStønadskontoNavn } from './stønadskontoerUtils';\nimport {\n    EksisterendeSak,\n    Forelder,\n    InfoPeriode,\n    MorsAktivitet,\n    NavnPåForeldre,\n    OppholdÅrsakType,\n    OverføringÅrsakType,\n    Periode,\n    PeriodeValidState,\n    Periodetype,\n    Situasjon,\n    StønadskontoType,\n    StønadskontoUttak,\n    Tidsperiode,\n    TidsperiodeDate,\n    Utsettelsesperiode,\n    UtsettelseÅrsakType,\n    UttakAnnenPartInfoPeriode,\n    Uttaksperiode,\n    isAnnenPartInfoPeriode,\n    isHull,\n    isOverføringsperiode,\n    isPeriodeUtenUttak,\n    isUttakAnnenPart,\n    isUttakAvFellesperiode,\n    isUttaksperiode,\n} from '../types';\nimport {\n    ISOStringToDate,\n    convertTidsperiodeToTidsperiodeDate,\n    isDateInTheFuture,\n    isDateTodayOrInTheFuture,\n} from './dateUtils';\nimport intlUtils from './intlUtils';\nimport { appendPeriodeNavnHvisUttakRundtFødselFarMedmor } from './wlbUtils';\nimport { Tidsperioden, erTidsperioderLike } from './Tidsperioden';\nimport { Perioden } from './Perioden';\n\nexport const mapTidsperiodeStringToTidsperiode = (t: Partial<Tidsperiode>): Partial<TidsperiodeDate> => {\n    return {\n        fom: ISOStringToDate(t.fom),\n        tom: ISOStringToDate(t.tom),\n    };\n};\n\nexport const mapTidsperiodeToTidsperiodeString = (t: Partial<TidsperiodeDate>): Partial<Tidsperiode> => {\n    return {\n        fom: dateToISOString(t.fom),\n        tom: dateToISOString(t.tom),\n    };\n};\n\nexport const stillingsprosentIsMoreThan0 = (stillingsprosent: string): boolean => {\n    const pst = getFloatFromString(stillingsprosent);\n    if (pst) {\n        return pst > 0;\n    }\n    return false;\n};\n\nexport const samtidigUttakProsentIsMax100 = (samtidigUttakProsent: string): boolean => {\n    const pst = getFloatFromString(samtidigUttakProsent);\n\n    if (pst) {\n        return pst <= 100;\n    }\n\n    return false;\n};\n\nexport const stillingsprosentIsLessThan100 = (stillingsprosent: string): boolean => {\n    const pst = getFloatFromString(stillingsprosent);\n    if (pst) {\n        return pst < 100;\n    }\n    return false;\n};\n\nconst isValidStillingsprosent = (pst: string | undefined): boolean =>\n    pst !== undefined && isNaN(parseFloat(pst)) === false;\n\nconst prettifyProsent = (pst: string | undefined): number | undefined => {\n    if (pst === undefined) {\n        return undefined;\n    }\n\n    const nbr = parseFloat(pst);\n    if (isNaN(nbr)) {\n        return undefined;\n    }\n    if (Math.round(nbr) === nbr) {\n        return Math.round(nbr);\n    }\n    return nbr;\n};\n\nexport const getUttaksprosentFromStillingsprosent = (\n    stillingsPst: number | undefined,\n    samtidigUttakPst: number | undefined,\n): number | undefined => {\n    if (samtidigUttakPst) {\n        return samtidigUttakPst;\n    }\n    if (stillingsPst) {\n        let prosent = (100 - stillingsPst) * 100;\n        prosent = Math.round(prosent) / 100;\n\n        return prosent;\n    }\n    return undefined;\n};\n\nexport const getOppholdskontoNavn = (\n    intl: IntlShape,\n    årsak: OppholdÅrsakType,\n    foreldernavn: string,\n    erMor: boolean,\n) => {\n    const navn = capitalizeFirstLetter(foreldernavn);\n    return erMor\n        ? intlUtils(intl, `uttaksplan.oppholdsårsaktype.foreldernavn.far.${årsak}`, { foreldernavn: navn })\n        : intlUtils(intl, `uttaksplan.oppholdsårsaktype.foreldernavn.mor.${årsak}`, { foreldernavn: navn });\n};\n\nexport const getStønadskontoFromOppholdsårsak = (årsak: OppholdÅrsakType): StønadskontoType => {\n    if (årsak === OppholdÅrsakType.UttakFedrekvoteAnnenForelder) {\n        return StønadskontoType.Fedrekvote;\n    }\n\n    if (årsak === OppholdÅrsakType.UttakMødrekvoteAnnenForelder) {\n        return StønadskontoType.Mødrekvote;\n    }\n\n    if (årsak === OppholdÅrsakType.UttakFellesperiodeAnnenForelder) {\n        return StønadskontoType.Fellesperiode;\n    }\n\n    if (årsak === OppholdÅrsakType.UttakForeldrepengerAnnenForelder) {\n        return StønadskontoType.Foreldrepenger;\n    }\n\n    return StønadskontoType.ForeldrepengerFørFødsel;\n};\n\nexport const getOppholdsÅrsakFromStønadskonto = (konto: StønadskontoType): OppholdÅrsakType | undefined => {\n    switch (konto) {\n        case StønadskontoType.Fedrekvote:\n            return OppholdÅrsakType.UttakFedrekvoteAnnenForelder;\n        case StønadskontoType.Mødrekvote:\n            return OppholdÅrsakType.UttakMødrekvoteAnnenForelder;\n        case StønadskontoType.Fellesperiode:\n            return OppholdÅrsakType.UttakFellesperiodeAnnenForelder;\n        default:\n            return undefined;\n    }\n};\n\nexport const getForelderFromPeriode = (periode: Periode): Forelder | undefined => {\n    if (!isHull(periode) && !isPeriodeUtenUttak(periode)) {\n        return periode.forelder;\n    }\n\n    return undefined;\n};\n\nexport const getForelderNavn = (forelder: Forelder, navnPåForeldre: NavnPåForeldre): string => {\n    let forelderNavn = '';\n    if (navnPåForeldre.farMedmor) {\n        forelderNavn = forelder === Forelder.mor ? navnPåForeldre.mor : navnPåForeldre.farMedmor;\n    } else {\n        forelderNavn = forelder === Forelder.mor ? navnPåForeldre.mor : forelder;\n    }\n    return capitalizeFirstLetter(forelderNavn);\n};\n\nconst getPeriodeTittelUttaksPeriode = (\n    intl: IntlShape,\n    periode: Uttaksperiode,\n    navnPåForeldre: NavnPåForeldre,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    situasjon: Situasjon,\n    erFarEllerMedmor?: boolean,\n    erAleneOmOmsorg?: boolean,\n) => {\n    const tittelMedNavn = getStønadskontoNavn(intl, periode.konto, navnPåForeldre, erFarEllerMedmor, erAleneOmOmsorg);\n    const tittel = appendPeriodeNavnHvisUttakRundtFødselFarMedmor(\n        intl,\n        tittelMedNavn,\n        periode,\n        situasjon,\n        familiehendelsesdato,\n        termindato,\n    );\n    if (\n        (periode.gradert && isValidStillingsprosent(periode.stillingsprosent)) ||\n        (periode.ønskerSamtidigUttak && isValidStillingsprosent(periode.samtidigUttakProsent))\n    ) {\n        return `${tittel} ${intlUtils(intl, 'gradering.prosent', {\n            stillingsprosent: getUttaksprosentFromStillingsprosent(\n                prettifyProsent(periode.stillingsprosent),\n                periode.samtidigUttakProsent ? prettifyProsent(periode.samtidigUttakProsent) : undefined,\n            ),\n        })}`;\n    }\n    return tittel;\n};\n\nconst getPeriodeTittelInfoPeriode = (\n    intl: IntlShape,\n    periode: InfoPeriode,\n    navnPåForeldre: NavnPåForeldre,\n    erFarEllerMedmor?: boolean,\n) => {\n    switch (periode.infotype) {\n        case PeriodeInfoType.uttakAnnenPart:\n            return getUttakAnnenPartStønadskontoNavn(\n                intl,\n                getStønadskontoFromOppholdsårsak(periode.årsak),\n                periode.forelder,\n                navnPåForeldre,\n                periode.samtidigUttakProsent,\n            );\n        case PeriodeInfoType.utsettelseAnnenPart:\n            return intlUtils(intl, `uttaksplan.periodetype.info.utsettelse.${periode.årsak}`, {\n                navn: getForelderNavn(periode.forelder, navnPåForeldre),\n            });\n        case PeriodeInfoType.avslåttPeriode:\n            if (\n                (periode.forelder === Forelder.mor && erFarEllerMedmor) ||\n                (periode.forelder === Forelder.farMedmor && !erFarEllerMedmor)\n            ) {\n                return intlUtils(intl, 'uttaksplan.periodetype.info.avslåttPeriode.annenPart', {\n                    navn: getForelderNavn(periode.forelder, navnPåForeldre),\n                });\n            }\n            return intlUtils(intl, `uttaksplan.periodetype.info.${periode.infotype}`);\n    }\n};\n\nexport const getPeriodeTittel = (\n    intl: IntlShape,\n    periode: Periode,\n    navnPåForeldre: NavnPåForeldre,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    situasjon: Situasjon,\n    erFarEllerMedmor?: boolean,\n    erAleneOmOmsorg?: boolean,\n): string => {\n    switch (periode.type) {\n        case Periodetype.Uttak: {\n            return getPeriodeTittelUttaksPeriode(\n                intl,\n                periode,\n                navnPåForeldre,\n                familiehendelsesdato,\n                termindato,\n                situasjon,\n                erFarEllerMedmor,\n                erAleneOmOmsorg,\n            );\n        }\n        case Periodetype.PeriodeUtenUttak:\n            return intlUtils(intl, 'uttaksplan.periodetype.periodeUtenUttak.tittel');\n        case Periodetype.Overføring:\n            return getStønadskontoNavn(intl, periode.konto, navnPåForeldre);\n        case Periodetype.Utsettelse:\n            if (periode.årsak) {\n                return intlUtils(intl, 'uttaksplan.periodeliste.utsettelsesårsak', {\n                    årsak: intlUtils(intl, `uttaksplan.utsettelsesårsak.${periode.årsak}`),\n                });\n            }\n            return intlUtils(intl, 'uttaksplan.periodeliste.utsettelsesårsak.ukjent');\n        case Periodetype.Opphold:\n            return getOppholdskontoNavn(\n                intl,\n                periode.årsak,\n                getForelderNavn(periode.forelder, navnPåForeldre),\n                periode.forelder === 'mor',\n            );\n        case Periodetype.Hull:\n            return intlUtils(intl, 'uttaksplan.periodetype.hull.tittel');\n        case Periodetype.Info:\n            return getPeriodeTittelInfoPeriode(intl, periode, navnPåForeldre, erFarEllerMedmor);\n    }\n};\n\nexport const erSentGradertUttak = (periode: Periode) =>\n    periode.type === Periodetype.Uttak &&\n    !isDateTodayOrInTheFuture(dateToISOString(periode.tidsperiode.fom)) &&\n    periode.gradert;\n\nexport const erPeriodeInnvilget = (periode: Periode, eksisterendeSak?: EksisterendeSak): boolean => {\n    if (eksisterendeSak === undefined) {\n        return false;\n    }\n    const saksperiode = getSaksperiode(periode, eksisterendeSak);\n    return saksperiode ? saksperiode.resultat.innvilget : false;\n};\n\nconst getSaksperiode = (periode: Periode, ekisterendeSak: EksisterendeSak) => {\n    return ekisterendeSak.saksperioder.find((saksperiode) =>\n        erTidsperioderLike(convertTidsperiodeToTidsperiodeDate(saksperiode.periode), periode.tidsperiode),\n    );\n};\n\nexport const getPeriodeForelderNavn = (periode: Periode, navnPåForeldre: NavnPåForeldre): string => {\n    if (\n        periode.type === Periodetype.Utsettelse ||\n        periode.type === Periodetype.Uttak ||\n        periode.type === Periodetype.Overføring ||\n        periode.type === Periodetype.Opphold ||\n        periode.type === Periodetype.Info\n    ) {\n        return getForelderNavn(periode.forelder, navnPåForeldre);\n    }\n    return 'Ingen forelder registrert';\n};\n\nexport const getSamtidigUttakEllerGraderingsProsent = (periode: UttakAnnenPartInfoPeriode): number | undefined => {\n    const periodeErGradert = periode.stillingsprosent !== undefined;\n    const periodeErSamtidigUttak = periode.samtidigUttakProsent !== undefined;\n\n    if (periodeErSamtidigUttak) {\n        return (100 - getFloatFromString(periode.samtidigUttakProsent)!) / 100;\n    }\n\n    if (periodeErGradert) {\n        return getFloatFromString(periode.stillingsprosent)! / 100;\n    }\n\n    return undefined;\n};\n\nexport const justerAndrePartsUttakAvFellesperiodeOmMulig = (\n    perioder: Periode[],\n    uttakFellesperiode: StønadskontoUttak | undefined,\n): Periode[] => {\n    if (uttakFellesperiode === undefined || uttakFellesperiode.dager >= 0 || perioder.length === 0) {\n        return perioder;\n    }\n\n    const dagerGjenståendeFellesperiode = uttakFellesperiode.dager;\n\n    const sisteFellesperiodeAnnenPart = [...perioder]\n        .reverse()\n        .find((p) => isAnnenPartInfoPeriode(p) && p.årsak === OppholdÅrsakType.UttakFellesperiodeAnnenForelder);\n\n    if (sisteFellesperiodeAnnenPart !== undefined && isAnnenPartInfoPeriode(sisteFellesperiodeAnnenPart)) {\n        const dagerMedFellesperiodeISistePeriode = Perioden(sisteFellesperiodeAnnenPart).getAntallUttaksdager();\n        const justeringsProsent = getSamtidigUttakEllerGraderingsProsent(sisteFellesperiodeAnnenPart) || 1;\n        const diff = dagerGjenståendeFellesperiode / justeringsProsent + dagerMedFellesperiodeISistePeriode;\n        const indexSistePeriode = perioder.findIndex((p) => p.id === sisteFellesperiodeAnnenPart.id);\n\n        if (dagerGjenståendeFellesperiode < 0 && diff > 0) {\n            perioder[indexSistePeriode] = {\n                ...sisteFellesperiodeAnnenPart,\n                tidsperiode: Tidsperioden(sisteFellesperiodeAnnenPart.tidsperiode).setUttaksdager(diff),\n            };\n            return perioder;\n        }\n\n        if (dagerGjenståendeFellesperiode < 0 && diff === 0) {\n            return perioder.splice(indexSistePeriode, 1);\n        }\n    }\n\n    return perioder;\n};\n\nexport const getSlettPeriodeTekst = (periodetype: Periodetype): string => {\n    switch (periodetype) {\n        case Periodetype.Uttak:\n            return 'uttaksplan.slettPeriode.uttak';\n        case Periodetype.Overføring:\n            return 'uttaksplan.slettPeriode.overføring';\n        case Periodetype.Opphold:\n            return 'uttaksplan.slettPeriode.opphold';\n        case Periodetype.Utsettelse:\n            return 'uttaksplan.slettPeriode.utsettelse';\n        case Periodetype.Info:\n            return 'uttaksplan.slettPeriode.info';\n        default:\n            return '';\n    }\n};\n\nconst erPeriodeFomEllerEtterDato = (periode: Periode, dato: Date): boolean => {\n    return (\n        periode.tidsperiode.fom !== undefined &&\n        periode.tidsperiode.tom !== undefined &&\n        dayjs(periode.tidsperiode.fom).isSameOrAfter(dato, 'day') &&\n        dayjs(periode.tidsperiode.tom).isSameOrAfter(dato, 'day')\n    );\n};\n\nexport const erPeriodeFørDato = (periode: Periode, dato: Date) => {\n    return erPeriodeFomEllerEtterDato(periode, dato) === false;\n};\n\nexport const erGradering = (periode: Periode) => periode.type === Periodetype.Uttak && periode.gradert === true;\n\nexport const erUttakEllerOppholdMerEnnTreMånederSiden = (periode: Periode) =>\n    (periode.type === Periodetype.Uttak || periode.type === Periodetype.Opphold) &&\n    dayjs(periode.tidsperiode.fom).isBefore(dayjs().startOf('day').subtract(3, 'months'), 'day');\n\nexport const erUtsettelsePgaSykdom = (periode: Utsettelsesperiode) =>\n    periode.årsak === UtsettelseÅrsakType.Sykdom ||\n    periode.årsak === UtsettelseÅrsakType.InstitusjonSøker ||\n    periode.årsak === UtsettelseÅrsakType.InstitusjonBarnet;\n\nexport const erUttakGrunnetSykdom = (periode: Periode) => {\n    if (\n        isOverføringsperiode(periode) &&\n        (periode.årsak === OverføringÅrsakType.institusjonsoppholdAnnenForelder ||\n            periode.årsak === OverføringÅrsakType.sykdomAnnenForelder)\n    ) {\n        return true;\n    }\n\n    if (isUttaksperiode(periode)) {\n        if (\n            periode.erMorForSyk === true ||\n            periode.morsAktivitetIPerioden === MorsAktivitet.TrengerHjelp ||\n            periode.morsAktivitetIPerioden === MorsAktivitet.Innlagt\n        ) {\n            return true;\n        }\n    }\n\n    if (\n        isUttakAvFellesperiode(periode) &&\n        (periode.morsAktivitetIPerioden === MorsAktivitet.Innlagt ||\n            periode.morsAktivitetIPerioden === MorsAktivitet.TrengerHjelp)\n    ) {\n        return true;\n    }\n\n    return false;\n};\n\nexport const erUttakTilbakeITid = (periode: Periode) =>\n    isUttaksperiode(periode) && !isDateInTheFuture(dateToISOString(periode.tidsperiode.fom));\n\nexport const erUtsettelseTilbakeITid = (periode: Periode) =>\n    periode.type === Periodetype.Utsettelse && !isDateInTheFuture(dateToISOString(periode.tidsperiode.fom));\n\nexport const erUtsettelseGrunnetPgaArbeid = (periode: Utsettelsesperiode) =>\n    periode.årsak === UtsettelseÅrsakType.Arbeid;\n\nexport const erUtsettelse = (periode: Periode) => periode.type === Periodetype.Utsettelse;\n\nconst erUtsettelsePgaFerieEllerArbeid = (periode: Periode) =>\n    periode.type === Periodetype.Utsettelse &&\n    (periode.årsak === UtsettelseÅrsakType.Ferie || periode.årsak === UtsettelseÅrsakType.Arbeid);\n\nexport const erSenUtsettelsePgaFerieEllerArbeid = (periode: Periode) =>\n    erUtsettelseTilbakeITid(periode) && erUtsettelsePgaFerieEllerArbeid(periode);\n\nexport const erÅrsakSykdomEllerInstitusjonsopphold = (årsak: UtsettelseÅrsakType | OverføringÅrsakType) =>\n    årsak === UtsettelseÅrsakType.Sykdom ||\n    årsak === UtsettelseÅrsakType.InstitusjonBarnet ||\n    årsak === UtsettelseÅrsakType.InstitusjonSøker ||\n    årsak === OverføringÅrsakType.institusjonsoppholdAnnenForelder ||\n    årsak === OverføringÅrsakType.sykdomAnnenForelder;\n\nexport const finnesPeriodeIOpprinneligPlan = (periode: Periode, opprinneligPlan: Periode[]): boolean => {\n    return opprinneligPlan.some((op) => Perioden(periode).erLik(op, true, true));\n};\n\nexport const getAnnenForelderSamtidigUttakPeriode = (periode: Periode, perioder: Periode[]): Periode | undefined => {\n    if (isUttaksperiode(periode)) {\n        const samtidigUttak = perioder\n            .filter((p) => isUttakAnnenPart(p))\n            .find(\n                (p) =>\n                    isUttakAnnenPart(p) &&\n                    dayjs(periode.tidsperiode.fom).isSame(p.tidsperiode.fom) &&\n                    p.ønskerSamtidigUttak === true &&\n                    p.id !== periode.id,\n            );\n\n        return samtidigUttak !== undefined ? samtidigUttak : undefined;\n    }\n\n    return undefined;\n};\n\nexport const getIsValidStateForPerioder = (previousState: PeriodeValidState[], periode: Periode, isValid: boolean) => {\n    const periodeIState = previousState.find((p) => p.id === periode.id);\n    if (periodeIState && periodeIState.isValid !== isValid) {\n        return previousState.map((p) => {\n            if (p.id === periodeIState.id) {\n                return { ...p, isValid };\n            }\n            return p;\n        });\n    }\n    if (!periodeIState) {\n        return [...previousState, { id: periode.id, isValid }];\n    }\n    return previousState;\n};\n","import { Perioden } from './Perioden';\nimport { getStønadskontoFromOppholdsårsak } from './periodeUtils';\nimport { getFloatFromString } from './numberUtils';\nimport {\n    AvslåttPeriode,\n    InfoPeriode,\n    Oppholdsperiode,\n    Overføringsperiode,\n    Periode,\n    PeriodeInfoType,\n    Periodetype,\n    StønadskontoUttak,\n    TilgjengeligStønadskonto,\n    UttakAnnenPartInfoPeriode,\n    Uttaksperiode,\n    isAvslåttPeriode,\n    isInfoPeriode,\n    isOppholdsperiode,\n    isOverføringsperiode,\n    isUttaksperiode,\n} from '../types';\n\nexport const finnAntallDagerÅTrekke = (periode: Periode): number => {\n    const dager = Perioden(periode).getAntallUttaksdager();\n    if (isUttaksperiode(periode)) {\n        const periodeErGradert = periode.stillingsprosent !== undefined;\n        const periodeErSamtidigUttak = periode.samtidigUttakProsent !== undefined;\n\n        if ((periodeErGradert && periodeErSamtidigUttak) || periodeErGradert) {\n            const graderingsProsent = (100 - getFloatFromString(periode.stillingsprosent)!) / 100;\n\n            return dager * graderingsProsent;\n        } else if (periodeErSamtidigUttak) {\n            return dager * (getFloatFromString(periode.samtidigUttakProsent)! / 100);\n        } else {\n            return dager;\n        }\n    }\n    return dager;\n};\n\nexport const getAllePerioderMedUttaksinfoFraUttaksplan = (perioder: Periode[]): Uttaksperiode[] => {\n    return [\n        ...perioder.filter(isUttaksperiode),\n        ...getUttakFraOppholdsperioder(perioder.filter(isOppholdsperiode)),\n        ...getUttakFraOverføringsperioder(perioder.filter(isOverføringsperiode)),\n        ...getUttakFraInfoperioder(perioder.filter(isInfoPeriode)),\n        ...getUttakFraAvslåttePerioder(perioder.filter(isAvslåttPeriode)),\n    ];\n};\n\nexport const beregnGjenståendeUttaksdager = (\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    uttaksplan: Periode[],\n    beregnDagerBrukt: boolean,\n): StønadskontoUttak[] => {\n    const alleUttakIUttaksplan = getAllePerioderMedUttaksinfoFraUttaksplan(uttaksplan);\n    return tilgjengeligeStønadskontoer.map((konto): StønadskontoUttak => {\n        let antallDager = beregnDagerBrukt ? 0 : konto.dager;\n        const uttaksplanPerioder = alleUttakIUttaksplan.filter((p) => p.konto === konto.konto);\n        if (uttaksplanPerioder) {\n            uttaksplanPerioder.forEach((p: Periode) => {\n                if (p.type === Periodetype.Uttak || p.type === Periodetype.Overføring || isAvslåttPeriode(p)) {\n                    antallDager = beregnDagerBrukt\n                        ? antallDager + finnAntallDagerÅTrekke(p)\n                        : antallDager - finnAntallDagerÅTrekke(p);\n                }\n            });\n\n            antallDager = beregnDagerBrukt ? Math.floor(antallDager) : Math.ceil(antallDager);\n        }\n\n        return {\n            konto: konto.konto,\n            dager: antallDager,\n        };\n    });\n};\n\nexport const beregnBrukteUttaksdager = (\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    uttaksplan: Periode[],\n): StønadskontoUttak[] => {\n    return beregnGjenståendeUttaksdager(tilgjengeligeStønadskontoer, uttaksplan, true);\n};\n\nconst getUttakFraOppholdsperioder = (oppholdsperioder: Oppholdsperiode[]): Uttaksperiode[] => {\n    if (oppholdsperioder.length === 0) {\n        return [];\n    }\n    return oppholdsperioder.map(\n        (opphold: Oppholdsperiode): Uttaksperiode => ({\n            id: opphold.id,\n            tidsperiode: opphold.tidsperiode,\n            type: Periodetype.Uttak,\n            konto: getStønadskontoFromOppholdsårsak(opphold.årsak)!,\n            forelder: opphold.forelder,\n        }),\n    );\n};\nconst getUttakFraOverføringsperioder = (overføringer: Overføringsperiode[]): Uttaksperiode[] => {\n    if (overføringer.length === 0) {\n        return [];\n    }\n    return overføringer.map(\n        (overføring): Uttaksperiode => ({\n            id: overføring.id,\n            tidsperiode: overføring.tidsperiode,\n            type: Periodetype.Uttak,\n            konto: overføring.konto,\n            forelder: overføring.forelder,\n        }),\n    );\n};\n\nconst getUttakFraInfoperioder = (perioder: InfoPeriode[]): Uttaksperiode[] => {\n    if (perioder.length === 0) {\n        return [];\n    }\n    const oppholdAnnenPart: UttakAnnenPartInfoPeriode[] = [];\n    perioder\n        .filter((periode) => isAvslåttPeriode(periode) === false)\n        .forEach((periode) => {\n            if (periode.infotype === PeriodeInfoType.uttakAnnenPart) {\n                oppholdAnnenPart.push(periode);\n            }\n        });\n    return oppholdAnnenPart.map((periode): Uttaksperiode => {\n        const { type, årsak, ...rest } = periode;\n        return {\n            type: Periodetype.Uttak,\n            konto: getStønadskontoFromOppholdsårsak(periode.årsak),\n            ...rest,\n        };\n    });\n};\n\nconst getUttakFraAvslåttePerioder = (perioder: AvslåttPeriode[]): Uttaksperiode[] => {\n    if (perioder.length === 0) {\n        return [];\n    }\n\n    return perioder\n        .filter((p) => p.avslåttPeriodeType === Periodetype.Uttak || p.avslåttPeriodeType === Periodetype.Utsettelse)\n        .map(\n            (periode): Uttaksperiode => ({\n                type: Periodetype.Uttak,\n                konto: periode.kontoType!,\n                tidsperiode: periode.tidsperiode,\n                id: periode.id,\n                forelder: periode.forelder,\n            }),\n        );\n};\n","import dayjs from 'dayjs';\nimport { Perioden } from './Perioden';\nimport { datoErInnenforTidsperiode, isValidTidsperiode, Tidsperioden } from './Tidsperioden';\nimport { Uttaksdagen } from './Uttaksdagen';\nimport { finnAntallDagerÅTrekke } from './uttaksPlanStatus';\nimport {\n    Forelder,\n    ForeldrepengerFørFødselUttaksperiode,\n    InfoPeriode,\n    isForeldrepengerFørFødselUttaksperiode,\n    isHull,\n    isInfoPeriode,\n    isOppholdsperiode,\n    isOverføringsperiode,\n    isPeriodeUtenUttak,\n    isPeriodeUtenUttakUtsettelse,\n    isUtsettelsePgaFerie,\n    isUtsettelsesperiode,\n    isUttaksperiode,\n    Oppholdsperiode,\n    Overføringsperiode,\n    Periode,\n    PeriodeHull,\n    Periodetype,\n    PeriodeUtenUttak,\n    SenEndringÅrsak,\n    StønadskontoType,\n    Utsettelsesperiode,\n    Uttaksperiode,\n} from '../types';\nimport {\n    erUtsettelse,\n    erUtsettelseGrunnetPgaArbeid,\n    erUtsettelsePgaSykdom,\n    erUtsettelseTilbakeITid,\n    erUttakEllerOppholdMerEnnTreMånederSiden,\n    erUttakGrunnetSykdom,\n    erUttakTilbakeITid,\n} from './periodeUtils';\n\nexport const Periodene = (perioder: Periode[]) => ({\n    getPeriode: (id: string) => getPeriode(perioder, id),\n    getOpphold: () => getOpphold(perioder),\n    getUttak: () => getUttaksperioder(perioder),\n    getOverføringer: () => getOverføringer(perioder),\n    getHull: () => getHull(perioder),\n    getHullOgInfoOgPerioderUtenUttak: () => getHullOgInfoOgPerioderUtenUttak(perioder),\n    getInfoperioder: () => getInfoperioder(perioder),\n    getUtsettelser: () => getUtsettelser(perioder),\n    getPerioderEtterFamiliehendelsesdato: (dato: Date) => getPerioderEtterFamiliehendelsesdato(perioder, dato),\n    getPerioderFørFamiliehendelsesdato: (dato: Date) => getPerioderFørFamiliehendelsesdato(perioder, dato),\n    getPerioderMedUgyldigTidsperiode: () => getPeriodeMedUgyldigTidsperiode(perioder),\n    getPerioderMedFerieForForelder: (forelder: Forelder) => getPerioderMedFerieForForelder(perioder, forelder),\n    getFørstePerioderEtterFamiliehendelsesdato: (dato: Date) =>\n        getFørstePeriodeEtterFamiliehendelsesdato(perioder, dato),\n    getForeldrepengerFørTermin: () => getForeldrepengerFørTermin(perioder),\n    getFørsteUttaksdag: () => getFørsteUttaksdag(perioder),\n    getFørsteUttaksdagEtterSistePeriode: () => getFørsteUttaksdagEtterSistePeriode(perioder),\n    getFørsteUttaksdagEksluderInfoperioderOgFrittUttak: () =>\n        getFørsteUttaksdagEksluderInfoperioderOgFrittUttak(perioder),\n    getAntallUttaksdager: () => getAntallUttaksdager(perioder),\n    getAntallFeriedager: (forelder?: Forelder) => getAntallFeriedager(perioder, forelder),\n    finnOverlappendePerioder: (periode: Periode) => finnOverlappendePerioder(perioder, periode),\n    finnPeriodeMedDato: (dato: Date) => finnPeriodeMedDato(perioder, dato),\n    finnFørstePeriodeEtterDato: (dato: Date) => finnFørstePeriodeEtterDato(perioder, dato),\n    finnAlleForegåendePerioder: (periode: Periode) => finnPerioderFørPeriode(perioder, periode),\n    finnAllePåfølgendePerioder: (periode: Periode) => finnPerioderEtterPeriode(perioder, periode),\n    finnDenForegåendePerioden: (periode: Periode) => finnForrigePeriode(perioder, periode),\n    finnPåfølgendePeriode: (periode: Periode) => finnPåfølgendePeriode(perioder, periode),\n    forskyvPerioder: (uttaksdager: number) => forskyvPerioder(perioder, uttaksdager),\n    sort: () => [...perioder].sort(sorterPerioder),\n    finnSisteInfoperiode: () => finnSisteInfoperiode(perioder),\n});\n\nexport function sorterPerioder(p1: Periode, p2: Periode) {\n    if (isValidTidsperiode(p1.tidsperiode) === false || isValidTidsperiode(p2.tidsperiode) === false) {\n        if (isForeldrepengerFørFødselUttaksperiode(p1) && p1.skalIkkeHaUttakFørTermin) {\n            return -1;\n        }\n        return isValidTidsperiode(p1.tidsperiode) ? 1 : -1;\n    }\n    if (dayjs(p1.tidsperiode.fom).isSame(p2.tidsperiode.fom, 'day')) {\n        return isInfoPeriode(p1) ? -1 : 1;\n    }\n\n    if (Tidsperioden(p2.tidsperiode).erOmsluttetAv(p1.tidsperiode)) {\n        return 1;\n    }\n\n    return dayjs(p1.tidsperiode.fom).isBefore(p2.tidsperiode.fom, 'day') ? -1 : 1;\n}\n\nfunction getPeriode(perioder: Periode[], id: string): Periode | undefined {\n    return perioder.find((p) => p.id === id);\n}\n\nfunction getUttaksperioder(perioder: Periode[]): Uttaksperiode[] {\n    return perioder.filter((periode) => isUttaksperiode(periode)) as Uttaksperiode[];\n}\n\nfunction getUtsettelser(perioder: Periode[]): Utsettelsesperiode[] {\n    return perioder.filter((periode) => isUtsettelsesperiode(periode)) as Utsettelsesperiode[];\n}\n\nfunction getFerieUtsettelser(perioder: Periode[]): Utsettelsesperiode[] {\n    return perioder.filter((periode) => isUtsettelsePgaFerie(periode)) as Utsettelsesperiode[];\n}\n\nfunction getOverføringer(perioder: Periode[]): Overføringsperiode[] {\n    return perioder.filter((periode) => isOverføringsperiode(periode)) as Overføringsperiode[];\n}\n\nfunction getHull(perioder: Periode[]): PeriodeHull[] {\n    return perioder.filter((periode) => isHull(periode)) as PeriodeHull[];\n}\n\nfunction getHullOgInfoOgPerioderUtenUttak(perioder: Periode[]): Array<PeriodeHull | InfoPeriode | PeriodeUtenUttak> {\n    return perioder.filter(\n        (periode) => isHull(periode) || isInfoPeriode(periode) || isPeriodeUtenUttak(periode),\n    ) as Array<PeriodeHull | InfoPeriode | PeriodeUtenUttak>;\n}\n\nfunction getInfoperioder(perioder: Periode[]): InfoPeriode[] {\n    return perioder.filter((periode) => isInfoPeriode(periode)) as InfoPeriode[];\n}\n\nfunction getOpphold(perioder: Periode[]): Oppholdsperiode[] {\n    return perioder.filter((periode) => isOppholdsperiode(periode)) as Oppholdsperiode[];\n}\n\nfunction finnOverlappendePerioder(perioder: Periode[], periode: Periode): Periode[] {\n    return perioder.filter((p) => {\n        if (p.id === periode.id || !isValidTidsperiode(periode.tidsperiode)) {\n            return false;\n        }\n        const { fom, tom } = p.tidsperiode;\n        if (!fom || !tom) {\n            return false;\n        }\n        const fomEllerTomErInnenforTidsperiode =\n            datoErInnenforTidsperiode(fom, periode.tidsperiode) || datoErInnenforTidsperiode(tom, periode.tidsperiode);\n\n        const fomTomOmkranserTidsperiode =\n            dayjs(periode.tidsperiode.fom).isSameOrAfter(fom, 'day') &&\n            dayjs(periode.tidsperiode.tom).isSameOrBefore(tom, 'day');\n\n        return fomEllerTomErInnenforTidsperiode || fomTomOmkranserTidsperiode;\n    });\n}\n\nfunction finnPeriodeMedDato(perioder: Periode[], dato: Date): Periode | undefined {\n    return perioder.find((periode) => {\n        return dayjs(dato).isBetween(periode.tidsperiode.fom, periode.tidsperiode.tom, 'day', '[]');\n    });\n}\n\nfunction finnFørstePeriodeEtterDato(perioder: Periode[], dato: Date): Periode | undefined {\n    return perioder.find((periode) => {\n        return dayjs(periode.tidsperiode.fom).isAfter(dato, 'day');\n    });\n}\n\nfunction finnPerioderFørPeriode(perioder: Periode[], periode: Periode): Periode[] {\n    return perioder.filter((p) => dayjs(p.tidsperiode.tom).isBefore(periode.tidsperiode.fom, 'day'));\n}\n\nfunction finnPerioderEtterPeriode(perioder: Periode[], periode: Periode): Periode[] {\n    return perioder.filter((p) => dayjs(p.tidsperiode.fom).isAfter(periode.tidsperiode.tom, 'day'));\n}\n\nfunction finnForrigePeriode(perioder: Periode[], periode: Periode): Periode | undefined {\n    const foregåendePerioder = finnPerioderFørPeriode(perioder, periode);\n    if (foregåendePerioder.length > 0) {\n        return foregåendePerioder.pop();\n    }\n    return undefined;\n}\nfunction finnPåfølgendePeriode(perioder: Periode[], periode: Periode): Periode | undefined {\n    const påfølgendePerioder = finnPerioderEtterPeriode(perioder, periode);\n    if (påfølgendePerioder.length > 0) {\n        return påfølgendePerioder[0];\n    }\n    return undefined;\n}\nfunction forskyvPerioder(perioder: Periode[], uttaksdager: number): Periode[] {\n    let uttaksdagerCurrent = uttaksdager;\n\n    return perioder.reduce((result: Periode[], periode: Periode) => {\n        if (isUtsettelsesperiode(periode)) {\n            result.push(periode);\n\n            const dagerIPerioden = Perioden(periode).getAntallUttaksdager();\n\n            if (dagerIPerioden >= uttaksdagerCurrent) {\n                uttaksdagerCurrent = 0;\n            } else {\n                uttaksdagerCurrent -= dagerIPerioden;\n            }\n\n            return result;\n        }\n\n        if (\n            isInfoPeriode(periode) ||\n            isHull(periode) ||\n            isPeriodeUtenUttak(periode) ||\n            isPeriodeUtenUttakUtsettelse(periode)\n        ) {\n            const dagerIPerioden = Perioden(periode).getAntallUttaksdager();\n\n            if (dagerIPerioden > uttaksdagerCurrent) {\n                const forskyvetStartdato = Uttaksdagen(Uttaksdagen(periode.tidsperiode.fom).denneEllerNeste()).leggTil(\n                    uttaksdagerCurrent,\n                );\n                const justertPeriode: Periode = {\n                    ...periode,\n                    tidsperiode: {\n                        fom: forskyvetStartdato,\n                        tom: periode.tidsperiode.tom,\n                    },\n                };\n\n                uttaksdagerCurrent = 0;\n\n                result.push(justertPeriode);\n                return result;\n            } else if (dagerIPerioden === uttaksdagerCurrent) {\n                uttaksdagerCurrent = 0;\n                return result;\n            } else {\n                uttaksdagerCurrent -= dagerIPerioden;\n                return result;\n            }\n        }\n\n        result.push(forskyvPeriode(periode, uttaksdagerCurrent));\n        return result;\n    }, []);\n}\n\nfunction forskyvPeriode(periode: Periode, uttaksdager: number): Periode {\n    if (uttaksdager === 0) {\n        return periode;\n    }\n\n    const forskyvetStartdato = Uttaksdagen(Uttaksdagen(periode.tidsperiode.fom).denneEllerNeste()).leggTil(uttaksdager);\n    return Perioden(periode).setStartdato(forskyvetStartdato);\n}\n\nfunction getPerioderFørFamiliehendelsesdato(perioder: Periode[], familiehendelsesdato: Date) {\n    return perioder.filter(\n        (periode) =>\n            isForeldrepengerFørFødselUttaksperiode(periode) ||\n            (isValidTidsperiode(periode.tidsperiode) &&\n                dayjs(periode.tidsperiode.fom).isBefore(familiehendelsesdato, 'day')),\n    );\n}\n\nfunction getPerioderEtterFamiliehendelsesdato(perioder: Periode[], familiehendelsesdato: Date) {\n    return perioder.filter(\n        (periode) =>\n            isValidTidsperiode(periode.tidsperiode) &&\n            dayjs(periode.tidsperiode.fom).isSameOrAfter(familiehendelsesdato, 'day') &&\n            isForeldrepengerFørFødselUttaksperiode(periode) === false,\n    );\n}\n\nfunction getFørstePeriodeEtterFamiliehendelsesdato(\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n): Periode | undefined {\n    const aktuellePerioder = getPerioderEtterFamiliehendelsesdato(perioder, familiehendelsesdato).sort(sorterPerioder);\n    return aktuellePerioder.length > 0 ? aktuellePerioder[0] : undefined;\n}\n\nfunction getPeriodeMedUgyldigTidsperiode(perioder: Periode[]) {\n    return perioder.filter(\n        (periode) =>\n            isValidTidsperiode(periode.tidsperiode) === false &&\n            isForeldrepengerFørFødselUttaksperiode(periode) === false,\n    );\n}\n\nfunction getFørsteUttaksdag(perioder: Periode[]): Date | undefined {\n    const førstePeriode = perioder\n        .filter((p) => p.tidsperiode.fom !== undefined)\n        .sort(sorterPerioder)\n        .shift();\n    if (førstePeriode) {\n        return førstePeriode.tidsperiode.fom;\n    }\n    return undefined;\n}\n\nfunction getFørsteUttaksdagEksluderInfoperioderOgFrittUttak(perioder: Periode[]): Date | undefined {\n    const førstePeriode = perioder\n        .filter(\n            (p) =>\n                p.tidsperiode.fom !== undefined &&\n                !isInfoPeriode(p) &&\n                !isPeriodeUtenUttak(p) &&\n                !isPeriodeUtenUttakUtsettelse(p),\n        )\n        .sort(sorterPerioder)\n        .shift();\n    if (førstePeriode) {\n        return førstePeriode.tidsperiode.fom;\n    }\n    return undefined;\n}\n\nfunction getAntallUttaksdager(perioder: Periode[]): number {\n    return perioder.reduce((dager, periode) => {\n        return dager + Perioden(periode).getAntallUttaksdager();\n    }, 0);\n}\n\nfunction getAntallFeriedager(perioder: Periode[], forelder?: Forelder): number {\n    return getFerieUtsettelser(perioder)\n        .filter((p) => (isValidTidsperiode(p.tidsperiode) && forelder ? p.forelder === forelder : true))\n        .map((p) => Tidsperioden(p.tidsperiode).getAntallUttaksdager())\n        .reduce((tot, curr) => tot + curr, 0);\n}\n\nfunction getPerioderMedFerieForForelder(perioder: Periode[], forelder: Forelder): Periode[] {\n    return perioder.filter((periode) => erPeriodeMedFerieForForelder(periode, forelder));\n}\n\nfunction getForeldrepengerFørTermin(perioder: Periode[]): ForeldrepengerFørFødselUttaksperiode | undefined {\n    const periode: Periode | undefined = perioder.find(\n        (p) => isUttaksperiode(p) && p.konto === StønadskontoType.ForeldrepengerFørFødsel,\n    );\n    return periode ? (periode as ForeldrepengerFørFødselUttaksperiode) : undefined;\n}\n\nfunction getFørsteUttaksdagEtterSistePeriode(perioder: Periode[]): Date | undefined {\n    if (perioder.length === 0) {\n        return undefined;\n    }\n    return Uttaksdagen(perioder[perioder.length - 1].tidsperiode.tom).neste();\n}\n\nexport const erPeriodeMedFerieForForelder = (periode: Periode, forelder: Forelder): boolean => {\n    return isUtsettelsePgaFerie(periode) && periode.forelder === forelder;\n};\n\nfunction finnSisteInfoperiode(perioder: Periode[]) {\n    return perioder\n        .filter((p) => isInfoPeriode(p))\n        .sort(sorterPerioder)\n        .reverse()[0];\n}\n\nexport const getSeneEndringerSomKreverBegrunnelse = (uttaksplan: Periode[]): SenEndringÅrsak => {\n    const utsettelsesPerioder = uttaksplan.filter(erUtsettelse) as Utsettelsesperiode[];\n    const utsettelseSykdomKreverBegrunnelse = utsettelsesPerioder.some(erUtsettelsePgaSykdom);\n    const uttakSykdomKreverBegrunnelse = uttaksplan.some(erUttakGrunnetSykdom);\n    const utsettelseSykdomKreverBegrunnelsePgaSøktSent = utsettelsesPerioder\n        .filter(erUtsettelseTilbakeITid)\n        .some(erUtsettelsePgaSykdom);\n    const uttakSykdomKreverBegrunnelsePgaSøktSent = uttaksplan.filter(erUttakTilbakeITid).some(erUttakGrunnetSykdom);\n    const utsettelseArbeidKreverBegrunnelsePgaSøktSent = utsettelsesPerioder\n        .filter(erUtsettelseTilbakeITid)\n        .some(erUtsettelseGrunnetPgaArbeid);\n    const uttakKreverBegrunnelsePgaSøktSent = uttaksplan.some(erUttakEllerOppholdMerEnnTreMånederSiden);\n\n    if (utsettelseArbeidKreverBegrunnelsePgaSøktSent) {\n        return uttakKreverBegrunnelsePgaSøktSent ? SenEndringÅrsak.ArbeidOgUttak : SenEndringÅrsak.Arbeid;\n    }\n\n    if (\n        utsettelseSykdomKreverBegrunnelse ||\n        utsettelseSykdomKreverBegrunnelsePgaSøktSent ||\n        uttakSykdomKreverBegrunnelsePgaSøktSent ||\n        uttakSykdomKreverBegrunnelse\n    ) {\n        return uttakKreverBegrunnelsePgaSøktSent ? SenEndringÅrsak.SykdomOgUttak : SenEndringÅrsak.Sykdom;\n    }\n\n    return uttakKreverBegrunnelsePgaSøktSent ? SenEndringÅrsak.Uttak : SenEndringÅrsak.Ingen;\n};\n\nexport const uttaksplanErBareOpphold = (perioder: Periode[]): boolean => {\n    const perioderUtenInfoPerioder = perioder.filter((p) => !isInfoPeriode(p));\n\n    if (perioderUtenInfoPerioder.length === 0) {\n        return false;\n    }\n\n    return perioderUtenInfoPerioder.every((periode) => periode.type === Periodetype.Opphold);\n};\n\nexport const uttaksplanSlutterMedOpphold = (perioder: Periode[]): boolean => {\n    return (\n        perioder\n            .filter((p) => !isInfoPeriode(p))\n            .slice()\n            .reverse()\n            .findIndex((periode) => periode.type === Periodetype.Opphold) === 0\n    );\n};\n\nexport const uttaksplanStarterMedOpphold = (perioder: Periode[]): boolean => {\n    return perioder.filter((p) => !isInfoPeriode(p)).findIndex((periode) => periode.type === Periodetype.Opphold) === 0;\n};\n\nexport const getSumUttaksdagerÅTrekkeIPeriodene = (perioder: Periode[]) => {\n    return Math.floor(perioder.map((p) => finnAntallDagerÅTrekke(p)).reduce((prev, curr) => prev + curr, 0));\n};\n"],"names":["isAnnenForelderOppgitt","annenForelder","isAnnenForelderIkkeOppgitt","MorsAktivitet","OppholdÅrsakType","OverføringÅrsakType","PeriodeInfoType","StønadskontoType","UtsettelseÅrsakType","Periodetype","isUttaksperiode","periode","isForeldrepengerFørFødselUttaksperiode","isUttakAvFellesperiode","isUttakAvForeldrepengerFørFødsel","isUtsettelsesperiode","isUtsettelsePgaFerie","isUtsettelsePgaArbeid","isOverføringsperiode","isOppholdsperiode","isInfoPeriode","isInfoPeriodeAnnenPart","isHull","isUtsettelseAnnenPart","isAvslåttPeriode","isSlettbarAvslåttPeriode","isUttakAnnenPart","isPeriodeUtenUttakUtsettelse","isPeriodeUtenUttak","isOverskrivbarPeriode","isAnnenPartInfoPeriodeOppholdUttak","isAnnenPartInfoPeriodeOppholdUtsettelse","isAnnenPartInfoPeriode","SenEndringÅrsak","Perioden","fom","flyttPeriode","uttaksdager","getTidsperiode","Tidsperioden","periode2","inkluderTidsperiode","inkluderUtsettelser","erPerioderLike","erPerioderSammenhengende","dato","dayjs","p1","p2","p1NesteUttaksdato","Uttaksdagen","p2Startdato","fff1","getPeriodeFootprint","fff2","k1","k2","tidsperiode","id","rest","sortedPeriode","a","b","key","formaterDatoKompakt","onlyNumbersRegExp","getMod11","strValue","checkNbr","mod","i","result","er9Tall","orgnr","starterPå8Eller9","erGyldigNorskOrgnummer","numberRegExp","trimNumberValue","value","getFloatFromString","trimmedValue","replaceInvisibleCharsWithSpace","inputString","usynligeCharsRegex","capitalizeFirstLetter","s","formaterNavn","fornavn","etternavn","visEtternavn","mellomnavn","navnSlutterPåSLyd","navn","sisteBokstav","getNavnGenitivEierform","locale","getKjønnFromFnr","fnr","getKjønnFromFnrString","getMorErAleneOmOmsorg","søkerErMor","søkerErAleneOmOmsorg","getMorHarRettPåForeldrepengerINorgeEllerEØS","rolle","søkerErFarEllerMedmor","getFarMedmorErAleneOmOmsorg","søkerErFarMedmor","getNavnPåForeldre","person","erFarEllerMedmor","intl","navnSøker","navnAnnenForelder","intlUtils","getErSøkerFarEllerMedmor","søkerRolle","erEldreEnn3ÅrOg3Måneder","fødselsdato","getVelgbareStønadskontotyper","stønadskontoTyper","kontoType","getStønadskontoNavn","konto","navnPåForeldre","erAleneOmOmsorg","getUttakAnnenPartStønadskontoNavn","periodeForelder","samtidigUttakProsent","forelderNavn","getForelderNavn","intlTekst","ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL","ANTALL_DAGER_TO_UKER","ANTALL_DAGER_SEKS_UKER","gjelderWLBReglerFarMedmorRundtFødsel","familiehendelsesdato","morHarRett","situasjon","andreAugust2022ReglerGjelder","isUttaksperiodeFarMedmorMedValgForUttakRundtFødsel","Forelder","isUttaksperiodeFarMedmorPgaFødsel","termindato","starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel","isUttaksperiodeBareFarMedmorHarRett","getFørsteUttaksdag2UkerFørFødsel","terminEllerFamHendelsesdatoMinusToUker","datoÅRegneFra","getSisteUttaksdag6UkerEtterFødsel","førsteUttaksdagForPeriodeEtterFødsel","starterTidsperiodeEtter2UkerFørFødsel","førsteUttaksdagToUkerFørFødsel","starterUttaksperiodeFørFødsel","slutterTidsperiodeInnen6UkerEtterFødsel","sisteUttaksdag6UkerEtterFødsel","getFarMedmorUttakRundtFødsel","perioder","p","erFarMedmorSinWLBTidsperiodeRundtFødsel","periodetype","isValidTidsperiode","getLengdePåForeslåttWLBUttakFarMedmor","startDatoUttak","sisteUttaksDagFørFødsel","antallUttaksdagerFraStartDato","finnAntallDagerÅTrekke","appendPeriodeNavnHvisUttakRundtFødselFarMedmor","periodeNavn","farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato","tidperiodeOverlapperDato","getPerioderMedUttakRundtFødsel","uttaksplan","uttaksperiodeKanJusteresVedFødsel","ønskerJustertUttakVedFødsel","uttaksperiodeFom","mapTidsperiodeStringToTidsperiode","ISOStringToDate","stillingsprosentIsMoreThan0","stillingsprosent","pst","samtidigUttakProsentIsMax100","stillingsprosentIsLessThan100","isValidStillingsprosent","prettifyProsent","nbr","getUttaksprosentFromStillingsprosent","stillingsPst","samtidigUttakPst","prosent","getOppholdskontoNavn","årsak","foreldernavn","erMor","getStønadskontoFromOppholdsårsak","getOppholdsÅrsakFromStønadskonto","forelder","getPeriodeTittelUttaksPeriode","tittelMedNavn","tittel","getPeriodeTittelInfoPeriode","getPeriodeTittel","erPeriodeInnvilget","eksisterendeSak","saksperiode","getSaksperiode","ekisterendeSak","erTidsperioderLike","convertTidsperiodeToTidsperiodeDate","getPeriodeForelderNavn","getSlettPeriodeTekst","erPeriodeFomEllerEtterDato","erPeriodeFørDato","erUttakEllerOppholdMerEnnTreMånederSiden","erUtsettelsePgaSykdom","erUttakGrunnetSykdom","erUttakTilbakeITid","isDateInTheFuture","dateToISOString","erUtsettelseTilbakeITid","erUtsettelseGrunnetPgaArbeid","erUtsettelse","erUtsettelsePgaFerieEllerArbeid","erSenUtsettelsePgaFerieEllerArbeid","erÅrsakSykdomEllerInstitusjonsopphold","finnesPeriodeIOpprinneligPlan","opprinneligPlan","op","getAnnenForelderSamtidigUttakPeriode","samtidigUttak","getIsValidStateForPerioder","previousState","isValid","periodeIState","dager","periodeErGradert","periodeErSamtidigUttak","graderingsProsent","getAllePerioderMedUttaksinfoFraUttaksplan","getUttakFraOppholdsperioder","getUttakFraOverføringsperioder","getUttakFraInfoperioder","getUttakFraAvslåttePerioder","beregnGjenståendeUttaksdager","tilgjengeligeStønadskontoer","beregnDagerBrukt","alleUttakIUttaksplan","antallDager","uttaksplanPerioder","beregnBrukteUttaksdager","oppholdsperioder","opphold","overføringer","overføring","oppholdAnnenPart","type","Periodene","getPeriode","getOpphold","getUttaksperioder","getOverføringer","getHull","getHullOgInfoOgPerioderUtenUttak","getInfoperioder","getUtsettelser","getPerioderEtterFamiliehendelsesdato","getPerioderFørFamiliehendelsesdato","getPeriodeMedUgyldigTidsperiode","getPerioderMedFerieForForelder","getFørstePeriodeEtterFamiliehendelsesdato","getForeldrepengerFørTermin","getFørsteUttaksdag","getFørsteUttaksdagEtterSistePeriode","getFørsteUttaksdagEksluderInfoperioderOgFrittUttak","getAntallUttaksdager","getAntallFeriedager","finnOverlappendePerioder","finnPeriodeMedDato","finnFørstePeriodeEtterDato","finnPerioderFørPeriode","finnPerioderEtterPeriode","finnForrigePeriode","finnPåfølgendePeriode","forskyvPerioder","sorterPerioder","finnSisteInfoperiode","getFerieUtsettelser","tom","fomEllerTomErInnenforTidsperiode","datoErInnenforTidsperiode","fomTomOmkranserTidsperiode","foregåendePerioder","påfølgendePerioder","uttaksdagerCurrent","dagerIPerioden","forskyvetStartdato","justertPeriode","forskyvPeriode","aktuellePerioder","førstePeriode","tot","curr","erPeriodeMedFerieForForelder","getSeneEndringerSomKreverBegrunnelse","utsettelsesPerioder","utsettelseSykdomKreverBegrunnelse","uttakSykdomKreverBegrunnelse","utsettelseSykdomKreverBegrunnelsePgaSøktSent","uttakSykdomKreverBegrunnelsePgaSøktSent","utsettelseArbeidKreverBegrunnelsePgaSøktSent","uttakKreverBegrunnelsePgaSøktSent","uttaksplanErBareOpphold","perioderUtenInfoPerioder","uttaksplanSlutterMedOpphold","uttaksplanStarterMedOpphold","getSumUttaksdagerÅTrekkeIPeriodene","prev"],"mappings":"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"}