{"version":3,"file":"UttaksplanInfo-748e399a.js","sources":["../../../../packages/fp-common/src/common/types/UttaksplanHexColor.ts","../../src/app/api/apiUtils.ts","../../src/app/steps/uttaksplan-info/components/scenarios/far-medmor-fødsel-begge-har-rett/farMedmorFødselBeggeHarRettFormConfig.ts","../../src/app/steps/uttaksplan-info/components/scenarios/far-medmor-fødsel-begge-har-rett/farMedmorFødselBeggeHarRettUtils.ts","../../src/app/steps/uttaksplan-info/components/tilgjengeligeDagerGraf/multibar/Multibar.tsx","../../src/app/steps/uttaksplan-info/components/tilgjengeligeDagerGraf/TilgjengeligeDagerGraf.tsx","../../src/app/steps/uttaksplan-info/components/tilgjengeligeDagerGraf/tilgjengeligeDagerUtils.ts","../../src/app/utils/stønadskontoUtils.ts","../../src/app/steps/uttaksplan-info/components/scenarios/far-medmor-fødsel-begge-har-rett/farMedmorFødselBeggeHarRettQuestionsConfig.ts","../../src/app/steps/uttaksplan-info/components/scenarios/spørsmål/MorsSisteDagSpørsmål.tsx","../../src/app/steps/uttaksplan-info/components/scenarios/far-medmor-fødsel-og-mor-har-ikke-rett/validation/farMedmorFødselOgMorHarIkkeRettValidering.ts","../../src/app/steps/uttaksplan-info/components/scenarios/spørsmål/FarMedmorsFørsteDag.tsx","../../src/app/steps/uttaksplan-info/components/fordelingFellesperiode/range-input/RangeIcon.tsx","../../src/app/steps/uttaksplan-info/components/fordelingFellesperiode/range-input/preventDoubleTapZoom.ts","../../src/app/steps/uttaksplan-info/components/fordelingFellesperiode/range-input/AriaText.tsx","../../src/app/steps/uttaksplan-info/components/fordelingFellesperiode/range-input/sirkelknapp/Sirkelknapp.tsx","../../src/app/steps/uttaksplan-info/components/scenarios/spørsmål/AntallUkerOgDagerFellesperiodeFarMedmorSpørsmål.tsx","../../src/app/steps/uttaksplan-info/components/scenarios/spørsmål/DekningsgradSpørsmål.tsx","../../src/app/utils/getDekningsgradFromString.ts","../../src/app/utils/uttaksplan/deltUttak.ts","../../src/app/utils/uttaksplan/ikkeDeltUttak.ts","../../src/app/utils/uttaksplan/lagUttaksplan.ts","../../src/app/steps/uttaksplan-info/components/scenarios/far-medmor-fødsel-begge-har-rett/FarMedmorFødselBeggeHarRett.tsx","../../src/app/steps/uttaksplan-info/components/scenarios/mor-fodsel/morFødselFormConfig.ts","../../src/app/steps/uttaksplan-info/components/scenarios/mor-fodsel/morFødselUtils.ts","../../src/app/steps/uttaksplan-info/components/scenarios/mor-fodsel/validation/morFodselValidering.ts","../../src/app/steps/uttaksplan-info/components/scenarios/mor-fodsel/VeilederStartdatoPermisjon.tsx","../../src/app/steps/uttaksplan-info/components/scenarios/mor-fodsel/StartdatoPermisjonMor.tsx","../../src/app/steps/uttaksplan-info/components/fordelingFellesperiode/range-input/RangeStepper.tsx","../../src/app/steps/uttaksplan-info/components/fordelingFellesperiode/range-input/RangeInput.tsx","../../src/app/steps/uttaksplan-info/components/fordelingFellesperiode/FordelingFellesperiodeSpørsmål.tsx","../../src/app/steps/uttaksplan-info/components/scenarios/mor-fodsel/morFødselQuestionsConfig.ts","../../src/app/utils/uttaksplanInfoUtils.ts","../../src/app/steps/uttaksplan-info/utils/leggTilAnnenPartsPerioderISøkerensUttaksplan.ts","../../src/app/steps/uttaksplan-info/components/scenarios/mor-fodsel/MorFødsel.tsx","../../src/app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon/adopsjonStartdatoValg.ts","../../src/app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon/morFarAdopsjonFormConfig.ts","../../src/app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon/morFarAdopsjonUtils.ts","../../src/app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon/morFarAdopsjonQuestionsConfig.ts","../../src/app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon/validation/morFarAdopsjonValidering.ts","../../src/app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon/StartdatoAdopsjon.tsx","../../src/app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon/MorFarAdopsjon.tsx","../../src/app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon-annen-part-har-rett-i-eøs/morFarAdopsjonAnnenForelderHarRettIEØSFormConfig.ts","../../src/app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon-annen-part-har-rett-i-eøs/morFarAdopsjonAnnenForelderHarRettIEØSQuestionsConfig.ts","../../src/app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon-annen-part-har-rett-i-eøs/morFarAdopsjonAnnenForelderHarRettIEØSUtils.ts","../../src/app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon-annen-part-har-rett-i-eøs/MorFarAdopsjonAnnenForelderHarRettIEØS.tsx","../../src/app/steps/uttaksplan-info/components/scenarios/mor-far-fødsel-annen-part-har-rett-i-eøs/morFarFødselAnnenForelderHarRettIEØSFormConfig.ts","../../src/app/steps/uttaksplan-info/components/scenarios/mor-far-fødsel-annen-part-har-rett-i-eøs/morFarFødselAnnenForelderHarRettIEØSQuestionsConfig.ts","../../src/app/steps/uttaksplan-info/components/scenarios/mor-far-fødsel-annen-part-har-rett-i-eøs/morFarFødselAnnenForelderHarRettIEØSUtils.ts","../../src/app/steps/uttaksplan-info/components/scenarios/mor-far-fødsel-annen-part-har-rett-i-eøs/MorFarFødselAnnenForelderHarRettIEØS.tsx","../../src/app/steps/uttaksplan-info/components/scenarios/far-medmor-aleneomsorg-fødsel/farMedmorAleneomsorgFødselFormConfig.ts","../../src/app/steps/uttaksplan-info/components/scenarios/far-medmor-aleneomsorg-fødsel/farMedmorAleneomsorgFødselQuestionsConfig.ts","../../src/app/steps/uttaksplan-info/components/scenarios/far-medmor-aleneomsorg-fødsel/farMedmorAleneomsorgFødselUtils.ts","../../src/app/steps/uttaksplan-info/components/scenarios/far-medmor-aleneomsorg-fødsel/validation/farMedmorAleneomsorgFødselValidation.ts","../../src/app/steps/uttaksplan-info/components/scenarios/far-medmor-aleneomsorg-fødsel/FarMedmorAleneomsorgFødsel.tsx","../../src/app/steps/uttaksplan-info/components/scenarios/far-medmor-fødsel-og-mor-har-ikke-rett/farMedmorFødselOgMorHarIkkeRettFormConfig.ts","../../src/app/steps/uttaksplan-info/components/scenarios/far-medmor-fødsel-og-mor-har-ikke-rett/farMedmorFødselOgMorHarIkkeRettUtils.ts","../../src/app/steps/uttaksplan-info/components/scenarios/far-medmor-fødsel-og-mor-har-ikke-rett/farMedmorFødselOgMorHarIkkeRettQuestionsConfig.ts","../../src/app/steps/uttaksplan-info/components/scenarios/far-medmor-fødsel-og-mor-har-ikke-rett/FarMedmorFødselOgMorHarIkkeRett.tsx","../../src/app/steps/uttaksplan-info/components/scenarios/farMedmor-førstegangssøknad-med-annen-part/farMedmorFørstegangssøknadMedAnnenPartFormConfig.ts","../../src/app/steps/uttaksplan-info/components/scenarios/farMedmor-førstegangssøknad-med-annen-part/farMedmorFørstegangssøknadMedAnnenPartQuestionsConfig.ts","../../src/app/steps/uttaksplan-info/components/scenarios/farMedmor-førstegangssøknad-med-annen-part/farMedmorFørstegangssøknadMedAnnenPartUtils.ts","../../src/app/steps/uttaksplan-info/components/scenarios/farMedmor-førstegangssøknad-med-annen-part/FarMedmorFørstegangssøknadMedAnnenPart.tsx","../../src/app/steps/uttaksplan-info/components/scenarios/scenarios.ts","../../src/app/steps/uttaksplan-info/components/UttaksplanInfoScenarios.tsx","../../src/app/api/getStønadskontoParams.ts","../../src/app/steps/uttaksplan-info/UttaksplanInfo.tsx"],"sourcesContent":["export enum UttaksplanHexColor {\n    lilla = '#544066',\n    blaa = '#0067C5',\n    gronn = '#06893a',\n    yellow = '#ff9100',\n    graa = '#7f756c',\n    rammeGraa = '#c6c2bf',\n    rod = '#BA3A26',\n}\n","import { Søknad } from 'app/context/types/Søknad';\nimport Søker from 'app/context/types/Søker';\nimport dayjs from 'dayjs';\nimport { getTermindato } from 'app/utils/barnUtils';\nimport { AxiosError } from 'axios';\nimport * as Sentry from '@sentry/browser';\nimport {\n    AnnenForelder,\n    AnnenForelderIkkeOppgitt,\n    Arbeidsform,\n    Attachment,\n    Barn,\n    Forelder,\n    MorsAktivitet,\n    Periode,\n    Periodetype,\n    Situasjon,\n    StønadskontoType,\n    Søkerrolle,\n    Søkersituasjon,\n    Tilleggsopplysninger,\n    Utsettelsesperiode,\n    UtsettelseÅrsakType,\n    Uttaksdagen,\n    UttaksperiodeBase,\n    andreAugust2022ReglerGjelder,\n    assertUnreachable,\n    extractAttachments,\n    førsteOktober2021ReglerGjelder,\n    guid,\n    isAdoptertBarn,\n    isAdoptertStebarn,\n    isAnnenForelderOppgitt,\n    isArrayOfAttachments,\n    isFarEllerMedmor,\n    isForeldrepengerFørFødselUttaksperiode,\n    isFødtBarn,\n    isUttaksperiode,\n    isValidTidsperiode,\n    removeAttachmentsWithUploadError,\n    removeDuplicateAttachments,\n    sorterPerioder,\n    uttaksperiodeKanJusteresVedFødsel,\n} from '@navikt/fp-common';\nimport { ContextDataMap, ContextDataType } from 'app/context/FpDataContext';\nimport { notEmpty } from '@navikt/fp-validation';\nimport { LocaleNo } from '@navikt/fp-types';\nexport interface AnnenForelderOppgittForInnsending\n    extends Omit<\n        AnnenForelder,\n        'erUfør' | 'harRettPåForeldrepengerINorge' | 'harOppholdtSegIEØS' | 'harRettPåForeldrepengerIEØS'\n    > {\n    harMorUføretrygd?: boolean;\n    harRettPåForeldrepenger?: boolean;\n    harAnnenForelderOppholdtSegIEØS?: boolean;\n    harAnnenForelderTilsvarendeRettEØS?: boolean;\n}\n\nexport type AnnenForelderForInnsending = AnnenForelderIkkeOppgitt | AnnenForelderOppgittForInnsending;\n\nexport interface JusterbarPeriodeForInnsending {\n    justeresVedFødsel?: boolean;\n}\n\nexport type UttaksPeriodeForInnsending = Omit<UttaksperiodeBase, 'erMorForSyk'> & JusterbarPeriodeForInnsending;\n\nexport type PeriodeForInnsending = Exclude<Periode, 'Uttaksperiode'> | UttaksPeriodeForInnsending;\n\nexport type LocaleForInnsending = 'NB' | 'NN' | 'nb' | 'nn';\n\nexport type SøkerrolleInnsending = 'MOR' | 'FAR' | 'MEDMOR';\n\ninterface BarnPropsForAPI {\n    adopsjonAvEktefellesBarn?: boolean;\n}\n\nexport type BarnForInnsending = Omit<Barn, 'datoForAleneomsorg' | 'type'> & BarnPropsForAPI;\n\nexport interface SøkerForInnsending extends Omit<Søker, 'andreInntekterSiste10Mnd' | 'språkkode'> {\n    språkkode: LocaleForInnsending;\n    rolle: SøkerrolleInnsending;\n}\n\nexport interface SøknadForInnsending\n    extends Omit<\n        Søknad,\n        'barn' | 'annenForelder' | 'uttaksplan' | 'søker' | 'søkersituasjon' | 'tilleggsopplysninger'\n    > {\n    barn: BarnForInnsending;\n    annenForelder: AnnenForelderForInnsending;\n    uttaksplan: PeriodeForInnsending[];\n    søker: SøkerForInnsending;\n    situasjon: Situasjon;\n    tilleggsopplysninger?: string;\n    vedlegg: Attachment[];\n}\n\nexport type EndringssøknadForInnsending = Pick<\n    SøknadForInnsending,\n    | 'type'\n    | 'saksnummer'\n    | 'erEndringssøknad'\n    | 'uttaksplan'\n    | 'søker'\n    | 'annenForelder'\n    | 'barn'\n    | 'dekningsgrad'\n    | 'situasjon'\n    | 'tilleggsopplysninger'\n    | 'ønskerJustertUttakVedFødsel'\n    | 'vedlegg'\n>;\n\nexport const FOR_MANGE_VEDLEGG_ERROR =\n    'Søknaden kan ikke inneholde flere enn 40 vedlegg. Vennligst gå tilbake, slett noen vedlegg og prøv å sende inn søknaden på nytt. Du kan ettersende vedlegg senere.';\n\nexport const FEIL_VED_INNSENDING =\n    'Det har oppstått et problem med innsending av søknaden. Vennligst prøv igjen senere. Hvis problemet vedvarer, kontakt oss og oppgi feil id: ';\n\nexport const UKJENT_UUID = 'ukjent uuid';\n\nconst getUttaksperiodeForInnsending = (\n    uttaksPeriode: UttaksperiodeBase,\n    ønskerJustertUttakVedFødsel: boolean | undefined,\n    termindato: Date | undefined,\n): UttaksPeriodeForInnsending => {\n    const cleanedPeriode = changeGradertUttaksPeriode(cleanUttaksperiode(uttaksPeriode));\n    if (uttaksperiodeKanJusteresVedFødsel(ønskerJustertUttakVedFødsel, termindato, uttaksPeriode.tidsperiode.fom)) {\n        return { ...cleanedPeriode, justeresVedFødsel: true };\n    }\n    return cleanedPeriode;\n};\n\nconst cleanUttaksperiode = (uttaksPeriode: UttaksperiodeBase): UttaksPeriodeForInnsending => {\n    const { erMorForSyk, ...periodeRest } = uttaksPeriode;\n    return periodeRest;\n};\n\nconst isNotPeriodetypeHull = (periode: Periode): boolean => {\n    return periode.type !== Periodetype.Hull;\n};\n\nconst isNotPeriodetypeInfo = (periode: Periode): boolean => {\n    return periode.type !== Periodetype.Info;\n};\n\nconst isNotPeriodeUtenUttak = (periode: Periode): boolean => {\n    return periode.type !== Periodetype.PeriodeUtenUttak;\n};\n\nconst skalPeriodeSendesInn = (periode: Periode) => {\n    if (isForeldrepengerFørFødselUttaksperiode(periode)) {\n        return !periode.skalIkkeHaUttakFørTermin;\n    }\n\n    return (\n        isNotPeriodetypeHull(periode) &&\n        isNotPeriodetypeInfo(periode) &&\n        isNotPeriodeUtenUttak(periode) &&\n        !(isUttaksperiode(periode) && periode.konto === undefined)\n    );\n};\n\nconst cleanAnnenForelder = (annenForelder: AnnenForelder, erEndringssøknad = false): AnnenForelderForInnsending => {\n    if (isAnnenForelderOppgitt(annenForelder)) {\n        const {\n            erUfør,\n            erForSyk,\n            harRettPåForeldrepengerINorge,\n            harRettPåForeldrepengerIEØS,\n            harOppholdtSegIEØS,\n            ...annenForelderRest\n        } = annenForelder;\n        const cleanedAnnenForelder = {\n            harMorUføretrygd: erUfør,\n            harRettPåForeldrepenger: harRettPåForeldrepengerINorge,\n            ...annenForelderRest,\n        };\n        if (harRettPåForeldrepengerINorge) {\n            return { ...cleanedAnnenForelder, erInformertOmSøknaden: true } as AnnenForelderOppgittForInnsending;\n        }\n        if (harOppholdtSegIEØS) {\n            return {\n                ...cleanedAnnenForelder,\n                harAnnenForelderOppholdtSegIEØS: harOppholdtSegIEØS,\n                harAnnenForelderTilsvarendeRettEØS: harRettPåForeldrepengerIEØS,\n            };\n        } else if (erEndringssøknad) {\n            return { ...cleanedAnnenForelder, harAnnenForelderTilsvarendeRettEØS: harRettPåForeldrepengerIEØS };\n        } else {\n            return { ...cleanedAnnenForelder, harAnnenForelderOppholdtSegIEØS: harOppholdtSegIEØS };\n        }\n    }\n    return annenForelder;\n};\n\nconst cleanBarn = (barn: Barn): BarnForInnsending => {\n    if (isFødtBarn(barn)) {\n        const { datoForAleneomsorg, type, fnr, ...barnRest } = barn;\n\n        return barnRest;\n    }\n\n    if (isAdoptertBarn(barn)) {\n        const { datoForAleneomsorg, type, fnr, ...barnRest } = barn;\n        return {\n            adopsjonAvEktefellesBarn: isAdoptertStebarn(barn),\n            ...barnRest,\n        };\n    }\n    const { datoForAleneomsorg, type, ...barnRest } = barn;\n    return barnRest;\n};\n\nconst konverterRolle = (rolle: Søkerrolle): SøkerrolleInnsending => {\n    switch (rolle) {\n        case 'mor':\n            return 'MOR';\n        case 'far':\n            return 'FAR';\n        case 'medmor':\n            return 'MEDMOR';\n        default:\n            return assertUnreachable(rolle, 'Søkerrolle er ikke satt');\n    }\n};\n\nconst changeClientonlyKontotype = (\n    periode: Periode,\n    annenForelderHarRettPåForeldrepengerINorge: boolean,\n    morErUfør: boolean,\n    søkerErFarEllerMedmor: boolean,\n    familiehendelsesdato: Date,\n) => {\n    if (isUttaksperiode(periode)) {\n        if (periode.konto === StønadskontoType.Flerbarnsdager) {\n            periode.konto = !annenForelderHarRettPåForeldrepengerINorge\n                ? StønadskontoType.Foreldrepenger\n                : StønadskontoType.Fellesperiode;\n        }\n        if (periode.konto === StønadskontoType.AktivitetsfriKvote) {\n            periode.konto = StønadskontoType.Foreldrepenger;\n            if (\n                søkerErFarEllerMedmor &&\n                !annenForelderHarRettPåForeldrepengerINorge &&\n                andreAugust2022ReglerGjelder(familiehendelsesdato)\n            ) {\n                periode.morsAktivitetIPerioden = MorsAktivitet.IkkeOppgitt;\n            } else if (morErUfør) {\n                periode.morsAktivitetIPerioden = MorsAktivitet.Uføre;\n            }\n        }\n    }\n    return periode;\n};\n\nconst getArbeidstakerFrilansSN = (arbeidsformer: Arbeidsform[] | undefined) => {\n    if (arbeidsformer !== undefined && arbeidsformer.length > 0) {\n        const arbeidsform = arbeidsformer[0];\n        return {\n            erArbeidstaker: arbeidsform === Arbeidsform.arbeidstaker,\n            erFrilanser: arbeidsform === Arbeidsform.frilans,\n            erSelvstendig: arbeidsform === Arbeidsform.selvstendignæringsdrivende,\n        };\n    } else {\n        return {};\n    }\n};\n\nconst changeGradertUttaksPeriode = (periode: UttaksPeriodeForInnsending): UttaksPeriodeForInnsending => {\n    if (periode.gradert) {\n        return { ...periode, ...getArbeidstakerFrilansSN(periode.arbeidsformer) };\n    }\n    return periode;\n};\n\nconst cleanUttaksplan = (\n    plan: Periode[],\n    familiehendelsesdato: Date,\n    søkerErFarEllerMedmor: boolean,\n    ønskerJustertUttakVedFødsel: boolean | undefined,\n    termindato: Date | undefined,\n    annenForelder?: AnnenForelder,\n    endringstidspunkt?: Date,\n): PeriodeForInnsending[] => {\n    const uttaksplan = plan.map((periode) => {\n        return { ...periode };\n    });\n    const cleanedUttaksplan = uttaksplan\n        .filter((periode: Periode) => isValidTidsperiode(periode.tidsperiode))\n        .filter(skalPeriodeSendesInn)\n        .map((periode) =>\n            annenForelder && isAnnenForelderOppgitt(annenForelder)\n                ? changeClientonlyKontotype(\n                      periode,\n                      !!annenForelder.harRettPåForeldrepengerINorge,\n                      !!annenForelder.erUfør,\n                      søkerErFarEllerMedmor,\n                      familiehendelsesdato,\n                  )\n                : periode,\n        )\n        .map((periode) =>\n            periode.type === Periodetype.Uttak\n                ? getUttaksperiodeForInnsending(periode, ønskerJustertUttakVedFødsel, termindato)\n                : periode,\n        );\n\n    if (endringstidspunkt && førsteOktober2021ReglerGjelder(familiehendelsesdato)) {\n        const periodeVedEndringstidspunkt = getPeriodeVedTidspunkt(cleanedUttaksplan, endringstidspunkt);\n\n        if (!periodeVedEndringstidspunkt) {\n            return getUttaksplanMedFriUtsettelsesperiode(cleanedUttaksplan, endringstidspunkt);\n        }\n    }\n\n    return cleanedUttaksplan;\n};\n\nexport const getPeriodeVedTidspunkt = (uttaksplan: Periode[], tidspunkt: Date): Periode | undefined => {\n    return uttaksplan.find((periode) =>\n        dayjs(tidspunkt).isBetween(periode.tidsperiode.fom, periode.tidsperiode.tom, 'day', '[]'),\n    );\n};\n\nexport const getUttaksplanMedFriUtsettelsesperiode = (uttaksplan: Periode[], endringstidspunkt: Date): Periode[] => {\n    const førstePeriodeEtterEndringstidspunkt = uttaksplan.find((periode) =>\n        dayjs(periode.tidsperiode.fom).isAfter(endringstidspunkt, 'day'),\n    );\n\n    const endringsTidspunktPeriodeTom = førstePeriodeEtterEndringstidspunkt\n        ? Uttaksdagen(førstePeriodeEtterEndringstidspunkt.tidsperiode.fom).forrige()\n        : endringstidspunkt;\n\n    const endringsTidspunktPeriode: Utsettelsesperiode = {\n        type: Periodetype.Utsettelse,\n        årsak: UtsettelseÅrsakType.Fri,\n        id: guid(),\n        tidsperiode: {\n            fom: endringstidspunkt,\n            tom: endringsTidspunktPeriodeTom,\n        },\n        erArbeidstaker: false,\n        forelder: Forelder.farMedmor,\n    };\n\n    uttaksplan.push(endringsTidspunktPeriode);\n\n    uttaksplan.sort(sorterPerioder);\n\n    return uttaksplan;\n};\n\nexport const cleanSøknad = (\n    hentData: <TYPE extends ContextDataType>(key: TYPE) => ContextDataMap[TYPE],\n    familiehendelsesdato: Date,\n    locale: LocaleNo,\n): SøknadForInnsending => {\n    const annenForelder = notEmpty(hentData(ContextDataType.ANNEN_FORELDER));\n    const barn = notEmpty(hentData(ContextDataType.OM_BARNET));\n    const søker = notEmpty(hentData(ContextDataType.SØKER));\n    const søkersituasjon = notEmpty(hentData(ContextDataType.SØKERSITUASJON));\n    const utenlandsopphold = notEmpty(hentData(ContextDataType.UTENLANDSOPPHOLD));\n    const senereUtenlandsopphold = hentData(ContextDataType.UTENLANDSOPPHOLD_SENERE);\n    const tidligereUtenlandsopphold = hentData(ContextDataType.UTENLANDSOPPHOLD_TIDLIGERE);\n    const uttaksplan = notEmpty(hentData(ContextDataType.UTTAKSPLAN));\n    const uttaksplanMetadata = notEmpty(hentData(ContextDataType.UTTAKSPLAN_METADATA));\n    const eksisterendeSak = hentData(ContextDataType.EKSISTERENDE_SAK);\n\n    const annenForelderInnsending = cleanAnnenForelder(annenForelder);\n    const søkerInnsending = cleanSøker(søker, søkersituasjon, locale);\n    const barnInnsending = cleanBarn(barn);\n    const søkerErFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const termindato = getTermindato(barn);\n    const uttaksplanInnsending = cleanUttaksplan(\n        uttaksplan,\n        familiehendelsesdato,\n        søkerErFarEllerMedmor,\n        uttaksplanMetadata.ønskerJustertUttakVedFødsel,\n        termindato,\n        annenForelder,\n    );\n    const tilleggsopplysningerInnsending = cleanTilleggsopplysninger(notEmpty(uttaksplanMetadata.tilleggsopplysninger));\n    const cleanedSøknad: SøknadForInnsending = {\n        type: 'foreldrepenger',\n        harGodkjentVilkår: true,\n        saksnummer: eksisterendeSak?.saksnummer,\n        erEndringssøknad: false,\n        søker: søkerInnsending,\n        barn: barnInnsending,\n        situasjon: søkersituasjon.situasjon,\n        annenForelder: annenForelderInnsending,\n        uttaksplan: uttaksplanInnsending,\n        tilleggsopplysninger: tilleggsopplysningerInnsending,\n        informasjonOmUtenlandsopphold: {\n            ...utenlandsopphold,\n            ...(senereUtenlandsopphold || { senereOpphold: [] }),\n            ...(tidligereUtenlandsopphold || { tidligereOpphold: [] }),\n        },\n        dekningsgrad: uttaksplanMetadata.dekningsgrad!,\n        ønskerJustertUttakVedFødsel: uttaksplanMetadata.ønskerJustertUttakVedFødsel,\n        vedlegg: [], //Vedlegga blir lagt til i funksjonen under\n    };\n\n    removeDuplicateAttachments(cleanedSøknad.uttaksplan);\n\n    return mapAttachmentsToSøknadForInnsending(cleanedSøknad) as SøknadForInnsending; //TODO vedleggForSenEndring\n};\n\nconst cleanSøker = (søker: Søker, søkersituasjon: Søkersituasjon, locale: LocaleNo): SøkerForInnsending => {\n    const rolle = konverterRolle(søkersituasjon.rolle);\n    return {\n        ...søker,\n        rolle: rolle,\n        språkkode: locale,\n    };\n};\n\nexport const getSøknadsdataForInnsending = (\n    erEndringssøknad: boolean,\n    hentData: <TYPE extends ContextDataType>(key: TYPE) => ContextDataMap[TYPE],\n    endringerIUttaksplan: Periode[],\n    familiehendelsesdato: Date,\n    locale: LocaleNo,\n    endringstidspunkt?: Date,\n): SøknadForInnsending | EndringssøknadForInnsending => {\n    if (erEndringssøknad) {\n        return cleanEndringssøknad(hentData, endringerIUttaksplan, familiehendelsesdato, locale, endringstidspunkt);\n    } else {\n        return cleanSøknad(hentData, familiehendelsesdato, locale);\n    }\n};\n\nexport const cleanAttachments = (object: any): Attachment[] => {\n    const foundAttachments = [] as Attachment[];\n\n    if (object === null || object === undefined) {\n        return foundAttachments;\n    }\n\n    Object.keys(object).forEach((key: string) => {\n        if (typeof object[key] === 'object') {\n            if (isArrayOfAttachments(object[key])) {\n                const attachmentWithoutUploadError = [...removeAttachmentsWithUploadError(object[key])];\n                foundAttachments.push(...attachmentWithoutUploadError);\n                object[key] = (object[key] as Attachment[])\n                    .filter((attachment: Attachment) => attachmentWithoutUploadError.includes(attachment))\n                    .map((attachment: Attachment) => attachment.id);\n            } else {\n                foundAttachments.push(...cleanAttachments(object[key]));\n            }\n        }\n    });\n    return foundAttachments;\n};\n\nexport const cleanEndringssøknad = (\n    hentData: <TYPE extends ContextDataType>(key: TYPE) => ContextDataMap[TYPE],\n    endringerIUttaksplan: Periode[],\n    familiehendelsesdato: Date,\n    locale: LocaleNo,\n    endringstidspunkt?: Date,\n): EndringssøknadForInnsending => {\n    const uttaksplanMetadata = notEmpty(hentData(ContextDataType.UTTAKSPLAN_METADATA));\n    const annenForelder = notEmpty(hentData(ContextDataType.ANNEN_FORELDER));\n    const barn = notEmpty(hentData(ContextDataType.OM_BARNET));\n    const søker = notEmpty(hentData(ContextDataType.SØKER));\n    const søkersituasjon = notEmpty(hentData(ContextDataType.SØKERSITUASJON));\n    const eksisterendeSak = notEmpty(hentData(ContextDataType.EKSISTERENDE_SAK));\n    const søkerErFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const termindato = getTermindato(barn);\n    const cleanedSøknad: EndringssøknadForInnsending = {\n        type: 'foreldrepenger',\n        erEndringssøknad: true,\n        saksnummer: eksisterendeSak.saksnummer,\n        uttaksplan: cleanUttaksplan(\n            endringerIUttaksplan,\n            familiehendelsesdato,\n            søkerErFarEllerMedmor,\n            uttaksplanMetadata.ønskerJustertUttakVedFødsel,\n            termindato,\n            annenForelder,\n            endringstidspunkt,\n        ),\n        søker: cleanSøker(søker, søkersituasjon, locale),\n        annenForelder: cleanAnnenForelder(annenForelder, true),\n        barn: barn,\n        dekningsgrad: uttaksplanMetadata.dekningsgrad!,\n        situasjon: søkersituasjon.situasjon,\n        tilleggsopplysninger: cleanTilleggsopplysninger(notEmpty(uttaksplanMetadata.tilleggsopplysninger)),\n        ønskerJustertUttakVedFødsel: uttaksplanMetadata.ønskerJustertUttakVedFødsel,\n        vedlegg: [], //Vedlegga blir lagt til i funksjonen under\n    };\n\n    removeDuplicateAttachments(cleanedSøknad.uttaksplan);\n\n    return mapAttachmentsToSøknadForInnsending(cleanedSøknad);\n};\n\nconst cleanTilleggsopplysninger = (tilleggsopplysninger: Tilleggsopplysninger): string | undefined => {\n    const tilleggsopplysningerTilSaksbehandler = tilleggsopplysninger.begrunnelseForSenEndring?.tekst;\n    if (tilleggsopplysningerTilSaksbehandler !== undefined && tilleggsopplysningerTilSaksbehandler.length > 0) {\n        return tilleggsopplysningerTilSaksbehandler;\n    }\n    return undefined;\n};\n\nexport const sendErrorMessageToSentry = (error: AxiosError<any>) => {\n    const errorCallId = getErrorCallId(error) + '. ';\n    const errorTimestamp = getErrorTimestamp(error) + '. ';\n    const hideNumbersAndTrim = (tekst: string): string => {\n        return tekst.replace(/\\d/g, '*').slice(0, 250) + '...';\n    };\n\n    let errorString = errorCallId + errorTimestamp;\n    if (error.request && error.request.data && error.request.data.messages) {\n        errorString = errorString + hideNumbersAndTrim(error.request.data.messages);\n    } else if (error.response && error.response.data && error.response.data.messages) {\n        errorString = errorString + hideNumbersAndTrim(error.response.data.messages);\n    }\n    if (error.message) {\n        errorString = errorString + error.message;\n    }\n    Sentry.captureMessage(errorString);\n};\n\nexport const getErrorCallId = (error: AxiosError<any>): string => {\n    return error.response && error.response.data && error.response.data.uuid ? error.response.data.uuid : UKJENT_UUID;\n};\n\nexport const getErrorTimestamp = (error: AxiosError<any>): string => {\n    return error.response && error.response.data && error.response.data.timestamp ? error.response.data.timestamp : '';\n};\n\nexport const mapAttachmentsToSøknadForInnsending = (\n    søknad: SøknadForInnsending | EndringssøknadForInnsending,\n): SøknadForInnsending | EndringssøknadForInnsending => {\n    const vedlegg: Attachment[] = [];\n    const søknadCopy = extractAttachments(søknad, vedlegg);\n\n    const vedleggWithoutDuplicates = vedlegg.reduce((result, current) => {\n        if (result.find((att: Attachment) => att.id === current.id)) {\n            return result;\n        }\n\n        result.push(current);\n        return result;\n    }, [] as Attachment[]);\n\n    return {\n        ...søknadCopy,\n        vedlegg: vedleggWithoutDuplicates,\n    };\n};\n","import { getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\n\nexport enum FarMedmorFødselBeggeHarRettFormField {\n    dekningsgrad = 'dekningsgrad',\n    morsSisteDag = 'morsSisteDag',\n    farMedmorsFørsteDag = 'farMedmorsFørsteDag',\n    antallUkerFellesperiode = 'antallUkerFellesperiode',\n    antallDagerFellesperiode = 'antallDagerFellesperiode',\n}\n\nexport interface FarMedmorFødselBeggeHarRettFormData {\n    [FarMedmorFødselBeggeHarRettFormField.dekningsgrad]: string;\n    [FarMedmorFødselBeggeHarRettFormField.morsSisteDag]: string;\n    [FarMedmorFødselBeggeHarRettFormField.farMedmorsFørsteDag]: string;\n    [FarMedmorFødselBeggeHarRettFormField.antallUkerFellesperiode]: string;\n    [FarMedmorFødselBeggeHarRettFormField.antallDagerFellesperiode]: string;\n}\n\nexport const FarMedmorFødselBeggeHarRettFormComponents = getTypedFormComponents<\n    FarMedmorFødselBeggeHarRettFormField,\n    FarMedmorFødselBeggeHarRettFormData\n>();\n","import { FarMedmorFødselBeggeHarRettUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport {\n    FarMedmorFødselBeggeHarRettFormData,\n    FarMedmorFødselBeggeHarRettFormField,\n} from './farMedmorFødselBeggeHarRettFormConfig';\nimport { Dekningsgrad } from '@navikt/fp-common';\n\nconst initialFarMedmorFødselBeggeHarRettValues: FarMedmorFødselBeggeHarRettFormData = {\n    [FarMedmorFødselBeggeHarRettFormField.dekningsgrad]: '',\n    [FarMedmorFødselBeggeHarRettFormField.morsSisteDag]: '',\n    [FarMedmorFødselBeggeHarRettFormField.farMedmorsFørsteDag]: '',\n    [FarMedmorFødselBeggeHarRettFormField.antallUkerFellesperiode]: '0',\n    [FarMedmorFødselBeggeHarRettFormField.antallDagerFellesperiode]: '0',\n};\n\nexport const mapFarMedmorFødselBeggeHarRettToState = (\n    values: Partial<FarMedmorFødselBeggeHarRettFormData>,\n): FarMedmorFødselBeggeHarRettUttaksplanInfo => {\n    return {\n        antallDagerFellesperiode:\n            values.antallDagerFellesperiode === undefined || values.antallDagerFellesperiode.trim().length === 0\n                ? '0'\n                : values.antallDagerFellesperiode,\n        antallUkerFellesperiode:\n            values.antallUkerFellesperiode === undefined || values.antallUkerFellesperiode.trim().length === 0\n                ? '0'\n                : values.antallUkerFellesperiode,\n        farMedmorsFørsteDag: values.farMedmorsFørsteDag!,\n        morsSisteDag: values.morsSisteDag!,\n    };\n};\n\nexport const getInitialFarMedmorFødselBeggeHarRettValues = (\n    state: FarMedmorFødselBeggeHarRettUttaksplanInfo | undefined,\n    dekningsgrad?: Dekningsgrad,\n): FarMedmorFødselBeggeHarRettFormData => {\n    if (!state) {\n        return initialFarMedmorFødselBeggeHarRettValues;\n    }\n\n    return {\n        ...initialFarMedmorFødselBeggeHarRettValues,\n        antallDagerFellesperiode: state.antallDagerFellesperiode,\n        antallUkerFellesperiode: state.antallUkerFellesperiode,\n        morsSisteDag: state.morsSisteDag,\n        farMedmorsFørsteDag: state.farMedmorsFørsteDag,\n        dekningsgrad: dekningsgrad!,\n    };\n};\n","import { bemUtils } from '@navikt/fp-common';\n\nimport './multibar.less';\n\ninterface BarProps {\n    width: number;\n    color: string;\n    color2?: string;\n    text?: React.ReactNode;\n}\n\ninterface Props {\n    borderColor: string;\n    leftBar?: BarProps;\n    rightBar?: BarProps;\n    centerBar?: BarProps;\n}\n\nconst getBarStyle = ({ width, color, color2 }: BarProps): React.CSSProperties => {\n    return {\n        width: `${width}%`,\n        background: color2 ? `linear-gradient(to right bottom, ${color} 49%, ${color2} 51%)` : color,\n    };\n};\n\nconst Multibar: React.FunctionComponent<Props> = ({ leftBar, rightBar, centerBar, borderColor }) => {\n    const bem = bemUtils('multibar');\n\n    return (\n        <div className={bem.block}>\n            <div className={bem.element('bars')}>\n                {leftBar && leftBar.width > 0 && (\n                    <div className={bem.element('bar', 'left')} style={getBarStyle(leftBar)}>\n                        {leftBar && leftBar.text}\n                    </div>\n                )}\n                {centerBar && (\n                    <div\n                        className={bem.element('bar', 'center')}\n                        style={{ ...getBarStyle(centerBar), left: leftBar ? `${leftBar.width}%` : undefined }}\n                    >\n                        {centerBar && centerBar.text}\n                    </div>\n                )}\n                {rightBar && rightBar.width > 0 && (\n                    <div className={bem.element('bar', 'right')} style={getBarStyle(rightBar)}>\n                        {rightBar && rightBar.text}\n                    </div>\n                )}\n            </div>\n            <div className={bem.element('background')} style={{ borderColor }} />\n        </div>\n    );\n};\n\nexport default Multibar;\n","import { FormattedMessage, useIntl } from 'react-intl';\nimport {\n    Personkort,\n    UttaksplanHexColor,\n    bemUtils,\n    getNavnGenitivEierform,\n    getVarighetString,\n    intlUtils,\n} from '@navikt/fp-common';\nimport Multibar from './multibar/Multibar';\nimport { TilgjengeligeDager } from 'app/types/TilgjengeligeDager';\nimport { Label } from '@navikt/ds-react';\n\nimport './tilgjengeligeDagerGraf.less';\n\ninterface Props {\n    tilgjengeligeDager: TilgjengeligeDager;\n    navnMor: string;\n    navnFarMedmor: string;\n    erFarEllerMedmor: boolean;\n    erDeltUttak: boolean;\n}\n\nexport const getProsentFordelingPerDel = (\n    tilgjengeligeDager: TilgjengeligeDager,\n    inkluderForeldrepengerFørTermin: boolean,\n): {\n    pstMor: number;\n    pstFelles: number;\n    pstFarMedmor: number;\n} => {\n    const pstMultiplikator =\n        100 / (inkluderForeldrepengerFørTermin ? tilgjengeligeDager.dagerTotalt : tilgjengeligeDager.dagerEtterTermin);\n\n    const pstMor =\n        pstMultiplikator * tilgjengeligeDager.dagerMor +\n        (inkluderForeldrepengerFørTermin ? tilgjengeligeDager.dagerForeldrepengerFørFødsel : 0);\n    const pstFarMedmor = pstMultiplikator * tilgjengeligeDager.dagerFarMedmor;\n    const pstFelles = 100 - pstMor - pstFarMedmor;\n\n    return {\n        pstMor,\n        pstFarMedmor,\n        pstFelles,\n    };\n};\n\nconst DeltOmsorgGraf: React.FunctionComponent<Props> = ({\n    tilgjengeligeDager,\n    navnFarMedmor,\n    navnMor,\n    erFarEllerMedmor,\n}) => {\n    const intl = useIntl();\n    const bem = bemUtils('tilgjengeligeDagerGraf');\n    const fordeling = getProsentFordelingPerDel(tilgjengeligeDager, true);\n    const txtMor =\n        tilgjengeligeDager.dagerForeldrepengerFørFødsel > 0\n            ? `${tilgjengeligeDager.dagerForeldrepengerFørFødsel / 5} + ${tilgjengeligeDager.dagerMor / 5} ${intlUtils(\n                  intl,\n                  'uker',\n                  { uker: 15 },\n              )}`\n            : getVarighetString(tilgjengeligeDager.dagerMor, intl);\n    return (\n        <div className={bem.classNames(bem.block, bem.modifier('flereForeldre'))}>\n            <div className={bem.element('bars')}>\n                <div className={bem.element('forelder1')} style={{ width: `${fordeling.pstMor}%` }}>\n                    <div className={bem.element('barTitle')}>\n                        <Personkort textValign=\"bottom\">\n                            <FormattedMessage\n                                id=\"tilgjengeligeDagerGraf.person.del\"\n                                values={{ navnEierform: getNavnGenitivEierform(navnMor, intl.locale) }}\n                            />\n                        </Personkort>\n                    </div>\n                    <Multibar\n                        borderColor={UttaksplanHexColor.graa}\n                        leftBar={{\n                            color: UttaksplanHexColor.lilla,\n                            width: 100,\n                            text: <div className={bem.element('barTekst')}>{txtMor}</div>,\n                        }}\n                    />\n                </div>\n                <div className={bem.element('felles')} style={{ width: `${fordeling.pstFelles}%` }}>\n                    <div className={bem.element('barTitle')}>\n                        <FormattedMessage id=\"tilgjengeligeDagerGraf.fellesperiode\" />\n                    </div>\n                    <Multibar\n                        borderColor={UttaksplanHexColor.graa}\n                        leftBar={{\n                            color: UttaksplanHexColor.lilla,\n                            color2: UttaksplanHexColor.blaa,\n                            width: 100,\n                            text: (\n                                <div className={bem.element('barTekst')}>\n                                    {getVarighetString(tilgjengeligeDager.dagerFelles, intl)}\n                                </div>\n                            ),\n                        }}\n                    />\n                </div>\n                {navnFarMedmor && (\n                    <div className={bem.element('forelder2')} style={{ width: `${fordeling.pstFarMedmor}%` }}>\n                        <div className={bem.element('barTitle')}>\n                            <Personkort invertert={true} textValign=\"bottom\">\n                                <FormattedMessage\n                                    id=\"tilgjengeligeDagerGraf.person.del\"\n                                    values={{\n                                        navnEierform: getNavnGenitivEierform(navnFarMedmor, intl.locale),\n                                    }}\n                                />\n                            </Personkort>\n                        </div>\n                        <Multibar\n                            borderColor={UttaksplanHexColor.graa}\n                            leftBar={{\n                                color: UttaksplanHexColor.blaa,\n                                width: 100,\n                                text: (\n                                    <div className={bem.element('barTekst')}>\n                                        {getVarighetString(tilgjengeligeDager.dagerFarMedmor, intl)}\n                                    </div>\n                                ),\n                            }}\n                        />\n                    </div>\n                )}\n            </div>\n            {!erFarEllerMedmor && tilgjengeligeDager.dagerForeldrepengerFørFødsel > 0 && (\n                <div style={{ paddingTop: '0.625rem' }}>\n                    <Label>\n                        <FormattedMessage id=\"tilgjengeligeDagerGraf.uttakFørFødselInfo\" values={{ navn: navnMor }} />\n                    </Label>\n                </div>\n            )}\n            {erFarEllerMedmor && tilgjengeligeDager.dagerForeldrepengerFørFødsel > 0 && (\n                <div style={{ paddingTop: '0.625rem' }}>\n                    <Label>\n                        <FormattedMessage\n                            id=\"tilgjengeligeDagerGraf.uttakFørFødselInfoFarMedmor\"\n                            values={{ navn: navnMor }}\n                        />\n                    </Label>\n                </div>\n            )}\n        </div>\n    );\n};\n\nconst AleneomsorgGraf: React.FunctionComponent<Props> = ({ tilgjengeligeDager, erFarEllerMedmor }) => {\n    const intl = useIntl();\n    const bem = bemUtils('tilgjengeligeDagerGraf');\n    const txt =\n        tilgjengeligeDager.dagerForeldrepengerFørFødsel > 0\n            ? `${tilgjengeligeDager.dagerForeldrepengerFørFødsel / 5} + ${\n                  tilgjengeligeDager.dagerForeldrepenger / 5\n              } uker`\n            : getVarighetString(tilgjengeligeDager.dagerEtterTermin, intl);\n    return (\n        <div className={bem.block}>\n            <div style={{ position: 'relative' }}>\n                <div className={bem.element('barTitle')}>\n                    <Label>\n                        <FormattedMessage id=\"tilgjengeligeDagerGraf.periodeMedForeldrepenger\" />\n                    </Label>\n                </div>\n            </div>\n            <Multibar\n                borderColor={UttaksplanHexColor.graa}\n                leftBar={{\n                    color: erFarEllerMedmor ? UttaksplanHexColor.blaa : UttaksplanHexColor.lilla,\n                    width: 100,\n                    text: <div className={bem.element('barTekst')}>{txt}</div>,\n                }}\n            />\n            {!erFarEllerMedmor && tilgjengeligeDager.dagerForeldrepengerFørFødsel > 0 && (\n                <div style={{ paddingTop: '0.625rem' }}>\n                    <Label>\n                        <FormattedMessage id=\"tilgjengeligeDagerGraf.uttakFørFødselInfoIkkeDeltUttak\" />\n                    </Label>\n                </div>\n            )}\n        </div>\n    );\n};\n\nconst TilgjengeligeDagerGraf: React.FunctionComponent<Props> = (props) => {\n    return props.erDeltUttak ? <DeltOmsorgGraf {...props} /> : <AleneomsorgGraf {...props} />;\n};\n\nexport default TilgjengeligeDagerGraf;\n","import { Forelder, StønadskontoType, TilgjengeligStønadskonto } from '@navikt/fp-common';\nimport { TilgjengeligeDager } from './../../../../types/TilgjengeligeDager';\n\nexport const summerAntallDagerIKontoer = (kontoer: TilgjengeligStønadskonto[]): number => {\n    return kontoer.reduce((dager, konto) => konto.dager + dager, 0);\n};\n\nconst getMorsStønadskontoer = (kontoer: TilgjengeligStønadskonto[]): TilgjengeligStønadskonto[] =>\n    kontoer.filter((konto) => konto.konto === StønadskontoType.Mødrekvote);\n\nconst getFarsStønadskontoer = (kontoer: TilgjengeligStønadskonto[]): TilgjengeligStønadskonto[] =>\n    kontoer.filter((konto) => konto.konto === StønadskontoType.Fedrekvote);\n\nconst getForeldrepengeKontoer = (kontoer: TilgjengeligStønadskonto[]): TilgjengeligStønadskonto[] =>\n    kontoer.filter((konto) => konto.konto === StønadskontoType.Foreldrepenger);\n\nconst getFellesStønadskontoer = (kontoer: TilgjengeligStønadskonto[]): TilgjengeligStønadskonto[] =>\n    kontoer.filter((konto) => konto.konto === StønadskontoType.Fellesperiode);\n\nconst kontoErFørTermin = (konto: TilgjengeligStønadskonto): boolean => {\n    return konto.konto === StønadskontoType.ForeldrepengerFørFødsel;\n};\n\nconst kontoErEtterTermin = (konto: TilgjengeligStønadskonto): boolean => {\n    return konto.konto !== StønadskontoType.ForeldrepengerFørFødsel;\n};\n\nexport const getTilgjengeligeDager = (\n    kontoer: TilgjengeligStønadskonto[],\n    erDeltUttak: boolean,\n    forelderVedAleneomsorg: Forelder | undefined,\n): TilgjengeligeDager => {\n    const kontoerEtterTermin = kontoer.filter(kontoErEtterTermin);\n\n    const dagerTotalt = summerAntallDagerIKontoer(kontoer);\n    const dagerForeldrepengerFørFødsel = summerAntallDagerIKontoer(kontoer.filter(kontoErFørTermin));\n    const dagerEtterTermin = summerAntallDagerIKontoer(kontoerEtterTermin);\n    const dagerForeldrepenger = summerAntallDagerIKontoer(getForeldrepengeKontoer(kontoerEtterTermin));\n    const dagerMor = summerAntallDagerIKontoer(getMorsStønadskontoer(kontoerEtterTermin));\n    const dagerFar = summerAntallDagerIKontoer(getFarsStønadskontoer(kontoerEtterTermin));\n    const dagerFelles = summerAntallDagerIKontoer(getFellesStønadskontoer(kontoerEtterTermin));\n\n    const dagerKunTilMor = erDeltUttak === false && forelderVedAleneomsorg === Forelder.mor;\n    const dagerKunTilFar = erDeltUttak === false && forelderVedAleneomsorg === Forelder.farMedmor;\n\n    const maksDagerFar = dagerKunTilFar ? dagerForeldrepenger : dagerFar + dagerFelles;\n    const maksDagerMor = dagerKunTilMor ? dagerForeldrepenger + dagerForeldrepengerFørFødsel : dagerMor + dagerFelles;\n\n    return {\n        dagerTotalt,\n        dagerForeldrepengerFørFødsel,\n        dagerEtterTermin,\n        dagerForeldrepenger,\n        dagerMor,\n        dagerFarMedmor: dagerFar,\n        dagerFelles,\n        maksDagerFar,\n        maksDagerMor,\n        stønadskontoer: kontoer,\n    };\n};\n","import { Dekningsgrad, StønadskontoType, TilgjengeligStønadskonto } from '@navikt/fp-common';\nimport { TilgjengeligeStønadskontoerDTO } from 'app/types/TilgjengeligeStønadskontoerDTO';\n\nconst opprettAktivitetsFriKonto = (\n    kontoer: TilgjengeligStønadskonto[],\n    generellMinsterett: number,\n): TilgjengeligStønadskonto[] => {\n    const nyeKontoer: TilgjengeligStønadskonto[] = [];\n    nyeKontoer.push({ ...kontoer[0], dager: kontoer[0].dager - generellMinsterett });\n    nyeKontoer.push({ konto: StønadskontoType.AktivitetsfriKvote, dager: generellMinsterett });\n    return nyeKontoer;\n};\n\nconst mapTilgjengeligStønadskontoDTOToTilgjengeligStønadskonto = (\n    stønadskontoerDTO: TilgjengeligeStønadskontoerDTO,\n): TilgjengeligStønadskonto[] => {\n    let tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[] = [];\n\n    Object.keys(stønadskontoerDTO.kontoer)\n        .filter((konto: string) => konto !== StønadskontoType.Flerbarnsdager)\n        .forEach((konto) => {\n            tilgjengeligeStønadskontoer.push({\n                konto: konto as StønadskontoType,\n                dager: stønadskontoerDTO.kontoer[konto],\n            });\n        });\n\n    const generellMinsterett = stønadskontoerDTO.minsteretter.generellMinsterett;\n\n    if (generellMinsterett > 0) {\n        tilgjengeligeStønadskontoer = opprettAktivitetsFriKonto(tilgjengeligeStønadskontoer, generellMinsterett);\n    }\n    return tilgjengeligeStønadskontoer;\n};\n\nexport const getValgtStønadskontoFor80Og100Prosent = (\n    kontoer80: TilgjengeligeStønadskontoerDTO,\n    kontoer100: TilgjengeligeStønadskontoerDTO,\n) => {\n    const åttiProsent = mapTilgjengeligStønadskontoDTOToTilgjengeligStønadskonto(kontoer80);\n    const hundreProsent = mapTilgjengeligStønadskontoDTOToTilgjengeligStønadskonto(kontoer100);\n    return {\n        [Dekningsgrad.ÅTTI_PROSENT]: åttiProsent,\n        [Dekningsgrad.HUNDRE_PROSENT]: hundreProsent,\n    };\n};\n","import {\n    ISOStringToDate,\n    andreAugust2022ReglerGjelder,\n    getSisteUttaksdag6UkerEtterFødsel,\n    hasValue,\n} from '@navikt/fp-common';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport dayjs from 'dayjs';\nimport {\n    FarMedmorFødselBeggeHarRettFormData,\n    FarMedmorFødselBeggeHarRettFormField,\n} from './farMedmorFødselBeggeHarRettFormConfig';\n\nexport interface FarMedmorFødselBeggeHarRettFormPayload extends FarMedmorFødselBeggeHarRettFormData {\n    familiehendelsesdato: Date;\n}\nconst includeFellesperiodeSpørsmål = (farMedmorsFørsteDag: string, familiehendelsesdato: Date) => {\n    return (\n        hasValue(farMedmorsFørsteDag) &&\n        (!andreAugust2022ReglerGjelder ||\n            dayjs(ISOStringToDate(farMedmorsFørsteDag)).isAfter(\n                getSisteUttaksdag6UkerEtterFødsel(familiehendelsesdato),\n                'day',\n            ))\n    );\n};\nconst FarMedmorFødselBeggeHarRettFormConfig: QuestionConfig<\n    FarMedmorFødselBeggeHarRettFormPayload,\n    FarMedmorFødselBeggeHarRettFormField\n> = {\n    [FarMedmorFødselBeggeHarRettFormField.dekningsgrad]: {\n        isIncluded: () => true,\n        isAnswered: ({ dekningsgrad }) => hasValue(dekningsgrad),\n    },\n    [FarMedmorFødselBeggeHarRettFormField.morsSisteDag]: {\n        isIncluded: ({ familiehendelsesdato }) => !andreAugust2022ReglerGjelder(familiehendelsesdato),\n        isAnswered: ({ morsSisteDag, familiehendelsesdato }) =>\n            andreAugust2022ReglerGjelder(familiehendelsesdato) || hasValue(morsSisteDag),\n        visibilityFilter: ({ dekningsgrad }) => hasValue(dekningsgrad),\n    },\n    [FarMedmorFødselBeggeHarRettFormField.farMedmorsFørsteDag]: {\n        isIncluded: ({ morsSisteDag, familiehendelsesdato }) =>\n            andreAugust2022ReglerGjelder(familiehendelsesdato) || hasValue(morsSisteDag),\n        isAnswered: ({ farMedmorsFørsteDag }) => hasValue(farMedmorsFørsteDag),\n    },\n    [FarMedmorFødselBeggeHarRettFormField.antallDagerFellesperiode]: {\n        isIncluded: ({ farMedmorsFørsteDag, familiehendelsesdato }) =>\n            includeFellesperiodeSpørsmål(farMedmorsFørsteDag, familiehendelsesdato),\n        isAnswered: () => true,\n    },\n    [FarMedmorFødselBeggeHarRettFormField.antallUkerFellesperiode]: {\n        isIncluded: ({ farMedmorsFørsteDag, familiehendelsesdato }) =>\n            includeFellesperiodeSpørsmål(farMedmorsFørsteDag, familiehendelsesdato),\n\n        isAnswered: () => true,\n    },\n};\n\nconst farMedmorFødselBeggeHarRettQuestionsConfig = Questions<\n    FarMedmorFødselBeggeHarRettFormPayload,\n    FarMedmorFødselBeggeHarRettFormField\n>(FarMedmorFødselBeggeHarRettFormConfig);\n\nexport default farMedmorFødselBeggeHarRettQuestionsConfig;\n","import { ISOStringToDate, intlUtils, uttaksplanDatoavgrensninger } from '@navikt/fp-common';\nimport { TypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\ninterface Props {\n    FormComponents: TypedFormComponents<any, any, string>;\n    fieldName: string;\n    navnMor: string;\n    familiehendelsesdato: string;\n}\n\nconst MorsSisteDagSpørsmål: FunctionComponent<Props> = ({\n    FormComponents,\n    fieldName,\n    familiehendelsesdato,\n    navnMor,\n}) => {\n    const intl = useIntl();\n\n    const maxDate = ISOStringToDate(uttaksplanDatoavgrensninger.morsSisteUttaksdag(familiehendelsesdato).maxDate);\n    const minDate = ISOStringToDate(uttaksplanDatoavgrensninger.morsSisteUttaksdag(familiehendelsesdato).minDate);\n\n    return (\n        <FormComponents.DatePicker\n            name={fieldName}\n            label={intlUtils(intl, 'uttaksplaninfo.morSinSisteUttaksdag.label', { navnMor })}\n            maxDate={maxDate}\n            minDate={minDate}\n            showYearSelector={true}\n            disableWeekend={true}\n            placeholder={'dd.mm.åååå'}\n        />\n    );\n};\n\nexport default MorsSisteDagSpørsmål;\n","import { ISOStringToDate, Uttaksdagen, formatDateExtended, intlUtils } from '@navikt/fp-common';\nimport dayjs from 'dayjs';\nimport { IntlShape } from 'react-intl';\nimport { isISODateString } from '@navikt/ds-datepicker';\n\nexport const validateStartdatoFarMedmor =\n    (intl: IntlShape, minDato: Date, maxDato: Date) => (permisjonStartdato: string) => {\n        if (!isISODateString(permisjonStartdato)) {\n            return intlUtils(intl, 'valideringsfeil.uttaksplaninfo.startdatoPermisjon.gyldigDato');\n        }\n        if (!Uttaksdagen(ISOStringToDate(permisjonStartdato)!).erUttaksdag()) {\n            return intlUtils(intl, 'valideringsfeil.uttaksplaninfo.startdatoHelg');\n        }\n        if (dayjs(permisjonStartdato).isBefore(minDato, 'd') || dayjs(permisjonStartdato).isAfter(maxDato, 'd')) {\n            return intlUtils(intl, 'valideringsfeil.dateOutsideRange.fom', {\n                fom: formatDateExtended(minDato),\n                tom: formatDateExtended(maxDato),\n            });\n        }\n\n        return undefined;\n    };\n","import {\n    Block,\n    ISOStringToDate,\n    Situasjon,\n    Uttaksdagen,\n    andreAugust2022ReglerGjelder,\n    formatDate,\n    intlUtils,\n    uttaksplanDatoavgrensninger,\n} from '@navikt/fp-common';\nimport LenkeKnapp from 'app/components/lenke-knapp/LenkeKnapp';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { validateStartdatoFarMedmor } from '../far-medmor-fødsel-og-mor-har-ikke-rett/validation/farMedmorFødselOgMorHarIkkeRettValidering';\nimport { TypedFormComponents, dateToISOString } from '@navikt/sif-common-formik-ds/lib';\n\ninterface Props {\n    FormComponents: TypedFormComponents<any, any, string>;\n    fieldName: string;\n    familiehendelsesdato: Date;\n    setFieldValue: (field: string, value: any, shouldValidate?: boolean | undefined) => void;\n    morsSisteDag: Date | undefined;\n    navnMor: string;\n    termindato: Date | undefined;\n    situasjon: Situasjon;\n    morHarRettTilForeldrepengerIEØS: boolean;\n}\n\nconst FarMedmorsFørsteDag: FunctionComponent<Props> = ({\n    FormComponents,\n    fieldName,\n    familiehendelsesdato,\n    morsSisteDag,\n    setFieldValue,\n    navnMor,\n    termindato,\n    situasjon,\n    morHarRettTilForeldrepengerIEØS,\n}) => {\n    const intl = useIntl();\n    const maxDate = ISOStringToDate(\n        uttaksplanDatoavgrensninger.startdatoPermisjonFarMedmor(familiehendelsesdato, termindato, situasjon).maxDate,\n    );\n    const minDate = ISOStringToDate(\n        uttaksplanDatoavgrensninger.startdatoPermisjonFarMedmor(familiehendelsesdato, termindato, situasjon).minDate,\n    );\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <FormComponents.DatePicker\n                    name={fieldName}\n                    label={intlUtils(intl, 'uttaksplaninfo.farSinFørsteUttaksdagSpørsmål.label')}\n                    maxDate={maxDate}\n                    minDate={minDate}\n                    showYearSelector={true}\n                    disableWeekend={true}\n                    placeholder={'dd.mm.åååå'}\n                    validate={validateStartdatoFarMedmor(intl, minDate!, maxDate!)}\n                />\n            </Block>\n            {!andreAugust2022ReglerGjelder(familiehendelsesdato) && !morHarRettTilForeldrepengerIEØS && (\n                <LenkeKnapp\n                    text={\n                        <FormattedMessage\n                            id=\"uttaksplaninfo.farSinFørsteUttaksdagSpørsmål.førsteUttaksdagEtterAnnenPart\"\n                            values={{\n                                navn: navnMor,\n                                dato: formatDate(Uttaksdagen(morsSisteDag!).neste()),\n                            }}\n                        />\n                    }\n                    onClick={() => {\n                        const farSinFørsteUttaksdag: string | undefined = morsSisteDag\n                            ? dateToISOString(Uttaksdagen(morsSisteDag).neste())\n                            : undefined;\n\n                        setFieldValue(fieldName, farSinFørsteUttaksdag);\n                    }}\n                />\n            )}\n        </>\n    );\n};\n\nexport default FarMedmorsFørsteDag;\n","import { Component } from 'react';\n\ninterface RangeIconProps {\n    type: 'plus' | 'minus';\n}\n\nexport default class RangeIcon extends Component<RangeIconProps> {\n    renderPlusIcon() {\n        return (\n            <path\n                d=\"M18.2616283,12.5217391 L12.5222595,12.5217391 L12.5222595,18.2608696 C12.5222595,18.5488696 12.2874672,18.7826087 12.0004988,18.7826087 C11.7124868,18.7826087 11.478738,18.5488696 11.478738,18.2608696 L11.478738,12.5217391 L5.73936926,12.5217391 C5.4513573,12.5206957 5.21656494,12.288 5.21760846,12 C5.21760846,11.7130435 5.4513573,11.4782609 5.73936926,11.4782609 L11.478738,11.4782609 L11.478738,5.73913043 C11.478738,5.45113043 11.7124868,5.2173913 12.0004988,5.2173913 C12.2874672,5.2173913 12.5222595,5.45113043 12.5222595,5.73913043 L12.5222595,11.4782609 L18.2616283,11.4782609 C18.5485967,11.4782609 18.7844326,11.712 18.783389,12 C18.783389,12.288 18.5496402,12.5217391 18.2616283,12.5217391 Z\"\n                id=\"Inner\"\n                fill=\"#FFFFFF\"\n            />\n        );\n    }\n\n    renderMinusIcon() {\n        return (\n            <path\n                d=\"M18.2616283,12.5217391 L5.73936926,12.5217391 C5.4513573,12.5206957 5.21656494,12.288 5.21760846,12 C5.21760846,11.7130435 5.4513573,11.4782609 5.73936926,11.4782609 L18.2616283,11.4782609 C18.5485967,11.4782609 18.7844326,11.712 18.783389,12 C18.783389,12.288 18.5496402,12.5217391 18.2616283,12.5217391 Z\"\n                id=\"Inner\"\n                fill=\"#FFFFFF\"\n            />\n        );\n    }\n\n    render() {\n        const { type } = this.props;\n        const icon = type === 'minus' ? this.renderMinusIcon() : this.renderPlusIcon();\n\n        return (\n            <svg\n                focusable=\"false\"\n                role=\"img\"\n                aria-hidden=\"true\"\n                width=\"24px\"\n                height=\"24px\"\n                viewBox=\"0 0 24 24\"\n                className=\"rangeIcon\"\n            >\n                <g id=\"Icons/subtract/default\" stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\n                    {icon}\n                </g>\n            </svg>\n        );\n    }\n}\n","// Ensure touches occur rapidly\nconst delay = 500;\n// Sequential touches must be in close vicinity\nconst minZoomTouchDelta = 10;\n\n// Track state of the last touch\nlet lastTapAt = 0;\nlet lastClientX = 0;\nlet lastClientY = 0;\n\nexport default function preventDoubleTapZoom(event: React.TouchEvent<any>) {\n    // Exit early if this involves more than one finger (e.g. pinch to zoom)\n    if (event.touches.length > 1) {\n        return;\n    }\n\n    const tapAt = new Date().getTime();\n    const timeDiff = tapAt - lastTapAt;\n    const { clientX, clientY } = event.touches[0];\n    const xDiff = Math.abs(lastClientX - clientX);\n    const yDiff = Math.abs(lastClientY - clientY);\n    if (xDiff < minZoomTouchDelta && yDiff < minZoomTouchDelta && event.touches.length === 1 && timeDiff < delay) {\n        event.preventDefault();\n        // Trigger a fake click for the tap we just prevented\n        (event.target as any).click();\n    }\n    lastClientX = clientX;\n    lastClientY = clientY;\n    lastTapAt = tapAt;\n}\n","import { createElement } from 'react';\n\n/**\n *  Skjuler tekst slik at den ikke er synlig på skjerm, men leses av skjermleser\n */\nexport interface AriaTextProps {\n    id?: string;\n    children?: React.ReactNode;\n    tag?: string;\n}\n\nconst AriaText: React.FunctionComponent<AriaTextProps> = ({ id, children, tag }) => {\n    const tagName = tag || 'span';\n    return createElement(tagName, { id, className: 'sr-only' }, children);\n};\nexport default AriaText;\n","import classnames from 'classnames';\nimport preventDoubleTapZoom from '../preventDoubleTapZoom';\nimport AriaText from '../AriaText';\nimport './sirkelknapp.less';\nimport { guid } from '@navikt/fp-common';\n\nexport type Stil = 'hvit' | 'bla' | 'info';\n\nexport interface SirkelknappProps {\n    /** Tekst som blir lest opp og satt som tittel på knappen */\n    ariaLabel: string;\n    /** Ikon som brukes inne i knappen */\n    ikon: React.ReactNode;\n    /** Funksjon som kalles knappen klikkes på */\n    onClick: () => void;\n    /** Om knappen er disabled eller ikke. Default false. */\n    disabled?: boolean;\n    /** Om knappen skal ha tilstanded pressed/valgt. Default false. */\n    toggle?: {\n        pressed: boolean;\n    };\n    /** Layout varianter */\n    stil?: Stil;\n    /** Størrelse - default normal */\n    size?: 'normal' | 'stor';\n    posisjoneringFraHøyre?: number;\n}\n\nconst Sirkelknapp: React.FunctionComponent<SirkelknappProps> = ({\n    onClick,\n    ariaLabel,\n    ikon,\n    toggle,\n    disabled,\n    stil = 'info',\n    size = 'normal',\n    posisjoneringFraHøyre,\n}) => {\n    const labelId = guid();\n    return (\n        <button\n            style={{ left: posisjoneringFraHøyre }}\n            type=\"button\"\n            onClick={() => onClick()}\n            onTouchStart={preventDoubleTapZoom}\n            aria-labelledby={labelId}\n            className={classnames(`sirkelknapp`, `sirkelknapp--${stil}`, `sirkelknapp--${size}`, {\n                'sirkelknapp--pressed': toggle && toggle.pressed,\n                'sirkelknapp--disabled': disabled,\n            })}\n            disabled={disabled}\n            aria-pressed={toggle ? toggle.pressed : undefined}\n        >\n            <span className=\"sirkelknapp__ikon\" role=\"presentation\">\n                {ikon}\n            </span>\n            <AriaText id={labelId}>{ariaLabel}</AriaText>\n        </button>\n    );\n};\n\nexport default Sirkelknapp;\n","import { bemUtils, Block, intlUtils } from '@navikt/fp-common';\nimport { Label, ReadMore } from '@navikt/ds-react';\nimport { getNumberFromNumberInputValue, TypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport RangeIcon from '../../fordelingFellesperiode/range-input/RangeIcon';\nimport Sirkelknapp from '../../fordelingFellesperiode/range-input/sirkelknapp/Sirkelknapp';\n\nimport './antallUkerOgDagerFellesperiodeFarMedmorSpørsmål.less';\n\ninterface Props {\n    FormComponents: TypedFormComponents<any, any, string>;\n    ukerFieldName: string;\n    dagerFieldName: string;\n    antallUker: string;\n    antallDager: string;\n    setFieldValue: (field: string, value: any, shouldValidate?: boolean | undefined) => void;\n    ukerMedFellesperiode: number;\n}\n\nconst getNumberFromStringInput = (input: string): number | undefined => {\n    return input === undefined || input.trim().length === 0 ? 0 : getNumberFromNumberInputValue(input);\n};\n\nconst leggTil = (currentAntall: string, max: number): string => {\n    const number = getNumberFromStringInput(currentAntall);\n\n    if (number === undefined || Math.round(number) !== number) {\n        return currentAntall;\n    }\n\n    if (number + 1 > max) {\n        return max.toString();\n    }\n\n    return (number + 1).toString();\n};\n\nconst trekkFra = (currentAntall: string, min: number): string => {\n    const number = getNumberFromStringInput(currentAntall);\n\n    if (number === undefined || number === 0 || Math.round(number) !== number) {\n        return currentAntall;\n    }\n\n    if (number - 1 < min) {\n        return min.toString();\n    }\n\n    return (number - 1).toString();\n};\n\nconst AntallUkerOgDagerFellesperiodeFarMedmorSpørsmål: FunctionComponent<Props> = ({\n    FormComponents,\n    ukerFieldName,\n    dagerFieldName,\n    antallDager,\n    antallUker,\n    setFieldValue,\n    ukerMedFellesperiode,\n}) => {\n    const bem = bemUtils('antallUkerOgDagerFellesperiodeFarMedmorSpørsmål');\n    const intl = useIntl();\n\n    return (\n        <>\n            <legend>\n                <Label>\n                    <FormattedMessage id=\"uttaksplaninfo.fellesperiode.tittel\" />\n                </Label>\n            </legend>\n            <div className={bem.block}>\n                <div className={bem.element('stepper')}>\n                    <div className={bem.element('icon')}>\n                        <Sirkelknapp\n                            stil=\"hvit\"\n                            ariaLabel=\"Mink antall uker med en uke\"\n                            ikon={<RangeIcon type=\"minus\" />}\n                            disabled={\n                                antallUker === undefined ||\n                                parseInt(antallUker, 10) === 0 ||\n                                antallUker.trim().length === 0\n                                    ? true\n                                    : false\n                            }\n                            onClick={() => setFieldValue(ukerFieldName, trekkFra(antallUker, 0))}\n                        />\n                    </div>\n                    <FormComponents.NumberInput\n                        className={bem.element('uker')}\n                        integerValue={true}\n                        name={ukerFieldName}\n                        label={intlUtils(intl, 'uker.fellesperiode')}\n                        width=\"xs\"\n                        step=\"1\"\n                    />\n                    <div className={bem.element('icon')}>\n                        <Sirkelknapp\n                            stil=\"hvit\"\n                            ariaLabel=\"Øk antall uker med en uke\"\n                            ikon={<RangeIcon type=\"plus\" />}\n                            disabled={parseInt(antallUker, 10) >= ukerMedFellesperiode ? true : false}\n                            onClick={() => setFieldValue(ukerFieldName, leggTil(antallUker, ukerMedFellesperiode))}\n                        />\n                    </div>\n                </div>\n                <div className={bem.element('stepper')}>\n                    <div className={bem.element('icon')}>\n                        <Sirkelknapp\n                            stil=\"hvit\"\n                            ariaLabel=\"Mink antall dager med en dag\"\n                            ikon={<RangeIcon type=\"minus\" />}\n                            onClick={() => setFieldValue(dagerFieldName, trekkFra(antallDager, 0))}\n                            disabled={\n                                antallDager === undefined ||\n                                parseInt(antallDager, 10) === 0 ||\n                                antallDager.trim().length === 0\n                                    ? true\n                                    : false\n                            }\n                        />\n                    </div>\n                    <FormComponents.NumberInput\n                        className={bem.element('uker')}\n                        integerValue={true}\n                        name={dagerFieldName}\n                        label={intlUtils(intl, 'dager.fellesperiode')}\n                        width=\"xs\"\n                        step=\"1\"\n                    />\n                    <div className={bem.element('icon')}>\n                        <Sirkelknapp\n                            stil=\"hvit\"\n                            ariaLabel=\"Øk antall dager med en dag\"\n                            ikon={<RangeIcon type=\"plus\" />}\n                            onClick={() => setFieldValue(dagerFieldName, leggTil(antallDager, 4))}\n                            disabled={parseInt(antallDager, 10) === 4 ? true : false}\n                        />\n                    </div>\n                </div>\n            </div>\n            <Block margin=\"m\">\n                <ReadMore header={intlUtils(intl, 'uttaksplaninfo.fellesperiode.apneLabel')}>\n                    <FormattedMessage id=\"uttaksplaninfo.fellesperiode.lesMerInfo\" />\n                </ReadMore>\n            </Block>\n        </>\n    );\n};\n\nexport default AntallUkerOgDagerFellesperiodeFarMedmorSpørsmål;\n","import { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Block, Dekningsgrad, TilgjengeligStønadskonto, intlUtils } from '@navikt/fp-common';\nimport { getAntallUker } from 'app/steps/uttaksplan-info/utils/stønadskontoer';\nimport { TypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\nimport { ReadMore } from '@navikt/ds-react';\n\ninterface Props {\n    FormKomponent: TypedFormComponents<any, any, any>;\n    dekningsgradFeltNavn: string;\n    tilgjengeligeStønadskontoer: {\n        [Dekningsgrad.ÅTTI_PROSENT]: TilgjengeligStønadskonto[];\n        [Dekningsgrad.HUNDRE_PROSENT]: TilgjengeligStønadskonto[];\n    };\n    erDeltUttak: boolean;\n}\n\nconst DekningsgradSpørsmål: FunctionComponent<Props> = ({\n    FormKomponent,\n    dekningsgradFeltNavn,\n    tilgjengeligeStønadskontoer,\n    erDeltUttak,\n}) => {\n    const intl = useIntl();\n    const spørsmålTekst = erDeltUttak\n        ? 'uttaksplaninfo.dekningsgrad.label.deltUttak'\n        : 'uttaksplaninfo.dekningsgrad.label.ikkeDeltUttak';\n    return (\n        <Block padBottom=\"l\">\n            <FormKomponent.RadioGroup\n                name={dekningsgradFeltNavn}\n                radios={[\n                    {\n                        label: intlUtils(intl, 'uttaksplaninfo.49Uker', {\n                            antallUker: getAntallUker(tilgjengeligeStønadskontoer[Dekningsgrad.HUNDRE_PROSENT]),\n                        }),\n                        value: Dekningsgrad.HUNDRE_PROSENT,\n                    },\n                    {\n                        label: intlUtils(intl, 'uttaksplaninfo.59Uker', {\n                            antallUker: getAntallUker(tilgjengeligeStønadskontoer[Dekningsgrad.ÅTTI_PROSENT]),\n                        }),\n                        value: Dekningsgrad.ÅTTI_PROSENT,\n                    },\n                ]}\n                legend={intlUtils(intl, spørsmålTekst)}\n            />\n            <ReadMore header=\"Les mer om lengden på foreldrepengeperioden\">\n                <FormattedMessage id=\"uttaksplaninfo.veileder.dekningsgrad\" />\n            </ReadMore>\n        </Block>\n    );\n};\n\nexport default DekningsgradSpørsmål;\n","import { Dekningsgrad } from '@navikt/fp-common';\n\nexport const getDekningsgradFromString = (dekningsgrad: string | undefined) => {\n    if (!dekningsgrad) {\n        return Dekningsgrad.HUNDRE_PROSENT;\n    }\n\n    return dekningsgrad === Dekningsgrad.HUNDRE_PROSENT ? Dekningsgrad.HUNDRE_PROSENT : Dekningsgrad.ÅTTI_PROSENT;\n};\n","import {\n    Forelder,\n    Periode,\n    Periodetype,\n    Situasjon,\n    StønadskontoType,\n    Tidsperioden,\n    TilgjengeligStønadskonto,\n    UtsettelseÅrsakType,\n    Uttaksdagen,\n    andreAugust2022ReglerGjelder,\n    dateIsSameOrAfter,\n    farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato,\n    getLengdePåForeslåttWLBUttakFarMedmor,\n    getTidsperiode,\n    guid,\n    isUttaksperiode,\n    sorterPerioder,\n    starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel,\n    tidperiodeOverlapperDato,\n} from '@navikt/fp-common';\nimport {\n    splittPeriodePåDato,\n    splittUttaksperiodePåFamiliehendelsesdato,\n} from '@navikt/uttaksplan/src/builder/leggTilPeriode';\nimport { skalFarUtsetteEtterMorSinSisteUttaksdag } from '../dateUtils';\n\nconst deltUttakAdopsjonSøktFørst = (\n    famDato: Date,\n    erFarEllerMedmor: boolean,\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    startdatoPermisjon: Date | undefined,\n    fellesperiodeukerMor: number | undefined,\n    harAnnenForelderSøktFP: boolean | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n): Periode[] => {\n    if (harAnnenForelderSøktFP !== true) {\n        const førsteUttaksdag = Uttaksdagen(startdatoPermisjon || famDato).denneEllerNeste();\n        const perioder: Periode[] = [];\n        const kontoType = erFarEllerMedmor ? StønadskontoType.Fedrekvote : StønadskontoType.Mødrekvote;\n        const forelder = erFarEllerMedmor ? Forelder.farMedmor : Forelder.mor;\n        const konto: TilgjengeligStønadskonto | undefined = tilgjengeligeStønadskontoer.find((k) =>\n            erFarEllerMedmor ? k.konto === StønadskontoType.Fedrekvote : k.konto === StønadskontoType.Mødrekvote,\n        );\n        let currentTomDate: Date = førsteUttaksdag;\n\n        if (konto !== undefined) {\n            const periodeMødrekvote: Periode = {\n                id: guid(),\n                type: Periodetype.Uttak,\n                forelder,\n                konto: kontoType,\n                tidsperiode: getTidsperiode(currentTomDate, konto.dager),\n                ønskerSamtidigUttak: false,\n                gradert: false,\n            };\n\n            currentTomDate = Uttaksdagen(periodeMødrekvote.tidsperiode.tom).neste();\n\n            if (\n                førsteUttaksdagNesteBarnsSak !== undefined &&\n                tidperiodeOverlapperDato(periodeMødrekvote.tidsperiode, førsteUttaksdagNesteBarnsSak)\n            ) {\n                const splittedePerioder = splittPeriodePåDato(periodeMødrekvote, førsteUttaksdagNesteBarnsSak);\n                splittedePerioder.forEach((periode) => perioder.push(periode));\n            } else {\n                perioder.push(periodeMødrekvote);\n            }\n        }\n\n        if (fellesperiodeukerMor !== undefined && fellesperiodeukerMor > 0) {\n            const periodeFellesperiode: Periode = {\n                id: guid(),\n                type: Periodetype.Uttak,\n                forelder,\n                konto: StønadskontoType.Fellesperiode,\n                tidsperiode: getTidsperiode(currentTomDate, fellesperiodeukerMor * 5),\n                ønskerSamtidigUttak: false,\n                gradert: false,\n            };\n            if (\n                førsteUttaksdagNesteBarnsSak !== undefined &&\n                tidperiodeOverlapperDato(periodeFellesperiode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n            ) {\n                const splittedePerioder = splittPeriodePåDato(periodeFellesperiode, førsteUttaksdagNesteBarnsSak);\n                splittedePerioder.forEach((periode) => perioder.push(periode));\n            } else {\n                perioder.push(periodeFellesperiode);\n            }\n        }\n\n        return perioder.sort(sorterPerioder);\n    } else {\n        return [];\n    }\n};\n\nconst deltUttakAdopsjonSøktSist = (\n    familiehendelsesdato: Date,\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    erFarEllerMedmor: boolean,\n    antallDagerFellesperiodeFarMedmor: number | undefined,\n    antallUkerFellesperiodeFarMedmor: number | undefined,\n    morSinSisteUttaksdag: Date,\n    farSinFørsteUttaksdag: Date,\n    begrunnelseForUtsettelse: UtsettelseÅrsakType | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n) => {\n    if (erFarEllerMedmor) {\n        // Oppfører seg identisk som fødselsscenario\n        return deltUttakFødselFarMedmor(\n            tilgjengeligeStønadskontoer,\n            antallDagerFellesperiodeFarMedmor,\n            antallUkerFellesperiodeFarMedmor,\n            morSinSisteUttaksdag,\n            farSinFørsteUttaksdag,\n            begrunnelseForUtsettelse,\n            familiehendelsesdato,\n            undefined,\n            undefined,\n            førsteUttaksdagNesteBarnsSak,\n            'adopsjon',\n        );\n    } else {\n        const forslag = deltUttakFødselFarMedmor(\n            tilgjengeligeStønadskontoer,\n            antallDagerFellesperiodeFarMedmor,\n            antallUkerFellesperiodeFarMedmor,\n            morSinSisteUttaksdag,\n            farSinFørsteUttaksdag,\n            begrunnelseForUtsettelse,\n            familiehendelsesdato,\n            undefined,\n            undefined,\n            førsteUttaksdagNesteBarnsSak,\n            'adopsjon',\n        );\n\n        const forslagGjortOmTilMor = forslag.map((periode) => {\n            if (\n                isUttaksperiode(periode) &&\n                (periode.konto === StønadskontoType.Fedrekvote || periode.konto === StønadskontoType.Fellesperiode)\n            ) {\n                if (periode.konto === StønadskontoType.Fedrekvote) {\n                    return {\n                        ...periode,\n                        konto: StønadskontoType.Mødrekvote,\n                        forelder: Forelder.mor,\n                    };\n                } else {\n                    return {\n                        ...periode,\n                        forelder: Forelder.mor,\n                    };\n                }\n            }\n\n            return periode;\n        });\n\n        return forslagGjortOmTilMor;\n    }\n};\n\nconst deltUttakAdopsjon = (\n    famDato: Date,\n    erFarEllerMedmor: boolean,\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    startdatoPermisjon: Date | undefined,\n    fellesperiodeukerMor: number | undefined,\n    harAnnenForelderSøktFP: boolean | undefined,\n    antallDagerFellesperiodeFarMedmor: number | undefined,\n    antallUkerFellesperiodeFarMedmor: number | undefined,\n    morSinSisteUttaksdag: Date | undefined,\n    farSinFørsteUttaksdag: Date | undefined,\n    begrunnelseForUtsettelse: UtsettelseÅrsakType | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n) => {\n    if (!harAnnenForelderSøktFP) {\n        return deltUttakAdopsjonSøktFørst(\n            famDato,\n            erFarEllerMedmor,\n            tilgjengeligeStønadskontoer,\n            startdatoPermisjon,\n            fellesperiodeukerMor,\n            harAnnenForelderSøktFP,\n            førsteUttaksdagNesteBarnsSak,\n        );\n    } else {\n        return deltUttakAdopsjonSøktSist(\n            famDato,\n            tilgjengeligeStønadskontoer,\n            erFarEllerMedmor,\n            antallDagerFellesperiodeFarMedmor,\n            antallUkerFellesperiodeFarMedmor,\n            morSinSisteUttaksdag!,\n            farSinFørsteUttaksdag!,\n            begrunnelseForUtsettelse,\n            førsteUttaksdagNesteBarnsSak,\n        );\n    }\n};\n\nconst deltUttakFødselMor = (\n    famDato: Date,\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    ønsketStartdatoPermisjon: Date | undefined,\n    fellesperiodeukerMor: number | undefined,\n): Periode[] => {\n    const førsteUttaksdag = Uttaksdagen(famDato).denneEllerNeste();\n    const perioder: Periode[] = [];\n    const skalHaForeldrePengerFørFødsel = ønsketStartdatoPermisjon ? true : false;\n    const fpFørFødselKonto: TilgjengeligStønadskonto | undefined = tilgjengeligeStønadskontoer.find(\n        (konto) => konto.konto === StønadskontoType.ForeldrepengerFørFødsel,\n    );\n    const mkKonto: TilgjengeligStønadskonto | undefined = tilgjengeligeStønadskontoer.find(\n        (konto) => konto.konto === StønadskontoType.Mødrekvote,\n    );\n    let currentTomDate: Date = førsteUttaksdag;\n    if (fpFørFødselKonto !== undefined && skalHaForeldrePengerFørFødsel && ønsketStartdatoPermisjon) {\n        const startdatoPermisjon = Uttaksdagen(ønsketStartdatoPermisjon).denneEllerNeste();\n        const dagerFørFødsel = Uttaksdagen(startdatoPermisjon).getUttaksdagerFremTilDato(currentTomDate);\n        const merEnnTreUkerPermisjonFørFødsel = dagerFørFødsel > 15;\n        const startdatoFpFørFødsel = Uttaksdagen(førsteUttaksdag).trekkFra(\n            merEnnTreUkerPermisjonFørFødsel ? 15 : dagerFørFødsel,\n        );\n\n        if (merEnnTreUkerPermisjonFørFødsel) {\n            const ekstraPeriodeFørFødsel: Periode = {\n                id: guid(),\n                type: Periodetype.Uttak,\n                forelder: Forelder.mor,\n                konto: StønadskontoType.Fellesperiode,\n                tidsperiode: getTidsperiode(startdatoPermisjon, dagerFørFødsel - 15),\n                vedlegg: [],\n            };\n\n            perioder.push(ekstraPeriodeFørFødsel);\n        }\n\n        const periodeFørFødsel: Periode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.mor,\n            konto: StønadskontoType.ForeldrepengerFørFødsel,\n            tidsperiode: {\n                fom: startdatoFpFørFødsel,\n                tom: Uttaksdagen(currentTomDate).forrige(),\n            },\n        };\n\n        perioder.push(periodeFørFødsel);\n    } else {\n        const periodeFørFødsel: Periode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.mor,\n            konto: StønadskontoType.ForeldrepengerFørFødsel,\n            skalIkkeHaUttakFørTermin: true,\n            tidsperiode: {} as any,\n            vedlegg: [],\n        };\n        perioder.push(periodeFørFødsel);\n    }\n\n    if (mkKonto !== undefined) {\n        const periodeMødrekvote: Periode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.mor,\n            konto: StønadskontoType.Mødrekvote,\n            tidsperiode: getTidsperiode(currentTomDate, mkKonto.dager),\n            ønskerSamtidigUttak: false,\n            gradert: false,\n        };\n\n        currentTomDate = Uttaksdagen(periodeMødrekvote.tidsperiode.tom).neste();\n\n        perioder.push(periodeMødrekvote);\n    }\n\n    if (fellesperiodeukerMor !== undefined && fellesperiodeukerMor > 0) {\n        const ekstraPermisjonFørFødsel = perioder.find(\n            (p) => isUttaksperiode(p) && p.konto === StønadskontoType.Fellesperiode,\n        );\n\n        let trekkEkstraPermisjonDager = 0;\n        if (ekstraPermisjonFørFødsel) {\n            trekkEkstraPermisjonDager = Tidsperioden(ekstraPermisjonFørFødsel.tidsperiode).getAntallUttaksdager();\n        }\n\n        if (fellesperiodeukerMor * 5 - trekkEkstraPermisjonDager > 0) {\n            const periodeFellesperiodeMor: Periode = {\n                id: guid(),\n                type: Periodetype.Uttak,\n                forelder: Forelder.mor,\n                konto: StønadskontoType.Fellesperiode,\n                tidsperiode: getTidsperiode(currentTomDate, fellesperiodeukerMor * 5 - trekkEkstraPermisjonDager),\n                ønskerSamtidigUttak: false,\n                gradert: false,\n            };\n\n            perioder.push(periodeFellesperiodeMor);\n        }\n    }\n\n    return perioder.sort(sorterPerioder);\n};\n\nconst deltUttakFødselFarMedmor = (\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    antallDagerFellesperiodeFarMedmor: number | undefined,\n    antallUkerFellesperiodeFarMedmor: number | undefined,\n    morSinSisteUttaksdag: Date,\n    farSinFørsteUttaksdag: Date,\n    begrunnelseForUtsettelse: UtsettelseÅrsakType | undefined,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    morHarRettPåForeldrepengerIEØS: boolean | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n    situasjon = 'fødsel',\n): Periode[] => {\n    if (\n        !andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n        dateIsSameOrAfter(morSinSisteUttaksdag, farSinFørsteUttaksdag) &&\n        !morHarRettPåForeldrepengerIEØS\n    ) {\n        return [];\n    }\n\n    const perioder: Periode[] = [];\n    const startDatoUttak = Uttaksdagen(farSinFørsteUttaksdag).denneEllerNeste();\n    let sisteUttaksDag = Uttaksdagen(farSinFørsteUttaksdag).denneEllerNeste();\n    const fedrekvoteKonto: TilgjengeligStønadskonto | undefined = tilgjengeligeStønadskontoer.find(\n        (konto) => konto.konto === StønadskontoType.Fedrekvote,\n    );\n    const fellesKonto: TilgjengeligStønadskonto | undefined = tilgjengeligeStønadskontoer.find(\n        (konto) => konto.konto === StønadskontoType.Fellesperiode,\n    );\n\n    const morHarRett = true;\n\n    if (\n        begrunnelseForUtsettelse &&\n        morSinSisteUttaksdag !== undefined &&\n        skalFarUtsetteEtterMorSinSisteUttaksdag(farSinFørsteUttaksdag, morSinSisteUttaksdag)\n    ) {\n        perioder.push({\n            id: guid(),\n            årsak: begrunnelseForUtsettelse,\n            type: Periodetype.Utsettelse,\n            forelder: Forelder.farMedmor,\n            erArbeidstaker: false, // TODO\n            tidsperiode: {\n                fom: Uttaksdagen(morSinSisteUttaksdag).neste(),\n                tom: Uttaksdagen(farSinFørsteUttaksdag).forrige(),\n            },\n        });\n    }\n\n    if (fedrekvoteKonto !== undefined) {\n        const erPeriodeWLBRundtFødsel =\n            situasjon === 'fødsel' &&\n            andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n            starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel(\n                getTidsperiode(startDatoUttak, 1),\n                familiehendelsesdato,\n                termindato,\n            );\n\n        const lengdePåForeslåttUttak = erPeriodeWLBRundtFødsel\n            ? getLengdePåForeslåttWLBUttakFarMedmor(familiehendelsesdato, startDatoUttak)\n            : fedrekvoteKonto.dager;\n\n        const fedrekvotePeriode: Periode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.farMedmor,\n            konto: StønadskontoType.Fedrekvote,\n            tidsperiode: getTidsperiode(startDatoUttak, lengdePåForeslåttUttak),\n            ønskerSamtidigUttak: erPeriodeWLBRundtFødsel,\n            samtidigUttakProsent: erPeriodeWLBRundtFødsel ? '100' : undefined,\n        };\n\n        sisteUttaksDag = Uttaksdagen(fedrekvotePeriode.tidsperiode.tom).neste();\n\n        if (\n            farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato(\n                fedrekvotePeriode,\n                familiehendelsesdato,\n                morHarRett,\n                termindato,\n            )\n        ) {\n            const fedrekvotePerioder = splittUttaksperiodePåFamiliehendelsesdato(\n                fedrekvotePeriode,\n                familiehendelsesdato,\n            );\n            fedrekvotePerioder.forEach((periode) => perioder.push(periode));\n        } else if (\n            førsteUttaksdagNesteBarnsSak !== undefined &&\n            tidperiodeOverlapperDato(fedrekvotePeriode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n        ) {\n            const fedrekvotePerioder = splittPeriodePåDato(fedrekvotePeriode, førsteUttaksdagNesteBarnsSak);\n            fedrekvotePerioder.forEach((periode) => perioder.push(periode));\n        } else {\n            perioder.push(fedrekvotePeriode);\n        }\n    }\n\n    if (fellesKonto !== undefined) {\n        let antallDagerFellesperiode = 0;\n\n        if (antallUkerFellesperiodeFarMedmor !== undefined && antallUkerFellesperiodeFarMedmor !== 0) {\n            antallDagerFellesperiode = 5 * antallUkerFellesperiodeFarMedmor;\n        }\n\n        if (antallDagerFellesperiodeFarMedmor !== undefined && antallDagerFellesperiodeFarMedmor !== 0) {\n            antallDagerFellesperiode = antallDagerFellesperiode + antallDagerFellesperiodeFarMedmor;\n        }\n\n        if (antallDagerFellesperiode > 0) {\n            const fellesPeriode: Periode = {\n                id: guid(),\n                type: Periodetype.Uttak,\n                forelder: Forelder.farMedmor,\n                konto: StønadskontoType.Fellesperiode,\n                tidsperiode: getTidsperiode(sisteUttaksDag, antallDagerFellesperiode),\n                ønskerSamtidigUttak: false,\n                gradert: false,\n            };\n\n            perioder.push(fellesPeriode);\n        }\n    }\n\n    return perioder;\n};\n\nconst deltUttakFødsel = (\n    famDato: Date,\n    erFarEllerMedmor: boolean,\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    startdatoPermisjon: Date | undefined,\n    fellesperiodeukerMor: number | undefined,\n    antallDagerFellesperiodeFarMedmor: number | undefined,\n    antallUkerFellesperiodeFarMedmor: number | undefined,\n    morSinSisteUttaksdag: Date | undefined,\n    farSinFørsteUttaksdag: Date | undefined,\n    begrunnelseForUtsettelse: UtsettelseÅrsakType | undefined,\n    annenForelderHarRettPåForeldrepengerIEØS: boolean | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n    termindato?: Date | undefined,\n) => {\n    if (!erFarEllerMedmor) {\n        return deltUttakFødselMor(famDato, tilgjengeligeStønadskontoer, startdatoPermisjon, fellesperiodeukerMor);\n    } else {\n        const tilgjengeligeStønadskontoerUtenFPP = tilgjengeligeStønadskontoer.filter(\n            (konto) => konto.konto !== StønadskontoType.ForeldrepengerFørFødsel,\n        );\n\n        return deltUttakFødselFarMedmor(\n            tilgjengeligeStønadskontoerUtenFPP,\n            antallDagerFellesperiodeFarMedmor,\n            antallUkerFellesperiodeFarMedmor,\n            morSinSisteUttaksdag!,\n            farSinFørsteUttaksdag!,\n            begrunnelseForUtsettelse,\n            famDato,\n            termindato,\n            annenForelderHarRettPåForeldrepengerIEØS,\n            førsteUttaksdagNesteBarnsSak,\n        );\n    }\n};\n\nexport interface DeltUttakParams {\n    situasjon: Situasjon;\n    famDato: Date;\n    erFarEllerMedmor: boolean;\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[];\n    startdatoPermisjon: Date | undefined;\n    fellesperiodeukerMor: number | undefined;\n    harAnnenForelderSøktFP: boolean | undefined;\n    antallDagerFellesperiodeFarMedmor: number | undefined;\n    antallUkerFellesperiodeFarMedmor: number | undefined;\n    morSinSisteUttaksdag: Date | undefined;\n    farSinFørsteUttaksdag: Date | undefined;\n    begrunnelseForUtsettelse: UtsettelseÅrsakType | undefined;\n    førsteUttaksdagNesteBarnsSak: Date | undefined;\n    annenForelderHarRettPåForeldrepengerIEØS?: boolean;\n    termindato?: Date;\n}\n\nexport const deltUttak = (params: DeltUttakParams) => {\n    if (params.situasjon === 'adopsjon') {\n        return deltUttakAdopsjon(\n            params.famDato,\n            params.erFarEllerMedmor,\n            params.tilgjengeligeStønadskontoer,\n            params.startdatoPermisjon,\n            params.fellesperiodeukerMor,\n            params.harAnnenForelderSøktFP,\n            params.antallDagerFellesperiodeFarMedmor,\n            params.antallUkerFellesperiodeFarMedmor,\n            params.morSinSisteUttaksdag,\n            params.farSinFørsteUttaksdag,\n            params.begrunnelseForUtsettelse,\n            params.førsteUttaksdagNesteBarnsSak,\n        );\n    }\n\n    if (params.situasjon === 'fødsel') {\n        return deltUttakFødsel(\n            params.famDato,\n            params.erFarEllerMedmor,\n            params.tilgjengeligeStønadskontoer,\n            params.startdatoPermisjon,\n            params.fellesperiodeukerMor,\n            params.antallDagerFellesperiodeFarMedmor,\n            params.antallUkerFellesperiodeFarMedmor,\n            params.morSinSisteUttaksdag,\n            params.farSinFørsteUttaksdag,\n            params.begrunnelseForUtsettelse,\n            params.annenForelderHarRettPåForeldrepengerIEØS,\n            params.førsteUttaksdagNesteBarnsSak,\n            params.termindato,\n        );\n    }\n\n    return [];\n};\n","import {\n    Forelder,\n    Periode,\n    Periodetype,\n    Situasjon,\n    StønadskontoType,\n    Tidsperioden,\n    TilgjengeligStønadskonto,\n    Uttaksdagen,\n    Uttaksperiode,\n    andreAugust2022ReglerGjelder,\n    farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato,\n    getTidsperiode,\n    guid,\n    isUttaksperiode,\n    sorterPerioder,\n    tidperiodeOverlapperDato,\n} from '@navikt/fp-common';\nimport {\n    splittPeriodePåDato,\n    splittUttaksperiodePåFamiliehendelsesdato,\n} from '@navikt/uttaksplan/src/builder/leggTilPeriode';\n\nconst ikkeDeltUttakAdopsjonFarMedmor = (\n    famDato: Date,\n    foreldrepengerKonto: TilgjengeligStønadskonto,\n    startdatoPermisjon: Date | undefined,\n    erMorUfør: boolean | undefined,\n    aktivitetsfriKvote: TilgjengeligStønadskonto | undefined,\n    bareFarMedmorHarRett: boolean,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n) => {\n    const førsteUttaksdag = Uttaksdagen(startdatoPermisjon || famDato).denneEllerNeste();\n    const perioder: Uttaksperiode[] = [];\n\n    if (erMorUfør !== true) {\n        let startDatoNestePeriode = førsteUttaksdag;\n        if (andreAugust2022ReglerGjelder(famDato) && !!bareFarMedmorHarRett) {\n            const aktivitetsFriPeriode: Uttaksperiode = {\n                id: guid(),\n                type: Periodetype.Uttak,\n                forelder: Forelder.farMedmor,\n                konto: StønadskontoType.AktivitetsfriKvote,\n                tidsperiode: getTidsperiode(førsteUttaksdag, aktivitetsfriKvote!.dager),\n                vedlegg: [],\n                gradert: false,\n                harIkkeAktivitetskrav: true,\n            };\n            if (\n                førsteUttaksdagNesteBarnsSak !== undefined &&\n                tidperiodeOverlapperDato(aktivitetsFriPeriode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n            ) {\n                const splittetPeriode = splittPeriodePåDato(\n                    aktivitetsFriPeriode,\n                    førsteUttaksdagNesteBarnsSak,\n                ) as Uttaksperiode[];\n                splittetPeriode.forEach((sp) => perioder.push(sp));\n            } else {\n                perioder.push(aktivitetsFriPeriode);\n            }\n            startDatoNestePeriode = Uttaksdagen(aktivitetsFriPeriode.tidsperiode.tom).neste();\n        }\n        const periode: Uttaksperiode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.farMedmor,\n            konto: foreldrepengerKonto.konto,\n            tidsperiode: getTidsperiode(startDatoNestePeriode, foreldrepengerKonto.dager),\n            vedlegg: [],\n            gradert: false,\n        };\n        if (\n            førsteUttaksdagNesteBarnsSak !== undefined &&\n            tidperiodeOverlapperDato(periode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n        ) {\n            const splittetPeriode = splittPeriodePåDato(periode, førsteUttaksdagNesteBarnsSak) as Uttaksperiode[];\n            splittetPeriode.forEach((sp) => perioder.push(sp));\n        } else {\n            perioder.push(periode);\n        }\n    } else {\n        const aktivitetsFriPeriode: Uttaksperiode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.farMedmor,\n            konto: StønadskontoType.AktivitetsfriKvote,\n            tidsperiode: getTidsperiode(førsteUttaksdag, aktivitetsfriKvote!.dager),\n            vedlegg: [],\n            gradert: false,\n            harIkkeAktivitetskrav: true,\n        };\n\n        if (\n            førsteUttaksdagNesteBarnsSak !== undefined &&\n            tidperiodeOverlapperDato(aktivitetsFriPeriode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n        ) {\n            const splittetPeriode = splittPeriodePåDato(\n                aktivitetsFriPeriode,\n                førsteUttaksdagNesteBarnsSak,\n            ) as Uttaksperiode[];\n            splittetPeriode.forEach((sp) => perioder.push(sp));\n        } else {\n            perioder.push(aktivitetsFriPeriode);\n        }\n\n        const aktivitetskravPeriode: Uttaksperiode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.farMedmor,\n            konto: StønadskontoType.Foreldrepenger,\n            tidsperiode: getTidsperiode(\n                Uttaksdagen(aktivitetsFriPeriode.tidsperiode.tom).neste(),\n                foreldrepengerKonto.dager,\n            ),\n            vedlegg: [],\n            gradert: false,\n        };\n\n        if (\n            førsteUttaksdagNesteBarnsSak !== undefined &&\n            tidperiodeOverlapperDato(aktivitetskravPeriode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n        ) {\n            const splittetPeriode = splittPeriodePåDato(\n                aktivitetskravPeriode,\n                førsteUttaksdagNesteBarnsSak,\n            ) as Uttaksperiode[];\n            splittetPeriode.forEach((sp) => perioder.push(sp));\n        } else {\n            perioder.push(aktivitetskravPeriode);\n        }\n    }\n\n    return perioder;\n};\n\nconst ikkeDeltUttakAdopsjonMor = (\n    famDato: Date,\n    foreldrepengerKonto: TilgjengeligStønadskonto,\n    startdatoPermisjon: Date | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n) => {\n    const førsteUttaksdag = Uttaksdagen(startdatoPermisjon || famDato).denneEllerNeste();\n    const periode: Uttaksperiode = {\n        id: guid(),\n        type: Periodetype.Uttak,\n        forelder: Forelder.mor,\n        konto: foreldrepengerKonto.konto,\n        tidsperiode: getTidsperiode(førsteUttaksdag, foreldrepengerKonto.dager),\n        vedlegg: [],\n        gradert: false,\n    };\n    if (\n        førsteUttaksdagNesteBarnsSak !== undefined &&\n        tidperiodeOverlapperDato(periode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n    ) {\n        return splittPeriodePåDato(periode, førsteUttaksdagNesteBarnsSak);\n    }\n    return [periode];\n};\n\nconst ikkeDeltUttakAdopsjon = (\n    famDato: Date,\n    erFarEllerMedmor: boolean,\n    foreldrepengerKonto: TilgjengeligStønadskonto,\n    startdatoPermisjon: Date | undefined,\n    erMorUfør: boolean | undefined,\n    aktivitetsfriKvote: TilgjengeligStønadskonto | undefined,\n    bareFarMedmorHarRett: boolean,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n) => {\n    if (!erFarEllerMedmor) {\n        return ikkeDeltUttakAdopsjonMor(famDato, foreldrepengerKonto, startdatoPermisjon, førsteUttaksdagNesteBarnsSak);\n    } else {\n        return ikkeDeltUttakAdopsjonFarMedmor(\n            famDato,\n            foreldrepengerKonto,\n            startdatoPermisjon,\n            erMorUfør,\n            aktivitetsfriKvote,\n            bareFarMedmorHarRett,\n            førsteUttaksdagNesteBarnsSak,\n        );\n    }\n};\n\nconst ikkeDeltUttakFødselMor = (\n    famDato: Date,\n    foreldrepengerKonto: TilgjengeligStønadskonto,\n    startdatoPermisjon: Date | undefined,\n    foreldrePengerFørFødselKonto: TilgjengeligStønadskonto,\n) => {\n    const førsteUttaksdag = Uttaksdagen(famDato).denneEllerNeste();\n    const perioder: Periode[] = [];\n    const skalHaForeldrePengerFørFødsel = startdatoPermisjon ? true : false;\n\n    if (foreldrePengerFørFødselKonto !== undefined && skalHaForeldrePengerFørFødsel && startdatoPermisjon) {\n        const dagerFørFødsel = Uttaksdagen(startdatoPermisjon).getUttaksdagerFremTilDato(førsteUttaksdag);\n        const merEnnTreUkerPermisjonFørFødsel = dagerFørFødsel > 15;\n        const startdatoFpFørFødsel = Uttaksdagen(førsteUttaksdag).trekkFra(\n            merEnnTreUkerPermisjonFørFødsel ? 15 : dagerFørFødsel,\n        );\n\n        if (merEnnTreUkerPermisjonFørFødsel) {\n            const ekstraPeriodeFørFødsel: Periode = {\n                id: guid(),\n                type: Periodetype.Uttak,\n                forelder: Forelder.mor,\n                konto: StønadskontoType.Foreldrepenger,\n                tidsperiode: getTidsperiode(startdatoPermisjon, dagerFørFødsel - 15),\n                vedlegg: [],\n            };\n\n            perioder.push(ekstraPeriodeFørFødsel);\n        }\n\n        const periodeFørFødsel: Periode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.mor,\n            konto: foreldrePengerFørFødselKonto.konto,\n            tidsperiode: {\n                fom: startdatoFpFørFødsel,\n                tom: Uttaksdagen(førsteUttaksdag).forrige(),\n            },\n            vedlegg: [],\n        };\n\n        perioder.push(periodeFørFødsel);\n    } else {\n        const periodeFørFødsel: Periode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.mor,\n            konto: StønadskontoType.ForeldrepengerFørFødsel,\n            skalIkkeHaUttakFørTermin: true,\n            tidsperiode: {} as any,\n            vedlegg: [],\n        };\n\n        perioder.push(periodeFørFødsel);\n    }\n\n    const ekstraPermisjonFørFødsel = perioder.find(\n        (p) => isUttaksperiode(p) && p.konto === StønadskontoType.Foreldrepenger,\n    );\n\n    const antallDagerIForeldrepenger = ekstraPermisjonFørFødsel\n        ? getTidsperiode(\n              førsteUttaksdag,\n              foreldrepengerKonto.dager - Tidsperioden(ekstraPermisjonFørFødsel.tidsperiode).getAntallUttaksdager(),\n          )\n        : getTidsperiode(førsteUttaksdag, foreldrepengerKonto.dager);\n\n    const foreldrepengerPeriode: Periode = {\n        id: guid(),\n        type: Periodetype.Uttak,\n        forelder: Forelder.mor,\n        konto: foreldrepengerKonto.konto,\n        tidsperiode: antallDagerIForeldrepenger,\n        vedlegg: [],\n        gradert: false,\n    };\n\n    perioder.push(foreldrepengerPeriode);\n\n    return perioder.sort(sorterPerioder);\n};\n\nconst ikkeDeltUttakFødselFarMedmor = (\n    famDato: Date,\n    foreldrepengerKonto: TilgjengeligStønadskonto,\n    startdatoPermisjon: Date | undefined,\n    erMorUfør: boolean | undefined,\n    aktivitetsfriKvote: TilgjengeligStønadskonto | undefined,\n    bareFarMedmorHarRett: boolean,\n    termindato: Date | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n) => {\n    const startDato = Uttaksdagen(startdatoPermisjon || famDato).denneEllerNeste();\n    const morHarRett = false;\n    const perioder: Periode[] = [];\n\n    if (erMorUfør !== true) {\n        let startDatoNestePeriode = startDato;\n        if (andreAugust2022ReglerGjelder(famDato) && !!bareFarMedmorHarRett) {\n            const aktivitetsFriPeriode: Uttaksperiode = {\n                id: guid(),\n                type: Periodetype.Uttak,\n                forelder: Forelder.farMedmor,\n                konto: StønadskontoType.AktivitetsfriKvote,\n                tidsperiode: getTidsperiode(startDato, aktivitetsfriKvote!.dager),\n                vedlegg: [],\n                harIkkeAktivitetskrav: true,\n            };\n            if (\n                farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato(\n                    aktivitetsFriPeriode,\n                    famDato,\n                    morHarRett,\n                    termindato,\n                )\n            ) {\n                const aktivitetsFriePerioder = splittUttaksperiodePåFamiliehendelsesdato(aktivitetsFriPeriode, famDato);\n                aktivitetsFriePerioder.forEach((periode) => perioder.push(periode));\n            } else if (\n                førsteUttaksdagNesteBarnsSak !== undefined &&\n                tidperiodeOverlapperDato(aktivitetsFriPeriode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n            ) {\n                const aktivitetsFriePerioder = splittPeriodePåDato(aktivitetsFriPeriode, førsteUttaksdagNesteBarnsSak);\n                aktivitetsFriePerioder.forEach((periode) => perioder.push(periode));\n            } else {\n                perioder.push(aktivitetsFriPeriode);\n            }\n            startDatoNestePeriode = Uttaksdagen(aktivitetsFriPeriode.tidsperiode.tom).neste();\n        }\n\n        const periode: Uttaksperiode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.farMedmor,\n            konto: foreldrepengerKonto.konto,\n            tidsperiode: getTidsperiode(startDatoNestePeriode, foreldrepengerKonto.dager),\n            vedlegg: [],\n            gradert: false,\n        };\n\n        perioder.push(periode);\n    } else {\n        const aktivitetsFriPeriode: Uttaksperiode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.farMedmor,\n            konto: StønadskontoType.AktivitetsfriKvote,\n            tidsperiode: getTidsperiode(startDato, aktivitetsfriKvote!.dager),\n            vedlegg: [],\n            gradert: false,\n            harIkkeAktivitetskrav: true,\n        };\n\n        if (\n            farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato(\n                aktivitetsFriPeriode,\n                famDato,\n                morHarRett,\n                termindato,\n            )\n        ) {\n            const aktivitetsFriePerioder = splittUttaksperiodePåFamiliehendelsesdato(aktivitetsFriPeriode, famDato);\n            aktivitetsFriePerioder.forEach((periode) => perioder.push(periode));\n        } else {\n            perioder.push(aktivitetsFriPeriode);\n        }\n\n        const aktivitetskravPeriode: Uttaksperiode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.farMedmor,\n            konto: StønadskontoType.Foreldrepenger,\n            tidsperiode: getTidsperiode(\n                Uttaksdagen(aktivitetsFriPeriode.tidsperiode.tom).neste(),\n                foreldrepengerKonto.dager,\n            ),\n            vedlegg: [],\n            gradert: false,\n        };\n        perioder.push(aktivitetskravPeriode);\n    }\n\n    return perioder.sort(sorterPerioder);\n};\n\nconst ikkeDeltUttakFødsel = (\n    famDato: Date,\n    erFarEllerMedmor: boolean,\n    foreldrepengerKonto: TilgjengeligStønadskonto,\n    startdatoPermisjon: Date | undefined,\n    foreldrePengerFørFødselKonto: TilgjengeligStønadskonto | undefined,\n    erMorUfør: boolean | undefined,\n    aktivitetsfriKvote: TilgjengeligStønadskonto | undefined,\n    bareFarMedmorHarRett: boolean,\n    termindato: Date | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n) => {\n    if (!erFarEllerMedmor) {\n        return ikkeDeltUttakFødselMor(famDato, foreldrepengerKonto, startdatoPermisjon, foreldrePengerFørFødselKonto!);\n    } else {\n        return ikkeDeltUttakFødselFarMedmor(\n            famDato,\n            foreldrepengerKonto,\n            startdatoPermisjon,\n            erMorUfør,\n            aktivitetsfriKvote,\n            bareFarMedmorHarRett,\n            termindato,\n            førsteUttaksdagNesteBarnsSak,\n        );\n    }\n};\n\nexport const ikkeDeltUttak = (\n    situasjon: Situasjon,\n    famDato: Date,\n    erFarEllerMedmor: boolean,\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    startdatoPermisjon: Date | undefined,\n    erMorUfør: boolean | undefined,\n    bareFarMedmorHarRett: boolean,\n    termindato: Date | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n) => {\n    const foreldrepengerKonto = tilgjengeligeStønadskontoer.find(\n        (konto) => konto.konto === StønadskontoType.Foreldrepenger,\n    );\n    const foreldrePengerFørFødselKonto = tilgjengeligeStønadskontoer.find(\n        (konto) => konto.konto === StønadskontoType.ForeldrepengerFørFødsel,\n    );\n    const aktivitetsfriKvote = tilgjengeligeStønadskontoer.find(\n        (konto) => konto.konto === StønadskontoType.AktivitetsfriKvote,\n    );\n\n    if (situasjon === 'adopsjon') {\n        return ikkeDeltUttakAdopsjon(\n            famDato,\n            erFarEllerMedmor,\n            foreldrepengerKonto!,\n            startdatoPermisjon,\n            erMorUfør,\n            aktivitetsfriKvote,\n            bareFarMedmorHarRett,\n            førsteUttaksdagNesteBarnsSak,\n        );\n    }\n\n    if (situasjon === 'fødsel') {\n        return ikkeDeltUttakFødsel(\n            famDato,\n            erFarEllerMedmor,\n            foreldrepengerKonto!,\n            startdatoPermisjon,\n            foreldrePengerFørFødselKonto,\n            erMorUfør,\n            aktivitetsfriKvote,\n            bareFarMedmorHarRett,\n            termindato,\n            førsteUttaksdagNesteBarnsSak,\n        );\n    }\n\n    return [];\n};\n","import { UttaksplanSkjemadata } from 'app/types/UttaksplanSkjemaData';\nimport { deltUttak } from './deltUttak';\nimport { ikkeDeltUttak } from './ikkeDeltUttak';\nimport { ISOStringToDate, Periode, Situasjon, TilgjengeligStønadskonto } from '@navikt/fp-common';\nimport { finnOgSettInnHull } from '@navikt/uttaksplan/src/builder/uttaksplanbuilderUtils';\n\nexport interface LagUttaksplanParams {\n    situasjon: Situasjon;\n    familiehendelsesdato: Date;\n    erDeltUttak: boolean;\n    erEndringssøknad: boolean;\n    søkerErFarEllerMedmor: boolean;\n    annenForelderErUfør: boolean;\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[];\n    uttaksplanSkjema: UttaksplanSkjemadata;\n    erEnkelEndringssøknad: boolean;\n    førsteUttaksdagEtterSeksUker: Date;\n    søkerHarMidlertidigOmsorg: boolean;\n    bareFarMedmorHarRett: boolean;\n    harAktivitetskravIPeriodeUtenUttak: boolean;\n    termindato: Date | undefined;\n    førsteUttaksdagNesteBarnsSak: Date | undefined;\n    annenForelderHarRettPåForeldrepengerIEØS?: boolean;\n}\n\nexport const lagUttaksplan = (params: LagUttaksplanParams): Periode[] => {\n    const {\n        situasjon,\n        familiehendelsesdato,\n        erDeltUttak,\n        erEndringssøknad,\n        søkerErFarEllerMedmor,\n        annenForelderErUfør,\n        tilgjengeligeStønadskontoer,\n        uttaksplanSkjema,\n        bareFarMedmorHarRett,\n        termindato,\n        harAktivitetskravIPeriodeUtenUttak,\n        annenForelderHarRettPåForeldrepengerIEØS,\n        førsteUttaksdagNesteBarnsSak,\n    } = params;\n\n    if (uttaksplanSkjema.ønskerIkkeFlerePerioder || erEndringssøknad) {\n        return [];\n    }\n    const erAdopsjon = situasjon === 'adopsjon';\n\n    const {\n        harAnnenForelderSøktFP,\n        startdatoPermisjon,\n        fellesperiodeukerMor,\n        antallDagerFellesperiodeFarMedmor,\n        antallUkerFellesperiodeFarMedmor,\n        morSinSisteUttaksdag,\n        farSinFørsteUttaksdag,\n        begrunnelseForUtsettelse,\n    } = uttaksplanSkjema;\n\n    const morSinSisteUttaksdagDate = ISOStringToDate(morSinSisteUttaksdag);\n    if (familiehendelsesdato) {\n        if (erDeltUttak) {\n            const forslag = deltUttak({\n                situasjon,\n                famDato: familiehendelsesdato,\n                erFarEllerMedmor: søkerErFarEllerMedmor,\n                tilgjengeligeStønadskontoer,\n                startdatoPermisjon: ISOStringToDate(startdatoPermisjon),\n                fellesperiodeukerMor,\n                harAnnenForelderSøktFP,\n                antallDagerFellesperiodeFarMedmor,\n                antallUkerFellesperiodeFarMedmor,\n                morSinSisteUttaksdag: morSinSisteUttaksdagDate,\n                farSinFørsteUttaksdag: ISOStringToDate(farSinFørsteUttaksdag),\n                begrunnelseForUtsettelse,\n                annenForelderHarRettPåForeldrepengerIEØS,\n                termindato,\n                førsteUttaksdagNesteBarnsSak,\n            });\n\n            return finnOgSettInnHull(\n                forslag,\n                harAktivitetskravIPeriodeUtenUttak,\n                familiehendelsesdato,\n                erAdopsjon,\n                false,\n                søkerErFarEllerMedmor,\n                førsteUttaksdagNesteBarnsSak,\n            );\n        } else {\n            const forslag = ikkeDeltUttak(\n                situasjon,\n                familiehendelsesdato,\n                søkerErFarEllerMedmor,\n                tilgjengeligeStønadskontoer,\n                ISOStringToDate(startdatoPermisjon),\n                annenForelderErUfør,\n                bareFarMedmorHarRett,\n                termindato,\n                førsteUttaksdagNesteBarnsSak,\n            );\n\n            return finnOgSettInnHull(\n                forslag,\n                harAktivitetskravIPeriodeUtenUttak,\n                familiehendelsesdato,\n                erAdopsjon,\n                søkerErFarEllerMedmor,\n                søkerErFarEllerMedmor,\n                førsteUttaksdagNesteBarnsSak,\n            );\n        }\n    }\n\n    return [];\n};\n","import { FunctionComponent, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { notEmpty } from '@navikt/fp-validation';\nimport Person from '@navikt/fp-common/src/common/types/Person';\nimport { Button, GuidePanel } from '@navikt/ds-react';\nimport {\n    Block,\n    EksisterendeSak,\n    Forelder,\n    ISOStringToDate,\n    StepButtonWrapper,\n    Uttaksdagen,\n    andreAugust2022ReglerGjelder,\n    getErMorUfør,\n    getNavnGenitivEierform,\n    intlUtils,\n    isAnnenForelderOppgitt,\n    isFarEllerMedmor,\n} from '@navikt/fp-common';\nimport {\n    FarMedmorFødselBeggeHarRettFormComponents,\n    FarMedmorFødselBeggeHarRettFormData,\n    FarMedmorFødselBeggeHarRettFormField,\n} from './farMedmorFødselBeggeHarRettFormConfig';\nimport {\n    getInitialFarMedmorFødselBeggeHarRettValues,\n    mapFarMedmorFødselBeggeHarRettToState,\n} from './farMedmorFødselBeggeHarRettUtils';\nimport TilgjengeligeDagerGraf from '../../tilgjengeligeDagerGraf/TilgjengeligeDagerGraf';\nimport { getTilgjengeligeDager } from '../../tilgjengeligeDagerGraf/tilgjengeligeDagerUtils';\nimport { TilgjengeligeStønadskontoerDTO } from 'app/types/TilgjengeligeStønadskontoerDTO';\nimport { getValgtStønadskontoFor80Og100Prosent } from 'app/utils/stønadskontoUtils';\nimport { getFamiliehendelsedato, getTermindato } from 'app/utils/barnUtils';\nimport farMedmorFødselBeggeHarRettQuestionsConfig, {\n    FarMedmorFødselBeggeHarRettFormPayload,\n} from './farMedmorFødselBeggeHarRettQuestionsConfig';\nimport MorsSisteDagSpørsmål from '../spørsmål/MorsSisteDagSpørsmål';\nimport FarMedmorsFørsteDag from '../spørsmål/FarMedmorsFørsteDag';\nimport AntallUkerOgDagerFellesperiodeFarMedmorSpørsmål from '../spørsmål/AntallUkerOgDagerFellesperiodeFarMedmorSpørsmål';\nimport DekningsgradSpørsmål from '../spørsmål/DekningsgradSpørsmål';\nimport SøknadRoutes from 'app/routes/routes';\nimport { FarMedmorFødselBeggeHarRettUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport { getDekningsgradFromString } from 'app/utils/getDekningsgradFromString';\nimport { lagUttaksplan } from 'app/utils/uttaksplan/lagUttaksplan';\nimport { getAntallUker } from 'app/steps/uttaksplan-info/utils/stønadskontoer';\nimport { getPreviousStepHref } from 'app/steps/stepsConfig';\nimport { ContextDataType, useContextGetData, useContextSaveData } from 'app/context/FpDataContext';\nimport BackButton from 'app/steps/BackButton';\nimport { UttaksplanMetaData } from 'app/types/UttaksplanMetaData';\n\ninterface Props {\n    tilgjengeligeStønadskontoer100DTO: TilgjengeligeStønadskontoerDTO;\n    tilgjengeligeStønadskontoer80DTO: TilgjengeligeStønadskontoerDTO;\n    eksisterendeSakAnnenPart: EksisterendeSak | undefined;\n    erEndringssøknad: boolean;\n    person: Person;\n    mellomlagreSøknadOgNaviger: () => void;\n    oppdaterBarnOgLagreUttaksplandata: (metadata: UttaksplanMetaData) => void;\n}\n\nconst FarMedmorFødselFørsteganggsøknadBeggeHarRett: FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer100DTO,\n    tilgjengeligeStønadskontoer80DTO,\n    erEndringssøknad,\n    person,\n    mellomlagreSøknadOgNaviger,\n    oppdaterBarnOgLagreUttaksplandata,\n}) => {\n    const intl = useIntl();\n    const [isSubmitting, setIsSubmitting] = useState(false);\n\n    const søkersituasjon = notEmpty(useContextGetData(ContextDataType.SØKERSITUASJON));\n    const barn = notEmpty(useContextGetData(ContextDataType.OM_BARNET));\n    const annenForelder = notEmpty(useContextGetData(ContextDataType.ANNEN_FORELDER));\n    const barnFraNesteSak = useContextGetData(ContextDataType.BARN_FRA_NESTE_SAK);\n    const uttaksplanMetadata = useContextGetData(ContextDataType.UTTAKSPLAN_METADATA);\n    // TODO (TOR) fjern as\n    const uttaksplanInfo = useContextGetData(\n        ContextDataType.UTTAKSPLAN_INFO,\n    ) as FarMedmorFødselBeggeHarRettUttaksplanInfo;\n\n    const oppdaterAppRoute = useContextSaveData(ContextDataType.APP_ROUTE);\n    const oppdaterUttaksplanInfo = useContextSaveData(ContextDataType.UTTAKSPLAN_INFO);\n    const oppdaterUttaksplan = useContextSaveData(ContextDataType.UTTAKSPLAN);\n\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const erFødsel = søkersituasjon.situasjon === 'fødsel';\n\n    const navnFar = erFarEllerMedmor\n        ? person.fornavn\n        : isAnnenForelderOppgitt(annenForelder)\n        ? annenForelder.fornavn\n        : '';\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const navnMor = erFarEllerMedmor && isAnnenForelderOppgitt(annenForelder) ? annenForelder.fornavn : person.fornavn;\n\n    const erMorUfør = getErMorUfør(annenForelder, erFarEllerMedmor);\n    const tilgjengeligeStønadskontoer = getValgtStønadskontoFor80Og100Prosent(\n        tilgjengeligeStønadskontoer80DTO,\n        tilgjengeligeStønadskontoer100DTO,\n    );\n\n    const familiehendelsesdatoDate = ISOStringToDate(familiehendelsesdato);\n    const termindato = getTermindato(barn);\n    const førsteUttaksdagNesteBarnsSak =\n        barnFraNesteSak !== undefined ? barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n\n    const onSubmit = (values: Partial<FarMedmorFødselBeggeHarRettFormData>) => {\n        setIsSubmitting(true);\n\n        const uttaksplan = lagUttaksplan({\n            annenForelderErUfør: erMorUfør,\n            erDeltUttak: true,\n            erEndringssøknad,\n            erEnkelEndringssøknad: erEndringssøknad,\n            familiehendelsesdato: familiehendelsesdatoDate!,\n            førsteUttaksdagEtterSeksUker: Uttaksdagen(Uttaksdagen(familiehendelsesdatoDate!).denneEllerNeste()).leggTil(\n                30,\n            ),\n            situasjon: erFødsel ? 'fødsel' : 'adopsjon',\n            søkerErFarEllerMedmor: erFarEllerMedmor,\n            søkerHarMidlertidigOmsorg: false,\n            tilgjengeligeStønadskontoer: tilgjengeligeStønadskontoer[getDekningsgradFromString(values.dekningsgrad)],\n            uttaksplanSkjema: {\n                morSinSisteUttaksdag: values.morsSisteDag,\n                farSinFørsteUttaksdag: values.farMedmorsFørsteDag,\n                antallDagerFellesperiodeFarMedmor: parseInt(values.antallDagerFellesperiode || '0', 10),\n                antallUkerFellesperiodeFarMedmor: parseInt(values.antallUkerFellesperiode || '0', 10),\n            },\n            bareFarMedmorHarRett: false,\n            termindato,\n            harAktivitetskravIPeriodeUtenUttak: false,\n            førsteUttaksdagNesteBarnsSak,\n        });\n\n        oppdaterUttaksplanInfo(mapFarMedmorFødselBeggeHarRettToState(values));\n\n        oppdaterUttaksplan(uttaksplan);\n\n        oppdaterBarnOgLagreUttaksplandata({\n            ...uttaksplanMetadata,\n            dekningsgrad: getDekningsgradFromString(values.dekningsgrad),\n            antallUkerIUttaksplan: getAntallUker(\n                tilgjengeligeStønadskontoer[values.dekningsgrad! === '100' ? 100 : 80],\n            ),\n        });\n\n        oppdaterAppRoute(SøknadRoutes.UTTAKSPLAN);\n\n        mellomlagreSøknadOgNaviger();\n    };\n\n    return (\n        <FarMedmorFødselBeggeHarRettFormComponents.FormikWrapper\n            initialValues={getInitialFarMedmorFødselBeggeHarRettValues(\n                uttaksplanInfo,\n                uttaksplanMetadata?.dekningsgrad,\n            )}\n            onSubmit={onSubmit}\n            renderForm={({ values: formValues, setFieldValue }) => {\n                const visibility = farMedmorFødselBeggeHarRettQuestionsConfig.getVisbility({\n                    ...formValues,\n                    familiehendelsesdato: familiehendelsesdatoDate!,\n                } as FarMedmorFødselBeggeHarRettFormPayload);\n\n                const valgtStønadskonto = tilgjengeligeStønadskontoer[formValues.dekningsgrad === '100' ? 100 : 80];\n                const tilgjengeligeDager = valgtStønadskonto\n                    ? getTilgjengeligeDager(valgtStønadskonto, false, Forelder.farMedmor)\n                    : undefined;\n\n                return (\n                    <FarMedmorFødselBeggeHarRettFormComponents.Form\n                        includeButtons={false}\n                        includeValidationSummary={true}\n                    >\n                        <Block padBottom=\"xl\">\n                            <GuidePanel>\n                                <FormattedMessage\n                                    id=\"uttaksplaninfo.veileder.informasjonTilAnnenForelder\"\n                                    values={{\n                                        navn: isAnnenForelderOppgitt(annenForelder)\n                                            ? getNavnGenitivEierform(annenForelder.fornavn, intl.locale)\n                                            : '',\n                                    }}\n                                />\n                            </GuidePanel>\n                        </Block>\n                        <Block padBottom=\"l\">\n                            <DekningsgradSpørsmål\n                                FormKomponent={FarMedmorFødselBeggeHarRettFormComponents}\n                                dekningsgradFeltNavn={FarMedmorFødselBeggeHarRettFormField.dekningsgrad}\n                                tilgjengeligeStønadskontoer={tilgjengeligeStønadskontoer}\n                                erDeltUttak={true}\n                            />\n                        </Block>\n                        <Block padBottom=\"xl\" visible={formValues.dekningsgrad !== ''}>\n                            {tilgjengeligeDager && (\n                                <TilgjengeligeDagerGraf\n                                    erDeltUttak={true}\n                                    erFarEllerMedmor={true}\n                                    navnFarMedmor={navnFar}\n                                    navnMor={navnMor}\n                                    tilgjengeligeDager={tilgjengeligeDager}\n                                />\n                            )}\n                        </Block>\n                        <Block\n                            padBottom=\"xl\"\n                            visible={\n                                erFarEllerMedmor &&\n                                formValues.dekningsgrad !== '' &&\n                                !andreAugust2022ReglerGjelder(ISOStringToDate(familiehendelsesdato)!)\n                            }\n                        >\n                            <GuidePanel>\n                                <FormattedMessage\n                                    id=\"uttaksplaninfo.veileder.farMedmor.infoOmTidsromMellomMorsSisteDagOgFarsFørsteDag\"\n                                    values={{ navnMor }}\n                                />\n                            </GuidePanel>\n                        </Block>\n                        <Block\n                            padBottom=\"xl\"\n                            visible={visibility.isVisible(FarMedmorFødselBeggeHarRettFormField.morsSisteDag)}\n                        >\n                            <MorsSisteDagSpørsmål\n                                FormComponents={FarMedmorFødselBeggeHarRettFormComponents}\n                                fieldName={FarMedmorFødselBeggeHarRettFormField.morsSisteDag}\n                                navnMor={navnMor}\n                                familiehendelsesdato={familiehendelsesdato}\n                            />\n                        </Block>\n                        <Block\n                            padBottom=\"xl\"\n                            visible={visibility.isVisible(FarMedmorFødselBeggeHarRettFormField.farMedmorsFørsteDag)}\n                        >\n                            <FarMedmorsFørsteDag\n                                FormComponents={FarMedmorFødselBeggeHarRettFormComponents}\n                                fieldName={FarMedmorFødselBeggeHarRettFormField.farMedmorsFørsteDag}\n                                familiehendelsesdato={familiehendelsesdatoDate!}\n                                setFieldValue={setFieldValue}\n                                morsSisteDag={ISOStringToDate(formValues.morsSisteDag)}\n                                navnMor={navnMor}\n                                termindato={termindato}\n                                situasjon={søkersituasjon.situasjon}\n                                morHarRettTilForeldrepengerIEØS={false}\n                            />\n                        </Block>\n                        <Block\n                            padBottom=\"xl\"\n                            visible={visibility.isVisible(\n                                FarMedmorFødselBeggeHarRettFormField.antallDagerFellesperiode,\n                            )}\n                        >\n                            {tilgjengeligeDager && (\n                                <AntallUkerOgDagerFellesperiodeFarMedmorSpørsmål\n                                    FormComponents={FarMedmorFødselBeggeHarRettFormComponents}\n                                    ukerFieldName={FarMedmorFødselBeggeHarRettFormField.antallUkerFellesperiode}\n                                    dagerFieldName={FarMedmorFødselBeggeHarRettFormField.antallDagerFellesperiode}\n                                    antallDager={formValues.antallDagerFellesperiode!}\n                                    antallUker={formValues.antallUkerFellesperiode!}\n                                    setFieldValue={setFieldValue}\n                                    ukerMedFellesperiode={tilgjengeligeDager.dagerFelles / 5}\n                                />\n                            )}\n                        </Block>\n                        <Block>\n                            <StepButtonWrapper>\n                                <BackButton\n                                    mellomlagreSøknadOgNaviger={mellomlagreSøknadOgNaviger}\n                                    route={getPreviousStepHref('uttaksplanInfo')}\n                                />\n                                {visibility.areAllQuestionsAnswered() && (\n                                    <Button type=\"submit\" disabled={isSubmitting} loading={isSubmitting}>\n                                        {intlUtils(intl, 'søknad.gåVidere')}\n                                    </Button>\n                                )}\n                            </StepButtonWrapper>\n                        </Block>\n                    </FarMedmorFødselBeggeHarRettFormComponents.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default FarMedmorFødselFørsteganggsøknadBeggeHarRett;\n","import { getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\n\nexport enum MorFødselFormField {\n    dekningsgrad = 'dekningsgrad',\n    permisjonStartdato = 'permisjonStartdato',\n    skalIkkeHaUttakFørTermin = 'skalIkkeHaUttakFørTermin',\n    fellesperiodeukerMor = 'fellesperiodeukerMor',\n}\n\nexport interface MorFødselFormData {\n    [MorFødselFormField.dekningsgrad]: string;\n    [MorFødselFormField.permisjonStartdato]: string;\n    [MorFødselFormField.skalIkkeHaUttakFørTermin]: boolean;\n    [MorFødselFormField.fellesperiodeukerMor]: number | undefined;\n}\n\nexport const MorFødselFormComponents = getTypedFormComponents<MorFødselFormField, MorFødselFormData>();\n","import { MorFødselUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport { MorFødselFormData, MorFødselFormField } from './morFødselFormConfig';\nimport { dateToISOString } from '@navikt/sif-common-formik-ds/lib';\nimport { Dekningsgrad } from '@navikt/fp-common';\n\nconst initialMorFødselValues: MorFødselFormData = {\n    [MorFødselFormField.dekningsgrad]: '',\n    [MorFødselFormField.permisjonStartdato]: '',\n    [MorFødselFormField.skalIkkeHaUttakFørTermin]: false,\n    [MorFødselFormField.fellesperiodeukerMor]: undefined,\n};\n\nexport const mapMorFødselFormToState = (values: Partial<MorFødselFormData>): MorFødselUttaksplanInfo => {\n    return {\n        permisjonStartdato: values.permisjonStartdato!,\n        skalIkkeHaUttakFørTermin: values.skalIkkeHaUttakFørTermin!,\n        fellesperiodeukerMor: values.fellesperiodeukerMor,\n    };\n};\n\nexport const getInitialMorFødselValues = (\n    defaultPermisjonStartdato: Date,\n    lagretUttaksplanInfo: MorFødselUttaksplanInfo | undefined,\n    dekningsgrad?: Dekningsgrad,\n): MorFødselFormData => {\n    if (lagretUttaksplanInfo) {\n        return {\n            ...lagretUttaksplanInfo,\n            [MorFødselFormField.dekningsgrad]: dekningsgrad!,\n        };\n    }\n\n    return {\n        ...initialMorFødselValues,\n        [MorFødselFormField.permisjonStartdato]: dateToISOString(defaultPermisjonStartdato),\n    };\n};\n","import {\n    ISOStringToDate,\n    Uttaksdagen,\n    intlUtils,\n    uttaksConstants,\n    uttaksplanDatoavgrensninger,\n} from '@navikt/fp-common';\nimport dayjs from 'dayjs';\nimport { IntlShape } from 'react-intl';\nimport { isISODateString } from '@navikt/ds-datepicker';\n\nexport const validateErStartdatoFørTermindato =\n    (intl: IntlShape, familiehendelsedato: Date, skalIkkeHaUttakFørTermin: boolean, termindato: Date | undefined) =>\n    (permisjonStartdato: string) => {\n        if (!(permisjonStartdato === undefined && skalIkkeHaUttakFørTermin)) {\n            if (!isISODateString(permisjonStartdato)) {\n                return intlUtils(intl, 'valideringsfeil.uttaksplaninfo.startdatoPermisjon.gyldigDato');\n            }\n        }\n\n        if (permisjonStartdato !== undefined && !Uttaksdagen(ISOStringToDate(permisjonStartdato)!).erUttaksdag()) {\n            return intlUtils(intl, 'valideringsfeil.uttaksplaninfo.startdatoHelg');\n        }\n\n        if (!skalIkkeHaUttakFørTermin) {\n            const avgrensninger = uttaksplanDatoavgrensninger.startdatoFørTermin(familiehendelsedato, termindato);\n            if (\n                (avgrensninger.minDate &&\n                    avgrensninger.maxDate &&\n                    dayjs(permisjonStartdato).isBefore(avgrensninger.minDate, 'day')) ||\n                dayjs(permisjonStartdato).isAfter(avgrensninger.maxDate, 'day')\n            ) {\n                return intlUtils(intl, 'valideringsfeil.uttaksplaninfo.startdatoUtenforGyldigTidsrom', {\n                    uker: uttaksConstants.MAKS_ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL,\n                });\n            }\n        }\n\n        return undefined;\n    };\n","import * as React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport dayjs from 'dayjs';\nimport { Block, Uttaksdagen, formaterDato, getVarighetString, intlUtils } from '@navikt/fp-common';\nimport { GuidePanel } from '@navikt/ds-react';\n\ntype ugyldigStartdatoÅrsak = undefined | 'helgedag' | 'fortidlig';\n\nexport interface Props {\n    startdato: Date | undefined;\n    antallDager: number;\n    antallDagerFørFødselIhtRegler: number;\n    skalIkkeHaUttakFørTermin: boolean | undefined;\n    førsteMuligeStartdato: Date | undefined;\n    visKunFeil?: boolean;\n}\n\nexport const getÅrsakDersomUgyldigStartdato = (\n    startdato: Date | undefined,\n    førsteMuligeStartdato: Date | undefined,\n): ugyldigStartdatoÅrsak => {\n    if (startdato === undefined) {\n        return;\n    }\n    if (Uttaksdagen(startdato).erUttaksdag() === false) {\n        return 'helgedag';\n    } else if (førsteMuligeStartdato && dayjs(startdato).isBefore(førsteMuligeStartdato, 'day')) {\n        return 'fortidlig';\n    }\n\n    return undefined;\n};\n\nconst VeilederStartdatoPermisjon: React.FunctionComponent<Props> = ({\n    startdato,\n    antallDager,\n    antallDagerFørFødselIhtRegler,\n    skalIkkeHaUttakFørTermin,\n    førsteMuligeStartdato,\n    visKunFeil,\n}) => {\n    const intl = useIntl();\n\n    const ugyldigDatoÅrsak = startdato && getÅrsakDersomUgyldigStartdato(startdato, førsteMuligeStartdato);\n\n    const msg = React.useMemo(() => {\n        if (ugyldigDatoÅrsak && førsteMuligeStartdato) {\n            return ugyldigDatoÅrsak === 'fortidlig'\n                ? intlUtils(intl, 'uttaksplaninfo.veileder.forTidligStartdato', {\n                      dato: formaterDato(førsteMuligeStartdato),\n                  })\n                : intlUtils(intl, 'uttaksplaninfo.veileder.helgedag');\n        }\n        if (visKunFeil) {\n            return undefined;\n        }\n        if (skalIkkeHaUttakFørTermin === true) {\n            return <FormattedMessage id=\"uttaksplaninfo.informasjon.foreldrepengerFørFødselSkalIkkeHa\" />;\n        } else if (antallDager < antallDagerFørFødselIhtRegler) {\n            return (\n                <FormattedMessage\n                    id=\"uttaksplaninfo.informasjon.foreldrepengerFørFødselMindreEnnTreUker\"\n                    values={{\n                        varighet: getVarighetString(antallDagerFørFødselIhtRegler - antallDager, intl),\n                    }}\n                />\n            );\n        } else if (antallDager > antallDagerFørFødselIhtRegler) {\n            return (\n                <FormattedMessage\n                    id=\"uttaksplaninfo.informasjon.foreldrepengerFørFødselMerEnnTreUker\"\n                    values={{\n                        varighet: getVarighetString(antallDager - antallDagerFørFødselIhtRegler, intl),\n                    }}\n                />\n            );\n        }\n        return undefined;\n    }, [\n        ugyldigDatoÅrsak,\n        antallDager,\n        antallDagerFørFødselIhtRegler,\n        førsteMuligeStartdato,\n        intl,\n        skalIkkeHaUttakFørTermin,\n        visKunFeil,\n    ]);\n\n    return (\n        <Block margin=\"none\" visible={msg !== undefined}>\n            <GuidePanel>{msg}</GuidePanel>\n        </Block>\n    );\n};\n\nexport default VeilederStartdatoPermisjon;\n","import { FunctionComponent } from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\nimport dayjs from 'dayjs';\nimport {\n    Block,\n    intlUtils,\n    bemUtils,\n    getVarighetString,\n    isFødtBarn,\n    Uttaksdagen,\n    getValidTidsperiode,\n    ISOStringToDate,\n    Tidsperioden,\n    uttaksConstants,\n    uttaksplanDatoavgrensninger,\n    Barn,\n} from '@navikt/fp-common';\nimport { MorFødselFormComponents, MorFødselFormField } from './morFødselFormConfig';\nimport { getFamiliehendelsedato } from 'app/utils/barnUtils';\nimport { validateErStartdatoFørTermindato } from './validation/morFodselValidering';\nimport VeilederStartdatoPermisjon from './VeilederStartdatoPermisjon';\n\nimport './startdatoPermisjonMor.less';\n\nconst getVarighetForStartdato = (antallDager: number, barnetErFødt: boolean, intl: IntlShape): string | undefined =>\n    antallDager > 0\n        ? barnetErFødt\n            ? intlUtils(intl, 'uttaksplaninfo.spørsmål.startdatoPermisjon.barnetErFødt.varighet', {\n                  varighet: getVarighetString(antallDager, intl),\n              })\n            : intlUtils(intl, 'uttaksplaninfo.spørsmål.startdatoPermisjon.varighet', {\n                  varighet: getVarighetString(antallDager, intl),\n              })\n        : undefined;\n\ninterface Props {\n    permisjonStartdato: string;\n    skalIkkeHaUttakFørTermin: boolean;\n    termindato: Date | undefined;\n    barn: Barn;\n}\n\nconst StartdatoPermisjonMor: FunctionComponent<Props> = ({\n    permisjonStartdato,\n    skalIkkeHaUttakFørTermin,\n    termindato,\n    barn,\n}) => {\n    const intl = useIntl();\n    const bem = bemUtils('datoInput');\n\n    const erBarnFødt = isFødtBarn(barn);\n    const spørsmålNår = erBarnFødt\n        ? intlUtils(intl, 'uttaksplaninfo.spørsmål.startdatoPermisjon.barnetErFødt.label')\n        : intlUtils(intl, 'uttaksplaninfo.spørsmål.startdatoPermisjon.label');\n\n    const spørsmålHaddeIkke = erBarnFødt\n        ? intlUtils(intl, 'uttaksplaninfo.spørsmål.startdatoPermisjon.skalIkkeHaUttak.barnetErFødt.label')\n        : intlUtils(intl, 'uttaksplaninfo.spørsmål.startdatoPermisjon.skalIkkeHaUttak.label');\n\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const familiehendelsesdatoDate = dayjs(familiehendelsesdato).toDate();\n    const sisteUttaksdagFørTermin = Uttaksdagen(familiehendelsesdatoDate).forrige();\n    const startdato = skalIkkeHaUttakFørTermin !== true ? permisjonStartdato : undefined;\n    const tidsperiode = getValidTidsperiode({\n        fom: ISOStringToDate(startdato)!,\n        tom: sisteUttaksdagFørTermin,\n    });\n    const antallDager = tidsperiode ? Tidsperioden(tidsperiode).getAntallUttaksdager() : 0;\n    const antallDagerFørFødselIhtRegler = uttaksConstants.ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5;\n    const visVeileder = antallDager !== antallDagerFørFødselIhtRegler;\n\n    const datoAvgrensninger = uttaksplanDatoavgrensninger.startdatoFørTermin(familiehendelsesdatoDate, termindato);\n    const maksDato = Uttaksdagen(familiehendelsesdatoDate).forrige();\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <div className={bem.block}>\n                    <MorFødselFormComponents.DatePicker\n                        name={MorFødselFormField.permisjonStartdato}\n                        label={spørsmålNår}\n                        disabled={skalIkkeHaUttakFørTermin}\n                        maxDate={maksDato}\n                        dayPickerProps={{\n                            defaultMonth: ISOStringToDate(permisjonStartdato) || familiehendelsesdatoDate,\n                        }}\n                        validate={validateErStartdatoFørTermindato(\n                            intl,\n                            familiehendelsesdatoDate,\n                            skalIkkeHaUttakFørTermin,\n                            termindato,\n                        )}\n                        disableWeekend\n                        placeholder={'dd.mm.åååå'}\n                    />\n                    <div className={bem.element('postfix')}>\n                        {getVarighetForStartdato(antallDager, erBarnFødt, intl)}\n                    </div>\n                </div>\n            </Block>\n            <Block padBottom={visVeileder ? 'l' : 'm'}>\n                <MorFødselFormComponents.Checkbox\n                    name={MorFødselFormField.skalIkkeHaUttakFørTermin}\n                    label={spørsmålHaddeIkke}\n                    autoComplete=\"off\"\n                />\n            </Block>\n            <Block padBottom={visVeileder ? 'l' : 'm'} visible={visVeileder}>\n                <VeilederStartdatoPermisjon\n                    startdato={ISOStringToDate(startdato)}\n                    antallDager={antallDager}\n                    skalIkkeHaUttakFørTermin={skalIkkeHaUttakFørTermin === true}\n                    antallDagerFørFødselIhtRegler={antallDagerFørFødselIhtRegler}\n                    førsteMuligeStartdato={datoAvgrensninger.minDate ? new Date(datoAvgrensninger.minDate) : undefined}\n                />\n            </Block>\n        </>\n    );\n};\n\nexport default StartdatoPermisjonMor;\n","import * as React from 'react';\nimport RangeIcon from './RangeIcon';\nimport Sirkelknapp from './sirkelknapp/Sirkelknapp';\n\nimport './rangeStepper.less';\n\nexport type Direction = 'next' | 'previous';\n\nexport interface Props {\n    onClick: () => void;\n    direction: Direction;\n    label: string;\n    disabled?: boolean;\n}\n\nconst RangeStepper: React.FunctionComponent<Props> = ({ direction, onClick, label, disabled }) => (\n    <Sirkelknapp\n        stil=\"hvit\"\n        onClick={() => onClick()}\n        ariaLabel={label}\n        disabled={disabled}\n        ikon={direction === 'previous' ? <RangeIcon type=\"minus\" /> : <RangeIcon type=\"plus\" />}\n    />\n);\n\nexport default RangeStepper;\n","import classnames from 'classnames';\nimport { Fieldset, bemUtils, guid } from '@navikt/fp-common';\nimport RangeStepper from './RangeStepper';\nimport { BodyShort, ReadMore } from '@navikt/ds-react';\nimport './rangeInput.less';\nimport { Component } from 'react';\nimport AriaText from './AriaText';\n\nexport interface RangeInputElementRendererOptions {\n    value: number;\n    min: number;\n    max: number;\n}\n\nexport type RangeInputElementRenderer = (options: RangeInputElementRendererOptions) => React.ReactElement<any>;\n\nexport type RangeValueLabelPlacement = 'above' | 'below';\n\ninterface Props {\n    label: string;\n    hjelpetekst?: React.ReactNode;\n    ariaLabelText: string;\n    hjelpetekstApneLabel: string;\n    value: number;\n    min: number;\n    max: number;\n    step?: number;\n    inputId?: string;\n    bottomContentRenderer?: RangeInputElementRenderer;\n    valueLabelRenderer?: RangeInputElementRenderer;\n    valueLabelPlacement?: RangeValueLabelPlacement;\n    ariaValueChangedMessage?: (value: number) => string;\n    steppers?: {\n        increaseLabel: string;\n        reduceLabel: string;\n    };\n    onChange: (value: number) => void;\n}\n\ninterface State {\n    active: boolean;\n}\n\nconst defaultValueLabelRenderer: RangeInputElementRenderer = (options: RangeInputElementRendererOptions) => (\n    <div className=\"rangeInput__valueLabels\">\n        <div className=\"rangeInput__valueLabels__left\">{options.min}</div>\n        <div className=\"rangeInput__valueLabels__right\">{options.max}</div>\n    </div>\n);\n\nconst defaultBottomContentRenderer: RangeInputElementRenderer = (options: RangeInputElementRendererOptions) => (\n    <div className=\"rangeInput__bottomContent\">\n        <BodyShort>{options.max - options.min}</BodyShort>\n    </div>\n);\n\nclass RangeInput extends Component<Props, State> {\n    container: HTMLDivElement | null = null;\n\n    constructor(props: Props) {\n        super(props);\n        this.handleBlur = this.handleBlur.bind(this);\n        this.handleFocus = this.handleFocus.bind(this);\n        this.deactivateIfOutside = this.deactivateIfOutside.bind(this);\n        this.state = {\n            active: false,\n        };\n    }\n    handleBlur(_e: React.FocusEvent<HTMLDivElement>) {\n        if (!this.container) {\n            return;\n        }\n        setTimeout(() => this.deactivateIfOutside(), 0);\n    }\n    handleFocus(_e: React.FocusEvent<HTMLDivElement>) {\n        this.setState({\n            active: true,\n        });\n    }\n    deactivateIfOutside() {\n        if (\n            this.container &&\n            window.document.activeElement &&\n            !this.container.contains(window.document.activeElement)\n        ) {\n            this.setState({\n                active: false,\n            });\n        }\n    }\n    render() {\n        const {\n            label,\n            hjelpetekst,\n            ariaLabelText,\n            inputId,\n            valueLabelRenderer,\n            steppers,\n            ariaValueChangedMessage,\n            bottomContentRenderer,\n            hjelpetekstApneLabel,\n            valueLabelPlacement = 'above',\n            ...rest\n        } = this.props;\n\n        const { value, min, max, onChange } = this.props;\n        const id = inputId || guid();\n        const labelRenderer = valueLabelRenderer || defaultValueLabelRenderer;\n        const ariaLabelId = `${id}_label`;\n        const bottomRenderer = bottomContentRenderer || defaultBottomContentRenderer;\n\n        const bemWrapper = bemUtils('rangeInputWrapper');\n        const bemRangeInput = bemUtils('rangeInput');\n        const bemStepper = bemUtils('rangeInput__stepper');\n\n        return (\n            <div className={bemWrapper.block}>\n                <Fieldset legend={<>{label}</>} className={'uttakfordeler'}>\n                    <div aria-live=\"polite\">\n                        {valueLabelPlacement === 'above' && labelRenderer({ value, min, max })}\n                    </div>\n                    <div\n                        className={classnames(bemRangeInput.block, {\n                            [bemRangeInput.modifier('withSteppers')]: steppers !== undefined,\n                        })}\n                        ref={(c) => (this.container = c)}\n                        onBlur={this.handleBlur}\n                        onFocus={this.handleFocus}\n                    >\n                        {steppers && (\n                            <div className={`${bemStepper.block} ${bemStepper.modifier('previous')}`}>\n                                <RangeStepper\n                                    direction=\"previous\"\n                                    onClick={() => (value > min ? onChange(value - 1) : null)}\n                                    label={steppers ? steppers.reduceLabel : 'Mindre'}\n                                />\n                            </div>\n                        )}\n                        <div className={bemRangeInput.element('range')}>\n                            <AriaText id={ariaLabelId}>{ariaLabelText}</AriaText>\n                            <input\n                                {...rest}\n                                id={id}\n                                aria-labelledby={ariaLabelId}\n                                type=\"range\"\n                                onChange={(e) => onChange(parseInt(e.target.value, 10))}\n                            />\n                            <div role=\"alert\" aria-live=\"assertive\" className=\"sr-only\">\n                                {ariaValueChangedMessage && this.state.active\n                                    ? ariaValueChangedMessage(value)\n                                    : undefined}\n                            </div>\n                        </div>\n                        {steppers && (\n                            <div className={`${bemStepper.block} ${bemStepper.modifier('next')}`}>\n                                <RangeStepper\n                                    direction=\"next\"\n                                    onClick={() => (value < max ? onChange(value + 1) : null)}\n                                    label={steppers ? steppers.increaseLabel : 'Mer'}\n                                />\n                            </div>\n                        )}\n                    </div>\n                    <div aria-live=\"polite\">\n                        {valueLabelPlacement === 'below' && labelRenderer({ value, min, max })}\n                    </div>\n                    {bottomRenderer({ value, min, max })}\n                    <ReadMore header={hjelpetekstApneLabel}>{hjelpetekst}</ReadMore>\n                </Fieldset>\n            </div>\n        );\n    }\n}\n\nexport default RangeInput;\n","import { useEffect } from 'react';\nimport { useIntl, FormattedMessage } from 'react-intl';\nimport { Block, TilgjengeligStønadskonto, intlUtils, links } from '@navikt/fp-common';\nimport RangeInput from './range-input/RangeInput';\nimport {\n    getAntallUkerFedrekvote,\n    getAntallUkerFellesperiode,\n    getAntallUkerMødrekvote,\n} from '../../utils/stønadskontoer';\nimport { BodyShort, Ingress, Link } from '@navikt/ds-react';\n\nimport './fordelingFellesperiodeSpørsmål.less';\n\nexport interface OwnProps {\n    setFieldValue: (field: string, value: any, shouldValidate?: boolean | undefined) => void;\n    valgtFellesperiodeukerMor: number | undefined;\n    mor: string;\n    farMedmor: string;\n    annenForelderErFarEllerMedmor: boolean;\n    valgtStønadskonto: TilgjengeligStønadskonto[] | undefined;\n}\n\nconst FordelingFellesperiodeSpørsmål: React.FunctionComponent<OwnProps> = ({\n    setFieldValue,\n    valgtFellesperiodeukerMor,\n    annenForelderErFarEllerMedmor,\n    mor,\n    farMedmor,\n    valgtStønadskonto,\n}) => {\n    const intl = useIntl();\n\n    const fellesperiodeukerMor =\n        valgtFellesperiodeukerMor !== undefined || !valgtStønadskonto\n            ? valgtFellesperiodeukerMor\n            : Math.round((getAntallUkerFellesperiode(valgtStønadskonto) || 0) / 2);\n\n    useEffect(() => {\n        setFieldValue('fellesperiodeukerMor', fellesperiodeukerMor);\n    }, [setFieldValue, fellesperiodeukerMor]);\n\n    if (!valgtStønadskonto) {\n        return null;\n    }\n\n    const ukerFellesperiode = Math.floor(getAntallUkerFellesperiode(valgtStønadskonto));\n    const antallUkerFedreKvote = getAntallUkerFedrekvote(valgtStønadskonto);\n    const antallUkerMødreKvote = getAntallUkerMødrekvote(valgtStønadskonto);\n\n    const infotekst = intlUtils(intl, 'uttaksplaninfo.fordeling.veiledning', {\n        pakrevdForelder1: antallUkerMødreKvote,\n        pakrevdForelder2: antallUkerFedreKvote,\n        navnForelder1: mor,\n        navnForelder2: farMedmor,\n    });\n\n    const annenForeldersNavn = annenForelderErFarEllerMedmor ? farMedmor : mor;\n    return (\n        <RangeInput\n            label={intlUtils(intl, 'uttaksplaninfo.spørsmål.fordeling')}\n            hjelpetekst={\n                <BodyShort as=\"div\">\n                    <Block padBottom=\"l\">{infotekst}</Block>\n                    <Link href={links.nav_aktivitetskrav} target=\"_blank\">\n                        <FormattedMessage id=\"uttaksplaninfo.fordeling.veiledning.lenketekst\" />\n                    </Link>\n                </BodyShort>\n            }\n            hjelpetekstApneLabel={intlUtils(intl, 'uttaksplaninfo.fordeling.veiledning.lenketekst.apneLabel')}\n            ariaLabelText={intlUtils(intl, 'uttaksplaninfo.spørsmål.fordeling')}\n            value={fellesperiodeukerMor!}\n            min={0}\n            max={ukerFellesperiode}\n            onChange={(fellesperiodeukerMor) => setFieldValue('fellesperiodeukerMor', fellesperiodeukerMor)}\n            steppers={{\n                reduceLabel: intl.formatMessage({ id: 'uttaksplaninfo.fordeling.reduser.tooltip' }),\n                increaseLabel: intl.formatMessage({ id: 'uttaksplaninfo.fordeling.øk.tooltip' }),\n            }}\n            ariaValueChangedMessage={(value) =>\n                intl.formatMessage(\n                    { id: 'uttaksplaninfo.fordeling.valgtVerdi' },\n                    {\n                        ukerForelder: value,\n                        ukerTotalt: ukerFellesperiode,\n                        navnForelder: mor || intl.formatMessage({ id: 'uttaksplan.mor' }),\n                    },\n                )\n            }\n            valueLabelRenderer={(options) => (\n                <Ingress as=\"p\" className=\"m-text-center fordelingFellesperiode--valgtVerdi\">\n                    <FormattedMessage\n                        id=\"uttaksplaninfo.fordeling.valgtVerdi\"\n                        values={{\n                            ukerForelder: options.value,\n                            ukerTotalt: options.max,\n                            navnForelder: mor || intl.formatMessage({ id: 'uttaksplan.mor' }),\n                        }}\n                    />\n                </Ingress>\n            )}\n            valueLabelPlacement=\"above\"\n            bottomContentRenderer={(options) => (\n                <BodyShort className=\"m-text-center fordelingFellesperiode--bottomContent\">\n                    <FormattedMessage\n                        id=\"uttaksplaninfo.fordeling.annenForeldersFellesperiode\"\n                        values={{ annenForeldersNavn, antallUker: options.max - options.value }}\n                    />\n                </BodyShort>\n            )}\n        />\n    );\n};\n\nexport default FordelingFellesperiodeSpørsmål;\n","import { QuestionConfig, Questions } from '@navikt/sif-common-question-config';\nimport { hasValue } from '@navikt/fp-common';\nimport { MorFødselFormData, MorFødselFormField } from './morFødselFormConfig';\n\nexport interface MorFødselQuestionsPayload extends MorFødselFormData {\n    harRettPåForeldrepengerINorge: boolean | undefined;\n    erAleneOmOmsorg: boolean | undefined;\n}\n\nconst MorFødselFormConfig: QuestionConfig<MorFødselQuestionsPayload, MorFødselFormField> = {\n    [MorFødselFormField.dekningsgrad]: {\n        isAnswered: ({ dekningsgrad }) => hasValue(dekningsgrad),\n        isIncluded: () => true,\n    },\n    [MorFødselFormField.permisjonStartdato]: {\n        isAnswered: ({ permisjonStartdato }) => hasValue(permisjonStartdato),\n        isIncluded: () => true,\n        visibilityFilter: ({ dekningsgrad }) => hasValue(dekningsgrad),\n    },\n    [MorFødselFormField.skalIkkeHaUttakFørTermin]: {\n        isAnswered: ({ skalIkkeHaUttakFørTermin }) => hasValue(skalIkkeHaUttakFørTermin),\n        isIncluded: () => true,\n        visibilityFilter: ({ dekningsgrad }) => hasValue(dekningsgrad),\n    },\n    [MorFødselFormField.fellesperiodeukerMor]: {\n        isAnswered: ({ fellesperiodeukerMor }) => hasValue(fellesperiodeukerMor),\n        isIncluded: ({ harRettPåForeldrepengerINorge, erAleneOmOmsorg }) =>\n            !!harRettPåForeldrepengerINorge && erAleneOmOmsorg === false,\n        visibilityFilter: ({ dekningsgrad, permisjonStartdato, skalIkkeHaUttakFørTermin }) =>\n            hasValue(dekningsgrad) && (hasValue(permisjonStartdato) || skalIkkeHaUttakFørTermin === true),\n    },\n};\n\nexport const morFødselQuestionsConfig = Questions<MorFødselQuestionsPayload, MorFødselFormField>(MorFødselFormConfig);\n","import { Situasjon } from '@navikt/fp-common';\nimport dayjs from 'dayjs';\n\nexport const skalViseInfoOmPrematuruker = (\n    fødselsdato: Date | undefined,\n    termindato: Date | undefined,\n    situasjon: Situasjon,\n): boolean => {\n    if (fødselsdato === undefined || termindato === undefined || situasjon !== 'fødsel') {\n        return false;\n    }\n    const fødselsdatoEtterEllerLikFørsteJuli = dayjs(fødselsdato).isSameOrAfter(dayjs(new Date('2019-07-01')), 'day');\n    return (\n        dayjs(fødselsdato).add(7, 'weeks').add(3, 'days').isBefore(dayjs(termindato), 'days') &&\n        fødselsdatoEtterEllerLikFørsteJuli\n    );\n};\n\nexport const getSamtidigUttaksprosent = (\n    gradertPeriode: boolean | undefined,\n    stillingsprosent: string | undefined,\n): string => {\n    return gradertPeriode && stillingsprosent ? (100 - parseInt(stillingsprosent, 10)).toString() : '100';\n};\n","import { Periode, Periodene, isUttakAnnenPart, isUttaksperiode } from '@navikt/fp-common';\nimport {\n    finnOgSettInnHull,\n    normaliserPerioder,\n    settInnAnnenPartsUttak,\n} from '@navikt/uttaksplan/src/builder/uttaksplanbuilderUtils';\nimport { getSamtidigUttaksprosent } from 'app/utils/uttaksplanInfoUtils';\n\nexport const leggTilAnnenPartsPerioderISøkerenesUttaksplan = (\n    annenPartsPerioder: Periode[],\n    uttaksplan: Periode[],\n    familiehendelsedato: Date,\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n): Periode[] => {\n    const { normaliserteEgnePerioder, normaliserteAnnenPartsPerioder } = normaliserPerioder(\n        uttaksplan,\n        annenPartsPerioder,\n    );\n\n    if (normaliserteAnnenPartsPerioder.length > 0) {\n        normaliserteEgnePerioder.forEach((p) => {\n            if (isUttaksperiode(p)) {\n                const overlappendePerioderAnnenPart =\n                    Periodene(normaliserteAnnenPartsPerioder).finnOverlappendePerioder(p);\n                const overlappendePeriodeAnnenPart =\n                    overlappendePerioderAnnenPart.length > 0 ? overlappendePerioderAnnenPart[0] : undefined;\n\n                if (overlappendePeriodeAnnenPart !== undefined && isUttakAnnenPart(overlappendePeriodeAnnenPart)) {\n                    if (!p.ønskerSamtidigUttak) {\n                        p.ønskerSamtidigUttak = true;\n                        p.samtidigUttakProsent = getSamtidigUttaksprosent(p.gradert, p.stillingsprosent);\n                    }\n                    if (!overlappendePeriodeAnnenPart.ønskerSamtidigUttak) {\n                        overlappendePeriodeAnnenPart.ønskerSamtidigUttak = true;\n                        overlappendePeriodeAnnenPart.samtidigUttakProsent = getSamtidigUttaksprosent(\n                            overlappendePeriodeAnnenPart.gradert,\n                            overlappendePeriodeAnnenPart.stillingsprosent,\n                        );\n                    }\n                }\n            }\n        });\n        return finnOgSettInnHull(\n            settInnAnnenPartsUttak(\n                normaliserteEgnePerioder,\n                normaliserteAnnenPartsPerioder,\n                familiehendelsedato,\n                førsteUttaksdagNesteBarnsSak,\n            ),\n            harAktivitetskravIPeriodeUtenUttak,\n            familiehendelsedato,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak,\n        );\n    }\n\n    return uttaksplan;\n};\n","import { FunctionComponent, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Button, GuidePanel } from '@navikt/ds-react';\nimport { getHarAktivitetskravIPeriodeUtenUttak } from '@navikt/uttaksplan';\nimport { notEmpty } from '@navikt/fp-validation';\nimport Person from '@navikt/fp-common/src/common/types/Person';\nimport {\n    Block,\n    EksisterendeSak,\n    Forelder,\n    ISOStringToDate,\n    StepButtonWrapper,\n    Tidsperioden,\n    Uttaksdagen,\n    formaterNavn,\n    getFlerbarnsuker,\n    intlUtils,\n    isAnnenForelderOppgitt,\n    isFarEllerMedmor,\n    uttaksConstants,\n} from '@navikt/fp-common';\nimport { getFamiliehendelsedato, getFødselsdato, getTermindato } from 'app/utils/barnUtils';\nimport { getValgtStønadskontoFor80Og100Prosent } from 'app/utils/stønadskontoUtils';\nimport { TilgjengeligeStønadskontoerDTO } from 'app/types/TilgjengeligeStønadskontoerDTO';\nimport { MorFødselFormComponents, MorFødselFormData, MorFødselFormField } from './morFødselFormConfig';\nimport { getTilgjengeligeDager } from '../../tilgjengeligeDagerGraf/tilgjengeligeDagerUtils';\nimport TilgjengeligeDagerGraf from '../../tilgjengeligeDagerGraf/TilgjengeligeDagerGraf';\nimport { getInitialMorFødselValues, mapMorFødselFormToState } from './morFødselUtils';\nimport StartdatoPermisjonMor from './StartdatoPermisjonMor';\nimport FordelingFellesperiodeSpørsmål from '../../fordelingFellesperiode/FordelingFellesperiodeSpørsmål';\nimport { MorFødselUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport { MorFødselQuestionsPayload, morFødselQuestionsConfig } from './morFødselQuestionsConfig';\nimport DekningsgradSpørsmål from '../spørsmål/DekningsgradSpørsmål';\nimport { getDekningsgradFromString } from 'app/utils/getDekningsgradFromString';\nimport { lagUttaksplan } from 'app/utils/uttaksplan/lagUttaksplan';\nimport { getAntallUker } from 'app/steps/uttaksplan-info/utils/stønadskontoer';\nimport { skalViseInfoOmPrematuruker } from 'app/utils/uttaksplanInfoUtils';\nimport { leggTilAnnenPartsPerioderISøkerenesUttaksplan } from 'app/steps/uttaksplan-info/utils/leggTilAnnenPartsPerioderISøkerensUttaksplan';\nimport { getPreviousStepHref } from 'app/steps/stepsConfig';\nimport { ContextDataType, useContextGetData, useContextSaveData } from 'app/context/FpDataContext';\nimport SøknadRoutes from 'app/routes/routes';\nimport BackButton from 'app/steps/BackButton';\nimport { UttaksplanMetaData } from 'app/types/UttaksplanMetaData';\n\ninterface Props {\n    tilgjengeligeStønadskontoer100DTO: TilgjengeligeStønadskontoerDTO;\n    tilgjengeligeStønadskontoer80DTO: TilgjengeligeStønadskontoerDTO;\n    eksisterendeSakFar: EksisterendeSak | undefined;\n    erEndringssøknad: boolean;\n    person: Person;\n    mellomlagreSøknadOgNaviger: () => void;\n    oppdaterBarnOgLagreUttaksplandata: (metadata: UttaksplanMetaData) => void;\n}\n\nconst MorFødsel: FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer100DTO,\n    tilgjengeligeStønadskontoer80DTO,\n    eksisterendeSakFar,\n    erEndringssøknad,\n    person,\n    mellomlagreSøknadOgNaviger,\n    oppdaterBarnOgLagreUttaksplandata,\n}) => {\n    const intl = useIntl();\n    const [isSubmitting, setIsSubmitting] = useState(false);\n\n    const søkersituasjon = notEmpty(useContextGetData(ContextDataType.SØKERSITUASJON));\n    const barn = notEmpty(useContextGetData(ContextDataType.OM_BARNET));\n    const annenForelder = notEmpty(useContextGetData(ContextDataType.ANNEN_FORELDER));\n    const søker = notEmpty(useContextGetData(ContextDataType.SØKER));\n    const barnFraNesteSak = useContextGetData(ContextDataType.BARN_FRA_NESTE_SAK);\n    const uttaksplanMetadata = useContextGetData(ContextDataType.UTTAKSPLAN_METADATA);\n    // TODO (TOR) fjern as\n    const uttaksplanInfo = useContextGetData(ContextDataType.UTTAKSPLAN_INFO) as MorFødselUttaksplanInfo;\n\n    const oppdaterAppRoute = useContextSaveData(ContextDataType.APP_ROUTE);\n    const oppdaterUttaksplanInfo = useContextSaveData(ContextDataType.UTTAKSPLAN_INFO);\n    const oppdaterUttaksplan = useContextSaveData(ContextDataType.UTTAKSPLAN);\n\n    const antallBarn = barn.antallBarn;\n\n    const fødselsdato = getFødselsdato(barn);\n    const termindato = getTermindato(barn);\n    const visInfoOmPrematuruker = skalViseInfoOmPrematuruker(fødselsdato, termindato, søkersituasjon.situasjon);\n    const ekstraDagerGrunnetPrematurFødsel = visInfoOmPrematuruker\n        ? Tidsperioden({ fom: fødselsdato!, tom: termindato! }).getAntallUttaksdager() - 1\n        : undefined;\n    const førsteUttaksdagNesteBarnsSak =\n        barnFraNesteSak !== undefined ? barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n    const oppgittAnnenForelder = isAnnenForelderOppgitt(annenForelder) ? annenForelder : undefined;\n    const erMorUfør = !!oppgittAnnenForelder?.erUfør;\n    const harRettPåForeldrepengerINorge = !!oppgittAnnenForelder?.harRettPåForeldrepengerINorge;\n    const navnFarMedmor = oppgittAnnenForelder\n        ? formaterNavn(oppgittAnnenForelder.fornavn, oppgittAnnenForelder.etternavn, true)\n        : '';\n\n    const navnMor = formaterNavn(person.fornavn, person.etternavn, true, person.mellomnavn);\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const førsteUttaksdag = Uttaksdagen(ISOStringToDate(familiehendelsesdato)!).denneEllerNeste();\n    const defaultPermisjonStartdato = Uttaksdagen(førsteUttaksdag).trekkFra(\n        uttaksConstants.ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5,\n    );\n    const erFødsel = søkersituasjon.situasjon === 'fødsel';\n    const erAdopsjon = søkersituasjon.situasjon === 'adopsjon';\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n\n    const erDeltUttak = isAnnenForelderOppgitt(annenForelder) ? !!annenForelder.harRettPåForeldrepengerINorge : false;\n\n    const tilgjengeligeStønadskontoer = getValgtStønadskontoFor80Og100Prosent(\n        tilgjengeligeStønadskontoer80DTO,\n        tilgjengeligeStønadskontoer100DTO,\n    );\n    const familiehendelsesdatoDate = ISOStringToDate(familiehendelsesdato);\n\n    const onSubmit = (values: Partial<MorFødselFormData>) => {\n        setIsSubmitting(true);\n\n        const submissionValues = mapMorFødselFormToState(values);\n\n        const uttaksplanforslag = lagUttaksplan({\n            annenForelderErUfør: erMorUfør,\n            erDeltUttak,\n            erEndringssøknad,\n            erEnkelEndringssøknad: erEndringssøknad,\n            familiehendelsesdato: familiehendelsesdatoDate!,\n            førsteUttaksdagEtterSeksUker: Uttaksdagen(Uttaksdagen(familiehendelsesdatoDate!).denneEllerNeste()).leggTil(\n                30,\n            ),\n            situasjon: erFødsel ? 'fødsel' : 'adopsjon',\n            søkerErFarEllerMedmor: erFarEllerMedmor,\n            søkerHarMidlertidigOmsorg: false,\n            tilgjengeligeStønadskontoer: tilgjengeligeStønadskontoer[getDekningsgradFromString(values.dekningsgrad)],\n            uttaksplanSkjema: {\n                fellesperiodeukerMor: submissionValues.fellesperiodeukerMor,\n                startdatoPermisjon: submissionValues.skalIkkeHaUttakFørTermin\n                    ? undefined\n                    : submissionValues.permisjonStartdato,\n                skalIkkeHaUttakFørTermin: submissionValues.skalIkkeHaUttakFørTermin,\n            },\n            bareFarMedmorHarRett: false,\n            termindato,\n            harAktivitetskravIPeriodeUtenUttak: false,\n            førsteUttaksdagNesteBarnsSak,\n        });\n        const harAktivitetskravIPeriodeUtenUttak = getHarAktivitetskravIPeriodeUtenUttak({\n            erDeltUttak,\n            morHarRett: true,\n            søkerErAleneOmOmsorg: false,\n        });\n\n        let uttaksplanMedAnnenPart;\n\n        if (eksisterendeSakFar && uttaksplanforslag.length > 0) {\n            uttaksplanMedAnnenPart = leggTilAnnenPartsPerioderISøkerenesUttaksplan(\n                eksisterendeSakFar.uttaksplan,\n                uttaksplanforslag,\n                familiehendelsesdatoDate!,\n                harAktivitetskravIPeriodeUtenUttak,\n                erAdopsjon,\n                false,\n                false,\n                førsteUttaksdagNesteBarnsSak,\n            );\n        } else if (eksisterendeSakFar) {\n            uttaksplanMedAnnenPart = eksisterendeSakFar.uttaksplan;\n        } else {\n            uttaksplanMedAnnenPart = uttaksplanforslag;\n        }\n\n        oppdaterUttaksplanInfo(submissionValues);\n\n        oppdaterUttaksplan(uttaksplanMedAnnenPart);\n\n        oppdaterBarnOgLagreUttaksplandata({\n            ...uttaksplanMetadata,\n            dekningsgrad: getDekningsgradFromString(values.dekningsgrad),\n            antallUkerIUttaksplan: getAntallUker(\n                tilgjengeligeStønadskontoer[values.dekningsgrad! === '100' ? 100 : 80],\n            ),\n        });\n\n        oppdaterAppRoute(SøknadRoutes.UTTAKSPLAN);\n\n        mellomlagreSøknadOgNaviger();\n    };\n\n    return (\n        <MorFødselFormComponents.FormikWrapper\n            initialValues={getInitialMorFødselValues(\n                defaultPermisjonStartdato,\n                uttaksplanInfo,\n                uttaksplanMetadata?.dekningsgrad,\n            )}\n            onSubmit={onSubmit}\n            renderForm={({ values: formValues, setFieldValue }) => {\n                const visibility = morFødselQuestionsConfig.getVisbility({\n                    ...formValues,\n                    harRettPåForeldrepengerINorge,\n                    erAleneOmOmsorg: søker.erAleneOmOmsorg,\n                } as MorFødselQuestionsPayload);\n\n                const valgtStønadskonto = tilgjengeligeStønadskontoer[formValues.dekningsgrad === '100' ? 100 : 80];\n\n                return (\n                    <MorFødselFormComponents.Form includeButtons={false} includeValidationSummary={true}>\n                        <Block padBottom=\"l\">\n                            <DekningsgradSpørsmål\n                                FormKomponent={MorFødselFormComponents}\n                                dekningsgradFeltNavn={MorFødselFormField.dekningsgrad}\n                                tilgjengeligeStønadskontoer={tilgjengeligeStønadskontoer}\n                                erDeltUttak={erDeltUttak}\n                            />\n                        </Block>\n                        <Block padBottom=\"xl\" visible={visibility.isAnswered(MorFødselFormField.dekningsgrad)}>\n                            {valgtStønadskonto && (\n                                <TilgjengeligeDagerGraf\n                                    erDeltUttak={erDeltUttak}\n                                    erFarEllerMedmor={false}\n                                    navnFarMedmor={navnFarMedmor}\n                                    navnMor={navnMor}\n                                    tilgjengeligeDager={getTilgjengeligeDager(\n                                        valgtStønadskonto,\n                                        false,\n                                        Forelder.farMedmor,\n                                    )}\n                                />\n                            )}\n                        </Block>\n                        <Block padBottom=\"xl\" visible={visInfoOmPrematuruker === true}>\n                            <GuidePanel>\n                                <FormattedMessage\n                                    id=\"uttaksplaninfo.veileder.informasjonPrematuruker\"\n                                    values={{\n                                        antallprematuruker: Math.floor(ekstraDagerGrunnetPrematurFødsel! / 5),\n                                        antallprematurdager: ekstraDagerGrunnetPrematurFødsel! % 5,\n                                    }}\n                                />\n                            </GuidePanel>\n                        </Block>\n                        <Block visible={visibility.isAnswered(MorFødselFormField.dekningsgrad)}>\n                            <StartdatoPermisjonMor\n                                permisjonStartdato={formValues.permisjonStartdato!}\n                                skalIkkeHaUttakFørTermin={formValues.skalIkkeHaUttakFørTermin!}\n                                termindato={termindato}\n                                barn={barn}\n                            />\n                        </Block>\n                        <Block\n                            visible={\n                                søker.erAleneOmOmsorg === false &&\n                                harRettPåForeldrepengerINorge &&\n                                visibility.isAnswered(MorFødselFormField.dekningsgrad)\n                            }\n                        >\n                            <Block\n                                padBottom=\"xl\"\n                                visible={\n                                    antallBarn > 1 &&\n                                    (formValues.permisjonStartdato !== undefined ||\n                                        formValues.skalIkkeHaUttakFørTermin === true)\n                                }\n                            >\n                                <GuidePanel>\n                                    <FormattedMessage\n                                        id=\"uttaksplaninfo.veileder.flerbarnsInformasjon\"\n                                        values={{\n                                            uker: getFlerbarnsuker(formValues.dekningsgrad!, antallBarn),\n                                            navnFar: navnFarMedmor,\n                                            navnMor: navnMor,\n                                        }}\n                                    />\n                                </GuidePanel>\n                            </Block>\n                            <Block\n                                padBottom=\"xl\"\n                                visible={visibility.isVisible(MorFødselFormField.fellesperiodeukerMor)}\n                            >\n                                <FordelingFellesperiodeSpørsmål\n                                    setFieldValue={setFieldValue}\n                                    valgtStønadskonto={valgtStønadskonto}\n                                    valgtFellesperiodeukerMor={formValues.fellesperiodeukerMor}\n                                    mor={navnMor}\n                                    farMedmor={navnFarMedmor}\n                                    annenForelderErFarEllerMedmor={!erFarEllerMedmor}\n                                />\n                            </Block>\n                        </Block>\n                        <Block>\n                            <StepButtonWrapper>\n                                <BackButton\n                                    mellomlagreSøknadOgNaviger={mellomlagreSøknadOgNaviger}\n                                    route={getPreviousStepHref('uttaksplanInfo')}\n                                />\n                                {visibility.areAllQuestionsAnswered() && (\n                                    <Button type=\"submit\" disabled={isSubmitting} loading={isSubmitting}>\n                                        {intlUtils(intl, 'søknad.gåVidere')}\n                                    </Button>\n                                )}\n                            </StepButtonWrapper>\n                        </Block>\n                    </MorFødselFormComponents.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default MorFødsel;\n","enum AdopsjonStartdatoValg {\n    ANKOMST = 'ankomst',\n    OMSORGSOVERTAKELSE = 'omsorgsovertakelse',\n    ANNEN = 'annen',\n}\n\nexport const finnEnum = (valg?: string): AdopsjonStartdatoValg | undefined => {\n    if (valg === AdopsjonStartdatoValg.ANKOMST) {\n        return AdopsjonStartdatoValg.ANKOMST;\n    }\n    if (valg === AdopsjonStartdatoValg.OMSORGSOVERTAKELSE) {\n        return AdopsjonStartdatoValg.OMSORGSOVERTAKELSE;\n    }\n    if (valg === AdopsjonStartdatoValg.ANNEN) {\n        return AdopsjonStartdatoValg.ANNEN;\n    }\n    return undefined;\n};\n\nexport default AdopsjonStartdatoValg;\n","import { YesOrNo, getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\nimport AdopsjonStartdatoValg from './adopsjonStartdatoValg';\n\nexport enum MorFarAdopsjonFormField {\n    harAnnenForelderSøktFP = 'harAnnenForelderSøktFP',\n    dekningsgrad = 'dekningsgrad',\n    startdatoAdopsjonValg = 'startdatoAdopsjonValg',\n    annenStartdatoAdopsjon = 'annenStartdatoAdopsjon',\n    annenForeldersSisteDag = 'annenForeldersSisteDag',\n    søkersFørsteDag = 'søkersFørsteDag',\n    antallUkerFellesperiode = 'antallUkerFellesperiode',\n    antallDagerFellesperiode = 'antallDagerFellesperiode',\n    fellesperiodeukerMor = 'fellesperiodeukerMor',\n}\n\nexport interface MorFarAdopsjonFormData {\n    [MorFarAdopsjonFormField.harAnnenForelderSøktFP]: YesOrNo;\n    [MorFarAdopsjonFormField.dekningsgrad]: string;\n    [MorFarAdopsjonFormField.startdatoAdopsjonValg]: AdopsjonStartdatoValg | undefined;\n    [MorFarAdopsjonFormField.annenStartdatoAdopsjon]: string;\n    [MorFarAdopsjonFormField.annenForeldersSisteDag]: string;\n    [MorFarAdopsjonFormField.søkersFørsteDag]: string;\n    [MorFarAdopsjonFormField.antallUkerFellesperiode]: string;\n    [MorFarAdopsjonFormField.antallDagerFellesperiode]: string;\n    [MorFarAdopsjonFormField.fellesperiodeukerMor]: number | undefined;\n}\n\nexport const MorFarAdopsjonFormComponents = getTypedFormComponents<MorFarAdopsjonFormField, MorFarAdopsjonFormData>();\n","import { MorFarAdopsjonUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport { finnEnum } from './adopsjonStartdatoValg';\nimport { MorFarAdopsjonFormData, MorFarAdopsjonFormField } from './morFarAdopsjonFormConfig';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\nimport { Dekningsgrad, convertYesOrNoOrUndefinedToBoolean } from '@navikt/fp-common';\n\nconst initialMorFarAdopsjonValues: MorFarAdopsjonFormData = {\n    [MorFarAdopsjonFormField.harAnnenForelderSøktFP]: YesOrNo.UNANSWERED,\n    [MorFarAdopsjonFormField.dekningsgrad]: '',\n    [MorFarAdopsjonFormField.startdatoAdopsjonValg]: undefined,\n    [MorFarAdopsjonFormField.annenStartdatoAdopsjon]: '',\n    [MorFarAdopsjonFormField.annenForeldersSisteDag]: '',\n    [MorFarAdopsjonFormField.søkersFørsteDag]: '',\n    [MorFarAdopsjonFormField.antallUkerFellesperiode]: '0',\n    [MorFarAdopsjonFormField.antallDagerFellesperiode]: '0',\n    [MorFarAdopsjonFormField.fellesperiodeukerMor]: undefined,\n};\n\nexport const mapMorFarAdopsjonFormToState = (values: Partial<MorFarAdopsjonFormData>): MorFarAdopsjonUttaksplanInfo => {\n    return {\n        harAnnenForelderSøktFP: convertYesOrNoOrUndefinedToBoolean(values.harAnnenForelderSøktFP)!,\n        startdatoAdopsjonValg: values.startdatoAdopsjonValg!,\n        annenStartdatoAdopsjon: values.annenStartdatoAdopsjon!,\n        annenForeldersSisteDag: values.annenForeldersSisteDag!,\n        søkersFørsteDag: values.søkersFørsteDag!,\n        antallUkerFellesperiode: values.antallUkerFellesperiode!,\n        antallDagerFellesperiode: values.antallDagerFellesperiode!,\n        fellesperiodeukerMor: values.fellesperiodeukerMor,\n    };\n};\n\nexport const getInitialMorFarAdopsjonValues = (\n    lagretUttaksplanInfo: MorFarAdopsjonUttaksplanInfo | undefined,\n    dekningsgrad?: Dekningsgrad,\n): MorFarAdopsjonFormData => {\n    if (lagretUttaksplanInfo) {\n        return {\n            ...lagretUttaksplanInfo,\n            [MorFarAdopsjonFormField.dekningsgrad]: dekningsgrad!,\n            [MorFarAdopsjonFormField.startdatoAdopsjonValg]: finnEnum(lagretUttaksplanInfo.startdatoAdopsjonValg),\n            [MorFarAdopsjonFormField.harAnnenForelderSøktFP]: lagretUttaksplanInfo.harAnnenForelderSøktFP\n                ? YesOrNo.YES\n                : YesOrNo.NO,\n        };\n    }\n\n    return initialMorFarAdopsjonValues;\n};\n","import { QuestionConfig, Questions } from '@navikt/sif-common-question-config';\nimport { hasValue } from '@navikt/fp-common';\nimport { MorFarAdopsjonFormData, MorFarAdopsjonFormField } from './morFarAdopsjonFormConfig';\nimport AdopsjonStartdatoValg from './adopsjonStartdatoValg';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\n\nexport interface MorFarAdopsjonQuestionsPayload extends MorFarAdopsjonFormData {\n    harAnnenForelderRettPåForeldrepengerINorge: boolean | undefined;\n    erAleneOmOmsorg: boolean | undefined;\n}\n\nconst MorFarAdopsjonFormConfig: QuestionConfig<MorFarAdopsjonQuestionsPayload, MorFarAdopsjonFormField> = {\n    [MorFarAdopsjonFormField.harAnnenForelderSøktFP]: {\n        isAnswered: ({ harAnnenForelderSøktFP }) => harAnnenForelderSøktFP !== YesOrNo.UNANSWERED,\n        isIncluded: ({ harAnnenForelderRettPåForeldrepengerINorge }) => !!harAnnenForelderRettPåForeldrepengerINorge,\n    },\n    [MorFarAdopsjonFormField.dekningsgrad]: {\n        isAnswered: ({ dekningsgrad }) => hasValue(dekningsgrad),\n        isIncluded: ({ harAnnenForelderSøktFP, harAnnenForelderRettPåForeldrepengerINorge }) =>\n            harAnnenForelderSøktFP !== YesOrNo.UNANSWERED || !harAnnenForelderRettPåForeldrepengerINorge,\n    },\n    [MorFarAdopsjonFormField.startdatoAdopsjonValg]: {\n        isAnswered: ({ startdatoAdopsjonValg }) => hasValue(startdatoAdopsjonValg),\n        isIncluded: ({ dekningsgrad, harAnnenForelderSøktFP }) =>\n            hasValue(dekningsgrad) && harAnnenForelderSøktFP !== YesOrNo.YES,\n    },\n    [MorFarAdopsjonFormField.annenStartdatoAdopsjon]: {\n        isAnswered: ({ annenStartdatoAdopsjon }) => hasValue(annenStartdatoAdopsjon),\n        isIncluded: ({ dekningsgrad, harAnnenForelderSøktFP, startdatoAdopsjonValg }) =>\n            startdatoAdopsjonValg === AdopsjonStartdatoValg.ANNEN &&\n            hasValue(dekningsgrad) &&\n            harAnnenForelderSøktFP !== YesOrNo.YES,\n    },\n    [MorFarAdopsjonFormField.annenForeldersSisteDag]: {\n        isAnswered: ({ annenForeldersSisteDag }) => hasValue(annenForeldersSisteDag),\n        isIncluded: ({ dekningsgrad, harAnnenForelderSøktFP }) =>\n            hasValue(dekningsgrad) && harAnnenForelderSøktFP === YesOrNo.YES,\n    },\n    [MorFarAdopsjonFormField.søkersFørsteDag]: {\n        isAnswered: ({ søkersFørsteDag }) => hasValue(søkersFørsteDag),\n        isIncluded: ({ annenForeldersSisteDag, harAnnenForelderSøktFP }) =>\n            hasValue(annenForeldersSisteDag) && harAnnenForelderSøktFP === YesOrNo.YES,\n    },\n    [MorFarAdopsjonFormField.antallDagerFellesperiode]: {\n        isAnswered: ({ antallDagerFellesperiode }) => hasValue(antallDagerFellesperiode),\n        isIncluded: ({ søkersFørsteDag }) => hasValue(søkersFørsteDag),\n    },\n    [MorFarAdopsjonFormField.antallUkerFellesperiode]: {\n        isAnswered: ({ antallUkerFellesperiode }) => hasValue(antallUkerFellesperiode),\n        isIncluded: ({ søkersFørsteDag }) => hasValue(søkersFørsteDag),\n    },\n    [MorFarAdopsjonFormField.fellesperiodeukerMor]: {\n        isAnswered: ({ fellesperiodeukerMor }) => hasValue(fellesperiodeukerMor),\n        isIncluded: ({\n            startdatoAdopsjonValg,\n            harAnnenForelderSøktFP,\n            harAnnenForelderRettPåForeldrepengerINorge,\n            erAleneOmOmsorg,\n        }) =>\n            startdatoAdopsjonValg !== undefined &&\n            harAnnenForelderSøktFP !== YesOrNo.YES &&\n            !!harAnnenForelderRettPåForeldrepengerINorge &&\n            erAleneOmOmsorg === false,\n    },\n};\n\nexport const morFarAdopsjonQuestionsConfig = Questions<MorFarAdopsjonQuestionsPayload, MorFarAdopsjonFormField>(\n    MorFarAdopsjonFormConfig,\n);\n","import { isISODateString } from '@navikt/ds-datepicker';\nimport { intlUtils } from '@navikt/fp-common';\nimport { IntlShape } from 'react-intl';\n\nexport const validateErAnnenStartdatoAdopsjonGyldig = (intl: IntlShape) => (annenStartdatoAdopsjon: string) => {\n    if (!isISODateString(annenStartdatoAdopsjon)) {\n        return intlUtils(intl, 'valideringsfeil.uttaksplaninfo.startdatoAdopsjon.annenDato.gyldigDato');\n    }\n\n    return undefined;\n};\n","import { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport {\n    Barn,\n    Block,\n    ISOStringToDate,\n    formaterDatoUtenDag,\n    hasValue,\n    intlUtils,\n    isAdoptertAnnetBarn,\n    isAdoptertBarn,\n    uttaksplanDatoavgrensninger,\n} from '@navikt/fp-common';\nimport { MorFarAdopsjonFormComponents, MorFarAdopsjonFormField } from './morFarAdopsjonFormConfig';\nimport { getFamiliehendelsedato } from 'app/utils/barnUtils';\nimport { validateErAnnenStartdatoAdopsjonGyldig } from './validation/morFarAdopsjonValidering';\nimport AdopsjonStartdatoValg from './adopsjonStartdatoValg';\nimport { DatepickerDateRange } from '@navikt/ds-datepicker';\nimport { DateRange } from '@navikt/sif-common-formik-ds/lib';\nimport { assertUnreachable } from '@navikt/fp-common/src/common/utils/globalUtil';\n\nexport const finnStartdatoAdopsjon = (\n    startdatoAdopsjonValg: AdopsjonStartdatoValg,\n    annenStartdatoAdopsjon?: string,\n    adopsjonsdato?: string,\n    ankomstdato?: string,\n    søkersFørsteDag?: string,\n): string => {\n    if (hasValue(søkersFørsteDag)) {\n        return søkersFørsteDag!;\n    }\n\n    switch (startdatoAdopsjonValg) {\n        case AdopsjonStartdatoValg.ANKOMST:\n            return ankomstdato!;\n        case AdopsjonStartdatoValg.OMSORGSOVERTAKELSE:\n            return adopsjonsdato!;\n        case AdopsjonStartdatoValg.ANNEN:\n            return annenStartdatoAdopsjon!;\n        default:\n            return assertUnreachable(startdatoAdopsjonValg, 'Startdato for adopsjon er ikke valgt');\n    }\n};\n\nconst konverterStringTilDate = (invalidDateRanges?: DatepickerDateRange[]): DateRange[] | undefined => {\n    if (!invalidDateRanges) {\n        return undefined;\n    }\n\n    return invalidDateRanges.map((r) => ({\n        from: ISOStringToDate(r.from)!,\n        to: ISOStringToDate(r.to)!,\n    }));\n};\n\ninterface Props {\n    valgtStartdatoAdopsjon?: AdopsjonStartdatoValg;\n    barn: Barn;\n}\n\nconst StartdatoAdopsjon: FunctionComponent<Props> = ({ valgtStartdatoAdopsjon, barn }) => {\n    const intl = useIntl();\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n\n    const radios = [];\n    if (isAdoptertAnnetBarn(barn) && barn.ankomstdato) {\n        radios.push({\n            label: intlUtils(intl, 'uttaksplaninfo.startdatoAdopsjon.alternativ.ankomst', {\n                dato: formaterDatoUtenDag(barn.ankomstdato),\n            }),\n            value: AdopsjonStartdatoValg.ANKOMST,\n        });\n    }\n\n    if (isAdoptertBarn(barn)) {\n        radios.push({\n            label: intlUtils(intl, 'uttaksplaninfo.startdatoAdopsjon.alternativ.omsorgsovertakelse', {\n                dato: formaterDatoUtenDag(barn.adopsjonsdato),\n            }),\n            value: AdopsjonStartdatoValg.OMSORGSOVERTAKELSE,\n        });\n    }\n\n    radios.push({\n        label: intlUtils(intl, 'uttaksplaninfo.startdatoAdopsjon.alternativ.annen'),\n        value: AdopsjonStartdatoValg.ANNEN,\n    });\n\n    const datoAvgrensninger = uttaksplanDatoavgrensninger.startdatoPermisjonAdopsjon(familiehendelsesdato);\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <MorFarAdopsjonFormComponents.RadioGroup\n                    name={MorFarAdopsjonFormField.startdatoAdopsjonValg}\n                    radios={radios}\n                    legend={intlUtils(intl, 'uttaksplaninfo.startdatoAdopsjon.spørsmål')}\n                />\n            </Block>\n            <Block padBottom=\"l\" visible={valgtStartdatoAdopsjon === AdopsjonStartdatoValg.ANNEN}>\n                <MorFarAdopsjonFormComponents.DatePicker\n                    name={MorFarAdopsjonFormField.annenStartdatoAdopsjon}\n                    label={intlUtils(intl, 'uttaksplaninfo.startdatoAdopsjon.annenDato.spørsmål')}\n                    minDate={datoAvgrensninger.minDate ? ISOStringToDate(datoAvgrensninger.minDate) : undefined}\n                    maxDate={datoAvgrensninger.maxDate ? ISOStringToDate(datoAvgrensninger.maxDate) : undefined}\n                    disabledDateRanges={konverterStringTilDate(datoAvgrensninger.invalidDateRanges)}\n                    disableWeekend={datoAvgrensninger.weekendsNotSelectable}\n                    validate={validateErAnnenStartdatoAdopsjonGyldig(intl)}\n                    placeholder={'dd.mm.åååå'}\n                />\n            </Block>\n        </>\n    );\n};\n\nexport default StartdatoAdopsjon;\n","import { FunctionComponent, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport dayjs from 'dayjs';\nimport { notEmpty } from '@navikt/fp-validation';\nimport { YesOrNo, dateToISOString } from '@navikt/sif-common-formik-ds/lib';\nimport { Button, GuidePanel } from '@navikt/ds-react';\nimport {\n    Block,\n    Forelder,\n    ISOStringToDate,\n    StepButtonWrapper,\n    Uttaksdagen,\n    formaterNavn,\n    getFlerbarnsuker,\n    getNavnGenitivEierform,\n    intlUtils,\n    isAdoptertAnnetBarn,\n    isAdoptertBarn,\n    isAdoptertStebarn,\n    isAnnenForelderOppgitt,\n    isFarEllerMedmor,\n} from '@navikt/fp-common';\nimport { getFamiliehendelsedato } from 'app/utils/barnUtils';\nimport { getValgtStønadskontoFor80Og100Prosent } from 'app/utils/stønadskontoUtils';\nimport { TilgjengeligeStønadskontoerDTO } from 'app/types/TilgjengeligeStønadskontoerDTO';\nimport { getInitialMorFarAdopsjonValues, mapMorFarAdopsjonFormToState } from './morFarAdopsjonUtils';\nimport { dateIsSameOrAfter, findEldsteDato } from 'app/utils/dateUtils';\nimport {\n    MorFarAdopsjonFormComponents,\n    MorFarAdopsjonFormData,\n    MorFarAdopsjonFormField,\n} from './morFarAdopsjonFormConfig';\nimport { MorFarAdopsjonQuestionsPayload, morFarAdopsjonQuestionsConfig } from './morFarAdopsjonQuestionsConfig';\nimport { getTilgjengeligeDager } from '../../tilgjengeligeDagerGraf/tilgjengeligeDagerUtils';\nimport TilgjengeligeDagerGraf from '../../tilgjengeligeDagerGraf/TilgjengeligeDagerGraf';\nimport StartdatoAdopsjon, { finnStartdatoAdopsjon } from './StartdatoAdopsjon';\nimport MorsSisteDagSpørsmål from '../spørsmål/MorsSisteDagSpørsmål';\nimport FarMedmorsFørsteDag from '../spørsmål/FarMedmorsFørsteDag';\nimport AntallUkerOgDagerFellesperiodeFarMedmorSpørsmål from '../spørsmål/AntallUkerOgDagerFellesperiodeFarMedmorSpørsmål';\nimport FordelingFellesperiodeSpørsmål from '../../fordelingFellesperiode/FordelingFellesperiodeSpørsmål';\nimport SøknadRoutes from 'app/routes/routes';\nimport DekningsgradSpørsmål from '../spørsmål/DekningsgradSpørsmål';\nimport { getDekningsgradFromString } from 'app/utils/getDekningsgradFromString';\nimport { lagUttaksplan } from 'app/utils/uttaksplan/lagUttaksplan';\nimport { getAntallUker } from 'app/steps/uttaksplan-info/utils/stønadskontoer';\nimport AdopsjonStartdatoValg from './adopsjonStartdatoValg';\nimport { getPreviousStepHref } from 'app/steps/stepsConfig';\nimport { getHarAktivitetskravIPeriodeUtenUttak } from '@navikt/uttaksplan';\nimport { ContextDataType, useContextGetData, useContextSaveData } from 'app/context/FpDataContext';\nimport Person from '@navikt/fp-common/src/common/types/Person';\nimport { MorFarAdopsjonUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport BackButton from 'app/steps/BackButton';\nimport { UttaksplanMetaData } from 'app/types/UttaksplanMetaData';\n\ninterface Props {\n    tilgjengeligeStønadskontoer100DTO: TilgjengeligeStønadskontoerDTO;\n    tilgjengeligeStønadskontoer80DTO: TilgjengeligeStønadskontoerDTO;\n    erEndringssøknad: boolean;\n    person: Person;\n    mellomlagreSøknadOgNaviger: () => void;\n    oppdaterBarnOgLagreUttaksplandata: (metadata: UttaksplanMetaData) => void;\n}\n\nconst MorFarAdopsjon: FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer80DTO,\n    tilgjengeligeStønadskontoer100DTO,\n    erEndringssøknad,\n    person,\n    mellomlagreSøknadOgNaviger,\n    oppdaterBarnOgLagreUttaksplandata,\n}) => {\n    const intl = useIntl();\n    const [isSubmitting, setIsSubmitting] = useState(false);\n\n    const søkersituasjon = notEmpty(useContextGetData(ContextDataType.SØKERSITUASJON));\n    const barn = notEmpty(useContextGetData(ContextDataType.OM_BARNET));\n    const annenForelder = notEmpty(useContextGetData(ContextDataType.ANNEN_FORELDER));\n    const søker = notEmpty(useContextGetData(ContextDataType.SØKER));\n    const barnFraNesteSak = useContextGetData(ContextDataType.BARN_FRA_NESTE_SAK);\n    const uttaksplanMetadata = useContextGetData(ContextDataType.UTTAKSPLAN_METADATA);\n    // TODO (TOR) fjern as\n    const uttaksplanInfo = useContextGetData(ContextDataType.UTTAKSPLAN_INFO) as MorFarAdopsjonUttaksplanInfo;\n\n    const oppdaterAppRoute = useContextSaveData(ContextDataType.APP_ROUTE);\n    const oppdaterUttaksplanInfo = useContextSaveData(ContextDataType.UTTAKSPLAN_INFO);\n    const oppdaterUttaksplan = useContextSaveData(ContextDataType.UTTAKSPLAN);\n\n    const { fornavn, mellomnavn, etternavn } = person;\n\n    const erAdopsjon = søkersituasjon.situasjon === 'adopsjon';\n    const søkerErAleneOmOmsorg = !!søker.erAleneOmOmsorg;\n    const annenForelderOppgittIkkeAleneOmOmsorg = isAnnenForelderOppgitt(annenForelder)\n        ? annenForelder.harRettPåForeldrepengerINorge !== undefined ||\n          annenForelder.harRettPåForeldrepengerIEØS !== undefined\n        : false;\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const bareFarMedmorHarRett =\n        erFarEllerMedmor &&\n        isAnnenForelderOppgitt(annenForelder) &&\n        !søkerErAleneOmOmsorg &&\n        !annenForelder.harRettPåForeldrepengerINorge &&\n        !annenForelder.harRettPåForeldrepengerIEØS;\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const familiehendelsesdatoDate = ISOStringToDate(familiehendelsesdato);\n    const førsteUttaksdagNesteBarnsSak =\n        barnFraNesteSak !== undefined ? barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n\n    const shouldRender =\n        erAdopsjon && (annenForelderOppgittIkkeAleneOmOmsorg || annenForelder.kanIkkeOppgis || søkerErAleneOmOmsorg);\n\n    const onSubmit = (values: Partial<MorFarAdopsjonFormData>) => {\n        setIsSubmitting(true);\n\n        oppdaterUttaksplanInfo(mapMorFarAdopsjonFormToState(values));\n\n        const submissionValues = mapMorFarAdopsjonFormToState(values);\n        const barnAdopsjonsdato = isAdoptertBarn(barn) ? barn.adopsjonsdato : undefined;\n\n        const startdato = finnStartdatoAdopsjon(\n            values.startdatoAdopsjonValg!,\n            values.annenStartdatoAdopsjon,\n            dateToISOString(barnAdopsjonsdato),\n            dateToISOString(ankomstdato),\n            values.søkersFørsteDag,\n        );\n        const uttaksplan = lagUttaksplan({\n            annenForelderErUfør: erMorUfør,\n            erDeltUttak,\n            erEndringssøknad,\n            erEnkelEndringssøknad: erEndringssøknad,\n            familiehendelsesdato: familiehendelsesdatoDate!,\n            førsteUttaksdagEtterSeksUker: Uttaksdagen(Uttaksdagen(familiehendelsesdatoDate!).denneEllerNeste()).leggTil(\n                30,\n            ),\n            situasjon: søkersituasjon.situasjon,\n            søkerErFarEllerMedmor: erFarEllerMedmor,\n            søkerHarMidlertidigOmsorg: false,\n            tilgjengeligeStønadskontoer: tilgjengeligeStønadskontoer[getDekningsgradFromString(values.dekningsgrad)],\n            uttaksplanSkjema: {\n                fellesperiodeukerMor: submissionValues.fellesperiodeukerMor,\n                startdatoPermisjon: startdato,\n                antallDagerFellesperiodeFarMedmor: parseInt(submissionValues.antallDagerFellesperiode),\n                antallUkerFellesperiodeFarMedmor: parseInt(submissionValues.antallUkerFellesperiode),\n                harAnnenForelderSøktFP: submissionValues.harAnnenForelderSøktFP,\n                morSinSisteUttaksdag: submissionValues.annenForeldersSisteDag,\n                farSinFørsteUttaksdag: submissionValues.søkersFørsteDag,\n            },\n            bareFarMedmorHarRett: bareFarMedmorHarRett,\n            termindato: undefined,\n            harAktivitetskravIPeriodeUtenUttak: getHarAktivitetskravIPeriodeUtenUttak({\n                erDeltUttak,\n                morHarRett: !bareFarMedmorHarRett,\n                søkerErAleneOmOmsorg,\n            }),\n            førsteUttaksdagNesteBarnsSak,\n        });\n\n        oppdaterUttaksplan(uttaksplan);\n\n        oppdaterBarnOgLagreUttaksplandata({\n            ...uttaksplanMetadata,\n            dekningsgrad: getDekningsgradFromString(values.dekningsgrad),\n            antallUkerIUttaksplan: getAntallUker(\n                tilgjengeligeStønadskontoer[values.dekningsgrad! === '100' ? 100 : 80],\n            ),\n        });\n\n        oppdaterAppRoute(SøknadRoutes.UTTAKSPLAN);\n\n        mellomlagreSøknadOgNaviger();\n    };\n\n    if (!shouldRender || !isAdoptertBarn(barn)) {\n        return null;\n    }\n\n    const erSøkerMor = !erFarEllerMedmor;\n\n    const oppgittAnnenForelder = isAnnenForelderOppgitt(annenForelder) ? annenForelder : undefined;\n    const harAnnenForelderRettPåForeldrepengerINorge = !!oppgittAnnenForelder?.harRettPåForeldrepengerINorge;\n    const fornavnAnnenForeldre = oppgittAnnenForelder?.fornavn;\n    const erAnnenPartUfør = !!oppgittAnnenForelder?.erUfør;\n    const navnAnnenPart = oppgittAnnenForelder\n        ? formaterNavn(oppgittAnnenForelder.fornavn, oppgittAnnenForelder.etternavn, true)\n        : '';\n\n    const erDeltUttak = isAnnenForelderOppgitt(annenForelder)\n        ? !!annenForelder.harRettPåForeldrepengerINorge || !!annenForelder.harRettPåForeldrepengerIEØS\n        : false;\n\n    const erMorUfør = erSøkerMor ? false : erAnnenPartUfør;\n\n    const navnSøker = formaterNavn(fornavn, etternavn, true, mellomnavn);\n    const navnMor = erSøkerMor ? navnSøker : navnAnnenPart;\n    const navnFarMedmor = erSøkerMor ? navnAnnenPart : navnSøker;\n\n    const erAdoptertIUtlandet = isAdoptertAnnetBarn(barn) ? barn.adoptertIUtlandet : false;\n    const ankomstdato = isAdoptertAnnetBarn(barn) ? barn.ankomstdato : undefined;\n    const antallBarn = barn.antallBarn;\n    const latestDate =\n        ankomstdato !== undefined && barn.adopsjonsdato !== undefined\n            ? dateToISOString(findEldsteDato([ankomstdato, barn.adopsjonsdato])) // todo - sjekk logikk her\n            : barn.adopsjonsdato;\n\n    const tilgjengeligeStønadskontoer = getValgtStønadskontoFor80Og100Prosent(\n        tilgjengeligeStønadskontoer80DTO,\n        tilgjengeligeStønadskontoer100DTO,\n    );\n\n    return (\n        <MorFarAdopsjonFormComponents.FormikWrapper\n            initialValues={getInitialMorFarAdopsjonValues(uttaksplanInfo, uttaksplanMetadata?.dekningsgrad)}\n            onSubmit={onSubmit}\n            renderForm={({ values: formValues, setFieldValue }) => {\n                const visibility = morFarAdopsjonQuestionsConfig.getVisbility({\n                    ...formValues,\n                    harAnnenForelderRettPåForeldrepengerINorge,\n                    erAleneOmOmsorg: søker.erAleneOmOmsorg,\n                } as MorFarAdopsjonQuestionsPayload);\n\n                const valgtStønadskonto = tilgjengeligeStønadskontoer[formValues.dekningsgrad === '100' ? 100 : 80];\n\n                const tilgjengeligeDager = valgtStønadskonto\n                    ? getTilgjengeligeDager(valgtStønadskonto, false, Forelder.farMedmor)\n                    : undefined;\n\n                return (\n                    <MorFarAdopsjonFormComponents.Form includeButtons={false} includeValidationSummary={true}>\n                        <Block\n                            padBottom=\"xl\"\n                            visible={visibility.isIncluded(MorFarAdopsjonFormField.harAnnenForelderSøktFP)}\n                        >\n                            <MorFarAdopsjonFormComponents.YesOrNoQuestion\n                                name={MorFarAdopsjonFormField.harAnnenForelderSøktFP}\n                                legend={intlUtils(intl, 'uttaksplaninfo.spørsmål.harAnnenForelderSøktFP.label', {\n                                    navnAnnenForelder: fornavnAnnenForeldre,\n                                })}\n                            />\n                        </Block>\n                        {formValues.harAnnenForelderSøktFP === YesOrNo.YES && (\n                            <Block padBottom=\"xl\">\n                                <GuidePanel>\n                                    <FormattedMessage\n                                        id=\"uttaksplaninfo.informasjon.tilAnnenForelder\"\n                                        values={{\n                                            navn: getNavnGenitivEierform(fornavnAnnenForeldre!, intl.locale),\n                                        }}\n                                    />\n                                </GuidePanel>\n                            </Block>\n                        )}\n                        <Block padBottom=\"xl\" visible={visibility.isIncluded(MorFarAdopsjonFormField.dekningsgrad)}>\n                            <DekningsgradSpørsmål\n                                FormKomponent={MorFarAdopsjonFormComponents}\n                                dekningsgradFeltNavn={MorFarAdopsjonFormField.dekningsgrad}\n                                tilgjengeligeStønadskontoer={tilgjengeligeStønadskontoer}\n                                erDeltUttak={erDeltUttak}\n                            />\n                        </Block>\n                        <Block padBottom=\"xl\" visible={visibility.isAnswered(MorFarAdopsjonFormField.dekningsgrad)}>\n                            {tilgjengeligeDager && (\n                                <TilgjengeligeDagerGraf\n                                    erDeltUttak={erDeltUttak}\n                                    erFarEllerMedmor={!erSøkerMor}\n                                    navnFarMedmor={navnFarMedmor}\n                                    navnMor={navnMor}\n                                    tilgjengeligeDager={tilgjengeligeDager}\n                                />\n                            )}\n                        </Block>\n                        <Block visible={visibility.isIncluded(MorFarAdopsjonFormField.startdatoAdopsjonValg)}>\n                            <StartdatoAdopsjon valgtStartdatoAdopsjon={formValues.startdatoAdopsjonValg} barn={barn} />\n                        </Block>\n                        <Block\n                            padBottom=\"xl\"\n                            visible={visibility.isIncluded(MorFarAdopsjonFormField.annenForeldersSisteDag)}\n                        >\n                            <MorsSisteDagSpørsmål\n                                FormComponents={MorFarAdopsjonFormComponents}\n                                fieldName={MorFarAdopsjonFormField.annenForeldersSisteDag}\n                                navnMor={navnAnnenPart}\n                                familiehendelsesdato={familiehendelsesdato}\n                            />\n                        </Block>\n                        <Block padBottom=\"xl\" visible={visibility.isIncluded(MorFarAdopsjonFormField.søkersFørsteDag)}>\n                            <FarMedmorsFørsteDag\n                                FormComponents={MorFarAdopsjonFormComponents}\n                                fieldName={MorFarAdopsjonFormField.søkersFørsteDag}\n                                familiehendelsesdato={familiehendelsesdatoDate!}\n                                setFieldValue={setFieldValue}\n                                morsSisteDag={ISOStringToDate(formValues.annenForeldersSisteDag)}\n                                navnMor={navnMor}\n                                termindato={undefined}\n                                situasjon={søkersituasjon.situasjon}\n                                morHarRettTilForeldrepengerIEØS={false}\n                            />\n                        </Block>\n                        <Block\n                            padBottom=\"xl\"\n                            visible={\n                                visibility.isAnswered(MorFarAdopsjonFormField.søkersFørsteDag) &&\n                                !dateIsSameOrAfter(\n                                    ISOStringToDate(formValues.annenForeldersSisteDag),\n                                    ISOStringToDate(formValues.søkersFørsteDag),\n                                ) &&\n                                formValues.harAnnenForelderSøktFP === YesOrNo.YES\n                            }\n                        >\n                            {tilgjengeligeDager && (\n                                <AntallUkerOgDagerFellesperiodeFarMedmorSpørsmål\n                                    FormComponents={MorFarAdopsjonFormComponents}\n                                    ukerFieldName={MorFarAdopsjonFormField.antallUkerFellesperiode}\n                                    dagerFieldName={MorFarAdopsjonFormField.antallDagerFellesperiode}\n                                    antallDager={formValues.antallDagerFellesperiode!}\n                                    antallUker={formValues.antallUkerFellesperiode!}\n                                    setFieldValue={setFieldValue}\n                                    ukerMedFellesperiode={tilgjengeligeDager.dagerFelles / 5}\n                                />\n                            )}\n                        </Block>\n                        <Block\n                            padBottom=\"xl\"\n                            visible={\n                                formValues.startdatoAdopsjonValg === AdopsjonStartdatoValg.ANNEN &&\n                                dayjs(latestDate).isBefore(\n                                    dayjs(\n                                        finnStartdatoAdopsjon(\n                                            formValues.startdatoAdopsjonValg,\n                                            formValues.annenStartdatoAdopsjon,\n                                            dateToISOString(barn.adopsjonsdato),\n                                            dateToISOString(ankomstdato),\n                                            formValues.søkersFørsteDag,\n                                        ),\n                                    ),\n                                    'day',\n                                ) &&\n                                !isAdoptertStebarn(barn) &&\n                                !erDeltUttak\n                            }\n                        >\n                            <GuidePanel>\n                                <FormattedMessage\n                                    id={\n                                        erAdoptertIUtlandet === false\n                                            ? 'uttaksplaninfo.info.ikkeAdoptertIUtlandet'\n                                            : 'uttaksplaninfo.info.adoptertIUtlandet'\n                                    }\n                                />\n                            </GuidePanel>\n                        </Block>\n                        <Block visible={søker.erAleneOmOmsorg === false && harAnnenForelderRettPåForeldrepengerINorge}>\n                            <Block\n                                padBottom=\"xl\"\n                                visible={\n                                    antallBarn > 1 &&\n                                    formValues.startdatoAdopsjonValg !== undefined &&\n                                    formValues.harAnnenForelderSøktFP !== YesOrNo.YES\n                                }\n                            >\n                                <GuidePanel>\n                                    <FormattedMessage\n                                        id=\"uttaksplaninfo.veileder.flerbarnsInformasjon\"\n                                        values={{\n                                            uker: getFlerbarnsuker(formValues.dekningsgrad!, antallBarn),\n                                            navnFar: navnFarMedmor,\n                                            navnMor: navnMor,\n                                        }}\n                                    />\n                                </GuidePanel>\n                            </Block>\n                            <Block\n                                padBottom=\"xl\"\n                                visible={visibility.isIncluded(MorFarAdopsjonFormField.fellesperiodeukerMor)}\n                            >\n                                <FordelingFellesperiodeSpørsmål\n                                    setFieldValue={setFieldValue}\n                                    valgtStønadskonto={valgtStønadskonto}\n                                    valgtFellesperiodeukerMor={formValues.fellesperiodeukerMor}\n                                    mor={navnMor}\n                                    farMedmor={navnFarMedmor}\n                                    annenForelderErFarEllerMedmor={!erSøkerMor}\n                                />\n                            </Block>\n                        </Block>\n                        <Block>\n                            <StepButtonWrapper>\n                                <BackButton\n                                    mellomlagreSøknadOgNaviger={mellomlagreSøknadOgNaviger}\n                                    route={getPreviousStepHref('uttaksplanInfo')}\n                                />\n                                {visibility.areAllQuestionsAnswered() && (\n                                    <Button type=\"submit\" disabled={isSubmitting} loading={isSubmitting}>\n                                        {intlUtils(intl, 'søknad.gåVidere')}\n                                    </Button>\n                                )}\n                            </StepButtonWrapper>\n                        </Block>\n                    </MorFarAdopsjonFormComponents.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default MorFarAdopsjon;\n","import { getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\nimport AdopsjonStartdatoValg from '../mor-far-adopsjon/adopsjonStartdatoValg';\n\nexport enum MorFarAdopsjonAnnenForelderHarRettIEØSFormField {\n    dekningsgrad = 'dekningsgrad',\n    startdatoAdopsjonValg = 'startdatoAdopsjonValg',\n    annenStartdatoAdopsjon = 'annenStartdatoAdopsjon',\n}\n\nexport interface MorFarAdopsjonAnnenForelderHarRettIEØSFormData {\n    [MorFarAdopsjonAnnenForelderHarRettIEØSFormField.dekningsgrad]: string;\n    [MorFarAdopsjonAnnenForelderHarRettIEØSFormField.startdatoAdopsjonValg]: AdopsjonStartdatoValg | undefined;\n    [MorFarAdopsjonAnnenForelderHarRettIEØSFormField.annenStartdatoAdopsjon]: string | undefined;\n}\n\nexport const MorFarAdopsjonAnnenForelderHarRettIEØSFormComponents = getTypedFormComponents<\n    MorFarAdopsjonAnnenForelderHarRettIEØSFormField,\n    MorFarAdopsjonAnnenForelderHarRettIEØSFormData\n>();\n","import { QuestionConfig, Questions } from '@navikt/sif-common-question-config';\nimport { hasValue } from '@navikt/fp-common';\nimport {\n    MorFarAdopsjonAnnenForelderHarRettIEØSFormData,\n    MorFarAdopsjonAnnenForelderHarRettIEØSFormField,\n} from './morFarAdopsjonAnnenForelderHarRettIEØSFormConfig';\nimport AdopsjonStartdatoValg from '../mor-far-adopsjon/adopsjonStartdatoValg';\nexport interface MorFarAdopsjonAnnenForelderHarRettIEØSQuestionsPayload\n    extends MorFarAdopsjonAnnenForelderHarRettIEØSFormData {\n    erFarEllerMedmor: boolean;\n}\nconst MorFarAdopsjonAnnenForelderHarRettIEØSFormConfig: QuestionConfig<\n    MorFarAdopsjonAnnenForelderHarRettIEØSQuestionsPayload,\n    MorFarAdopsjonAnnenForelderHarRettIEØSFormField\n> = {\n    [MorFarAdopsjonAnnenForelderHarRettIEØSFormField.dekningsgrad]: {\n        isAnswered: ({ dekningsgrad }) => hasValue(dekningsgrad),\n        isIncluded: () => true,\n    },\n    [MorFarAdopsjonAnnenForelderHarRettIEØSFormField.startdatoAdopsjonValg]: {\n        isAnswered: ({ startdatoAdopsjonValg }) => hasValue(startdatoAdopsjonValg),\n        isIncluded: ({ dekningsgrad }) => hasValue(dekningsgrad),\n    },\n    [MorFarAdopsjonAnnenForelderHarRettIEØSFormField.annenStartdatoAdopsjon]: {\n        isAnswered: ({ annenStartdatoAdopsjon }) => hasValue(annenStartdatoAdopsjon),\n        isIncluded: ({ dekningsgrad, startdatoAdopsjonValg }) =>\n            startdatoAdopsjonValg === AdopsjonStartdatoValg.ANNEN && hasValue(dekningsgrad),\n    },\n};\nexport const morFarAdopsjonAnnenForelderHarRettIEØSQuestionsConfig = Questions<\n    MorFarAdopsjonAnnenForelderHarRettIEØSQuestionsPayload,\n    MorFarAdopsjonAnnenForelderHarRettIEØSFormField\n>(MorFarAdopsjonAnnenForelderHarRettIEØSFormConfig);\n","import { MorFarAdopsjonAnnenForelderHarRettIEØSUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport { finnEnum } from '../mor-far-adopsjon/adopsjonStartdatoValg';\nimport {\n    MorFarAdopsjonAnnenForelderHarRettIEØSFormField,\n    MorFarAdopsjonAnnenForelderHarRettIEØSFormData,\n} from './morFarAdopsjonAnnenForelderHarRettIEØSFormConfig';\nimport { Dekningsgrad } from '@navikt/fp-common';\n\nconst initialMorFarAdopsjonAnnenForelderHarRettIEØSValues: MorFarAdopsjonAnnenForelderHarRettIEØSFormData = {\n    [MorFarAdopsjonAnnenForelderHarRettIEØSFormField.dekningsgrad]: '',\n    [MorFarAdopsjonAnnenForelderHarRettIEØSFormField.startdatoAdopsjonValg]: undefined,\n    [MorFarAdopsjonAnnenForelderHarRettIEØSFormField.annenStartdatoAdopsjon]: '',\n};\nexport const mapMorFarAdopsjonAnnenForelderHarRettIEØSFormToState = (\n    values: Partial<MorFarAdopsjonAnnenForelderHarRettIEØSFormData>,\n): MorFarAdopsjonAnnenForelderHarRettIEØSUttaksplanInfo => {\n    return {\n        dekningsgrad: values.dekningsgrad!,\n        startdatoAdopsjonValg: values.startdatoAdopsjonValg!,\n        annenStartdatoAdopsjon: values.annenStartdatoAdopsjon!,\n    };\n};\nexport const getInitialMorFarAdopsjonAnnenForelderHarRettIEØSValues = (\n    lagretUttaksplanInfo: MorFarAdopsjonAnnenForelderHarRettIEØSUttaksplanInfo | undefined,\n    dekningsgrad?: Dekningsgrad,\n): MorFarAdopsjonAnnenForelderHarRettIEØSFormData => {\n    if (lagretUttaksplanInfo) {\n        return {\n            ...lagretUttaksplanInfo,\n            [MorFarAdopsjonAnnenForelderHarRettIEØSFormField.dekningsgrad]: dekningsgrad!,\n            [MorFarAdopsjonAnnenForelderHarRettIEØSFormField.startdatoAdopsjonValg]: finnEnum(\n                lagretUttaksplanInfo.startdatoAdopsjonValg,\n            ),\n        };\n    }\n    return initialMorFarAdopsjonAnnenForelderHarRettIEØSValues;\n};\n","import { FunctionComponent, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport dayjs from 'dayjs';\nimport { dateToISOString } from '@navikt/sif-common-formik-ds/lib';\nimport { Button, GuidePanel } from '@navikt/ds-react';\nimport { getHarAktivitetskravIPeriodeUtenUttak } from '@navikt/uttaksplan';\nimport { notEmpty } from '@navikt/fp-validation';\nimport Person from '@navikt/fp-common/src/common/types/Person';\nimport {\n    Block,\n    ISOStringToDate,\n    StepButtonWrapper,\n    Uttaksdagen,\n    formaterNavn,\n    getFlerbarnsuker,\n    intlUtils,\n    isAdoptertAnnetBarn,\n    isAdoptertBarn,\n    isAdoptertStebarn,\n    isAnnenForelderOppgitt,\n    isFarEllerMedmor,\n} from '@navikt/fp-common';\nimport { getFamiliehendelsedato } from 'app/utils/barnUtils';\nimport { getValgtStønadskontoFor80Og100Prosent } from 'app/utils/stønadskontoUtils';\nimport { TilgjengeligeStønadskontoerDTO } from 'app/types/TilgjengeligeStønadskontoerDTO';\nimport { findEldsteDato } from 'app/utils/dateUtils';\nimport SøknadRoutes from 'app/routes/routes';\nimport { MorFarAdopsjonAnnenForelderHarRettIEØSUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport DekningsgradSpørsmål from '../spørsmål/DekningsgradSpørsmål';\nimport { getDekningsgradFromString } from 'app/utils/getDekningsgradFromString';\nimport { lagUttaksplan } from 'app/utils/uttaksplan/lagUttaksplan';\nimport { getAntallUker } from 'app/steps/uttaksplan-info/utils/stønadskontoer';\nimport StartdatoAdopsjon, { finnStartdatoAdopsjon } from '../mor-far-adopsjon/StartdatoAdopsjon';\nimport {\n    morFarAdopsjonAnnenForelderHarRettIEØSQuestionsConfig,\n    MorFarAdopsjonAnnenForelderHarRettIEØSQuestionsPayload,\n} from './morFarAdopsjonAnnenForelderHarRettIEØSQuestionsConfig';\nimport {\n    MorFarAdopsjonAnnenForelderHarRettIEØSFormComponents,\n    MorFarAdopsjonAnnenForelderHarRettIEØSFormData,\n    MorFarAdopsjonAnnenForelderHarRettIEØSFormField,\n} from './morFarAdopsjonAnnenForelderHarRettIEØSFormConfig';\nimport {\n    getInitialMorFarAdopsjonAnnenForelderHarRettIEØSValues,\n    mapMorFarAdopsjonAnnenForelderHarRettIEØSFormToState,\n} from './morFarAdopsjonAnnenForelderHarRettIEØSUtils';\nimport AdopsjonStartdatoValg from '../mor-far-adopsjon/adopsjonStartdatoValg';\nimport { getPreviousStepHref } from 'app/steps/stepsConfig';\nimport { ContextDataType, useContextGetData, useContextSaveData } from 'app/context/FpDataContext';\nimport BackButton from 'app/steps/BackButton';\nimport { UttaksplanMetaData } from 'app/types/UttaksplanMetaData';\n\ninterface Props {\n    tilgjengeligeStønadskontoer100DTO: TilgjengeligeStønadskontoerDTO;\n    tilgjengeligeStønadskontoer80DTO: TilgjengeligeStønadskontoerDTO;\n    erEndringssøknad: boolean;\n    person: Person;\n    mellomlagreSøknadOgNaviger: () => void;\n    oppdaterBarnOgLagreUttaksplandata: (metadata: UttaksplanMetaData) => void;\n}\n\nconst MorFarAdopsjonAnnenForelderHarRettIEØS: FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer80DTO,\n    tilgjengeligeStønadskontoer100DTO,\n    erEndringssøknad,\n    person,\n    mellomlagreSøknadOgNaviger,\n    oppdaterBarnOgLagreUttaksplandata,\n}) => {\n    const intl = useIntl();\n    const [isSubmitting, setIsSubmitting] = useState(false);\n\n    const søkersituasjon = notEmpty(useContextGetData(ContextDataType.SØKERSITUASJON));\n    const barn = notEmpty(useContextGetData(ContextDataType.OM_BARNET));\n    const annenForelder = notEmpty(useContextGetData(ContextDataType.ANNEN_FORELDER));\n    const barnFraNesteSak = useContextGetData(ContextDataType.BARN_FRA_NESTE_SAK);\n    const uttaksplanMetadata = useContextGetData(ContextDataType.UTTAKSPLAN_METADATA);\n    // TODO (TOR) fjern as\n    const uttaksplanInfo = useContextGetData(\n        ContextDataType.UTTAKSPLAN_INFO,\n    ) as MorFarAdopsjonAnnenForelderHarRettIEØSUttaksplanInfo;\n\n    const oppdaterAppRoute = useContextSaveData(ContextDataType.APP_ROUTE);\n    const oppdaterUttaksplanInfo = useContextSaveData(ContextDataType.UTTAKSPLAN_INFO);\n    const oppdaterUttaksplan = useContextSaveData(ContextDataType.UTTAKSPLAN);\n\n    const erDeltUttak = true;\n    const erAdopsjon = søkersituasjon.situasjon === 'adopsjon';\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const familiehendelsesdatoDate = ISOStringToDate(familiehendelsesdato);\n    const førsteUttaksdagNesteBarnsSak =\n        barnFraNesteSak !== undefined ? barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n\n    const onSubmit = (values: Partial<MorFarAdopsjonAnnenForelderHarRettIEØSFormData>) => {\n        setIsSubmitting(true);\n\n        oppdaterUttaksplanInfo(mapMorFarAdopsjonAnnenForelderHarRettIEØSFormToState(values));\n\n        const barnAdopsjonsdato = isAdoptertBarn(barn) ? barn.adopsjonsdato : undefined;\n        const startdato = finnStartdatoAdopsjon(\n            values.startdatoAdopsjonValg!,\n            values.annenStartdatoAdopsjon,\n            dateToISOString(barnAdopsjonsdato),\n            dateToISOString(ankomstdato),\n        );\n\n        const uttaksplan = lagUttaksplan({\n            annenForelderErUfør: false,\n            erDeltUttak,\n            erEndringssøknad,\n            erEnkelEndringssøknad: erEndringssøknad,\n            familiehendelsesdato: familiehendelsesdatoDate!,\n            førsteUttaksdagEtterSeksUker: Uttaksdagen(Uttaksdagen(familiehendelsesdatoDate!).denneEllerNeste()).leggTil(\n                30,\n            ),\n            situasjon: søkersituasjon.situasjon,\n            søkerErFarEllerMedmor: erFarEllerMedmor,\n            søkerHarMidlertidigOmsorg: false,\n            tilgjengeligeStønadskontoer: tilgjengeligeStønadskontoer[getDekningsgradFromString(values.dekningsgrad)],\n            uttaksplanSkjema: {\n                startdatoPermisjon: startdato,\n                farSinFørsteUttaksdag: erFarEllerMedmor ? startdato : undefined,\n            },\n            bareFarMedmorHarRett: false,\n            termindato: undefined,\n            harAktivitetskravIPeriodeUtenUttak: getHarAktivitetskravIPeriodeUtenUttak({\n                erDeltUttak,\n                morHarRett: true,\n                søkerErAleneOmOmsorg: false,\n            }),\n            annenForelderHarRettPåForeldrepengerIEØS: true,\n            førsteUttaksdagNesteBarnsSak,\n        });\n        oppdaterUttaksplan(uttaksplan);\n\n        oppdaterBarnOgLagreUttaksplandata({\n            ...uttaksplanMetadata,\n            dekningsgrad: getDekningsgradFromString(values.dekningsgrad),\n            antallUkerIUttaksplan: getAntallUker(\n                tilgjengeligeStønadskontoer[values.dekningsgrad! === '100' ? 100 : 80],\n            ),\n        });\n\n        oppdaterAppRoute(SøknadRoutes.UTTAKSPLAN);\n\n        mellomlagreSøknadOgNaviger();\n    };\n\n    if (!erAdopsjon || !isAdoptertBarn(barn)) {\n        return null;\n    }\n\n    const erSøkerMor = !erFarEllerMedmor;\n    const oppgittAnnenForelder = isAnnenForelderOppgitt(annenForelder) ? annenForelder : undefined;\n    const navnAnnenPart = oppgittAnnenForelder\n        ? formaterNavn(oppgittAnnenForelder.fornavn, oppgittAnnenForelder.etternavn, true)\n        : '';\n\n    const erDeltUttakINorge = false;\n    const navnSøker = formaterNavn(person.fornavn, person.etternavn, true, person.mellomnavn);\n    const navnMor = erSøkerMor ? navnSøker : navnAnnenPart;\n    const navnFarMedmor = erSøkerMor ? navnAnnenPart : navnSøker;\n    const erAdoptertIUtlandet = isAdoptertAnnetBarn(barn) ? barn.adoptertIUtlandet : false;\n    const ankomstdato = isAdoptertAnnetBarn(barn) ? barn.ankomstdato : undefined;\n    const antallBarn = barn.antallBarn;\n    const latestDate =\n        ankomstdato !== undefined && barn.adopsjonsdato !== undefined\n            ? dateToISOString(findEldsteDato([ankomstdato, barn.adopsjonsdato]))\n            : barn.adopsjonsdato;\n\n    const tilgjengeligeStønadskontoer = getValgtStønadskontoFor80Og100Prosent(\n        tilgjengeligeStønadskontoer80DTO,\n        tilgjengeligeStønadskontoer100DTO,\n    );\n\n    return (\n        <MorFarAdopsjonAnnenForelderHarRettIEØSFormComponents.FormikWrapper\n            initialValues={getInitialMorFarAdopsjonAnnenForelderHarRettIEØSValues(\n                uttaksplanInfo,\n                uttaksplanMetadata?.dekningsgrad,\n            )}\n            onSubmit={onSubmit}\n            renderForm={({ values: formValues }) => {\n                const visibility = morFarAdopsjonAnnenForelderHarRettIEØSQuestionsConfig.getVisbility({\n                    ...formValues,\n                    erFarEllerMedmor,\n                } as MorFarAdopsjonAnnenForelderHarRettIEØSQuestionsPayload);\n\n                return (\n                    <MorFarAdopsjonAnnenForelderHarRettIEØSFormComponents.Form\n                        includeButtons={false}\n                        includeValidationSummary={true}\n                    >\n                        <Block\n                            padBottom=\"xl\"\n                            visible={visibility.isIncluded(\n                                MorFarAdopsjonAnnenForelderHarRettIEØSFormField.dekningsgrad,\n                            )}\n                        >\n                            <DekningsgradSpørsmål\n                                FormKomponent={MorFarAdopsjonAnnenForelderHarRettIEØSFormComponents}\n                                dekningsgradFeltNavn={MorFarAdopsjonAnnenForelderHarRettIEØSFormField.dekningsgrad}\n                                tilgjengeligeStønadskontoer={tilgjengeligeStønadskontoer}\n                                erDeltUttak={erDeltUttakINorge}\n                            />\n                        </Block>\n                        <Block\n                            visible={visibility.isIncluded(\n                                MorFarAdopsjonAnnenForelderHarRettIEØSFormField.startdatoAdopsjonValg,\n                            )}\n                        >\n                            <StartdatoAdopsjon valgtStartdatoAdopsjon={formValues.startdatoAdopsjonValg} barn={barn} />\n                        </Block>\n                        <Block\n                            padBottom=\"xl\"\n                            visible={\n                                erAdopsjon &&\n                                isAdoptertBarn(barn) &&\n                                formValues.startdatoAdopsjonValg === AdopsjonStartdatoValg.ANNEN &&\n                                dayjs(latestDate).isBefore(\n                                    dayjs(\n                                        finnStartdatoAdopsjon(\n                                            formValues.startdatoAdopsjonValg!,\n                                            undefined,\n                                            dateToISOString(barn.adopsjonsdato),\n                                            dateToISOString(ankomstdato),\n                                        ),\n                                    ),\n                                    'day',\n                                ) &&\n                                !isAdoptertStebarn(barn) &&\n                                !erDeltUttak\n                            }\n                        >\n                            <GuidePanel>\n                                <FormattedMessage\n                                    id={\n                                        erAdoptertIUtlandet === false\n                                            ? 'uttaksplaninfo.info.ikkeAdoptertIUtlandet'\n                                            : 'uttaksplaninfo.info.adoptertIUtlandet'\n                                    }\n                                />\n                            </GuidePanel>\n                        </Block>\n                        <Block\n                            padBottom=\"xl\"\n                            visible={antallBarn > 1 && formValues.startdatoAdopsjonValg !== undefined}\n                        >\n                            <GuidePanel>\n                                <FormattedMessage\n                                    id=\"uttaksplaninfo.veileder.flerbarnsInformasjon.annenForelderHarRettIEØS\"\n                                    values={{\n                                        uker: getFlerbarnsuker(formValues.dekningsgrad!, antallBarn),\n                                        navnFar: navnFarMedmor,\n                                        navnMor: navnMor,\n                                    }}\n                                />\n                            </GuidePanel>\n                        </Block>\n                        <Block>\n                            <StepButtonWrapper>\n                                <BackButton\n                                    mellomlagreSøknadOgNaviger={mellomlagreSøknadOgNaviger}\n                                    route={getPreviousStepHref('uttaksplanInfo')}\n                                />\n                                {visibility.areAllQuestionsAnswered() && (\n                                    <Button type=\"submit\" disabled={isSubmitting} loading={isSubmitting}>\n                                        {intlUtils(intl, 'søknad.gåVidere')}\n                                    </Button>\n                                )}\n                            </StepButtonWrapper>\n                        </Block>\n                    </MorFarAdopsjonAnnenForelderHarRettIEØSFormComponents.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default MorFarAdopsjonAnnenForelderHarRettIEØS;\n","import { getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\n\nexport enum MorFarFødselAnnenForelderHarRettIEØSFormField {\n    dekningsgrad = 'dekningsgrad',\n    permisjonStartdato = 'permisjonStartdato',\n    skalIkkeHaUttakFørTermin = 'skalIkkeHaUttakFørTermin',\n}\n\nexport interface MorFarFødselAnnenForelderHarRettIEØSFormData {\n    [MorFarFødselAnnenForelderHarRettIEØSFormField.dekningsgrad]: string;\n    [MorFarFødselAnnenForelderHarRettIEØSFormField.permisjonStartdato]: string;\n    [MorFarFødselAnnenForelderHarRettIEØSFormField.skalIkkeHaUttakFørTermin]: boolean | undefined;\n}\n\nexport const MorFarFødselAnnenForelderHarRettIEØSFormComponents = getTypedFormComponents<\n    MorFarFødselAnnenForelderHarRettIEØSFormField,\n    MorFarFødselAnnenForelderHarRettIEØSFormData\n>();\n","import { QuestionConfig, Questions } from '@navikt/sif-common-question-config';\nimport { hasValue } from '@navikt/fp-common';\nimport {\n    MorFarFødselAnnenForelderHarRettIEØSFormData,\n    MorFarFødselAnnenForelderHarRettIEØSFormField,\n} from './morFarFødselAnnenForelderHarRettIEØSFormConfig';\nexport interface MorFarFødselAnnenForelderHarRettIEØSQuestionsPayload\n    extends MorFarFødselAnnenForelderHarRettIEØSFormData {\n    erFarEllerMedmor: boolean;\n}\n\nconst MorFarFødselAnnenForelderHarRettIEØSFormConfig: QuestionConfig<\n    MorFarFødselAnnenForelderHarRettIEØSQuestionsPayload,\n    MorFarFødselAnnenForelderHarRettIEØSFormField\n> = {\n    [MorFarFødselAnnenForelderHarRettIEØSFormField.dekningsgrad]: {\n        isAnswered: ({ dekningsgrad }) => hasValue(dekningsgrad),\n        isIncluded: () => true,\n    },\n    [MorFarFødselAnnenForelderHarRettIEØSFormField.permisjonStartdato]: {\n        isAnswered: ({ permisjonStartdato }) => hasValue(permisjonStartdato),\n        isIncluded: ({ dekningsgrad }) => hasValue(dekningsgrad),\n    },\n};\n\nexport const morFarFødselAnnenForelderHarRettIEØSQuestionsConfig = Questions<\n    MorFarFødselAnnenForelderHarRettIEØSQuestionsPayload,\n    MorFarFødselAnnenForelderHarRettIEØSFormField\n>(MorFarFødselAnnenForelderHarRettIEØSFormConfig);\n","import { MorFarFødselAnnenForelderHarRettIEØSUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport {\n    MorFarFødselAnnenForelderHarRettIEØSFormField,\n    MorFarFødselAnnenForelderHarRettIEØSFormData,\n} from './morFarFødselAnnenForelderHarRettIEØSFormConfig';\nimport { dateToISOString } from '@navikt/sif-common-formik-ds/lib';\nimport { Dekningsgrad } from '@navikt/fp-common';\n\nconst initialMorFarFødselAnnenForelderHarRettIEØSValues: MorFarFødselAnnenForelderHarRettIEØSFormData = {\n    [MorFarFødselAnnenForelderHarRettIEØSFormField.dekningsgrad]: '',\n    [MorFarFødselAnnenForelderHarRettIEØSFormField.permisjonStartdato]: '',\n    [MorFarFødselAnnenForelderHarRettIEØSFormField.skalIkkeHaUttakFørTermin]: undefined,\n};\nexport const mapMorFarFødselAnnenForelderHarRettIEØSFormToState = (\n    values: Partial<MorFarFødselAnnenForelderHarRettIEØSFormData>,\n): MorFarFødselAnnenForelderHarRettIEØSUttaksplanInfo => {\n    return {\n        dekningsgrad: values.dekningsgrad!,\n        permisjonStartdato: values.permisjonStartdato!,\n        skalIkkeHaUttakFørTermin: values.skalIkkeHaUttakFørTermin,\n    };\n};\nexport const getInitialMorFarFødselAnnenForelderHarRettIEØSValues = (\n    defaultPermisjonStartdato: Date,\n    lagretUttaksplanInfo: MorFarFødselAnnenForelderHarRettIEØSUttaksplanInfo | undefined,\n    dekningsgrad?: Dekningsgrad,\n): MorFarFødselAnnenForelderHarRettIEØSFormData => {\n    if (lagretUttaksplanInfo) {\n        return {\n            ...lagretUttaksplanInfo,\n            [MorFarFødselAnnenForelderHarRettIEØSFormField.dekningsgrad]: dekningsgrad!,\n        };\n    }\n    return {\n        ...initialMorFarFødselAnnenForelderHarRettIEØSValues,\n        [MorFarFødselAnnenForelderHarRettIEØSFormField.permisjonStartdato]: dateToISOString(defaultPermisjonStartdato),\n    };\n};\n","import { FunctionComponent, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Button, GuidePanel } from '@navikt/ds-react';\nimport { getHarAktivitetskravIPeriodeUtenUttak } from '@navikt/uttaksplan';\nimport { notEmpty } from '@navikt/fp-validation';\nimport Person from '@navikt/fp-common/src/common/types/Person';\nimport {\n    Block,\n    ISOStringToDate,\n    StepButtonWrapper,\n    Tidsperioden,\n    Uttaksdagen,\n    formaterNavn,\n    getFlerbarnsuker,\n    hasValue,\n    intlUtils,\n    isAnnenForelderOppgitt,\n    isFarEllerMedmor,\n    uttaksConstants,\n} from '@navikt/fp-common';\nimport { getFamiliehendelsedato, getFødselsdato, getTermindato } from 'app/utils/barnUtils';\nimport { getValgtStønadskontoFor80Og100Prosent } from 'app/utils/stønadskontoUtils';\nimport { TilgjengeligeStønadskontoerDTO } from 'app/types/TilgjengeligeStønadskontoerDTO';\nimport FarMedmorsFørsteDag from '../spørsmål/FarMedmorsFørsteDag';\nimport SøknadRoutes from 'app/routes/routes';\nimport { MorFarFødselAnnenForelderHarRettIEØSUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport DekningsgradSpørsmål from '../spørsmål/DekningsgradSpørsmål';\nimport { getDekningsgradFromString } from 'app/utils/getDekningsgradFromString';\nimport { lagUttaksplan } from 'app/utils/uttaksplan/lagUttaksplan';\nimport { getAntallUker } from 'app/steps/uttaksplan-info/utils/stønadskontoer';\nimport {\n    morFarFødselAnnenForelderHarRettIEØSQuestionsConfig,\n    MorFarFødselAnnenForelderHarRettIEØSQuestionsPayload,\n} from './morFarFødselAnnenForelderHarRettIEØSQuestionsConfig';\nimport {\n    MorFarFødselAnnenForelderHarRettIEØSFormComponents as MorFarFødselAnnenForelderHarRettIEØSFormComponents,\n    MorFarFødselAnnenForelderHarRettIEØSFormData,\n    MorFarFødselAnnenForelderHarRettIEØSFormField,\n} from './morFarFødselAnnenForelderHarRettIEØSFormConfig';\nimport {\n    getInitialMorFarFødselAnnenForelderHarRettIEØSValues,\n    mapMorFarFødselAnnenForelderHarRettIEØSFormToState,\n} from './morFarFødselAnnenForelderHarRettIEØSUtils';\nimport { skalViseInfoOmPrematuruker } from 'app/utils/uttaksplanInfoUtils';\nimport StartdatoPermisjonMor from '../mor-fodsel/StartdatoPermisjonMor';\nimport { getPreviousStepHref } from 'app/steps/stepsConfig';\nimport { ContextDataType, useContextGetData, useContextSaveData } from 'app/context/FpDataContext';\nimport BackButton from 'app/steps/BackButton';\nimport { UttaksplanMetaData } from 'app/types/UttaksplanMetaData';\n\ninterface Props {\n    tilgjengeligeStønadskontoer100DTO: TilgjengeligeStønadskontoerDTO;\n    tilgjengeligeStønadskontoer80DTO: TilgjengeligeStønadskontoerDTO;\n    erEndringssøknad: boolean;\n    person: Person;\n    mellomlagreSøknadOgNaviger: () => void;\n    oppdaterBarnOgLagreUttaksplandata: (metadata: UttaksplanMetaData) => void;\n}\n\nconst MorFarFødselAnnenForelderHarRettIEØS: FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer80DTO,\n    tilgjengeligeStønadskontoer100DTO,\n    erEndringssøknad,\n    person,\n    mellomlagreSøknadOgNaviger,\n    oppdaterBarnOgLagreUttaksplandata,\n}) => {\n    const intl = useIntl();\n    const [isSubmitting, setIsSubmitting] = useState(false);\n\n    const søkersituasjon = notEmpty(useContextGetData(ContextDataType.SØKERSITUASJON));\n    const barn = notEmpty(useContextGetData(ContextDataType.OM_BARNET));\n    const annenForelder = notEmpty(useContextGetData(ContextDataType.ANNEN_FORELDER));\n    const barnFraNesteSak = useContextGetData(ContextDataType.BARN_FRA_NESTE_SAK);\n    const uttaksplanMetadata = useContextGetData(ContextDataType.UTTAKSPLAN_METADATA);\n    // TODO (TOR) fjern as\n    const uttaksplanInfo = useContextGetData(\n        ContextDataType.UTTAKSPLAN_INFO,\n    ) as MorFarFødselAnnenForelderHarRettIEØSUttaksplanInfo;\n\n    const oppdaterAppRoute = useContextSaveData(ContextDataType.APP_ROUTE);\n    const oppdaterUttaksplanInfo = useContextSaveData(ContextDataType.UTTAKSPLAN_INFO);\n    const oppdaterUttaksplan = useContextSaveData(ContextDataType.UTTAKSPLAN);\n\n    const fødselsdato = getFødselsdato(barn);\n    const termindato = getTermindato(barn);\n    const erDeltUttak = true;\n    const erFødsel = søkersituasjon.situasjon === 'fødsel';\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const familiehendelsesdatoDate = ISOStringToDate(familiehendelsesdato);\n    const førsteUttaksdagNesteBarnsSak =\n        barnFraNesteSak !== undefined ? barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n\n    const shouldRender = erFødsel;\n\n    const onSubmit = async (values: Partial<MorFarFødselAnnenForelderHarRettIEØSFormData>) => {\n        setIsSubmitting(true);\n\n        const submissionValues = mapMorFarFødselAnnenForelderHarRettIEØSFormToState(values);\n        const startdato = hasValue(values.permisjonStartdato) ? values.permisjonStartdato : undefined;\n\n        oppdaterUttaksplanInfo(submissionValues);\n\n        const uttaksplan = lagUttaksplan({\n            annenForelderErUfør: false,\n            erDeltUttak,\n            erEndringssøknad,\n            erEnkelEndringssøknad: erEndringssøknad,\n            familiehendelsesdato: familiehendelsesdatoDate!,\n            førsteUttaksdagEtterSeksUker: Uttaksdagen(Uttaksdagen(familiehendelsesdatoDate!).denneEllerNeste()).leggTil(\n                30,\n            ),\n            situasjon: søkersituasjon.situasjon,\n            søkerErFarEllerMedmor: erFarEllerMedmor,\n            søkerHarMidlertidigOmsorg: false,\n            tilgjengeligeStønadskontoer: tilgjengeligeStønadskontoer[getDekningsgradFromString(values.dekningsgrad)],\n            uttaksplanSkjema: {\n                startdatoPermisjon: submissionValues.skalIkkeHaUttakFørTermin ? undefined : startdato,\n                farSinFørsteUttaksdag: erFarEllerMedmor ? startdato : undefined,\n            },\n            bareFarMedmorHarRett: false,\n            termindato: undefined,\n            harAktivitetskravIPeriodeUtenUttak: getHarAktivitetskravIPeriodeUtenUttak({\n                erDeltUttak,\n                morHarRett: true,\n                søkerErAleneOmOmsorg: false,\n            }),\n            annenForelderHarRettPåForeldrepengerIEØS: true,\n            førsteUttaksdagNesteBarnsSak,\n        });\n\n        oppdaterUttaksplan(uttaksplan);\n\n        oppdaterBarnOgLagreUttaksplandata({\n            ...uttaksplanMetadata,\n            dekningsgrad: getDekningsgradFromString(values.dekningsgrad),\n            antallUkerIUttaksplan: getAntallUker(\n                tilgjengeligeStønadskontoer[values.dekningsgrad! === '100' ? 100 : 80],\n            ),\n        });\n\n        oppdaterAppRoute(SøknadRoutes.UTTAKSPLAN);\n\n        mellomlagreSøknadOgNaviger();\n    };\n\n    if (!shouldRender) {\n        return null;\n    }\n\n    const erSøkerMor = !erFarEllerMedmor;\n    const oppgittAnnenForelder = isAnnenForelderOppgitt(annenForelder) ? annenForelder : undefined;\n\n    const navnAnnenPart = oppgittAnnenForelder\n        ? formaterNavn(oppgittAnnenForelder.fornavn, oppgittAnnenForelder.etternavn, true)\n        : '';\n\n    const erDeltUttakINorge = false;\n\n    const navnSøker = formaterNavn(person.fornavn, person.etternavn, true, person.mellomnavn);\n    const navnMor = erSøkerMor ? navnSøker : navnAnnenPart;\n    const navnFarMedmor = erSøkerMor ? navnAnnenPart : navnSøker;\n    const antallBarn = barn.antallBarn;\n    const tilgjengeligeStønadskontoer = getValgtStønadskontoFor80Og100Prosent(\n        tilgjengeligeStønadskontoer80DTO,\n        tilgjengeligeStønadskontoer100DTO,\n    );\n\n    const visInfoOmPrematuruker =\n        !erFarEllerMedmor && skalViseInfoOmPrematuruker(fødselsdato, termindato, søkersituasjon.situasjon);\n    const ekstraDagerGrunnetPrematurFødsel = visInfoOmPrematuruker\n        ? Tidsperioden({ fom: fødselsdato!, tom: termindato! }).getAntallUttaksdager() - 1\n        : undefined;\n    const førsteUttaksdag = Uttaksdagen(ISOStringToDate(familiehendelsesdato)!).denneEllerNeste();\n    const defaultPermisjonStartdato = erFarEllerMedmor\n        ? førsteUttaksdag\n        : Uttaksdagen(førsteUttaksdag).trekkFra(uttaksConstants.ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5);\n\n    return (\n        <MorFarFødselAnnenForelderHarRettIEØSFormComponents.FormikWrapper\n            initialValues={getInitialMorFarFødselAnnenForelderHarRettIEØSValues(\n                defaultPermisjonStartdato,\n                uttaksplanInfo,\n                uttaksplanMetadata?.dekningsgrad,\n            )}\n            onSubmit={onSubmit}\n            renderForm={({ values: formValues, setFieldValue }) => {\n                const visibility = morFarFødselAnnenForelderHarRettIEØSQuestionsConfig.getVisbility({\n                    ...formValues,\n                    erFarEllerMedmor,\n                } as MorFarFødselAnnenForelderHarRettIEØSQuestionsPayload);\n\n                return (\n                    <MorFarFødselAnnenForelderHarRettIEØSFormComponents.Form\n                        includeButtons={false}\n                        includeValidationSummary={true}\n                    >\n                        <Block\n                            padBottom=\"xl\"\n                            visible={visibility.isIncluded(MorFarFødselAnnenForelderHarRettIEØSFormField.dekningsgrad)}\n                        >\n                            <DekningsgradSpørsmål\n                                FormKomponent={MorFarFødselAnnenForelderHarRettIEØSFormComponents}\n                                dekningsgradFeltNavn={MorFarFødselAnnenForelderHarRettIEØSFormField.dekningsgrad}\n                                tilgjengeligeStønadskontoer={tilgjengeligeStønadskontoer}\n                                erDeltUttak={erDeltUttakINorge}\n                            />\n                        </Block>\n                        <Block padBottom=\"xl\" visible={visInfoOmPrematuruker === true}>\n                            <GuidePanel>\n                                <FormattedMessage\n                                    id=\"uttaksplaninfo.veileder.informasjonPrematuruker\"\n                                    values={{\n                                        antallprematuruker: Math.floor(ekstraDagerGrunnetPrematurFødsel! / 5),\n                                        antallprematurdager: ekstraDagerGrunnetPrematurFødsel! % 5,\n                                    }}\n                                />\n                            </GuidePanel>\n                        </Block>\n                        <Block\n                            visible={\n                                !erFarEllerMedmor &&\n                                visibility.isIncluded(MorFarFødselAnnenForelderHarRettIEØSFormField.permisjonStartdato)\n                            }\n                        >\n                            <StartdatoPermisjonMor\n                                permisjonStartdato={formValues.permisjonStartdato!}\n                                skalIkkeHaUttakFørTermin={formValues.skalIkkeHaUttakFørTermin!}\n                                termindato={termindato}\n                                barn={barn}\n                            />\n                        </Block>\n                        <Block\n                            padBottom=\"xl\"\n                            visible={\n                                erFarEllerMedmor &&\n                                visibility.isIncluded(MorFarFødselAnnenForelderHarRettIEØSFormField.permisjonStartdato)\n                            }\n                        >\n                            <FarMedmorsFørsteDag\n                                FormComponents={MorFarFødselAnnenForelderHarRettIEØSFormComponents}\n                                fieldName={MorFarFødselAnnenForelderHarRettIEØSFormField.permisjonStartdato}\n                                familiehendelsesdato={familiehendelsesdatoDate!}\n                                setFieldValue={setFieldValue}\n                                morsSisteDag={undefined}\n                                navnMor={navnMor}\n                                termindato={undefined}\n                                situasjon={søkersituasjon.situasjon}\n                                morHarRettTilForeldrepengerIEØS={true}\n                            />\n                        </Block>\n                        <Block\n                            padBottom=\"xl\"\n                            visible={\n                                visibility.isAnswered(MorFarFødselAnnenForelderHarRettIEØSFormField.dekningsgrad) &&\n                                antallBarn > 1 &&\n                                (formValues.permisjonStartdato !== undefined ||\n                                    formValues.skalIkkeHaUttakFørTermin === true)\n                            }\n                        >\n                            <GuidePanel>\n                                <FormattedMessage\n                                    id=\"uttaksplaninfo.veileder.flerbarnsInformasjon.annenForelderHarRettIEØS\"\n                                    values={{\n                                        uker: getFlerbarnsuker(formValues.dekningsgrad!, antallBarn),\n                                        navnFar: navnFarMedmor,\n                                        navnMor: navnMor,\n                                    }}\n                                />\n                            </GuidePanel>\n                        </Block>\n                        <Block>\n                            <StepButtonWrapper>\n                                <BackButton\n                                    mellomlagreSøknadOgNaviger={mellomlagreSøknadOgNaviger}\n                                    route={getPreviousStepHref('uttaksplanInfo')}\n                                />\n                                {visibility.areAllQuestionsAnswered() && (\n                                    <Button type=\"submit\" disabled={isSubmitting} loading={isSubmitting}>\n                                        {intlUtils(intl, 'søknad.gåVidere')}\n                                    </Button>\n                                )}\n                            </StepButtonWrapper>\n                        </Block>\n                    </MorFarFødselAnnenForelderHarRettIEØSFormComponents.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default MorFarFødselAnnenForelderHarRettIEØS;\n","import { getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\n\nexport enum FarMedmorAleneomsorgFødselFormField {\n    dekningsgrad = 'dekningsgrad',\n    startPåOmsorgsovertakelse = 'startPåOmsorgsovertakelse',\n    startdatoUttak = 'startdatoUttak',\n}\n\nexport interface FarMedmorAleneomsorgFødselFormData {\n    [FarMedmorAleneomsorgFødselFormField.dekningsgrad]: string;\n    [FarMedmorAleneomsorgFødselFormField.startPåOmsorgsovertakelse]: string;\n    [FarMedmorAleneomsorgFødselFormField.startdatoUttak]: string;\n}\n\nexport const FarMedmorAleneomsorgFødselFormComponents = getTypedFormComponents<\n    FarMedmorAleneomsorgFødselFormField,\n    FarMedmorAleneomsorgFødselFormData\n>();\n","import { hasValue } from '@navikt/fp-common';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport {\n    FarMedmorAleneomsorgFødselFormData,\n    FarMedmorAleneomsorgFødselFormField,\n} from './farMedmorAleneomsorgFødselFormConfig';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\n\nconst FarMedmorAleneomsorgFødselFormConfig: QuestionConfig<\n    FarMedmorAleneomsorgFødselFormData,\n    FarMedmorAleneomsorgFødselFormField\n> = {\n    [FarMedmorAleneomsorgFødselFormField.dekningsgrad]: {\n        isIncluded: () => true,\n        isAnswered: ({ dekningsgrad }) => hasValue(dekningsgrad),\n    },\n    [FarMedmorAleneomsorgFødselFormField.startPåOmsorgsovertakelse]: {\n        isIncluded: () => true,\n        isAnswered: ({ startPåOmsorgsovertakelse }) => startPåOmsorgsovertakelse !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ dekningsgrad }) => hasValue(dekningsgrad),\n    },\n    [FarMedmorAleneomsorgFødselFormField.startdatoUttak]: {\n        isIncluded: ({ startPåOmsorgsovertakelse }) => startPåOmsorgsovertakelse === YesOrNo.NO,\n        isAnswered: ({ startdatoUttak }) => hasValue(startdatoUttak),\n        visibilityFilter: ({ startPåOmsorgsovertakelse }) => startPåOmsorgsovertakelse === YesOrNo.NO,\n    },\n};\n\nconst farMedmorAleneomsorgFødselQuestionsConfig = Questions<\n    FarMedmorAleneomsorgFødselFormData,\n    FarMedmorAleneomsorgFødselFormField\n>(FarMedmorAleneomsorgFødselFormConfig);\n\nexport default farMedmorAleneomsorgFødselQuestionsConfig;\n","import { FarMedmorAleneomsorgFødselUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport dayjs from 'dayjs';\nimport {\n    FarMedmorAleneomsorgFødselFormData,\n    FarMedmorAleneomsorgFødselFormField,\n} from './farMedmorAleneomsorgFødselFormConfig';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\nimport { Dekningsgrad } from '@navikt/fp-common';\n\nconst initialFarMedmorAleneomsorgFødselValues: FarMedmorAleneomsorgFødselFormData = {\n    [FarMedmorAleneomsorgFødselFormField.dekningsgrad]: '',\n    [FarMedmorAleneomsorgFødselFormField.startPåOmsorgsovertakelse]: YesOrNo.UNANSWERED,\n    [FarMedmorAleneomsorgFødselFormField.startdatoUttak]: '',\n};\n\nexport const mapFarMedmorAleneomsorgFødselFormToState = (\n    values: Partial<FarMedmorAleneomsorgFødselFormData>,\n    datoForAleneomsorg: string,\n): FarMedmorAleneomsorgFødselUttaksplanInfo => {\n    return {\n        fellesperiodeukerMor: undefined,\n        startdatoUttak: values.startPåOmsorgsovertakelse === YesOrNo.YES ? datoForAleneomsorg : values.startdatoUttak!,\n    };\n};\n\nexport const getInitialFarMedmorAleneomsorgFødselValues = (\n    lagretUttaksplanInfo: FarMedmorAleneomsorgFødselUttaksplanInfo | undefined,\n    datoForAleneomsorg: string,\n    dekningsgrad?: Dekningsgrad,\n): FarMedmorAleneomsorgFødselFormData => {\n    if (lagretUttaksplanInfo && dekningsgrad) {\n        const startetPåOmsorgsovertakelse = dayjs(lagretUttaksplanInfo.startdatoUttak).isSame(\n            dayjs(datoForAleneomsorg),\n            'day',\n        );\n\n        return {\n            dekningsgrad,\n            startPåOmsorgsovertakelse: startetPåOmsorgsovertakelse ? YesOrNo.YES : YesOrNo.NO,\n            startdatoUttak: startetPåOmsorgsovertakelse ? '' : lagretUttaksplanInfo.startdatoUttak,\n        };\n    }\n\n    return initialFarMedmorAleneomsorgFødselValues;\n};\n","import { isISODateString } from '@navikt/ds-datepicker';\nimport { formatDate, hasValue, intlUtils } from '@navikt/fp-common';\nimport { isDateABeforeDateB } from 'app/utils/dateUtils';\nimport { IntlShape } from 'react-intl';\n\nexport const validateStartdatoUttakFarMedmorAleneomsorgFødsel =\n    (intl: IntlShape, familiehendelsesdato: string) => (startdatoUttak: string) => {\n        if (!hasValue(startdatoUttak)) {\n            return intlUtils(intl, 'valideringsfeil.uttaksplaninfo.farMedmorAleneomsorgFødsel.startdatoUttak.påkrevd');\n        }\n\n        if (!isISODateString(startdatoUttak)) {\n            return intlUtils(\n                intl,\n                'valideringsfeil.uttaksplaninfo.farMedmorAleneomsorgFødsel.startdatoUttak.gyldigDato',\n            );\n        }\n\n        if (isDateABeforeDateB(startdatoUttak, familiehendelsesdato)) {\n            return intlUtils(\n                intl,\n                'valideringsfeil.uttaksplaninfo.farMedmorAleneomsorgFødsel.startdatoUttak.etterFamiliehendelsesdato',\n                { familiehendelsesdato: formatDate(familiehendelsesdato) },\n            );\n        }\n\n        return undefined;\n    };\n","import { FunctionComponent, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { Button } from '@navikt/ds-react';\nimport { dateToISOString } from '@navikt/sif-common-formik-ds/lib';\nimport { getHarAktivitetskravIPeriodeUtenUttak } from '@navikt/uttaksplan';\nimport { notEmpty } from '@navikt/fp-validation';\nimport { ContextDataType, useContextGetData, useContextSaveData } from 'app/context/FpDataContext';\nimport Person from '@navikt/fp-common/src/common/types/Person';\nimport {\n    Block,\n    Forelder,\n    ISOStringToDate,\n    StepButtonWrapper,\n    Uttaksdagen,\n    formaterDatoUtenDag,\n    getErMorUfør,\n    intlUtils,\n    isAnnenForelderOppgitt,\n    isFarEllerMedmor,\n} from '@navikt/fp-common';\nimport { FarMedmorAleneomsorgFødselUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport SøknadRoutes from 'app/routes/routes';\nimport { getAntallUker } from 'app/steps/uttaksplan-info/utils/stønadskontoer';\nimport { TilgjengeligeStønadskontoerDTO } from 'app/types/TilgjengeligeStønadskontoerDTO';\nimport { getFamiliehendelsedato, getTermindato } from 'app/utils/barnUtils';\nimport { getDekningsgradFromString } from 'app/utils/getDekningsgradFromString';\nimport { getValgtStønadskontoFor80Og100Prosent } from 'app/utils/stønadskontoUtils';\nimport { lagUttaksplan } from 'app/utils/uttaksplan/lagUttaksplan';\nimport TilgjengeligeDagerGraf from '../../tilgjengeligeDagerGraf/TilgjengeligeDagerGraf';\nimport { getTilgjengeligeDager } from '../../tilgjengeligeDagerGraf/tilgjengeligeDagerUtils';\nimport DekningsgradSpørsmål from '../spørsmål/DekningsgradSpørsmål';\nimport {\n    FarMedmorAleneomsorgFødselFormComponents,\n    FarMedmorAleneomsorgFødselFormData,\n    FarMedmorAleneomsorgFødselFormField,\n} from './farMedmorAleneomsorgFødselFormConfig';\nimport farMedmorAleneomsorgFødselAdopsjonQuestionsConfig from './farMedmorAleneomsorgFødselQuestionsConfig';\nimport {\n    getInitialFarMedmorAleneomsorgFødselValues,\n    mapFarMedmorAleneomsorgFødselFormToState,\n} from './farMedmorAleneomsorgFødselUtils';\nimport { validateStartdatoUttakFarMedmorAleneomsorgFødsel } from './validation/farMedmorAleneomsorgFødselValidation';\nimport { getPreviousStepHref } from 'app/steps/stepsConfig';\nimport BackButton from 'app/steps/BackButton';\nimport { UttaksplanMetaData } from 'app/types/UttaksplanMetaData';\n\ninterface Props {\n    tilgjengeligeStønadskontoer100DTO: TilgjengeligeStønadskontoerDTO;\n    tilgjengeligeStønadskontoer80DTO: TilgjengeligeStønadskontoerDTO;\n    erEndringssøknad: boolean;\n    person: Person;\n    mellomlagreSøknadOgNaviger: () => void;\n    oppdaterBarnOgLagreUttaksplandata: (metadata: UttaksplanMetaData) => void;\n}\n\nconst FarMedmorAleneomsorgFødsel: FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer100DTO,\n    tilgjengeligeStønadskontoer80DTO,\n    erEndringssøknad,\n    person,\n    mellomlagreSøknadOgNaviger,\n    oppdaterBarnOgLagreUttaksplandata,\n}) => {\n    const intl = useIntl();\n    const [isSubmitting, setIsSubmitting] = useState(false);\n\n    const søkersituasjon = notEmpty(useContextGetData(ContextDataType.SØKERSITUASJON));\n    const barn = notEmpty(useContextGetData(ContextDataType.OM_BARNET));\n    const annenForelder = notEmpty(useContextGetData(ContextDataType.ANNEN_FORELDER));\n    const søker = notEmpty(useContextGetData(ContextDataType.SØKER));\n    const barnFraNesteSak = useContextGetData(ContextDataType.BARN_FRA_NESTE_SAK);\n    const uttaksplanMetadata = useContextGetData(ContextDataType.UTTAKSPLAN_METADATA);\n    // TODO (TOR) fjern as\n    const uttaksplanInfo = useContextGetData(\n        ContextDataType.UTTAKSPLAN_INFO,\n    ) as FarMedmorAleneomsorgFødselUttaksplanInfo;\n\n    const oppdaterAppRoute = useContextSaveData(ContextDataType.APP_ROUTE);\n    const oppdaterUttaksplanInfo = useContextSaveData(ContextDataType.UTTAKSPLAN_INFO);\n    const oppdaterUttaksplan = useContextSaveData(ContextDataType.UTTAKSPLAN);\n\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const familiehendelsesdatoDate = ISOStringToDate(familiehendelsesdato);\n    const datoForAleneomsorg = annenForelder.kanIkkeOppgis ? familiehendelsesdatoDate : barn.datoForAleneomsorg;\n\n    const erFødsel = søkersituasjon.situasjon === 'fødsel';\n    const erMorUfør = getErMorUfør(annenForelder, erFarEllerMedmor);\n    const tilgjengeligeStønadskontoer = getValgtStønadskontoFor80Og100Prosent(\n        tilgjengeligeStønadskontoer80DTO,\n        tilgjengeligeStønadskontoer100DTO,\n    );\n    const termindato = getTermindato(barn);\n    const førsteUttaksdagNesteBarnsSak =\n        barnFraNesteSak !== undefined ? barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n\n    const onSubmit = (values: Partial<FarMedmorAleneomsorgFødselFormData>) => {\n        setIsSubmitting(true);\n\n        const uttaksplanInfo: FarMedmorAleneomsorgFødselUttaksplanInfo = mapFarMedmorAleneomsorgFødselFormToState(\n            values,\n            dateToISOString(datoForAleneomsorg),\n        );\n        oppdaterUttaksplanInfo(uttaksplanInfo);\n\n        const uttaksplan = lagUttaksplan({\n            annenForelderErUfør: erMorUfør,\n            erDeltUttak: false,\n            erEndringssøknad,\n            erEnkelEndringssøknad: erEndringssøknad,\n            familiehendelsesdato: familiehendelsesdatoDate!,\n            førsteUttaksdagEtterSeksUker: Uttaksdagen(Uttaksdagen(familiehendelsesdatoDate!).denneEllerNeste()).leggTil(\n                30,\n            ),\n            situasjon: erFødsel ? 'fødsel' : 'adopsjon',\n            søkerErFarEllerMedmor: erFarEllerMedmor,\n            søkerHarMidlertidigOmsorg: false,\n            tilgjengeligeStønadskontoer: tilgjengeligeStønadskontoer[getDekningsgradFromString(values.dekningsgrad)],\n            uttaksplanSkjema: {\n                startdatoPermisjon: uttaksplanInfo.startdatoUttak,\n            },\n            bareFarMedmorHarRett: false,\n            termindato,\n            harAktivitetskravIPeriodeUtenUttak: getHarAktivitetskravIPeriodeUtenUttak({\n                erDeltUttak: false,\n                morHarRett: false,\n                søkerErAleneOmOmsorg: true,\n            }),\n            førsteUttaksdagNesteBarnsSak,\n        });\n\n        const kontoerForValgtDekningsgrad = tilgjengeligeStønadskontoer[getDekningsgradFromString(values.dekningsgrad)];\n\n        oppdaterUttaksplan(uttaksplan);\n\n        oppdaterBarnOgLagreUttaksplandata({\n            ...uttaksplanMetadata,\n            dekningsgrad: getDekningsgradFromString(values.dekningsgrad),\n            antallUkerIUttaksplan: getAntallUker(kontoerForValgtDekningsgrad),\n        });\n\n        oppdaterAppRoute(SøknadRoutes.UTTAKSPLAN);\n\n        mellomlagreSøknadOgNaviger();\n    };\n\n    const shouldRender = erFødsel && erFarEllerMedmor && (!!søker.erAleneOmOmsorg || annenForelder.kanIkkeOppgis);\n\n    if (!shouldRender) {\n        return null;\n    }\n\n    const navnFar = erFarEllerMedmor\n        ? person.fornavn\n        : isAnnenForelderOppgitt(annenForelder)\n        ? annenForelder.fornavn\n        : '';\n\n    return (\n        <FarMedmorAleneomsorgFødselFormComponents.FormikWrapper\n            initialValues={getInitialFarMedmorAleneomsorgFødselValues(\n                uttaksplanInfo,\n                dateToISOString(datoForAleneomsorg),\n                uttaksplanMetadata?.dekningsgrad,\n            )}\n            onSubmit={onSubmit}\n            renderForm={({ values: formValues }) => {\n                const visibility = farMedmorAleneomsorgFødselAdopsjonQuestionsConfig.getVisbility(\n                    formValues as FarMedmorAleneomsorgFødselFormData,\n                );\n\n                const valgtStønadskonto = tilgjengeligeStønadskontoer[formValues.dekningsgrad === '100' ? 100 : 80];\n\n                return (\n                    <FarMedmorAleneomsorgFødselFormComponents.Form\n                        includeButtons={false}\n                        includeValidationSummary={true}\n                    >\n                        <Block\n                            padBottom=\"xl\"\n                            visible={visibility.isVisible(FarMedmorAleneomsorgFødselFormField.dekningsgrad)}\n                        >\n                            <DekningsgradSpørsmål\n                                FormKomponent={FarMedmorAleneomsorgFødselFormComponents}\n                                dekningsgradFeltNavn={FarMedmorAleneomsorgFødselFormField.dekningsgrad}\n                                tilgjengeligeStønadskontoer={tilgjengeligeStønadskontoer}\n                                erDeltUttak={false}\n                            />\n                        </Block>\n                        <Block visible={formValues.dekningsgrad !== ''}>\n                            {valgtStønadskonto && (\n                                <TilgjengeligeDagerGraf\n                                    erDeltUttak={false}\n                                    erFarEllerMedmor={true}\n                                    navnFarMedmor={navnFar}\n                                    navnMor=\"\"\n                                    tilgjengeligeDager={getTilgjengeligeDager(\n                                        valgtStønadskonto,\n                                        false,\n                                        Forelder.farMedmor,\n                                    )}\n                                />\n                            )}\n                        </Block>\n                        <Block\n                            padBottom=\"xl\"\n                            visible={visibility.isVisible(\n                                FarMedmorAleneomsorgFødselFormField.startPåOmsorgsovertakelse,\n                            )}\n                        >\n                            <FarMedmorAleneomsorgFødselFormComponents.YesOrNoQuestion\n                                name={FarMedmorAleneomsorgFødselFormField.startPåOmsorgsovertakelse}\n                                legend={intlUtils(intl, 'uttaksplaninfo.startdatoAleneomsorgFarMedmor.spørsmål')}\n                                labels={{\n                                    yes: intlUtils(\n                                        intl,\n                                        'uttaksplaninfo.startdatoAdopsjon.alternativ.omsorgsovertakelse',\n                                        {\n                                            dato: formaterDatoUtenDag(datoForAleneomsorg!),\n                                        },\n                                    ),\n                                    no: intlUtils(intl, 'uttaksplaninfo.startdatoAleneomsorgFarMedmor.annenDato'),\n                                }}\n                            />\n                        </Block>\n                        <Block\n                            padBottom=\"xl\"\n                            visible={visibility.isVisible(FarMedmorAleneomsorgFødselFormField.startdatoUttak)}\n                        >\n                            <FarMedmorAleneomsorgFødselFormComponents.DatePicker\n                                name={FarMedmorAleneomsorgFødselFormField.startdatoUttak}\n                                label=\"Startdato\"\n                                validate={validateStartdatoUttakFarMedmorAleneomsorgFødsel(intl, familiehendelsesdato)}\n                                minDate={ISOStringToDate(familiehendelsesdato)}\n                                placeholder={'dd.mm.åååå'}\n                            />\n                        </Block>\n                        <Block>\n                            <StepButtonWrapper>\n                                <BackButton\n                                    mellomlagreSøknadOgNaviger={mellomlagreSøknadOgNaviger}\n                                    route={getPreviousStepHref('uttaksplanInfo')}\n                                />\n                                {visibility.areAllQuestionsAnswered() && (\n                                    <Button type=\"submit\" disabled={isSubmitting} loading={isSubmitting}>\n                                        {intlUtils(intl, 'søknad.gåVidere')}\n                                    </Button>\n                                )}\n                            </StepButtonWrapper>\n                        </Block>\n                    </FarMedmorAleneomsorgFødselFormComponents.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default FarMedmorAleneomsorgFødsel;\n","import { getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\n\nexport enum FarMedmorFødselOgMorHarIkkeRettFormField {\n    dekningsgrad = 'dekningsgrad',\n    permisjonStartdato = 'permisjonStartdato',\n}\n\nexport interface FarMedmorFødselOgMorHarIkkeRettFormData {\n    [FarMedmorFødselOgMorHarIkkeRettFormField.dekningsgrad]: string;\n    [FarMedmorFødselOgMorHarIkkeRettFormField.permisjonStartdato]: string;\n}\n\nexport const FarMedmorFødselOgMorHarIkkeRettFormComponents = getTypedFormComponents<\n    FarMedmorFødselOgMorHarIkkeRettFormField,\n    FarMedmorFødselOgMorHarIkkeRettFormData\n>();\n","import { FarMedmorFødselOgMorHarIkkeRettUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\n\nimport {\n    FarMedmorFødselOgMorHarIkkeRettFormData,\n    FarMedmorFødselOgMorHarIkkeRettFormField,\n} from './farMedmorFødselOgMorHarIkkeRettFormConfig';\nimport { Dekningsgrad } from '@navikt/fp-common';\n\nconst initialFarMedmorFødselOgMorHarIkkeRettValues: FarMedmorFødselOgMorHarIkkeRettFormData = {\n    [FarMedmorFødselOgMorHarIkkeRettFormField.dekningsgrad]: '',\n    [FarMedmorFødselOgMorHarIkkeRettFormField.permisjonStartdato]: '',\n};\n\nexport const mapFarMedmorFødselOgMorHarIkkeRettFormToState = (\n    values: Partial<FarMedmorFødselOgMorHarIkkeRettFormData>,\n): FarMedmorFødselOgMorHarIkkeRettUttaksplanInfo => {\n    return {\n        permisjonStartdato: values.permisjonStartdato!,\n    };\n};\n\nexport const getInitialFarMedmorFødselOgMorHarIkkeRettValues = (\n    lagretUttaksplanInfo: FarMedmorFødselOgMorHarIkkeRettUttaksplanInfo | undefined,\n    dekningsgrad?: Dekningsgrad,\n): FarMedmorFødselOgMorHarIkkeRettFormData => {\n    if (lagretUttaksplanInfo) {\n        return {\n            ...lagretUttaksplanInfo,\n            [FarMedmorFødselOgMorHarIkkeRettFormField.dekningsgrad]: dekningsgrad!,\n        };\n    }\n\n    return initialFarMedmorFødselOgMorHarIkkeRettValues;\n};\n","import { QuestionConfig, Questions } from '@navikt/sif-common-question-config';\nimport { hasValue } from '@navikt/fp-common';\nimport {\n    FarMedmorFødselOgMorHarIkkeRettFormData,\n    FarMedmorFødselOgMorHarIkkeRettFormField,\n} from './farMedmorFødselOgMorHarIkkeRettFormConfig';\nimport { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\n\nexport interface FarMedmorFødselOgMorHarIkkeRettQuestionsPayload extends FarMedmorFødselOgMorHarIkkeRettFormData {\n    erMorUfør: boolean;\n    familiehendelsesdato: Date;\n}\n\nconst FarMedmorFødselOgMorHarIkkeRettFormConfig: QuestionConfig<\n    FarMedmorFødselOgMorHarIkkeRettQuestionsPayload,\n    FarMedmorFødselOgMorHarIkkeRettFormField\n> = {\n    [FarMedmorFødselOgMorHarIkkeRettFormField.dekningsgrad]: {\n        isAnswered: ({ dekningsgrad }) => hasValue(dekningsgrad),\n        isIncluded: () => true,\n    },\n    [FarMedmorFødselOgMorHarIkkeRettFormField.permisjonStartdato]: {\n        isAnswered: ({ permisjonStartdato }) => hasValue(permisjonStartdato),\n        isIncluded: ({ dekningsgrad, erMorUfør, familiehendelsesdato }) =>\n            andreAugust2022ReglerGjelder(familiehendelsesdato) || (hasValue(dekningsgrad) && erMorUfør),\n    },\n};\n\nexport const farMedmorFødselOgMorHarIkkeRettQuestionsConfig = Questions<\n    FarMedmorFødselOgMorHarIkkeRettQuestionsPayload,\n    FarMedmorFødselOgMorHarIkkeRettFormField\n>(FarMedmorFødselOgMorHarIkkeRettFormConfig);\n","import { FunctionComponent, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { DatepickerDateRange } from '@navikt/ds-datepicker';\nimport { DateRange, dateToISOString } from '@navikt/sif-common-formik-ds/lib';\nimport { Button, GuidePanel } from '@navikt/ds-react';\nimport {\n    Block,\n    Forelder,\n    ISOStringToDate,\n    StepButtonWrapper,\n    Tidsperioden,\n    Uttaksdagen,\n    andreAugust2022ReglerGjelder,\n    formaterNavn,\n    getErMorUfør,\n    intlUtils,\n    isAnnenForelderOppgitt,\n    isFarEllerMedmor,\n    uttaksplanDatoavgrensninger,\n} from '@navikt/fp-common';\nimport { getHarAktivitetskravIPeriodeUtenUttak } from '@navikt/uttaksplan';\nimport { notEmpty } from '@navikt/fp-validation';\nimport Person from '@navikt/fp-common/src/common/types/Person';\nimport {\n    FarMedmorFødselOgMorHarIkkeRettFormComponents,\n    FarMedmorFødselOgMorHarIkkeRettFormData,\n    FarMedmorFødselOgMorHarIkkeRettFormField,\n} from './farMedmorFødselOgMorHarIkkeRettFormConfig';\nimport { getValgtStønadskontoFor80Og100Prosent } from 'app/utils/stønadskontoUtils';\nimport {\n    getInitialFarMedmorFødselOgMorHarIkkeRettValues,\n    mapFarMedmorFødselOgMorHarIkkeRettFormToState,\n} from './farMedmorFødselOgMorHarIkkeRettUtils';\nimport SøknadRoutes from 'app/routes/routes';\nimport { getFamiliehendelsedato, getFødselsdato, getTermindato } from 'app/utils/barnUtils';\nimport {\n    FarMedmorFødselOgMorHarIkkeRettQuestionsPayload,\n    farMedmorFødselOgMorHarIkkeRettQuestionsConfig,\n} from './farMedmorFødselOgMorHarIkkeRettQuestionsConfig';\nimport { TilgjengeligeStønadskontoerDTO } from 'app/types/TilgjengeligeStønadskontoerDTO';\nimport TilgjengeligeDagerGraf from '../../tilgjengeligeDagerGraf/TilgjengeligeDagerGraf';\nimport { getTilgjengeligeDager } from '../../tilgjengeligeDagerGraf/tilgjengeligeDagerUtils';\nimport { validateStartdatoFarMedmor } from './validation/farMedmorFødselOgMorHarIkkeRettValidering';\nimport DekningsgradSpørsmål from '../spørsmål/DekningsgradSpørsmål';\nimport { getDekningsgradFromString } from 'app/utils/getDekningsgradFromString';\nimport { lagUttaksplan } from 'app/utils/uttaksplan/lagUttaksplan';\nimport { skalViseInfoOmPrematuruker } from 'app/utils/uttaksplanInfoUtils';\nimport { getPreviousStepHref } from 'app/steps/stepsConfig';\nimport { ContextDataType, useContextGetData, useContextSaveData } from 'app/context/FpDataContext';\nimport BackButton from 'app/steps/BackButton';\nimport { UttaksplanMetaData } from 'app/types/UttaksplanMetaData';\n\nconst konverterStringTilDate = (invalidDateRanges?: DatepickerDateRange[]): DateRange[] | undefined => {\n    if (!invalidDateRanges) {\n        return undefined;\n    }\n\n    return invalidDateRanges.map((r) => ({\n        from: ISOStringToDate(r.from)!,\n        to: ISOStringToDate(r.to)!,\n    }));\n};\n\nexport interface Props {\n    tilgjengeligeStønadskontoer100DTO: TilgjengeligeStønadskontoerDTO;\n    tilgjengeligeStønadskontoer80DTO: TilgjengeligeStønadskontoerDTO;\n    erEndringssøknad: boolean;\n    person: Person;\n    mellomlagreSøknadOgNaviger: () => void;\n    oppdaterBarnOgLagreUttaksplandata: (metadata: UttaksplanMetaData) => void;\n}\n\nconst FarMedmorFødselOgMorHarIkkeRett: FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer80DTO,\n    tilgjengeligeStønadskontoer100DTO,\n    erEndringssøknad,\n    person,\n    mellomlagreSøknadOgNaviger,\n    oppdaterBarnOgLagreUttaksplandata,\n}) => {\n    const intl = useIntl();\n    const [isSubmitting, setIsSubmitting] = useState(false);\n\n    const søkersituasjon = notEmpty(useContextGetData(ContextDataType.SØKERSITUASJON));\n    const barn = notEmpty(useContextGetData(ContextDataType.OM_BARNET));\n    const annenForelder = notEmpty(useContextGetData(ContextDataType.ANNEN_FORELDER));\n    const barnFraNesteSak = useContextGetData(ContextDataType.BARN_FRA_NESTE_SAK);\n    const uttaksplanMetadata = useContextGetData(ContextDataType.UTTAKSPLAN_METADATA);\n    // TODO (TOR) fjern as\n    const uttaksplanInfo = useContextGetData(\n        ContextDataType.UTTAKSPLAN_INFO,\n    ) as FarMedmorFødselOgMorHarIkkeRettFormData;\n\n    const oppdaterAppRoute = useContextSaveData(ContextDataType.APP_ROUTE);\n    const oppdaterUttaksplanInfo = useContextSaveData(ContextDataType.UTTAKSPLAN_INFO);\n    const oppdaterUttaksplan = useContextSaveData(ContextDataType.UTTAKSPLAN);\n\n    const { fornavn, mellomnavn, etternavn } = person;\n\n    const førsteUttaksdagNesteBarnsSak =\n        barnFraNesteSak !== undefined ? barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const erFødsel = søkersituasjon.situasjon === 'fødsel';\n    const annenForelderHarIkkeRett = isAnnenForelderOppgitt(annenForelder)\n        ? annenForelder.harRettPåForeldrepengerINorge === false && annenForelder.harRettPåForeldrepengerIEØS === false\n        : false;\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const familiehendelsesdatoDate = ISOStringToDate(familiehendelsesdato);\n    const termindato = getTermindato(barn);\n\n    const onSubmit = (values: Partial<FarMedmorFødselOgMorHarIkkeRettFormData>) => {\n        setIsSubmitting(true);\n\n        const startDatoUttaksplan =\n            andreAugust2022ReglerGjelder(familiehendelsesdatoDate!) || getErMorUfør(annenForelder, erFarEllerMedmor)\n                ? values.permisjonStartdato\n                : dateToISOString(Uttaksdagen(Uttaksdagen(familiehendelsesdatoDate!).denneEllerNeste()).leggTil(30));\n\n        const uttaksplan = lagUttaksplan({\n            annenForelderErUfør: erMorUfør,\n            erDeltUttak: false,\n            erEndringssøknad,\n            erEnkelEndringssøknad: erEndringssøknad,\n            familiehendelsesdato: familiehendelsesdatoDate!,\n            førsteUttaksdagEtterSeksUker: Uttaksdagen(Uttaksdagen(familiehendelsesdatoDate!).denneEllerNeste()).leggTil(\n                30,\n            ),\n            situasjon: søkersituasjon.situasjon,\n            søkerErFarEllerMedmor: erFarEllerMedmor,\n            søkerHarMidlertidigOmsorg: false,\n            tilgjengeligeStønadskontoer: tilgjengeligeStønadskontoer[getDekningsgradFromString(values.dekningsgrad)],\n            uttaksplanSkjema: {\n                startdatoPermisjon: startDatoUttaksplan,\n            },\n            bareFarMedmorHarRett: true,\n            termindato,\n            harAktivitetskravIPeriodeUtenUttak: getHarAktivitetskravIPeriodeUtenUttak({\n                erDeltUttak: false,\n                morHarRett: false,\n                søkerErAleneOmOmsorg: false,\n            }),\n            førsteUttaksdagNesteBarnsSak,\n        });\n\n        oppdaterUttaksplanInfo(mapFarMedmorFødselOgMorHarIkkeRettFormToState(values));\n\n        oppdaterUttaksplan(uttaksplan);\n\n        oppdaterBarnOgLagreUttaksplandata({\n            ...uttaksplanMetadata,\n            dekningsgrad: getDekningsgradFromString(values.dekningsgrad),\n        });\n\n        oppdaterAppRoute(SøknadRoutes.UTTAKSPLAN);\n\n        mellomlagreSøknadOgNaviger();\n    };\n\n    const shouldRender = erFarEllerMedmor && erFødsel && annenForelderHarIkkeRett;\n\n    if (!shouldRender) {\n        return null;\n    }\n\n    const erDeltUttak = !annenForelderHarIkkeRett;\n    const erMorUfør = isAnnenForelderOppgitt(annenForelder) ? !!annenForelder.erUfør : false;\n    const navnMor = isAnnenForelderOppgitt(annenForelder)\n        ? formaterNavn(annenForelder.fornavn, annenForelder.etternavn, true)\n        : '';\n    const navnFarMedmor = formaterNavn(fornavn, etternavn, true, mellomnavn);\n    const datoAvgrensinger = uttaksplanDatoavgrensninger.startdatoPermisjonFarMedmor(\n        familiehendelsesdatoDate!,\n        termindato,\n        søkersituasjon.situasjon,\n    );\n    const fødselsdato = getFødselsdato(barn);\n    const visInfoOmPrematuruker = skalViseInfoOmPrematuruker(fødselsdato, termindato, søkersituasjon.situasjon);\n    const ekstraDagerGrunnetPrematurFødsel = visInfoOmPrematuruker\n        ? Tidsperioden({ fom: fødselsdato!, tom: termindato! }).getAntallUttaksdager() - 1\n        : undefined;\n\n    const tilgjengeligeStønadskontoer = getValgtStønadskontoFor80Og100Prosent(\n        tilgjengeligeStønadskontoer80DTO,\n        tilgjengeligeStønadskontoer100DTO,\n    );\n\n    return (\n        <FarMedmorFødselOgMorHarIkkeRettFormComponents.FormikWrapper\n            initialValues={getInitialFarMedmorFødselOgMorHarIkkeRettValues(\n                uttaksplanInfo,\n                uttaksplanMetadata?.dekningsgrad,\n            )}\n            onSubmit={onSubmit}\n            renderForm={({ values: formValues }) => {\n                const visibility = farMedmorFødselOgMorHarIkkeRettQuestionsConfig.getVisbility({\n                    ...formValues,\n                    erMorUfør,\n                    familiehendelsesdato: familiehendelsesdatoDate!,\n                } as FarMedmorFødselOgMorHarIkkeRettQuestionsPayload);\n\n                const valgtStønadskonto = tilgjengeligeStønadskontoer[formValues.dekningsgrad === '100' ? 100 : 80];\n\n                return (\n                    <FarMedmorFødselOgMorHarIkkeRettFormComponents.Form\n                        includeButtons={false}\n                        includeValidationSummary={true}\n                    >\n                        <Block\n                            padBottom=\"l\"\n                            visible={visibility.isIncluded(FarMedmorFødselOgMorHarIkkeRettFormField.dekningsgrad)}\n                        >\n                            <DekningsgradSpørsmål\n                                FormKomponent={FarMedmorFødselOgMorHarIkkeRettFormComponents}\n                                dekningsgradFeltNavn={FarMedmorFødselOgMorHarIkkeRettFormField.dekningsgrad}\n                                tilgjengeligeStønadskontoer={tilgjengeligeStønadskontoer}\n                                erDeltUttak={erDeltUttak}\n                            />\n                        </Block>\n                        <Block\n                            padBottom=\"xl\"\n                            visible={visibility.isAnswered(FarMedmorFødselOgMorHarIkkeRettFormField.dekningsgrad)}\n                        >\n                            {valgtStønadskonto && (\n                                <TilgjengeligeDagerGraf\n                                    erDeltUttak={erDeltUttak}\n                                    erFarEllerMedmor\n                                    navnFarMedmor={navnFarMedmor}\n                                    navnMor={navnMor}\n                                    tilgjengeligeDager={getTilgjengeligeDager(\n                                        valgtStønadskonto,\n                                        erDeltUttak,\n                                        Forelder.farMedmor,\n                                    )}\n                                />\n                            )}\n                        </Block>\n                        <Block padBottom=\"xl\" visible={visInfoOmPrematuruker === true}>\n                            <GuidePanel>\n                                <FormattedMessage\n                                    id=\"uttaksplaninfo.veileder.informasjonPrematuruker\"\n                                    values={{\n                                        antallprematuruker: Math.floor(ekstraDagerGrunnetPrematurFødsel! / 5),\n                                        antallprematurdager: ekstraDagerGrunnetPrematurFødsel! % 5,\n                                    }}\n                                />\n                            </GuidePanel>\n                        </Block>\n                        <Block\n                            padBottom=\"xl\"\n                            visible={visibility.isIncluded(FarMedmorFødselOgMorHarIkkeRettFormField.permisjonStartdato)}\n                        >\n                            <FarMedmorFødselOgMorHarIkkeRettFormComponents.DatePicker\n                                name={FarMedmorFødselOgMorHarIkkeRettFormField.permisjonStartdato}\n                                label={intlUtils(intl, 'uttaksplaninfo.spørsmål.startdatoPermisjonFarMedmor.label')}\n                                minDate={ISOStringToDate(datoAvgrensinger.minDate)}\n                                maxDate={ISOStringToDate(datoAvgrensinger.maxDate)}\n                                disabledDateRanges={konverterStringTilDate(datoAvgrensinger.invalidDateRanges)}\n                                disableWeekend={datoAvgrensinger.weekendsNotSelectable}\n                                validate={validateStartdatoFarMedmor(\n                                    intl,\n                                    ISOStringToDate(datoAvgrensinger.minDate)!,\n                                    ISOStringToDate(datoAvgrensinger.maxDate)!,\n                                )}\n                                placeholder={'dd.mm.åååå'}\n                            />\n                        </Block>\n                        <Block>\n                            <StepButtonWrapper>\n                                <BackButton\n                                    mellomlagreSøknadOgNaviger={mellomlagreSøknadOgNaviger}\n                                    route={getPreviousStepHref('uttaksplanInfo')}\n                                />\n                                {visibility.areAllQuestionsAnswered() && (\n                                    <Button type=\"submit\" disabled={isSubmitting} loading={isSubmitting}>\n                                        {intlUtils(intl, 'søknad.gåVidere')}\n                                    </Button>\n                                )}\n                            </StepButtonWrapper>\n                        </Block>\n                    </FarMedmorFødselOgMorHarIkkeRettFormComponents.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default FarMedmorFødselOgMorHarIkkeRett;\n","import { getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\n\nexport enum FarMedmorFørstegangssøknadMedAnnenPartFormField {\n    permisjonStartdato = 'permisjonStartdato',\n}\n\nexport interface FarMedmorFørstegangssøknadMedAnnenPartFormData {\n    [FarMedmorFørstegangssøknadMedAnnenPartFormField.permisjonStartdato]: string;\n}\n\nexport const FarMedmorFørstegangssøknadMedAnnenPartFormComponents = getTypedFormComponents<\n    FarMedmorFørstegangssøknadMedAnnenPartFormField,\n    FarMedmorFørstegangssøknadMedAnnenPartFormData\n>();\n","import { QuestionConfig, Questions } from '@navikt/sif-common-question-config';\nimport { hasValue } from '@navikt/fp-common';\nimport {\n    FarMedmorFørstegangssøknadMedAnnenPartFormData,\n    FarMedmorFørstegangssøknadMedAnnenPartFormField,\n} from './farMedmorFørstegangssøknadMedAnnenPartFormConfig';\n\nconst FarMedmorFørstegangssøknadMedAnnenPartFormConfig: QuestionConfig<\n    FarMedmorFørstegangssøknadMedAnnenPartFormData,\n    FarMedmorFørstegangssøknadMedAnnenPartFormField\n> = {\n    [FarMedmorFørstegangssøknadMedAnnenPartFormField.permisjonStartdato]: {\n        isIncluded: () => true,\n        isAnswered: ({ permisjonStartdato }) => hasValue(permisjonStartdato),\n    },\n};\n\nexport const farMedmorFørstegangssøknadMedAnnenPartQuestionsConfig = Questions<\n    FarMedmorFørstegangssøknadMedAnnenPartFormData,\n    FarMedmorFørstegangssøknadMedAnnenPartFormField\n>(FarMedmorFørstegangssøknadMedAnnenPartFormConfig);\n","import { FarMedmorFørstegangssøknadMedAnnenPartUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport { FarMedmorFørstegangssøknadMedAnnenPartFormData } from './farMedmorFørstegangssøknadMedAnnenPartFormConfig';\n\nexport const getFarMedmorFørstegangssøknadMedAnnenPartInitialValues = (\n    state: FarMedmorFørstegangssøknadMedAnnenPartUttaksplanInfo | undefined,\n): FarMedmorFørstegangssøknadMedAnnenPartFormData => {\n    if (!state) {\n        return {\n            permisjonStartdato: '',\n        };\n    }\n\n    return {\n        permisjonStartdato: state.permisjonStartdato,\n    };\n};\n","import { FunctionComponent, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { Button } from '@navikt/ds-react';\nimport { getHarAktivitetskravIPeriodeUtenUttak } from '@navikt/uttaksplan';\nimport { notEmpty } from '@navikt/fp-validation';\nimport { dateToISOString } from '@navikt/sif-common-formik-ds/lib';\nimport {\n    Block,\n    EksisterendeSak,\n    Forelder,\n    ISOStringToDate,\n    StepButtonWrapper,\n    Uttaksdagen,\n    getErMorUfør,\n    getMorHarRettPåForeldrepengerINorgeEllerEØS,\n    intlUtils,\n    isAnnenForelderOppgitt,\n    isFarEllerMedmor,\n    isInfoPeriode,\n} from '@navikt/fp-common';\nimport InfoOmSøknaden from 'app/components/info-eksisterende-sak/InfoOmSøknaden';\nimport { FarMedmorFørstegangssøknadMedAnnenPartUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport SøknadRoutes from 'app/routes/routes';\nimport { getAntallUker } from 'app/steps/uttaksplan-info/utils/stønadskontoer';\nimport { TilgjengeligeStønadskontoerDTO } from 'app/types/TilgjengeligeStønadskontoerDTO';\nimport { getFamiliehendelsedato, getTermindato } from 'app/utils/barnUtils';\nimport { getDekningsgradFromString } from 'app/utils/getDekningsgradFromString';\nimport { getValgtStønadskontoFor80Og100Prosent } from 'app/utils/stønadskontoUtils';\nimport { lagUttaksplan } from 'app/utils/uttaksplan/lagUttaksplan';\nimport FarMedmorsFørsteDag from '../spørsmål/FarMedmorsFørsteDag';\nimport {\n    FarMedmorFørstegangssøknadMedAnnenPartFormComponents,\n    FarMedmorFørstegangssøknadMedAnnenPartFormData,\n    FarMedmorFørstegangssøknadMedAnnenPartFormField,\n} from './farMedmorFørstegangssøknadMedAnnenPartFormConfig';\nimport { farMedmorFørstegangssøknadMedAnnenPartQuestionsConfig } from './farMedmorFørstegangssøknadMedAnnenPartQuestionsConfig';\nimport { getFarMedmorFørstegangssøknadMedAnnenPartInitialValues } from './farMedmorFørstegangssøknadMedAnnenPartUtils';\nimport { leggTilAnnenPartsPerioderISøkerenesUttaksplan } from 'app/steps/uttaksplan-info/utils/leggTilAnnenPartsPerioderISøkerensUttaksplan';\nimport { getPreviousStepHref } from 'app/steps/stepsConfig';\nimport { ContextDataType, useContextGetData, useContextSaveData } from 'app/context/FpDataContext';\nimport Person from '@navikt/fp-common/src/common/types/Person';\nimport BackButton from 'app/steps/BackButton';\nimport { UttaksplanMetaData } from 'app/types/UttaksplanMetaData';\n\ninterface Props {\n    tilgjengeligeStønadskontoer100DTO: TilgjengeligeStønadskontoerDTO;\n    tilgjengeligeStønadskontoer80DTO: TilgjengeligeStønadskontoerDTO;\n    eksisterendeSakAnnenPart: EksisterendeSak | undefined;\n    erEndringssøknad: boolean;\n    mellomlagreSøknadOgNaviger: () => void;\n    person: Person;\n    oppdaterBarnOgLagreUttaksplandata: (metadata: UttaksplanMetaData) => void;\n}\n\nconst FarMedmorFørstegangssøknadMedAnnenPart: FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer100DTO,\n    tilgjengeligeStønadskontoer80DTO,\n    eksisterendeSakAnnenPart,\n    erEndringssøknad,\n    mellomlagreSøknadOgNaviger,\n    person,\n    oppdaterBarnOgLagreUttaksplandata,\n}) => {\n    const intl = useIntl();\n    const [isSubmitting, setIsSubmitting] = useState(false);\n\n    const søkersituasjon = notEmpty(useContextGetData(ContextDataType.SØKERSITUASJON));\n    const barn = notEmpty(useContextGetData(ContextDataType.OM_BARNET));\n    const annenForelder = notEmpty(useContextGetData(ContextDataType.ANNEN_FORELDER));\n    const barnFraNesteSak = useContextGetData(ContextDataType.BARN_FRA_NESTE_SAK);\n    const uttaksplanMetadata = useContextGetData(ContextDataType.UTTAKSPLAN_METADATA);\n    // TODO (TOR) fjern as\n    const uttaksplanInfo = useContextGetData(\n        ContextDataType.UTTAKSPLAN_INFO,\n    ) as FarMedmorFørstegangssøknadMedAnnenPartUttaksplanInfo;\n\n    const oppdaterAppRoute = useContextSaveData(ContextDataType.APP_ROUTE);\n    const oppdaterUttaksplanInfo = useContextSaveData(ContextDataType.UTTAKSPLAN_INFO);\n    const oppdaterUttaksplan = useContextSaveData(ContextDataType.UTTAKSPLAN);\n\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const familiehendelsedato = getFamiliehendelsedato(barn);\n    const familiehendelsedatoDate = ISOStringToDate(familiehendelsedato);\n    const erFødsel = søkersituasjon.situasjon === 'fødsel';\n    const erAdopsjon = søkersituasjon.situasjon === 'adopsjon';\n    const erMorUfør = getErMorUfør(annenForelder, erFarEllerMedmor);\n    const bareFarHarRett = !getMorHarRettPåForeldrepengerINorgeEllerEØS(\n        søkersituasjon.rolle,\n        erFarEllerMedmor,\n        annenForelder,\n    );\n    const førsteUttaksdagNesteBarnsSak =\n        barnFraNesteSak !== undefined ? barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n    const erDeltUttak = true;\n    const termindato = getTermindato(barn);\n    const harAktivitetskravIPeriodeUtenUttak = getHarAktivitetskravIPeriodeUtenUttak({\n        erDeltUttak,\n        morHarRett: true,\n        søkerErAleneOmOmsorg: false,\n    });\n\n    const morsSisteUttaksdag =\n        eksisterendeSakAnnenPart && eksisterendeSakAnnenPart.uttaksplan.length > 0\n            ? dateToISOString(\n                  eksisterendeSakAnnenPart.uttaksplan[eksisterendeSakAnnenPart.uttaksplan.length - 1].tidsperiode.tom,\n              )\n            : undefined;\n\n    const onSubmit = (values: Partial<FarMedmorFørstegangssøknadMedAnnenPartFormData>) => {\n        setIsSubmitting(true);\n\n        const uttaksplanInfo: FarMedmorFørstegangssøknadMedAnnenPartUttaksplanInfo = {\n            permisjonStartdato: values.permisjonStartdato!,\n        };\n        oppdaterUttaksplanInfo(uttaksplanInfo);\n\n        const stønadskontoer = tilgjengeligeStønadskontoer[getDekningsgradFromString(grunnlag.dekningsgrad)];\n        const farMedmorSinePerioder = lagUttaksplan({\n            annenForelderErUfør: erMorUfør,\n            erDeltUttak,\n            erEndringssøknad,\n            erEnkelEndringssøknad: erEndringssøknad,\n            familiehendelsesdato: familiehendelsedatoDate!,\n            førsteUttaksdagEtterSeksUker: Uttaksdagen(Uttaksdagen(familiehendelsedatoDate!).denneEllerNeste()).leggTil(\n                30,\n            ),\n            situasjon: erFødsel ? 'fødsel' : 'adopsjon',\n            søkerErFarEllerMedmor: erFarEllerMedmor,\n            søkerHarMidlertidigOmsorg: false,\n            tilgjengeligeStønadskontoer: stønadskontoer,\n            uttaksplanSkjema: {\n                morSinSisteUttaksdag: morsSisteUttaksdag,\n                farSinFørsteUttaksdag: values.permisjonStartdato,\n                antallDagerFellesperiodeFarMedmor: undefined,\n                antallUkerFellesperiodeFarMedmor: undefined,\n            },\n            bareFarMedmorHarRett: bareFarHarRett,\n            termindato,\n            harAktivitetskravIPeriodeUtenUttak,\n            førsteUttaksdagNesteBarnsSak,\n        });\n        let uttaksplanMedAnnenPart;\n\n        if (eksisterendeSakAnnenPart && farMedmorSinePerioder.length > 0) {\n            uttaksplanMedAnnenPart = leggTilAnnenPartsPerioderISøkerenesUttaksplan(\n                eksisterendeSakAnnenPart.uttaksplan,\n                farMedmorSinePerioder,\n                familiehendelsedatoDate!,\n                harAktivitetskravIPeriodeUtenUttak,\n                erAdopsjon,\n                bareFarHarRett,\n                erFarEllerMedmor,\n                førsteUttaksdagNesteBarnsSak,\n            );\n        } else if (eksisterendeSakAnnenPart) {\n            uttaksplanMedAnnenPart = eksisterendeSakAnnenPart.uttaksplan;\n        } else {\n            uttaksplanMedAnnenPart = farMedmorSinePerioder;\n        }\n\n        const antallUker = getAntallUker(tilgjengeligeStønadskontoer[grunnlag.dekningsgrad]);\n\n        oppdaterUttaksplan(uttaksplanMedAnnenPart);\n\n        oppdaterBarnOgLagreUttaksplandata({\n            ...uttaksplanMetadata,\n            dekningsgrad: grunnlag.dekningsgrad,\n            antallUkerIUttaksplan: antallUker,\n        });\n\n        oppdaterAppRoute(SøknadRoutes.UTTAKSPLAN);\n\n        mellomlagreSøknadOgNaviger();\n    };\n\n    if (!eksisterendeSakAnnenPart || !erFarEllerMedmor) {\n        return null;\n    }\n\n    const navnMor = isAnnenForelderOppgitt(annenForelder) ? annenForelder.fornavn : '';\n    const { grunnlag, uttaksplan } = eksisterendeSakAnnenPart;\n    const morsPerioder = uttaksplan.filter((p) => isInfoPeriode(p) && p.forelder === Forelder.mor);\n    const morsSisteDag = morsPerioder.reverse()[0].tidsperiode.tom;\n\n    const tilgjengeligeStønadskontoer = getValgtStønadskontoFor80Og100Prosent(\n        tilgjengeligeStønadskontoer80DTO,\n        tilgjengeligeStønadskontoer100DTO,\n    );\n\n    return (\n        <FarMedmorFørstegangssøknadMedAnnenPartFormComponents.FormikWrapper\n            initialValues={getFarMedmorFørstegangssøknadMedAnnenPartInitialValues(uttaksplanInfo)}\n            onSubmit={onSubmit}\n            renderForm={({ values: formValues, setFieldValue }) => {\n                const visibility = farMedmorFørstegangssøknadMedAnnenPartQuestionsConfig.getVisbility(\n                    formValues as FarMedmorFørstegangssøknadMedAnnenPartFormData,\n                );\n                const valgtMengdeStønadskonto = tilgjengeligeStønadskontoer[grunnlag.dekningsgrad];\n\n                return (\n                    <FarMedmorFørstegangssøknadMedAnnenPartFormComponents.Form\n                        includeButtons={false}\n                        includeValidationSummary={true}\n                    >\n                        <Block padBottom=\"xl\">\n                            <InfoOmSøknaden\n                                eksisterendeSak={eksisterendeSakAnnenPart}\n                                erIUttaksplanenSteg={false}\n                                tilgjengeligeStønadskontoer={valgtMengdeStønadskonto}\n                                person={person}\n                            />\n                        </Block>\n                        <Block padBottom=\"xl\">\n                            <FarMedmorsFørsteDag\n                                FormComponents={FarMedmorFørstegangssøknadMedAnnenPartFormComponents}\n                                fieldName={FarMedmorFørstegangssøknadMedAnnenPartFormField.permisjonStartdato}\n                                familiehendelsesdato={familiehendelsedatoDate!}\n                                setFieldValue={setFieldValue}\n                                morsSisteDag={morsSisteDag}\n                                navnMor={navnMor}\n                                termindato={termindato}\n                                situasjon={søkersituasjon.situasjon}\n                                morHarRettTilForeldrepengerIEØS={false}\n                            />\n                        </Block>\n                        <Block>\n                            <StepButtonWrapper>\n                                <BackButton\n                                    mellomlagreSøknadOgNaviger={mellomlagreSøknadOgNaviger}\n                                    route={getPreviousStepHref('uttaksplanInfo')}\n                                />\n                                {visibility.areAllQuestionsAnswered() && (\n                                    <Button type=\"submit\" disabled={isSubmitting} loading={isSubmitting}>\n                                        {intlUtils(intl, 'søknad.gåVidere')}\n                                    </Button>\n                                )}\n                            </StepButtonWrapper>\n                        </Block>\n                    </FarMedmorFørstegangssøknadMedAnnenPartFormComponents.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default FarMedmorFørstegangssøknadMedAnnenPart;\n","import { EksisterendeSak } from '@navikt/fp-common';\n\nexport type UttaksplanInfoScenario =\n    | 'farMedmorAleneomsorgFødselAdopsjon'\n    | 'farMedmorFødselBeggeHarRett'\n    | 'farMedmorFødselMorHarIkkeRett'\n    | 'farMedmorFørstegangssøknadMedAnnenPart'\n    | 'morFarAdopsjon'\n    | 'morFødsel'\n    | 'morFarFødselAnnenForelderHarRettIEØS'\n    | 'morFarAdopsjonAnnenForelderHarRettIEØS';\n\ninterface UttaksplanScenarioParams {\n    erFødsel: boolean;\n    erFarEllerMedmor: boolean;\n    søkerErAleneOmOmsorg: boolean;\n    annenForelderKanIkkeOppgis: boolean;\n    annenForelderHarRett: boolean;\n    erAdopsjon: boolean;\n    eksisterendeSakAnnenPart: EksisterendeSak | undefined;\n    annenForelderOppgittIkkeAleneOmOmsorg: boolean;\n    annenForelderHarRettIEØS: boolean;\n}\n\nexport const getUttaksplanScenario = ({\n    erFødsel,\n    erFarEllerMedmor,\n    søkerErAleneOmOmsorg,\n    annenForelderKanIkkeOppgis,\n    annenForelderHarRett,\n    eksisterendeSakAnnenPart,\n    erAdopsjon,\n    annenForelderOppgittIkkeAleneOmOmsorg,\n    annenForelderHarRettIEØS,\n}: UttaksplanScenarioParams): UttaksplanInfoScenario => {\n    if (erFødsel && erFarEllerMedmor && (søkerErAleneOmOmsorg || annenForelderKanIkkeOppgis)) {\n        return 'farMedmorAleneomsorgFødselAdopsjon';\n    }\n    if (annenForelderHarRettIEØS) {\n        return erFødsel ? 'morFarFødselAnnenForelderHarRettIEØS' : 'morFarAdopsjonAnnenForelderHarRettIEØS';\n    }\n\n    if (\n        erFarEllerMedmor &&\n        erFødsel &&\n        annenForelderHarRett &&\n        (eksisterendeSakAnnenPart === undefined || eksisterendeSakAnnenPart.uttaksplan.length === 0)\n    ) {\n        return 'farMedmorFødselBeggeHarRett';\n    }\n\n    if (erFarEllerMedmor && erFødsel && !annenForelderHarRett) {\n        return 'farMedmorFødselMorHarIkkeRett';\n    }\n\n    if (eksisterendeSakAnnenPart && erFarEllerMedmor) {\n        return 'farMedmorFørstegangssøknadMedAnnenPart';\n    }\n\n    if (erAdopsjon && (annenForelderOppgittIkkeAleneOmOmsorg || annenForelderKanIkkeOppgis || søkerErAleneOmOmsorg)) {\n        return 'morFarAdopsjon';\n    }\n\n    return 'morFødsel';\n};\n","import { FunctionComponent } from 'react';\nimport {\n    AnnenForelder,\n    EksisterendeSak,\n    harAnnenForelderRettIEØS,\n    isAnnenForelderOppgitt,\n    isFarEllerMedmor,\n} from '@navikt/fp-common';\nimport { SøkersituasjonFp } from '@navikt/fp-types';\nimport Person from '@navikt/fp-common/src/common/types/Person';\nimport { TilgjengeligeStønadskontoerDTO } from 'app/types/TilgjengeligeStønadskontoerDTO';\nimport Søker from 'app/context/types/Søker';\nimport FarMedmorFødselFørsteganggsøknadBeggeHarRett from './scenarios/far-medmor-fødsel-begge-har-rett/FarMedmorFødselBeggeHarRett';\nimport MorFødsel from './scenarios/mor-fodsel/MorFødsel';\nimport MorFarAdopsjon from './scenarios/mor-far-adopsjon/MorFarAdopsjon';\nimport MorFarAdopsjonAnnenForelderHarRettIEØS from './scenarios/mor-far-adopsjon-annen-part-har-rett-i-eøs/MorFarAdopsjonAnnenForelderHarRettIEØS';\nimport MorFarFødselAnnenForelderHarRettIEØS from './scenarios/mor-far-fødsel-annen-part-har-rett-i-eøs/MorFarFødselAnnenForelderHarRettIEØS';\nimport FarMedmorAleneomsorgFødselAdopsjon from './scenarios/far-medmor-aleneomsorg-fødsel/FarMedmorAleneomsorgFødsel';\nimport FarMedmorFødselOgMorHarIkkeRett from './scenarios/far-medmor-fødsel-og-mor-har-ikke-rett/FarMedmorFødselOgMorHarIkkeRett';\nimport FarMedmorFørstegangssøknadMedAnnenPart from './scenarios/farMedmor-førstegangssøknad-med-annen-part/FarMedmorFørstegangssøknadMedAnnenPart';\nimport { getUttaksplanScenario } from './scenarios/scenarios';\nimport { UttaksplanMetaData } from 'app/types/UttaksplanMetaData';\n\ninterface Props {\n    tilgjengeligeStønadskontoer100DTO: TilgjengeligeStønadskontoerDTO;\n    tilgjengeligeStønadskontoer80DTO: TilgjengeligeStønadskontoerDTO;\n    eksisterendeSakAnnenPart: EksisterendeSak | undefined;\n    søkersituasjon: SøkersituasjonFp;\n    søker: Søker;\n    annenForelder: AnnenForelder;\n    erEndringssøknad: boolean;\n    person: Person;\n    mellomlagreSøknadOgNaviger: () => void;\n    oppdaterBarnOgLagreUttaksplandata: (metadata: UttaksplanMetaData) => void;\n}\n\nconst UttaksplanInfoScenarios: FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer100DTO,\n    tilgjengeligeStønadskontoer80DTO,\n    eksisterendeSakAnnenPart,\n    søkersituasjon,\n    søker,\n    annenForelder,\n    erEndringssøknad,\n    person,\n    mellomlagreSøknadOgNaviger,\n    oppdaterBarnOgLagreUttaksplandata,\n}) => {\n    const erFødsel = søkersituasjon.situasjon === 'fødsel';\n    const erAdopsjon = søkersituasjon.situasjon === 'adopsjon';\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const annenForelderHarRett = isAnnenForelderOppgitt(annenForelder)\n        ? !!annenForelder.harRettPåForeldrepengerINorge || !!annenForelder.harRettPåForeldrepengerIEØS\n        : false;\n    const annenForelderOppgittIkkeAleneOmOmsorg = isAnnenForelderOppgitt(annenForelder)\n        ? annenForelder.harRettPåForeldrepengerINorge !== undefined\n        : false;\n    const annenForelderHarRettIEØS = harAnnenForelderRettIEØS(annenForelder);\n\n    const scenario = getUttaksplanScenario({\n        erFødsel,\n        erFarEllerMedmor,\n        søkerErAleneOmOmsorg: !!søker.erAleneOmOmsorg,\n        annenForelderKanIkkeOppgis: annenForelder.kanIkkeOppgis,\n        annenForelderHarRett: annenForelderHarRett,\n        erAdopsjon,\n        eksisterendeSakAnnenPart,\n        annenForelderOppgittIkkeAleneOmOmsorg,\n        annenForelderHarRettIEØS,\n    });\n\n    switch (scenario) {\n        case 'farMedmorAleneomsorgFødselAdopsjon':\n            return (\n                <FarMedmorAleneomsorgFødselAdopsjon\n                    tilgjengeligeStønadskontoer100DTO={tilgjengeligeStønadskontoer100DTO}\n                    tilgjengeligeStønadskontoer80DTO={tilgjengeligeStønadskontoer80DTO}\n                    erEndringssøknad={erEndringssøknad}\n                    person={person}\n                    mellomlagreSøknadOgNaviger={mellomlagreSøknadOgNaviger}\n                    oppdaterBarnOgLagreUttaksplandata={oppdaterBarnOgLagreUttaksplandata}\n                />\n            );\n        case 'farMedmorFødselBeggeHarRett':\n            return (\n                <FarMedmorFødselFørsteganggsøknadBeggeHarRett\n                    tilgjengeligeStønadskontoer100DTO={tilgjengeligeStønadskontoer100DTO}\n                    tilgjengeligeStønadskontoer80DTO={tilgjengeligeStønadskontoer80DTO}\n                    eksisterendeSakAnnenPart={eksisterendeSakAnnenPart}\n                    erEndringssøknad={erEndringssøknad}\n                    person={person}\n                    mellomlagreSøknadOgNaviger={mellomlagreSøknadOgNaviger}\n                    oppdaterBarnOgLagreUttaksplandata={oppdaterBarnOgLagreUttaksplandata}\n                />\n            );\n        case 'farMedmorFødselMorHarIkkeRett':\n            return (\n                <FarMedmorFødselOgMorHarIkkeRett\n                    tilgjengeligeStønadskontoer100DTO={tilgjengeligeStønadskontoer100DTO}\n                    tilgjengeligeStønadskontoer80DTO={tilgjengeligeStønadskontoer80DTO}\n                    erEndringssøknad={erEndringssøknad}\n                    person={person}\n                    mellomlagreSøknadOgNaviger={mellomlagreSøknadOgNaviger}\n                    oppdaterBarnOgLagreUttaksplandata={oppdaterBarnOgLagreUttaksplandata}\n                />\n            );\n        case 'farMedmorFørstegangssøknadMedAnnenPart':\n            return (\n                <FarMedmorFørstegangssøknadMedAnnenPart\n                    tilgjengeligeStønadskontoer100DTO={tilgjengeligeStønadskontoer100DTO}\n                    tilgjengeligeStønadskontoer80DTO={tilgjengeligeStønadskontoer80DTO}\n                    eksisterendeSakAnnenPart={eksisterendeSakAnnenPart}\n                    erEndringssøknad={erEndringssøknad}\n                    mellomlagreSøknadOgNaviger={mellomlagreSøknadOgNaviger}\n                    person={person}\n                    oppdaterBarnOgLagreUttaksplandata={oppdaterBarnOgLagreUttaksplandata}\n                />\n            );\n        case 'morFarAdopsjon':\n            return (\n                <MorFarAdopsjon\n                    tilgjengeligeStønadskontoer100DTO={tilgjengeligeStønadskontoer100DTO}\n                    tilgjengeligeStønadskontoer80DTO={tilgjengeligeStønadskontoer80DTO}\n                    erEndringssøknad={erEndringssøknad}\n                    person={person}\n                    mellomlagreSøknadOgNaviger={mellomlagreSøknadOgNaviger}\n                    oppdaterBarnOgLagreUttaksplandata={oppdaterBarnOgLagreUttaksplandata}\n                />\n            );\n        case 'morFødsel':\n            return (\n                <MorFødsel\n                    tilgjengeligeStønadskontoer100DTO={tilgjengeligeStønadskontoer100DTO}\n                    tilgjengeligeStønadskontoer80DTO={tilgjengeligeStønadskontoer80DTO}\n                    eksisterendeSakFar={eksisterendeSakAnnenPart}\n                    erEndringssøknad={erEndringssøknad}\n                    person={person}\n                    mellomlagreSøknadOgNaviger={mellomlagreSøknadOgNaviger}\n                    oppdaterBarnOgLagreUttaksplandata={oppdaterBarnOgLagreUttaksplandata}\n                />\n            );\n        case 'morFarFødselAnnenForelderHarRettIEØS':\n            return (\n                <MorFarFødselAnnenForelderHarRettIEØS\n                    tilgjengeligeStønadskontoer100DTO={tilgjengeligeStønadskontoer100DTO}\n                    tilgjengeligeStønadskontoer80DTO={tilgjengeligeStønadskontoer80DTO}\n                    erEndringssøknad={erEndringssøknad}\n                    person={person}\n                    mellomlagreSøknadOgNaviger={mellomlagreSøknadOgNaviger}\n                    oppdaterBarnOgLagreUttaksplandata={oppdaterBarnOgLagreUttaksplandata}\n                />\n            );\n        case 'morFarAdopsjonAnnenForelderHarRettIEØS':\n            return (\n                <MorFarAdopsjonAnnenForelderHarRettIEØS\n                    tilgjengeligeStønadskontoer100DTO={tilgjengeligeStønadskontoer100DTO}\n                    tilgjengeligeStønadskontoer80DTO={tilgjengeligeStønadskontoer80DTO}\n                    erEndringssøknad={erEndringssøknad}\n                    person={person}\n                    mellomlagreSøknadOgNaviger={mellomlagreSøknadOgNaviger}\n                    oppdaterBarnOgLagreUttaksplandata={oppdaterBarnOgLagreUttaksplandata}\n                />\n            );\n    }\n};\n\nexport default UttaksplanInfoScenarios;\n","import { getFamiliehendelsedato } from 'app/utils/barnUtils';\nimport { TilgjengeligeStønadskontoerParams } from './api';\nimport { dateToISOString } from '@navikt/sif-common-formik-ds/lib';\nimport {\n    AnnenForelder,\n    Barn,\n    Dekningsgrad,\n    ISOStringToDate,\n    Søkersituasjon,\n    andreAugust2022ReglerGjelder,\n    getErMorUfør,\n    isAdoptertAnnetBarn,\n    isAdoptertStebarn,\n    isAnnenForelderOppgitt,\n    isFarEllerMedmor,\n    isFødtBarn,\n    isUfødtBarn,\n} from '@navikt/fp-common';\n\nconst getFarHarRettINorge = (erFarMedmor: boolean, annenForelder: AnnenForelder): boolean => {\n    if (erFarMedmor) {\n        return true;\n    }\n\n    if (isAnnenForelderOppgitt(annenForelder)) {\n        return !!annenForelder.harRettPåForeldrepengerINorge;\n    }\n\n    return false;\n};\n\nconst getMorHarRettINorge = (erFarMedmor: boolean, annenForelder: AnnenForelder): boolean => {\n    if (!erFarMedmor) {\n        return true;\n    }\n\n    if (isAnnenForelderOppgitt(annenForelder)) {\n        return !!annenForelder.harRettPåForeldrepengerINorge;\n    }\n\n    return false;\n};\n\nconst getAnnenForelderHarRettIEØS = (annenForelder: AnnenForelder): boolean => {\n    if (isAnnenForelderOppgitt(annenForelder)) {\n        return !!annenForelder.harRettPåForeldrepengerIEØS;\n    }\n\n    return false;\n};\n\nconst getTermindatoSomSkalBrukes = (barn: Barn, termindatoSaksgrunnlag?: string) => {\n    if (isFødtBarn(barn) || isUfødtBarn(barn)) {\n        return termindatoSaksgrunnlag ? termindatoSaksgrunnlag : dateToISOString(barn.termindato);\n    }\n\n    return undefined;\n};\n\nexport const getTermindatoSomSkalBrukesFraSaksgrunnlagBeggeParter = (\n    termindatoSaksgrunnlag?: string,\n    termindatoSaksgrunnlagAnnenPart?: string,\n) => {\n    if (termindatoSaksgrunnlagAnnenPart) {\n        return termindatoSaksgrunnlagAnnenPart;\n    }\n\n    return termindatoSaksgrunnlag ? termindatoSaksgrunnlag : undefined;\n};\n\nexport const getAntallBarnSomSkalBrukesFraSaksgrunnlagBeggeParter = (\n    erFarEllerMedmor: boolean,\n    antallBarnSaksgrunnlag: number,\n    antallBarnSaksgrunnlagAnnenPart?: number,\n): number => {\n    if (erFarEllerMedmor && antallBarnSaksgrunnlagAnnenPart) {\n        return antallBarnSaksgrunnlagAnnenPart;\n    }\n\n    return antallBarnSaksgrunnlag;\n};\n\nconst getStønadskontoParams = (\n    dekningsgrad: Dekningsgrad,\n    barn: Barn,\n    annenForelder: AnnenForelder,\n    søkersituasjon: Søkersituasjon,\n    farHarAleneomsorg: boolean,\n    morHarAleneomsorg: boolean,\n    familieHendelseDatoNesteSak: string | undefined,\n    antallBarn: number,\n    oppgittTermindato?: string,\n): TilgjengeligeStønadskontoerParams => {\n    const erFarMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const familiehendelsesdato = ISOStringToDate(getFamiliehendelsedato(barn));\n    const søkerErFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    return {\n        antallBarn: antallBarn.toString(),\n        startdatoUttak: getFamiliehendelsedato(barn),\n        dekningsgrad: dekningsgrad,\n        farHarRettINorge: getFarHarRettINorge(erFarMedmor, annenForelder),\n        morHarRettINorge: getMorHarRettINorge(erFarMedmor, annenForelder),\n        harAnnenForelderTilsvarendeRettEØS: getAnnenForelderHarRettIEØS(annenForelder),\n        morHarAleneomsorg,\n        farHarAleneomsorg,\n        fødselsdato: isFødtBarn(barn) ? dateToISOString(barn.fødselsdatoer[0]) : undefined,\n        omsorgsovertakelsesdato:\n            isAdoptertAnnetBarn(barn) || isAdoptertStebarn(barn) ? dateToISOString(barn.adopsjonsdato) : undefined,\n        termindato: getTermindatoSomSkalBrukes(barn, oppgittTermindato),\n        minsterett: andreAugust2022ReglerGjelder(familiehendelsesdato!),\n        erMor: !søkerErFarEllerMedmor,\n        morHarUføretrygd: getErMorUfør(annenForelder, søkerErFarEllerMedmor),\n        familieHendelseDatoNesteSak: familieHendelseDatoNesteSak,\n    };\n};\n\nexport default getStønadskontoParams;\n","import { useEffect, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\nimport { Loader } from '@navikt/ds-react';\nimport { dateToISOString } from '@navikt/sif-common-formik-ds/lib';\nimport { notEmpty } from '@navikt/fp-validation';\nimport {\n    Dekningsgrad,\n    getFarMedmorErAleneOmOmsorg,\n    getMorErAleneOmOmsorg,\n    intlUtils,\n    isAnnenForelderOppgitt,\n    isFarEllerMedmor,\n    isFødtBarn,\n    Step,\n    Søkerinfo,\n} from '@navikt/fp-common';\nimport stepConfig from '../stepsConfig';\nimport Api from 'app/api/api';\nimport UttaksplanInfoScenarios from './components/UttaksplanInfoScenarios';\nimport getStønadskontoParams, {\n    getAntallBarnSomSkalBrukesFraSaksgrunnlagBeggeParter,\n    getTermindatoSomSkalBrukesFraSaksgrunnlagBeggeParter,\n} from 'app/api/getStønadskontoParams';\nimport { getFamiliehendelsedato } from 'app/utils/barnUtils';\nimport useFortsettSøknadSenere from 'app/utils/hooks/useFortsettSøknadSenere';\nimport { RequestStatus } from 'app/types/RequestState';\nimport { mapAnnenPartsEksisterendeSakFromDTO } from 'app/utils/eksisterendeSakUtils';\nimport { sendErrorMessageToSentry } from 'app/api/apiUtils';\nimport { ContextDataType, useContextGetData, useContextSaveData } from 'app/context/FpDataContext';\nimport { UttaksplanMetaData } from 'app/types/UttaksplanMetaData';\n\ntype Props = {\n    søkerInfo: Søkerinfo;\n    erEndringssøknad: boolean;\n    mellomlagreSøknadOgNaviger: () => Promise<void>;\n    avbrytSøknad: () => void;\n};\n\nconst UttaksplanInfo: React.FunctionComponent<Props> = ({\n    søkerInfo,\n    erEndringssøknad,\n    mellomlagreSøknadOgNaviger,\n    avbrytSøknad,\n}) => {\n    const intl = useIntl();\n    const onFortsettSøknadSenere = useFortsettSøknadSenere();\n\n    const søkersituasjon = notEmpty(useContextGetData(ContextDataType.SØKERSITUASJON));\n    const barn = notEmpty(useContextGetData(ContextDataType.OM_BARNET));\n    const annenForelder = notEmpty(useContextGetData(ContextDataType.ANNEN_FORELDER));\n    const søker = notEmpty(useContextGetData(ContextDataType.SØKER));\n    const barnFraNesteSak = useContextGetData(ContextDataType.BARN_FRA_NESTE_SAK);\n    const eksisterendeSak = useContextGetData(ContextDataType.EKSISTERENDE_SAK);\n    const uttaksplanMetadata = useContextGetData(ContextDataType.UTTAKSPLAN_METADATA);\n\n    const oppdaterOmBarnet = useContextSaveData(ContextDataType.OM_BARNET);\n    const oppdaterUttaksplanMetaData = useContextSaveData(ContextDataType.UTTAKSPLAN_METADATA);\n    const oppdaterEksisterendeSak = useContextSaveData(ContextDataType.EKSISTERENDE_SAK);\n\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const { erAleneOmOmsorg } = søker;\n\n    const familieHendelseDatoNesteSak =\n        barnFraNesteSak !== undefined ? barnFraNesteSak.familiehendelsesdato : undefined;\n    const førsteUttaksdagNesteBarnsSak =\n        barnFraNesteSak !== undefined ? barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n\n    const annenPartFnr =\n        isAnnenForelderOppgitt(annenForelder) && annenForelder.utenlandskFnr === false ? annenForelder.fnr : undefined;\n    const eksisterendeSakAnnenPartRequestIsSuspended = annenPartFnr !== undefined && annenPartFnr !== '' ? false : true;\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const barnFnr = isFødtBarn(barn) && barn.fnr !== undefined && barn.fnr?.length > 0 ? barn.fnr[0] : undefined;\n    const { eksisterendeSakAnnenPartData, eksisterendeSakAnnenPartError, eksisterendeSakAnnenPartRequestStatus } =\n        Api.useGetAnnenPartsVedtak(\n            annenPartFnr,\n            barnFnr,\n            familiehendelsesdato,\n            eksisterendeSakAnnenPartRequestIsSuspended,\n        );\n\n    const farMedmorErAleneOmOmsorg = getFarMedmorErAleneOmOmsorg(erFarEllerMedmor, erAleneOmOmsorg, annenForelder);\n    const morErAleneOmOmsorg = getMorErAleneOmOmsorg(!erFarEllerMedmor, erAleneOmOmsorg, annenForelder);\n\n    const eksisterendeVedtakAnnenPart = useMemo(\n        () =>\n            mapAnnenPartsEksisterendeSakFromDTO(\n                eksisterendeSakAnnenPartData,\n                barn,\n                erFarEllerMedmor,\n                familiehendelsesdato,\n                førsteUttaksdagNesteBarnsSak,\n            ),\n        [eksisterendeSakAnnenPartData, barn, erFarEllerMedmor, familiehendelsesdato, førsteUttaksdagNesteBarnsSak],\n    );\n\n    const saksgrunnlagsTermindato = getTermindatoSomSkalBrukesFraSaksgrunnlagBeggeParter(\n        eksisterendeSak?.grunnlag.termindato,\n        eksisterendeVedtakAnnenPart?.grunnlag.termindato,\n    );\n\n    const saksgrunnlagsAntallBarn = getAntallBarnSomSkalBrukesFraSaksgrunnlagBeggeParter(\n        erFarEllerMedmor,\n        barn.antallBarn,\n        eksisterendeVedtakAnnenPart?.grunnlag.antallBarn,\n    );\n\n    const oppdaterBarnOgLagreUttaksplandata = (metadata: UttaksplanMetaData) => {\n        if (erFarEllerMedmor && barn.antallBarn !== saksgrunnlagsAntallBarn) {\n            oppdaterOmBarnet({ ...barn, antallBarn: saksgrunnlagsAntallBarn });\n        }\n\n        // TODO (TOR) Kvifor blir dette gjort her? Bedre å isolera denne funksjonaliteten til UttaksplanStep\n        if (eksisterendeVedtakAnnenPart !== undefined) {\n            oppdaterEksisterendeSak(eksisterendeVedtakAnnenPart);\n\n            metadata = {\n                ...metadata,\n                annenPartsUttakErLagtTilIPlan: true,\n            };\n        }\n\n        // TODO (TOR) Kvifor blir dette gjort her? Bedre å isolera denne funksjonaliteten til UttaksplanStep\n        if (uttaksplanMetadata?.harUttaksplanBlittSlettet !== false) {\n            metadata = {\n                ...metadata,\n                harUttaksplanBlittSlettet: false,\n            };\n        }\n\n        oppdaterUttaksplanMetaData({\n            ...uttaksplanMetadata,\n            ...metadata,\n        });\n    };\n\n    const { tilgjengeligeStønadskontoerData: stønadskontoer100, tilgjengeligeStønadskontoerError } =\n        Api.useGetUttakskontoer(\n            getStønadskontoParams(\n                Dekningsgrad.HUNDRE_PROSENT,\n                barn,\n                annenForelder,\n                søkersituasjon,\n                farMedmorErAleneOmOmsorg,\n                morErAleneOmOmsorg,\n                dateToISOString(familieHendelseDatoNesteSak),\n                saksgrunnlagsAntallBarn,\n                saksgrunnlagsTermindato,\n            ),\n            eksisterendeSakAnnenPartRequestIsSuspended\n                ? false\n                : eksisterendeSakAnnenPartRequestStatus !== RequestStatus.FINISHED,\n        );\n    const { tilgjengeligeStønadskontoerData: stønadskontoer80 } = Api.useGetUttakskontoer(\n        getStønadskontoParams(\n            Dekningsgrad.ÅTTI_PROSENT,\n            barn,\n            annenForelder,\n            søkersituasjon,\n            farMedmorErAleneOmOmsorg,\n            morErAleneOmOmsorg,\n            dateToISOString(familieHendelseDatoNesteSak),\n            saksgrunnlagsAntallBarn,\n            saksgrunnlagsTermindato,\n        ),\n        eksisterendeSakAnnenPartRequestIsSuspended\n            ? false\n            : eksisterendeSakAnnenPartRequestStatus !== RequestStatus.FINISHED,\n    );\n\n    useEffect(() => {\n        if (tilgjengeligeStønadskontoerError) {\n            sendErrorMessageToSentry(tilgjengeligeStønadskontoerError);\n            throw new Error(\n                `Vi klarte ikke å hente opp stønadskontoer. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`,\n            );\n        }\n        if (eksisterendeSakAnnenPartError) {\n            sendErrorMessageToSentry(eksisterendeSakAnnenPartError);\n            throw new Error(\n                `Vi klarte ikke å hente informasjon om saken til annen forelder. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`,\n            );\n        }\n    }, [tilgjengeligeStønadskontoerError, eksisterendeSakAnnenPartError]);\n\n    if (\n        !stønadskontoer100 ||\n        !stønadskontoer80 ||\n        (eksisterendeSakAnnenPartRequestStatus !== RequestStatus.FINISHED &&\n            !eksisterendeSakAnnenPartRequestIsSuspended)\n    ) {\n        return (\n            <div style={{ textAlign: 'center', padding: '12rem 0' }}>\n                <Loader size=\"2xlarge\" />\n            </div>\n        );\n    }\n\n    return (\n        <Step\n            bannerTitle={intlUtils(intl, 'søknad.pageheading')}\n            activeStepId=\"uttaksplanInfo\"\n            pageTitle={intlUtils(intl, 'søknad.uttaksplanInfo')}\n            onCancel={avbrytSøknad}\n            onContinueLater={onFortsettSøknadSenere}\n            steps={stepConfig(intl, false)}\n        >\n            <UttaksplanInfoScenarios\n                tilgjengeligeStønadskontoer100DTO={stønadskontoer100}\n                tilgjengeligeStønadskontoer80DTO={stønadskontoer80}\n                eksisterendeSakAnnenPart={eksisterendeVedtakAnnenPart}\n                søkersituasjon={søkersituasjon}\n                søker={søker}\n                annenForelder={annenForelder}\n                erEndringssøknad={erEndringssøknad}\n                person={søkerInfo.person}\n                mellomlagreSøknadOgNaviger={mellomlagreSøknadOgNaviger}\n                oppdaterBarnOgLagreUttaksplandata={oppdaterBarnOgLagreUttaksplandata}\n            />\n        </Step>\n    );\n};\n\nexport default UttaksplanInfo;\n"],"names":["UttaksplanHexColor","FOR_MANGE_VEDLEGG_ERROR","FEIL_VED_INNSENDING","UKJENT_UUID","getUttaksperiodeForInnsending","uttaksPeriode","ønskerJustertUttakVedFødsel","termindato","cleanedPeriode","changeGradertUttaksPeriode","cleanUttaksperiode","uttaksperiodeKanJusteresVedFødsel","erMorForSyk","periodeRest","isNotPeriodetypeHull","periode","Periodetype","isNotPeriodetypeInfo","isNotPeriodeUtenUttak","skalPeriodeSendesInn","isForeldrepengerFørFødselUttaksperiode","isUttaksperiode","cleanAnnenForelder","annenForelder","erEndringssøknad","isAnnenForelderOppgitt","erUfør","erForSyk","harRettPåForeldrepengerINorge","harRettPåForeldrepengerIEØS","harOppholdtSegIEØS","annenForelderRest","cleanedAnnenForelder","cleanBarn","barn","isFødtBarn","datoForAleneomsorg","type","fnr","barnRest","isAdoptertBarn","isAdoptertStebarn","konverterRolle","rolle","assertUnreachable","changeClientonlyKontotype","annenForelderHarRettPåForeldrepengerINorge","morErUfør","søkerErFarEllerMedmor","familiehendelsesdato","StønadskontoType","andreAugust2022ReglerGjelder","MorsAktivitet","getArbeidstakerFrilansSN","arbeidsformer","arbeidsform","Arbeidsform","cleanUttaksplan","plan","endringstidspunkt","cleanedUttaksplan","isValidTidsperiode","førsteOktober2021ReglerGjelder","getPeriodeVedTidspunkt","getUttaksplanMedFriUtsettelsesperiode","uttaksplan","tidspunkt","dayjs","førstePeriodeEtterEndringstidspunkt","endringsTidspunktPeriodeTom","Uttaksdagen","endringsTidspunktPeriode","UtsettelseÅrsakType","guid","Forelder","sorterPerioder","cleanSøknad","hentData","locale","notEmpty","ContextDataType","søker","søkersituasjon","utenlandsopphold","senereUtenlandsopphold","tidligereUtenlandsopphold","uttaksplanMetadata","eksisterendeSak","annenForelderInnsending","søkerInnsending","cleanSøker","barnInnsending","isFarEllerMedmor","getTermindato","uttaksplanInnsending","tilleggsopplysningerInnsending","cleanTilleggsopplysninger","cleanedSøknad","removeDuplicateAttachments","mapAttachmentsToSøknadForInnsending","getSøknadsdataForInnsending","endringerIUttaksplan","cleanEndringssøknad","tilleggsopplysninger","tilleggsopplysningerTilSaksbehandler","_a","sendErrorMessageToSentry","error","errorCallId","getErrorCallId","errorTimestamp","getErrorTimestamp","hideNumbersAndTrim","tekst","errorString","Sentry.captureMessage","søknad","vedlegg","søknadCopy","extractAttachments","vedleggWithoutDuplicates","result","current","att","FarMedmorFødselBeggeHarRettFormField","FarMedmorFødselBeggeHarRettFormComponents","getTypedFormComponents","initialFarMedmorFødselBeggeHarRettValues","mapFarMedmorFødselBeggeHarRettToState","values","getInitialFarMedmorFødselBeggeHarRettValues","state","dekningsgrad","getBarStyle","width","color","color2","Multibar","leftBar","rightBar","centerBar","borderColor","bem","bemUtils","jsxs","jsx","getProsentFordelingPerDel","tilgjengeligeDager","inkluderForeldrepengerFørTermin","pstMultiplikator","pstMor","pstFarMedmor","pstFelles","DeltOmsorgGraf","navnFarMedmor","navnMor","erFarEllerMedmor","intl","useIntl","fordeling","txtMor","intlUtils","getVarighetString","Personkort","FormattedMessage","getNavnGenitivEierform","Label","AleneomsorgGraf","txt","TilgjengeligeDagerGraf","props","summerAntallDagerIKontoer","kontoer","dager","konto","getMorsStønadskontoer","getFarsStønadskontoer","getForeldrepengeKontoer","getFellesStønadskontoer","kontoErFørTermin","kontoErEtterTermin","getTilgjengeligeDager","erDeltUttak","forelderVedAleneomsorg","kontoerEtterTermin","dagerTotalt","dagerForeldrepengerFørFødsel","dagerEtterTermin","dagerForeldrepenger","dagerMor","dagerFar","dagerFelles","dagerKunTilMor","maksDagerFar","maksDagerMor","opprettAktivitetsFriKonto","generellMinsterett","nyeKontoer","mapTilgjengeligStønadskontoDTOToTilgjengeligStønadskonto","stønadskontoerDTO","tilgjengeligeStønadskontoer","getValgtStønadskontoFor80Og100Prosent","kontoer80","kontoer100","åttiProsent","hundreProsent","Dekningsgrad","includeFellesperiodeSpørsmål","farMedmorsFørsteDag","hasValue","ISOStringToDate","getSisteUttaksdag6UkerEtterFødsel","FarMedmorFødselBeggeHarRettFormConfig","morsSisteDag","farMedmorFødselBeggeHarRettQuestionsConfig","Questions","MorsSisteDagSpørsmål","FormComponents","fieldName","maxDate","uttaksplanDatoavgrensninger","minDate","validateStartdatoFarMedmor","minDato","maxDato","permisjonStartdato","isISODateString","formatDateExtended","FarMedmorsFørsteDag","setFieldValue","situasjon","morHarRettTilForeldrepengerIEØS","Fragment","Block","LenkeKnapp","formatDate","farSinFørsteUttaksdag","dateToISOString","RangeIcon","Component","icon","delay","minZoomTouchDelta","lastTapAt","lastClientX","lastClientY","preventDoubleTapZoom","event","tapAt","timeDiff","clientX","clientY","xDiff","yDiff","AriaText","id","children","tag","tagName","createElement","Sirkelknapp","onClick","ariaLabel","ikon","toggle","disabled","stil","size","posisjoneringFraHøyre","labelId","classnames","getNumberFromStringInput","input","getNumberFromNumberInputValue","leggTil","currentAntall","max","number","trekkFra","min","AntallUkerOgDagerFellesperiodeFarMedmorSpørsmål","ukerFieldName","dagerFieldName","antallDager","antallUker","ukerMedFellesperiode","ReadMore","DekningsgradSpørsmål","FormKomponent","dekningsgradFeltNavn","spørsmålTekst","getAntallUker","getDekningsgradFromString","deltUttakAdopsjonSøktFørst","famDato","startdatoPermisjon","fellesperiodeukerMor","harAnnenForelderSøktFP","førsteUttaksdagNesteBarnsSak","førsteUttaksdag","perioder","kontoType","forelder","k","currentTomDate","periodeMødrekvote","getTidsperiode","tidperiodeOverlapperDato","splittPeriodePåDato","periodeFellesperiode","deltUttakAdopsjonSøktSist","antallDagerFellesperiodeFarMedmor","antallUkerFellesperiodeFarMedmor","morSinSisteUttaksdag","begrunnelseForUtsettelse","deltUttakFødselFarMedmor","deltUttakAdopsjon","deltUttakFødselMor","ønsketStartdatoPermisjon","skalHaForeldrePengerFørFødsel","fpFørFødselKonto","mkKonto","dagerFørFødsel","merEnnTreUkerPermisjonFørFødsel","startdatoFpFørFødsel","ekstraPeriodeFørFødsel","periodeFørFødsel","ekstraPermisjonFørFødsel","p","trekkEkstraPermisjonDager","Tidsperioden","periodeFellesperiodeMor","morHarRettPåForeldrepengerIEØS","dateIsSameOrAfter","startDatoUttak","sisteUttaksDag","fedrekvoteKonto","fellesKonto","morHarRett","skalFarUtsetteEtterMorSinSisteUttaksdag","erPeriodeWLBRundtFødsel","starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel","lengdePåForeslåttUttak","getLengdePåForeslåttWLBUttakFarMedmor","fedrekvotePeriode","farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato","splittUttaksperiodePåFamiliehendelsesdato","antallDagerFellesperiode","fellesPeriode","deltUttakFødsel","annenForelderHarRettPåForeldrepengerIEØS","tilgjengeligeStønadskontoerUtenFPP","deltUttak","params","ikkeDeltUttakAdopsjonFarMedmor","foreldrepengerKonto","erMorUfør","aktivitetsfriKvote","bareFarMedmorHarRett","startDatoNestePeriode","aktivitetsFriPeriode","sp","aktivitetskravPeriode","ikkeDeltUttakAdopsjonMor","ikkeDeltUttakAdopsjon","ikkeDeltUttakFødselMor","foreldrePengerFørFødselKonto","antallDagerIForeldrepenger","foreldrepengerPeriode","ikkeDeltUttakFødselFarMedmor","startDato","ikkeDeltUttakFødsel","ikkeDeltUttak","lagUttaksplan","annenForelderErUfør","uttaksplanSkjema","harAktivitetskravIPeriodeUtenUttak","erAdopsjon","morSinSisteUttaksdagDate","forslag","finnOgSettInnHull","FarMedmorFødselFørsteganggsøknadBeggeHarRett","tilgjengeligeStønadskontoer100DTO","tilgjengeligeStønadskontoer80DTO","person","mellomlagreSøknadOgNaviger","oppdaterBarnOgLagreUttaksplandata","isSubmitting","setIsSubmitting","useState","useContextGetData","barnFraNesteSak","uttaksplanInfo","oppdaterAppRoute","useContextSaveData","oppdaterUttaksplanInfo","oppdaterUttaksplan","erFødsel","navnFar","getFamiliehendelsedato","getErMorUfør","familiehendelsesdatoDate","onSubmit","SøknadRoutes","formValues","visibility","valgtStønadskonto","GuidePanel","StepButtonWrapper","BackButton","getPreviousStepHref","Button","MorFødselFormField","MorFødselFormComponents","initialMorFødselValues","mapMorFødselFormToState","getInitialMorFødselValues","defaultPermisjonStartdato","lagretUttaksplanInfo","validateErStartdatoFørTermindato","familiehendelsedato","skalIkkeHaUttakFørTermin","avgrensninger","uttaksConstants","getÅrsakDersomUgyldigStartdato","startdato","førsteMuligeStartdato","VeilederStartdatoPermisjon","antallDagerFørFødselIhtRegler","visKunFeil","ugyldigDatoÅrsak","msg","React.useMemo","formaterDato","getVarighetForStartdato","barnetErFødt","StartdatoPermisjonMor","erBarnFødt","spørsmålNår","spørsmålHaddeIkke","sisteUttaksdagFørTermin","tidsperiode","getValidTidsperiode","visVeileder","datoAvgrensninger","maksDato","RangeStepper","direction","label","defaultValueLabelRenderer","options","defaultBottomContentRenderer","BodyShort","RangeInput","__publicField","_e","hjelpetekst","ariaLabelText","inputId","valueLabelRenderer","steppers","ariaValueChangedMessage","bottomContentRenderer","hjelpetekstApneLabel","valueLabelPlacement","rest","value","onChange","labelRenderer","ariaLabelId","bottomRenderer","bemWrapper","bemRangeInput","bemStepper","Fieldset","c","e","FordelingFellesperiodeSpørsmål","valgtFellesperiodeukerMor","annenForelderErFarEllerMedmor","mor","farMedmor","getAntallUkerFellesperiode","useEffect","ukerFellesperiode","antallUkerFedreKvote","getAntallUkerFedrekvote","antallUkerMødreKvote","getAntallUkerMødrekvote","infotekst","annenForeldersNavn","Link","links","fellesperiodeukerMor2","Ingress","MorFødselFormConfig","erAleneOmOmsorg","morFødselQuestionsConfig","skalViseInfoOmPrematuruker","fødselsdato","fødselsdatoEtterEllerLikFørsteJuli","getSamtidigUttaksprosent","gradertPeriode","stillingsprosent","leggTilAnnenPartsPerioderISøkerenesUttaksplan","annenPartsPerioder","bareFarHarRett","normaliserteEgnePerioder","normaliserteAnnenPartsPerioder","normaliserPerioder","overlappendePerioderAnnenPart","Periodene","overlappendePeriodeAnnenPart","isUttakAnnenPart","settInnAnnenPartsUttak","MorFødsel","eksisterendeSakFar","antallBarn","getFødselsdato","visInfoOmPrematuruker","ekstraDagerGrunnetPrematurFødsel","oppgittAnnenForelder","formaterNavn","submissionValues","uttaksplanforslag","getHarAktivitetskravIPeriodeUtenUttak","uttaksplanMedAnnenPart","getFlerbarnsuker","AdopsjonStartdatoValg","finnEnum","valg","MorFarAdopsjonFormField","MorFarAdopsjonFormComponents","initialMorFarAdopsjonValues","YesOrNo","mapMorFarAdopsjonFormToState","convertYesOrNoOrUndefinedToBoolean","getInitialMorFarAdopsjonValues","MorFarAdopsjonFormConfig","harAnnenForelderRettPåForeldrepengerINorge","startdatoAdopsjonValg","annenStartdatoAdopsjon","annenForeldersSisteDag","søkersFørsteDag","antallUkerFellesperiode","morFarAdopsjonQuestionsConfig","validateErAnnenStartdatoAdopsjonGyldig","finnStartdatoAdopsjon","adopsjonsdato","ankomstdato","konverterStringTilDate","invalidDateRanges","r","StartdatoAdopsjon","valgtStartdatoAdopsjon","radios","isAdoptertAnnetBarn","formaterDatoUtenDag","MorFarAdopsjon","fornavn","mellomnavn","etternavn","søkerErAleneOmOmsorg","annenForelderOppgittIkkeAleneOmOmsorg","shouldRender","barnAdopsjonsdato","erSøkerMor","fornavnAnnenForeldre","erAnnenPartUfør","navnAnnenPart","navnSøker","erAdoptertIUtlandet","latestDate","findEldsteDato","MorFarAdopsjonAnnenForelderHarRettIEØSFormField","MorFarAdopsjonAnnenForelderHarRettIEØSFormComponents","MorFarAdopsjonAnnenForelderHarRettIEØSFormConfig","morFarAdopsjonAnnenForelderHarRettIEØSQuestionsConfig","initialMorFarAdopsjonAnnenForelderHarRettIEØSValues","mapMorFarAdopsjonAnnenForelderHarRettIEØSFormToState","getInitialMorFarAdopsjonAnnenForelderHarRettIEØSValues","MorFarAdopsjonAnnenForelderHarRettIEØS","erDeltUttakINorge","MorFarFødselAnnenForelderHarRettIEØSFormField","MorFarFødselAnnenForelderHarRettIEØSFormComponents","MorFarFødselAnnenForelderHarRettIEØSFormConfig","morFarFødselAnnenForelderHarRettIEØSQuestionsConfig","initialMorFarFødselAnnenForelderHarRettIEØSValues","mapMorFarFødselAnnenForelderHarRettIEØSFormToState","getInitialMorFarFødselAnnenForelderHarRettIEØSValues","MorFarFødselAnnenForelderHarRettIEØS","FarMedmorAleneomsorgFødselFormField","FarMedmorAleneomsorgFødselFormComponents","FarMedmorAleneomsorgFødselFormConfig","startPåOmsorgsovertakelse","startdatoUttak","farMedmorAleneomsorgFødselQuestionsConfig","initialFarMedmorAleneomsorgFødselValues","mapFarMedmorAleneomsorgFødselFormToState","getInitialFarMedmorAleneomsorgFødselValues","startetPåOmsorgsovertakelse","validateStartdatoUttakFarMedmorAleneomsorgFødsel","isDateABeforeDateB","FarMedmorAleneomsorgFødsel","uttaksplanInfo2","kontoerForValgtDekningsgrad","farMedmorAleneomsorgFødselAdopsjonQuestionsConfig","FarMedmorFødselOgMorHarIkkeRettFormField","FarMedmorFødselOgMorHarIkkeRettFormComponents","initialFarMedmorFødselOgMorHarIkkeRettValues","mapFarMedmorFødselOgMorHarIkkeRettFormToState","getInitialFarMedmorFødselOgMorHarIkkeRettValues","FarMedmorFødselOgMorHarIkkeRettFormConfig","farMedmorFødselOgMorHarIkkeRettQuestionsConfig","FarMedmorFødselOgMorHarIkkeRett","annenForelderHarIkkeRett","startDatoUttaksplan","datoAvgrensinger","FarMedmorFødselOgMorHarIkkeRett$1","FarMedmorFørstegangssøknadMedAnnenPartFormField","FarMedmorFørstegangssøknadMedAnnenPartFormComponents","FarMedmorFørstegangssøknadMedAnnenPartFormConfig","farMedmorFørstegangssøknadMedAnnenPartQuestionsConfig","getFarMedmorFørstegangssøknadMedAnnenPartInitialValues","FarMedmorFørstegangssøknadMedAnnenPart","eksisterendeSakAnnenPart","familiehendelsedatoDate","getMorHarRettPåForeldrepengerINorgeEllerEØS","morsSisteUttaksdag","stønadskontoer","grunnlag","farMedmorSinePerioder","isInfoPeriode","valgtMengdeStønadskonto","InfoOmSøknaden","getUttaksplanScenario","annenForelderKanIkkeOppgis","annenForelderHarRett","annenForelderHarRettIEØS","UttaksplanInfoScenarios","harAnnenForelderRettIEØS","FarMedmorAleneomsorgFødselAdopsjon","getFarHarRettINorge","erFarMedmor","getMorHarRettINorge","getAnnenForelderHarRettIEØS","getTermindatoSomSkalBrukes","termindatoSaksgrunnlag","isUfødtBarn","getTermindatoSomSkalBrukesFraSaksgrunnlagBeggeParter","termindatoSaksgrunnlagAnnenPart","getAntallBarnSomSkalBrukesFraSaksgrunnlagBeggeParter","antallBarnSaksgrunnlag","antallBarnSaksgrunnlagAnnenPart","getStønadskontoParams","farHarAleneomsorg","morHarAleneomsorg","familieHendelseDatoNesteSak","oppgittTermindato","UttaksplanInfo","søkerInfo","avbrytSøknad","onFortsettSøknadSenere","useFortsettSøknadSenere","oppdaterOmBarnet","oppdaterUttaksplanMetaData","oppdaterEksisterendeSak","annenPartFnr","eksisterendeSakAnnenPartRequestIsSuspended","barnFnr","eksisterendeSakAnnenPartData","eksisterendeSakAnnenPartError","eksisterendeSakAnnenPartRequestStatus","Api","farMedmorErAleneOmOmsorg","getFarMedmorErAleneOmOmsorg","morErAleneOmOmsorg","getMorErAleneOmOmsorg","eksisterendeVedtakAnnenPart","useMemo","mapAnnenPartsEksisterendeSakFromDTO","saksgrunnlagsTermindato","saksgrunnlagsAntallBarn","metadata","stønadskontoer100","tilgjengeligeStønadskontoerError","RequestStatus","stønadskontoer80","Loader","Step","stepConfig","UttaksplanInfo$1"],"mappings":"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"}