{"version":3,"file":"Utenlandsopphold-1daa603a.js","sources":["../../../../node_modules/.pnpm/@navikt+sif-common-formik-ds@0.25.0_@navikt+ds-css@4.12.1_@navikt+ds-datepicker@4.2.0_@navikt_mlrplejoncturajlt26uyjonyy/node_modules/@navikt/sif-common-formik-ds/lib/components/formik-modal-form/FormikModalFormAndList.js","../../src/app/steps/utenlandsopphold/utenlandsoppholdFormTypes.ts","../../src/app/steps/utenlandsopphold/utenlandsoppholdFormQuestions.ts","../../src/app/steps/utenlandsopphold/bostedUtlandListAndDialog/types.ts","../../src/app/steps/utenlandsopphold/bostedUtlandListAndDialog/BostedUtlandForm.tsx","../../src/app/steps/utenlandsopphold/bostedUtlandListAndDialog/BostedUtlandList.tsx","../../src/app/steps/utenlandsopphold/bostedUtlandListAndDialog/BostedUtlandListAndDialog.tsx","../../src/app/steps/utenlandsopphold/utenlandsoppholdFormUtils.ts","../../src/app/steps/utenlandsopphold/utenlandsoppholdValidering.ts","../../src/app/steps/utenlandsopphold/Utenlandsopphold.tsx"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from 'react';\nimport { FastField, Field } from 'formik';\nimport { TypedFormikFormContext } from '../typed-formik-form/TypedFormikForm';\nimport ModalFormAndList from './modal-form-and-list/ModalFormAndList';\nimport './formikModalForm.scss';\nfunction FormikModalFormAndList(_a) {\n    var name = _a.name, labels = _a.labels, listRenderer = _a.listRenderer, formRenderer = _a.formRenderer, sortFunc = _a.sortFunc, onAfterChange = _a.onAfterChange, dialogWidth = _a.dialogWidth, shouldCloseOnOverlayClick = _a.shouldCloseOnOverlayClick, error = _a.error, maxItems = _a.maxItems, useFastField = _a.useFastField, confirmDelete = _a.confirmDelete, validate = _a.validate;\n    var context = React.useContext(TypedFormikFormContext);\n    var FieldComponent = useFastField ? FastField : Field;\n    return (_jsx(FieldComponent, { name: name, validate: validate ? function (value) { return validate(value, name); } : undefined, children: function (_a) {\n            var field = _a.field, form = _a.form;\n            return (_jsx(ModalFormAndList, { labels: labels, items: field.value, error: error || (context ? context.getAndRenderFieldErrorMessage(field, form) : undefined), maxItems: maxItems, dialogWidth: dialogWidth, shouldCloseOnOverlayClick: shouldCloseOnOverlayClick, confirmDelete: confirmDelete, onChange: function (values) {\n                    var updatedValues = sortFunc ? values.sort(sortFunc) : values;\n                    form.setFieldValue(field.name, updatedValues);\n                    if (onAfterChange) {\n                        onAfterChange(updatedValues);\n                    }\n                    if (context) {\n                        context.onAfterFieldValueSet();\n                    }\n                }, formRenderer: formRenderer, listRenderer: function (_a) {\n                    var onEdit = _a.onEdit, onDelete = _a.onDelete;\n                    return listRenderer({ items: field.value, onDelete: onDelete, onEdit: onEdit });\n                } }));\n        } }));\n}\nexport default FormikModalFormAndList;\n//# sourceMappingURL=FormikModalFormAndList.js.map","import { YesOrNo, getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\nimport { BostedUtland } from './bostedUtlandListAndDialog/types';\n\nexport enum UtenlandsoppholdFieldNames {\n    harBoddINorgeSiste12Mnd = 'harBoddINorgeSiste12Mnd',\n    utenlandsoppholdSiste12Mnd = 'utenlandsoppholdSiste12Mnd',\n    skalBoINorgeNeste12Mnd = 'skalBoINorgeNeste12Mnd',\n    utenlandsoppholdNeste12Mnd = 'utenlandsoppholdNeste12Mnd',\n}\n\nexport interface UtenlandsoppholdFormData {\n    [UtenlandsoppholdFieldNames.harBoddINorgeSiste12Mnd]: YesOrNo;\n    [UtenlandsoppholdFieldNames.utenlandsoppholdSiste12Mnd]: BostedUtland[];\n    [UtenlandsoppholdFieldNames.skalBoINorgeNeste12Mnd]: YesOrNo;\n    [UtenlandsoppholdFieldNames.utenlandsoppholdNeste12Mnd]: BostedUtland[];\n}\n\nexport const initialUtenlandsoppholdFormData: UtenlandsoppholdFormData = {\n    [UtenlandsoppholdFieldNames.harBoddINorgeSiste12Mnd]: YesOrNo.UNANSWERED,\n    [UtenlandsoppholdFieldNames.utenlandsoppholdSiste12Mnd]: [],\n    [UtenlandsoppholdFieldNames.skalBoINorgeNeste12Mnd]: YesOrNo.UNANSWERED,\n    [UtenlandsoppholdFieldNames.utenlandsoppholdNeste12Mnd]: [],\n};\n\nexport const UtenlandsoppholdFormComponents = getTypedFormComponents<\n    UtenlandsoppholdFieldNames,\n    UtenlandsoppholdFormData\n>();\n","import { QuestionConfig, Questions } from '@navikt/sif-common-question-config';\nimport { UtenlandsoppholdFormData, UtenlandsoppholdFieldNames } from './utenlandsoppholdFormTypes';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\n\nconst UtenlandsoppholdFormConfig: QuestionConfig<UtenlandsoppholdFormData, UtenlandsoppholdFieldNames> = {\n    [UtenlandsoppholdFieldNames.harBoddINorgeSiste12Mnd]: {\n        isAnswered: ({ harBoddINorgeSiste12Mnd }) => harBoddINorgeSiste12Mnd !== YesOrNo.UNANSWERED,\n        isIncluded: () => true,\n        visibilityFilter: ({ skalBoINorgeNeste12Mnd }) => skalBoINorgeNeste12Mnd !== YesOrNo.UNANSWERED,\n    },\n    [UtenlandsoppholdFieldNames.utenlandsoppholdSiste12Mnd]: {\n        isAnswered: ({ utenlandsoppholdSiste12Mnd }) => utenlandsoppholdSiste12Mnd.length > 0,\n        isOptional: () => true,\n        isIncluded: ({ harBoddINorgeSiste12Mnd }) => harBoddINorgeSiste12Mnd === YesOrNo.NO,\n    },\n    [UtenlandsoppholdFieldNames.skalBoINorgeNeste12Mnd]: {\n        isAnswered: ({ skalBoINorgeNeste12Mnd }) => skalBoINorgeNeste12Mnd !== YesOrNo.UNANSWERED,\n        isIncluded: () => true,\n    },\n    [UtenlandsoppholdFieldNames.utenlandsoppholdNeste12Mnd]: {\n        isAnswered: ({ utenlandsoppholdNeste12Mnd }) => utenlandsoppholdNeste12Mnd.length > 0,\n        isOptional: () => true,\n        isIncluded: ({ skalBoINorgeNeste12Mnd }) => skalBoINorgeNeste12Mnd === YesOrNo.NO,\n    },\n};\n\nexport const utenlandsoppholdFormQuestions = Questions<UtenlandsoppholdFormData, UtenlandsoppholdFieldNames>(\n    UtenlandsoppholdFormConfig\n);\n","export interface BostedUtland {\n    id?: string;\n    fom: string;\n    tom: string;\n    landkode: string;\n}\n\nexport const isValidBostedUtland = (bosted: Partial<BostedUtland>): bosted is BostedUtland => {\n    const { fom, landkode, tom } = bosted;\n    return fom !== undefined && landkode !== undefined && tom !== undefined;\n};\n","import { FormattedMessage, useIntl } from 'react-intl';\nimport { BostedUtland, isValidBostedUtland } from './types';\nimport { Block, intlUtils, validateRequiredField } from '@navikt/fp-common';\nimport { dateRangeValidation, ISOStringToDate } from 'app/utils/dateUtils';\nimport dayjs from 'dayjs';\nimport { Heading } from '@navikt/ds-react';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\n\nexport interface BostedUtlandFormLabels {\n    tittel: string;\n}\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    bosted?: BostedUtland;\n    onSubmit: (values: BostedUtland) => void;\n    onCancel: () => void;\n    erFremtidigOpphold: boolean;\n}\n\nenum BostedUtlandFormFields {\n    fom = 'fom',\n    tom = 'tom',\n    landkode = 'landkode',\n}\n\ntype FormValues = Partial<{\n    [BostedUtlandFormFields.fom]: string;\n    [BostedUtlandFormFields.tom]: string;\n    [BostedUtlandFormFields.landkode]: string;\n}>;\n\nconst Form = getTypedFormComponents<BostedUtlandFormFields, FormValues>();\n\nconst mapBostedToFormValues = (bosted: BostedUtland): FormValues => {\n    return {\n        fom: bosted.fom,\n        tom: bosted.tom,\n        landkode: bosted.landkode,\n    };\n};\n\nconst BostedUtlandForm: React.FunctionComponent<Props> = ({\n    maxDate,\n    minDate,\n    bosted,\n    onSubmit,\n    onCancel,\n    erFremtidigOpphold,\n}) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FormValues) => {\n        const updatedBosted: Partial<BostedUtland> = {\n            ...bosted,\n            fom: formValues.fom,\n            tom: formValues.tom,\n            landkode: formValues.landkode,\n        };\n        if (isValidBostedUtland(updatedBosted)) {\n            onSubmit(updatedBosted);\n        } else {\n            throw new Error('BostedUtlandForm: Formvalues is not a valid BostedUtland on submit.');\n        }\n    };\n\n    return (\n        <Form.FormikWrapper\n            initialValues={bosted ? mapBostedToFormValues(bosted) : {}}\n            onSubmit={onFormikSubmit}\n            renderForm={({ values }) => {\n                return (\n                    <Form.Form onCancel={onCancel} showButtonArrows={false} submitButtonLabel=\"Legg til\">\n                        <Heading size=\"medium\" as=\"h1\">\n                            <FormattedMessage id={'utenlandsopphold.leggTilUtenlandsopphold.tittel'} />\n                        </Heading>\n                        <Block>\n                            <Form.DateIntervalPicker\n                                legend={intlUtils(intl, 'utenlandsopphold.leggTilUtenlandsopphold.tidsrom')}\n                                fromDatepickerProps={{\n                                    name: BostedUtlandFormFields.fom,\n                                    label: intlUtils(intl, 'utenlandsopphold.leggTilUtenlandsopphold.fraogmed'),\n                                    fullscreenOverlay: true,\n                                    placeholder: 'dd.mm.åååå',\n                                    minDate,\n                                    maxDate: ISOStringToDate(values.tom) || maxDate,\n                                    validate: (value) => {\n                                        if (values.tom && values.fom && dayjs(values.tom).isSame(values.fom)) {\n                                            return 'Fra og med dato kan ikke være samme som til og med dato';\n                                        }\n\n                                        return dateRangeValidation.validateFromDateInRange({\n                                            intl,\n                                            date: ISOStringToDate(value),\n                                            minDate,\n                                            maxDate,\n                                            errorKey: 'valideringsfeil.fraOgMedDato.førTilDato',\n                                            toDate: ISOStringToDate(values.tom),\n                                            disableWeekend: false,\n                                        });\n                                    },\n                                }}\n                                toDatepickerProps={{\n                                    name: BostedUtlandFormFields.tom,\n                                    label: intlUtils(intl, 'utenlandsopphold.leggTilUtenlandsopphold.tilogmed'),\n                                    fullscreenOverlay: true,\n                                    placeholder: 'dd.mm.åååå',\n                                    minDate: ISOStringToDate(values.fom) || minDate,\n                                    maxDate,\n                                    validate: (value) => {\n                                        if (values.tom && values.fom && dayjs(values.tom).isSame(values.fom)) {\n                                            return 'Til og med dato kan ikke være samme som fra og med dato';\n                                        }\n\n                                        return dateRangeValidation.validateToDateInRange({\n                                            intl,\n                                            date: ISOStringToDate(value),\n                                            minDate,\n                                            maxDate,\n                                            errorKey: 'valideringsfeil.tilOgMedDato.etterFraDato',\n                                            fromDate: ISOStringToDate(values.fom),\n                                            disableWeekend: false,\n                                        });\n                                    },\n                                }}\n                            />\n                        </Block>\n                        <Block margin=\"xl\">\n                            <Form.CountrySelect\n                                name={BostedUtlandFormFields.landkode}\n                                label={\n                                    erFremtidigOpphold\n                                        ? intlUtils(\n                                              intl,\n                                              'utenlandsopphold.leggTilUtenlandsopphold.spørsmål.hvilketLandSkalDuBoI'\n                                          )\n                                        : intlUtils(\n                                              intl,\n                                              'utenlandsopphold.leggTilUtenlandsopphold.spørsmål.hvilketLandHarDuBoddI'\n                                          )\n                                }\n                                validate={(country) =>\n                                    validateRequiredField(\n                                        country,\n                                        intlUtils(\n                                            intl,\n                                            erFremtidigOpphold\n                                                ? 'valideringsfeil.utenlandsopphold.landDuSkalBoIPåkrevd'\n                                                : 'valideringsfeil.utenlandsopphold.landDuHarBoddIPåkrevd'\n                                        )\n                                    )\n                                }\n                                useAlpha3Code={false}\n                            />\n                        </Block>\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default BostedUtlandForm;\n","import { useIntl } from 'react-intl';\nimport { BostedUtland } from './types';\nimport { ActionLink, bemUtils, formatDateExtended, ItemList } from '@navikt/fp-common';\nimport { getCountryName } from '@navikt/sif-common-formik-ds/lib';\n\nimport dayjs from 'dayjs';\n\nimport './bostedUtlandList.less';\n\ninterface Props {\n    bosteder: BostedUtland[];\n    onEdit?: (opphold: BostedUtland) => void;\n    onDelete?: (opphold: BostedUtland) => void;\n}\n\nconst bem = bemUtils('bostedUtlandList');\n\nconst BostedUtlandList: React.FunctionComponent<Props> = ({ bosteder, onDelete, onEdit }) => {\n    const intl = useIntl();\n    const renderBostedUtlandLabel = (opphold: BostedUtland): React.ReactNode => {\n        const navn = getCountryName(opphold.landkode, intl.locale);\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('land')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(opphold)}>{navn}</ActionLink>}\n                    {!onEdit && <span>{navn}</span>}\n                </span>\n                <span className={bem.element('dato')}>\n                    {formatDateExtended(dayjs(opphold.fom).toDate())} -{' '}\n                    {formatDateExtended(dayjs(opphold.tom).toDate())}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<BostedUtland>\n            getItemId={(opphold: BostedUtland) => opphold.id}\n            getItemTitle={(opphold: BostedUtland) => getCountryName(opphold.landkode, intl.locale)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderBostedUtlandLabel}\n            items={bosteder}\n        />\n    );\n};\n\nexport default BostedUtlandList;\n","import BostedUtlandForm from './BostedUtlandForm';\nimport BostedUtlandListe from './BostedUtlandList';\nimport { BostedUtland } from './types';\nimport { sortItemsByFom } from '@navikt/fp-common';\nimport { FormikModalFormAndList, ModalFormAndListLabels } from '@navikt/sif-common-formik-ds/lib';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: any;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n    erFremtidigOpphold: boolean;\n}\n\nfunction BostedUtlandListAndDialog<FieldNames>({\n    name,\n    minDate,\n    maxDate,\n    validate,\n    labels,\n    erFremtidigOpphold,\n}: Props<FieldNames>) {\n    return (\n        <FormikModalFormAndList<FieldNames, BostedUtland, string>\n            name={name}\n            labels={labels}\n            validate={validate}\n            dialogWidth=\"narrow\"\n            sortFunc={sortItemsByFom}\n            formRenderer={({ onSubmit, onCancel, item }) => (\n                <BostedUtlandForm\n                    bosted={item}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                    erFremtidigOpphold={erFremtidigOpphold}\n                />\n            )}\n            listRenderer={({ items, onEdit, onDelete }) => (\n                <BostedUtlandListe bosteder={items} onEdit={onEdit} onDelete={onDelete} />\n            )}\n        />\n    );\n}\n\nexport default BostedUtlandListAndDialog;\n","import { initialUtenlandsoppholdFormData, UtenlandsoppholdFormData } from './utenlandsoppholdFormTypes';\nimport InformasjonOmUtenlandsopphold, { Utenlandsopphold } from 'app/context/types/InformasjonOmUtenlandsopphold';\nimport { convertBooleanOrUndefinedToYesOrNo, convertYesOrNoOrUndefinedToBoolean } from 'app/utils/formUtils';\nimport { BostedUtland } from './bostedUtlandListAndDialog/types';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\n\nconst mapUtenlandsoppholdTilBostedUtland = (opphold: Utenlandsopphold): BostedUtland => ({\n    fom: opphold.tidsperiode.fom,\n    tom: opphold.tidsperiode.tom!,\n    landkode: opphold.land,\n});\n\nexport const getInitialUtenlandsoppholdValuesFromState = (\n    init: InformasjonOmUtenlandsopphold\n): UtenlandsoppholdFormData => {\n    return {\n        ...initialUtenlandsoppholdFormData,\n        harBoddINorgeSiste12Mnd: convertBooleanOrUndefinedToYesOrNo(init.iNorgeSiste12Mnd),\n        skalBoINorgeNeste12Mnd: convertBooleanOrUndefinedToYesOrNo(init.iNorgeNeste12Mnd),\n        utenlandsoppholdNeste12Mnd: init.senereOpphold.map(mapUtenlandsoppholdTilBostedUtland),\n        utenlandsoppholdSiste12Mnd: init.tidligereOpphold.map(mapUtenlandsoppholdTilBostedUtland),\n    };\n};\n\nconst mapBostedUtlandToUtenlandsopphold = (bostedUtland: BostedUtland[]): Utenlandsopphold[] => {\n    return bostedUtland.map((bosted) => ({\n        land: bosted.landkode,\n        tidsperiode: {\n            fom: bosted.fom,\n            tom: bosted.tom,\n        },\n    }));\n};\n\nexport const mapUtenlandsoppholdFormDataToState = (\n    formValues: Partial<UtenlandsoppholdFormData>\n): InformasjonOmUtenlandsopphold => {\n    const { harBoddINorgeSiste12Mnd, skalBoINorgeNeste12Mnd, utenlandsoppholdNeste12Mnd, utenlandsoppholdSiste12Mnd } =\n        formValues;\n\n    return {\n        iNorgeSiste12Mnd: convertYesOrNoOrUndefinedToBoolean(harBoddINorgeSiste12Mnd)!,\n        iNorgeNeste12Mnd: convertYesOrNoOrUndefinedToBoolean(skalBoINorgeNeste12Mnd)!,\n        senereOpphold:\n            skalBoINorgeNeste12Mnd === YesOrNo.NO ? mapBostedUtlandToUtenlandsopphold(utenlandsoppholdNeste12Mnd!) : [],\n        tidligereOpphold:\n            harBoddINorgeSiste12Mnd === YesOrNo.NO\n                ? mapBostedUtlandToUtenlandsopphold(utenlandsoppholdSiste12Mnd!)\n                : [],\n    };\n};\n","import {\n    date1YearAgo,\n    date1YearFromNow,\n    dateRangesCollide,\n    dateRangesExceedsRange,\n    intlUtils,\n} from '@navikt/fp-common';\nimport dayjs from 'dayjs';\nimport { BostedUtland } from './bostedUtlandListAndDialog/types';\nimport { IntlShape } from 'react-intl';\nimport { SkjemaelementFeil } from 'app/types/SkjemaelementFeil';\n\nexport const validateUtenlandsoppholdNeste12Mnd =\n    (intl: IntlShape) =>\n    (utenlandsopphold: BostedUtland[]): SkjemaelementFeil => {\n        if (utenlandsopphold.length === 0) {\n            return intlUtils(intl, 'valideringsfeil.utenlandsopphold.neste12Måneder.ikkeRegistrert');\n        }\n\n        const dateRanges = utenlandsopphold.map((u) => ({ from: dayjs(u.fom).toDate(), to: dayjs(u.tom).toDate() }));\n\n        if (dateRangesCollide(dateRanges)) {\n            return intlUtils(intl, 'valideringsfeil.utenlandsopphold.overlapp');\n        }\n\n        if (dateRangesExceedsRange(dateRanges, { from: new Date(), to: date1YearFromNow })) {\n            return intlUtils(intl, 'valideringsfeil.utenlandsoppholdUtenforPeriode');\n        }\n\n        return undefined;\n    };\n\nexport const validateUtenlandsoppholdSiste12Mnd =\n    (intl: IntlShape) =>\n    (utenlandsopphold: BostedUtland[]): SkjemaelementFeil => {\n        if (utenlandsopphold.length === 0) {\n            return intlUtils(intl, 'valideringsfeil.utenlandsopphold.siste12Måneder.ikkeRegistrert');\n        }\n\n        const dateRanges = utenlandsopphold.map((u) => ({ from: dayjs(u.fom).toDate(), to: dayjs(u.tom).toDate() }));\n\n        if (dateRangesCollide(dateRanges)) {\n            return intlUtils(intl, 'valideringsfeil.utenlandsopphold.overlapp');\n        }\n\n        if (dateRangesExceedsRange(dateRanges, { from: date1YearAgo, to: new Date() })) {\n            return intlUtils(intl, 'valideringsfeil.utenlandsoppholdUtenforPeriode');\n        }\n\n        return undefined;\n    };\n","import {\n    Block,\n    date1YearAgo,\n    date1YearFromNow,\n    dateToday,\n    intlUtils,\n    Step,\n    StepButtonWrapper,\n    validateYesOrNoIsAnswered,\n} from '@navikt/fp-common';\nimport {\n    UtenlandsoppholdFieldNames,\n    UtenlandsoppholdFormComponents,\n    UtenlandsoppholdFormData,\n} from './utenlandsoppholdFormTypes';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport actionCreator from 'app/context/action/actionCreator';\nimport useOnValidSubmit from 'app/utils/hooks/useOnValidSubmit';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport useAvbrytSøknad from 'app/utils/hooks/useAvbrytSøknad';\nimport { utenlandsoppholdFormQuestions } from './utenlandsoppholdFormQuestions';\nimport BostedUtlandListAndDialog from './bostedUtlandListAndDialog/BostedUtlandListAndDialog';\nimport stepConfig, { getPreviousStepHref } from '../stepsConfig';\nimport {\n    getInitialUtenlandsoppholdValuesFromState,\n    mapUtenlandsoppholdFormDataToState,\n} from './utenlandsoppholdFormUtils';\nimport SøknadRoutes from 'app/routes/routes';\nimport { validateUtenlandsoppholdNeste12Mnd, validateUtenlandsoppholdSiste12Mnd } from './utenlandsoppholdValidering';\nimport { storeAppState } from 'app/utils/submitUtils';\nimport { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport useFortsettSøknadSenere from 'app/utils/hooks/useFortsettSøknadSenere';\nimport useSaveLoadedRoute from 'app/utils/hooks/useSaveLoadedRoute';\nimport { BodyLong, BodyShort, Button, ExpansionCard, Heading, Link } from '@navikt/ds-react';\nimport { Link as RouterLink } from 'react-router-dom';\n\nconst Utenlandsopphold: React.FunctionComponent = () => {\n    const intl = useIntl();\n    const { informasjonOmUtenlandsopphold } = useSøknad();\n\n    const onValidSubmitHandler = (values: Partial<UtenlandsoppholdFormData>) => {\n        const utenlandsopphold = mapUtenlandsoppholdFormDataToState(values);\n        return [actionCreator.setInformasjonOmUtenlandsopphold(utenlandsopphold)];\n    };\n\n    const { handleSubmit, isSubmitting } = useOnValidSubmit(\n        onValidSubmitHandler,\n        SøknadRoutes.INNTEKTSINFORMASJON,\n        (state: ForeldrepengesøknadContextState) => storeAppState(state)\n    );\n    const onAvbrytSøknad = useAvbrytSøknad();\n    const onFortsettSøknadSenere = useFortsettSøknadSenere();\n    useSaveLoadedRoute(SøknadRoutes.UTENLANDSOPPHOLD);\n\n    return (\n        <UtenlandsoppholdFormComponents.FormikWrapper\n            initialValues={getInitialUtenlandsoppholdValuesFromState(informasjonOmUtenlandsopphold)}\n            onSubmit={handleSubmit}\n            renderForm={({ values: formValues }) => {\n                const visibility = utenlandsoppholdFormQuestions.getVisbility(formValues as UtenlandsoppholdFormData);\n\n                return (\n                    <Step\n                        bannerTitle={intlUtils(intl, 'søknad.pageheading')}\n                        activeStepId=\"utenlandsopphold\"\n                        pageTitle={intlUtils(intl, 'søknad.utenlandsopphold')}\n                        onCancel={onAvbrytSøknad}\n                        onContinueLater={onFortsettSøknadSenere}\n                        steps={stepConfig(intl, false)}\n                    >\n                        <UtenlandsoppholdFormComponents.Form includeButtons={false} includeValidationSummary={true}>\n                            <Block\n                                visible={visibility.isVisible(UtenlandsoppholdFieldNames.skalBoINorgeNeste12Mnd)}\n                                padBottom=\"l\"\n                            >\n                                <UtenlandsoppholdFormComponents.YesOrNoQuestion\n                                    legend={intlUtils(intl, 'utenlandsopphold.neste12Måneder.spørsmål')}\n                                    name={UtenlandsoppholdFieldNames.skalBoINorgeNeste12Mnd}\n                                    description={intlUtils(intl, 'utenlandsopphold.neste12MånederInfotekst')}\n                                    labels={{\n                                        yes: intlUtils(\n                                            intl,\n                                            'utenlandsopphold.neste12MånederInfotekst.radiobutton.boddINorge'\n                                        ),\n                                        no: intlUtils(\n                                            intl,\n                                            'utenlandsopphold.neste12MånederInfotekst.radiobutton.boddIUtlandet'\n                                        ),\n                                    }}\n                                    validate={(skalBoINorgeNeste12Mnd) =>\n                                        validateYesOrNoIsAnswered(\n                                            skalBoINorgeNeste12Mnd,\n                                            'valideringsfeil.utenlandsopphold.skalBoINorgePåkrevd'\n                                        )\n                                    }\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"xl\"\n                                visible={visibility.isVisible(UtenlandsoppholdFieldNames.utenlandsoppholdNeste12Mnd)}\n                            >\n                                <BostedUtlandListAndDialog<UtenlandsoppholdFieldNames>\n                                    name={UtenlandsoppholdFieldNames.utenlandsoppholdNeste12Mnd}\n                                    minDate={dateToday}\n                                    maxDate={date1YearFromNow}\n                                    labels={{\n                                        addLabel: intlUtils(intl, 'utenlandsopphold.knapp.leggTilLand'),\n                                        modalTitle: 'Utenlandsopphold neste 12 måneder',\n                                    }}\n                                    erFremtidigOpphold={true}\n                                    validate={validateUtenlandsoppholdNeste12Mnd(intl)}\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"l\"\n                                visible={visibility.isVisible(UtenlandsoppholdFieldNames.harBoddINorgeSiste12Mnd)}\n                            >\n                                <UtenlandsoppholdFormComponents.YesOrNoQuestion\n                                    legend={intlUtils(intl, 'utenlandsopphold.siste12Måneder.spørsmål')}\n                                    name={UtenlandsoppholdFieldNames.harBoddINorgeSiste12Mnd}\n                                    description={intlUtils(intl, 'utenlandsopphold.siste12MånederInfotekst')}\n                                    labels={{\n                                        yes: intlUtils(\n                                            intl,\n                                            'utenlandsopphold.siste12MånederInfotekst.radiobutton.boddINorge'\n                                        ),\n                                        no: intlUtils(\n                                            intl,\n                                            'utenlandsopphold.siste12MånederInfotekst.radiobutton.boddIUtlandet'\n                                        ),\n                                    }}\n                                    validate={(harBoddINorgeSiste12Mnd) =>\n                                        validateYesOrNoIsAnswered(\n                                            harBoddINorgeSiste12Mnd,\n                                            'valideringsfeil.utenlandsopphold.harBoddINorgePåkrevd'\n                                        )\n                                    }\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"xl\"\n                                visible={visibility.isVisible(UtenlandsoppholdFieldNames.utenlandsoppholdSiste12Mnd)}\n                            >\n                                <BostedUtlandListAndDialog<UtenlandsoppholdFieldNames>\n                                    minDate={date1YearAgo}\n                                    maxDate={dateToday}\n                                    name={UtenlandsoppholdFieldNames.utenlandsoppholdSiste12Mnd}\n                                    labels={{\n                                        addLabel: intlUtils(intl, 'utenlandsopphold.knapp.leggTilLand'),\n                                        modalTitle: 'Utenlandsopphold siste 12 måneder',\n                                    }}\n                                    erFremtidigOpphold={false}\n                                    validate={validateUtenlandsoppholdSiste12Mnd(intl)}\n                                />\n                            </Block>\n                            <Block padBottom=\"xl\">\n                                <ExpansionCard aria-label=\"Informasjon om utenlandsopphold\">\n                                    <ExpansionCard.Header>\n                                        <ExpansionCard.Title>\n                                            <FormattedMessage id=\"utenlandsopphold.oppholdOgStøtte.header.tittel\" />\n                                        </ExpansionCard.Title>\n                                        <BodyLong>\n                                            <FormattedMessage id=\"utenlandsopphold.oppholdOgStøtte.header.ingress\" />\n                                        </BodyLong>\n                                    </ExpansionCard.Header>\n                                    <ExpansionCard.Content>\n                                        <Block padBottom=\"l\">\n                                            <BodyLong>\n                                                <FormattedMessage id=\"utenlandsopphold.oppholdOgStøtte.seksjon1\" />\n                                            </BodyLong>\n                                        </Block>\n                                        <Block padBottom=\"l\">\n                                            <BodyLong>\n                                                <FormattedMessage id=\"utenlandsopphold.oppholdOgStøtte.seksjon2\" />\n                                            </BodyLong>\n                                        </Block>\n                                        <Block padBottom=\"xl\">\n                                            <BodyLong>\n                                                <FormattedMessage id=\"utenlandsopphold.oppholdOgStøtte.seksjon3\" />\n                                            </BodyLong>\n                                        </Block>\n                                        <Block padBottom=\"l\">\n                                            <Heading as=\"h4\" size=\"medium\">\n                                                <FormattedMessage id=\"utenlandsopphold.oppholdOgStøtte.undertittel\" />\n                                            </Heading>\n                                        </Block>\n                                        <Block padBottom=\"l\">\n                                            <BodyLong>\n                                                <FormattedMessage id=\"utenlandsopphold.oppholdOgStøtte.seksjon4\" />\n                                            </BodyLong>\n                                        </Block>\n                                        <BodyShort>\n                                            <FormattedMessage\n                                                id=\"utenlandsopphold.oppholdOgStøtte.seksjon5\"\n                                                values={{\n                                                    a: (msg: any) => (\n                                                        <Link\n                                                            href=\"https://nav.no/foreldrepenger#utland\"\n                                                            rel=\"noreferrer\"\n                                                            target=\"_blank\"\n                                                        >\n                                                            {msg}\n                                                        </Link>\n                                                    ),\n                                                }}\n                                            />\n                                        </BodyShort>\n                                    </ExpansionCard.Content>\n                                </ExpansionCard>\n                            </Block>\n                            <Block>\n                                <StepButtonWrapper>\n                                    <Button\n                                        variant=\"secondary\"\n                                        as={RouterLink}\n                                        to={getPreviousStepHref('utenlandsopphold')}\n                                    >\n                                        <FormattedMessage id=\"backlink.label\" />\n                                    </Button>\n                                    {visibility.areAllQuestionsAnswered() && (\n                                        <Button type=\"submit\" disabled={isSubmitting} loading={isSubmitting}>\n                                            {intlUtils(intl, 'søknad.gåVidere')}\n                                        </Button>\n                                    )}\n                                </StepButtonWrapper>\n                            </Block>\n                        </UtenlandsoppholdFormComponents.Form>\n                    </Step>\n                );\n            }}\n        />\n    );\n};\n\nexport default Utenlandsopphold;\n"],"names":["FormikModalFormAndList","_a","name","labels","listRenderer","formRenderer","sortFunc","onAfterChange","dialogWidth","shouldCloseOnOverlayClick","error","maxItems","useFastField","confirmDelete","validate","context","React","TypedFormikFormContext","FieldComponent","FastField","Field","_jsx","value","field","form","ModalFormAndList","values","updatedValues","onEdit","onDelete","UtenlandsoppholdFieldNames","initialUtenlandsoppholdFormData","YesOrNo","UtenlandsoppholdFormComponents","getTypedFormComponents","UtenlandsoppholdFormConfig","harBoddINorgeSiste12Mnd","skalBoINorgeNeste12Mnd","utenlandsoppholdSiste12Mnd","utenlandsoppholdNeste12Mnd","utenlandsoppholdFormQuestions","Questions","isValidBostedUtland","bosted","fom","landkode","tom","Form","mapBostedToFormValues","BostedUtlandForm","maxDate","minDate","onSubmit","onCancel","erFremtidigOpphold","intl","useIntl","onFormikSubmit","formValues","updatedBosted","jsx","jsxs","Heading","FormattedMessage","Block","intlUtils","ISOStringToDate","dayjs","dateRangeValidation","country","validateRequiredField","bem","bemUtils","BostedUtlandList","bosteder","renderBostedUtlandLabel","opphold","navn","getCountryName","ActionLink","formatDateExtended","ItemList","BostedUtlandListAndDialog","sortItemsByFom","item","items","BostedUtlandListe","mapUtenlandsoppholdTilBostedUtland","getInitialUtenlandsoppholdValuesFromState","init","convertBooleanOrUndefinedToYesOrNo","mapBostedUtlandToUtenlandsopphold","bostedUtland","mapUtenlandsoppholdFormDataToState","convertYesOrNoOrUndefinedToBoolean","validateUtenlandsoppholdNeste12Mnd","utenlandsopphold","dateRanges","u","dateRangesCollide","dateRangesExceedsRange","date1YearFromNow","validateUtenlandsoppholdSiste12Mnd","date1YearAgo","Utenlandsopphold","informasjonOmUtenlandsopphold","useSøknad","onValidSubmitHandler","actionCreator","handleSubmit","isSubmitting","useOnValidSubmit","SøknadRoutes","state","storeAppState","onAvbrytSøknad","useAvbrytSøknad","onFortsettSøknadSenere","useFortsettSøknadSenere","useSaveLoadedRoute","visibility","Step","stepConfig","validateYesOrNoIsAnswered","dateToday","ExpansionCard","BodyLong","BodyShort","msg","Link","StepButtonWrapper","Button","RouterLink","getPreviousStepHref","Utenlandsopphold$1"],"mappings":"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","x_google_ignoreList":[0]}