{"version":3,"file":"Inntektsinformasjon-c9a5dbf8.js","sources":["../../src/app/steps/inntektsinformasjon/inntektsinformasjonFormConfig.ts","../../src/app/steps/inntektsinformasjon/components/andre-inntekter/AndreInntekterListe.tsx","../../src/app/steps/inntektsinformasjon/components/andre-inntekter/modal/andreInntekterModalFormConfig.ts","../../src/app/steps/inntektsinformasjon/components/andre-inntekter/modal/andreInntekterModalFormUtils.ts","../../src/app/steps/inntektsinformasjon/components/andre-inntekter/modal/andreInntekterModalQuestionsConfig.ts","../../src/app/steps/inntektsinformasjon/components/andre-inntekter/validation/andreInntekterValidation.ts","../../src/app/steps/inntektsinformasjon/components/andre-inntekter/modal/AndreInntekterModal.tsx","../../src/app/steps/inntektsinformasjon/components/andre-inntekter/AndreInntekter.tsx","../../src/app/steps/inntektsinformasjon/components/arbeidsforhold-informasjon/ArbeidsforholdInformasjon.tsx","../../src/app/steps/inntektsinformasjon/components/egen-næring/EgenNæringListe.tsx","../../src/app/steps/inntektsinformasjon/components/egen-næring/HvemKanDriveMedEgenNæring.tsx","../../src/app/steps/inntektsinformasjon/components/egen-næring/modal/egenNæringModalFormConfig.ts","../../src/app/steps/inntektsinformasjon/components/egen-næring/modal/egenNæringModalFormUtils.ts","../../src/app/steps/inntektsinformasjon/components/egen-næring/modal/egenNæringModalQuestionsConfig.ts","../../src/app/steps/inntektsinformasjon/components/egen-næring/modal/validation/egenNæringValidation.ts","../../src/app/steps/inntektsinformasjon/components/egen-næring/modal/components/OrgnummerEllerLand.tsx","../../src/app/steps/inntektsinformasjon/components/egen-næring/modal/EgenNæringModal.tsx","../../src/app/steps/inntektsinformasjon/components/egen-næring/EgenNæring.tsx","../../src/app/steps/inntektsinformasjon/validation/inntektsinformasjonValidering.ts","../../src/app/steps/inntektsinformasjon/components/frilans/HvemKanVæreFrilanser.tsx","../../src/app/steps/inntektsinformasjon/components/frilans/Frilans.tsx","../../src/app/steps/inntektsinformasjon/components/info-til-fiskere/InfoTilFiskere.tsx","../../src/app/steps/inntektsinformasjon/inntektsinformasjonFormUtils.ts","../../src/app/steps/inntektsinformasjon/inntektsInformasjonQuestionsConfig.ts","../../src/app/steps/inntektsinformasjon/Inntektsinformasjon.tsx"],"sourcesContent":["import { YesOrNo, getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\n\nexport enum InntektsinformasjonFormField {\n    hattInntektSomFrilans = 'hattInntektSomFrilans',\n    hattInntektSomNæringsdrivende = 'hattInntektSomNæringsdrivende',\n    hattAndreInntekter = 'hattAndreInntekter',\n    frilansOppstartsDato = 'frilansOppstartsDato',\n    jobberFremdelesSomFrilanser = 'jobberFremdelesSomFrilanser',\n}\n\nexport interface InntektsinformasjonFormData {\n    [InntektsinformasjonFormField.hattInntektSomFrilans]: YesOrNo;\n    [InntektsinformasjonFormField.hattInntektSomNæringsdrivende]: YesOrNo;\n    [InntektsinformasjonFormField.hattAndreInntekter]: YesOrNo;\n    [InntektsinformasjonFormField.frilansOppstartsDato]: string;\n    [InntektsinformasjonFormField.jobberFremdelesSomFrilanser]: YesOrNo;\n}\n\nexport const InntektsinformasjonFormComponents = getTypedFormComponents<\n    InntektsinformasjonFormField,\n    InntektsinformasjonFormData\n>();\n","import { formatTidsperiodeMedValgfriSluttdato, intlUtils } from '@navikt/fp-common';\nimport InteractiveListElement from 'app/components/interactive-list-element/InteractiveListElement';\nimport { AnnenInntekt, AnnenInntektType } from 'app/context/types/AnnenInntekt';\nimport { FunctionComponent } from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\n\ninterface Props {\n    andreInntekter: AnnenInntekt[];\n    deleteAnnenInntekt: (oppdrag: AnnenInntekt) => void;\n    selectAnnenInntekt: (oppdrag: AnnenInntekt) => void;\n}\n\nconst getTitle = (type: AnnenInntektType, intl: IntlShape): string => {\n    if (type === AnnenInntektType.JOBB_I_UTLANDET) {\n        return intlUtils(intl, 'inntektsinformasjon.andreInntekter.inntektsliste.jobbIUtlandet');\n    }\n\n    if (type === AnnenInntektType.MILITÆRTJENESTE) {\n        return intlUtils(intl, 'inntektsinformasjon.andreInntekter.inntektsliste.førstegangstjeneste');\n    }\n\n    return intlUtils(intl, 'inntektsinformasjon.andreInntekter.inntektsliste.sluttpakke');\n};\n\nconst AndreInntekterListe: FunctionComponent<Props> = ({ andreInntekter, deleteAnnenInntekt, selectAnnenInntekt }) => {\n    const intl = useIntl();\n\n    if (andreInntekter.length === 0) {\n        return null;\n    }\n\n    return (\n        <ul style={{ margin: 0, padding: 0, listStyle: 'none' }}>\n            {andreInntekter.map((annenInntekt, index) => (\n                <InteractiveListElement\n                    deleteLinkText=\"Slett annen inntekt\"\n                    onDelete={() => deleteAnnenInntekt(annenInntekt)}\n                    onEdit={() => selectAnnenInntekt(annenInntekt)}\n                    text={formatTidsperiodeMedValgfriSluttdato(annenInntekt.tidsperiode)}\n                    title={getTitle(annenInntekt.type, intl)}\n                    deleteButtonAriaText={`Slett annen inntekt`}\n                    editButtonAriaText={`Rediger annen inntekt`}\n                    missingDocumentation={\n                        annenInntekt.vedlegg.length === 0 && annenInntekt.type !== AnnenInntektType.JOBB_I_UTLANDET\n                    }\n                    key={`${annenInntekt.type}${annenInntekt.tidsperiode.fom}${index}`}\n                />\n            ))}\n        </ul>\n    );\n};\n\nexport default AndreInntekterListe;\n","import { Attachment } from '@navikt/fp-common';\nimport { YesOrNo, getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\nimport { AnnenInntektType } from 'app/context/types/AnnenInntekt';\n\nexport enum AndreInntekterFormField {\n    type = 'type',\n    navnPåArbeidsgiver = 'navnPåArbeidsgiver',\n    land = 'land',\n    fom = 'fom',\n    tom = 'tom',\n    pågående = 'pågående',\n    dokumentasjon = 'dokumentasjon',\n}\n\nexport interface AndreInntekterFormData {\n    [AndreInntekterFormField.type]: AnnenInntektType | undefined;\n    [AndreInntekterFormField.navnPåArbeidsgiver]: string;\n    [AndreInntekterFormField.land]: string;\n    [AndreInntekterFormField.fom]: string;\n    [AndreInntekterFormField.tom]: string;\n    [AndreInntekterFormField.pågående]: YesOrNo;\n    [AndreInntekterFormField.dokumentasjon]: Attachment[];\n}\n\nexport const AndreInntekterModalFormComponents = getTypedFormComponents<\n    AndreInntekterFormField,\n    AndreInntekterFormData\n>();\n","import { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { AnnenInntekt, AnnenInntektType } from 'app/context/types/AnnenInntekt';\nimport { AndreInntekterFormData, AndreInntekterFormField } from './andreInntekterModalFormConfig';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\nimport {\n    AttachmentType,\n    Skjemanummer,\n    convertBooleanOrUndefinedToYesOrNo,\n    convertYesOrNoOrUndefinedToBoolean,\n    lagSendSenereDokumentNårIngenAndreFinnes,\n} from '@navikt/fp-common';\n\nconst initialAndreInntekterFormValues: AndreInntekterFormData = {\n    [AndreInntekterFormField.type]: undefined,\n    [AndreInntekterFormField.fom]: '',\n    [AndreInntekterFormField.tom]: '',\n    [AndreInntekterFormField.pågående]: YesOrNo.UNANSWERED,\n    [AndreInntekterFormField.navnPåArbeidsgiver]: '',\n    [AndreInntekterFormField.land]: '',\n    [AndreInntekterFormField.dokumentasjon]: [],\n};\n\nexport const getSkjemanummer = (values: AndreInntekterFormData): Skjemanummer => {\n    if (values.type === AnnenInntektType.MILITÆRTJENESTE) {\n        return Skjemanummer.DOK_MILITÆR_SILVIL_TJENESTE;\n    }\n\n    if (values.type === AnnenInntektType.SLUTTPAKKE) {\n        return Skjemanummer.ETTERLØNN_ELLER_SLUTTVEDERLAG;\n    }\n\n    return Skjemanummer.ANNET;\n};\n\nexport const cleanupAndreInntekterForm = (\n    values: AndreInntekterFormData,\n    visibility: QuestionVisibility<AndreInntekterFormField, undefined>,\n): AndreInntekterFormData => {\n    return {\n        type: visibility.isVisible(AndreInntekterFormField.type) ? values.type : initialAndreInntekterFormValues.type,\n        dokumentasjon: visibility.isVisible(AndreInntekterFormField.dokumentasjon)\n            ? lagSendSenereDokumentNårIngenAndreFinnes(\n                  values.dokumentasjon,\n                  AttachmentType.ANNEN_INNTEKT,\n                  getSkjemanummer(values),\n              )\n            : initialAndreInntekterFormValues.dokumentasjon,\n        fom: visibility.isVisible(AndreInntekterFormField.fom) ? values.fom : initialAndreInntekterFormValues.fom,\n        tom: visibility.isVisible(AndreInntekterFormField.tom) ? values.tom : initialAndreInntekterFormValues.tom,\n        pågående: visibility.isVisible(AndreInntekterFormField.pågående)\n            ? values.pågående\n            : initialAndreInntekterFormValues.pågående,\n        navnPåArbeidsgiver: visibility.isVisible(AndreInntekterFormField.navnPåArbeidsgiver)\n            ? values.navnPåArbeidsgiver\n            : initialAndreInntekterFormValues.navnPåArbeidsgiver,\n        land: visibility.isVisible(AndreInntekterFormField.land) ? values.land : initialAndreInntekterFormValues.land,\n    };\n};\n\nexport const getInitialAndreInntekterFormValues = (annenInntekt: AnnenInntekt | undefined): AndreInntekterFormData => {\n    if (!annenInntekt) {\n        return {\n            ...initialAndreInntekterFormValues,\n        };\n    }\n\n    if (annenInntekt.type === AnnenInntektType.JOBB_I_UTLANDET) {\n        return {\n            ...initialAndreInntekterFormValues,\n            navnPåArbeidsgiver: annenInntekt.arbeidsgiverNavn,\n            land: annenInntekt.land,\n            fom: annenInntekt.tidsperiode.fom,\n            tom: annenInntekt.tidsperiode.tom || '',\n            dokumentasjon: annenInntekt.vedlegg,\n            pågående: convertBooleanOrUndefinedToYesOrNo(annenInntekt.pågående),\n            type: annenInntekt.type,\n        };\n    }\n\n    return {\n        ...initialAndreInntekterFormValues,\n        fom: annenInntekt.tidsperiode.fom,\n        tom: annenInntekt.tidsperiode.tom || '',\n        dokumentasjon: annenInntekt.vedlegg,\n        pågående: convertBooleanOrUndefinedToYesOrNo(annenInntekt.pågående),\n        type: annenInntekt.type,\n    };\n};\n\nexport const mapAnnenInntektModalValuesToState = (annenInntekt: Partial<AndreInntekterFormData>): AnnenInntekt => {\n    if (annenInntekt.type === AnnenInntektType.JOBB_I_UTLANDET) {\n        return {\n            arbeidsgiverNavn: annenInntekt.navnPåArbeidsgiver!,\n            land: annenInntekt.land!,\n            pågående: convertYesOrNoOrUndefinedToBoolean(annenInntekt.pågående)!,\n            tidsperiode: {\n                fom: annenInntekt.fom!,\n                tom: annenInntekt.tom,\n            },\n            type: annenInntekt.type,\n            vedlegg: [],\n        };\n    }\n\n    return {\n        pågående: convertYesOrNoOrUndefinedToBoolean(annenInntekt.pågående)!,\n        tidsperiode: {\n            fom: annenInntekt.fom!,\n            tom: annenInntekt.tom,\n        },\n        type: annenInntekt.type!,\n        vedlegg: annenInntekt.dokumentasjon || [],\n    };\n};\n","import { hasValue } from '@navikt/fp-common';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport { AnnenInntektType } from 'app/context/types/AnnenInntekt';\nimport { AndreInntekterFormData, AndreInntekterFormField } from './andreInntekterModalFormConfig';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\n\nconst AndreInntekterModalFormConfig: QuestionConfig<AndreInntekterFormData, AndreInntekterFormField> = {\n    [AndreInntekterFormField.type]: {\n        isIncluded: () => true,\n        isAnswered: ({ type }) => hasValue(type),\n    },\n    [AndreInntekterFormField.land]: {\n        isIncluded: ({ type }) => type === AnnenInntektType.JOBB_I_UTLANDET,\n        isAnswered: ({ land }) => hasValue(land),\n        visibilityFilter: ({ type }) => type === AnnenInntektType.JOBB_I_UTLANDET,\n    },\n    [AndreInntekterFormField.navnPåArbeidsgiver]: {\n        isIncluded: ({ type }) => type === AnnenInntektType.JOBB_I_UTLANDET,\n        isAnswered: ({ navnPåArbeidsgiver }) => hasValue(navnPåArbeidsgiver),\n        visibilityFilter: ({ land }) => hasValue(land),\n    },\n    [AndreInntekterFormField.fom]: {\n        isIncluded: () => true,\n        isAnswered: ({ fom }) => hasValue(fom),\n        visibilityFilter: ({ type, navnPåArbeidsgiver, land }) =>\n            (type === AnnenInntektType.JOBB_I_UTLANDET && hasValue(navnPåArbeidsgiver) && hasValue(land)) ||\n            (type !== AnnenInntektType.JOBB_I_UTLANDET && hasValue(type)),\n    },\n    [AndreInntekterFormField.pågående]: {\n        isIncluded: () => true,\n        isAnswered: ({ pågående }) => pågående !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ fom }) => hasValue(fom),\n    },\n    [AndreInntekterFormField.tom]: {\n        isIncluded: ({ pågående }) => pågående === YesOrNo.NO,\n        isAnswered: ({ tom }) => hasValue(tom),\n        visibilityFilter: ({ pågående }) => pågående === YesOrNo.NO,\n    },\n    [AndreInntekterFormField.dokumentasjon]: {\n        isIncluded: ({ type }) => type !== AnnenInntektType.JOBB_I_UTLANDET,\n        isAnswered: () => true,\n        visibilityFilter: ({ pågående, tom }) => pågående === YesOrNo.YES || (pågående === YesOrNo.NO && hasValue(tom)),\n    },\n};\n\nconst andreInntekterModalQuestionsConfig = Questions<AndreInntekterFormData, AndreInntekterFormField>(\n    AndreInntekterModalFormConfig,\n);\n\nexport default andreInntekterModalQuestionsConfig;\n","import { isISODateString } from '@navikt/ds-datepicker';\nimport { hasValue, intlUtils, isDateInTheFuture } from '@navikt/fp-common';\nimport { isDateABeforeDateB } from 'app/utils/dateUtils';\nimport { IntlShape } from 'react-intl';\n\nexport const validateAnnenInntektFom = (intl: IntlShape, tom: string) => (fom: string) => {\n    if (!hasValue(fom)) {\n        return intlUtils(intl, 'valideringsfeil.fraOgMedDato.påkrevd');\n    }\n\n    if (!isISODateString(fom)) {\n        return intlUtils(intl, 'valideringsfeil.fraOgMedDato.gyldigDato');\n    }\n\n    if (isDateInTheFuture(fom)) {\n        return intlUtils(intl, 'valideringsfeil.fraOgMedDato.erIFremtiden');\n    }\n\n    if (isDateABeforeDateB(tom, fom)) {\n        return intlUtils(intl, 'valideringsfeil.fraOgMedDato.førTilDato');\n    }\n\n    return undefined;\n};\n\nexport const validateAnnenInntektTom = (intl: IntlShape, fom: string) => (tom: string) => {\n    if (!hasValue(tom)) {\n        return intlUtils(intl, 'valideringsfeil.tilOgMedDato.påkrevd');\n    }\n\n    if (!isISODateString(tom)) {\n        return intlUtils(intl, 'valideringsfeil.tilOgMedDato.gyldigDato');\n    }\n\n    if (isDateInTheFuture(tom)) {\n        return intlUtils(intl, 'valideringsfeil.tilOgMedDato.erIFremtiden');\n    }\n\n    if (isDateABeforeDateB(tom, fom)) {\n        return intlUtils(intl, 'valideringsfeil.tilOgMedDato.etterFraDato');\n    }\n\n    return undefined;\n};\n","import { AttachmentType, Block, intlUtils } from '@navikt/fp-common';\nimport { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport {\n    AndreInntekterFormData,\n    AndreInntekterFormField,\n    AndreInntekterModalFormComponents,\n} from './andreInntekterModalFormConfig';\nimport {\n    cleanupAndreInntekterForm,\n    getInitialAndreInntekterFormValues,\n    getSkjemanummer,\n    mapAnnenInntektModalValuesToState,\n} from './andreInntekterModalFormUtils';\nimport { AnnenInntekt, AnnenInntektType } from 'app/context/types/AnnenInntekt';\nimport andreInntekterModalQuestionsConfig from './andreInntekterModalQuestionsConfig';\nimport FormikFileUploader from 'app/components/formik-file-uploader/FormikFileUploader';\nimport { validateAnnenInntektFom, validateAnnenInntektTom } from './../validation/andreInntekterValidation';\nimport dayjs from 'dayjs';\nimport { validateRequiredTextInputField } from 'app/utils/validationUtil';\nimport { Button, GuidePanel, Heading, Modal } from '@navikt/ds-react';\n\ninterface Props {\n    isOpen: boolean;\n    contentLabel: string;\n    onRequestClose: () => void;\n    addAnnenInntekt: (annenInntekt: AnnenInntekt) => void;\n    editAnnenInntekt: (annenInntekt: AnnenInntekt) => void;\n    selectedAnnenInntekt: AnnenInntekt | undefined;\n}\n\nconst AndreInntekterModal: FunctionComponent<Props> = ({\n    isOpen,\n    contentLabel,\n    onRequestClose,\n    selectedAnnenInntekt,\n    addAnnenInntekt,\n    editAnnenInntekt,\n}) => {\n    const intl = useIntl();\n\n    const onValidSubmit = (values: Partial<AndreInntekterFormData>) => {\n        if (!selectedAnnenInntekt) {\n            addAnnenInntekt(mapAnnenInntektModalValuesToState(values));\n        } else {\n            editAnnenInntekt(mapAnnenInntektModalValuesToState(values));\n        }\n        onRequestClose();\n    };\n\n    const getVeilederMessageId = (values: AndreInntekterFormData): string => {\n        if (values.type === AnnenInntektType.MILITÆRTJENESTE) {\n            return 'inntektsinformasjon.andreInntekterModal.veileder.militær';\n        }\n        return 'inntektsinformasjon.andreInntekterModal.veileder.sluttpakke';\n    };\n\n    const navnPåArbeidsgiverLabel = intlUtils(intl, 'annenInntekt.spørsmål.arbeidsgiver');\n\n    return (\n        <Modal width=\"medium\" open={isOpen} aria-label={contentLabel} onClose={onRequestClose}>\n            <Modal.Header>\n                <Heading size=\"small\">\n                    <FormattedMessage id=\"inntektsinformasjon.andreInntekterModal.tittel\" />\n                </Heading>\n            </Modal.Header>\n            <Modal.Body>\n                <AndreInntekterModalFormComponents.FormikWrapper\n                    initialValues={getInitialAndreInntekterFormValues(selectedAnnenInntekt)}\n                    onSubmit={onValidSubmit}\n                    renderForm={({ values: formValues }) => {\n                        const visibility = andreInntekterModalQuestionsConfig.getVisbility(\n                            formValues as AndreInntekterFormData,\n                        );\n\n                        return (\n                            <AndreInntekterModalFormComponents.Form\n                                includeButtons={false}\n                                cleanup={(values) => cleanupAndreInntekterForm(values, visibility)}\n                            >\n                                <Block padBottom=\"l\" visible={visibility.isVisible(AndreInntekterFormField.type)}>\n                                    <AndreInntekterModalFormComponents.RadioGroup\n                                        legend=\"Andre inntekter\"\n                                        name={AndreInntekterFormField.type}\n                                        radios={[\n                                            { label: 'Jobb i utlandet', value: AnnenInntektType.JOBB_I_UTLANDET },\n                                            { label: 'Sluttvederlag', value: AnnenInntektType.SLUTTPAKKE },\n                                            { label: 'Førstegangstjeneste', value: AnnenInntektType.MILITÆRTJENESTE },\n                                        ]}\n                                    />\n                                </Block>\n                                <Block padBottom=\"l\" visible={visibility.isVisible(AndreInntekterFormField.land)}>\n                                    <AndreInntekterModalFormComponents.CountrySelect\n                                        name={AndreInntekterFormField.land}\n                                        label={intlUtils(intl, 'annenInntekt.spørsmål.land')}\n                                        useAlpha3Code={false}\n                                    />\n                                </Block>\n                                <Block\n                                    padBottom=\"l\"\n                                    visible={visibility.isVisible(AndreInntekterFormField.navnPåArbeidsgiver)}\n                                >\n                                    <AndreInntekterModalFormComponents.TextField\n                                        name={AndreInntekterFormField.navnPåArbeidsgiver}\n                                        label={navnPåArbeidsgiverLabel}\n                                        validate={validateRequiredTextInputField(navnPåArbeidsgiverLabel, intl)}\n                                    />\n                                </Block>\n                                <Block padBottom=\"l\" visible={visibility.isVisible(AndreInntekterFormField.fom)}>\n                                    <AndreInntekterModalFormComponents.DatePicker\n                                        name={AndreInntekterFormField.fom}\n                                        label={intlUtils(intl, 'fom')}\n                                        placeholder=\"dd.mm.åååå\"\n                                        fullscreenOverlay={true}\n                                        showYearSelector={true}\n                                        validate={validateAnnenInntektFom(intl, formValues.tom!)}\n                                        maxDate={dayjs().toDate()}\n                                    />\n                                </Block>\n                                <Block padBottom=\"l\" visible={visibility.isVisible(AndreInntekterFormField.pågående)}>\n                                    <AndreInntekterModalFormComponents.YesOrNoQuestion\n                                        name={AndreInntekterFormField.pågående}\n                                        legend={intlUtils(intl, 'pågående')}\n                                    />\n                                </Block>\n                                <Block padBottom=\"l\" visible={visibility.isVisible(AndreInntekterFormField.tom)}>\n                                    <AndreInntekterModalFormComponents.DatePicker\n                                        name={AndreInntekterFormField.tom}\n                                        label={intlUtils(intl, 'tom')}\n                                        placeholder=\"dd.mm.åååå\"\n                                        fullscreenOverlay={true}\n                                        showYearSelector={true}\n                                        validate={validateAnnenInntektTom(intl, formValues.fom!)}\n                                        maxDate={dayjs().toDate()}\n                                    />\n                                </Block>\n                                <Block\n                                    padBottom=\"l\"\n                                    visible={visibility.isVisible(AndreInntekterFormField.dokumentasjon)}\n                                >\n                                    <GuidePanel>\n                                        <FormattedMessage\n                                            id={getVeilederMessageId(formValues as AndreInntekterFormData)}\n                                        />\n                                    </GuidePanel>\n                                </Block>\n                                <Block\n                                    padBottom=\"l\"\n                                    visible={visibility.isVisible(AndreInntekterFormField.dokumentasjon)}\n                                >\n                                    <FormikFileUploader\n                                        legend=\"Dokumentasjon av andre inntekter\"\n                                        name={AndreInntekterFormField.dokumentasjon}\n                                        label=\"Last opp dokumentasjon\"\n                                        attachments={formValues.dokumentasjon!}\n                                        attachmentType={AttachmentType.ANNEN_INNTEKT}\n                                        skjemanummer={getSkjemanummer(formValues as AndreInntekterFormData)}\n                                    />\n                                </Block>\n                                <Block visible={visibility.areAllQuestionsAnswered()} textAlignCenter={true}>\n                                    <Button>{intlUtils(intl, 'søknad.gåVidere')}</Button>\n                                </Block>\n                            </AndreInntekterModalFormComponents.Form>\n                        );\n                    }}\n                />\n            </Modal.Body>\n        </Modal>\n    );\n};\n\nexport default AndreInntekterModal;\n","import { Block, intlUtils } from '@navikt/fp-common';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { AnnenInntekt } from 'app/context/types/AnnenInntekt';\nimport { FunctionComponent, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport {\n    InntektsinformasjonFormComponents,\n    InntektsinformasjonFormData,\n    InntektsinformasjonFormField,\n} from '../../inntektsinformasjonFormConfig';\nimport AndreInntekterListe from './AndreInntekterListe';\nimport AndreInntekterModal from './modal/AndreInntekterModal';\nimport { Button } from '@navikt/ds-react';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\n\ninterface Props {\n    andreInntekterInformasjon: AnnenInntekt[];\n    setAndreInntekterInformasjon: any;\n    visibility: QuestionVisibility<InntektsinformasjonFormField, undefined>;\n    formValues: InntektsinformasjonFormData;\n}\n\nconst AndreInntekter: FunctionComponent<Props> = ({\n    andreInntekterInformasjon,\n    setAndreInntekterInformasjon,\n    visibility,\n    formValues,\n}) => {\n    const intl = useIntl();\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [selectedAnnenInntekt, setSelectedAnnenInntekt] = useState<AnnenInntekt>();\n\n    const handleOnLeggTil = () => {\n        setIsModalOpen(true);\n    };\n\n    const addAnnenInntekt = (annenInntekt: AnnenInntekt) => {\n        const updatedandreInntekterInformasjon = andreInntekterInformasjon.concat(annenInntekt);\n\n        setAndreInntekterInformasjon(updatedandreInntekterInformasjon);\n    };\n\n    const deleteAnnenInntekt = (annenInntekt: AnnenInntekt) => {\n        const updatedAndreInntekterInformasjon = andreInntekterInformasjon.filter(\n            (inntekt) => inntekt !== annenInntekt,\n        );\n\n        setAndreInntekterInformasjon(updatedAndreInntekterInformasjon);\n    };\n\n    const editAnnenInntekt = (annenInntekt: AnnenInntekt) => {\n        const updatedAndreInntekterInformasjon = andreInntekterInformasjon\n            .filter((inntekt) => inntekt !== selectedAnnenInntekt)\n            .concat(annenInntekt);\n\n        setAndreInntekterInformasjon(updatedAndreInntekterInformasjon);\n    };\n\n    const selectAnnenInntekt = (annenInntekt: AnnenInntekt) => {\n        setSelectedAnnenInntekt(annenInntekt);\n        setIsModalOpen(true);\n    };\n\n    return (\n        <>\n            <Block padBottom=\"l\" visible={visibility.isVisible(InntektsinformasjonFormField.hattAndreInntekter)}>\n                <InntektsinformasjonFormComponents.YesOrNoQuestion\n                    name={InntektsinformasjonFormField.hattAndreInntekter}\n                    legend={intlUtils(intl, 'inntektsinformasjon.annenInntekt')}\n                    validate={(hattAndreInntekter) => {\n                        if (hattAndreInntekter === YesOrNo.YES) {\n                            if (andreInntekterInformasjon.length === 0) {\n                                return intlUtils(\n                                    intl,\n                                    'valideringsfeil.inntektsinformasjon.andreInntekter.måHaOppdrag',\n                                );\n                            }\n                        }\n\n                        return undefined;\n                    }}\n                />\n            </Block>\n            {formValues.hattAndreInntekter === YesOrNo.YES && (\n                <div style={{ backgroundColor: '#f1f1f1', marginBottom: '1rem', padding: '1rem' }}>\n                    <AndreInntekterModal\n                        isOpen={isModalOpen}\n                        contentLabel={intlUtils(intl, 'inntektsinformasjon.andreInntekterModal.contentLabel')}\n                        onRequestClose={() => setIsModalOpen(false)}\n                        selectedAnnenInntekt={selectedAnnenInntekt}\n                        addAnnenInntekt={addAnnenInntekt}\n                        editAnnenInntekt={editAnnenInntekt}\n                    />\n                    <Block padBottom=\"l\" visible={andreInntekterInformasjon.length > 0}>\n                        <AndreInntekterListe\n                            andreInntekter={andreInntekterInformasjon}\n                            deleteAnnenInntekt={deleteAnnenInntekt}\n                            selectAnnenInntekt={selectAnnenInntekt}\n                        />\n                    </Block>\n                    <Button type=\"button\" onClick={handleOnLeggTil}>\n                        <FormattedMessage id=\"inntektsinformasjon.leggTilOppdrag\" />\n                    </Button>\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default AndreInntekter;\n","import HarIkkeArbeidsforhold from './HarIkkeArbeidsforhold';\nimport HarArbeidsforhold from './HarArbeidsforhold';\nimport { BodyShort, Label, ReadMore } from '@navikt/ds-react';\nimport { Arbeidsforhold, Block } from '@navikt/fp-common';\n\nimport './arbeidsforholdInformasjon.less';\n\ninterface Props {\n    arbeidsforhold: Arbeidsforhold[];\n}\nconst ArbeidsforholdInformasjon: React.FunctionComponent<Props> = ({ arbeidsforhold }) => {\n    const harArbeidsforhold = arbeidsforhold !== undefined && arbeidsforhold.length > 0;\n\n    return (\n        <Block padBottom=\"xl\">\n            <Label>Dine arbeidsforhold</Label>\n            <HarIkkeArbeidsforhold harArbeidsforhold={harArbeidsforhold} />\n            <HarArbeidsforhold harArbeidsforhold={harArbeidsforhold} arbeidsforhold={arbeidsforhold} />\n            <ReadMore header=\"Finner du feil eller mangler?\">\n                <BodyShort>\n                    Informasjonen er hentet fra Arbeidsgiver- og arbeidstakerregisteret. Derfor må du be din\n                    arbeidsgiver oppdatere med riktig informasjon i Arbeidsgiver- og arbeidstakerregisteret.\n                </BodyShort>\n            </ReadMore>\n        </Block>\n    );\n};\n\nexport default ArbeidsforholdInformasjon;\n","import { formatDate } from '@navikt/fp-common';\nimport InteractiveListElement from 'app/components/interactive-list-element/InteractiveListElement';\nimport { Næring } from 'app/context/types/Næring';\nimport { FunctionComponent } from 'react';\n\ninterface Props {\n    næringsInformasjon: Næring[];\n    deleteNæring: (oppdrag: Næring) => void;\n    selectNæring: (oppdrag: Næring) => void;\n}\n\nconst EgenNæringListe: FunctionComponent<Props> = ({ næringsInformasjon, deleteNæring, selectNæring }) => {\n    if (næringsInformasjon.length === 0) {\n        return null;\n    }\n\n    return (\n        <ul style={{ margin: 0, padding: 0, listStyle: 'none' }}>\n            {næringsInformasjon.map((næring, index) => (\n                <InteractiveListElement\n                    deleteLinkText=\"Slett næring\"\n                    onDelete={() => deleteNæring(næring)}\n                    onEdit={() => selectNæring(næring)}\n                    text={`${formatDate(næring.tidsperiode.fom)} - ${\n                        næring.tidsperiode.tom ? formatDate(næring.tidsperiode.tom) : 'pågående'\n                    }`}\n                    title={næring.navnPåNæringen}\n                    deleteButtonAriaText={`Slett næring`}\n                    editButtonAriaText={`Rediger næring`}\n                    key={`${næring.navnPåNæringen}${index}`}\n                />\n            ))}\n        </ul>\n    );\n};\n\nexport default EgenNæringListe;\n","import { BodyShort, Link, ReadMore } from '@navikt/ds-react';\nimport { Block, intlUtils, links } from '@navikt/fp-common';\n\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nconst HvemKanDriveMedEgenNæring = () => {\n    const intl = useIntl();\n\n    return (\n        <ReadMore\n            header={intlUtils(intl, 'inntektsinformasjon.harJobbetSomSelvstendigNæringsdrivendeSiste10Mnd.apneLabel')}\n        >\n            <div>\n                <Block padBottom=\"l\">\n                    <BodyShort>\n                        <FormattedMessage id=\"inntektsinformasjon.harJobbetSomSelvstendigNæringsdrivendeSiste10Mnd.infoboks.del1\" />\n                    </BodyShort>\n                </Block>\n                <BodyShort>\n                    <FormattedMessage\n                        id=\"inntektsinformasjon.harJobbetSomSelvstendigNæringsdrivendeSiste10Mnd.infoboks.del2\"\n                        values={{\n                            a: (msg: any) => (\n                                <Link href={links.næringsdrivendeInfoBoks} rel=\"noreferrer\" target=\"_blank\">\n                                    {msg}\n                                </Link>\n                            ),\n                        }}\n                    />\n                </BodyShort>\n            </div>\n        </ReadMore>\n    );\n};\n\nexport default HvemKanDriveMedEgenNæring;\n","import { YesOrNo, getTypedFormComponents } from '@navikt/sif-common-formik-ds/lib';\nimport { Næringstype } from 'app/context/types/Næring';\n\nexport enum EgenNæringModalFormField {\n    type = 'type',\n    navnPåNæringen = 'navnPåNæringen',\n    registrertINorge = 'registrertINorge',\n    orgnr = 'orgnr',\n    land = 'land',\n    fom = 'fom',\n    tom = 'tom',\n    pågående = 'pågående',\n    yrkesAktivDato = 'yrkesAktivDato',\n    næringsresultat = 'næringsresultat',\n    harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene = 'harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene',\n    hattVarigEndringAvNæringsinntektSiste4Kalenderår = 'hattVarigEndringAvNæringsinntektSiste4Kalenderår',\n    datoForEndring = 'datoForEndring',\n    inntektEtterEndring = 'inntektEtterEndring',\n    forklaringEndring = 'forklaringEndring',\n}\n\nexport interface EgenNæringModalFormData {\n    [EgenNæringModalFormField.type]: Næringstype | undefined;\n    [EgenNæringModalFormField.navnPåNæringen]: string;\n    [EgenNæringModalFormField.registrertINorge]: YesOrNo;\n    [EgenNæringModalFormField.orgnr]: string;\n    [EgenNæringModalFormField.land]: string;\n    [EgenNæringModalFormField.fom]: string;\n    [EgenNæringModalFormField.tom]: string;\n    [EgenNæringModalFormField.pågående]: YesOrNo;\n    [EgenNæringModalFormField.yrkesAktivDato]: string;\n    [EgenNæringModalFormField.næringsresultat]: string;\n    [EgenNæringModalFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene]: YesOrNo;\n    [EgenNæringModalFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår]: YesOrNo;\n    [EgenNæringModalFormField.datoForEndring]: string;\n    [EgenNæringModalFormField.inntektEtterEndring]: string;\n    [EgenNæringModalFormField.forklaringEndring]: string;\n}\n\nexport const EgenNæringModalFormComponents = getTypedFormComponents<\n    EgenNæringModalFormField,\n    EgenNæringModalFormData\n>();\n","import {\n    ISOStringToDate,\n    convertBooleanOrUndefinedToYesOrNo,\n    convertYesOrNoOrUndefinedToBoolean,\n    hasValue,\n} from '@navikt/fp-common';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { Næring, EndringAvNæringsinntektInformasjon } from 'app/context/types/Næring';\nimport { date4YearsAgo } from 'app/utils/dateUtils';\nimport dayjs from 'dayjs';\nimport { EgenNæringModalFormData, EgenNæringModalFormField } from './egenNæringModalFormConfig';\nimport { YesOrNo, dateToISOString } from '@navikt/sif-common-formik-ds/lib';\n\nexport const initialEgenNæringModalValues: EgenNæringModalFormData = {\n    [EgenNæringModalFormField.type]: undefined,\n    [EgenNæringModalFormField.navnPåNæringen]: '',\n    [EgenNæringModalFormField.registrertINorge]: YesOrNo.UNANSWERED,\n    [EgenNæringModalFormField.orgnr]: '',\n    [EgenNæringModalFormField.land]: '',\n    [EgenNæringModalFormField.tom]: '',\n    [EgenNæringModalFormField.fom]: '',\n    [EgenNæringModalFormField.pågående]: YesOrNo.UNANSWERED,\n    [EgenNæringModalFormField.næringsresultat]: '',\n    [EgenNæringModalFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår]: YesOrNo.UNANSWERED,\n    [EgenNæringModalFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene]: YesOrNo.UNANSWERED,\n    [EgenNæringModalFormField.yrkesAktivDato]: '',\n    [EgenNæringModalFormField.datoForEndring]: '',\n    [EgenNæringModalFormField.inntektEtterEndring]: '',\n    [EgenNæringModalFormField.forklaringEndring]: '',\n};\n\nexport const cleanupEgenNæringForm = (\n    values: EgenNæringModalFormData,\n    visibility: QuestionVisibility<EgenNæringModalFormField, undefined>,\n): EgenNæringModalFormData => {\n    return {\n        type: visibility.isVisible(EgenNæringModalFormField.type) ? values.type : undefined,\n        navnPåNæringen: visibility.isVisible(EgenNæringModalFormField.navnPåNæringen)\n            ? values.navnPåNæringen\n            : initialEgenNæringModalValues.navnPåNæringen,\n        registrertINorge: visibility.isVisible(EgenNæringModalFormField.registrertINorge)\n            ? values.registrertINorge\n            : initialEgenNæringModalValues.registrertINorge,\n        orgnr: visibility.isVisible(EgenNæringModalFormField.orgnr) ? values.orgnr : initialEgenNæringModalValues.orgnr,\n        land: visibility.isVisible(EgenNæringModalFormField.land) ? values.land : initialEgenNæringModalValues.land,\n        tom: visibility.isVisible(EgenNæringModalFormField.tom) ? values.tom : initialEgenNæringModalValues.tom,\n        fom: visibility.isVisible(EgenNæringModalFormField.fom) ? values.fom : initialEgenNæringModalValues.fom,\n        pågående: visibility.isVisible(EgenNæringModalFormField.pågående)\n            ? values.pågående\n            : initialEgenNæringModalValues.pågående,\n        næringsresultat: visibility.isVisible(EgenNæringModalFormField.næringsresultat)\n            ? values.næringsresultat\n            : initialEgenNæringModalValues.næringsresultat,\n        hattVarigEndringAvNæringsinntektSiste4Kalenderår: visibility.isVisible(\n            EgenNæringModalFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår,\n        )\n            ? values.hattVarigEndringAvNæringsinntektSiste4Kalenderår\n            : initialEgenNæringModalValues.hattVarigEndringAvNæringsinntektSiste4Kalenderår,\n        harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene: visibility.isVisible(\n            EgenNæringModalFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene,\n        )\n            ? values.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene\n            : initialEgenNæringModalValues.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene,\n        yrkesAktivDato: visibility.isVisible(EgenNæringModalFormField.yrkesAktivDato)\n            ? values.yrkesAktivDato\n            : initialEgenNæringModalValues.yrkesAktivDato,\n        datoForEndring: visibility.isVisible(EgenNæringModalFormField.datoForEndring)\n            ? values.datoForEndring\n            : initialEgenNæringModalValues.datoForEndring,\n        inntektEtterEndring: visibility.isVisible(EgenNæringModalFormField.inntektEtterEndring)\n            ? values.inntektEtterEndring\n            : initialEgenNæringModalValues.inntektEtterEndring,\n        forklaringEndring: visibility.isVisible(EgenNæringModalFormField.forklaringEndring)\n            ? values.forklaringEndring\n            : initialEgenNæringModalValues.forklaringEndring,\n    };\n};\n\nexport const getInitialEgenNæringModalValues = (næring: Næring | undefined): EgenNæringModalFormData => {\n    if (!næring) {\n        return {\n            ...initialEgenNæringModalValues,\n        };\n    }\n\n    return {\n        ...initialEgenNæringModalValues,\n        type: næring.næringstyper.length > 0 ? næring.næringstyper[0] : undefined,\n        navnPåNæringen: næring.navnPåNæringen,\n        registrertINorge: convertBooleanOrUndefinedToYesOrNo(næring.registrertINorge),\n        land: næring.registrertILand || '',\n        fom: dateToISOString(næring.tidsperiode.fom),\n        tom: dateToISOString(næring.tidsperiode.tom) || '',\n        orgnr: næring.organisasjonsnummer || '',\n        pågående: convertBooleanOrUndefinedToYesOrNo(næring.pågående),\n        næringsresultat: næring.næringsinntekt?.toString() || '',\n        hattVarigEndringAvNæringsinntektSiste4Kalenderår: convertBooleanOrUndefinedToYesOrNo(\n            næring.hattVarigEndringAvNæringsinntektSiste4Kalenderår,\n        ),\n        harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene: convertBooleanOrUndefinedToYesOrNo(\n            næring.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene,\n        ),\n        yrkesAktivDato: dateToISOString(næring.oppstartsdato) || '',\n        datoForEndring: næring.endringAvNæringsinntektInformasjon\n            ? dateToISOString(næring.endringAvNæringsinntektInformasjon.dato)\n            : '',\n        inntektEtterEndring: næring.endringAvNæringsinntektInformasjon\n            ? næring.endringAvNæringsinntektInformasjon.næringsinntektEtterEndring.toString()\n            : '',\n        forklaringEndring: næring.endringAvNæringsinntektInformasjon\n            ? næring.endringAvNæringsinntektInformasjon.forklaring\n            : '',\n    };\n};\n\nexport const mapEgenNæringModalFormValuesToState = (values: Partial<EgenNæringModalFormData>): Næring => {\n    let endringAvNæringsinntektInformasjon: EndringAvNæringsinntektInformasjon | undefined = undefined;\n\n    if (values.hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES) {\n        endringAvNæringsinntektInformasjon = {\n            dato: ISOStringToDate(values.datoForEndring)!,\n            forklaring: values.forklaringEndring!,\n            næringsinntektEtterEndring: parseInt(values.inntektEtterEndring!),\n        };\n    }\n\n    return {\n        næringstyper: [values.type!],\n        navnPåNæringen: values.navnPåNæringen!,\n        registrertINorge: convertYesOrNoOrUndefinedToBoolean(values.registrertINorge)!,\n        organisasjonsnummer: hasValue(values.orgnr) ? values.orgnr : undefined,\n        registrertILand: hasValue(values.land) ? values.land : undefined,\n        tidsperiode: {\n            fom: ISOStringToDate(values.fom)!,\n            tom: ISOStringToDate(values.tom),\n        },\n        pågående: convertYesOrNoOrUndefinedToBoolean(values.pågående)!,\n        næringsinntekt: hasValue(values.næringsresultat) ? parseInt(values.næringsresultat!, 10) : undefined,\n        hattVarigEndringAvNæringsinntektSiste4Kalenderår: convertYesOrNoOrUndefinedToBoolean(\n            values.hattVarigEndringAvNæringsinntektSiste4Kalenderår,\n        ),\n        harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene: convertYesOrNoOrUndefinedToBoolean(\n            values.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene,\n        ),\n        oppstartsdato: hasValue(values.yrkesAktivDato) ? ISOStringToDate(values.yrkesAktivDato) : undefined,\n        endringAvNæringsinntektInformasjon: endringAvNæringsinntektInformasjon,\n    };\n};\n\nexport const erVirksomhetRegnetSomNyoppstartet = (oppstartsdato: Date | undefined): boolean => {\n    if (!oppstartsdato) {\n        return true;\n    }\n\n    return dayjs(oppstartsdato).startOf('day').isAfter(date4YearsAgo, 'day');\n};\n","import { ISOStringToDate, hasValue } from '@navikt/fp-common';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport { EgenNæringModalFormData, EgenNæringModalFormField } from './egenNæringModalFormConfig';\nimport { erVirksomhetRegnetSomNyoppstartet } from './egenNæringModalFormUtils';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\n\nconst EgenNæringModalFormConfig: QuestionConfig<EgenNæringModalFormData, EgenNæringModalFormField> = {\n    [EgenNæringModalFormField.type]: {\n        isIncluded: () => true,\n        isAnswered: ({ type }) => type !== undefined,\n    },\n    [EgenNæringModalFormField.navnPåNæringen]: {\n        isIncluded: () => true,\n        isAnswered: ({ navnPåNæringen }) => hasValue(navnPåNæringen),\n        visibilityFilter: ({ type }) => type !== undefined,\n    },\n    [EgenNæringModalFormField.registrertINorge]: {\n        isIncluded: () => true,\n        isAnswered: ({ registrertINorge }) => registrertINorge !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ navnPåNæringen }) => hasValue(navnPåNæringen),\n    },\n    [EgenNæringModalFormField.orgnr]: {\n        isIncluded: ({ registrertINorge }) => registrertINorge === YesOrNo.YES,\n        isAnswered: ({ orgnr }) => hasValue(orgnr),\n        visibilityFilter: ({ registrertINorge }) => registrertINorge === YesOrNo.YES,\n    },\n    [EgenNæringModalFormField.land]: {\n        isIncluded: ({ registrertINorge }) => registrertINorge === YesOrNo.NO,\n        isAnswered: ({ land }) => hasValue(land),\n        visibilityFilter: ({ registrertINorge }) => registrertINorge === YesOrNo.NO,\n    },\n    [EgenNæringModalFormField.fom]: {\n        isIncluded: () => true,\n        isAnswered: ({ fom }) => hasValue(fom),\n        visibilityFilter: ({ orgnr, land }) => hasValue(orgnr) || hasValue(land),\n    },\n    [EgenNæringModalFormField.pågående]: {\n        isIncluded: () => true,\n        isAnswered: ({ pågående }) => pågående !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ fom }) => hasValue(fom),\n    },\n    [EgenNæringModalFormField.tom]: {\n        isIncluded: ({ pågående }) => pågående === YesOrNo.NO,\n        isAnswered: ({ tom }) => hasValue(tom),\n        visibilityFilter: ({ pågående }) => pågående === YesOrNo.NO,\n    },\n    [EgenNæringModalFormField.næringsresultat]: {\n        isIncluded: ({ fom }) => erVirksomhetRegnetSomNyoppstartet(ISOStringToDate(fom)),\n        isAnswered: ({ næringsresultat }) => hasValue(næringsresultat),\n        visibilityFilter: ({ pågående, tom }) => pågående === YesOrNo.YES || hasValue(tom),\n    },\n    [EgenNæringModalFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene]: {\n        isIncluded: ({ fom }) => erVirksomhetRegnetSomNyoppstartet(ISOStringToDate(fom)),\n        isAnswered: ({ harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene }) =>\n            harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ næringsresultat }) => hasValue(næringsresultat),\n    },\n    [EgenNæringModalFormField.yrkesAktivDato]: {\n        isIncluded: ({ fom }) => erVirksomhetRegnetSomNyoppstartet(ISOStringToDate(fom)),\n        isAnswered: ({ yrkesAktivDato }) => hasValue(yrkesAktivDato),\n        visibilityFilter: ({ harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene }) =>\n            harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene === YesOrNo.YES,\n    },\n    [EgenNæringModalFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår]: {\n        isIncluded: ({ fom }) => !erVirksomhetRegnetSomNyoppstartet(ISOStringToDate(fom)),\n        isAnswered: ({ hattVarigEndringAvNæringsinntektSiste4Kalenderår }) =>\n            hattVarigEndringAvNæringsinntektSiste4Kalenderår !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ pågående, tom }) => pågående === YesOrNo.YES || hasValue(tom),\n    },\n    [EgenNæringModalFormField.datoForEndring]: {\n        isIncluded: ({ hattVarigEndringAvNæringsinntektSiste4Kalenderår }) =>\n            hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES,\n        isAnswered: ({ datoForEndring }) => hasValue(datoForEndring),\n        visibilityFilter: ({ hattVarigEndringAvNæringsinntektSiste4Kalenderår }) =>\n            hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES,\n    },\n    [EgenNæringModalFormField.inntektEtterEndring]: {\n        isIncluded: ({ hattVarigEndringAvNæringsinntektSiste4Kalenderår }) =>\n            hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES,\n        isAnswered: ({ inntektEtterEndring }) => hasValue(inntektEtterEndring),\n        visibilityFilter: ({ datoForEndring }) => hasValue(datoForEndring),\n    },\n    [EgenNæringModalFormField.forklaringEndring]: {\n        isIncluded: ({ hattVarigEndringAvNæringsinntektSiste4Kalenderår }) =>\n            hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES,\n        isAnswered: ({ forklaringEndring }) => hasValue(forklaringEndring),\n        visibilityFilter: ({ inntektEtterEndring }) => hasValue(inntektEtterEndring),\n    },\n};\n\nconst egenNæringModalQuestionsConfig = Questions<EgenNæringModalFormData, EgenNæringModalFormField>(\n    EgenNæringModalFormConfig,\n);\n\nexport default egenNæringModalQuestionsConfig;\n","import { isISODateString } from '@navikt/ds-datepicker';\nimport {\n    erGyldigNorskOrgnummer,\n    hasValue,\n    intlUtils,\n    isDateInTheFuture,\n    validateTextInputField,\n} from '@navikt/fp-common';\nimport { getNumberFromNumberInputValue } from '@navikt/sif-common-formik-ds/lib';\nimport { SkjemaelementFeil } from 'app/types/SkjemaelementFeil';\nimport { isDateABeforeDateB } from 'app/utils/dateUtils';\nimport { IntlShape } from 'react-intl';\n\nexport const validateEgenNæringFom =\n    (intl: IntlShape, tom: string) =>\n    (fom: string): SkjemaelementFeil => {\n        if (!hasValue(fom)) {\n            return intlUtils(intl, 'valideringsfeil.fraOgMedDato.påkrevd');\n        }\n\n        if (!isISODateString(fom)) {\n            return intlUtils(intl, 'valideringsfeil.fraOgMedDato.gyldigDato');\n        }\n\n        if (isDateInTheFuture(fom)) {\n            return intlUtils(intl, 'valideringsfeil.fraOgMedDato.erIFremtiden');\n        }\n\n        if (isDateABeforeDateB(tom, fom)) {\n            return intlUtils(intl, 'valideringsfeil.fraOgMedDato.førTilDato');\n        }\n\n        return undefined;\n    };\n\nexport const validateEgenNæringTom =\n    (intl: IntlShape, fom: string) =>\n    (tom: string): SkjemaelementFeil => {\n        if (!hasValue(tom)) {\n            return intlUtils(intl, 'valideringsfeil.tilOgMedDato.påkrevd');\n        }\n\n        if (!isISODateString(tom)) {\n            return intlUtils(intl, 'valideringsfeil.tilOgMedDato.gyldigDato');\n        }\n\n        if (isDateInTheFuture(tom)) {\n            return intlUtils(intl, 'valideringsfeil.fraOgMedDato.erIFremtiden');\n        }\n\n        if (isDateABeforeDateB(tom, fom)) {\n            return intlUtils(intl, 'valideringsfeil.fraOgMedDato.førTilDato');\n        }\n\n        return undefined;\n    };\n\nexport const validateEgenNæringOrgnr =\n    (intl: IntlShape) =>\n    (orgnr: string): SkjemaelementFeil => {\n        if (!erGyldigNorskOrgnummer(orgnr)) {\n            return intlUtils(intl, 'valideringsfeil.inntektsinformasjon.orgnr.ugyldigFormat');\n        }\n\n        return undefined;\n    };\n\nexport const validateEgenNæringForklaringTilEndring = (intl: IntlShape, label: string) => (forklaring: string) => {\n    if (forklaring.length < 25) {\n        return intlUtils(intl, 'valideringsfeil.inntektsinformasjon.forklaringTilEndring.forKort');\n    }\n\n    if (forklaring.length > 1000) {\n        return intlUtils(intl, 'valideringsfeil.inntektsinformasjon.forklaringTilEndring.forLang');\n    }\n\n    return validateTextInputField(forklaring, label, intl);\n};\n\nexport const validateEgenNæringEndringAvInntektsDato = (intl: IntlShape) => (dato: string) => {\n    if (!hasValue(dato)) {\n        return intlUtils(intl, 'valideringsfeil.tilOgMedDato.påkrevd');\n    }\n\n    if (!isISODateString(dato)) {\n        return intlUtils(intl, 'valideringsfeil.tilOgMedDato.gyldigDato');\n    }\n\n    if (isDateInTheFuture(dato)) {\n        return intlUtils(intl, 'valideringsfeil.fraOgMedDato.erIFremtiden');\n    }\n\n    return undefined;\n};\n\nexport const validateEgenNæringYrkesAktivDatoDato = (intl: IntlShape) => (dato: string) => {\n    if (!hasValue(dato)) {\n        return intlUtils(intl, 'valideringsfeil.tilOgMedDato.påkrevd');\n    }\n\n    if (!isISODateString(dato)) {\n        return intlUtils(intl, 'valideringsfeil.tilOgMedDato.gyldigDato');\n    }\n\n    if (isDateInTheFuture(dato)) {\n        return intlUtils(intl, 'valideringsfeil.fraOgMedDato.erIFremtiden');\n    }\n\n    return undefined;\n};\n\nexport const validateNumber = (intl: IntlShape, errorKey: string) => (value: string) => {\n    const valueNumber = getNumberFromNumberInputValue(value);\n\n    if (!valueNumber || Math.round(valueNumber) !== valueNumber) {\n        return intlUtils(intl, errorKey);\n    }\n\n    return undefined;\n};\n","import { Block, hasValue, intlUtils } from '@navikt/fp-common';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { EgenNæringModalFormComponents, EgenNæringModalFormField } from '../egenNæringModalFormConfig';\nimport { validateEgenNæringOrgnr } from '../validation/egenNæringValidation';\n\ninterface Props {\n    visibility: QuestionVisibility<EgenNæringModalFormField, undefined>;\n}\n\nconst OrgnummerEllerLand: FunctionComponent<Props> = ({ visibility }) => {\n    const intl = useIntl();\n\n    return (\n        <>\n            <Block padBottom=\"l\" visible={visibility.isVisible(EgenNæringModalFormField.orgnr)}>\n                <EgenNæringModalFormComponents.NumberInput\n                    name={EgenNæringModalFormField.orgnr}\n                    label={intlUtils(intl, 'inntektsinformasjon.egenNæringModal.orgnr')}\n                    validate={validateEgenNæringOrgnr(intl)}\n                />\n            </Block>\n            <Block padBottom=\"l\" visible={visibility.isVisible(EgenNæringModalFormField.land)}>\n                <EgenNæringModalFormComponents.CountrySelect\n                    name={EgenNæringModalFormField.land}\n                    label={intlUtils(intl, 'inntektsinformasjon.egenNæringModal.registrertILand')}\n                    useAlpha3Code={false}\n                    validate={(value) => {\n                        if (!hasValue(value)) {\n                            return intlUtils(intl, 'valideringsfeil.inntektsinformasjon.egenNæring.land');\n                        }\n\n                        return undefined;\n                    }}\n                />\n            </Block>\n        </>\n    );\n};\n\nexport default OrgnummerEllerLand;\n","import { FunctionComponent } from 'react';\nimport { Block, intlUtils } from '@navikt/fp-common';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport {\n    EgenNæringModalFormComponents,\n    EgenNæringModalFormData,\n    EgenNæringModalFormField,\n} from './egenNæringModalFormConfig';\nimport {\n    cleanupEgenNæringForm,\n    getInitialEgenNæringModalValues,\n    mapEgenNæringModalFormValuesToState,\n} from './egenNæringModalFormUtils';\nimport { Næring, Næringstype } from 'app/context/types/Næring';\nimport egenNæringModalQuestionsConfig from './egenNæringModalQuestionsConfig';\nimport OrgnummerEllerLand from './components/OrgnummerEllerLand';\nimport {\n    validateEgenNæringFom,\n    validateEgenNæringTom,\n    validateEgenNæringForklaringTilEndring,\n    validateEgenNæringEndringAvInntektsDato,\n    validateEgenNæringYrkesAktivDatoDato,\n    validateNumber,\n} from './validation/egenNæringValidation';\nimport dayjs from 'dayjs';\nimport { validateRequiredTextInputField } from 'app/utils/validationUtil';\nimport { BodyShort, Button, Heading, Modal, ReadMore } from '@navikt/ds-react';\n\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\n\ninterface Props {\n    isOpen: boolean;\n    title: string;\n    onRequestClose: () => void;\n    selectedNæring?: Næring;\n    addNæring: (næring: Næring) => void;\n    editNæring: (næring: Næring) => void;\n}\n\nconst EgenNæringModal: FunctionComponent<Props> = ({\n    isOpen,\n    title,\n    onRequestClose,\n    selectedNæring,\n    addNæring,\n    editNæring,\n}) => {\n    const intl = useIntl();\n\n    const onValidSubmit = (values: Partial<EgenNæringModalFormData>) => {\n        if (!selectedNæring) {\n            addNæring(mapEgenNæringModalFormValuesToState(values));\n        } else {\n            editNæring(mapEgenNæringModalFormValuesToState(values));\n        }\n        onRequestClose();\n    };\n\n    const navnPåNæringLabel = intlUtils(intl, 'inntektsinformasjon.egenNæringModal.navnPåNæring');\n    const varigEndringForklaringLabel = intlUtils(\n        intl,\n        'inntektsinformasjon.egenNæringModal.varigEndringAvNæringsinntektForklaring',\n    );\n\n    return (\n        <Modal width=\"medium\" open={isOpen} aria-label={title} onClose={onRequestClose}>\n            <Modal.Header>\n                <Heading size=\"small\">\n                    <FormattedMessage id=\"inntektsinformasjon.egenNæringModal.tittel\" />\n                </Heading>\n            </Modal.Header>\n            <Modal.Body>\n                <EgenNæringModalFormComponents.FormikWrapper\n                    initialValues={getInitialEgenNæringModalValues(selectedNæring)}\n                    onSubmit={(values: Partial<EgenNæringModalFormData>) => onValidSubmit(values)}\n                    renderForm={({ values: formValues }) => {\n                        const visibility = egenNæringModalQuestionsConfig.getVisbility(\n                            formValues as EgenNæringModalFormData,\n                        );\n\n                        return (\n                            <EgenNæringModalFormComponents.Form\n                                includeButtons={false}\n                                cleanup={(values) => cleanupEgenNæringForm(values, visibility)}\n                                includeValidationSummary={true}\n                            >\n                                <Block padBottom=\"l\" visible={visibility.isVisible(EgenNæringModalFormField.type)}>\n                                    <EgenNæringModalFormComponents.RadioGroup\n                                        name={EgenNæringModalFormField.type}\n                                        legend={intlUtils(intl, 'inntektsinformasjon.egenNæringModal.næringstype')}\n                                        radios={[\n                                            {\n                                                label: intlUtils(\n                                                    intl,\n                                                    'inntektsinformasjon.egenNæringModal.næringstype.dagmamma',\n                                                ),\n                                                value: Næringstype.DAGMAMMA,\n                                            },\n                                            {\n                                                label: intlUtils(\n                                                    intl,\n                                                    'inntektsinformasjon.egenNæringModal.næringstype.fiske',\n                                                ),\n                                                value: Næringstype.FISKER,\n                                            },\n                                            {\n                                                label: intlUtils(\n                                                    intl,\n                                                    'inntektsinformasjon.egenNæringModal.næringstype.jordbrukSkogbruk',\n                                                ),\n                                                value: Næringstype.JORDBRUK,\n                                            },\n                                            {\n                                                label: intlUtils(\n                                                    intl,\n                                                    'inntektsinformasjon.egenNæringModal.næringstype.annen',\n                                                ),\n                                                value: Næringstype.ANNET,\n                                            },\n                                        ]}\n                                    />\n                                </Block>\n                                <Block\n                                    padBottom=\"l\"\n                                    visible={visibility.isVisible(EgenNæringModalFormField.navnPåNæringen)}\n                                >\n                                    <EgenNæringModalFormComponents.TextField\n                                        name={EgenNæringModalFormField.navnPåNæringen}\n                                        label={navnPåNæringLabel}\n                                        maxLength={100}\n                                        validate={validateRequiredTextInputField(navnPåNæringLabel, intl)}\n                                    />\n                                </Block>\n                                <Block\n                                    padBottom=\"l\"\n                                    visible={visibility.isVisible(EgenNæringModalFormField.registrertINorge)}\n                                >\n                                    <EgenNæringModalFormComponents.YesOrNoQuestion\n                                        name={EgenNæringModalFormField.registrertINorge}\n                                        legend={intlUtils(\n                                            intl,\n                                            'inntektsinformasjon.egenNæringModal.erNæringenRegistrertINorge',\n                                            {\n                                                navnPåNæringen: formValues.navnPåNæringen,\n                                            },\n                                        )}\n                                        validate={(value: YesOrNo) => {\n                                            if (value === YesOrNo.UNANSWERED) {\n                                                return intlUtils(\n                                                    intl,\n                                                    'valideringsfeil.inntektsinformasjon.egenNæring.registrertINorge',\n                                                );\n                                            }\n\n                                            return undefined;\n                                        }}\n                                    />\n                                </Block>\n                                <OrgnummerEllerLand visibility={visibility} />\n                                <Block padBottom=\"l\" visible={visibility.isVisible(EgenNæringModalFormField.fom)}>\n                                    <EgenNæringModalFormComponents.DatePicker\n                                        name={EgenNæringModalFormField.fom}\n                                        label={intlUtils(\n                                            intl,\n                                            'inntektsinformasjon.egenNæringModal.startetNæring.fom',\n                                            {\n                                                navnPåNæringen: formValues.navnPåNæringen,\n                                            },\n                                        )}\n                                        placeholder=\"dd.mm.åååå\"\n                                        fullscreenOverlay={true}\n                                        showYearSelector={true}\n                                        validate={validateEgenNæringFom(intl, formValues.tom!)}\n                                        maxDate={dayjs().toDate()}\n                                    />\n                                </Block>\n                                <Block padBottom=\"l\" visible={visibility.isVisible(EgenNæringModalFormField.pågående)}>\n                                    <EgenNæringModalFormComponents.YesOrNoQuestion\n                                        name={EgenNæringModalFormField.pågående}\n                                        legend={intlUtils(\n                                            intl,\n                                            'inntektsinformasjon.egenNæringModal.startetNæring.pågående',\n                                            {\n                                                navnPåNæringen: formValues.navnPåNæringen,\n                                            },\n                                        )}\n                                    />\n                                </Block>\n                                <Block padBottom=\"l\" visible={visibility.isVisible(EgenNæringModalFormField.tom)}>\n                                    <EgenNæringModalFormComponents.DatePicker\n                                        name={EgenNæringModalFormField.tom}\n                                        label={intlUtils(\n                                            intl,\n                                            'inntektsinformasjon.egenNæringModal.startetNæring.tom',\n                                            {\n                                                navnPåNæringen: formValues.navnPåNæringen,\n                                            },\n                                        )}\n                                        placeholder=\"dd.mm.åååå\"\n                                        fullscreenOverlay={true}\n                                        showYearSelector={true}\n                                        validate={validateEgenNæringTom(intl, formValues.fom!)}\n                                        maxDate={dayjs().toDate()}\n                                        minDate={dayjs(formValues.fom).toDate()}\n                                    />\n                                </Block>\n                                <Block\n                                    padBottom=\"l\"\n                                    visible={visibility.isVisible(EgenNæringModalFormField.næringsresultat)}\n                                >\n                                    <EgenNæringModalFormComponents.NumberInput\n                                        name={EgenNæringModalFormField.næringsresultat}\n                                        label={intlUtils(intl, 'inntektsinformasjon.egenNæringModal.næringsinntekt')}\n                                        validate={validateNumber(\n                                            intl,\n                                            'valideringsfeil.inntektsinformasjon.næringsinntekt.ugyldigFormat',\n                                        )}\n                                    />\n                                    <ReadMore\n                                        header={intlUtils(\n                                            intl,\n                                            'inntektsinformasjon.egenNæringModal.næringsinntekt.info.apneLabel',\n                                        )}\n                                    >\n                                        <BodyShort>\n                                            <FormattedMessage id=\"inntektsinformasjon.egenNæringModal.næringsinntekt.info\" />\n                                        </BodyShort>\n                                    </ReadMore>\n                                </Block>\n                                <Block\n                                    padBottom=\"l\"\n                                    visible={visibility.isVisible(\n                                        EgenNæringModalFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene,\n                                    )}\n                                >\n                                    <EgenNæringModalFormComponents.YesOrNoQuestion\n                                        name={\n                                            EgenNæringModalFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene\n                                        }\n                                        legend={intlUtils(\n                                            intl,\n                                            'inntektsinformasjon.egenNæringModal.blittYrkesaktivSiste3År',\n                                        )}\n                                    />\n                                    <ReadMore\n                                        header={intlUtils(\n                                            intl,\n                                            'inntektsinformasjon.egenNæringModal.blittYrkesaktivSiste3År.info.apneLabel',\n                                        )}\n                                    >\n                                        <BodyShort>\n                                            <FormattedMessage id=\"inntektsinformasjon.egenNæringModal.blittYrkesaktivSiste3År.info\" />\n                                        </BodyShort>\n                                    </ReadMore>\n                                </Block>\n                                <Block\n                                    padBottom=\"l\"\n                                    visible={visibility.isVisible(EgenNæringModalFormField.yrkesAktivDato)}\n                                >\n                                    <EgenNæringModalFormComponents.DatePicker\n                                        name={EgenNæringModalFormField.yrkesAktivDato}\n                                        label={intlUtils(intl, 'inntektsinformasjon.egenNæringModal.yrkesaktivDato')}\n                                        placeholder=\"dd.mm.åååå\"\n                                        fullscreenOverlay={true}\n                                        showYearSelector={true}\n                                        validate={validateEgenNæringYrkesAktivDatoDato(intl)}\n                                        maxDate={dayjs().toDate()}\n                                    />\n                                </Block>\n                                <Block\n                                    padBottom=\"l\"\n                                    visible={visibility.isVisible(\n                                        EgenNæringModalFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår,\n                                    )}\n                                >\n                                    <EgenNæringModalFormComponents.YesOrNoQuestion\n                                        name={EgenNæringModalFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår}\n                                        legend={intlUtils(\n                                            intl,\n                                            'inntektsinformasjon.egenNæringModal.varigEndringAvNæringsinntekt',\n                                        )}\n                                    />\n                                    <ReadMore\n                                        header={intlUtils(\n                                            intl,\n                                            'inntektsinformasjon.egenNæringModal.varigEndringAvNæringsinntekt.readmoreTittel',\n                                        )}\n                                    >\n                                        <BodyShort>\n                                            <FormattedMessage id=\"inntektsinformasjon.egenNæringModal.varigEndringAvNæringsinntekt.readmoreTekst\" />\n                                        </BodyShort>\n                                    </ReadMore>\n                                </Block>\n                                <Block\n                                    padBottom=\"l\"\n                                    visible={visibility.isVisible(EgenNæringModalFormField.datoForEndring)}\n                                >\n                                    <EgenNæringModalFormComponents.DatePicker\n                                        name={EgenNæringModalFormField.datoForEndring}\n                                        label={intlUtils(\n                                            intl,\n                                            'inntektsinformasjon.egenNæringModal.varigEndringAvNæringsinntektDato',\n                                        )}\n                                        placeholder=\"dd.mm.åååå\"\n                                        fullscreenOverlay={true}\n                                        showYearSelector={true}\n                                        validate={validateEgenNæringEndringAvInntektsDato(intl)}\n                                        maxDate={dayjs().toDate()}\n                                    />\n                                </Block>\n                                <Block\n                                    padBottom=\"l\"\n                                    visible={visibility.isVisible(EgenNæringModalFormField.inntektEtterEndring)}\n                                >\n                                    <EgenNæringModalFormComponents.NumberInput\n                                        name={EgenNæringModalFormField.inntektEtterEndring}\n                                        label={intlUtils(\n                                            intl,\n                                            'inntektsinformasjon.egenNæringModal.inntektEtterEndring',\n                                        )}\n                                        validate={validateNumber(\n                                            intl,\n                                            'valideringsfeil.inntektsinformasjon.varigEndringAvInntekt.ugyldigFormat',\n                                        )}\n                                    />\n                                </Block>\n                                <Block\n                                    padBottom=\"l\"\n                                    visible={visibility.isVisible(EgenNæringModalFormField.forklaringEndring)}\n                                >\n                                    <EgenNæringModalFormComponents.Textarea\n                                        name={EgenNæringModalFormField.forklaringEndring}\n                                        label={varigEndringForklaringLabel}\n                                        maxLength={1000}\n                                        validate={validateEgenNæringForklaringTilEndring(\n                                            intl,\n                                            varigEndringForklaringLabel,\n                                        )}\n                                    />\n                                </Block>\n                                <Block visible={visibility.areAllQuestionsAnswered()} textAlignCenter={true}>\n                                    <Button>{intlUtils(intl, 'søknad.gåVidere')}</Button>\n                                </Block>\n                            </EgenNæringModalFormComponents.Form>\n                        );\n                    }}\n                />\n            </Modal.Body>\n        </Modal>\n    );\n};\n\nexport default EgenNæringModal;\n","import { Block, intlUtils } from '@navikt/fp-common';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { Næring } from 'app/context/types/Næring';\nimport { FunctionComponent, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport {\n    InntektsinformasjonFormComponents,\n    InntektsinformasjonFormData,\n    InntektsinformasjonFormField,\n} from '../../inntektsinformasjonFormConfig';\nimport EgenNæringListe from './EgenNæringListe';\nimport HvemKanDriveMedEgenNæring from './HvemKanDriveMedEgenNæring';\nimport EgenNæringModal from './modal/EgenNæringModal';\nimport { Button } from '@navikt/ds-react';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\n\ninterface Props {\n    egenNæringInformasjon: Næring[];\n    setEgenNæringsInformasjon: (oppdrag: Næring[]) => void;\n    visibility: QuestionVisibility<InntektsinformasjonFormField, undefined>;\n    formValues: InntektsinformasjonFormData;\n}\n\nconst EgenNæring: FunctionComponent<Props> = ({\n    egenNæringInformasjon,\n    setEgenNæringsInformasjon,\n    visibility,\n    formValues,\n}) => {\n    const intl = useIntl();\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [selectedNæring, setSelectedNæring] = useState<Næring>();\n\n    const handleOnLeggTil = () => {\n        setIsModalOpen(true);\n        setSelectedNæring(undefined);\n    };\n\n    const addNæring = (næring: Næring) => {\n        const updatedEgenNæringInformasjon = egenNæringInformasjon.concat(næring);\n\n        setEgenNæringsInformasjon(updatedEgenNæringInformasjon);\n    };\n\n    const deleteNæring = (næring: Næring) => {\n        const updatedEgenNæringInformasjon = egenNæringInformasjon.filter((nær) => nær !== næring);\n\n        setEgenNæringsInformasjon(updatedEgenNæringInformasjon);\n    };\n\n    const editNæring = (næring: Næring) => {\n        const updatedEgenNæringInformasjon = egenNæringInformasjon\n            .filter((nær) => nær !== selectedNæring)\n            .concat(næring);\n\n        setEgenNæringsInformasjon(updatedEgenNæringInformasjon);\n    };\n\n    const selectNæring = (næring: Næring) => {\n        setSelectedNæring(næring);\n        setIsModalOpen(true);\n    };\n\n    return (\n        <>\n            <Block visible={visibility.isVisible(InntektsinformasjonFormField.hattInntektSomNæringsdrivende)}>\n                <Block padBottom=\"l\">\n                    <InntektsinformasjonFormComponents.YesOrNoQuestion\n                        name={InntektsinformasjonFormField.hattInntektSomNæringsdrivende}\n                        legend={intlUtils(intl, 'inntektsinformasjon.harJobbetSomSelvstendigNæringsdrivendeSiste10Mnd')}\n                        validate={(hattInntektSomNæringsdrivende) => {\n                            if (hattInntektSomNæringsdrivende === YesOrNo.YES) {\n                                if (egenNæringInformasjon.length === 0) {\n                                    return intlUtils(\n                                        intl,\n                                        'valideringsfeil.inntektsinformasjon.andreInntekter.måHaVirksomhet',\n                                    );\n                                }\n                            }\n\n                            return undefined;\n                        }}\n                    />\n                    <HvemKanDriveMedEgenNæring />\n                </Block>\n            </Block>\n            {formValues.hattInntektSomNæringsdrivende === YesOrNo.YES && (\n                <div style={{ backgroundColor: '#f1f1f1', marginBottom: '1rem', padding: '1rem' }}>\n                    <EgenNæringModal\n                        isOpen={isModalOpen}\n                        title=\"Næringsinformasjon\"\n                        onRequestClose={() => setIsModalOpen(false)}\n                        selectedNæring={selectedNæring}\n                        addNæring={addNæring}\n                        editNæring={editNæring}\n                    />\n                    <Block padBottom=\"l\" visible={egenNæringInformasjon.length > 0}>\n                        <EgenNæringListe\n                            næringsInformasjon={egenNæringInformasjon}\n                            deleteNæring={deleteNæring}\n                            selectNæring={selectNæring}\n                        />\n                    </Block>\n                    <Button type=\"button\" onClick={handleOnLeggTil}>\n                        <FormattedMessage id=\"inntektsinformasjon.leggTilVirksomhet\" />\n                    </Button>\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default EgenNæring;\n","import { isISODateString } from '@navikt/ds-datepicker';\nimport { hasValue, intlUtils } from '@navikt/fp-common';\nimport dayjs from 'dayjs';\nimport { IntlShape } from 'react-intl';\n\nexport const validateFrilansoppstartsDato = (intl: IntlShape) => (oppstartsdato: string) => {\n    if (!hasValue(oppstartsdato)) {\n        return intlUtils(intl, 'valideringsfeil.inntektsinformasjon.frilansoppstartsDato.påkrevd');\n    }\n\n    if (!isISODateString(oppstartsdato)) {\n        return intlUtils(intl, 'valideringsfeil.inntektsinformasjon.frilansoppstartsDato.ugyldigDatoFormat');\n    }\n\n    if (dayjs().isBefore(dayjs(oppstartsdato), 'day')) {\n        return intlUtils(intl, 'valideringsfeil.inntektsinformasjon.frilansoppstartsDato.kanIkkeVæreFremITid');\n    }\n\n    return undefined;\n};\n","import { BodyShort, Link, ReadMore } from '@navikt/ds-react';\nimport { Block, intlUtils, links } from '@navikt/fp-common';\n\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nconst HvemKanVæreFrilanser = () => {\n    const intl = useIntl();\n\n    return (\n        <ReadMore header={intlUtils(intl, 'inntektsinformasjon.harDuJobbetSomFrilansSiste10Mnd.apneLabel')}>\n            <div>\n                <Block padBottom=\"l\">\n                    <BodyShort>\n                        <FormattedMessage id=\"inntektsinformasjon.harDuJobbetSomFrilansSiste10Mnd.infoboksTekst.del1\" />\n                    </BodyShort>\n                </Block>\n                <Block padBottom=\"l\">\n                    <BodyShort>\n                        <FormattedMessage id=\"inntektsinformasjon.harDuJobbetSomFrilansSiste10Mnd.infoboksTekst.del2\" />\n                    </BodyShort>\n                </Block>\n                <BodyShort>\n                    <FormattedMessage\n                        id=\"inntektsinformasjon.harDuJobbetSomFrilansSiste10Mnd.infoboksTekst.del3\"\n                        values={{\n                            a: (msg) => (\n                                <Link href={links.frilanserInfoBoks} rel=\"noreferrer\" target=\"_blank\">\n                                    {msg}\n                                </Link>\n                            ),\n                        }}\n                    />\n                </BodyShort>\n            </div>\n        </ReadMore>\n    );\n};\n\nexport default HvemKanVæreFrilanser;\n","import { Block, date20YearsAgo, dateToday, intlUtils } from '@navikt/fp-common';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport {\n    InntektsinformasjonFormComponents,\n    InntektsinformasjonFormData,\n    InntektsinformasjonFormField,\n} from '../../inntektsinformasjonFormConfig';\nimport { validateFrilansoppstartsDato } from '../../validation/inntektsinformasjonValidering';\nimport HvemKanVæreFrilanser from './HvemKanVæreFrilanser';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\n\ninterface Props {\n    visibility: QuestionVisibility<InntektsinformasjonFormField, undefined>;\n    formValues: InntektsinformasjonFormData;\n}\n\nconst Frilans: FunctionComponent<Props> = ({ visibility, formValues }) => {\n    const intl = useIntl();\n\n    return (\n        <>\n            <Block padBottom=\"l\" visible={visibility.isVisible(InntektsinformasjonFormField.hattInntektSomFrilans)}>\n                <InntektsinformasjonFormComponents.YesOrNoQuestion\n                    name={InntektsinformasjonFormField.hattInntektSomFrilans}\n                    legend={intlUtils(intl, 'inntektsinformasjon.harDuJobbetSomFrilansSiste10Mnd')}\n                />\n                <HvemKanVæreFrilanser />\n            </Block>\n\n            {formValues.hattInntektSomFrilans === YesOrNo.YES && (\n                <div style={{ backgroundColor: '#f1f1f1', marginBottom: '1rem', padding: '1rem' }}>\n                    <Block\n                        padBottom=\"l\"\n                        visible={visibility.isVisible(InntektsinformasjonFormField.frilansOppstartsDato)}\n                    >\n                        <InntektsinformasjonFormComponents.DatePicker\n                            name={InntektsinformasjonFormField.frilansOppstartsDato}\n                            label={intlUtils(intl, 'inntektsinformasjon.frilans.oppstart')}\n                            validate={validateFrilansoppstartsDato(intl)}\n                            maxDate={dateToday}\n                            minDate={date20YearsAgo}\n                            showYearSelector={true}\n                            placeholder={'dd.mm.åååå'}\n                        />\n                    </Block>\n                    <Block\n                        padBottom=\"l\"\n                        visible={visibility.isVisible(InntektsinformasjonFormField.jobberFremdelesSomFrilanser)}\n                    >\n                        <InntektsinformasjonFormComponents.YesOrNoQuestion\n                            name={InntektsinformasjonFormField.jobberFremdelesSomFrilanser}\n                            legend={intlUtils(intl, 'inntektsinformasjon.frilans.jobberFremdelesSomFrilans')}\n                        />\n                    </Block>\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default Frilans;\n","import { FormattedMessage } from 'react-intl';\nimport { Block, links } from '@navikt/fp-common';\nimport { BodyLong, ExpansionCard, Label } from '@navikt/ds-react';\n\nconst InfoTilFiskere = () => {\n    return (\n        <ExpansionCard aria-label=\"Info til fiskere\">\n            <ExpansionCard.Header>\n                <ExpansionCard.Title as=\"h2\">\n                    <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.tittel\" />\n                </ExpansionCard.Title>\n                <ExpansionCard.Description>\n                    <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.description\" />\n                </ExpansionCard.Description>\n            </ExpansionCard.Header>\n            <ExpansionCard.Content>\n                <Block padBottom=\"l\">\n                    <BodyLong>\n                        <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.del1\" />\n                    </BodyLong>\n                </Block>\n                <Label as=\"h3\" style={{ marginBottom: '.5rem' }}>\n                    <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.hyre\" />\n                </Label>\n                <Block padBottom=\"l\">\n                    <BodyLong>\n                        <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.del2\" />\n                    </BodyLong>\n                </Block>\n                <Block padBottom=\"l\">\n                    <BodyLong>\n                        <FormattedMessage\n                            id=\"inntektsinformasjon.infoTilFiskere.del3\"\n                            values={{\n                                a: (msg: any) => (\n                                    <a\n                                        href={links.hvordanSendeInntektsmelding}\n                                        target=\"_blank\"\n                                        rel=\"noreferrer\"\n                                        className=\"lenke\"\n                                    >\n                                        {msg}\n                                    </a>\n                                ),\n                            }}\n                        />\n                    </BodyLong>\n                </Block>\n                <Label as=\"h3\" style={{ marginBottom: '.5rem' }}>\n                    <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.lott\" />\n                </Label>\n                <Block padBottom=\"l\">\n                    <BodyLong>\n                        <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.del4\" />\n                    </BodyLong>\n                </Block>\n                <Block padBottom=\"l\">\n                    <BodyLong>\n                        <FormattedMessage\n                            id=\"inntektsinformasjon.infoTilFiskere.del5\"\n                            values={{\n                                a: (msg: any) => (\n                                    <a href={links.omLottOgHyre} target=\"_blank\" rel=\"noreferrer\" className=\"lenke\">\n                                        {msg}\n                                    </a>\n                                ),\n                            }}\n                        />\n                    </BodyLong>\n                </Block>\n                <Label as=\"h3\" style={{ marginBottom: '.5rem' }}>\n                    <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.egenBåt\" />\n                </Label>\n                <Block padBottom=\"l\">\n                    <BodyLong>\n                        <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.del6\" />\n                    </BodyLong>\n                </Block>\n                <Label as=\"h3\" style={{ marginBottom: '.5rem' }}>\n                    <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.lottOgHyre\" />\n                </Label>\n                <Block padBottom=\"l\">\n                    <BodyLong>\n                        <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.del7\" />\n                    </BodyLong>\n                </Block>\n                <Block padBottom=\"l\">\n                    <BodyLong>\n                        <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.del8\" />\n                    </BodyLong>\n                </Block>\n                <Block padBottom=\"l\">\n                    <BodyLong>\n                        <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.del9\" />\n                    </BodyLong>\n                </Block>\n                <Block margin=\"none\">\n                    <BodyLong>\n                        <FormattedMessage\n                            id=\"inntektsinformasjon.infoTilFiskere.del5\"\n                            values={{\n                                a: (msg: any) => (\n                                    <a href={links.omLottOgHyre} target=\"_blank\" rel=\"noreferrer\" className=\"lenke\">\n                                        {msg}\n                                    </a>\n                                ),\n                            }}\n                        />\n                    </BodyLong>\n                </Block>\n            </ExpansionCard.Content>\n        </ExpansionCard>\n    );\n};\n\nexport default InfoTilFiskere;\n","import { AnnenInntekt, AnnenInntektType } from 'app/context/types/AnnenInntekt';\nimport { Frilans, FrilansOppdrag } from 'app/context/types/Frilans';\nimport { Næring } from 'app/context/types/Næring';\nimport Søker from 'app/context/types/Søker';\nimport { InntektsinformasjonFormData, InntektsinformasjonFormField } from './inntektsinformasjonFormConfig';\nimport { YesOrNo, dateToISOString } from '@navikt/sif-common-formik-ds/lib';\nimport { replaceInvisibleCharsWithSpace } from '@navikt/fp-common/src/common/utils/stringUtils';\nimport {\n    ISOStringToDate,\n    convertBooleanOrUndefinedToYesOrNo,\n    convertYesOrNoOrUndefinedToBoolean,\n} from '@navikt/fp-common';\n\nexport const initialInntektsinformasjonFormValues: InntektsinformasjonFormData = {\n    [InntektsinformasjonFormField.hattInntektSomFrilans]: YesOrNo.UNANSWERED,\n    [InntektsinformasjonFormField.hattInntektSomNæringsdrivende]: YesOrNo.UNANSWERED,\n    [InntektsinformasjonFormField.hattAndreInntekter]: YesOrNo.UNANSWERED,\n    [InntektsinformasjonFormField.frilansOppstartsDato]: '',\n    [InntektsinformasjonFormField.jobberFremdelesSomFrilanser]: YesOrNo.UNANSWERED,\n};\n\nexport const cleanupInvisibleCharsFromNæring = (næring: Næring): Næring => {\n    const cleanedNavn = replaceInvisibleCharsWithSpace(næring.navnPåNæringen);\n    if (næring.hattVarigEndringAvNæringsinntektSiste4Kalenderår) {\n        const cleanedEndringInformasjon = {\n            ...næring.endringAvNæringsinntektInformasjon!,\n            forklaring: replaceInvisibleCharsWithSpace(næring.endringAvNæringsinntektInformasjon!.forklaring),\n        };\n\n        return {\n            ...næring,\n            navnPåNæringen: cleanedNavn,\n            endringAvNæringsinntektInformasjon: cleanedEndringInformasjon,\n        };\n    }\n    return {\n        ...næring,\n        navnPåNæringen: cleanedNavn,\n    };\n};\n\nexport const cleanupInvisibleCharsFromFrilansinformasjon = (frilansoppdrag: FrilansOppdrag[]): FrilansOppdrag[] => {\n    return frilansoppdrag.map((oppdrag: FrilansOppdrag) => ({\n        ...oppdrag,\n        navnPåArbeidsgiver: replaceInvisibleCharsWithSpace(oppdrag.navnPåArbeidsgiver),\n    }));\n};\n\nexport const cleanupInvisibleCharsFromAndreInntekter = (andreInntekter: AnnenInntekt[]): AnnenInntekt[] => {\n    return andreInntekter.map((inntekt) =>\n        inntekt.type === AnnenInntektType.JOBB_I_UTLANDET\n            ? {\n                  ...inntekt,\n                  arbeidsgiverNavn: replaceInvisibleCharsWithSpace(inntekt.arbeidsgiverNavn),\n              }\n            : inntekt,\n    );\n};\n\nexport const mapInntektsinformasjonFormDataToState = (\n    values: Partial<InntektsinformasjonFormData>,\n    søker: Søker,\n    andreInntekter?: AnnenInntekt[],\n    næringer?: Næring[],\n): Søker => {\n    let frilansInformasjon: Frilans | undefined = undefined;\n\n    if (values.hattInntektSomFrilans === YesOrNo.YES) {\n        frilansInformasjon = {\n            oppstart: ISOStringToDate(values.frilansOppstartsDato)!,\n            jobberFremdelesSomFrilans: convertYesOrNoOrUndefinedToBoolean(values.jobberFremdelesSomFrilanser)!,\n        };\n    }\n\n    return {\n        erAleneOmOmsorg: søker.erAleneOmOmsorg,\n        harHattAnnenInntektSiste10Mnd: convertYesOrNoOrUndefinedToBoolean(values.hattAndreInntekter)!,\n        harJobbetSomFrilansSiste10Mnd: convertYesOrNoOrUndefinedToBoolean(values.hattInntektSomFrilans)!,\n        harJobbetSomSelvstendigNæringsdrivendeSiste10Mnd: convertYesOrNoOrUndefinedToBoolean(\n            values.hattInntektSomNæringsdrivende,\n        )!,\n        andreInntekterSiste10Mnd:\n            values.hattAndreInntekter === YesOrNo.YES ? cleanupInvisibleCharsFromAndreInntekter(andreInntekter!) : [],\n        selvstendigNæringsdrivendeInformasjon:\n            values.hattInntektSomNæringsdrivende === YesOrNo.YES\n                ? næringer!.map((næring) => cleanupInvisibleCharsFromNæring(næring))\n                : [],\n        frilansInformasjon: values.hattInntektSomFrilans === YesOrNo.YES ? frilansInformasjon : undefined,\n    };\n};\n\nexport const getInitialInntektsinformasjonFormValues = (søker: Søker): InntektsinformasjonFormData => {\n    return {\n        ...initialInntektsinformasjonFormValues,\n        hattAndreInntekter: convertBooleanOrUndefinedToYesOrNo(søker.harHattAnnenInntektSiste10Mnd),\n        hattInntektSomNæringsdrivende: convertBooleanOrUndefinedToYesOrNo(\n            søker.harJobbetSomSelvstendigNæringsdrivendeSiste10Mnd,\n        ),\n        hattInntektSomFrilans: convertBooleanOrUndefinedToYesOrNo(søker.harJobbetSomFrilansSiste10Mnd),\n        frilansOppstartsDato: søker.frilansInformasjon ? dateToISOString(søker.frilansInformasjon.oppstart) : '',\n        jobberFremdelesSomFrilanser: søker.frilansInformasjon\n            ? convertBooleanOrUndefinedToYesOrNo(søker.frilansInformasjon.jobberFremdelesSomFrilans)\n            : YesOrNo.UNANSWERED,\n    };\n};\n","import { hasValue } from '@navikt/fp-common';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport { InntektsinformasjonFormData, InntektsinformasjonFormField } from './inntektsinformasjonFormConfig';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\n\nconst InntektsinformasjonFormConfig: QuestionConfig<InntektsinformasjonFormData, InntektsinformasjonFormField> = {\n    [InntektsinformasjonFormField.hattInntektSomFrilans]: {\n        isIncluded: () => true,\n        isAnswered: ({ hattInntektSomFrilans }) => hattInntektSomFrilans !== YesOrNo.UNANSWERED,\n    },\n    [InntektsinformasjonFormField.frilansOppstartsDato]: {\n        isIncluded: ({ hattInntektSomFrilans }) => hattInntektSomFrilans === YesOrNo.YES,\n        isAnswered: ({ frilansOppstartsDato }) => hasValue(frilansOppstartsDato),\n        visibilityFilter: ({ hattInntektSomFrilans }) => hattInntektSomFrilans === YesOrNo.YES,\n    },\n    [InntektsinformasjonFormField.jobberFremdelesSomFrilanser]: {\n        isIncluded: ({ hattInntektSomFrilans }) => hattInntektSomFrilans === YesOrNo.YES,\n        isAnswered: ({ jobberFremdelesSomFrilanser }) => jobberFremdelesSomFrilanser !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ frilansOppstartsDato }) => hasValue(frilansOppstartsDato),\n    },\n    [InntektsinformasjonFormField.hattInntektSomNæringsdrivende]: {\n        isIncluded: () => true,\n        isAnswered: ({ hattInntektSomNæringsdrivende }) => hattInntektSomNæringsdrivende !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ hattInntektSomFrilans }) => hattInntektSomFrilans !== YesOrNo.UNANSWERED,\n    },\n    [InntektsinformasjonFormField.hattAndreInntekter]: {\n        isIncluded: () => true,\n        isAnswered: ({ hattAndreInntekter }) => hattAndreInntekter !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ hattInntektSomNæringsdrivende }) => hattInntektSomNæringsdrivende !== YesOrNo.UNANSWERED,\n    },\n};\n\nconst inntektsinforMasjonQuestionsConfig = Questions<InntektsinformasjonFormData, InntektsinformasjonFormField>(\n    InntektsinformasjonFormConfig,\n);\n\nexport default inntektsinforMasjonQuestionsConfig;\n","import { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { BodyShort, Button } from '@navikt/ds-react';\nimport { notEmpty } from '@navikt/fp-validation';\nimport {\n    Block,\n    getAktiveArbeidsforhold,\n    intlUtils,\n    isFarEllerMedmor,\n    ISOStringToDate,\n    Step,\n    StepButtonWrapper,\n    Søkerinfo,\n} from '@navikt/fp-common';\nimport SøknadRoutes from 'app/routes/routes';\nimport stepConfig from '../stepsConfig';\nimport AndreInntekter from './components/andre-inntekter/AndreInntekter';\nimport ArbeidsforholdInformasjon from './components/arbeidsforhold-informasjon/ArbeidsforholdInformasjon';\nimport EgenNæring from './components/egen-næring/EgenNæring';\nimport Frilans from './components/frilans/Frilans';\nimport InfoTilFiskere from './components/info-til-fiskere/InfoTilFiskere';\nimport { InntektsinformasjonFormComponents, InntektsinformasjonFormData } from './inntektsinformasjonFormConfig';\nimport {\n    getInitialInntektsinformasjonFormValues,\n    mapInntektsinformasjonFormDataToState,\n} from './inntektsinformasjonFormUtils';\nimport inntektsinforMasjonQuestionsConfig from './inntektsInformasjonQuestionsConfig';\nimport useFortsettSøknadSenere from 'app/utils/hooks/useFortsettSøknadSenere';\nimport { getFamiliehendelsedato } from 'app/utils/barnUtils';\nimport { Opphold } from 'app/context/types/InformasjonOmUtenlandsopphold';\nimport { ContextDataType, useContextGetData, useContextSaveData } from 'app/context/FpDataContext';\nimport BackButton from '../BackButton';\n\nconst findPreviousUrl = (informasjonOmUtenlandsopphold: Opphold) => {\n    if (!informasjonOmUtenlandsopphold.iNorgeNeste12Mnd) {\n        return SøknadRoutes.SENERE_UTENLANDSOPPHOLD;\n    } else if (!informasjonOmUtenlandsopphold.iNorgeSiste12Mnd) {\n        return SøknadRoutes.TIDLIGERE_UTENLANDSOPPHOLD;\n    }\n    return SøknadRoutes.UTENLANDSOPPHOLD;\n};\n\ntype Props = {\n    søkerInfo: Søkerinfo;\n    mellomlagreSøknadOgNaviger: () => Promise<void>;\n    avbrytSøknad: () => void;\n};\n\nconst Inntektsinformasjon: React.FunctionComponent<Props> = ({\n    søkerInfo,\n    mellomlagreSøknadOgNaviger,\n    avbrytSøknad,\n}) => {\n    const intl = useIntl();\n    const onFortsettSøknadSenere = useFortsettSøknadSenere();\n    const [isSubmitting, setIsSubmitting] = useState(false);\n\n    const søkersituasjon = notEmpty(useContextGetData(ContextDataType.SØKERSITUASJON));\n    const barn = notEmpty(useContextGetData(ContextDataType.OM_BARNET));\n    const søker = notEmpty(useContextGetData(ContextDataType.SØKER));\n    const utenlandsopphold = notEmpty(useContextGetData(ContextDataType.UTENLANDSOPPHOLD));\n\n    const oppdaterSøker = useContextSaveData(ContextDataType.SØKER);\n    const oppdaterAppRoute = useContextSaveData(ContextDataType.APP_ROUTE);\n\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const erAdopsjon = søkersituasjon.situasjon === 'adopsjon';\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const [egenNæringInformasjon, setEgenNæringsInformasjon] = useState(\n        søker.selvstendigNæringsdrivendeInformasjon ? søker.selvstendigNæringsdrivendeInformasjon : [],\n    );\n    const [andreInntekterInformasjon, setAndreInntekterInformasjon] = useState(\n        søker.andreInntekterSiste10Mnd ? søker.andreInntekterSiste10Mnd : [],\n    );\n\n    const onSubmit = (values: Partial<InntektsinformasjonFormData>) => {\n        setIsSubmitting(true);\n\n        const updatedSøker = mapInntektsinformasjonFormDataToState(\n            values,\n            søker,\n            andreInntekterInformasjon,\n            egenNæringInformasjon,\n        );\n\n        oppdaterSøker(updatedSøker);\n\n        oppdaterAppRoute(SøknadRoutes.OPPSUMMERING);\n\n        mellomlagreSøknadOgNaviger();\n    };\n\n    return (\n        <InntektsinformasjonFormComponents.FormikWrapper\n            initialValues={getInitialInntektsinformasjonFormValues(søker)}\n            onSubmit={onSubmit}\n            renderForm={({ values: formValues }) => {\n                const visibility = inntektsinforMasjonQuestionsConfig.getVisbility(\n                    formValues as InntektsinformasjonFormData,\n                );\n\n                return (\n                    <Step\n                        bannerTitle={intlUtils(intl, 'søknad.pageheading')}\n                        activeStepId=\"inntektsinformasjon\"\n                        pageTitle={intlUtils(intl, 'søknad.inntektsinformasjon')}\n                        onCancel={avbrytSøknad}\n                        onContinueLater={onFortsettSøknadSenere}\n                        steps={stepConfig(intl, false)}\n                    >\n                        <InntektsinformasjonFormComponents.Form includeButtons={false} includeValidationSummary={true}>\n                            <Block padBottom=\"l\">\n                                <BodyShort>\n                                    Hvis du får utbetalinger fra NAV, trenger du ikke å opplyse om det i søknaden\n                                </BodyShort>\n                            </Block>\n\n                            <ArbeidsforholdInformasjon\n                                arbeidsforhold={getAktiveArbeidsforhold(\n                                    søkerInfo.arbeidsforhold,\n                                    erAdopsjon,\n                                    erFarEllerMedmor,\n                                    ISOStringToDate(familiehendelsesdato),\n                                )}\n                            />\n\n                            <Block padBottom=\"l\">\n                                <Frilans\n                                    visibility={visibility}\n                                    formValues={formValues as InntektsinformasjonFormData}\n                                />\n                            </Block>\n\n                            <Block padBottom=\"l\">\n                                <EgenNæring\n                                    egenNæringInformasjon={egenNæringInformasjon}\n                                    setEgenNæringsInformasjon={setEgenNæringsInformasjon}\n                                    visibility={visibility}\n                                    formValues={formValues as InntektsinformasjonFormData}\n                                />\n                            </Block>\n\n                            <Block padBottom=\"l\">\n                                <AndreInntekter\n                                    andreInntekterInformasjon={andreInntekterInformasjon}\n                                    setAndreInntekterInformasjon={setAndreInntekterInformasjon}\n                                    visibility={visibility}\n                                    formValues={formValues as InntektsinformasjonFormData}\n                                />\n                            </Block>\n\n                            <Block padBottom=\"l\">\n                                <InfoTilFiskere />\n                            </Block>\n\n                            <Block margin=\"xl\">\n                                <StepButtonWrapper>\n                                    <BackButton\n                                        mellomlagreSøknadOgNaviger={mellomlagreSøknadOgNaviger}\n                                        route={findPreviousUrl(utenlandsopphold)}\n                                    />\n                                    {visibility.areAllQuestionsAnswered() && (\n                                        <Button type=\"submit\" disabled={isSubmitting} loading={isSubmitting}>\n                                            {intlUtils(intl, 'søknad.gåVidere')}\n                                        </Button>\n                                    )}\n                                </StepButtonWrapper>\n                            </Block>\n                        </InntektsinformasjonFormComponents.Form>\n                    </Step>\n                );\n            }}\n        />\n    );\n};\n\nexport default Inntektsinformasjon;\n"],"names":["InntektsinformasjonFormField","InntektsinformasjonFormComponents","getTypedFormComponents","getTitle","type","intl","AnnenInntektType","intlUtils","AndreInntekterListe","andreInntekter","deleteAnnenInntekt","selectAnnenInntekt","useIntl","jsx","annenInntekt","index","InteractiveListElement","formatTidsperiodeMedValgfriSluttdato","AndreInntekterFormField","AndreInntekterModalFormComponents","initialAndreInntekterFormValues","YesOrNo","getSkjemanummer","values","Skjemanummer","cleanupAndreInntekterForm","visibility","lagSendSenereDokumentNårIngenAndreFinnes","AttachmentType","getInitialAndreInntekterFormValues","convertBooleanOrUndefinedToYesOrNo","mapAnnenInntektModalValuesToState","convertYesOrNoOrUndefinedToBoolean","AndreInntekterModalFormConfig","hasValue","land","navnPåArbeidsgiver","fom","pågående","tom","andreInntekterModalQuestionsConfig","Questions","validateAnnenInntektFom","isISODateString","isDateInTheFuture","isDateABeforeDateB","validateAnnenInntektTom","AndreInntekterModal","isOpen","contentLabel","onRequestClose","selectedAnnenInntekt","addAnnenInntekt","editAnnenInntekt","onValidSubmit","getVeilederMessageId","navnPåArbeidsgiverLabel","jsxs","Modal","Heading","FormattedMessage","formValues","Block","validateRequiredTextInputField","dayjs","GuidePanel","FormikFileUploader","Button","AndreInntekter","andreInntekterInformasjon","setAndreInntekterInformasjon","isModalOpen","setIsModalOpen","useState","setSelectedAnnenInntekt","handleOnLeggTil","updatedandreInntekterInformasjon","updatedAndreInntekterInformasjon","inntekt","Fragment","hattAndreInntekter","ArbeidsforholdInformasjon","arbeidsforhold","harArbeidsforhold","Label","HarIkkeArbeidsforhold","HarArbeidsforhold","ReadMore","BodyShort","EgenNæringListe","næringsInformasjon","deleteNæring","selectNæring","næring","formatDate","HvemKanDriveMedEgenNæring","msg","Link","links","EgenNæringModalFormField","EgenNæringModalFormComponents","initialEgenNæringModalValues","cleanupEgenNæringForm","getInitialEgenNæringModalValues","dateToISOString","_a","mapEgenNæringModalFormValuesToState","endringAvNæringsinntektInformasjon","ISOStringToDate","erVirksomhetRegnetSomNyoppstartet","oppstartsdato","date4YearsAgo","EgenNæringModalFormConfig","navnPåNæringen","registrertINorge","orgnr","næringsresultat","harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene","yrkesAktivDato","hattVarigEndringAvNæringsinntektSiste4Kalenderår","datoForEndring","inntektEtterEndring","forklaringEndring","egenNæringModalQuestionsConfig","validateEgenNæringFom","validateEgenNæringTom","validateEgenNæringOrgnr","erGyldigNorskOrgnummer","validateEgenNæringForklaringTilEndring","label","forklaring","validateTextInputField","validateEgenNæringEndringAvInntektsDato","dato","validateEgenNæringYrkesAktivDatoDato","validateNumber","errorKey","value","valueNumber","getNumberFromNumberInputValue","OrgnummerEllerLand","EgenNæringModal","title","selectedNæring","addNæring","editNæring","navnPåNæringLabel","varigEndringForklaringLabel","Næringstype","EgenNæring","egenNæringInformasjon","setEgenNæringsInformasjon","setSelectedNæring","updatedEgenNæringInformasjon","nær","hattInntektSomNæringsdrivende","validateFrilansoppstartsDato","HvemKanVæreFrilanser","Frilans","dateToday","date20YearsAgo","InfoTilFiskere","ExpansionCard","BodyLong","initialInntektsinformasjonFormValues","cleanupInvisibleCharsFromNæring","cleanedNavn","replaceInvisibleCharsWithSpace","cleanedEndringInformasjon","cleanupInvisibleCharsFromAndreInntekter","mapInntektsinformasjonFormDataToState","søker","næringer","frilansInformasjon","getInitialInntektsinformasjonFormValues","InntektsinformasjonFormConfig","hattInntektSomFrilans","frilansOppstartsDato","jobberFremdelesSomFrilanser","inntektsinforMasjonQuestionsConfig","findPreviousUrl","informasjonOmUtenlandsopphold","SøknadRoutes","Inntektsinformasjon","søkerInfo","mellomlagreSøknadOgNaviger","avbrytSøknad","onFortsettSøknadSenere","useFortsettSøknadSenere","isSubmitting","setIsSubmitting","søkersituasjon","notEmpty","useContextGetData","ContextDataType","barn","utenlandsopphold","oppdaterSøker","useContextSaveData","oppdaterAppRoute","familiehendelsesdato","getFamiliehendelsedato","erAdopsjon","erFarEllerMedmor","isFarEllerMedmor","onSubmit","updatedSøker","Step","stepConfig","getAktiveArbeidsforhold","StepButtonWrapper","BackButton","Inntektsinformasjon$1"],"mappings":"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"}